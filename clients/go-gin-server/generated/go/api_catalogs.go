/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type CatalogsAPI struct {
}

// Get /v5/catalogs
// List catalogs 
func (api *CatalogsAPI) CatalogsList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/product_groups/:product_group_id/products
// List products for a Product Group 
func (api *CatalogsAPI) CatalogsProductGroupPinsList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v5/catalogs/product_groups
// Create product group 
func (api *CatalogsAPI) CatalogsProductGroupsCreate(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /v5/catalogs/product_groups/:product_group_id
// Delete product group 
func (api *CatalogsAPI) CatalogsProductGroupsDelete(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/product_groups/:product_group_id
// Get product group 
func (api *CatalogsAPI) CatalogsProductGroupsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/product_groups
// List product groups 
func (api *CatalogsAPI) CatalogsProductGroupsList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/product_groups/:product_group_id/product_counts
// Get product counts for a Product Group 
func (api *CatalogsAPI) CatalogsProductGroupsProductCountsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /v5/catalogs/product_groups/:product_group_id
// Update product group 
func (api *CatalogsAPI) CatalogsProductGroupsUpdate(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/feeds/:feed_id/processing_results
// List processing results for a given feed 
func (api *CatalogsAPI) FeedProcessingResultsList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v5/catalogs/feeds
// Create feed 
func (api *CatalogsAPI) FeedsCreate(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /v5/catalogs/feeds/:feed_id
// Delete feed 
func (api *CatalogsAPI) FeedsDelete(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/feeds/:feed_id
// Get feed 
func (api *CatalogsAPI) FeedsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/feeds
// List feeds 
func (api *CatalogsAPI) FeedsList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /v5/catalogs/feeds/:feed_id
// Update feed 
func (api *CatalogsAPI) FeedsUpdate(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/items/batch/:batch_id
// Get catalogs item batch status 
func (api *CatalogsAPI) ItemsBatchGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v5/catalogs/items/batch
// Operate on item batch 
func (api *CatalogsAPI) ItemsBatchPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/items
// Get catalogs items 
func (api *CatalogsAPI) ItemsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /v5/catalogs/processing_results/:processing_result_id/item_issues
// List item issues for a given processing result 
func (api *CatalogsAPI) ItemsIssuesList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /v5/catalogs/products/get_by_product_group_filters
// List filtered products 
func (api *CatalogsAPI) ProductsByProductGroupFilterList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

