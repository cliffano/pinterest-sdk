/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * Type of account
     * @type {string}
     * @memberof Account
     */
    'account_type'?: AccountAccountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'profile_image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'website_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'username'?: string;
}

export const AccountAccountTypeEnum = {
    Pinner: 'PINNER',
    Business: 'BUSINESS'
} as const;

export type AccountAccountTypeEnum = typeof AccountAccountTypeEnum[keyof typeof AccountAccountTypeEnum];

/**
 * Ad group billable event type.
 * @export
 * @enum {string}
 */

export const ActionType = {
    Clickthrough: 'CLICKTHROUGH',
    Impression: 'IMPRESSION',
    VideoV50Mrc: 'VIDEO_V_50_MRC',
    BillableEngagement: 'BILLABLE_ENGAGEMENT'
} as const;

export type ActionType = typeof ActionType[keyof typeof ActionType];


/**
 * 
 * @export
 * @interface AdAccount
 */
export interface AdAccount {
    /**
     * 
     * @type {string}
     * @memberof AdAccount
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdAccount
     */
    'name'?: string;
    /**
     * 
     * @type {AdAccountOwner}
     * @memberof AdAccount
     */
    'owner'?: AdAccountOwner;
    /**
     * 
     * @type {Country}
     * @memberof AdAccount
     */
    'country'?: Country;
    /**
     * 
     * @type {Currency}
     * @memberof AdAccount
     */
    'currency'?: Currency;
}
/**
 * 
 * @export
 * @interface AdAccountOwner
 */
export interface AdAccountOwner {
    /**
     * Public username for the user account
     * @type {string}
     * @memberof AdAccountOwner
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface AdGroupResponse
 */
export interface AdGroupResponse {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupResponse
     */
    'name'?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupResponse
     */
    'status'?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'budget_in_micro_currency'?: number | null;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'bid_in_micro_currency'?: number | null;
    /**
     * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     * @type {string}
     * @memberof AdGroupResponse
     */
    'budget_type'?: AdGroupResponseBudgetTypeEnum;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'start_time'?: number | null;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'end_time'?: number | null;
    /**
     * Ad group targeting specification defining the ad group target audience. For example, \'{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}\'
     * @type {{ [key: string]: Array<string>; }}
     * @memberof AdGroupResponse
     */
    'targeting_spec'?: { [key: string]: Array<string>; };
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'lifetime_frequency_cap'?: number;
    /**
     * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
     * @type {TrackingUrls}
     * @memberof AdGroupResponse
     */
    'tracking_urls'?: TrackingUrls | null;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupResponse
     */
    'auto_targeting_enabled'?: boolean | null;
    /**
     * <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupResponse
     */
    'placement_group'?: PlacementGroupType;
    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     * @type {PacingDeliveryType}
     * @memberof AdGroupResponse
     */
    'pacing_delivery_type'?: PacingDeliveryType;
    /**
     * oCPM learn mode
     * @type {string}
     * @memberof AdGroupResponse
     */
    'conversion_learning_mode_type'?: AdGroupResponseConversionLearningModeTypeEnum;
    /**
     * Ad group summary status.
     * @type {AdGroupSummaryStatus}
     * @memberof AdGroupResponse
     */
    'summary_status'?: AdGroupSummaryStatus;
    /**
     * Feed Profile ID associated to the adgroup.
     * @type {string}
     * @memberof AdGroupResponse
     */
    'feed_profile_id'?: string;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupResponse
     */
    'campaign_id'?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupResponse
     */
    'billable_event'?: ActionType;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    'id'?: string;
    /**
     * Always \"adgroup\".
     * @type {string}
     * @memberof AdGroupResponse
     */
    'type'?: string;
    /**
     * Advertiser ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    'ad_account_id'?: string;
    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'created_time'?: number;
    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    'updated_time'?: number;
}

export const AdGroupResponseBudgetTypeEnum = {
    Daily: 'DAILY',
    Lifetime: 'LIFETIME',
    CboAdgroup: 'CBO_ADGROUP'
} as const;

export type AdGroupResponseBudgetTypeEnum = typeof AdGroupResponseBudgetTypeEnum[keyof typeof AdGroupResponseBudgetTypeEnum];
export const AdGroupResponseConversionLearningModeTypeEnum = {
    NotActive: 'NOT_ACTIVE',
    Active: 'ACTIVE',
    Null: 'null'
} as const;

export type AdGroupResponseConversionLearningModeTypeEnum = typeof AdGroupResponseConversionLearningModeTypeEnum[keyof typeof AdGroupResponseConversionLearningModeTypeEnum];

/**
 * 
 * @export
 * @interface AdGroupResponseAllOf
 */
export interface AdGroupResponseAllOf {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    'name'?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupResponseAllOf
     */
    'status'?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    'budget_in_micro_currency'?: number | null;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    'bid_in_micro_currency'?: number | null;
    /**
     * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    'budget_type'?: AdGroupResponseAllOfBudgetTypeEnum;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    'start_time'?: number | null;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    'end_time'?: number | null;
    /**
     * Ad group targeting specification defining the ad group target audience. For example, \'{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}\'
     * @type {{ [key: string]: Array<string>; }}
     * @memberof AdGroupResponseAllOf
     */
    'targeting_spec'?: { [key: string]: Array<string>; };
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    'lifetime_frequency_cap'?: number;
    /**
     * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
     * @type {TrackingUrls}
     * @memberof AdGroupResponseAllOf
     */
    'tracking_urls'?: TrackingUrls | null;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupResponseAllOf
     */
    'auto_targeting_enabled'?: boolean | null;
    /**
     * <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupResponseAllOf
     */
    'placement_group'?: PlacementGroupType;
    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     * @type {PacingDeliveryType}
     * @memberof AdGroupResponseAllOf
     */
    'pacing_delivery_type'?: PacingDeliveryType;
    /**
     * oCPM learn mode
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    'conversion_learning_mode_type'?: AdGroupResponseAllOfConversionLearningModeTypeEnum;
    /**
     * Ad group summary status.
     * @type {AdGroupSummaryStatus}
     * @memberof AdGroupResponseAllOf
     */
    'summary_status'?: AdGroupSummaryStatus;
    /**
     * Feed Profile ID associated to the adgroup.
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    'feed_profile_id'?: string;
}

export const AdGroupResponseAllOfBudgetTypeEnum = {
    Daily: 'DAILY',
    Lifetime: 'LIFETIME',
    CboAdgroup: 'CBO_ADGROUP'
} as const;

export type AdGroupResponseAllOfBudgetTypeEnum = typeof AdGroupResponseAllOfBudgetTypeEnum[keyof typeof AdGroupResponseAllOfBudgetTypeEnum];
export const AdGroupResponseAllOfConversionLearningModeTypeEnum = {
    NotActive: 'NOT_ACTIVE',
    Active: 'ACTIVE',
    Null: 'null'
} as const;

export type AdGroupResponseAllOfConversionLearningModeTypeEnum = typeof AdGroupResponseAllOfConversionLearningModeTypeEnum[keyof typeof AdGroupResponseAllOfConversionLearningModeTypeEnum];

/**
 * 
 * @export
 * @interface AdGroupResponseAllOf1
 */
export interface AdGroupResponseAllOf1 {
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    'campaign_id'?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupResponseAllOf1
     */
    'billable_event'?: ActionType;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    'id'?: string;
    /**
     * Always \"adgroup\".
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    'type'?: string;
    /**
     * Advertiser ID.
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    'ad_account_id'?: string;
    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponseAllOf1
     */
    'created_time'?: number;
    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponseAllOf1
     */
    'updated_time'?: number;
}
/**
 * Summary status for ad group
 * @export
 * @enum {string}
 */

export const AdGroupSummaryStatus = {
    Running: 'RUNNING',
    Paused: 'PAUSED',
    NotStarted: 'NOT_STARTED',
    Completed: 'COMPLETED',
    AdvertiserDisabled: 'ADVERTISER_DISABLED',
    Archived: 'ARCHIVED'
} as const;

export type AdGroupSummaryStatus = typeof AdGroupSummaryStatus[keyof typeof AdGroupSummaryStatus];


/**
 * 
 * @export
 * @interface AdResponse
 */
export interface AdResponse {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdResponse
     */
    'ad_group_id'?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponse
     */
    'android_deep_link'?: string | null;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    'carousel_android_deep_links'?: Array<string> | null;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    'carousel_destination_urls'?: Array<string> | null;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    'carousel_ios_deep_links'?: Array<string> | null;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdResponse
     */
    'click_tracking_url'?: string | null;
    /**
     * Ad creative type enum
     * @type {string}
     * @memberof AdResponse
     */
    'creative_type'?: AdResponseCreativeTypeEnum;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdResponse
     */
    'destination_url'?: string | null;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponse
     */
    'ios_deep_link'?: string | null;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdResponse
     */
    'is_pin_deleted'?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdResponse
     */
    'is_removable'?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdResponse
     */
    'name'?: string | null;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdResponse
     */
    'pin_id'?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdResponse
     */
    'status'?: EntityStatus;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof AdResponse
     */
    'tracking_urls'?: TrackingUrls | null;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdResponse
     */
    'view_tracking_url'?: string | null;
    /**
     * The ID of the advertiser that this ad belongs to.
     * @type {string}
     * @memberof AdResponse
     */
    'ad_account_id'?: string;
    /**
     * ID of the ad campaign that contains this ad.
     * @type {string}
     * @memberof AdResponse
     */
    'campaign_id'?: string;
    /**
     * Destination URL template for all items within a collections drawer.
     * @type {string}
     * @memberof AdResponse
     */
    'collection_items_destination_url_template'?: string | null;
    /**
     * Pin creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponse
     */
    'created_time'?: number;
    /**
     * The ID of this ad.
     * @type {string}
     * @memberof AdResponse
     */
    'id'?: string;
    /**
     * Enum reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponse
     */
    'rejected_reasons'?: Array<AdResponseRejectedReasonsEnum>;
    /**
     * Text reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponse
     */
    'rejection_labels'?: Array<string>;
    /**
     * Ad review status
     * @type {string}
     * @memberof AdResponse
     */
    'review_status'?: AdResponseReviewStatusEnum;
    /**
     * Always \"ad\".
     * @type {string}
     * @memberof AdResponse
     */
    'type'?: string;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponse
     */
    'updated_time'?: number;
    /**
     * Ad summary status
     * @type {PinPromotionSummaryStatus}
     * @memberof AdResponse
     */
    'summary_status'?: PinPromotionSummaryStatus;
}

export const AdResponseCreativeTypeEnum = {
    Regular: 'REGULAR',
    Video: 'VIDEO',
    Shopping: 'SHOPPING',
    Carousel: 'CAROUSEL',
    MaxVideo: 'MAX_VIDEO',
    ShopThePin: 'SHOP_THE_PIN',
    Story: 'STORY'
} as const;

export type AdResponseCreativeTypeEnum = typeof AdResponseCreativeTypeEnum[keyof typeof AdResponseCreativeTypeEnum];
export const AdResponseRejectedReasonsEnum = {
    Hashtags: 'HASHTAGS',
    PromotionsAndPrices: 'PROMOTIONS_AND_PRICES',
    Targeting: 'TARGETING',
    LandingPage: 'LANDING_PAGE',
    CapsAndSymbols: 'CAPS_AND_SYMBOLS',
    Shocking: 'SHOCKING',
    WeightLoss: 'WEIGHT_LOSS',
    ProhibitedProduct: 'PROHIBITED_PRODUCT',
    Authenticity: 'AUTHENTICITY',
    Nudity: 'NUDITY',
    ConfusingDesign: 'CONFUSING_DESIGN',
    Urgency: 'URGENCY',
    Ratings: 'RATINGS',
    App: 'APP',
    Alcohol: 'ALCOHOL',
    Contests: 'CONTESTS',
    Political: 'POLITICAL',
    Other: 'OTHER',
    Image: 'IMAGE',
    Nar: 'NAR',
    Inconsistent: 'INCONSISTENT',
    Clickbait: 'CLICKBAIT',
    NoDescription: 'NO_DESCRIPTION',
    LowQuality: 'LOW_QUALITY',
    ExaggeratedClaims: 'EXAGGERATED_CLAIMS',
    PinterestBrand: 'PINTEREST_BRAND',
    AlcoholNoSale: 'ALCOHOL_NO_SALE',
    LandingPageSpeed: 'LANDING_PAGE_SPEED',
    LandingPageHardwall: 'LANDING_PAGE_HARDWALL',
    LandingPageBroken: 'LANDING_PAGE_BROKEN',
    LandingPageQuality: 'LANDING_PAGE_QUALITY',
    OutOfStock: 'OUT_OF_STOCK',
    ImageLowQuality: 'IMAGE_LOW_QUALITY',
    ImageBusy: 'IMAGE_BUSY',
    ImagePoorlyEdited: 'IMAGE_POORLY_EDITED',
    ImageBeforeAfter: 'IMAGE_BEFORE_AFTER',
    Ugc: 'UGC',
    FakeButtons: 'FAKE_BUTTONS',
    Weapons: 'WEAPONS',
    Sensitive: 'SENSITIVE',
    UnacceptableBusiness: 'UNACCEPTABLE_BUSINESS',
    SuspiciousClaims: 'SUSPICIOUS_CLAIMS',
    Pharma: 'PHARMA',
    SuspiciousSupplements: 'SUSPICIOUS_SUPPLEMENTS',
    IllegalRecreationalDrug: 'ILLEGAL_RECREATIONAL_DRUG',
    LowQualityLandingPage: 'LOW_QUALITY_LANDING_PAGE',
    RestrictedHealthcare: 'RESTRICTED_HEALTHCARE',
    InconsistentLangFr: 'INCONSISTENT_LANG_FR'
} as const;

export type AdResponseRejectedReasonsEnum = typeof AdResponseRejectedReasonsEnum[keyof typeof AdResponseRejectedReasonsEnum];
export const AdResponseReviewStatusEnum = {
    Other: 'OTHER',
    Pending: 'PENDING',
    Rejected: 'REJECTED',
    Approved: 'APPROVED'
} as const;

export type AdResponseReviewStatusEnum = typeof AdResponseReviewStatusEnum[keyof typeof AdResponseReviewStatusEnum];

/**
 * Creation fields
 * @export
 * @interface AdResponseAllOf
 */
export interface AdResponseAllOf {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'ad_group_id'?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'android_deep_link'?: string | null;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdResponseAllOf
     */
    'carousel_android_deep_links'?: Array<string> | null;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdResponseAllOf
     */
    'carousel_destination_urls'?: Array<string> | null;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdResponseAllOf
     */
    'carousel_ios_deep_links'?: Array<string> | null;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'click_tracking_url'?: string | null;
    /**
     * Ad creative type enum
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'creative_type'?: AdResponseAllOfCreativeTypeEnum;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'destination_url'?: string | null;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'ios_deep_link'?: string | null;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdResponseAllOf
     */
    'is_pin_deleted'?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdResponseAllOf
     */
    'is_removable'?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'name'?: string | null;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'pin_id'?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdResponseAllOf
     */
    'status'?: EntityStatus;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof AdResponseAllOf
     */
    'tracking_urls'?: TrackingUrls | null;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    'view_tracking_url'?: string | null;
}

export const AdResponseAllOfCreativeTypeEnum = {
    Regular: 'REGULAR',
    Video: 'VIDEO',
    Shopping: 'SHOPPING',
    Carousel: 'CAROUSEL',
    MaxVideo: 'MAX_VIDEO',
    ShopThePin: 'SHOP_THE_PIN',
    Story: 'STORY'
} as const;

export type AdResponseAllOfCreativeTypeEnum = typeof AdResponseAllOfCreativeTypeEnum[keyof typeof AdResponseAllOfCreativeTypeEnum];

/**
 * 
 * @export
 * @interface AdResponseAllOf1
 */
export interface AdResponseAllOf1 {
    /**
     * The ID of the advertiser that this ad belongs to.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    'ad_account_id'?: string;
    /**
     * ID of the ad campaign that contains this ad.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    'campaign_id'?: string;
    /**
     * Destination URL template for all items within a collections drawer.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    'collection_items_destination_url_template'?: string | null;
    /**
     * Pin creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponseAllOf1
     */
    'created_time'?: number;
    /**
     * The ID of this ad.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    'id'?: string;
    /**
     * Enum reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponseAllOf1
     */
    'rejected_reasons'?: Array<AdResponseAllOf1RejectedReasonsEnum>;
    /**
     * Text reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponseAllOf1
     */
    'rejection_labels'?: Array<string>;
    /**
     * Ad review status
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    'review_status'?: AdResponseAllOf1ReviewStatusEnum;
    /**
     * Always \"ad\".
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    'type'?: string;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponseAllOf1
     */
    'updated_time'?: number;
    /**
     * Ad summary status
     * @type {PinPromotionSummaryStatus}
     * @memberof AdResponseAllOf1
     */
    'summary_status'?: PinPromotionSummaryStatus;
}

export const AdResponseAllOf1RejectedReasonsEnum = {
    Hashtags: 'HASHTAGS',
    PromotionsAndPrices: 'PROMOTIONS_AND_PRICES',
    Targeting: 'TARGETING',
    LandingPage: 'LANDING_PAGE',
    CapsAndSymbols: 'CAPS_AND_SYMBOLS',
    Shocking: 'SHOCKING',
    WeightLoss: 'WEIGHT_LOSS',
    ProhibitedProduct: 'PROHIBITED_PRODUCT',
    Authenticity: 'AUTHENTICITY',
    Nudity: 'NUDITY',
    ConfusingDesign: 'CONFUSING_DESIGN',
    Urgency: 'URGENCY',
    Ratings: 'RATINGS',
    App: 'APP',
    Alcohol: 'ALCOHOL',
    Contests: 'CONTESTS',
    Political: 'POLITICAL',
    Other: 'OTHER',
    Image: 'IMAGE',
    Nar: 'NAR',
    Inconsistent: 'INCONSISTENT',
    Clickbait: 'CLICKBAIT',
    NoDescription: 'NO_DESCRIPTION',
    LowQuality: 'LOW_QUALITY',
    ExaggeratedClaims: 'EXAGGERATED_CLAIMS',
    PinterestBrand: 'PINTEREST_BRAND',
    AlcoholNoSale: 'ALCOHOL_NO_SALE',
    LandingPageSpeed: 'LANDING_PAGE_SPEED',
    LandingPageHardwall: 'LANDING_PAGE_HARDWALL',
    LandingPageBroken: 'LANDING_PAGE_BROKEN',
    LandingPageQuality: 'LANDING_PAGE_QUALITY',
    OutOfStock: 'OUT_OF_STOCK',
    ImageLowQuality: 'IMAGE_LOW_QUALITY',
    ImageBusy: 'IMAGE_BUSY',
    ImagePoorlyEdited: 'IMAGE_POORLY_EDITED',
    ImageBeforeAfter: 'IMAGE_BEFORE_AFTER',
    Ugc: 'UGC',
    FakeButtons: 'FAKE_BUTTONS',
    Weapons: 'WEAPONS',
    Sensitive: 'SENSITIVE',
    UnacceptableBusiness: 'UNACCEPTABLE_BUSINESS',
    SuspiciousClaims: 'SUSPICIOUS_CLAIMS',
    Pharma: 'PHARMA',
    SuspiciousSupplements: 'SUSPICIOUS_SUPPLEMENTS',
    IllegalRecreationalDrug: 'ILLEGAL_RECREATIONAL_DRUG',
    LowQualityLandingPage: 'LOW_QUALITY_LANDING_PAGE',
    RestrictedHealthcare: 'RESTRICTED_HEALTHCARE',
    InconsistentLangFr: 'INCONSISTENT_LANG_FR'
} as const;

export type AdResponseAllOf1RejectedReasonsEnum = typeof AdResponseAllOf1RejectedReasonsEnum[keyof typeof AdResponseAllOf1RejectedReasonsEnum];
export const AdResponseAllOf1ReviewStatusEnum = {
    Other: 'OTHER',
    Pending: 'PENDING',
    Rejected: 'REJECTED',
    Approved: 'APPROVED'
} as const;

export type AdResponseAllOf1ReviewStatusEnum = typeof AdResponseAllOf1ReviewStatusEnum[keyof typeof AdResponseAllOf1ReviewStatusEnum];

/**
 * 
 * @export
 * @interface AdsAnalyticsCreateAsyncRequest
 */
export interface AdsAnalyticsCreateAsyncRequest {
    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'start_date': string;
    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'end_date': string;
    /**
     * TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @type {Granularity}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'granularity': Granularity;
    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'click_window_days'?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'engagement_window_days'?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'view_window_days'?: ConversionAttributionWindowDays;
    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @type {ConversionReportTimeType}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'conversion_report_time'?: ConversionReportTimeType;
    /**
     * List of types of attribution for the conversion report
     * @type {Array<ConversionReportAttributionType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'attribution_types'?: Array<ConversionReportAttributionType>;
    /**
     * Metric and entity columns
     * @type {Array<ReportingColumnAsync>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'columns': Array<ReportingColumnAsync>;
    /**
     * Level of the report
     * @type {MetricsReportingLevel}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'level': MetricsReportingLevel;
    /**
     * Specification for formatting report data
     * @type {DataOutputFormat}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'report_format'?: DataOutputFormat;
    /**
     * List of campaign ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'campaign_ids'?: Array<string>;
    /**
     * List of status values for filtering
     * @type {Array<CampaignSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'campaign_statuses'?: Array<CampaignSummaryStatus>;
    /**
     * List of values for filtering
     * @type {Array<ObjectiveType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'campaign_objective_types'?: Array<ObjectiveType>;
    /**
     * List of ad group ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'ad_group_ids'?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<AdGroupSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'ad_group_statuses'?: Array<AdGroupSummaryStatus>;
    /**
     * List of ad ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'ad_ids'?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<PinPromotionSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'ad_statuses'?: Array<PinPromotionSummaryStatus>;
    /**
     * List of product group ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'product_group_ids'?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<ProductGroupSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'product_group_statuses'?: Array<ProductGroupSummaryStatus>;
    /**
     * List of product item ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'product_item_ids'?: Array<string>;
    /**
     * List of targeting types
     * @type {Array<AdsAnalyticsTargetingType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'targeting_types'?: Array<AdsAnalyticsTargetingType>;
    /**
     * List of metrics filters
     * @type {Array<AdsAnalyticsMetricsFilter>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    'metrics_filters'?: Array<AdsAnalyticsMetricsFilter>;
}
/**
 * 
 * @export
 * @interface AdsAnalyticsCreateAsyncRequestAllOf
 */
export interface AdsAnalyticsCreateAsyncRequestAllOf {
    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'start_date': string;
    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'end_date': string;
    /**
     * TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @type {Granularity}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'granularity': Granularity;
    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'click_window_days'?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'engagement_window_days'?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'view_window_days'?: ConversionAttributionWindowDays;
    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @type {ConversionReportTimeType}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'conversion_report_time'?: ConversionReportTimeType;
    /**
     * List of types of attribution for the conversion report
     * @type {Array<ConversionReportAttributionType>}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    'attribution_types'?: Array<ConversionReportAttributionType>;
}
/**
 * 
 * @export
 * @interface AdsAnalyticsCreateAsyncRequestAllOf1
 */
export interface AdsAnalyticsCreateAsyncRequestAllOf1 {
    /**
     * Metric and entity columns
     * @type {Array<ReportingColumnAsync>}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf1
     */
    'columns': Array<ReportingColumnAsync>;
    /**
     * Level of the report
     * @type {MetricsReportingLevel}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf1
     */
    'level': MetricsReportingLevel;
    /**
     * Specification for formatting report data
     * @type {DataOutputFormat}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf1
     */
    'report_format'?: DataOutputFormat;
}
/**
 * 
 * @export
 * @interface AdsAnalyticsCreateAsyncResponse
 */
export interface AdsAnalyticsCreateAsyncResponse {
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    'report_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    'message'?: string | null;
}
/**
 * Reporting columns for sync reporting data filter
 * @export
 * @enum {string}
 */

export const AdsAnalyticsFilterColumn = {
    SpendInDollar: 'SPEND_IN_DOLLAR',
    TotalImpression: 'TOTAL_IMPRESSION'
} as const;

export type AdsAnalyticsFilterColumn = typeof AdsAnalyticsFilterColumn[keyof typeof AdsAnalyticsFilterColumn];


/**
 * Filter operator for sync reporting
 * @export
 * @enum {string}
 */

export const AdsAnalyticsFilterOperator = {
    LessThan: 'LESS_THAN',
    GreaterThan: 'GREATER_THAN'
} as const;

export type AdsAnalyticsFilterOperator = typeof AdsAnalyticsFilterOperator[keyof typeof AdsAnalyticsFilterOperator];


/**
 * 
 * @export
 * @interface AdsAnalyticsGetAsyncResponse
 */
export interface AdsAnalyticsGetAsyncResponse {
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    'report_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    'url'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    'size'?: number | null;
}
/**
 * 
 * @export
 * @interface AdsAnalyticsMetricsFilter
 */
export interface AdsAnalyticsMetricsFilter {
    /**
     * 
     * @type {AdsAnalyticsFilterColumn}
     * @memberof AdsAnalyticsMetricsFilter
     */
    'field'?: AdsAnalyticsFilterColumn;
    /**
     * 
     * @type {AdsAnalyticsFilterOperator}
     * @memberof AdsAnalyticsMetricsFilter
     */
    'operator'?: AdsAnalyticsFilterOperator;
    /**
     * List of values for filtering
     * @type {Array<number>}
     * @memberof AdsAnalyticsMetricsFilter
     */
    'values'?: Array<number>;
}
/**
 * Reporting targeting type
 * @export
 * @enum {string}
 */

export const AdsAnalyticsTargetingType = {
    Keyword: 'KEYWORD',
    Apptype: 'APPTYPE',
    Gender: 'GENDER',
    Location: 'LOCATION',
    Placement: 'PLACEMENT',
    Country: 'COUNTRY',
    TargetedInterest: 'TARGETED_INTEREST',
    PinnerInterest: 'PINNER_INTEREST',
    AudienceInclude: 'AUDIENCE_INCLUDE',
    AudienceExclude: 'AUDIENCE_EXCLUDE',
    Geo: 'GEO',
    AgeBucket: 'AGE_BUCKET',
    Region: 'REGION'
} as const;

export type AdsAnalyticsTargetingType = typeof AdsAnalyticsTargetingType[keyof typeof AdsAnalyticsTargetingType];


/**
 * 
 * @export
 * @interface AnalyticsMetricsResponse
 */
export interface AnalyticsMetricsResponse {
    /**
     * Array with the requested daily metric records
     * @type {Array<AnalyticsMetricsResponseDailyMetrics>}
     * @memberof AnalyticsMetricsResponse
     */
    'daily_metrics'?: Array<AnalyticsMetricsResponseDailyMetrics>;
    /**
     * The metric name and value over the requested period for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof AnalyticsMetricsResponse
     */
    'summary_metrics'?: { [key: string]: number; };
}
/**
 * 
 * @export
 * @interface AnalyticsMetricsResponseDailyMetrics
 */
export interface AnalyticsMetricsResponseDailyMetrics {
    /**
     * Metrics availablity, e.g., \"READY\".
     * @type {string}
     * @memberof AnalyticsMetricsResponseDailyMetrics
     */
    'data_status'?: AnalyticsMetricsResponseDailyMetricsDataStatusEnum;
    /**
     * Metrics date (UTC): YYYY-MM-DD.
     * @type {string}
     * @memberof AnalyticsMetricsResponseDailyMetrics
     */
    'date'?: string;
    /**
     * The metric name and daily value for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof AnalyticsMetricsResponseDailyMetrics
     */
    'metrics'?: { [key: string]: number; };
}

export const AnalyticsMetricsResponseDailyMetricsDataStatusEnum = {
    Processing: 'PROCESSING',
    Ready: 'READY',
    Estimate: 'ESTIMATE',
    BeforeBusinessCreated: 'BEFORE_BUSINESS_CREATED',
    BeforeDataRetentionPeriod: 'BEFORE_DATA_RETENTION_PERIOD',
    BeforePinDataRetentionPeriod: 'BEFORE_PIN_DATA_RETENTION_PERIOD',
    BeforeMetricStartDate: 'BEFORE_METRIC_START_DATE',
    BeforeCoreMetricStartDate: 'BEFORE_CORE_METRIC_START_DATE',
    BeforePinFormatMetricStartDate: 'BEFORE_PIN_FORMAT_METRIC_START_DATE',
    BeforeAudienceMetricStartDate: 'BEFORE_AUDIENCE_METRIC_START_DATE',
    BeforeAudienceMonthlyMetricStartDate: 'BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE',
    BeforeVideoMetricStartDate: 'BEFORE_VIDEO_METRIC_START_DATE',
    BeforeConversionMetricStartDate: 'BEFORE_CONVERSION_METRIC_START_DATE',
    PurchasersMetricSmallerThanThreshold: 'PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD',
    InBadTagDate: 'IN_BAD_TAG_DATE',
    BeforePublishedMetricStartDate: 'BEFORE_PUBLISHED_METRIC_START_DATE',
    BeforeAssistMetricStartDate: 'BEFORE_ASSIST_METRIC_START_DATE',
    BeforePinCreated: 'BEFORE_PIN_CREATED',
    BeforeAccountClaimed: 'BEFORE_ACCOUNT_CLAIMED',
    BeforeDemographicFiltersStartDate: 'BEFORE_DEMOGRAPHIC_FILTERS_START_DATE',
    AudienceSegmentSmallerThanThreshold: 'AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD',
    AudienceTotalSmallerThanThreshold: 'AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD',
    BeforeProductGroupFilterStartDate: 'BEFORE_PRODUCT_GROUP_FILTER_START_DATE'
} as const;

export type AnalyticsMetricsResponseDailyMetricsDataStatusEnum = typeof AnalyticsMetricsResponseDailyMetricsDataStatusEnum[keyof typeof AnalyticsMetricsResponseDailyMetricsDataStatusEnum];

/**
 * 
 * @export
 * @interface AvailabilityFilter
 */
export interface AvailabilityFilter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof AvailabilityFilter
     */
    'AVAILABILITY': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * The operation performed by the batch
 * @export
 * @enum {string}
 */

export const BatchOperation = {
    Update: 'UPDATE',
    Create: 'CREATE',
    Upsert: 'UPSERT'
} as const;

export type BatchOperation = typeof BatchOperation[keyof typeof BatchOperation];


/**
 * The status of the operation performed by the batch
 * @export
 * @enum {string}
 */

export const BatchOperationStatus = {
    Processing: 'PROCESSING',
    Completed: 'COMPLETED'
} as const;

export type BatchOperationStatus = typeof BatchOperationStatus[keyof typeof BatchOperationStatus];


/**
 * Board
 * @export
 * @interface Board
 */
export interface Board {
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    'description'?: string | null;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Board
     */
    'owner'?: BoardOwner;
    /**
     * Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a>
     * @type {string}
     * @memberof Board
     */
    'privacy'?: BoardPrivacyEnum;
}

export const BoardPrivacyEnum = {
    Public: 'PUBLIC',
    Protected: 'PROTECTED',
    Secret: 'SECRET'
} as const;

export type BoardPrivacyEnum = typeof BoardPrivacyEnum[keyof typeof BoardPrivacyEnum];

/**
 * 
 * @export
 * @interface BoardOwner
 */
export interface BoardOwner {
    /**
     * 
     * @type {string}
     * @memberof BoardOwner
     */
    'username'?: string;
}
/**
 * Sections help organize pins within a board.
 * @export
 * @interface BoardSection
 */
export interface BoardSection {
    /**
     * 
     * @type {string}
     * @memberof BoardSection
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardSection
     */
    'name'?: string;
}
/**
 * Board fields for updates
 * @export
 * @interface BoardUpdate
 */
export interface BoardUpdate {
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    'privacy'?: BoardUpdatePrivacyEnum;
}

export const BoardUpdatePrivacyEnum = {
    Public: 'PUBLIC',
    Secret: 'SECRET'
} as const;

export type BoardUpdatePrivacyEnum = typeof BoardUpdatePrivacyEnum[keyof typeof BoardUpdatePrivacyEnum];

/**
 * 
 * @export
 * @interface BrandFilter
 */
export interface BrandFilter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof BrandFilter
     */
    'BRAND': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * Campaign Data
 * @export
 * @interface CampaignCommon
 */
export interface CampaignCommon {
    /**
     * Campaign\'s Advertiser ID.
     * @type {string}
     * @memberof CampaignCommon
     */
    'ad_account_id': string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignCommon
     */
    'name'?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignCommon
     */
    'status'?: EntityStatus;
    /**
     * Campaign total spending cap.
     * @type {number}
     * @memberof CampaignCommon
     */
    'lifetime_spend_cap'?: number | null;
    /**
     * Campaign daily spending cap.
     * @type {number}
     * @memberof CampaignCommon
     */
    'daily_spend_cap'?: number | null;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignCommon
     */
    'order_line_id'?: string | null;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof CampaignCommon
     */
    'tracking_urls'?: TrackingUrls | null;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCommon
     */
    'start_time'?: number | null;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCommon
     */
    'end_time'?: number | null;
}
/**
 * 
 * @export
 * @interface CampaignResponse
 */
export interface CampaignResponse {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignResponse
     */
    'id': string;
    /**
     * Campaign\'s Advertiser ID.
     * @type {string}
     * @memberof CampaignResponse
     */
    'ad_account_id': string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignResponse
     */
    'name'?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignResponse
     */
    'status'?: EntityStatus;
    /**
     * Campaign total spending cap.
     * @type {number}
     * @memberof CampaignResponse
     */
    'lifetime_spend_cap'?: number | null;
    /**
     * Campaign daily spending cap.
     * @type {number}
     * @memberof CampaignResponse
     */
    'daily_spend_cap'?: number | null;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignResponse
     */
    'order_line_id'?: string | null;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof CampaignResponse
     */
    'tracking_urls'?: TrackingUrls | null;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignResponse
     */
    'start_time'?: number | null;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignResponse
     */
    'end_time'?: number | null;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignResponse
     */
    'objective_type'?: ObjectiveType;
    /**
     * Campaign creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CampaignResponse
     */
    'created_time'?: number;
    /**
     * UTC timestamp. Last update time.
     * @type {number}
     * @memberof CampaignResponse
     */
    'updated_time'?: number;
    /**
     * Always \"campaign\".
     * @type {string}
     * @memberof CampaignResponse
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CampaignResponseAllOf
 */
export interface CampaignResponseAllOf {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignResponseAllOf
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CampaignResponseAllOf1
 */
export interface CampaignResponseAllOf1 {
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignResponseAllOf1
     */
    'objective_type'?: ObjectiveType;
    /**
     * Campaign creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CampaignResponseAllOf1
     */
    'created_time'?: number;
    /**
     * UTC timestamp. Last update time.
     * @type {number}
     * @memberof CampaignResponseAllOf1
     */
    'updated_time'?: number;
    /**
     * Always \"campaign\".
     * @type {string}
     * @memberof CampaignResponseAllOf1
     */
    'type'?: string;
}
/**
 * Summary status for campaign
 * @export
 * @enum {string}
 */

export const CampaignSummaryStatus = {
    Running: 'RUNNING',
    Paused: 'PAUSED',
    NotStarted: 'NOT_STARTED',
    Completed: 'COMPLETED',
    AdvertiserDisabled: 'ADVERTISER_DISABLED',
    Archived: 'ARCHIVED'
} as const;

export type CampaignSummaryStatus = typeof CampaignSummaryStatus[keyof typeof CampaignSummaryStatus];


/**
 * 
 * @export
 * @interface CatalogsDbItem
 */
export interface CatalogsDbItem {
    /**
     * 
     * @type {string}
     * @memberof CatalogsDbItem
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsDbItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsDbItem
     */
    'updated_at'?: string;
}
/**
 * Catalogs Catalogs Feed object
 * @export
 * @interface CatalogsFeed
 */
export interface CatalogsFeed {
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeed
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeed
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeed
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeed
     */
    'default_country': Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeed
     */
    'default_availability': ProductAvailabilityType | null;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeed
     */
    'default_currency': NullableCurrency | null;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof CatalogsFeed
     */
    'name': string | null;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeed
     */
    'format': CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsFeed
     */
    'default_locale': string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeed
     */
    'credentials': CatalogsFeedCredentials | null;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeed
     */
    'location': string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeed
     */
    'preferred_processing_schedule': CatalogsFeedProcessingSchedule | null;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeed
     */
    'status': CatalogsStatus;
}
/**
 * Use this if your feed file requires username and password.
 * @export
 * @interface CatalogsFeedCredentials
 */
export interface CatalogsFeedCredentials {
    /**
     * The required password for downloading a feed.
     * @type {string}
     * @memberof CatalogsFeedCredentials
     */
    'password': string;
    /**
     * The required username for downloading a feed.
     * @type {string}
     * @memberof CatalogsFeedCredentials
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface CatalogsFeedIngestionDetails
 */
export interface CatalogsFeedIngestionDetails {
    /**
     * 
     * @type {CatalogsFeedIngestionErrors}
     * @memberof CatalogsFeedIngestionDetails
     */
    'errors': CatalogsFeedIngestionErrors;
    /**
     * 
     * @type {CatalogsFeedIngestionInfo}
     * @memberof CatalogsFeedIngestionDetails
     */
    'info': CatalogsFeedIngestionInfo;
}
/**
 * 
 * @export
 * @interface CatalogsFeedIngestionErrors
 */
export interface CatalogsFeedIngestionErrors {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    'image_download_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    'image_download_connection_timeout'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    'image_format_unrecognize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    'line_level_internal_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    'large_product_count_decrease'?: CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum;
}

export const CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum = {
    NUMBER_1: 1
} as const;

export type CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum = typeof CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum[keyof typeof CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum];

/**
 * 
 * @export
 * @interface CatalogsFeedIngestionInfo
 */
export interface CatalogsFeedIngestionInfo {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    'in_stock'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    'out_of_stock'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    'preorder'?: number;
}
/**
 * 
 * @export
 * @interface CatalogsFeedProcessingResult
 */
export interface CatalogsFeedProcessingResult {
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeedProcessingResult
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeedProcessingResult
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeedProcessingResult
     */
    'updated_at'?: string;
    /**
     * 
     * @type {CatalogsFeedIngestionDetails}
     * @memberof CatalogsFeedProcessingResult
     */
    'ingestion_details': CatalogsFeedIngestionDetails;
    /**
     * 
     * @type {CatalogsFeedProcessingStatus}
     * @memberof CatalogsFeedProcessingResult
     */
    'status': CatalogsFeedProcessingStatus;
    /**
     * 
     * @type {CatalogsFeedProductCounts}
     * @memberof CatalogsFeedProcessingResult
     */
    'product_counts': CatalogsFeedProductCounts | null;
    /**
     * 
     * @type {CatalogsFeedValidationDetails}
     * @memberof CatalogsFeedProcessingResult
     */
    'validation_details': CatalogsFeedValidationDetails;
}
/**
 * 
 * @export
 * @interface CatalogsFeedProcessingResultFields
 */
export interface CatalogsFeedProcessingResultFields {
    /**
     * 
     * @type {CatalogsFeedIngestionDetails}
     * @memberof CatalogsFeedProcessingResultFields
     */
    'ingestion_details': CatalogsFeedIngestionDetails;
    /**
     * 
     * @type {CatalogsFeedProcessingStatus}
     * @memberof CatalogsFeedProcessingResultFields
     */
    'status': CatalogsFeedProcessingStatus;
    /**
     * 
     * @type {CatalogsFeedProductCounts}
     * @memberof CatalogsFeedProcessingResultFields
     */
    'product_counts': CatalogsFeedProductCounts | null;
    /**
     * 
     * @type {CatalogsFeedValidationDetails}
     * @memberof CatalogsFeedProcessingResultFields
     */
    'validation_details': CatalogsFeedValidationDetails;
}
/**
 * Optional daily processing schedule. Use this to configure the preferred time for processing a feed (otherwise random).
 * @export
 * @interface CatalogsFeedProcessingSchedule
 */
export interface CatalogsFeedProcessingSchedule {
    /**
     * A time in format HH:MM with leading 0 (zero)
     * @type {string}
     * @memberof CatalogsFeedProcessingSchedule
     */
    'time': string;
    /**
     * The timezone considered for the processing schedule time.
     * @type {string}
     * @memberof CatalogsFeedProcessingSchedule
     */
    'timezone': CatalogsFeedProcessingScheduleTimezoneEnum;
}

export const CatalogsFeedProcessingScheduleTimezoneEnum = {
    AfricaAbidjan: 'Africa/Abidjan',
    AfricaAccra: 'Africa/Accra',
    AfricaAlgiers: 'Africa/Algiers',
    AfricaBissau: 'Africa/Bissau',
    AfricaCairo: 'Africa/Cairo',
    AfricaCasablanca: 'Africa/Casablanca',
    AfricaCeuta: 'Africa/Ceuta',
    AfricaElAaiun: 'Africa/El_Aaiun',
    AfricaJohannesburg: 'Africa/Johannesburg',
    AfricaJuba: 'Africa/Juba',
    AfricaKhartoum: 'Africa/Khartoum',
    AfricaLagos: 'Africa/Lagos',
    AfricaMaputo: 'Africa/Maputo',
    AfricaMonrovia: 'Africa/Monrovia',
    AfricaNairobi: 'Africa/Nairobi',
    AfricaNdjamena: 'Africa/Ndjamena',
    AfricaSaoTome: 'Africa/Sao_Tome',
    AfricaTripoli: 'Africa/Tripoli',
    AfricaTunis: 'Africa/Tunis',
    AfricaWindhoek: 'Africa/Windhoek',
    AmericaAdak: 'America/Adak',
    AmericaAnchorage: 'America/Anchorage',
    AmericaAraguaina: 'America/Araguaina',
    AmericaArgentinaBuenosAires: 'America/Argentina/Buenos_Aires',
    AmericaArgentinaCatamarca: 'America/Argentina/Catamarca',
    AmericaArgentinaCordoba: 'America/Argentina/Cordoba',
    AmericaArgentinaJujuy: 'America/Argentina/Jujuy',
    AmericaArgentinaLaRioja: 'America/Argentina/La_Rioja',
    AmericaArgentinaMendoza: 'America/Argentina/Mendoza',
    AmericaArgentinaRioGallegos: 'America/Argentina/Rio_Gallegos',
    AmericaArgentinaSalta: 'America/Argentina/Salta',
    AmericaArgentinaSanJuan: 'America/Argentina/San_Juan',
    AmericaArgentinaSanLuis: 'America/Argentina/San_Luis',
    AmericaArgentinaTucuman: 'America/Argentina/Tucuman',
    AmericaArgentinaUshuaia: 'America/Argentina/Ushuaia',
    AmericaAsuncion: 'America/Asuncion',
    AmericaAtikokan: 'America/Atikokan',
    AmericaBahia: 'America/Bahia',
    AmericaBahiaBanderas: 'America/Bahia_Banderas',
    AmericaBarbados: 'America/Barbados',
    AmericaBelem: 'America/Belem',
    AmericaBelize: 'America/Belize',
    AmericaBlancSablon: 'America/Blanc-Sablon',
    AmericaBoaVista: 'America/Boa_Vista',
    AmericaBogota: 'America/Bogota',
    AmericaBoise: 'America/Boise',
    AmericaCambridgeBay: 'America/Cambridge_Bay',
    AmericaCampoGrande: 'America/Campo_Grande',
    AmericaCancun: 'America/Cancun',
    AmericaCaracas: 'America/Caracas',
    AmericaCayenne: 'America/Cayenne',
    AmericaChicago: 'America/Chicago',
    AmericaChihuahua: 'America/Chihuahua',
    AmericaCostaRica: 'America/Costa_Rica',
    AmericaCreston: 'America/Creston',
    AmericaCuiaba: 'America/Cuiaba',
    AmericaCuracao: 'America/Curacao',
    AmericaDanmarkshavn: 'America/Danmarkshavn',
    AmericaDawson: 'America/Dawson',
    AmericaDawsonCreek: 'America/Dawson_Creek',
    AmericaDenver: 'America/Denver',
    AmericaDetroit: 'America/Detroit',
    AmericaEdmonton: 'America/Edmonton',
    AmericaEirunepe: 'America/Eirunepe',
    AmericaElSalvador: 'America/El_Salvador',
    AmericaFortNelson: 'America/Fort_Nelson',
    AmericaFortaleza: 'America/Fortaleza',
    AmericaGlaceBay: 'America/Glace_Bay',
    AmericaGooseBay: 'America/Goose_Bay',
    AmericaGrandTurk: 'America/Grand_Turk',
    AmericaGuatemala: 'America/Guatemala',
    AmericaGuayaquil: 'America/Guayaquil',
    AmericaGuyana: 'America/Guyana',
    AmericaHalifax: 'America/Halifax',
    AmericaHavana: 'America/Havana',
    AmericaHermosillo: 'America/Hermosillo',
    AmericaIndianaIndianapolis: 'America/Indiana/Indianapolis',
    AmericaIndianaKnox: 'America/Indiana/Knox',
    AmericaIndianaMarengo: 'America/Indiana/Marengo',
    AmericaIndianaPetersburg: 'America/Indiana/Petersburg',
    AmericaIndianaTellCity: 'America/Indiana/Tell_City',
    AmericaIndianaVevay: 'America/Indiana/Vevay',
    AmericaIndianaVincennes: 'America/Indiana/Vincennes',
    AmericaIndianaWinamac: 'America/Indiana/Winamac',
    AmericaInuvik: 'America/Inuvik',
    AmericaIqaluit: 'America/Iqaluit',
    AmericaJamaica: 'America/Jamaica',
    AmericaJuneau: 'America/Juneau',
    AmericaKentuckyLouisville: 'America/Kentucky/Louisville',
    AmericaKentuckyMonticello: 'America/Kentucky/Monticello',
    AmericaLaPaz: 'America/La_Paz',
    AmericaLima: 'America/Lima',
    AmericaLosAngeles: 'America/Los_Angeles',
    AmericaMaceio: 'America/Maceio',
    AmericaManagua: 'America/Managua',
    AmericaManaus: 'America/Manaus',
    AmericaMartinique: 'America/Martinique',
    AmericaMatamoros: 'America/Matamoros',
    AmericaMazatlan: 'America/Mazatlan',
    AmericaMenominee: 'America/Menominee',
    AmericaMerida: 'America/Merida',
    AmericaMetlakatla: 'America/Metlakatla',
    AmericaMexicoCity: 'America/Mexico_City',
    AmericaMiquelon: 'America/Miquelon',
    AmericaMoncton: 'America/Moncton',
    AmericaMonterrey: 'America/Monterrey',
    AmericaMontevideo: 'America/Montevideo',
    AmericaNassau: 'America/Nassau',
    AmericaNewYork: 'America/New_York',
    AmericaNipigon: 'America/Nipigon',
    AmericaNome: 'America/Nome',
    AmericaNoronha: 'America/Noronha',
    AmericaNorthDakotaBeulah: 'America/North_Dakota/Beulah',
    AmericaNorthDakotaCenter: 'America/North_Dakota/Center',
    AmericaNorthDakotaNewSalem: 'America/North_Dakota/New_Salem',
    AmericaNuuk: 'America/Nuuk',
    AmericaOjinaga: 'America/Ojinaga',
    AmericaPanama: 'America/Panama',
    AmericaPangnirtung: 'America/Pangnirtung',
    AmericaParamaribo: 'America/Paramaribo',
    AmericaPhoenix: 'America/Phoenix',
    AmericaPortAuPrince: 'America/Port-au-Prince',
    AmericaPortOfSpain: 'America/Port_of_Spain',
    AmericaPortoVelho: 'America/Porto_Velho',
    AmericaPuertoRico: 'America/Puerto_Rico',
    AmericaPuntaArenas: 'America/Punta_Arenas',
    AmericaRainyRiver: 'America/Rainy_River',
    AmericaRankinInlet: 'America/Rankin_Inlet',
    AmericaRecife: 'America/Recife',
    AmericaRegina: 'America/Regina',
    AmericaResolute: 'America/Resolute',
    AmericaRioBranco: 'America/Rio_Branco',
    AmericaSantarem: 'America/Santarem',
    AmericaSantiago: 'America/Santiago',
    AmericaSantoDomingo: 'America/Santo_Domingo',
    AmericaSaoPaulo: 'America/Sao_Paulo',
    AmericaScoresbysund: 'America/Scoresbysund',
    AmericaSitka: 'America/Sitka',
    AmericaStJohns: 'America/St_Johns',
    AmericaSwiftCurrent: 'America/Swift_Current',
    AmericaTegucigalpa: 'America/Tegucigalpa',
    AmericaThule: 'America/Thule',
    AmericaThunderBay: 'America/Thunder_Bay',
    AmericaTijuana: 'America/Tijuana',
    AmericaToronto: 'America/Toronto',
    AmericaVancouver: 'America/Vancouver',
    AmericaWhitehorse: 'America/Whitehorse',
    AmericaWinnipeg: 'America/Winnipeg',
    AmericaYakutat: 'America/Yakutat',
    AmericaYellowknife: 'America/Yellowknife',
    AntarcticaCasey: 'Antarctica/Casey',
    AntarcticaDavis: 'Antarctica/Davis',
    AntarcticaDumontDUrville: 'Antarctica/DumontDUrville',
    AntarcticaMacquarie: 'Antarctica/Macquarie',
    AntarcticaMawson: 'Antarctica/Mawson',
    AntarcticaPalmer: 'Antarctica/Palmer',
    AntarcticaRothera: 'Antarctica/Rothera',
    AntarcticaSyowa: 'Antarctica/Syowa',
    AntarcticaTroll: 'Antarctica/Troll',
    AntarcticaVostok: 'Antarctica/Vostok',
    AsiaAlmaty: 'Asia/Almaty',
    AsiaAmman: 'Asia/Amman',
    AsiaAnadyr: 'Asia/Anadyr',
    AsiaAqtau: 'Asia/Aqtau',
    AsiaAqtobe: 'Asia/Aqtobe',
    AsiaAshgabat: 'Asia/Ashgabat',
    AsiaAtyrau: 'Asia/Atyrau',
    AsiaBaghdad: 'Asia/Baghdad',
    AsiaBaku: 'Asia/Baku',
    AsiaBangkok: 'Asia/Bangkok',
    AsiaBarnaul: 'Asia/Barnaul',
    AsiaBeirut: 'Asia/Beirut',
    AsiaBishkek: 'Asia/Bishkek',
    AsiaBrunei: 'Asia/Brunei',
    AsiaChita: 'Asia/Chita',
    AsiaChoibalsan: 'Asia/Choibalsan',
    AsiaColombo: 'Asia/Colombo',
    AsiaDamascus: 'Asia/Damascus',
    AsiaDhaka: 'Asia/Dhaka',
    AsiaDili: 'Asia/Dili',
    AsiaDubai: 'Asia/Dubai',
    AsiaDushanbe: 'Asia/Dushanbe',
    AsiaFamagusta: 'Asia/Famagusta',
    AsiaGaza: 'Asia/Gaza',
    AsiaHebron: 'Asia/Hebron',
    AsiaHoChiMinh: 'Asia/Ho_Chi_Minh',
    AsiaHongKong: 'Asia/Hong_Kong',
    AsiaHovd: 'Asia/Hovd',
    AsiaIrkutsk: 'Asia/Irkutsk',
    AsiaJakarta: 'Asia/Jakarta',
    AsiaJayapura: 'Asia/Jayapura',
    AsiaJerusalem: 'Asia/Jerusalem',
    AsiaKabul: 'Asia/Kabul',
    AsiaKamchatka: 'Asia/Kamchatka',
    AsiaKarachi: 'Asia/Karachi',
    AsiaKathmandu: 'Asia/Kathmandu',
    AsiaKhandyga: 'Asia/Khandyga',
    AsiaKolkata: 'Asia/Kolkata',
    AsiaKrasnoyarsk: 'Asia/Krasnoyarsk',
    AsiaKualaLumpur: 'Asia/Kuala_Lumpur',
    AsiaKuching: 'Asia/Kuching',
    AsiaMacau: 'Asia/Macau',
    AsiaMagadan: 'Asia/Magadan',
    AsiaMakassar: 'Asia/Makassar',
    AsiaManila: 'Asia/Manila',
    AsiaNicosia: 'Asia/Nicosia',
    AsiaNovokuznetsk: 'Asia/Novokuznetsk',
    AsiaNovosibirsk: 'Asia/Novosibirsk',
    AsiaOmsk: 'Asia/Omsk',
    AsiaOral: 'Asia/Oral',
    AsiaPontianak: 'Asia/Pontianak',
    AsiaPyongyang: 'Asia/Pyongyang',
    AsiaQatar: 'Asia/Qatar',
    AsiaQostanay: 'Asia/Qostanay',
    AsiaQyzylorda: 'Asia/Qyzylorda',
    AsiaRiyadh: 'Asia/Riyadh',
    AsiaSakhalin: 'Asia/Sakhalin',
    AsiaSamarkand: 'Asia/Samarkand',
    AsiaSeoul: 'Asia/Seoul',
    AsiaShanghai: 'Asia/Shanghai',
    AsiaSingapore: 'Asia/Singapore',
    AsiaSrednekolymsk: 'Asia/Srednekolymsk',
    AsiaTaipei: 'Asia/Taipei',
    AsiaTashkent: 'Asia/Tashkent',
    AsiaTbilisi: 'Asia/Tbilisi',
    AsiaTehran: 'Asia/Tehran',
    AsiaThimphu: 'Asia/Thimphu',
    AsiaTokyo: 'Asia/Tokyo',
    AsiaTomsk: 'Asia/Tomsk',
    AsiaUlaanbaatar: 'Asia/Ulaanbaatar',
    AsiaUrumqi: 'Asia/Urumqi',
    AsiaUstNera: 'Asia/Ust-Nera',
    AsiaVladivostok: 'Asia/Vladivostok',
    AsiaYakutsk: 'Asia/Yakutsk',
    AsiaYangon: 'Asia/Yangon',
    AsiaYekaterinburg: 'Asia/Yekaterinburg',
    AsiaYerevan: 'Asia/Yerevan',
    AtlanticAzores: 'Atlantic/Azores',
    AtlanticBermuda: 'Atlantic/Bermuda',
    AtlanticCanary: 'Atlantic/Canary',
    AtlanticCapeVerde: 'Atlantic/Cape_Verde',
    AtlanticFaroe: 'Atlantic/Faroe',
    AtlanticMadeira: 'Atlantic/Madeira',
    AtlanticReykjavik: 'Atlantic/Reykjavik',
    AtlanticSouthGeorgia: 'Atlantic/South_Georgia',
    AtlanticStanley: 'Atlantic/Stanley',
    AustraliaAdelaide: 'Australia/Adelaide',
    AustraliaBrisbane: 'Australia/Brisbane',
    AustraliaBrokenHill: 'Australia/Broken_Hill',
    AustraliaCurrie: 'Australia/Currie',
    AustraliaDarwin: 'Australia/Darwin',
    AustraliaEucla: 'Australia/Eucla',
    AustraliaHobart: 'Australia/Hobart',
    AustraliaLindeman: 'Australia/Lindeman',
    AustraliaLordHowe: 'Australia/Lord_Howe',
    AustraliaMelbourne: 'Australia/Melbourne',
    AustraliaPerth: 'Australia/Perth',
    AustraliaSydney: 'Australia/Sydney',
    Cet: 'CET',
    Cst6Cdt: 'CST6CDT',
    Eet: 'EET',
    Est: 'EST',
    Est5Edt: 'EST5EDT',
    EtcGmt: 'Etc/GMT',
    EtcGmt1: 'Etc/GMT+1',
    EtcGmt10: 'Etc/GMT+10',
    EtcGmt11: 'Etc/GMT+11',
    EtcGmt12: 'Etc/GMT+12',
    EtcGmt2: 'Etc/GMT+2',
    EtcGmt3: 'Etc/GMT+3',
    EtcGmt4: 'Etc/GMT+4',
    EtcGmt5: 'Etc/GMT+5',
    EtcGmt6: 'Etc/GMT+6',
    EtcGmt7: 'Etc/GMT+7',
    EtcGmt8: 'Etc/GMT+8',
    EtcGmt9: 'Etc/GMT+9',
    EtcGmt1: 'Etc/GMT-1',
    EtcGmt10: 'Etc/GMT-10',
    EtcGmt11: 'Etc/GMT-11',
    EtcGmt12: 'Etc/GMT-12',
    EtcGmt13: 'Etc/GMT-13',
    EtcGmt14: 'Etc/GMT-14',
    EtcGmt2: 'Etc/GMT-2',
    EtcGmt3: 'Etc/GMT-3',
    EtcGmt4: 'Etc/GMT-4',
    EtcGmt5: 'Etc/GMT-5',
    EtcGmt6: 'Etc/GMT-6',
    EtcGmt7: 'Etc/GMT-7',
    EtcGmt8: 'Etc/GMT-8',
    EtcGmt9: 'Etc/GMT-9',
    EtcUtc: 'Etc/UTC',
    EuropeAmsterdam: 'Europe/Amsterdam',
    EuropeAndorra: 'Europe/Andorra',
    EuropeAstrakhan: 'Europe/Astrakhan',
    EuropeAthens: 'Europe/Athens',
    EuropeBelgrade: 'Europe/Belgrade',
    EuropeBerlin: 'Europe/Berlin',
    EuropeBrussels: 'Europe/Brussels',
    EuropeBucharest: 'Europe/Bucharest',
    EuropeBudapest: 'Europe/Budapest',
    EuropeChisinau: 'Europe/Chisinau',
    EuropeCopenhagen: 'Europe/Copenhagen',
    EuropeDublin: 'Europe/Dublin',
    EuropeGibraltar: 'Europe/Gibraltar',
    EuropeHelsinki: 'Europe/Helsinki',
    EuropeIstanbul: 'Europe/Istanbul',
    EuropeKaliningrad: 'Europe/Kaliningrad',
    EuropeKiev: 'Europe/Kiev',
    EuropeKirov: 'Europe/Kirov',
    EuropeLisbon: 'Europe/Lisbon',
    EuropeLondon: 'Europe/London',
    EuropeLuxembourg: 'Europe/Luxembourg',
    EuropeMadrid: 'Europe/Madrid',
    EuropeMalta: 'Europe/Malta',
    EuropeMinsk: 'Europe/Minsk',
    EuropeMonaco: 'Europe/Monaco',
    EuropeMoscow: 'Europe/Moscow',
    EuropeOslo: 'Europe/Oslo',
    EuropeParis: 'Europe/Paris',
    EuropePrague: 'Europe/Prague',
    EuropeRiga: 'Europe/Riga',
    EuropeRome: 'Europe/Rome',
    EuropeSamara: 'Europe/Samara',
    EuropeSaratov: 'Europe/Saratov',
    EuropeSimferopol: 'Europe/Simferopol',
    EuropeSofia: 'Europe/Sofia',
    EuropeStockholm: 'Europe/Stockholm',
    EuropeTallinn: 'Europe/Tallinn',
    EuropeTirane: 'Europe/Tirane',
    EuropeUlyanovsk: 'Europe/Ulyanovsk',
    EuropeUzhgorod: 'Europe/Uzhgorod',
    EuropeVienna: 'Europe/Vienna',
    EuropeVilnius: 'Europe/Vilnius',
    EuropeVolgograd: 'Europe/Volgograd',
    EuropeWarsaw: 'Europe/Warsaw',
    EuropeZaporozhye: 'Europe/Zaporozhye',
    EuropeZurich: 'Europe/Zurich',
    Hst: 'HST',
    IndianChagos: 'Indian/Chagos',
    IndianChristmas: 'Indian/Christmas',
    IndianCocos: 'Indian/Cocos',
    IndianKerguelen: 'Indian/Kerguelen',
    IndianMahe: 'Indian/Mahe',
    IndianMaldives: 'Indian/Maldives',
    IndianMauritius: 'Indian/Mauritius',
    IndianReunion: 'Indian/Reunion',
    Met: 'MET',
    Mst: 'MST',
    Mst7Mdt: 'MST7MDT',
    Pst8Pdt: 'PST8PDT',
    PacificApia: 'Pacific/Apia',
    PacificAuckland: 'Pacific/Auckland',
    PacificBougainville: 'Pacific/Bougainville',
    PacificChatham: 'Pacific/Chatham',
    PacificChuuk: 'Pacific/Chuuk',
    PacificEaster: 'Pacific/Easter',
    PacificEfate: 'Pacific/Efate',
    PacificEnderbury: 'Pacific/Enderbury',
    PacificFakaofo: 'Pacific/Fakaofo',
    PacificFiji: 'Pacific/Fiji',
    PacificFunafuti: 'Pacific/Funafuti',
    PacificGalapagos: 'Pacific/Galapagos',
    PacificGambier: 'Pacific/Gambier',
    PacificGuadalcanal: 'Pacific/Guadalcanal',
    PacificGuam: 'Pacific/Guam',
    PacificHonolulu: 'Pacific/Honolulu',
    PacificKiritimati: 'Pacific/Kiritimati',
    PacificKosrae: 'Pacific/Kosrae',
    PacificKwajalein: 'Pacific/Kwajalein',
    PacificMajuro: 'Pacific/Majuro',
    PacificMarquesas: 'Pacific/Marquesas',
    PacificNauru: 'Pacific/Nauru',
    PacificNiue: 'Pacific/Niue',
    PacificNorfolk: 'Pacific/Norfolk',
    PacificNoumea: 'Pacific/Noumea',
    PacificPagoPago: 'Pacific/Pago_Pago',
    PacificPalau: 'Pacific/Palau',
    PacificPitcairn: 'Pacific/Pitcairn',
    PacificPohnpei: 'Pacific/Pohnpei',
    PacificPortMoresby: 'Pacific/Port_Moresby',
    PacificRarotonga: 'Pacific/Rarotonga',
    PacificTahiti: 'Pacific/Tahiti',
    PacificTarawa: 'Pacific/Tarawa',
    PacificTongatapu: 'Pacific/Tongatapu',
    PacificWake: 'Pacific/Wake',
    PacificWallis: 'Pacific/Wallis',
    Wet: 'WET',
    Null: 'null'
} as const;

export type CatalogsFeedProcessingScheduleTimezoneEnum = typeof CatalogsFeedProcessingScheduleTimezoneEnum[keyof typeof CatalogsFeedProcessingScheduleTimezoneEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const CatalogsFeedProcessingStatus = {
    Completed: 'COMPLETED',
    CompletedEarly: 'COMPLETED_EARLY',
    Disapproved: 'DISAPPROVED',
    Failed: 'FAILED',
    Processing: 'PROCESSING',
    QueuedForProcessing: 'QUEUED_FOR_PROCESSING',
    UnderAppeal: 'UNDER_APPEAL',
    UnderReview: 'UNDER_REVIEW'
} as const;

export type CatalogsFeedProcessingStatus = typeof CatalogsFeedProcessingStatus[keyof typeof CatalogsFeedProcessingStatus];


/**
 * The counts can be null early in the process.
 * @export
 * @interface CatalogsFeedProductCounts
 */
export interface CatalogsFeedProductCounts {
    /**
     * The number of products in the feed file
     * @type {number}
     * @memberof CatalogsFeedProductCounts
     */
    'original'?: number;
}
/**
 * 
 * @export
 * @interface CatalogsFeedValidationDetails
 */
export interface CatalogsFeedValidationDetails {
    /**
     * 
     * @type {CatalogsFeedValidationErrors}
     * @memberof CatalogsFeedValidationDetails
     */
    'errors': CatalogsFeedValidationErrors;
    /**
     * 
     * @type {CatalogsFeedValidationWarnings}
     * @memberof CatalogsFeedValidationDetails
     */
    'warnings': CatalogsFeedValidationWarnings;
}
/**
 * 
 * @export
 * @interface CatalogsFeedValidationErrors
 */
export interface CatalogsFeedValidationErrors {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'fetch_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'fetch_inactive_feed_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'encoding_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'delimiter_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'required_columns_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'image_link_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'itemid_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'title_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'description_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'product_category_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'product_link_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'image_link_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'availability_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'product_price_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'link_format_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'parse_line_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'adwords_format_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'product_category_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'internal_service_error'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'no_verified_domain'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'adult_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'invalid_domain'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'feed_length_too_long'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'link_length_too_long'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'malformed_xml'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'redirect_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'price_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'feed_too_small'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'condition_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'shopify_no_products'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'max_items_per_item_group_exceeded'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'item_main_image_download_failure'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'pinjoin_content_unsafe'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    'blocklisted_image_signature'?: number;
}
/**
 * 
 * @export
 * @interface CatalogsFeedValidationWarnings
 */
export interface CatalogsFeedValidationWarnings {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'title_length_too_long'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'description_length_too_long'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'gender_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'age_group_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'size_type_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'link_format_warning'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'duplicate_products'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'duplicate_links'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'sales_price_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'product_category_depth_warning'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'adwords_same_as_link'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'duplicate_headers'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'fetch_same_signature'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'adwords_format_warning'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'additional_image_link_warning'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'image_link_warning'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'shipping_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'tax_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'shipping_weight_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'expiration_date_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'availability_date_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'sale_date_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'weight_unit_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'is_bundle_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'updated_time_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'custom_label_length_too_long'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'product_type_length_too_long'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'too_many_additional_image_links'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'multipack_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'indexed_product_count_large_delta'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'item_additional_image_download_failure'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'optional_product_category_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'optional_product_category_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'optional_condition_missing'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'optional_condition_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'ios_deep_link_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'android_deep_link_invalid'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'availability_normalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'condition_normalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'gender_normalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'size_type_normalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'age_group_normalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'utm_source_auto_corrected'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'country_does_not_map_to_currency'?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    'min_ad_price_invalid'?: number;
}
/**
 * Request object for creating a feed. Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.
 * @export
 * @interface CatalogsFeedsCreateRequest
 */
export interface CatalogsFeedsCreateRequest {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeedsCreateRequest
     */
    'default_country'?: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeedsCreateRequest
     */
    'default_availability'?: ProductAvailabilityType | null;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeedsCreateRequest
     */
    'default_currency'?: NullableCurrency | null;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeedsCreateRequest
     */
    'format': CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    'default_locale'?: string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeedsCreateRequest
     */
    'credentials'?: CatalogsFeedCredentials | null;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    'location': string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeedsCreateRequest
     */
    'preferred_processing_schedule'?: CatalogsFeedProcessingSchedule | null;
}
/**
 * Request object for updating a feed.
 * @export
 * @interface CatalogsFeedsUpdateRequest
 */
export interface CatalogsFeedsUpdateRequest {
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'default_availability'?: ProductAvailabilityType | null;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'default_currency'?: NullableCurrency | null;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'format'?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'credentials'?: CatalogsFeedCredentials | null;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'location'?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'preferred_processing_schedule'?: CatalogsFeedProcessingSchedule | null;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeedsUpdateRequest
     */
    'status'?: CatalogsStatus;
}
/**
 * The file format of a feed.
 * @export
 * @enum {string}
 */

export const CatalogsFormat = {
    Tsv: 'TSV',
    Csv: 'CSV',
    Xml: 'XML'
} as const;

export type CatalogsFormat = typeof CatalogsFormat[keyof typeof CatalogsFormat];


/**
 * Response object of catalogs items
 * @export
 * @interface CatalogsItems
 */
export interface CatalogsItems {
    /**
     * Array with catalogs items
     * @type {Array<ItemBatchRecord>}
     * @memberof CatalogsItems
     */
    'items'?: Array<ItemBatchRecord>;
}
/**
 * Object describing the catalogs items batch
 * @export
 * @interface CatalogsItemsBatch
 */
export interface CatalogsItemsBatch {
    /**
     * Array with the catalogs items processing records part of the catalogs items batch
     * @type {Array<ItemProcessingRecord>}
     * @memberof CatalogsItemsBatch
     */
    'items'?: Array<ItemProcessingRecord>;
    /**
     * Id of the catalogs items batch
     * @type {string}
     * @memberof CatalogsItemsBatch
     */
    'batch_id'?: string;
    /**
     * Time of the batch creation: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {string}
     * @memberof CatalogsItemsBatch
     */
    'created_time'?: string;
    /**
     * Time of the batch completion: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {string}
     * @memberof CatalogsItemsBatch
     */
    'completed_time'?: string | null;
    /**
     * 
     * @type {BatchOperationStatus}
     * @memberof CatalogsItemsBatch
     */
    'status'?: BatchOperationStatus;
}
/**
 * Request object of catalogs items batch
 * @export
 * @interface CatalogsItemsBatchRequest
 */
export interface CatalogsItemsBatchRequest {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsBatchRequest
     */
    'country'?: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsBatchRequest
     */
    'language'?: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsBatchRequest
     */
    'operation'?: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemBatchRecord>}
     * @memberof CatalogsItemsBatchRequest
     */
    'items'?: Array<ItemBatchRecord>;
}
/**
 * catalog product group entity
 * @export
 * @interface CatalogsProductGroup
 */
export interface CatalogsProductGroup {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    'id': string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    'description'?: string | null;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroup
     */
    'filters': CatalogsProductGroupFilters;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsProductGroup
     */
    'type'?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsProductGroup
     */
    'status'?: CatalogsProductGroupStatus;
    /**
     * id of the catalogs feed belonging to this catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    'feed_id'?: string;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    'created_at'?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    'updated_at'?: number;
}
/**
 * Request object for creating a product group.
 * @export
 * @interface CatalogsProductGroupCreateRequest
 */
export interface CatalogsProductGroupCreateRequest {
    /**
     * Catalog Feed id pertaining to the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    'feed_id': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroupCreateRequest
     */
    'filters': CatalogsProductGroupFilters;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupCurrencyCriteria
 */
export interface CatalogsProductGroupCurrencyCriteria {
    /**
     * 
     * @type {NonNullableCatalogsCurrency}
     * @memberof CatalogsProductGroupCurrencyCriteria
     */
    'values': NonNullableCatalogsCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupCurrencyCriteria
     */
    'negated': boolean;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupFilterKeys
 */
export interface CatalogsProductGroupFilterKeys {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'MIN_PRICE': CatalogsProductGroupPricingCriteria;
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'MAX_PRICE': CatalogsProductGroupPricingCriteria;
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CURRENCY': CatalogsProductGroupCurrencyCriteria;
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'ITEM_ID': CatalogsProductGroupCurrencyCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'AVAILABILITY': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'BRAND': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CONDITION': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CUSTOM_LABEL_0': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CUSTOM_LABEL_1': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CUSTOM_LABEL_2': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CUSTOM_LABEL_3': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'CUSTOM_LABEL_4': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'ITEM_GROUP_ID': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GENDER': CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'PRODUCT_TYPE_4': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'PRODUCT_TYPE_3': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'PRODUCT_TYPE_2': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'PRODUCT_TYPE_1': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'PRODUCT_TYPE_0': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_6': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_5': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_4': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_3': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_2': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_1': CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    'GOOGLE_PRODUCT_CATEGORY_0': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * Object holding a group of filters for a catalog product group
 * @export
 * @interface CatalogsProductGroupFilters
 */
export interface CatalogsProductGroupFilters {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFilters
     */
    'any_of'?: Array<CatalogsProductGroupFilterKeys>;
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFilters
     */
    'all_of'?: Array<CatalogsProductGroupFilterKeys>;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupFiltersAllOf
 */
export interface CatalogsProductGroupFiltersAllOf {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersAllOf
     */
    'all_of'?: Array<CatalogsProductGroupFilterKeys>;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupFiltersAnyOf
 */
export interface CatalogsProductGroupFiltersAnyOf {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersAnyOf
     */
    'any_of'?: Array<CatalogsProductGroupFilterKeys>;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupMultipleStringCriteria
 */
export interface CatalogsProductGroupMultipleStringCriteria {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsProductGroupMultipleStringCriteria
     */
    'values': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleStringCriteria
     */
    'negated': boolean;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupMultipleStringListCriteria
 */
export interface CatalogsProductGroupMultipleStringListCriteria {
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof CatalogsProductGroupMultipleStringListCriteria
     */
    'values': Array<Array<string>>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleStringListCriteria
     */
    'negated': boolean;
}
/**
 * 
 * @export
 * @interface CatalogsProductGroupPricingCriteria
 */
export interface CatalogsProductGroupPricingCriteria {
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    'inclusion': boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    'values': number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    'negated': boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CatalogsProductGroupStatus = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type CatalogsProductGroupStatus = typeof CatalogsProductGroupStatus[keyof typeof CatalogsProductGroupStatus];


/**
 * Catalog product group type
 * @export
 * @enum {string}
 */

export const CatalogsProductGroupType = {
    MerchantCreated: 'MERCHANT_CREATED',
    AllProducts: 'ALL_PRODUCTS',
    BestDeals: 'BEST_DEALS',
    PinnerFavorites: 'PINNER_FAVORITES',
    TopSellers: 'TOP_SELLERS',
    BackInStock: 'BACK_IN_STOCK',
    NewArrivals: 'NEW_ARRIVALS'
} as const;

export type CatalogsProductGroupType = typeof CatalogsProductGroupType[keyof typeof CatalogsProductGroupType];


/**
 * Request object for updating a product group.
 * @export
 * @interface CatalogsProductGroupUpdateRequest
 */
export interface CatalogsProductGroupUpdateRequest {
    /**
     * Catalog Feed id pertaining to the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    'feed_id': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    'filters': CatalogsProductGroupFilters;
}
/**
 * Status for catalogs entities. Present in catalogs_feed values. When a feed is deleted, the response will inform DELETED as status.
 * @export
 * @enum {string}
 */

export const CatalogsStatus = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type CatalogsStatus = typeof CatalogsStatus[keyof typeof CatalogsStatus];


/**
 * 
 * @export
 * @interface ConditionFilter
 */
export interface ConditionFilter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ConditionFilter
     */
    'CONDITION': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ConversionAttributionWindowDays = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;

export type ConversionAttributionWindowDays = typeof ConversionAttributionWindowDays[keyof typeof ConversionAttributionWindowDays];


/**
 * Attribution type. Refers to the Pinterest Tag endpoints
 * @export
 * @enum {string}
 */

export const ConversionReportAttributionType = {
    Individual: 'INDIVIDUAL',
    Household: 'HOUSEHOLD'
} as const;

export type ConversionReportAttributionType = typeof ConversionReportAttributionType[keyof typeof ConversionReportAttributionType];


/**
 * Conversion report time type
 * @export
 * @enum {string}
 */

export const ConversionReportTimeType = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;

export type ConversionReportTimeType = typeof ConversionReportTimeType[keyof typeof ConversionReportTimeType];


/**
 * Country ID from ISO 3166-1 alpha-2.
 * @export
 * @enum {string}
 */

export const Country = {
    Ad: 'AD',
    Ae: 'AE',
    Af: 'AF',
    Ag: 'AG',
    Ai: 'AI',
    Al: 'AL',
    Am: 'AM',
    Ao: 'AO',
    Aq: 'AQ',
    Ar: 'AR',
    As: 'AS',
    At: 'AT',
    Au: 'AU',
    Aw: 'AW',
    Ax: 'AX',
    Az: 'AZ',
    Ba: 'BA',
    Bb: 'BB',
    Bd: 'BD',
    Be: 'BE',
    Bf: 'BF',
    Bg: 'BG',
    Bh: 'BH',
    Bi: 'BI',
    Bj: 'BJ',
    Bl: 'BL',
    Bm: 'BM',
    Bn: 'BN',
    Bo: 'BO',
    Bq: 'BQ',
    Br: 'BR',
    Bs: 'BS',
    Bt: 'BT',
    Bv: 'BV',
    Bw: 'BW',
    By: 'BY',
    Bz: 'BZ',
    Ca: 'CA',
    Cc: 'CC',
    Cd: 'CD',
    Cf: 'CF',
    Cg: 'CG',
    Ch: 'CH',
    Ci: 'CI',
    Ck: 'CK',
    Cl: 'CL',
    Cm: 'CM',
    Co: 'CO',
    Cr: 'CR',
    Cu: 'CU',
    Cv: 'CV',
    Cw: 'CW',
    Cx: 'CX',
    Cy: 'CY',
    Cz: 'CZ',
    De: 'DE',
    Dj: 'DJ',
    Dk: 'DK',
    Dm: 'DM',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Ee: 'EE',
    Eg: 'EG',
    Eh: 'EH',
    Er: 'ER',
    Es: 'ES',
    Et: 'ET',
    Fi: 'FI',
    Fj: 'FJ',
    Fk: 'FK',
    Fm: 'FM',
    Fo: 'FO',
    Fr: 'FR',
    Ga: 'GA',
    Gb: 'GB',
    Gd: 'GD',
    Ge: 'GE',
    Gf: 'GF',
    Gg: 'GG',
    Gh: 'GH',
    Gi: 'GI',
    Gl: 'GL',
    Gm: 'GM',
    Gn: 'GN',
    Gp: 'GP',
    Gq: 'GQ',
    Gr: 'GR',
    Gs: 'GS',
    Gt: 'GT',
    Gu: 'GU',
    Gw: 'GW',
    Gy: 'GY',
    Hk: 'HK',
    Hm: 'HM',
    Hn: 'HN',
    Hr: 'HR',
    Ht: 'HT',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    Io: 'IO',
    Iq: 'IQ',
    Ir: 'IR',
    Is: 'IS',
    It: 'IT',
    Je: 'JE',
    Jm: 'JM',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kg: 'KG',
    Kh: 'KH',
    Ki: 'KI',
    Km: 'KM',
    Kn: 'KN',
    Kr: 'KR',
    Kw: 'KW',
    Ky: 'KY',
    Kz: 'KZ',
    La: 'LA',
    Lb: 'LB',
    Lc: 'LC',
    Li: 'LI',
    Lk: 'LK',
    Lr: 'LR',
    Ls: 'LS',
    Lt: 'LT',
    Lu: 'LU',
    Lv: 'LV',
    Ly: 'LY',
    Ma: 'MA',
    Mc: 'MC',
    Md: 'MD',
    Me: 'ME',
    Mf: 'MF',
    Mg: 'MG',
    Mh: 'MH',
    Mk: 'MK',
    Ml: 'ML',
    Mm: 'MM',
    Mn: 'MN',
    Mo: 'MO',
    Mp: 'MP',
    Mq: 'MQ',
    Mr: 'MR',
    Ms: 'MS',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mw: 'MW',
    Mx: 'MX',
    My: 'MY',
    Mz: 'MZ',
    Na: 'NA',
    Nc: 'NC',
    Ne: 'NE',
    Nf: 'NF',
    Ng: 'NG',
    Ni: 'NI',
    Nl: 'NL',
    No: 'NO',
    Np: 'NP',
    Nr: 'NR',
    Nu: 'NU',
    Nz: 'NZ',
    Om: 'OM',
    Pa: 'PA',
    Pe: 'PE',
    Pf: 'PF',
    Pg: 'PG',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pm: 'PM',
    Pn: 'PN',
    Pr: 'PR',
    Ps: 'PS',
    Pt: 'PT',
    Pw: 'PW',
    Py: 'PY',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Rs: 'RS',
    Ru: 'RU',
    Rw: 'RW',
    Sa: 'SA',
    Sb: 'SB',
    Sc: 'SC',
    Sd: 'SD',
    Se: 'SE',
    Sg: 'SG',
    Sh: 'SH',
    Si: 'SI',
    Sj: 'SJ',
    Sk: 'SK',
    Sl: 'SL',
    Sm: 'SM',
    Sn: 'SN',
    So: 'SO',
    Sr: 'SR',
    Ss: 'SS',
    St: 'ST',
    Sv: 'SV',
    Sx: 'SX',
    Sy: 'SY',
    Sz: 'SZ',
    Tc: 'TC',
    Td: 'TD',
    Tf: 'TF',
    Tg: 'TG',
    Th: 'TH',
    Tj: 'TJ',
    Tk: 'TK',
    Tl: 'TL',
    Tm: 'TM',
    Tn: 'TN',
    To: 'TO',
    Tr: 'TR',
    Tt: 'TT',
    Tv: 'TV',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Um: 'UM',
    Us: 'US',
    Uy: 'UY',
    Uz: 'UZ',
    Va: 'VA',
    Vc: 'VC',
    Ve: 'VE',
    Vg: 'VG',
    Vi: 'VI',
    Vn: 'VN',
    Vu: 'VU',
    Wf: 'WF',
    Ws: 'WS',
    Ye: 'YE',
    Yt: 'YT',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
} as const;

export type Country = typeof Country[keyof typeof Country];


/**
 * Currency Codes from ISO 4217
 * @export
 * @enum {string}
 */

export const Currency = {
    Unk: 'UNK',
    Usd: 'USD',
    Gbp: 'GBP',
    Cad: 'CAD',
    Eur: 'EUR',
    Aud: 'AUD',
    Nzd: 'NZD',
    Sek: 'SEK',
    Ils: 'ILS',
    Chf: 'CHF',
    Hkd: 'HKD',
    Jpy: 'JPY',
    Sgd: 'SGD',
    Krw: 'KRW',
    Nok: 'NOK',
    Dkk: 'DKK',
    Pln: 'PLN',
    Ron: 'RON',
    Huf: 'HUF',
    Czk: 'CZK',
    Brl: 'BRL',
    Mxn: 'MXN',
    Ars: 'ARS',
    Clp: 'CLP',
    Cop: 'COP'
} as const;

export type Currency = typeof Currency[keyof typeof Currency];


/**
 * 
 * @export
 * @interface CurrencyFilter
 */
export interface CurrencyFilter {
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CurrencyFilter
     */
    'CURRENCY': CatalogsProductGroupCurrencyCriteria;
}
/**
 * 
 * @export
 * @interface CustomLabel0Filter
 */
export interface CustomLabel0Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel0Filter
     */
    'CUSTOM_LABEL_0': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @interface CustomLabel1Filter
 */
export interface CustomLabel1Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel1Filter
     */
    'CUSTOM_LABEL_1': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @interface CustomLabel2Filter
 */
export interface CustomLabel2Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel2Filter
     */
    'CUSTOM_LABEL_2': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @interface CustomLabel3Filter
 */
export interface CustomLabel3Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel3Filter
     */
    'CUSTOM_LABEL_3': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @interface CustomLabel4Filter
 */
export interface CustomLabel4Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel4Filter
     */
    'CUSTOM_LABEL_4': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * Format of generated report
 * @export
 * @enum {string}
 */

export const DataOutputFormat = {
    Json: 'JSON',
    Csv: 'CSV'
} as const;

export type DataOutputFormat = typeof DataOutputFormat[keyof typeof DataOutputFormat];


/**
 * Entity status
 * @export
 * @enum {string}
 */

export const EntityStatus = {
    Active: 'ACTIVE',
    Paused: 'PAUSED',
    Archived: 'ARCHIVED'
} as const;

export type EntityStatus = typeof EntityStatus[keyof typeof EntityStatus];


/**
 * 
 * @export
 * @interface FeedFields
 */
export interface FeedFields {
    /**
     * 
     * @type {Country}
     * @memberof FeedFields
     */
    'default_country': Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof FeedFields
     */
    'default_availability': ProductAvailabilityType | null;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof FeedFields
     */
    'default_currency': NullableCurrency | null;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof FeedFields
     */
    'name': string | null;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof FeedFields
     */
    'format': CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof FeedFields
     */
    'default_locale': string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof FeedFields
     */
    'credentials': CatalogsFeedCredentials | null;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof FeedFields
     */
    'location': string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof FeedFields
     */
    'preferred_processing_schedule': CatalogsFeedProcessingSchedule | null;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof FeedFields
     */
    'status': CatalogsStatus;
}
/**
 * 
 * @export
 * @interface GenderFilter
 */
export interface GenderFilter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof GenderFilter
     */
    'GENDER': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory0Filter
 */
export interface GoogleProductCategory0Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory0Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_0': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory1Filter
 */
export interface GoogleProductCategory1Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory1Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_1': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory2Filter
 */
export interface GoogleProductCategory2Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory2Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_2': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory3Filter
 */
export interface GoogleProductCategory3Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory3Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_3': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory4Filter
 */
export interface GoogleProductCategory4Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory4Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_4': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory5Filter
 */
export interface GoogleProductCategory5Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory5Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_5': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface GoogleProductCategory6Filter
 */
export interface GoogleProductCategory6Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory6Filter
     */
    'GOOGLE_PRODUCT_CATEGORY_6': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Granularity = {
    Total: 'TOTAL',
    Day: 'DAY',
    Hour: 'HOUR',
    Week: 'WEEK',
    Month: 'MONTH'
} as const;

export type Granularity = typeof Granularity[keyof typeof Granularity];


/**
 * 
 * @export
 * @interface ImageDetails
 */
export interface ImageDetails {
    /**
     * 
     * @type {number}
     * @memberof ImageDetails
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof ImageDetails
     */
    'height': number | null;
    /**
     * 
     * @type {string}
     * @memberof ImageDetails
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemAttributes
 */
export interface ItemAttributes {
    /**
     * Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
     * @type {string}
     * @memberof ItemAttributes
     */
    'ad_link'?: string;
    /**
     * The links to additional images for your product. Up to five additional images can be used to show a product from different angles or to show different stages. Separate each additional image with a comma. We recommend enclosing the whole string with quotes. Must begin with http:// or https://
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    'additional_image_link'?: Array<string>;
    /**
     * Set this attribute to TRUE if you\'re submitting items that are considered “adult”. These will not be shown on Pinterest.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    'adult'?: boolean;
    /**
     * The age group to apply a demographic range to the product. Must be one of the following values: ‘newborn’, ‘infant’, ‘toddler’, ‘kids’, ‘adult’.
     * @type {string}
     * @memberof ItemAttributes
     */
    'age_group'?: string;
    /**
     * The availability of the product. Must be one of the following values: ‘in stock’, ‘out of stock’, ‘preorder’.
     * @type {string}
     * @memberof ItemAttributes
     */
    'availability'?: string;
    /**
     * Average reviews for the item. Can be a number from 1-5.
     * @type {number}
     * @memberof ItemAttributes
     */
    'average_review_rating'?: number;
    /**
     * The brand of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'brand'?: string;
    /**
     * The primary color of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'color'?: string;
    /**
     * The condition of the product. Must be one of the following values: ‘new’, ‘used’, ‘refurbished’.
     * @type {string}
     * @memberof ItemAttributes
     */
    'condition'?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    'custom_label_0'?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    'custom_label_1'?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    'custom_label_2'?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    'custom_label_3'?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    'custom_label_4'?: string;
    /**
     * The description of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'description'?: string;
    /**
     * The item is free to ship.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    'free_shipping_label'?: boolean;
    /**
     * The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
     * @type {string}
     * @memberof ItemAttributes
     */
    'free_shipping_limit'?: string;
    /**
     * The gender associated with the product. Must be one of the following values: ‘male’, ‘female’, ‘unisex’.
     * @type {string}
     * @memberof ItemAttributes
     */
    'gender'?: string;
    /**
     * The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
     * @type {string}
     * @memberof ItemAttributes
     */
    'google_product_category'?: string;
    /**
     * The unique universal product identifier.
     * @type {number}
     * @memberof ItemAttributes
     */
    'gtin'?: number;
    /**
     * The user-created unique ID that represents the product. Only Unicode characters are accepted.
     * @type {string}
     * @memberof ItemAttributes
     */
    'id'?: string;
    /**
     * The link to the main product images. Images should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your product. The URL of your image_link must be accessible by the Pinterest user-agent, and send the accurate images. Please make sure there are no template or placeholder images at the link. Must start with http:// or https://
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    'image_link'?: Array<string>;
    /**
     * The parent ID of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'item_group_id'?: string;
    /**
     * The millisecond timestamp when the item was lastly modified by the merchant.
     * @type {number}
     * @memberof ItemAttributes
     */
    'last_updated_time'?: number;
    /**
     * The landing page for the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'link'?: string;
    /**
     * The material used to make the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'material'?: string;
    /**
     * The minimum advertised price of the product. It supports the following formats, \"19.99 USD\", \"19.99USD\" and \"19.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    'min_ad_price'?: string;
    /**
     * The mobile-optimized version of your landing page. Must begin with http:// or https://.
     * @type {string}
     * @memberof ItemAttributes
     */
    'mobile_link'?: string;
    /**
     * Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
     * @type {string}
     * @memberof ItemAttributes
     */
    'mpn'?: string;
    /**
     * The number of ratings for the item.
     * @type {number}
     * @memberof ItemAttributes
     */
    'number_of_ratings'?: number;
    /**
     * The number of reviews available for the item.
     * @type {number}
     * @memberof ItemAttributes
     */
    'number_of_reviews'?: number;
    /**
     * The description of the pattern used for the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'pattern'?: string;
    /**
     * The price of the product. It supports the following formats, \"24.99 USD\", \"24.99USD\" and \"24.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    'price'?: string;
    /**
     * The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ > “. The > must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.
     * @type {string}
     * @memberof ItemAttributes
     */
    'product_type'?: string;
    /**
     * The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \"14.99 USD\", \"14.99USD\" and \"14.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    'sale_price'?: string;
    /**
     * Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
     * @type {string}
     * @memberof ItemAttributes
     */
    'shipping'?: string;
    /**
     * The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    'shipping_height'?: string;
    /**
     * The weight of the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    'shipping_weight'?: string;
    /**
     * The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    'shipping_width'?: string;
    /**
     * The size of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'size'?: string;
    /**
     * Indicates the country’s sizing system in which you are submitting your product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'size_system'?: string;
    /**
     * Additional description for the size. Must be one of the following values: ‘regular’, ‘petite’, ‘plus’, ‘big_and_tall’, ‘maternity’.
     * @type {string}
     * @memberof ItemAttributes
     */
    'size_type'?: string;
    /**
     * Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
     * @type {string}
     * @memberof ItemAttributes
     */
    'tax'?: string;
    /**
     * The name of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    'title'?: string;
}
/**
 * Object describing an item batch record
 * @export
 * @interface ItemBatchRecord
 */
export interface ItemBatchRecord {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemBatchRecord
     */
    'item_id'?: string;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof ItemBatchRecord
     */
    'attributes'?: ItemAttributes;
}
/**
 * 
 * @export
 * @interface ItemGroupIdFilter
 */
export interface ItemGroupIdFilter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ItemGroupIdFilter
     */
    'ITEM_GROUP_ID': CatalogsProductGroupMultipleStringCriteria;
}
/**
 * 
 * @export
 * @interface ItemIdFilter
 */
export interface ItemIdFilter {
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof ItemIdFilter
     */
    'ITEM_ID': CatalogsProductGroupCurrencyCriteria;
}
/**
 * Object describing an item processing record
 * @export
 * @interface ItemProcessingRecord
 */
export interface ItemProcessingRecord {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemProcessingRecord
     */
    'item_id'?: string;
    /**
     * Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemProcessingRecord
     */
    'errors'?: Array<ItemValidationEvent>;
    /**
     * Array with the validation warnings for the item processing record
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemProcessingRecord
     */
    'warnings'?: Array<ItemValidationEvent>;
    /**
     * 
     * @type {ItemProcessingStatus}
     * @memberof ItemProcessingRecord
     */
    'status'?: ItemProcessingStatus;
}
/**
 * The status of the item processing record
 * @export
 * @enum {string}
 */

export const ItemProcessingStatus = {
    Success: 'SUCCESS',
    Failure: 'FAILURE',
    Processing: 'PROCESSING'
} as const;

export type ItemProcessingStatus = typeof ItemProcessingStatus[keyof typeof ItemProcessingStatus];


/**
 * Object describing an item validation event
 * @export
 * @interface ItemValidationEvent
 */
export interface ItemValidationEvent {
    /**
     * The attribute that the item validation event references
     * @type {string}
     * @memberof ItemValidationEvent
     */
    'attribute'?: string;
    /**
     * The event code that the item validation event references
     * @type {number}
     * @memberof ItemValidationEvent
     */
    'code'?: number;
    /**
     * Title message describing the item validation event
     * @type {string}
     * @memberof ItemValidationEvent
     */
    'message'?: string;
}
/**
 * Language code, which is among the offical ISO 639-1 language list.
 * @export
 * @enum {string}
 */

export const Language = {
    Am: 'AM',
    Ar: 'AR',
    Az: 'AZ',
    Bg: 'BG',
    Bn: 'BN',
    Bs: 'BS',
    Ca: 'CA',
    Cs: 'CS',
    Da: 'DA',
    Dv: 'DV',
    Dz: 'DZ',
    De: 'DE',
    El: 'EL',
    En: 'EN',
    Es: 'ES',
    Et: 'ET',
    Fa: 'FA',
    Fi: 'FI',
    Fr: 'FR',
    He: 'HE',
    Hi: 'HI',
    Hr: 'HR',
    Hu: 'HU',
    Hy: 'HY',
    Id: 'ID',
    In: 'IN',
    Is: 'IS',
    It: 'IT',
    Iw: 'IW',
    Ja: 'JA',
    Ka: 'KA',
    Km: 'KM',
    Ko: 'KO',
    Lo: 'LO',
    Lt: 'LT',
    Lv: 'LV',
    Mk: 'MK',
    Mn: 'MN',
    Ms: 'MS',
    My: 'MY',
    Nb: 'NB',
    Ne: 'NE',
    Nl: 'NL',
    No: 'NO',
    Pl: 'PL',
    Pt: 'PT',
    Ro: 'RO',
    Ru: 'RU',
    Sk: 'SK',
    Sl: 'SL',
    Sq: 'SQ',
    Sr: 'SR',
    Sv: 'SV',
    Tl: 'TL',
    Uk: 'UK',
    Vi: 'VI',
    Te: 'TE',
    Th: 'TH',
    Tr: 'TR',
    Xx: 'XX',
    Zh: 'ZH'
} as const;

export type Language = typeof Language[keyof typeof Language];


/**
 * 
 * @export
 * @interface MaxPriceFilter
 */
export interface MaxPriceFilter {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof MaxPriceFilter
     */
    'MAX_PRICE': CatalogsProductGroupPricingCriteria;
}
/**
 * Media upload that has been registered but not uploaded/processed yet.
 * @export
 * @interface MediaUpload
 */
export interface MediaUpload {
    /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     * @type {string}
     * @memberof MediaUpload
     */
    'media_id'?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUpload
     */
    'media_type'?: MediaUploadType;
    /**
     * The URL where you will POST your media file.
     * @type {string}
     * @memberof MediaUpload
     */
    'upload_url'?: string;
    /**
     * 
     * @type {MediaUploadAllOfUploadParameters}
     * @memberof MediaUpload
     */
    'upload_parameters'?: MediaUploadAllOfUploadParameters;
}
/**
 * 
 * @export
 * @interface MediaUploadAllOf
 */
export interface MediaUploadAllOf {
    /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     * @type {string}
     * @memberof MediaUploadAllOf
     */
    'media_id'?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadAllOf
     */
    'media_type'?: MediaUploadType;
    /**
     * The URL where you will POST your media file.
     * @type {string}
     * @memberof MediaUploadAllOf
     */
    'upload_url'?: string;
    /**
     * 
     * @type {MediaUploadAllOfUploadParameters}
     * @memberof MediaUploadAllOf
     */
    'upload_parameters'?: MediaUploadAllOfUploadParameters;
}
/**
 * The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
 * @export
 * @interface MediaUploadAllOfUploadParameters
 */
export interface MediaUploadAllOfUploadParameters {
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'x-amz-date'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'x-amz-signature'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'x-amz-security-token'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'x-amz-algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'policy'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'x-amz-credential'?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    'Content-Type'?: string;
}
/**
 * Media upload details
 * @export
 * @interface MediaUploadDetails
 */
export interface MediaUploadDetails {
    /**
     * 
     * @type {string}
     * @memberof MediaUploadDetails
     */
    'media_id'?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadDetails
     */
    'media_type'?: MediaUploadType;
    /**
     * 
     * @type {MediaUploadStatus}
     * @memberof MediaUploadDetails
     */
    'status'?: MediaUploadStatus;
}
/**
 * Media upload request
 * @export
 * @interface MediaUploadRequest
 */
export interface MediaUploadRequest {
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadRequest
     */
    'media_type': MediaUploadType;
}
/**
 * Media upload status
 * @export
 * @enum {string}
 */

export const MediaUploadStatus = {
    Registered: 'registered',
    Processing: 'processing',
    Succeeded: 'succeeded',
    Failed: 'failed'
} as const;

export type MediaUploadStatus = typeof MediaUploadStatus[keyof typeof MediaUploadStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const MediaUploadType = {
    Video: 'video'
} as const;

export type MediaUploadType = typeof MediaUploadType[keyof typeof MediaUploadType];


/**
 * Level of the reporting request
 * @export
 * @enum {string}
 */

export const MetricsReportingLevel = {
    Advertiser: 'ADVERTISER',
    AdvertiserTargeting: 'ADVERTISER_TARGETING',
    Campaign: 'CAMPAIGN',
    CampaignTargeting: 'CAMPAIGN_TARGETING',
    AdGroup: 'AD_GROUP',
    AdGroupTargeting: 'AD_GROUP_TARGETING',
    PinPromotion: 'PIN_PROMOTION',
    PinPromotionTargeting: 'PIN_PROMOTION_TARGETING',
    Keyword: 'KEYWORD',
    ProductGroup: 'PRODUCT_GROUP',
    ProductGroupTargeting: 'PRODUCT_GROUP_TARGETING',
    ProductItem: 'PRODUCT_ITEM'
} as const;

export type MetricsReportingLevel = typeof MetricsReportingLevel[keyof typeof MetricsReportingLevel];


/**
 * 
 * @export
 * @interface MinPriceFilter
 */
export interface MinPriceFilter {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof MinPriceFilter
     */
    'MIN_PRICE': CatalogsProductGroupPricingCriteria;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * Currency Codes from ISO 4217.
 * @export
 * @enum {string}
 */

export const NonNullableCatalogsCurrency = {
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ang: 'ANG',
    Aoa: 'AOA',
    Ars: 'ARS',
    Aud: 'AUD',
    Awg: 'AWG',
    Azn: 'AZN',
    Bam: 'BAM',
    Bbd: 'BBD',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bmd: 'BMD',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bsd: 'BSD',
    Btn: 'BTN',
    Bwp: 'BWP',
    Byn: 'BYN',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cad: 'CAD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cuc: 'CUC',
    Cup: 'CUP',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Eur: 'EUR',
    Fjd: 'FJD',
    Fkp: 'FKP',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ggp: 'GGP',
    Ghs: 'GHS',
    Gip: 'GIP',
    Gmd: 'GMD',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Gyd: 'GYD',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Htg: 'HTG',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Imp: 'IMP',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jep: 'JEP',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Kgs: 'KGS',
    Khr: 'KHR',
    Kmf: 'KMF',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kyd: 'KYD',
    Kzt: 'KZT',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Lrd: 'LRD',
    Lsl: 'LSL',
    Lyd: 'LYD',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mnt: 'MNT',
    Mop: 'MOP',
    Mro: 'MRO',
    Mur: 'MUR',
    Mvr: 'MVR',
    Mwk: 'MWK',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Pgk: 'PGK',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sbd: 'SBD',
    Scr: 'SCR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Shp: 'SHP',
    Sll: 'SLL',
    Sos: 'SOS',
    Spl: 'SPL',
    Srd: 'SRD',
    Std: 'STD',
    Svc: 'SVC',
    Syp: 'SYP',
    Szl: 'SZL',
    Thb: 'THB',
    Tjs: 'TJS',
    Tmt: 'TMT',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Tvd: 'TVD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Vuv: 'VUV',
    Wst: 'WST',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xdr: 'XDR',
    Xof: 'XOF',
    Xpf: 'XPF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmw: 'ZMW',
    Zwd: 'ZWD'
} as const;

export type NonNullableCatalogsCurrency = typeof NonNullableCatalogsCurrency[keyof typeof NonNullableCatalogsCurrency];


/**
 * Currency Codes from ISO 4217.
 * @export
 * @enum {string}
 */

export const NullableCurrency = {
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ang: 'ANG',
    Aoa: 'AOA',
    Ars: 'ARS',
    Aud: 'AUD',
    Awg: 'AWG',
    Azn: 'AZN',
    Bam: 'BAM',
    Bbd: 'BBD',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bmd: 'BMD',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bsd: 'BSD',
    Btn: 'BTN',
    Bwp: 'BWP',
    Byn: 'BYN',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cad: 'CAD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cuc: 'CUC',
    Cup: 'CUP',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Eur: 'EUR',
    Fjd: 'FJD',
    Fkp: 'FKP',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ggp: 'GGP',
    Ghs: 'GHS',
    Gip: 'GIP',
    Gmd: 'GMD',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Gyd: 'GYD',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Htg: 'HTG',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Imp: 'IMP',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jep: 'JEP',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Kgs: 'KGS',
    Khr: 'KHR',
    Kmf: 'KMF',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kyd: 'KYD',
    Kzt: 'KZT',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Lrd: 'LRD',
    Lsl: 'LSL',
    Lyd: 'LYD',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mnt: 'MNT',
    Mop: 'MOP',
    Mro: 'MRO',
    Mur: 'MUR',
    Mvr: 'MVR',
    Mwk: 'MWK',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Pgk: 'PGK',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sbd: 'SBD',
    Scr: 'SCR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Shp: 'SHP',
    Sll: 'SLL',
    Sos: 'SOS',
    Spl: 'SPL',
    Srd: 'SRD',
    Std: 'STD',
    Svc: 'SVC',
    Syp: 'SYP',
    Szl: 'SZL',
    Thb: 'THB',
    Tjs: 'TJS',
    Tmt: 'TMT',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Tvd: 'TVD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Vuv: 'VUV',
    Wst: 'WST',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xdr: 'XDR',
    Xof: 'XOF',
    Xpf: 'XPF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmw: 'ZMW',
    Zwd: 'ZWD',
    Null: 'null'
} as const;

export type NullableCurrency = typeof NullableCurrency[keyof typeof NullableCurrency];


/**
 * Describes the valid schema for possible OAuth access token requests.
 * @export
 * @interface OauthAccessTokenRequest
 */
export interface OauthAccessTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequest
     */
    'grant_type': OauthAccessTokenRequestGrantTypeEnum;
}

export const OauthAccessTokenRequestGrantTypeEnum = {
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token'
} as const;

export type OauthAccessTokenRequestGrantTypeEnum = typeof OauthAccessTokenRequestGrantTypeEnum[keyof typeof OauthAccessTokenRequestGrantTypeEnum];

/**
 * A request to exchange an authorization code for an access token.
 * @export
 * @interface OauthAccessTokenRequestCode
 */
export interface OauthAccessTokenRequestCode extends OauthAccessTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCode
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCode
     */
    'redirect_uri': string;
}


/**
 * 
 * @export
 * @interface OauthAccessTokenRequestCodeAllOf
 */
export interface OauthAccessTokenRequestCodeAllOf {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCodeAllOf
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCodeAllOf
     */
    'redirect_uri': string;
}
/**
 * A request to exchange a refresh token for a new access token.
 * @export
 * @interface OauthAccessTokenRequestRefresh
 */
export interface OauthAccessTokenRequestRefresh extends OauthAccessTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    'refresh_token': string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    'scope'?: string;
}


/**
 * 
 * @export
 * @interface OauthAccessTokenRequestRefreshAllOf
 */
export interface OauthAccessTokenRequestRefreshAllOf {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefreshAllOf
     */
    'refresh_token': string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefreshAllOf
     */
    'scope'?: string;
}
/**
 * A successful OAuth access token response.
 * @export
 * @interface OauthAccessTokenResponse
 */
export interface OauthAccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    'response_type'?: OauthAccessTokenResponseResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    'token_type': string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponse
     */
    'expires_in': number;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    'scope': string;
}

export const OauthAccessTokenResponseResponseTypeEnum = {
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token'
} as const;

export type OauthAccessTokenResponseResponseTypeEnum = typeof OauthAccessTokenResponseResponseTypeEnum[keyof typeof OauthAccessTokenResponseResponseTypeEnum];

/**
 * A successful OAuth access token response for the authorization code flow.
 * @export
 * @interface OauthAccessTokenResponseCode
 */
export interface OauthAccessTokenResponseCode extends OauthAccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseCode
     */
    'refresh_token': string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseCode
     */
    'refresh_token_expires_in': number;
}


/**
 * 
 * @export
 * @interface OauthAccessTokenResponseCodeAllOf
 */
export interface OauthAccessTokenResponseCodeAllOf {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseCodeAllOf
     */
    'refresh_token': string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseCodeAllOf
     */
    'refresh_token_expires_in': number;
}
/**
 * A successful OAuth access token response for the refresh token flow.
 * @export
 * @interface OauthAccessTokenResponseRefresh
 */
export interface OauthAccessTokenResponseRefresh extends OauthAccessTokenResponse {
}


/**
 * Campaign objective type.
 * @export
 * @enum {string}
 */

export const ObjectiveType = {
    Awareness: 'AWARENESS',
    Consideration: 'CONSIDERATION',
    VideoView: 'VIDEO_VIEW',
    WebConversion: 'WEB_CONVERSION',
    CatalogSales: 'CATALOG_SALES',
    WebSessions: 'WEB_SESSIONS',
    AwarenessReserved: 'AWARENESS_RESERVED',
    Engagement: 'ENGAGEMENT'
} as const;

export type ObjectiveType = typeof ObjectiveType[keyof typeof ObjectiveType];


/**
 * Ad group pacing delivery type
 * @export
 * @enum {string}
 */

export const PacingDeliveryType = {
    Standard: 'STANDARD',
    Accelerated: 'ACCELERATED'
} as const;

export type PacingDeliveryType = typeof PacingDeliveryType[keyof typeof PacingDeliveryType];


/**
 * 
 * @export
 * @interface Paginated
 */
export interface Paginated {
    /**
     * 
     * @type {Array<object>}
     * @memberof Paginated
     */
    'items': Array<object>;
    /**
     * 
     * @type {string}
     * @memberof Paginated
     */
    'bookmark'?: string | null;
}
/**
 * Pin
 * @export
 * @interface Pin
 */
export interface Pin {
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    'link'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    'alt_text'?: string | null;
    /**
     * The board to which this Pin belongs.
     * @type {string}
     * @memberof Pin
     */
    'board_id'?: string;
    /**
     * The board section to which this Pin belongs.
     * @type {string}
     * @memberof Pin
     */
    'board_section_id'?: string | null;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Pin
     */
    'board_owner'?: BoardOwner;
    /**
     * 
     * @type {PinMedia}
     * @memberof Pin
     */
    'media'?: PinMedia;
    /**
     * 
     * @type {PinMediaSource}
     * @memberof Pin
     */
    'media_source'?: PinMediaSource;
}
/**
 * Pin media objects.
 * @export
 * @interface PinMedia
 */
export interface PinMedia {
    /**
     * 
     * @type {string}
     * @memberof PinMedia
     */
    'media_type'?: string;
}
/**
 * @type PinMediaSource
 * Pin media source.
 * @export
 */
export type PinMediaSource = PinMediaSourceImageBase64 | PinMediaSourceImageURL | PinMediaSourceVideoID;

/**
 * Base64-encoded image media source
 * @export
 * @interface PinMediaSourceImageBase64
 */
export interface PinMediaSourceImageBase64 {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    'source_type': PinMediaSourceImageBase64SourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    'content_type': PinMediaSourceImageBase64ContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    'data': string;
}

export const PinMediaSourceImageBase64SourceTypeEnum = {
    ImageBase64: 'image_base64'
} as const;

export type PinMediaSourceImageBase64SourceTypeEnum = typeof PinMediaSourceImageBase64SourceTypeEnum[keyof typeof PinMediaSourceImageBase64SourceTypeEnum];
export const PinMediaSourceImageBase64ContentTypeEnum = {
    Jpeg: 'image/jpeg',
    Png: 'image/png'
} as const;

export type PinMediaSourceImageBase64ContentTypeEnum = typeof PinMediaSourceImageBase64ContentTypeEnum[keyof typeof PinMediaSourceImageBase64ContentTypeEnum];

/**
 * Image URL-based media source
 * @export
 * @interface PinMediaSourceImageURL
 */
export interface PinMediaSourceImageURL {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageURL
     */
    'source_type': PinMediaSourceImageURLSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageURL
     */
    'url': string;
}

export const PinMediaSourceImageURLSourceTypeEnum = {
    ImageUrl: 'image_url'
} as const;

export type PinMediaSourceImageURLSourceTypeEnum = typeof PinMediaSourceImageURLSourceTypeEnum[keyof typeof PinMediaSourceImageURLSourceTypeEnum];

/**
 * Video ID-based media source
 * @export
 * @interface PinMediaSourceVideoID
 */
export interface PinMediaSourceVideoID {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    'source_type': PinMediaSourceVideoIDSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    'cover_image_url': string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    'media_id': string;
}

export const PinMediaSourceVideoIDSourceTypeEnum = {
    VideoId: 'video_id'
} as const;

export type PinMediaSourceVideoIDSourceTypeEnum = typeof PinMediaSourceVideoIDSourceTypeEnum[keyof typeof PinMediaSourceVideoIDSourceTypeEnum];

/**
 * Pin with image.
 * @export
 * @interface PinMediaWithImage
 */
export interface PinMediaWithImage extends PinMedia {
    /**
     * 
     * @type {{ [key: string]: ImageDetails; }}
     * @memberof PinMediaWithImage
     */
    'images'?: { [key: string]: ImageDetails; };
}
/**
 * 
 * @export
 * @interface PinMediaWithImageAllOf
 */
export interface PinMediaWithImageAllOf {
    /**
     * 
     * @type {{ [key: string]: ImageDetails; }}
     * @memberof PinMediaWithImageAllOf
     */
    'images'?: { [key: string]: ImageDetails; };
}
/**
 * Summary status for pin promotions
 * @export
 * @enum {string}
 */

export const PinPromotionSummaryStatus = {
    Approved: 'APPROVED',
    Paused: 'PAUSED',
    Pending: 'PENDING',
    Rejected: 'REJECTED',
    AdvertiserDisabled: 'ADVERTISER_DISABLED',
    Archived: 'ARCHIVED'
} as const;

export type PinPromotionSummaryStatus = typeof PinPromotionSummaryStatus[keyof typeof PinPromotionSummaryStatus];


/**
 * Campaign placement group type
 * @export
 * @enum {string}
 */

export const PlacementGroupType = {
    All: 'ALL',
    Search: 'SEARCH',
    Browse: 'BROWSE',
    Other: 'OTHER'
} as const;

export type PlacementGroupType = typeof PlacementGroupType[keyof typeof PlacementGroupType];


/**
 * Default availability for products in a feed.
 * @export
 * @enum {string}
 */

export const ProductAvailabilityType = {
    InStock: 'IN_STOCK',
    OutOfStock: 'OUT_OF_STOCK',
    Preorder: 'PREORDER',
    Null: 'null'
} as const;

export type ProductAvailabilityType = typeof ProductAvailabilityType[keyof typeof ProductAvailabilityType];


/**
 * Summary status for product group
 * @export
 * @enum {string}
 */

export const ProductGroupSummaryStatus = {
    Running: 'RUNNING',
    Paused: 'PAUSED',
    Excluded: 'EXCLUDED',
    Archived: 'ARCHIVED'
} as const;

export type ProductGroupSummaryStatus = typeof ProductGroupSummaryStatus[keyof typeof ProductGroupSummaryStatus];


/**
 * 
 * @export
 * @interface ProductType0Filter
 */
export interface ProductType0Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType0Filter
     */
    'PRODUCT_TYPE_0': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface ProductType1Filter
 */
export interface ProductType1Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType1Filter
     */
    'PRODUCT_TYPE_1': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface ProductType2Filter
 */
export interface ProductType2Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType2Filter
     */
    'PRODUCT_TYPE_2': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface ProductType3Filter
 */
export interface ProductType3Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType3Filter
     */
    'PRODUCT_TYPE_3': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * 
 * @export
 * @interface ProductType4Filter
 */
export interface ProductType4Filter {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType4Filter
     */
    'PRODUCT_TYPE_4': CatalogsProductGroupMultipleStringListCriteria;
}
/**
 * Reporting columns
 * @export
 * @enum {string}
 */

export const ReportingColumnAsync = {
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    PaidImpression: 'PAID_IMPRESSION',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ectr: 'ECTR',
    CampaignName: 'CAMPAIGN_NAME',
    CampaignStatus: 'CAMPAIGN_STATUS',
    AdStatus: 'AD_STATUS',
    PinPromotionStatus: 'PIN_PROMOTION_STATUS',
    PinId: 'PIN_ID',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    Ctr2: 'CTR_2',
    CampaignId: 'CAMPAIGN_ID',
    AdvertiserId: 'ADVERTISER_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdId: 'AD_ID',
    AdGroupId: 'AD_GROUP_ID',
    CampaignManagedStatus: 'CAMPAIGN_MANAGED_STATUS',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    AdGroupName: 'AD_GROUP_NAME',
    AdGroupStatus: 'AD_GROUP_STATUS',
    ProductGroupId: 'PRODUCT_GROUP_ID',
    Clickthrough1: 'CLICKTHROUGH_1',
    Repin1: 'REPIN_1',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    Clickthrough2: 'CLICKTHROUGH_2',
    Repin2: 'REPIN_2',
    Impression2: 'IMPRESSION_2',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalEngagementPageVisit: 'TOTAL_ENGAGEMENT_PAGE_VISIT',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCustom: 'TOTAL_ENGAGEMENT_CUSTOM',
    TotalEngagementAddToCart: 'TOTAL_ENGAGEMENT_ADD_TO_CART',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSearch: 'TOTAL_ENGAGEMENT_SEARCH',
    TotalEngagementWatchVideo: 'TOTAL_ENGAGEMENT_WATCH_VIDEO',
    TotalEngagementViewCategory: 'TOTAL_ENGAGEMENT_VIEW_CATEGORY',
    TotalEngagementAppInstall: 'TOTAL_ENGAGEMENT_APP_INSTALL',
    TotalEngagementUnknown: 'TOTAL_ENGAGEMENT_UNKNOWN',
    TotalClickPageVisit: 'TOTAL_CLICK_PAGE_VISIT',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCustom: 'TOTAL_CLICK_CUSTOM',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSearch: 'TOTAL_CLICK_SEARCH',
    TotalClickWatchVideo: 'TOTAL_CLICK_WATCH_VIDEO',
    TotalClickViewCategory: 'TOTAL_CLICK_VIEW_CATEGORY',
    TotalClickAppInstall: 'TOTAL_CLICK_APP_INSTALL',
    TotalClickUnknown: 'TOTAL_CLICK_UNKNOWN',
    TotalViewPageVisit: 'TOTAL_VIEW_PAGE_VISIT',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCustom: 'TOTAL_VIEW_CUSTOM',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSearch: 'TOTAL_VIEW_SEARCH',
    TotalViewWatchVideo: 'TOTAL_VIEW_WATCH_VIDEO',
    TotalViewViewCategory: 'TOTAL_VIEW_VIEW_CATEGORY',
    TotalViewAppInstall: 'TOTAL_VIEW_APP_INSTALL',
    TotalViewUnknown: 'TOTAL_VIEW_UNKNOWN',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalEngagementPageVisitValueInMicroDollar: 'TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementCustomValueInMicroDollar: 'TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementAddToCartValueInMicroDollar: 'TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLeadValueInMicroDollar: 'TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementSearchValueInMicroDollar: 'TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementWatchVideoValueInMicroDollar: 'TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementViewCategoryValueInMicroDollar: 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementAppInstallValueInMicroDollar: 'TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementUnknownValueInMicroDollar: 'TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalClickPageVisitValueInMicroDollar: 'TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickCustomValueInMicroDollar: 'TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalClickAddToCartValueInMicroDollar: 'TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalClickLeadValueInMicroDollar: 'TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalClickSearchValueInMicroDollar: 'TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalClickWatchVideoValueInMicroDollar: 'TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    TotalClickViewCategoryValueInMicroDollar: 'TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    TotalClickAppInstallValueInMicroDollar: 'TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalClickUnknownValueInMicroDollar: 'TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalViewPageVisitValueInMicroDollar: 'TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewCustomValueInMicroDollar: 'TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalViewAddToCartValueInMicroDollar: 'TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalViewLeadValueInMicroDollar: 'TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalViewSearchValueInMicroDollar: 'TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalViewWatchVideoValueInMicroDollar: 'TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    TotalViewViewCategoryValueInMicroDollar: 'TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    TotalViewAppInstallValueInMicroDollar: 'TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalViewUnknownValueInMicroDollar: 'TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalConversionsValueInMicroDollar: 'TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementPageVisitQuantity: 'TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY',
    TotalEngagementSignupQuantity: 'TOTAL_ENGAGEMENT_SIGNUP_QUANTITY',
    TotalEngagementCheckoutQuantity: 'TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY',
    TotalEngagementCustomQuantity: 'TOTAL_ENGAGEMENT_CUSTOM_QUANTITY',
    TotalEngagementAddToCartQuantity: 'TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY',
    TotalEngagementLeadQuantity: 'TOTAL_ENGAGEMENT_LEAD_QUANTITY',
    TotalEngagementSearchQuantity: 'TOTAL_ENGAGEMENT_SEARCH_QUANTITY',
    TotalEngagementWatchVideoQuantity: 'TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY',
    TotalEngagementViewCategoryQuantity: 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY',
    TotalEngagementUnknownQuantity: 'TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY',
    TotalClickPageVisitQuantity: 'TOTAL_CLICK_PAGE_VISIT_QUANTITY',
    TotalClickSignupQuantity: 'TOTAL_CLICK_SIGNUP_QUANTITY',
    TotalClickCheckoutQuantity: 'TOTAL_CLICK_CHECKOUT_QUANTITY',
    TotalClickCustomQuantity: 'TOTAL_CLICK_CUSTOM_QUANTITY',
    TotalClickAddToCartQuantity: 'TOTAL_CLICK_ADD_TO_CART_QUANTITY',
    TotalClickLeadQuantity: 'TOTAL_CLICK_LEAD_QUANTITY',
    TotalClickSearchQuantity: 'TOTAL_CLICK_SEARCH_QUANTITY',
    TotalClickWatchVideoQuantity: 'TOTAL_CLICK_WATCH_VIDEO_QUANTITY',
    TotalClickViewCategoryQuantity: 'TOTAL_CLICK_VIEW_CATEGORY_QUANTITY',
    TotalClickUnknownQuantity: 'TOTAL_CLICK_UNKNOWN_QUANTITY',
    TotalViewPageVisitQuantity: 'TOTAL_VIEW_PAGE_VISIT_QUANTITY',
    TotalViewSignupQuantity: 'TOTAL_VIEW_SIGNUP_QUANTITY',
    TotalViewCheckoutQuantity: 'TOTAL_VIEW_CHECKOUT_QUANTITY',
    TotalViewCustomQuantity: 'TOTAL_VIEW_CUSTOM_QUANTITY',
    TotalViewAddToCartQuantity: 'TOTAL_VIEW_ADD_TO_CART_QUANTITY',
    TotalViewLeadQuantity: 'TOTAL_VIEW_LEAD_QUANTITY',
    TotalViewSearchQuantity: 'TOTAL_VIEW_SEARCH_QUANTITY',
    TotalViewWatchVideoQuantity: 'TOTAL_VIEW_WATCH_VIDEO_QUANTITY',
    TotalViewViewCategoryQuantity: 'TOTAL_VIEW_VIEW_CATEGORY_QUANTITY',
    TotalViewUnknownQuantity: 'TOTAL_VIEW_UNKNOWN_QUANTITY',
    TotalConversionsQuantity: 'TOTAL_CONVERSIONS_QUANTITY',
    OnsiteCheckouts1: 'ONSITE_CHECKOUTS_1',
    PinPromotionName: 'PIN_PROMOTION_NAME',
    AdName: 'AD_NAME',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    TotalPageVisitDesktopActionToDesktopConversion: 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalPageVisitDesktopActionToMobileConversion: 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalPageVisitDesktopActionToTabletConversion: 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalPageVisitMobileActionToDesktopConversion: 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalPageVisitMobileActionToMobileConversion: 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalPageVisitMobileActionToTabletConversion: 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalPageVisitTabletActionToDesktopConversion: 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalPageVisitTabletActionToMobileConversion: 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalPageVisitTabletActionToTabletConversion: 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalSignupDesktopActionToDesktopConversion: 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalSignupDesktopActionToMobileConversion: 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalSignupDesktopActionToTabletConversion: 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalSignupMobileActionToDesktopConversion: 'TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalSignupMobileActionToMobileConversion: 'TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalSignupMobileActionToTabletConversion: 'TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalSignupTabletActionToDesktopConversion: 'TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalSignupTabletActionToMobileConversion: 'TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalSignupTabletActionToTabletConversion: 'TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalCheckoutDesktopActionToDesktopConversion: 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalCheckoutDesktopActionToMobileConversion: 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalCheckoutDesktopActionToTabletConversion: 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalCheckoutMobileActionToDesktopConversion: 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalCheckoutMobileActionToMobileConversion: 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalCheckoutMobileActionToTabletConversion: 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalCheckoutTabletActionToDesktopConversion: 'TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalCheckoutTabletActionToMobileConversion: 'TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalCheckoutTabletActionToTabletConversion: 'TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalCustomDesktopActionToDesktopConversion: 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalCustomDesktopActionToMobileConversion: 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalCustomDesktopActionToTabletConversion: 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalCustomMobileActionToDesktopConversion: 'TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalCustomMobileActionToMobileConversion: 'TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalCustomMobileActionToTabletConversion: 'TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalCustomTabletActionToDesktopConversion: 'TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalCustomTabletActionToMobileConversion: 'TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalCustomTabletActionToTabletConversion: 'TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalAddToCartDesktopActionToDesktopConversion: 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalAddToCartDesktopActionToMobileConversion: 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalAddToCartDesktopActionToTabletConversion: 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalAddToCartMobileActionToDesktopConversion: 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalAddToCartMobileActionToMobileConversion: 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalAddToCartMobileActionToTabletConversion: 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalAddToCartTabletActionToDesktopConversion: 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalAddToCartTabletActionToMobileConversion: 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalAddToCartTabletActionToTabletConversion: 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalLeadDesktopActionToDesktopConversion: 'TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalLeadDesktopActionToMobileConversion: 'TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalLeadDesktopActionToTabletConversion: 'TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalLeadMobileActionToDesktopConversion: 'TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalLeadMobileActionToMobileConversion: 'TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalLeadMobileActionToTabletConversion: 'TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalLeadTabletActionToDesktopConversion: 'TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalLeadTabletActionToMobileConversion: 'TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalLeadTabletActionToTabletConversion: 'TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalSearchDesktopActionToDesktopConversion: 'TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalSearchDesktopActionToMobileConversion: 'TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalSearchDesktopActionToTabletConversion: 'TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalSearchMobileActionToDesktopConversion: 'TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalSearchMobileActionToMobileConversion: 'TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalSearchMobileActionToTabletConversion: 'TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalSearchTabletActionToDesktopConversion: 'TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalSearchTabletActionToMobileConversion: 'TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalSearchTabletActionToTabletConversion: 'TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalWatchVideoDesktopActionToDesktopConversion: 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalWatchVideoDesktopActionToMobileConversion: 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalWatchVideoDesktopActionToTabletConversion: 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalWatchVideoMobileActionToDesktopConversion: 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalWatchVideoMobileActionToMobileConversion: 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalWatchVideoMobileActionToTabletConversion: 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalWatchVideoTabletActionToDesktopConversion: 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalWatchVideoTabletActionToMobileConversion: 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalWatchVideoTabletActionToTabletConversion: 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalViewCategoryDesktopActionToDesktopConversion: 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalViewCategoryDesktopActionToMobileConversion: 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalViewCategoryDesktopActionToTabletConversion: 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalViewCategoryMobileActionToDesktopConversion: 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalViewCategoryMobileActionToMobileConversion: 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalViewCategoryMobileActionToTabletConversion: 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalViewCategoryTabletActionToDesktopConversion: 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalViewCategoryTabletActionToMobileConversion: 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalViewCategoryTabletActionToTabletConversion: 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalAppInstallDesktopActionToDesktopConversion: 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalAppInstallDesktopActionToMobileConversion: 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalAppInstallDesktopActionToTabletConversion: 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalAppInstallMobileActionToDesktopConversion: 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalAppInstallMobileActionToMobileConversion: 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalAppInstallMobileActionToTabletConversion: 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalAppInstallTabletActionToDesktopConversion: 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalAppInstallTabletActionToMobileConversion: 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalAppInstallTabletActionToTabletConversion: 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalUnknownDesktopActionToDesktopConversion: 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION',
    TotalUnknownDesktopActionToMobileConversion: 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION',
    TotalUnknownDesktopActionToTabletConversion: 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION',
    TotalUnknownMobileActionToDesktopConversion: 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION',
    TotalUnknownMobileActionToMobileConversion: 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION',
    TotalUnknownMobileActionToTabletConversion: 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION',
    TotalUnknownTabletActionToDesktopConversion: 'TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION',
    TotalUnknownTabletActionToMobileConversion: 'TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION',
    TotalUnknownTabletActionToTabletConversion: 'TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalLead: 'TOTAL_LEAD',
    TotalAppInstall: 'TOTAL_APP_INSTALL',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalAppInstallValueInMicroDollar: 'TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalCheckoutQuantity: 'TOTAL_CHECKOUT_QUANTITY',
    AppInstallCostPerAction: 'APP_INSTALL_COST_PER_ACTION',
    Video3SecViews1: 'VIDEO_3SEC_VIEWS_1',
    VideoP100Complete1: 'VIDEO_P100_COMPLETE_1',
    VideoP0Combined1: 'VIDEO_P0_COMBINED_1',
    VideoP25Combined1: 'VIDEO_P25_COMBINED_1',
    VideoP50Combined1: 'VIDEO_P50_COMBINED_1',
    VideoP75Combined1: 'VIDEO_P75_COMBINED_1',
    VideoP95Combined1: 'VIDEO_P95_COMBINED_1',
    VideoMrcViews1: 'VIDEO_MRC_VIEWS_1',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    CpvInMicroDollar: 'CPV_IN_MICRO_DOLLAR',
    CpcvInMicroDollar: 'CPCV_IN_MICRO_DOLLAR',
    CpcvP95InMicroDollar: 'CPCV_P95_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    VideoAvgWatchtimeInSecond1: 'VIDEO_AVG_WATCHTIME_IN_SECOND_1',
    VideoAvgWatchtimeInSecond2: 'VIDEO_AVG_WATCHTIME_IN_SECOND_2',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    InappCheckoutRoas: 'INAPP_CHECKOUT_ROAS',
    TotalInappCheckout: 'TOTAL_INAPP_CHECKOUT',
    TotalInappCheckoutValueInMicroDollar: 'TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalInappClickCheckout: 'TOTAL_INAPP_CLICK_CHECKOUT',
    TotalInappClickCheckoutValueInMicroDollar: 'TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalInappEngagementCheckout: 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT',
    TotalInappEngagementCheckoutValueInMicroDollar: 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalInappViewCheckout: 'TOTAL_INAPP_VIEW_CHECKOUT',
    TotalInappViewCheckoutValueInMicroDollar: 'TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    OfflineCheckoutCostPerAction: 'OFFLINE_CHECKOUT_COST_PER_ACTION',
    OfflineCheckoutRoas: 'OFFLINE_CHECKOUT_ROAS',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalOfflineCheckoutValueInMicroDollar: 'TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineClickCheckout: 'TOTAL_OFFLINE_CLICK_CHECKOUT',
    TotalOfflineClickCheckoutValueInMicroDollar: 'TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineEngagementCheckout: 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT',
    TotalOfflineEngagementCheckoutValueInMicroDollar: 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineViewCheckout: 'TOTAL_OFFLINE_VIEW_CHECKOUT',
    TotalOfflineViewCheckoutValueInMicroDollar: 'TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    WebAddToCartCostPerAction: 'WEB_ADD_TO_CART_COST_PER_ACTION',
    WebAddToCartRoas: 'WEB_ADD_TO_CART_ROAS',
    TotalWebAddToCart: 'TOTAL_WEB_ADD_TO_CART',
    TotalWebAddToCartValueInMicroDollar: 'TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickAddToCart: 'TOTAL_WEB_CLICK_ADD_TO_CART',
    TotalWebClickAddToCartValueInMicroDollar: 'TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementAddToCart: 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART',
    TotalWebEngagementAddToCartValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewAddToCart: 'TOTAL_WEB_VIEW_ADD_TO_CART',
    TotalWebViewAddToCartValueInMicroDollar: 'TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    InappAddToCartCostPerAction: 'INAPP_ADD_TO_CART_COST_PER_ACTION',
    InappAddToCartRoas: 'INAPP_ADD_TO_CART_ROAS',
    TotalInappAddToCart: 'TOTAL_INAPP_ADD_TO_CART',
    TotalInappAddToCartValueInMicroDollar: 'TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalInappClickAddToCart: 'TOTAL_INAPP_CLICK_ADD_TO_CART',
    TotalInappClickAddToCartValueInMicroDollar: 'TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalInappEngagementAddToCart: 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART',
    TotalInappEngagementAddToCartValueInMicroDollar: 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    TotalInappViewAddToCart: 'TOTAL_INAPP_VIEW_ADD_TO_CART',
    TotalInappViewAddToCartValueInMicroDollar: 'TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR',
    WebPageVisitCostPerAction: 'WEB_PAGE_VISIT_COST_PER_ACTION',
    WebPageVisitRoas: 'WEB_PAGE_VISIT_ROAS',
    TotalWebPageVisit: 'TOTAL_WEB_PAGE_VISIT',
    TotalWebPageVisitValueInMicroDollar: 'TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickPageVisit: 'TOTAL_WEB_CLICK_PAGE_VISIT',
    TotalWebClickPageVisitValueInMicroDollar: 'TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementPageVisit: 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT',
    TotalWebEngagementPageVisitValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewPageVisit: 'TOTAL_WEB_VIEW_PAGE_VISIT',
    TotalWebViewPageVisitValueInMicroDollar: 'TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR',
    WebSignupCostPerAction: 'WEB_SIGNUP_COST_PER_ACTION',
    WebSignupRoas: 'WEB_SIGNUP_ROAS',
    TotalWebSignup: 'TOTAL_WEB_SIGNUP',
    TotalWebSignupValueInMicroDollar: 'TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickSignup: 'TOTAL_WEB_CLICK_SIGNUP',
    TotalWebClickSignupValueInMicroDollar: 'TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementSignup: 'TOTAL_WEB_ENGAGEMENT_SIGNUP',
    TotalWebEngagementSignupValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewSignup: 'TOTAL_WEB_VIEW_SIGNUP',
    TotalWebViewSignupValueInMicroDollar: 'TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    InappSignupCostPerAction: 'INAPP_SIGNUP_COST_PER_ACTION',
    InappSignupRoas: 'INAPP_SIGNUP_ROAS',
    TotalInappSignup: 'TOTAL_INAPP_SIGNUP',
    TotalInappSignupValueInMicroDollar: 'TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalInappClickSignup: 'TOTAL_INAPP_CLICK_SIGNUP',
    TotalInappClickSignupValueInMicroDollar: 'TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalInappEngagementSignup: 'TOTAL_INAPP_ENGAGEMENT_SIGNUP',
    TotalInappEngagementSignupValueInMicroDollar: 'TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalInappViewSignup: 'TOTAL_INAPP_VIEW_SIGNUP',
    TotalInappViewSignupValueInMicroDollar: 'TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    OfflineSignupCostPerAction: 'OFFLINE_SIGNUP_COST_PER_ACTION',
    OfflineSignupRoas: 'OFFLINE_SIGNUP_ROAS',
    TotalOfflineSignup: 'TOTAL_OFFLINE_SIGNUP',
    TotalOfflineSignupValueInMicroDollar: 'TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineClickSignup: 'TOTAL_OFFLINE_CLICK_SIGNUP',
    TotalOfflineClickSignupValueInMicroDollar: 'TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineEngagementSignup: 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP',
    TotalOfflineEngagementSignupValueInMicroDollar: 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineViewSignup: 'TOTAL_OFFLINE_VIEW_SIGNUP',
    TotalOfflineViewSignupValueInMicroDollar: 'TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    WebWatchVideoCostPerAction: 'WEB_WATCH_VIDEO_COST_PER_ACTION',
    WebWatchVideoRoas: 'WEB_WATCH_VIDEO_ROAS',
    TotalWebWatchVideo: 'TOTAL_WEB_WATCH_VIDEO',
    TotalWebWatchVideoValueInMicroDollar: 'TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickWatchVideo: 'TOTAL_WEB_CLICK_WATCH_VIDEO',
    TotalWebClickWatchVideoValueInMicroDollar: 'TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementWatchVideo: 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO',
    TotalWebEngagementWatchVideoValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewWatchVideo: 'TOTAL_WEB_VIEW_WATCH_VIDEO',
    TotalWebViewWatchVideoValueInMicroDollar: 'TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR',
    WebLeadCostPerAction: 'WEB_LEAD_COST_PER_ACTION',
    WebLeadRoas: 'WEB_LEAD_ROAS',
    TotalWebLead: 'TOTAL_WEB_LEAD',
    TotalWebLeadValueInMicroDollar: 'TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickLead: 'TOTAL_WEB_CLICK_LEAD',
    TotalWebClickLeadValueInMicroDollar: 'TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementLead: 'TOTAL_WEB_ENGAGEMENT_LEAD',
    TotalWebEngagementLeadValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewLead: 'TOTAL_WEB_VIEW_LEAD',
    TotalWebViewLeadValueInMicroDollar: 'TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR',
    OfflineLeadCostPerAction: 'OFFLINE_LEAD_COST_PER_ACTION',
    OfflineLeadRoas: 'OFFLINE_LEAD_ROAS',
    TotalOfflineLead: 'TOTAL_OFFLINE_LEAD',
    TotalOfflineLeadValueInMicroDollar: 'TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineClickLead: 'TOTAL_OFFLINE_CLICK_LEAD',
    TotalOfflineClickLeadValueInMicroDollar: 'TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineEngagementLead: 'TOTAL_OFFLINE_ENGAGEMENT_LEAD',
    TotalOfflineEngagementLeadValueInMicroDollar: 'TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineViewLead: 'TOTAL_OFFLINE_VIEW_LEAD',
    TotalOfflineViewLeadValueInMicroDollar: 'TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR',
    WebSearchCostPerAction: 'WEB_SEARCH_COST_PER_ACTION',
    WebSearchRoas: 'WEB_SEARCH_ROAS',
    TotalWebSearch: 'TOTAL_WEB_SEARCH',
    TotalWebSearchValueInMicroDollar: 'TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickSearch: 'TOTAL_WEB_CLICK_SEARCH',
    TotalWebClickSearchValueInMicroDollar: 'TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementSearch: 'TOTAL_WEB_ENGAGEMENT_SEARCH',
    TotalWebEngagementSearchValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewSearch: 'TOTAL_WEB_VIEW_SEARCH',
    TotalWebViewSearchValueInMicroDollar: 'TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR',
    InappSearchCostPerAction: 'INAPP_SEARCH_COST_PER_ACTION',
    InappSearchRoas: 'INAPP_SEARCH_ROAS',
    TotalInappSearch: 'TOTAL_INAPP_SEARCH',
    TotalInappSearchValueInMicroDollar: 'TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalInappClickSearch: 'TOTAL_INAPP_CLICK_SEARCH',
    TotalInappClickSearchValueInMicroDollar: 'TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalInappEngagementSearch: 'TOTAL_INAPP_ENGAGEMENT_SEARCH',
    TotalInappEngagementSearchValueInMicroDollar: 'TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR',
    TotalInappViewSearch: 'TOTAL_INAPP_VIEW_SEARCH',
    TotalInappViewSearchValueInMicroDollar: 'TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR',
    WebViewCategoryCostPerAction: 'WEB_VIEW_CATEGORY_COST_PER_ACTION',
    WebViewCategoryRoas: 'WEB_VIEW_CATEGORY_ROAS',
    TotalWebViewCategory: 'TOTAL_WEB_VIEW_CATEGORY',
    TotalWebViewCategoryValueInMicroDollar: 'TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickViewCategory: 'TOTAL_WEB_CLICK_VIEW_CATEGORY',
    TotalWebClickViewCategoryValueInMicroDollar: 'TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementViewCategory: 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY',
    TotalWebEngagementViewCategoryValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewViewCategory: 'TOTAL_WEB_VIEW_VIEW_CATEGORY',
    TotalWebViewViewCategoryValueInMicroDollar: 'TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR',
    WebCustomCostPerAction: 'WEB_CUSTOM_COST_PER_ACTION',
    WebCustomRoas: 'WEB_CUSTOM_ROAS',
    TotalWebCustom: 'TOTAL_WEB_CUSTOM',
    TotalWebCustomValueInMicroDollar: 'TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCustom: 'TOTAL_WEB_CLICK_CUSTOM',
    TotalWebClickCustomValueInMicroDollar: 'TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCustom: 'TOTAL_WEB_ENGAGEMENT_CUSTOM',
    TotalWebEngagementCustomValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCustom: 'TOTAL_WEB_VIEW_CUSTOM',
    TotalWebViewCustomValueInMicroDollar: 'TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    OfflineCustomCostPerAction: 'OFFLINE_CUSTOM_COST_PER_ACTION',
    OfflineCustomRoas: 'OFFLINE_CUSTOM_ROAS',
    TotalOfflineCustom: 'TOTAL_OFFLINE_CUSTOM',
    TotalOfflineCustomValueInMicroDollar: 'TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineClickCustom: 'TOTAL_OFFLINE_CLICK_CUSTOM',
    TotalOfflineClickCustomValueInMicroDollar: 'TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineEngagementCustom: 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM',
    TotalOfflineEngagementCustomValueInMicroDollar: 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineViewCustom: 'TOTAL_OFFLINE_VIEW_CUSTOM',
    TotalOfflineViewCustomValueInMicroDollar: 'TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR',
    WebUnknownCostPerAction: 'WEB_UNKNOWN_COST_PER_ACTION',
    WebUnknownRoas: 'WEB_UNKNOWN_ROAS',
    TotalWebUnknown: 'TOTAL_WEB_UNKNOWN',
    TotalWebUnknownValueInMicroDollar: 'TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickUnknown: 'TOTAL_WEB_CLICK_UNKNOWN',
    TotalWebClickUnknownValueInMicroDollar: 'TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementUnknown: 'TOTAL_WEB_ENGAGEMENT_UNKNOWN',
    TotalWebEngagementUnknownValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewUnknown: 'TOTAL_WEB_VIEW_UNKNOWN',
    TotalWebViewUnknownValueInMicroDollar: 'TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    InappUnknownCostPerAction: 'INAPP_UNKNOWN_COST_PER_ACTION',
    InappUnknownRoas: 'INAPP_UNKNOWN_ROAS',
    TotalInappUnknown: 'TOTAL_INAPP_UNKNOWN',
    TotalInappUnknownValueInMicroDollar: 'TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalInappClickUnknown: 'TOTAL_INAPP_CLICK_UNKNOWN',
    TotalInappClickUnknownValueInMicroDollar: 'TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalInappEngagementUnknown: 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN',
    TotalInappEngagementUnknownValueInMicroDollar: 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalInappViewUnknown: 'TOTAL_INAPP_VIEW_UNKNOWN',
    TotalInappViewUnknownValueInMicroDollar: 'TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    OfflineUnknownCostPerAction: 'OFFLINE_UNKNOWN_COST_PER_ACTION',
    OfflineUnknownRoas: 'OFFLINE_UNKNOWN_ROAS',
    TotalOfflineUnknown: 'TOTAL_OFFLINE_UNKNOWN',
    TotalOfflineUnknownValueInMicroDollar: 'TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineClickUnknown: 'TOTAL_OFFLINE_CLICK_UNKNOWN',
    TotalOfflineClickUnknownValueInMicroDollar: 'TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineEngagementUnknown: 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN',
    TotalOfflineEngagementUnknownValueInMicroDollar: 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    TotalOfflineViewUnknown: 'TOTAL_OFFLINE_VIEW_UNKNOWN',
    TotalOfflineViewUnknownValueInMicroDollar: 'TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR',
    InappAppInstallCostPerAction: 'INAPP_APP_INSTALL_COST_PER_ACTION',
    InappAppInstallRoas: 'INAPP_APP_INSTALL_ROAS',
    TotalInappAppInstall: 'TOTAL_INAPP_APP_INSTALL',
    TotalInappAppInstallValueInMicroDollar: 'TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalInappClickAppInstall: 'TOTAL_INAPP_CLICK_APP_INSTALL',
    TotalInappClickAppInstallValueInMicroDollar: 'TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalInappEngagementAppInstall: 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL',
    TotalInappEngagementAppInstallValueInMicroDollar: 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    TotalInappViewAppInstall: 'TOTAL_INAPP_VIEW_APP_INSTALL',
    TotalInappViewAppInstallValueInMicroDollar: 'TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    RepinRate: 'REPIN_RATE',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EngagementRate: 'ENGAGEMENT_RATE',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    CheckoutRoas: 'CHECKOUT_ROAS',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    EengagementRate: 'EENGAGEMENT_RATE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    CpmInDollar: 'CPM_IN_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    EcpcInDollar: 'ECPC_IN_DOLLAR'
} as const;

export type ReportingColumnAsync = typeof ReportingColumnAsync[keyof typeof ReportingColumnAsync];


/**
 * 
 * @export
 * @interface TargetingTypeFilter
 */
export interface TargetingTypeFilter {
    /**
     * List of targeting types
     * @type {Array<AdsAnalyticsTargetingType>}
     * @memberof TargetingTypeFilter
     */
    'targeting_types'?: Array<AdsAnalyticsTargetingType>;
}
/**
 * Third-party tracking URLs. Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @export
 * @interface TrackingUrls
 */
export interface TrackingUrls {
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    'impression'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    'click'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    'engagement'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    'buyable_button'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    'audience_verification'?: Array<string>;
}

/**
 * AdAccountsApi - axios parameter creator
 * @export
 */
export const AdAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad account analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adAccountAnalytics: async (adAccountId: string, startDate: string, endDate: string, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('adAccountAnalytics', 'adAccountId', adAccountId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adAccountAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adAccountAnalytics', 'endDate', endDate)
            // verify required parameter 'columns' is not null or undefined
            assertParamExists('adAccountAnalytics', 'columns', columns)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('adAccountAnalytics', 'granularity', granularity)
            const localVarPath = `/ad_accounts/{ad_account_id}/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS.csv);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = clickWindowDays;
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = engagementWindowDays;
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = viewWindowDays;
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = conversionReportTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {boolean} [includeSharedAccounts] Include shared ad accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adAccountsList: async (bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ad_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (includeSharedAccounts !== undefined) {
                localVarQueryParameter['include_shared_accounts'] = includeSharedAccounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad group analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} adGroupIds List of Ad group Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adGroupsAnalytics: async (adAccountId: string, startDate: string, endDate: string, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('adGroupsAnalytics', 'adAccountId', adAccountId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adGroupsAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adGroupsAnalytics', 'endDate', endDate)
            // verify required parameter 'adGroupIds' is not null or undefined
            assertParamExists('adGroupsAnalytics', 'adGroupIds', adGroupIds)
            // verify required parameter 'columns' is not null or undefined
            assertParamExists('adGroupsAnalytics', 'columns', columns)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('adGroupsAnalytics', 'granularity', granularity)
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS.csv);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = clickWindowDays;
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = engagementWindowDays;
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = viewWindowDays;
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = conversionReportTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ad groups
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {boolean} [translateInterestsToNames] Return interests as text names (if value is true) rather than topic IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adGroupsList: async (adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('adGroupsList', 'adAccountId', adAccountId)
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (translateInterestsToNames !== undefined) {
                localVarQueryParameter['translate_interests_to_names'] = translateInterestsToNames;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} adIds List of Ad Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adsAnalytics: async (adAccountId: string, startDate: string, endDate: string, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('adsAnalytics', 'adAccountId', adAccountId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adsAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adsAnalytics', 'endDate', endDate)
            // verify required parameter 'adIds' is not null or undefined
            assertParamExists('adsAnalytics', 'adIds', adIds)
            // verify required parameter 'columns' is not null or undefined
            assertParamExists('adsAnalytics', 'columns', columns)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('adsAnalytics', 'granularity', granularity)
            const localVarPath = `/ad_accounts/{ad_account_id}/ads/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS.csv);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = clickWindowDays;
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = engagementWindowDays;
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = viewWindowDays;
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = conversionReportTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ads
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
         * @param {Array<string>} [adIds] List of Ad Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adsList: async (adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('adsList', 'adAccountId', adAccountId)
            const localVarPath = `/ad_accounts/{ad_account_id}/ads`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Create async request for an account analytics report
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {AdsAnalyticsCreateAsyncRequest} adsAnalyticsCreateAsyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsCreateReport: async (adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('analyticsCreateReport', 'adAccountId', adAccountId)
            // verify required parameter 'adsAnalyticsCreateAsyncRequest' is not null or undefined
            assertParamExists('analyticsCreateReport', 'adsAnalyticsCreateAsyncRequest', adsAnalyticsCreateAsyncRequest)
            const localVarPath = `/ad_accounts/{ad_account_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adsAnalyticsCreateAsyncRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} token Token returned from the post request creation call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsGetReport: async (adAccountId: string, token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('analyticsGetReport', 'adAccountId', adAccountId)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('analyticsGetReport', 'token', token)
            const localVarPath = `/ad_accounts/{ad_account_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get campaign analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} campaignIds List of Campaign Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsAnalytics: async (adAccountId: string, startDate: string, endDate: string, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('campaignsAnalytics', 'adAccountId', adAccountId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('campaignsAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('campaignsAnalytics', 'endDate', endDate)
            // verify required parameter 'campaignIds' is not null or undefined
            assertParamExists('campaignsAnalytics', 'campaignIds', campaignIds)
            // verify required parameter 'columns' is not null or undefined
            assertParamExists('campaignsAnalytics', 'columns', columns)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('campaignsAnalytics', 'granularity', granularity)
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS.csv);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = clickWindowDays;
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = engagementWindowDays;
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = viewWindowDays;
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = conversionReportTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsList: async (adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('campaignsList', 'adAccountId', adAccountId)
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get product group analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} productGroupIds List of Product group Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupsAnalytics: async (adAccountId: string, startDate: string, endDate: string, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adAccountId' is not null or undefined
            assertParamExists('productGroupsAnalytics', 'adAccountId', adAccountId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('productGroupsAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('productGroupsAnalytics', 'endDate', endDate)
            // verify required parameter 'productGroupIds' is not null or undefined
            assertParamExists('productGroupsAnalytics', 'productGroupIds', productGroupIds)
            // verify required parameter 'columns' is not null or undefined
            assertParamExists('productGroupsAnalytics', 'columns', columns)
            // verify required parameter 'granularity' is not null or undefined
            assertParamExists('productGroupsAnalytics', 'granularity', granularity)
            const localVarPath = `/ad_accounts/{ad_account_id}/product_groups/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["ads:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (productGroupIds) {
                localVarQueryParameter['product_group_ids'] = productGroupIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS.csv);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = clickWindowDays;
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = engagementWindowDays;
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = viewWindowDays;
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = conversionReportTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdAccountsApi - functional programming interface
 * @export
 */
export const AdAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad account analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adAccountAnalytics(adAccountId: string, startDate: string, endDate: string, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: object; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {boolean} [includeSharedAccounts] Include shared ad accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adAccountsList(bookmark, pageSize, includeSharedAccounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad group analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} adGroupIds List of Ad group Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: object; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ad groups
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {boolean} [translateInterestsToNames] Return interests as text names (if value is true) rather than topic IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adGroupsList(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} adIds List of Ad Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adsAnalytics(adAccountId: string, startDate: string, endDate: string, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: object; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ads
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
         * @param {Array<string>} [adIds] List of Ad Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adsList(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Create async request for an account analytics report
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {AdsAnalyticsCreateAsyncRequest} adsAnalyticsCreateAsyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdsAnalyticsCreateAsyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} token Token returned from the post request creation call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsGetReport(adAccountId: string, token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdsAnalyticsGetAsyncResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsGetReport(adAccountId, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get campaign analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} campaignIds List of Campaign Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignsAnalytics(adAccountId: string, startDate: string, endDate: string, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: object; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get product group analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} productGroupIds List of Product group Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: object; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdAccountsApi - factory interface
 * @export
 */
export const AdAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdAccountsApiFp(configuration)
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad account analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adAccountAnalytics(adAccountId: string, startDate: string, endDate: string, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: any): AxiosPromise<Array<{ [key: string]: object; }>> {
            return localVarFp.adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {boolean} [includeSharedAccounts] Include shared ad accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.adAccountsList(bookmark, pageSize, includeSharedAccounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad group analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} adGroupIds List of Ad group Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: any): AxiosPromise<Array<{ [key: string]: object; }>> {
            return localVarFp.adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ad groups
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {boolean} [translateInterestsToNames] Return interests as text names (if value is true) rather than topic IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.adGroupsList(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames, options).then((request) => request(axios, basePath));
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} adIds List of Ad Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adsAnalytics(adAccountId: string, startDate: string, endDate: string, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: any): AxiosPromise<Array<{ [key: string]: object; }>> {
            return localVarFp.adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ads
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
         * @param {Array<string>} [adIds] List of Ad Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.adsList(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark, options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Create async request for an account analytics report
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {AdsAnalyticsCreateAsyncRequest} adsAnalyticsCreateAsyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: any): AxiosPromise<AdsAnalyticsCreateAsyncResponse> {
            return localVarFp.analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} token Token returned from the post request creation call
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsGetReport(adAccountId: string, token: string, options?: any): AxiosPromise<AdsAnalyticsGetAsyncResponse> {
            return localVarFp.analyticsGetReport(adAccountId, token, options).then((request) => request(axios, basePath));
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get campaign analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} campaignIds List of Campaign Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsAnalytics(adAccountId: string, startDate: string, endDate: string, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: any): AxiosPromise<Array<{ [key: string]: object; }>> {
            return localVarFp.campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
         * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark, options).then((request) => request(axios, basePath));
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get product group analytics
         * @param {string} adAccountId Unique identifier of an ad account.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<string>} productGroupIds List of Product group Ids to use to filter the results.
         * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
         * @param {Granularity} granularity Granularity
         * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
         * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
         * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: any): AxiosPromise<Array<{ [key: string]: object; }>> {
            return localVarFp.productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdAccountsApi - object-oriented interface
 * @export
 * @class AdAccountsApi
 * @extends {BaseAPI}
 */
export class AdAccountsApi extends BaseAPI {
    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get ad account analytics
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public adAccountAnalytics(adAccountId: string, startDate: string, endDate: string, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * @summary List ad accounts
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {boolean} [includeSharedAccounts] Include shared ad accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).adAccountsList(bookmark, pageSize, includeSharedAccounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get ad group analytics
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array<string>} adGroupIds List of Ad group Ids to use to filter the results.
     * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public adGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary List ad groups
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
     * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
     * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {boolean} [translateInterestsToNames] Return interests as text names (if value is true) rather than topic IDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).adGroupsList(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get ad analytics
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array<string>} adIds List of Ad Ids to use to filter the results.
     * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public adsAnalytics(adAccountId: string, startDate: string, endDate: string, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary List ads
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
     * @param {Array<string>} [adGroupIds] List of Ad group Ids to use to filter the results.
     * @param {Array<string>} [adIds] List of Ad Ids to use to filter the results.
     * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).adsList(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Create async request for an account analytics report
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {AdsAnalyticsCreateAsyncRequest} adsAnalyticsCreateAsyncRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get the account analytics report created by the async call
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {string} token Token returned from the post request creation call
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public analyticsGetReport(adAccountId: string, token: string, options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).analyticsGetReport(adAccountId, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get campaign analytics
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array<string>} campaignIds List of Campaign Ids to use to filter the results.
     * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public campaignsAnalytics(adAccountId: string, startDate: string, endDate: string, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary List campaigns
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {Array<string>} [campaignIds] List of Campaign Ids to use to filter the results.
     * @param {Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>} [entityStatuses] Entity status
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {'ASCENDING' | 'DESCENDING'} [order] The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get product group analytics
     * @param {string} adAccountId Unique identifier of an ad account.
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array<string>} productGroupIds List of Product group Ids to use to filter the results.
     * @param {Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {1 | 7 | 30 | 60} [clickWindowDays] Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [engagementWindowDays] Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param {1 | 7 | 30 | 60} [viewWindowDays] Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param {'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION'} [conversionReportTime] The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdAccountsApi
     */
    public productGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: AxiosRequestConfig) {
        return AdAccountsApiFp(this.configuration).productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BoardsApi - axios parameter creator
 * @export
 */
export const BoardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @param {string} boardId Unique identifier of a board.
         * @param {BoardSection} boardSection Create a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsCreate: async (boardId: string, boardSection: BoardSection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardSectionsCreate', 'boardId', boardId)
            // verify required parameter 'boardSection' is not null or undefined
            assertParamExists('boardSectionsCreate', 'boardSection', boardSection)
            const localVarPath = `/boards/{board_id}/sections`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardSection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsDelete: async (boardId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardSectionsDelete', 'boardId', boardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('boardSectionsDelete', 'sectionId', sectionId)
            const localVarPath = `/boards/{board_id}/sections/{section_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @param {string} boardId Unique identifier of a board.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsList: async (boardId: string, bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardSectionsList', 'boardId', boardId)
            const localVarPath = `/boards/{board_id}/sections`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsListPins: async (boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardSectionsListPins', 'boardId', boardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('boardSectionsListPins', 'sectionId', sectionId)
            const localVarPath = `/boards/{board_id}/sections/{section_id}/pins`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "pins:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {BoardSection} boardSection Update a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsUpdate: async (boardId: string, sectionId: string, boardSection: BoardSection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardSectionsUpdate', 'boardId', boardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('boardSectionsUpdate', 'sectionId', sectionId)
            // verify required parameter 'boardSection' is not null or undefined
            assertParamExists('boardSectionsUpdate', 'boardSection', boardSection)
            const localVarPath = `/boards/{board_id}/sections/{section_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardSection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @param {Board} board Create a board using a single board json object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsCreate: async (board: Board, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'board' is not null or undefined
            assertParamExists('boardsCreate', 'board', board)
            const localVarPath = `/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(board, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @param {string} boardId Unique identifier of a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsDelete: async (boardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardsDelete', 'boardId', boardId)
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @param {string} boardId Unique identifier of a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsGet: async (boardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardsGet', 'boardId', boardId)
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'PUBLIC' | 'PROTECTED' | 'SECRET'} [privacy] Privacy setting for a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsList: async (bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/boards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (privacy !== undefined) {
                localVarQueryParameter['privacy'] = privacy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @param {string} boardId Unique identifier of a board.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsListPins: async (boardId: string, bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardsListPins', 'boardId', boardId)
            const localVarPath = `/boards/{board_id}/pins`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "pins:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board owned by the \"operating user_account\".
         * @summary Update board
         * @param {string} boardId Unique identifier of a board.
         * @param {BoardUpdate} boardUpdate Update a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsUpdate: async (boardId: string, boardUpdate: BoardUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'boardId' is not null or undefined
            assertParamExists('boardsUpdate', 'boardId', boardId)
            // verify required parameter 'boardUpdate' is not null or undefined
            assertParamExists('boardsUpdate', 'boardUpdate', boardUpdate)
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boardUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardsApi - functional programming interface
 * @export
 */
export const BoardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @param {string} boardId Unique identifier of a board.
         * @param {BoardSection} boardSection Create a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSectionsCreate(boardId: string, boardSection: BoardSection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardSection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSectionsCreate(boardId, boardSection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSectionsDelete(boardId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSectionsDelete(boardId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @param {string} boardId Unique identifier of a board.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSectionsList(boardId, bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSectionsListPins(boardId, sectionId, bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {BoardSection} boardSection Update a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardSection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardSectionsUpdate(boardId, sectionId, boardSection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @param {Board} board Create a board using a single board json object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardsCreate(board: Board, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardsCreate(board, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @param {string} boardId Unique identifier of a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardsDelete(boardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardsDelete(boardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @param {string} boardId Unique identifier of a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardsGet(boardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardsGet(boardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'PUBLIC' | 'PROTECTED' | 'SECRET'} [privacy] Privacy setting for a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardsList(bookmark, pageSize, privacy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @param {string} boardId Unique identifier of a board.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardsListPins(boardId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardsListPins(boardId, bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a board owned by the \"operating user_account\".
         * @summary Update board
         * @param {string} boardId Unique identifier of a board.
         * @param {BoardUpdate} boardUpdate Update a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardsUpdate(boardId: string, boardUpdate: BoardUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardsUpdate(boardId, boardUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardsApi - factory interface
 * @export
 */
export const BoardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardsApiFp(configuration)
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @param {string} boardId Unique identifier of a board.
         * @param {BoardSection} boardSection Create a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsCreate(boardId: string, boardSection: BoardSection, options?: any): AxiosPromise<BoardSection> {
            return localVarFp.boardSectionsCreate(boardId, boardSection, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsDelete(boardId: string, sectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.boardSectionsDelete(boardId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @param {string} boardId Unique identifier of a board.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.boardSectionsList(boardId, bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.boardSectionsListPins(boardId, sectionId, bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @param {string} boardId Unique identifier of a board.
         * @param {string} sectionId Unique identifier of a board section.
         * @param {BoardSection} boardSection Update a board section.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, options?: any): AxiosPromise<BoardSection> {
            return localVarFp.boardSectionsUpdate(boardId, sectionId, boardSection, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @param {Board} board Create a board using a single board json object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsCreate(board: Board, options?: any): AxiosPromise<Board> {
            return localVarFp.boardsCreate(board, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @param {string} boardId Unique identifier of a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsDelete(boardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.boardsDelete(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @param {string} boardId Unique identifier of a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsGet(boardId: string, options?: any): AxiosPromise<Board> {
            return localVarFp.boardsGet(boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {'PUBLIC' | 'PROTECTED' | 'SECRET'} [privacy] Privacy setting for a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.boardsList(bookmark, pageSize, privacy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @param {string} boardId Unique identifier of a board.
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsListPins(boardId: string, bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.boardsListPins(boardId, bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a board owned by the \"operating user_account\".
         * @summary Update board
         * @param {string} boardId Unique identifier of a board.
         * @param {BoardUpdate} boardUpdate Update a board.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardsUpdate(boardId: string, boardUpdate: BoardUpdate, options?: any): AxiosPromise<Board> {
            return localVarFp.boardsUpdate(boardId, boardUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardsApi - object-oriented interface
 * @export
 * @class BoardsApi
 * @extends {BaseAPI}
 */
export class BoardsApi extends BaseAPI {
    /**
     * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary Create board section
     * @param {string} boardId Unique identifier of a board.
     * @param {BoardSection} boardSection Create a board section.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardSectionsCreate(boardId: string, boardSection: BoardSection, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardSectionsCreate(boardId, boardSection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary Delete board section
     * @param {string} boardId Unique identifier of a board.
     * @param {string} sectionId Unique identifier of a board section.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardSectionsDelete(boardId: string, sectionId: string, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardSectionsDelete(boardId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary List board sections
     * @param {string} boardId Unique identifier of a board.
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardSectionsList(boardId, bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary List Pins on board section
     * @param {string} boardId Unique identifier of a board.
     * @param {string} sectionId Unique identifier of a board section.
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardSectionsListPins(boardId, sectionId, bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary Update board section
     * @param {string} boardId Unique identifier of a board.
     * @param {string} sectionId Unique identifier of a board section.
     * @param {BoardSection} boardSection Update a board section.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardSectionsUpdate(boardId, sectionId, boardSection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @summary Create board
     * @param {Board} board Create a board using a single board json object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardsCreate(board: Board, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardsCreate(board, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @summary Delete board
     * @param {string} boardId Unique identifier of a board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardsDelete(boardId: string, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardsDelete(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary Get board
     * @param {string} boardId Unique identifier of a board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardsGet(boardId: string, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardsGet(boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @summary List boards
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {'PUBLIC' | 'PROTECTED' | 'SECRET'} [privacy] Privacy setting for a board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardsList(bookmark, pageSize, privacy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary List Pins on board
     * @param {string} boardId Unique identifier of a board.
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardsListPins(boardId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardsListPins(boardId, bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a board owned by the \"operating user_account\".
     * @summary Update board
     * @param {string} boardId Unique identifier of a board.
     * @param {BoardUpdate} boardUpdate Update a board.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public boardsUpdate(boardId: string, boardUpdate: BoardUpdate, options?: AxiosRequestConfig) {
        return BoardsApiFp(this.configuration).boardsUpdate(boardId, boardUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CatalogsApi - axios parameter creator
 * @export
 */
export const CatalogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
         * @summary Create product group
         * @param {CatalogsProductGroupCreateRequest} catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsCreate: async (catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogsProductGroupCreateRequest' is not null or undefined
            assertParamExists('catalogsProductGroupsCreate', 'catalogsProductGroupCreateRequest', catalogsProductGroupCreateRequest)
            const localVarPath = `/catalogs/product_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogsProductGroupCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
         * @summary Delete product group
         * @param {string} productGroupId Unique identifier of a product group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsDelete: async (productGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productGroupId' is not null or undefined
            assertParamExists('catalogsProductGroupsDelete', 'productGroupId', productGroupId)
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
         * @summary Get product groups list
         * @param {string} feedId Unique identifier of a feed
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsList: async (feedId: string, bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('catalogsProductGroupsList', 'feedId', feedId)
            const localVarPath = `/catalogs/product_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read"], configuration)

            if (feedId !== undefined) {
                localVarQueryParameter['feed_id'] = feedId;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
         * @summary Update product group
         * @param {string} productGroupId Unique identifier of a product group
         * @param {CatalogsProductGroupUpdateRequest} catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsUpdate: async (productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productGroupId' is not null or undefined
            assertParamExists('catalogsProductGroupsUpdate', 'productGroupId', productGroupId)
            // verify required parameter 'catalogsProductGroupUpdateRequest' is not null or undefined
            assertParamExists('catalogsProductGroupsUpdate', 'catalogsProductGroupUpdateRequest', catalogsProductGroupUpdateRequest)
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogsProductGroupUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
         * @summary List processing results for a given feed
         * @param {string} feedId Unique identifier of a feed
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedProcessingResultsList: async (feedId: string, bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedProcessingResultsList', 'feedId', feedId)
            const localVarPath = `/catalogs/feeds/{feed_id}/processing_results`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
         * @summary Create feed
         * @param {CatalogsFeedsCreateRequest} catalogsFeedsCreateRequest Request object used to created a feed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsCreate: async (catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogsFeedsCreateRequest' is not null or undefined
            assertParamExists('feedsCreate', 'catalogsFeedsCreateRequest', catalogsFeedsCreateRequest)
            const localVarPath = `/catalogs/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read", "catalogs:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogsFeedsCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
         * @summary Delete feed
         * @param {string} feedId Unique identifier of a feed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsDelete: async (feedId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedsDelete', 'feedId', feedId)
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read", "catalogs:write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
         * @summary Get feed
         * @param {string} feedId Unique identifier of a feed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsGet: async (feedId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedsGet', 'feedId', feedId)
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
         * @summary List feeds
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsList: async (bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogs/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
         * @summary Update feed
         * @param {string} feedId Unique identifier of a feed
         * @param {CatalogsFeedsUpdateRequest} catalogsFeedsUpdateRequest Request object used to update a feed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsUpdate: async (feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedsUpdate', 'feedId', feedId)
            // verify required parameter 'catalogsFeedsUpdateRequest' is not null or undefined
            assertParamExists('feedsUpdate', 'catalogsFeedsUpdateRequest', catalogsFeedsUpdateRequest)
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read", "catalogs:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogsFeedsUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
         * @summary Get catalogs items batch
         * @param {string} batchId Id of a catalogs items batch to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsBatchGet: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('itemsBatchGet', 'batchId', batchId)
            const localVarPath = `/catalogs/items/batch/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
         * @summary Perform an operation on an item batch
         * @param {CatalogsItemsBatchRequest} catalogsItemsBatchRequest Request object used to create catalogs items in a batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsBatchPost: async (catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogsItemsBatchRequest' is not null or undefined
            assertParamExists('itemsBatchPost', 'catalogsItemsBatchRequest', catalogsItemsBatchRequest)
            const localVarPath = `/catalogs/items/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read", "catalogs:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogsItemsBatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the items of the catalog created by the \"operating user_account\"
         * @summary Get catalogs items
         * @param {string} country Country for the Catalogs Items
         * @param {Array<string>} itemIds Catalos Item ids
         * @param {string} language Language for the Catalogs Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsGet: async (country: string, itemIds: Array<string>, language: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('itemsGet', 'country', country)
            // verify required parameter 'itemIds' is not null or undefined
            assertParamExists('itemsGet', 'itemIds', itemIds)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('itemsGet', 'language', language)
            const localVarPath = `/catalogs/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["catalogs:read"], configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (itemIds) {
                localVarQueryParameter['item_ids'] = itemIds;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogsApi - functional programming interface
 * @export
 */
export const CatalogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogsApiAxiosParamCreator(configuration)
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
         * @summary Create product group
         * @param {CatalogsProductGroupCreateRequest} catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogsProductGroupsCreate(catalogsProductGroupCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
         * @summary Delete product group
         * @param {string} productGroupId Unique identifier of a product group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogsProductGroupsDelete(productGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogsProductGroupsDelete(productGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
         * @summary Get product groups list
         * @param {string} feedId Unique identifier of a feed
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogsProductGroupsList(feedId, bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
         * @summary Update product group
         * @param {string} productGroupId Unique identifier of a product group
         * @param {CatalogsProductGroupUpdateRequest} catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsProductGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogsProductGroupsUpdate(productGroupId, catalogsProductGroupUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
         * @summary List processing results for a given feed
         * @param {string} feedId Unique identifier of a feed
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedProcessingResultsList(feedId, bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
         * @summary Create feed
         * @param {CatalogsFeedsCreateRequest} catalogsFeedsCreateRequest Request object used to created a feed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsFeed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedsCreate(catalogsFeedsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
         * @summary Delete feed
         * @param {string} feedId Unique identifier of a feed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsDelete(feedId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedsDelete(feedId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
         * @summary Get feed
         * @param {string} feedId Unique identifier of a feed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsGet(feedId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsFeed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedsGet(feedId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
         * @summary List feeds
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsList(bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedsList(bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
         * @summary Update feed
         * @param {string} feedId Unique identifier of a feed
         * @param {CatalogsFeedsUpdateRequest} catalogsFeedsUpdateRequest Request object used to update a feed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsFeed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedsUpdate(feedId, catalogsFeedsUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
         * @summary Get catalogs items batch
         * @param {string} batchId Id of a catalogs items batch to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsBatchGet(batchId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsItemsBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsBatchGet(batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
         * @summary Perform an operation on an item batch
         * @param {CatalogsItemsBatchRequest} catalogsItemsBatchRequest Request object used to create catalogs items in a batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsItemsBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsBatchPost(catalogsItemsBatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the items of the catalog created by the \"operating user_account\"
         * @summary Get catalogs items
         * @param {string} country Country for the Catalogs Items
         * @param {Array<string>} itemIds Catalos Item ids
         * @param {string} language Language for the Catalogs Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsGet(country: string, itemIds: Array<string>, language: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogsItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsGet(country, itemIds, language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogsApi - factory interface
 * @export
 */
export const CatalogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogsApiFp(configuration)
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
         * @summary Create product group
         * @param {CatalogsProductGroupCreateRequest} catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options?: any): AxiosPromise<object> {
            return localVarFp.catalogsProductGroupsCreate(catalogsProductGroupCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
         * @summary Delete product group
         * @param {string} productGroupId Unique identifier of a product group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsDelete(productGroupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.catalogsProductGroupsDelete(productGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
         * @summary Get product groups list
         * @param {string} feedId Unique identifier of a feed
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.catalogsProductGroupsList(feedId, bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
         * @summary Update product group
         * @param {string} productGroupId Unique identifier of a product group
         * @param {CatalogsProductGroupUpdateRequest} catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options?: any): AxiosPromise<CatalogsProductGroup> {
            return localVarFp.catalogsProductGroupsUpdate(productGroupId, catalogsProductGroupUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
         * @summary List processing results for a given feed
         * @param {string} feedId Unique identifier of a feed
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.feedProcessingResultsList(feedId, bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
         * @summary Create feed
         * @param {CatalogsFeedsCreateRequest} catalogsFeedsCreateRequest Request object used to created a feed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options?: any): AxiosPromise<CatalogsFeed> {
            return localVarFp.feedsCreate(catalogsFeedsCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
         * @summary Delete feed
         * @param {string} feedId Unique identifier of a feed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsDelete(feedId: string, options?: any): AxiosPromise<void> {
            return localVarFp.feedsDelete(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
         * @summary Get feed
         * @param {string} feedId Unique identifier of a feed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsGet(feedId: string, options?: any): AxiosPromise<CatalogsFeed> {
            return localVarFp.feedsGet(feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
         * @summary List feeds
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsList(bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.feedsList(bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
         * @summary Update feed
         * @param {string} feedId Unique identifier of a feed
         * @param {CatalogsFeedsUpdateRequest} catalogsFeedsUpdateRequest Request object used to update a feed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options?: any): AxiosPromise<CatalogsFeed> {
            return localVarFp.feedsUpdate(feedId, catalogsFeedsUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
         * @summary Get catalogs items batch
         * @param {string} batchId Id of a catalogs items batch to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsBatchGet(batchId: string, options?: any): AxiosPromise<CatalogsItemsBatch> {
            return localVarFp.itemsBatchGet(batchId, options).then((request) => request(axios, basePath));
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
         * @summary Perform an operation on an item batch
         * @param {CatalogsItemsBatchRequest} catalogsItemsBatchRequest Request object used to create catalogs items in a batch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options?: any): AxiosPromise<CatalogsItemsBatch> {
            return localVarFp.itemsBatchPost(catalogsItemsBatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the items of the catalog created by the \"operating user_account\"
         * @summary Get catalogs items
         * @param {string} country Country for the Catalogs Items
         * @param {Array<string>} itemIds Catalos Item ids
         * @param {string} language Language for the Catalogs Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsGet(country: string, itemIds: Array<string>, language: string, options?: any): AxiosPromise<CatalogsItems> {
            return localVarFp.itemsGet(country, itemIds, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogsApi - object-oriented interface
 * @export
 * @class CatalogsApi
 * @extends {BaseAPI}
 */
export class CatalogsApi extends BaseAPI {
    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
     * @summary Create product group
     * @param {CatalogsProductGroupCreateRequest} catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).catalogsProductGroupsCreate(catalogsProductGroupCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
     * @summary Delete product group
     * @param {string} productGroupId Unique identifier of a product group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public catalogsProductGroupsDelete(productGroupId: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).catalogsProductGroupsDelete(productGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
     * @summary Get product groups list
     * @param {string} feedId Unique identifier of a feed
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).catalogsProductGroupsList(feedId, bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
     * @summary Update product group
     * @param {string} productGroupId Unique identifier of a product group
     * @param {CatalogsProductGroupUpdateRequest} catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).catalogsProductGroupsUpdate(productGroupId, catalogsProductGroupUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
     * @summary List processing results for a given feed
     * @param {string} feedId Unique identifier of a feed
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).feedProcessingResultsList(feedId, bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
     * @summary Create feed
     * @param {CatalogsFeedsCreateRequest} catalogsFeedsCreateRequest Request object used to created a feed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).feedsCreate(catalogsFeedsCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
     * @summary Delete feed
     * @param {string} feedId Unique identifier of a feed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public feedsDelete(feedId: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).feedsDelete(feedId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
     * @summary Get feed
     * @param {string} feedId Unique identifier of a feed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public feedsGet(feedId: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).feedsGet(feedId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
     * @summary List feeds
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public feedsList(bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).feedsList(bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
     * @summary Update feed
     * @param {string} feedId Unique identifier of a feed
     * @param {CatalogsFeedsUpdateRequest} catalogsFeedsUpdateRequest Request object used to update a feed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).feedsUpdate(feedId, catalogsFeedsUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
     * @summary Get catalogs items batch
     * @param {string} batchId Id of a catalogs items batch to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public itemsBatchGet(batchId: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).itemsBatchGet(batchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
     * @summary Perform an operation on an item batch
     * @param {CatalogsItemsBatchRequest} catalogsItemsBatchRequest Request object used to create catalogs items in a batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).itemsBatchPost(catalogsItemsBatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the items of the catalog created by the \"operating user_account\"
     * @summary Get catalogs items
     * @param {string} country Country for the Catalogs Items
     * @param {Array<string>} itemIds Catalos Item ids
     * @param {string} language Language for the Catalogs Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogsApi
     */
    public itemsGet(country: string, itemIds: Array<string>, language: string, options?: AxiosRequestConfig) {
        return CatalogsApiFp(this.configuration).itemsGet(country, itemIds, language, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @param {MediaUploadRequest} mediaUploadRequest Create a media upload request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaCreate: async (mediaUploadRequest: MediaUploadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaUploadRequest' is not null or undefined
            assertParamExists('mediaCreate', 'mediaUploadRequest', mediaUploadRequest)
            const localVarPath = `/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["pins:read", "pins:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @param {string} mediaId Media identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaGet: async (mediaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaId' is not null or undefined
            assertParamExists('mediaGet', 'mediaId', mediaId)
            const localVarPath = `/media/{media_id}`
                .replace(`{${"media_id"}}`, encodeURIComponent(String(mediaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["pins:read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaList: async (bookmark?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["pins:read"], configuration)

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = bookmark;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @param {MediaUploadRequest} mediaUploadRequest Create a media upload request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaUpload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaCreate(mediaUploadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @param {string} mediaId Media identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaGet(mediaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaUploadDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaGet(mediaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaList(bookmark?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Paginated & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaList(bookmark, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @param {MediaUploadRequest} mediaUploadRequest Create a media upload request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: any): AxiosPromise<MediaUpload> {
            return localVarFp.mediaCreate(mediaUploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @param {string} mediaId Media identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaGet(mediaId: string, options?: any): AxiosPromise<MediaUploadDetails> {
            return localVarFp.mediaGet(mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @param {string} [bookmark] Cursor used to fetch the next page of items
         * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaList(bookmark?: string, pageSize?: number, options?: any): AxiosPromise<Paginated & object> {
            return localVarFp.mediaList(bookmark, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
     * @summary Register media upload
     * @param {MediaUploadRequest} mediaUploadRequest Create a media upload request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).mediaCreate(mediaUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
     * @summary Get media upload details
     * @param {string} mediaId Media identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public mediaGet(mediaId: string, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).mediaGet(mediaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List media uploads filtered by given parameters.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
     * @summary List media uploads
     * @param {string} [bookmark] Cursor used to fetch the next page of items
     * @param {number} [pageSize] Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public mediaList(bookmark?: string, pageSize?: number, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).mediaList(bookmark, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OauthApi - axios parameter creator
 * @export
 */
export const OauthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  See <a href=\'/docs/api/v5/#tag/Authentication\'>Authentication</a> for more.
         * @summary Generate OAuth access token
         * @param {string} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthToken: async (grantType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('oauthToken', 'grantType', grantType)
            const localVarPath = `/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OauthApi - functional programming interface
 * @export
 */
export const OauthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OauthApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  See <a href=\'/docs/api/v5/#tag/Authentication\'>Authentication</a> for more.
         * @summary Generate OAuth access token
         * @param {string} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthToken(grantType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthAccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthToken(grantType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OauthApi - factory interface
 * @export
 */
export const OauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OauthApiFp(configuration)
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  See <a href=\'/docs/api/v5/#tag/Authentication\'>Authentication</a> for more.
         * @summary Generate OAuth access token
         * @param {string} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthToken(grantType: string, options?: any): AxiosPromise<OauthAccessTokenResponse> {
            return localVarFp.oauthToken(grantType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OauthApi - object-oriented interface
 * @export
 * @class OauthApi
 * @extends {BaseAPI}
 */
export class OauthApi extends BaseAPI {
    /**
     * Generate an OAuth access token by using an authorization code or a refresh token.  See <a href=\'/docs/api/v5/#tag/Authentication\'>Authentication</a> for more.
     * @summary Generate OAuth access token
     * @param {string} grantType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public oauthToken(grantType: string, options?: AxiosRequestConfig) {
        return OauthApiFp(this.configuration).oauthToken(grantType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PinsApi - axios parameter creator
 * @export
 */
export const PinsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
         * @summary Get Pin analytics
         * @param {string} pinId Unique identifier of a Pin.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>} metricTypes Pin metric types to get data for, default is all.
         * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
         * @param {'NO_SPLIT' | 'APP_TYPE'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsAnalytics: async (pinId: string, startDate: string, endDate: string, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pinId' is not null or undefined
            assertParamExists('pinsAnalytics', 'pinId', pinId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('pinsAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('pinsAnalytics', 'endDate', endDate)
            // verify required parameter 'metricTypes' is not null or undefined
            assertParamExists('pinsAnalytics', 'metricTypes', metricTypes)
            const localVarPath = `/pins/{pin_id}/analytics`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "pins:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = appTypes;
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS.csv);
            }

            if (splitField !== undefined) {
                localVarQueryParameter['split_field'] = splitField;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = adAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @param {Pin} pin Create a new Pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsCreate: async (pin: Pin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pin' is not null or undefined
            assertParamExists('pinsCreate', 'pin', pin)
            const localVarPath = `/pins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete Pin
         * @param {string} pinId Unique identifier of a Pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsDelete: async (pinId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pinId' is not null or undefined
            assertParamExists('pinsDelete', 'pinId', pinId)
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @param {string} pinId Unique identifier of a Pin.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsGet: async (pinId: string, adAccountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pinId' is not null or undefined
            assertParamExists('pinsGet', 'pinId', pinId)
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["boards:read", "pins:read"], configuration)

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = adAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PinsApi - functional programming interface
 * @export
 */
export const PinsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PinsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
         * @summary Get Pin analytics
         * @param {string} pinId Unique identifier of a Pin.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>} metricTypes Pin metric types to get data for, default is all.
         * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
         * @param {'NO_SPLIT' | 'APP_TYPE'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinsAnalytics(pinId: string, startDate: string, endDate: string, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: AnalyticsMetricsResponse; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinsAnalytics(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @param {Pin} pin Create a new Pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinsCreate(pin: Pin, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinsCreate(pin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete Pin
         * @param {string} pinId Unique identifier of a Pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinsDelete(pinId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinsDelete(pinId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @param {string} pinId Unique identifier of a Pin.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinsGet(pinId: string, adAccountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinsGet(pinId, adAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PinsApi - factory interface
 * @export
 */
export const PinsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PinsApiFp(configuration)
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
         * @summary Get Pin analytics
         * @param {string} pinId Unique identifier of a Pin.
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>} metricTypes Pin metric types to get data for, default is all.
         * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
         * @param {'NO_SPLIT' | 'APP_TYPE'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsAnalytics(pinId: string, startDate: string, endDate: string, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: any): AxiosPromise<{ [key: string]: AnalyticsMetricsResponse; }> {
            return localVarFp.pinsAnalytics(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @param {Pin} pin Create a new Pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsCreate(pin: Pin, options?: any): AxiosPromise<Pin> {
            return localVarFp.pinsCreate(pin, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete Pin
         * @param {string} pinId Unique identifier of a Pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsDelete(pinId: string, options?: any): AxiosPromise<void> {
            return localVarFp.pinsDelete(pinId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @param {string} pinId Unique identifier of a Pin.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsGet(pinId: string, adAccountId?: string, options?: any): AxiosPromise<Pin> {
            return localVarFp.pinsGet(pinId, adAccountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PinsApi - object-oriented interface
 * @export
 * @class PinsApi
 * @extends {BaseAPI}
 */
export class PinsApi extends BaseAPI {
    /**
     * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
     * @summary Get Pin analytics
     * @param {string} pinId Unique identifier of a Pin.
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>} metricTypes Pin metric types to get data for, default is all.
     * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
     * @param {'NO_SPLIT' | 'APP_TYPE'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
     * @param {string} [adAccountId] Unique identifier of an ad account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinsApi
     */
    public pinsAnalytics(pinId: string, startDate: string, endDate: string, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: AxiosRequestConfig) {
        return PinsApiFp(this.configuration).pinsAnalytics(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
     * @summary Create Pin
     * @param {Pin} pin Create a new Pin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinsApi
     */
    public pinsCreate(pin: Pin, options?: AxiosRequestConfig) {
        return PinsApiFp(this.configuration).pinsCreate(pin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @summary Delete Pin
     * @param {string} pinId Unique identifier of a Pin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinsApi
     */
    public pinsDelete(pinId: string, options?: AxiosRequestConfig) {
        return PinsApiFp(this.configuration).pinsDelete(pinId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
     * @summary Get Pin
     * @param {string} pinId Unique identifier of a Pin.
     * @param {string} [adAccountId] Unique identifier of an ad account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinsApi
     */
    public pinsGet(pinId: string, adAccountId?: string, options?: AxiosRequestConfig) {
        return PinsApiFp(this.configuration).pinsGet(pinId, adAccountId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserAccountApi - axios parameter creator
 * @export
 */
export const UserAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {'OTHER' | 'CLAIMED' | 'BOTH'} [fromClaimedContent] Filter on Pins that match your claimed domain.
         * @param {'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO'} [pinFormat] Pin formats to get data for, default is all.
         * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
         * @param {Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>} [metricTypes] Metric types to get data for, default is all. 
         * @param {'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountAnalytics: async (startDate: string, endDate: string, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('userAccountAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('userAccountAnalytics', 'endDate', endDate)
            const localVarPath = `/user_account/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["user_accounts:read"], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (fromClaimedContent !== undefined) {
                localVarQueryParameter['from_claimed_content'] = fromClaimedContent;
            }

            if (pinFormat !== undefined) {
                localVarQueryParameter['pin_format'] = pinFormat;
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = appTypes;
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS.csv);
            }

            if (splitField !== undefined) {
                localVarQueryParameter['split_field'] = splitField;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = adAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountGet: async (adAccountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pinterest_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "pinterest_oauth2", ["user_accounts:read"], configuration)

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = adAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAccountApi - functional programming interface
 * @export
 */
export const UserAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {'OTHER' | 'CLAIMED' | 'BOTH'} [fromClaimedContent] Filter on Pins that match your claimed domain.
         * @param {'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO'} [pinFormat] Pin formats to get data for, default is all.
         * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
         * @param {Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>} [metricTypes] Metric types to get data for, default is all. 
         * @param {'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAccountAnalytics(startDate: string, endDate: string, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: AnalyticsMetricsResponse; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, metricTypes, splitField, adAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAccountGet(adAccountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAccountGet(adAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserAccountApi - factory interface
 * @export
 */
export const UserAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAccountApiFp(configuration)
    return {
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
         * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
         * @param {'OTHER' | 'CLAIMED' | 'BOTH'} [fromClaimedContent] Filter on Pins that match your claimed domain.
         * @param {'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO'} [pinFormat] Pin formats to get data for, default is all.
         * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
         * @param {Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>} [metricTypes] Metric types to get data for, default is all. 
         * @param {'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountAnalytics(startDate: string, endDate: string, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options?: any): AxiosPromise<{ [key: string]: AnalyticsMetricsResponse; }> {
            return localVarFp.userAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, metricTypes, splitField, adAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @param {string} [adAccountId] Unique identifier of an ad account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountGet(adAccountId?: string, options?: any): AxiosPromise<Account> {
            return localVarFp.userAccountGet(adAccountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAccountApi - object-oriented interface
 * @export
 * @class UserAccountApi
 * @extends {BaseAPI}
 */
export class UserAccountApi extends BaseAPI {
    /**
     * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
     * @summary Get user account analytics
     * @param {string} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {string} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {'OTHER' | 'CLAIMED' | 'BOTH'} [fromClaimedContent] Filter on Pins that match your claimed domain.
     * @param {'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO'} [pinFormat] Pin formats to get data for, default is all.
     * @param {'ALL' | 'MOBILE' | 'TABLET' | 'WEB'} [appTypes] Apps or devices to get data for, default is all.
     * @param {Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>} [metricTypes] Metric types to get data for, default is all. 
     * @param {'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT'} [splitField] How to split the data into groups. Not including this param means data won\&#39;t be split.
     * @param {string} [adAccountId] Unique identifier of an ad account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountApi
     */
    public userAccountAnalytics(startDate: string, endDate: string, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options?: AxiosRequestConfig) {
        return UserAccountApiFp(this.configuration).userAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, metricTypes, splitField, adAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
     * @summary Get user account
     * @param {string} [adAccountId] Unique identifier of an ad account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAccountApi
     */
    public userAccountGet(adAccountId?: string, options?: AxiosRequestConfig) {
        return UserAccountApiFp(this.configuration).userAccountGet(adAccountId, options).then((request) => request(this.axios, this.basePath));
    }
}


