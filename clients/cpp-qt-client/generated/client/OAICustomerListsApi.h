/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerListsApi_H
#define OAI_OAICustomerListsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomerList.h"
#include "OAICustomerListRequest.h"
#include "OAICustomerListUpdateRequest.h"
#include "OAICustomer_lists_list_200_response.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerListsApi : public QObject {
    Q_OBJECT

public:
    OAICustomerListsApi(const int timeOut = 0);
    ~OAICustomerListsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  oai_customer_list_request OAICustomerListRequest [required]
    */
    void customerLists_create(const QString &ad_account_id, const OAICustomerListRequest &oai_customer_list_request);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  customer_list_id QString [required]
    */
    void customerLists_get(const QString &ad_account_id, const QString &customer_list_id);

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  bookmark QString [optional]
    */
    void customerLists_list(const QString &ad_account_id, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bookmark = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_account_id QString [required]
    * @param[in]  customer_list_id QString [required]
    * @param[in]  oai_customer_list_update_request OAICustomerListUpdateRequest [required]
    */
    void customerLists_update(const QString &ad_account_id, const QString &customer_list_id, const OAICustomerListUpdateRequest &oai_customer_list_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerLists_createCallback(OAIHttpRequestWorker *worker);
    void customerLists_getCallback(OAIHttpRequestWorker *worker);
    void customerLists_listCallback(OAIHttpRequestWorker *worker);
    void customerLists_updateCallback(OAIHttpRequestWorker *worker);

signals:

    void customerLists_createSignal(OAICustomerList summary);
    void customerLists_getSignal(OAICustomerList summary);
    void customerLists_listSignal(OAICustomer_lists_list_200_response summary);
    void customerLists_updateSignal(OAICustomerList summary);

    void customerLists_createSignalFull(OAIHttpRequestWorker *worker, OAICustomerList summary);
    void customerLists_getSignalFull(OAIHttpRequestWorker *worker, OAICustomerList summary);
    void customerLists_listSignalFull(OAIHttpRequestWorker *worker, OAICustomer_lists_list_200_response summary);
    void customerLists_updateSignalFull(OAIHttpRequestWorker *worker, OAICustomerList summary);

    void customerLists_createSignalE(OAICustomerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerLists_getSignalE(OAICustomerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerLists_listSignalE(OAICustomer_lists_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerLists_updateSignalE(OAICustomerList summary, QNetworkReply::NetworkError error_type, QString error_str);

    void customerLists_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerLists_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerLists_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerLists_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
