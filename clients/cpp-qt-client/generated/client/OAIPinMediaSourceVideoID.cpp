/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPinMediaSourceVideoID.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPinMediaSourceVideoID::OAIPinMediaSourceVideoID(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPinMediaSourceVideoID::OAIPinMediaSourceVideoID() {
    this->initializeModel();
}

OAIPinMediaSourceVideoID::~OAIPinMediaSourceVideoID() {}

void OAIPinMediaSourceVideoID::initializeModel() {

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_cover_image_url_isSet = false;
    m_cover_image_url_isValid = false;

    m_media_id_isSet = false;
    m_media_id_isValid = false;
}

void OAIPinMediaSourceVideoID::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPinMediaSourceVideoID::fromJsonObject(QJsonObject json) {

    m_source_type_isValid = ::OpenAPI::fromJsonValue(source_type, json[QString("source_type")]);
    m_source_type_isSet = !json[QString("source_type")].isNull() && m_source_type_isValid;

    m_cover_image_url_isValid = ::OpenAPI::fromJsonValue(cover_image_url, json[QString("cover_image_url")]);
    m_cover_image_url_isSet = !json[QString("cover_image_url")].isNull() && m_cover_image_url_isValid;

    m_media_id_isValid = ::OpenAPI::fromJsonValue(media_id, json[QString("media_id")]);
    m_media_id_isSet = !json[QString("media_id")].isNull() && m_media_id_isValid;
}

QString OAIPinMediaSourceVideoID::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPinMediaSourceVideoID::asJsonObject() const {
    QJsonObject obj;
    if (m_source_type_isSet) {
        obj.insert(QString("source_type"), ::OpenAPI::toJsonValue(source_type));
    }
    if (m_cover_image_url_isSet) {
        obj.insert(QString("cover_image_url"), ::OpenAPI::toJsonValue(cover_image_url));
    }
    if (m_media_id_isSet) {
        obj.insert(QString("media_id"), ::OpenAPI::toJsonValue(media_id));
    }
    return obj;
}

QString OAIPinMediaSourceVideoID::getSourceType() const {
    return source_type;
}
void OAIPinMediaSourceVideoID::setSourceType(const QString &source_type) {
    this->source_type = source_type;
    this->m_source_type_isSet = true;
}

bool OAIPinMediaSourceVideoID::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIPinMediaSourceVideoID::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIPinMediaSourceVideoID::getCoverImageUrl() const {
    return cover_image_url;
}
void OAIPinMediaSourceVideoID::setCoverImageUrl(const QString &cover_image_url) {
    this->cover_image_url = cover_image_url;
    this->m_cover_image_url_isSet = true;
}

bool OAIPinMediaSourceVideoID::is_cover_image_url_Set() const{
    return m_cover_image_url_isSet;
}

bool OAIPinMediaSourceVideoID::is_cover_image_url_Valid() const{
    return m_cover_image_url_isValid;
}

QString OAIPinMediaSourceVideoID::getMediaId() const {
    return media_id;
}
void OAIPinMediaSourceVideoID::setMediaId(const QString &media_id) {
    this->media_id = media_id;
    this->m_media_id_isSet = true;
}

bool OAIPinMediaSourceVideoID::is_media_id_Set() const{
    return m_media_id_isSet;
}

bool OAIPinMediaSourceVideoID::is_media_id_Valid() const{
    return m_media_id_isValid;
}

bool OAIPinMediaSourceVideoID::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPinMediaSourceVideoID::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_type_isValid && m_cover_image_url_isValid && m_media_id_isValid && true;
}

} // namespace OpenAPI
