/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsFeedValidationWarnings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsFeedValidationWarnings::OAICatalogsFeedValidationWarnings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsFeedValidationWarnings::OAICatalogsFeedValidationWarnings() {
    this->initializeModel();
}

OAICatalogsFeedValidationWarnings::~OAICatalogsFeedValidationWarnings() {}

void OAICatalogsFeedValidationWarnings::initializeModel() {

    m_title_length_too_long_isSet = false;
    m_title_length_too_long_isValid = false;

    m_description_length_too_long_isSet = false;
    m_description_length_too_long_isValid = false;

    m_gender_invalid_isSet = false;
    m_gender_invalid_isValid = false;

    m_age_group_invalid_isSet = false;
    m_age_group_invalid_isValid = false;

    m_size_type_invalid_isSet = false;
    m_size_type_invalid_isValid = false;

    m_link_format_warning_isSet = false;
    m_link_format_warning_isValid = false;

    m_duplicate_products_isSet = false;
    m_duplicate_products_isValid = false;

    m_duplicate_links_isSet = false;
    m_duplicate_links_isValid = false;

    m_sales_price_invalid_isSet = false;
    m_sales_price_invalid_isValid = false;

    m_product_category_depth_warning_isSet = false;
    m_product_category_depth_warning_isValid = false;

    m_adwords_same_as_link_isSet = false;
    m_adwords_same_as_link_isValid = false;

    m_duplicate_headers_isSet = false;
    m_duplicate_headers_isValid = false;

    m_fetch_same_signature_isSet = false;
    m_fetch_same_signature_isValid = false;

    m_adwords_format_warning_isSet = false;
    m_adwords_format_warning_isValid = false;

    m_additional_image_link_warning_isSet = false;
    m_additional_image_link_warning_isValid = false;

    m_image_link_warning_isSet = false;
    m_image_link_warning_isValid = false;

    m_shipping_invalid_isSet = false;
    m_shipping_invalid_isValid = false;

    m_tax_invalid_isSet = false;
    m_tax_invalid_isValid = false;

    m_shipping_weight_invalid_isSet = false;
    m_shipping_weight_invalid_isValid = false;

    m_expiration_date_invalid_isSet = false;
    m_expiration_date_invalid_isValid = false;

    m_availability_date_invalid_isSet = false;
    m_availability_date_invalid_isValid = false;

    m_sale_date_invalid_isSet = false;
    m_sale_date_invalid_isValid = false;

    m_weight_unit_invalid_isSet = false;
    m_weight_unit_invalid_isValid = false;

    m_is_bundle_invalid_isSet = false;
    m_is_bundle_invalid_isValid = false;

    m_updated_time_invalid_isSet = false;
    m_updated_time_invalid_isValid = false;

    m_custom_label_length_too_long_isSet = false;
    m_custom_label_length_too_long_isValid = false;

    m_product_type_length_too_long_isSet = false;
    m_product_type_length_too_long_isValid = false;

    m_too_many_additional_image_links_isSet = false;
    m_too_many_additional_image_links_isValid = false;

    m_multipack_invalid_isSet = false;
    m_multipack_invalid_isValid = false;

    m_indexed_product_count_large_delta_isSet = false;
    m_indexed_product_count_large_delta_isValid = false;

    m_item_additional_image_download_failure_isSet = false;
    m_item_additional_image_download_failure_isValid = false;

    m_optional_product_category_missing_isSet = false;
    m_optional_product_category_missing_isValid = false;

    m_optional_product_category_invalid_isSet = false;
    m_optional_product_category_invalid_isValid = false;

    m_optional_condition_missing_isSet = false;
    m_optional_condition_missing_isValid = false;

    m_optional_condition_invalid_isSet = false;
    m_optional_condition_invalid_isValid = false;

    m_ios_deep_link_invalid_isSet = false;
    m_ios_deep_link_invalid_isValid = false;

    m_android_deep_link_invalid_isSet = false;
    m_android_deep_link_invalid_isValid = false;

    m_availability_normalized_isSet = false;
    m_availability_normalized_isValid = false;

    m_condition_normalized_isSet = false;
    m_condition_normalized_isValid = false;

    m_gender_normalized_isSet = false;
    m_gender_normalized_isValid = false;

    m_size_type_normalized_isSet = false;
    m_size_type_normalized_isValid = false;

    m_age_group_normalized_isSet = false;
    m_age_group_normalized_isValid = false;

    m_utm_source_auto_corrected_isSet = false;
    m_utm_source_auto_corrected_isValid = false;

    m_country_does_not_map_to_currency_isSet = false;
    m_country_does_not_map_to_currency_isValid = false;

    m_min_ad_price_invalid_isSet = false;
    m_min_ad_price_invalid_isValid = false;
}

void OAICatalogsFeedValidationWarnings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsFeedValidationWarnings::fromJsonObject(QJsonObject json) {

    m_title_length_too_long_isValid = ::OpenAPI::fromJsonValue(title_length_too_long, json[QString("title_length_too_long")]);
    m_title_length_too_long_isSet = !json[QString("title_length_too_long")].isNull() && m_title_length_too_long_isValid;

    m_description_length_too_long_isValid = ::OpenAPI::fromJsonValue(description_length_too_long, json[QString("description_length_too_long")]);
    m_description_length_too_long_isSet = !json[QString("description_length_too_long")].isNull() && m_description_length_too_long_isValid;

    m_gender_invalid_isValid = ::OpenAPI::fromJsonValue(gender_invalid, json[QString("gender_invalid")]);
    m_gender_invalid_isSet = !json[QString("gender_invalid")].isNull() && m_gender_invalid_isValid;

    m_age_group_invalid_isValid = ::OpenAPI::fromJsonValue(age_group_invalid, json[QString("age_group_invalid")]);
    m_age_group_invalid_isSet = !json[QString("age_group_invalid")].isNull() && m_age_group_invalid_isValid;

    m_size_type_invalid_isValid = ::OpenAPI::fromJsonValue(size_type_invalid, json[QString("size_type_invalid")]);
    m_size_type_invalid_isSet = !json[QString("size_type_invalid")].isNull() && m_size_type_invalid_isValid;

    m_link_format_warning_isValid = ::OpenAPI::fromJsonValue(link_format_warning, json[QString("link_format_warning")]);
    m_link_format_warning_isSet = !json[QString("link_format_warning")].isNull() && m_link_format_warning_isValid;

    m_duplicate_products_isValid = ::OpenAPI::fromJsonValue(duplicate_products, json[QString("duplicate_products")]);
    m_duplicate_products_isSet = !json[QString("duplicate_products")].isNull() && m_duplicate_products_isValid;

    m_duplicate_links_isValid = ::OpenAPI::fromJsonValue(duplicate_links, json[QString("duplicate_links")]);
    m_duplicate_links_isSet = !json[QString("duplicate_links")].isNull() && m_duplicate_links_isValid;

    m_sales_price_invalid_isValid = ::OpenAPI::fromJsonValue(sales_price_invalid, json[QString("sales_price_invalid")]);
    m_sales_price_invalid_isSet = !json[QString("sales_price_invalid")].isNull() && m_sales_price_invalid_isValid;

    m_product_category_depth_warning_isValid = ::OpenAPI::fromJsonValue(product_category_depth_warning, json[QString("product_category_depth_warning")]);
    m_product_category_depth_warning_isSet = !json[QString("product_category_depth_warning")].isNull() && m_product_category_depth_warning_isValid;

    m_adwords_same_as_link_isValid = ::OpenAPI::fromJsonValue(adwords_same_as_link, json[QString("adwords_same_as_link")]);
    m_adwords_same_as_link_isSet = !json[QString("adwords_same_as_link")].isNull() && m_adwords_same_as_link_isValid;

    m_duplicate_headers_isValid = ::OpenAPI::fromJsonValue(duplicate_headers, json[QString("duplicate_headers")]);
    m_duplicate_headers_isSet = !json[QString("duplicate_headers")].isNull() && m_duplicate_headers_isValid;

    m_fetch_same_signature_isValid = ::OpenAPI::fromJsonValue(fetch_same_signature, json[QString("fetch_same_signature")]);
    m_fetch_same_signature_isSet = !json[QString("fetch_same_signature")].isNull() && m_fetch_same_signature_isValid;

    m_adwords_format_warning_isValid = ::OpenAPI::fromJsonValue(adwords_format_warning, json[QString("adwords_format_warning")]);
    m_adwords_format_warning_isSet = !json[QString("adwords_format_warning")].isNull() && m_adwords_format_warning_isValid;

    m_additional_image_link_warning_isValid = ::OpenAPI::fromJsonValue(additional_image_link_warning, json[QString("additional_image_link_warning")]);
    m_additional_image_link_warning_isSet = !json[QString("additional_image_link_warning")].isNull() && m_additional_image_link_warning_isValid;

    m_image_link_warning_isValid = ::OpenAPI::fromJsonValue(image_link_warning, json[QString("image_link_warning")]);
    m_image_link_warning_isSet = !json[QString("image_link_warning")].isNull() && m_image_link_warning_isValid;

    m_shipping_invalid_isValid = ::OpenAPI::fromJsonValue(shipping_invalid, json[QString("shipping_invalid")]);
    m_shipping_invalid_isSet = !json[QString("shipping_invalid")].isNull() && m_shipping_invalid_isValid;

    m_tax_invalid_isValid = ::OpenAPI::fromJsonValue(tax_invalid, json[QString("tax_invalid")]);
    m_tax_invalid_isSet = !json[QString("tax_invalid")].isNull() && m_tax_invalid_isValid;

    m_shipping_weight_invalid_isValid = ::OpenAPI::fromJsonValue(shipping_weight_invalid, json[QString("shipping_weight_invalid")]);
    m_shipping_weight_invalid_isSet = !json[QString("shipping_weight_invalid")].isNull() && m_shipping_weight_invalid_isValid;

    m_expiration_date_invalid_isValid = ::OpenAPI::fromJsonValue(expiration_date_invalid, json[QString("expiration_date_invalid")]);
    m_expiration_date_invalid_isSet = !json[QString("expiration_date_invalid")].isNull() && m_expiration_date_invalid_isValid;

    m_availability_date_invalid_isValid = ::OpenAPI::fromJsonValue(availability_date_invalid, json[QString("availability_date_invalid")]);
    m_availability_date_invalid_isSet = !json[QString("availability_date_invalid")].isNull() && m_availability_date_invalid_isValid;

    m_sale_date_invalid_isValid = ::OpenAPI::fromJsonValue(sale_date_invalid, json[QString("sale_date_invalid")]);
    m_sale_date_invalid_isSet = !json[QString("sale_date_invalid")].isNull() && m_sale_date_invalid_isValid;

    m_weight_unit_invalid_isValid = ::OpenAPI::fromJsonValue(weight_unit_invalid, json[QString("weight_unit_invalid")]);
    m_weight_unit_invalid_isSet = !json[QString("weight_unit_invalid")].isNull() && m_weight_unit_invalid_isValid;

    m_is_bundle_invalid_isValid = ::OpenAPI::fromJsonValue(is_bundle_invalid, json[QString("is_bundle_invalid")]);
    m_is_bundle_invalid_isSet = !json[QString("is_bundle_invalid")].isNull() && m_is_bundle_invalid_isValid;

    m_updated_time_invalid_isValid = ::OpenAPI::fromJsonValue(updated_time_invalid, json[QString("updated_time_invalid")]);
    m_updated_time_invalid_isSet = !json[QString("updated_time_invalid")].isNull() && m_updated_time_invalid_isValid;

    m_custom_label_length_too_long_isValid = ::OpenAPI::fromJsonValue(custom_label_length_too_long, json[QString("custom_label_length_too_long")]);
    m_custom_label_length_too_long_isSet = !json[QString("custom_label_length_too_long")].isNull() && m_custom_label_length_too_long_isValid;

    m_product_type_length_too_long_isValid = ::OpenAPI::fromJsonValue(product_type_length_too_long, json[QString("product_type_length_too_long")]);
    m_product_type_length_too_long_isSet = !json[QString("product_type_length_too_long")].isNull() && m_product_type_length_too_long_isValid;

    m_too_many_additional_image_links_isValid = ::OpenAPI::fromJsonValue(too_many_additional_image_links, json[QString("too_many_additional_image_links")]);
    m_too_many_additional_image_links_isSet = !json[QString("too_many_additional_image_links")].isNull() && m_too_many_additional_image_links_isValid;

    m_multipack_invalid_isValid = ::OpenAPI::fromJsonValue(multipack_invalid, json[QString("multipack_invalid")]);
    m_multipack_invalid_isSet = !json[QString("multipack_invalid")].isNull() && m_multipack_invalid_isValid;

    m_indexed_product_count_large_delta_isValid = ::OpenAPI::fromJsonValue(indexed_product_count_large_delta, json[QString("indexed_product_count_large_delta")]);
    m_indexed_product_count_large_delta_isSet = !json[QString("indexed_product_count_large_delta")].isNull() && m_indexed_product_count_large_delta_isValid;

    m_item_additional_image_download_failure_isValid = ::OpenAPI::fromJsonValue(item_additional_image_download_failure, json[QString("item_additional_image_download_failure")]);
    m_item_additional_image_download_failure_isSet = !json[QString("item_additional_image_download_failure")].isNull() && m_item_additional_image_download_failure_isValid;

    m_optional_product_category_missing_isValid = ::OpenAPI::fromJsonValue(optional_product_category_missing, json[QString("optional_product_category_missing")]);
    m_optional_product_category_missing_isSet = !json[QString("optional_product_category_missing")].isNull() && m_optional_product_category_missing_isValid;

    m_optional_product_category_invalid_isValid = ::OpenAPI::fromJsonValue(optional_product_category_invalid, json[QString("optional_product_category_invalid")]);
    m_optional_product_category_invalid_isSet = !json[QString("optional_product_category_invalid")].isNull() && m_optional_product_category_invalid_isValid;

    m_optional_condition_missing_isValid = ::OpenAPI::fromJsonValue(optional_condition_missing, json[QString("optional_condition_missing")]);
    m_optional_condition_missing_isSet = !json[QString("optional_condition_missing")].isNull() && m_optional_condition_missing_isValid;

    m_optional_condition_invalid_isValid = ::OpenAPI::fromJsonValue(optional_condition_invalid, json[QString("optional_condition_invalid")]);
    m_optional_condition_invalid_isSet = !json[QString("optional_condition_invalid")].isNull() && m_optional_condition_invalid_isValid;

    m_ios_deep_link_invalid_isValid = ::OpenAPI::fromJsonValue(ios_deep_link_invalid, json[QString("ios_deep_link_invalid")]);
    m_ios_deep_link_invalid_isSet = !json[QString("ios_deep_link_invalid")].isNull() && m_ios_deep_link_invalid_isValid;

    m_android_deep_link_invalid_isValid = ::OpenAPI::fromJsonValue(android_deep_link_invalid, json[QString("android_deep_link_invalid")]);
    m_android_deep_link_invalid_isSet = !json[QString("android_deep_link_invalid")].isNull() && m_android_deep_link_invalid_isValid;

    m_availability_normalized_isValid = ::OpenAPI::fromJsonValue(availability_normalized, json[QString("availability_normalized")]);
    m_availability_normalized_isSet = !json[QString("availability_normalized")].isNull() && m_availability_normalized_isValid;

    m_condition_normalized_isValid = ::OpenAPI::fromJsonValue(condition_normalized, json[QString("condition_normalized")]);
    m_condition_normalized_isSet = !json[QString("condition_normalized")].isNull() && m_condition_normalized_isValid;

    m_gender_normalized_isValid = ::OpenAPI::fromJsonValue(gender_normalized, json[QString("gender_normalized")]);
    m_gender_normalized_isSet = !json[QString("gender_normalized")].isNull() && m_gender_normalized_isValid;

    m_size_type_normalized_isValid = ::OpenAPI::fromJsonValue(size_type_normalized, json[QString("size_type_normalized")]);
    m_size_type_normalized_isSet = !json[QString("size_type_normalized")].isNull() && m_size_type_normalized_isValid;

    m_age_group_normalized_isValid = ::OpenAPI::fromJsonValue(age_group_normalized, json[QString("age_group_normalized")]);
    m_age_group_normalized_isSet = !json[QString("age_group_normalized")].isNull() && m_age_group_normalized_isValid;

    m_utm_source_auto_corrected_isValid = ::OpenAPI::fromJsonValue(utm_source_auto_corrected, json[QString("utm_source_auto_corrected")]);
    m_utm_source_auto_corrected_isSet = !json[QString("utm_source_auto_corrected")].isNull() && m_utm_source_auto_corrected_isValid;

    m_country_does_not_map_to_currency_isValid = ::OpenAPI::fromJsonValue(country_does_not_map_to_currency, json[QString("country_does_not_map_to_currency")]);
    m_country_does_not_map_to_currency_isSet = !json[QString("country_does_not_map_to_currency")].isNull() && m_country_does_not_map_to_currency_isValid;

    m_min_ad_price_invalid_isValid = ::OpenAPI::fromJsonValue(min_ad_price_invalid, json[QString("min_ad_price_invalid")]);
    m_min_ad_price_invalid_isSet = !json[QString("min_ad_price_invalid")].isNull() && m_min_ad_price_invalid_isValid;
}

QString OAICatalogsFeedValidationWarnings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsFeedValidationWarnings::asJsonObject() const {
    QJsonObject obj;
    if (m_title_length_too_long_isSet) {
        obj.insert(QString("title_length_too_long"), ::OpenAPI::toJsonValue(title_length_too_long));
    }
    if (m_description_length_too_long_isSet) {
        obj.insert(QString("description_length_too_long"), ::OpenAPI::toJsonValue(description_length_too_long));
    }
    if (m_gender_invalid_isSet) {
        obj.insert(QString("gender_invalid"), ::OpenAPI::toJsonValue(gender_invalid));
    }
    if (m_age_group_invalid_isSet) {
        obj.insert(QString("age_group_invalid"), ::OpenAPI::toJsonValue(age_group_invalid));
    }
    if (m_size_type_invalid_isSet) {
        obj.insert(QString("size_type_invalid"), ::OpenAPI::toJsonValue(size_type_invalid));
    }
    if (m_link_format_warning_isSet) {
        obj.insert(QString("link_format_warning"), ::OpenAPI::toJsonValue(link_format_warning));
    }
    if (m_duplicate_products_isSet) {
        obj.insert(QString("duplicate_products"), ::OpenAPI::toJsonValue(duplicate_products));
    }
    if (m_duplicate_links_isSet) {
        obj.insert(QString("duplicate_links"), ::OpenAPI::toJsonValue(duplicate_links));
    }
    if (m_sales_price_invalid_isSet) {
        obj.insert(QString("sales_price_invalid"), ::OpenAPI::toJsonValue(sales_price_invalid));
    }
    if (m_product_category_depth_warning_isSet) {
        obj.insert(QString("product_category_depth_warning"), ::OpenAPI::toJsonValue(product_category_depth_warning));
    }
    if (m_adwords_same_as_link_isSet) {
        obj.insert(QString("adwords_same_as_link"), ::OpenAPI::toJsonValue(adwords_same_as_link));
    }
    if (m_duplicate_headers_isSet) {
        obj.insert(QString("duplicate_headers"), ::OpenAPI::toJsonValue(duplicate_headers));
    }
    if (m_fetch_same_signature_isSet) {
        obj.insert(QString("fetch_same_signature"), ::OpenAPI::toJsonValue(fetch_same_signature));
    }
    if (m_adwords_format_warning_isSet) {
        obj.insert(QString("adwords_format_warning"), ::OpenAPI::toJsonValue(adwords_format_warning));
    }
    if (m_additional_image_link_warning_isSet) {
        obj.insert(QString("additional_image_link_warning"), ::OpenAPI::toJsonValue(additional_image_link_warning));
    }
    if (m_image_link_warning_isSet) {
        obj.insert(QString("image_link_warning"), ::OpenAPI::toJsonValue(image_link_warning));
    }
    if (m_shipping_invalid_isSet) {
        obj.insert(QString("shipping_invalid"), ::OpenAPI::toJsonValue(shipping_invalid));
    }
    if (m_tax_invalid_isSet) {
        obj.insert(QString("tax_invalid"), ::OpenAPI::toJsonValue(tax_invalid));
    }
    if (m_shipping_weight_invalid_isSet) {
        obj.insert(QString("shipping_weight_invalid"), ::OpenAPI::toJsonValue(shipping_weight_invalid));
    }
    if (m_expiration_date_invalid_isSet) {
        obj.insert(QString("expiration_date_invalid"), ::OpenAPI::toJsonValue(expiration_date_invalid));
    }
    if (m_availability_date_invalid_isSet) {
        obj.insert(QString("availability_date_invalid"), ::OpenAPI::toJsonValue(availability_date_invalid));
    }
    if (m_sale_date_invalid_isSet) {
        obj.insert(QString("sale_date_invalid"), ::OpenAPI::toJsonValue(sale_date_invalid));
    }
    if (m_weight_unit_invalid_isSet) {
        obj.insert(QString("weight_unit_invalid"), ::OpenAPI::toJsonValue(weight_unit_invalid));
    }
    if (m_is_bundle_invalid_isSet) {
        obj.insert(QString("is_bundle_invalid"), ::OpenAPI::toJsonValue(is_bundle_invalid));
    }
    if (m_updated_time_invalid_isSet) {
        obj.insert(QString("updated_time_invalid"), ::OpenAPI::toJsonValue(updated_time_invalid));
    }
    if (m_custom_label_length_too_long_isSet) {
        obj.insert(QString("custom_label_length_too_long"), ::OpenAPI::toJsonValue(custom_label_length_too_long));
    }
    if (m_product_type_length_too_long_isSet) {
        obj.insert(QString("product_type_length_too_long"), ::OpenAPI::toJsonValue(product_type_length_too_long));
    }
    if (m_too_many_additional_image_links_isSet) {
        obj.insert(QString("too_many_additional_image_links"), ::OpenAPI::toJsonValue(too_many_additional_image_links));
    }
    if (m_multipack_invalid_isSet) {
        obj.insert(QString("multipack_invalid"), ::OpenAPI::toJsonValue(multipack_invalid));
    }
    if (m_indexed_product_count_large_delta_isSet) {
        obj.insert(QString("indexed_product_count_large_delta"), ::OpenAPI::toJsonValue(indexed_product_count_large_delta));
    }
    if (m_item_additional_image_download_failure_isSet) {
        obj.insert(QString("item_additional_image_download_failure"), ::OpenAPI::toJsonValue(item_additional_image_download_failure));
    }
    if (m_optional_product_category_missing_isSet) {
        obj.insert(QString("optional_product_category_missing"), ::OpenAPI::toJsonValue(optional_product_category_missing));
    }
    if (m_optional_product_category_invalid_isSet) {
        obj.insert(QString("optional_product_category_invalid"), ::OpenAPI::toJsonValue(optional_product_category_invalid));
    }
    if (m_optional_condition_missing_isSet) {
        obj.insert(QString("optional_condition_missing"), ::OpenAPI::toJsonValue(optional_condition_missing));
    }
    if (m_optional_condition_invalid_isSet) {
        obj.insert(QString("optional_condition_invalid"), ::OpenAPI::toJsonValue(optional_condition_invalid));
    }
    if (m_ios_deep_link_invalid_isSet) {
        obj.insert(QString("ios_deep_link_invalid"), ::OpenAPI::toJsonValue(ios_deep_link_invalid));
    }
    if (m_android_deep_link_invalid_isSet) {
        obj.insert(QString("android_deep_link_invalid"), ::OpenAPI::toJsonValue(android_deep_link_invalid));
    }
    if (m_availability_normalized_isSet) {
        obj.insert(QString("availability_normalized"), ::OpenAPI::toJsonValue(availability_normalized));
    }
    if (m_condition_normalized_isSet) {
        obj.insert(QString("condition_normalized"), ::OpenAPI::toJsonValue(condition_normalized));
    }
    if (m_gender_normalized_isSet) {
        obj.insert(QString("gender_normalized"), ::OpenAPI::toJsonValue(gender_normalized));
    }
    if (m_size_type_normalized_isSet) {
        obj.insert(QString("size_type_normalized"), ::OpenAPI::toJsonValue(size_type_normalized));
    }
    if (m_age_group_normalized_isSet) {
        obj.insert(QString("age_group_normalized"), ::OpenAPI::toJsonValue(age_group_normalized));
    }
    if (m_utm_source_auto_corrected_isSet) {
        obj.insert(QString("utm_source_auto_corrected"), ::OpenAPI::toJsonValue(utm_source_auto_corrected));
    }
    if (m_country_does_not_map_to_currency_isSet) {
        obj.insert(QString("country_does_not_map_to_currency"), ::OpenAPI::toJsonValue(country_does_not_map_to_currency));
    }
    if (m_min_ad_price_invalid_isSet) {
        obj.insert(QString("min_ad_price_invalid"), ::OpenAPI::toJsonValue(min_ad_price_invalid));
    }
    return obj;
}

qint32 OAICatalogsFeedValidationWarnings::getTitleLengthTooLong() const {
    return title_length_too_long;
}
void OAICatalogsFeedValidationWarnings::setTitleLengthTooLong(const qint32 &title_length_too_long) {
    this->title_length_too_long = title_length_too_long;
    this->m_title_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_title_length_too_long_Set() const{
    return m_title_length_too_long_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_title_length_too_long_Valid() const{
    return m_title_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getDescriptionLengthTooLong() const {
    return description_length_too_long;
}
void OAICatalogsFeedValidationWarnings::setDescriptionLengthTooLong(const qint32 &description_length_too_long) {
    this->description_length_too_long = description_length_too_long;
    this->m_description_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_description_length_too_long_Set() const{
    return m_description_length_too_long_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_description_length_too_long_Valid() const{
    return m_description_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getGenderInvalid() const {
    return gender_invalid;
}
void OAICatalogsFeedValidationWarnings::setGenderInvalid(const qint32 &gender_invalid) {
    this->gender_invalid = gender_invalid;
    this->m_gender_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_gender_invalid_Set() const{
    return m_gender_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_gender_invalid_Valid() const{
    return m_gender_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAgeGroupInvalid() const {
    return age_group_invalid;
}
void OAICatalogsFeedValidationWarnings::setAgeGroupInvalid(const qint32 &age_group_invalid) {
    this->age_group_invalid = age_group_invalid;
    this->m_age_group_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_age_group_invalid_Set() const{
    return m_age_group_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_age_group_invalid_Valid() const{
    return m_age_group_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getSizeTypeInvalid() const {
    return size_type_invalid;
}
void OAICatalogsFeedValidationWarnings::setSizeTypeInvalid(const qint32 &size_type_invalid) {
    this->size_type_invalid = size_type_invalid;
    this->m_size_type_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_size_type_invalid_Set() const{
    return m_size_type_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_size_type_invalid_Valid() const{
    return m_size_type_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getLinkFormatWarning() const {
    return link_format_warning;
}
void OAICatalogsFeedValidationWarnings::setLinkFormatWarning(const qint32 &link_format_warning) {
    this->link_format_warning = link_format_warning;
    this->m_link_format_warning_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_link_format_warning_Set() const{
    return m_link_format_warning_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_link_format_warning_Valid() const{
    return m_link_format_warning_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getDuplicateProducts() const {
    return duplicate_products;
}
void OAICatalogsFeedValidationWarnings::setDuplicateProducts(const qint32 &duplicate_products) {
    this->duplicate_products = duplicate_products;
    this->m_duplicate_products_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_duplicate_products_Set() const{
    return m_duplicate_products_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_duplicate_products_Valid() const{
    return m_duplicate_products_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getDuplicateLinks() const {
    return duplicate_links;
}
void OAICatalogsFeedValidationWarnings::setDuplicateLinks(const qint32 &duplicate_links) {
    this->duplicate_links = duplicate_links;
    this->m_duplicate_links_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_duplicate_links_Set() const{
    return m_duplicate_links_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_duplicate_links_Valid() const{
    return m_duplicate_links_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getSalesPriceInvalid() const {
    return sales_price_invalid;
}
void OAICatalogsFeedValidationWarnings::setSalesPriceInvalid(const qint32 &sales_price_invalid) {
    this->sales_price_invalid = sales_price_invalid;
    this->m_sales_price_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_sales_price_invalid_Set() const{
    return m_sales_price_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_sales_price_invalid_Valid() const{
    return m_sales_price_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getProductCategoryDepthWarning() const {
    return product_category_depth_warning;
}
void OAICatalogsFeedValidationWarnings::setProductCategoryDepthWarning(const qint32 &product_category_depth_warning) {
    this->product_category_depth_warning = product_category_depth_warning;
    this->m_product_category_depth_warning_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_product_category_depth_warning_Set() const{
    return m_product_category_depth_warning_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_product_category_depth_warning_Valid() const{
    return m_product_category_depth_warning_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAdwordsSameAsLink() const {
    return adwords_same_as_link;
}
void OAICatalogsFeedValidationWarnings::setAdwordsSameAsLink(const qint32 &adwords_same_as_link) {
    this->adwords_same_as_link = adwords_same_as_link;
    this->m_adwords_same_as_link_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_adwords_same_as_link_Set() const{
    return m_adwords_same_as_link_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_adwords_same_as_link_Valid() const{
    return m_adwords_same_as_link_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getDuplicateHeaders() const {
    return duplicate_headers;
}
void OAICatalogsFeedValidationWarnings::setDuplicateHeaders(const qint32 &duplicate_headers) {
    this->duplicate_headers = duplicate_headers;
    this->m_duplicate_headers_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_duplicate_headers_Set() const{
    return m_duplicate_headers_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_duplicate_headers_Valid() const{
    return m_duplicate_headers_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getFetchSameSignature() const {
    return fetch_same_signature;
}
void OAICatalogsFeedValidationWarnings::setFetchSameSignature(const qint32 &fetch_same_signature) {
    this->fetch_same_signature = fetch_same_signature;
    this->m_fetch_same_signature_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_fetch_same_signature_Set() const{
    return m_fetch_same_signature_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_fetch_same_signature_Valid() const{
    return m_fetch_same_signature_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAdwordsFormatWarning() const {
    return adwords_format_warning;
}
void OAICatalogsFeedValidationWarnings::setAdwordsFormatWarning(const qint32 &adwords_format_warning) {
    this->adwords_format_warning = adwords_format_warning;
    this->m_adwords_format_warning_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_adwords_format_warning_Set() const{
    return m_adwords_format_warning_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_adwords_format_warning_Valid() const{
    return m_adwords_format_warning_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAdditionalImageLinkWarning() const {
    return additional_image_link_warning;
}
void OAICatalogsFeedValidationWarnings::setAdditionalImageLinkWarning(const qint32 &additional_image_link_warning) {
    this->additional_image_link_warning = additional_image_link_warning;
    this->m_additional_image_link_warning_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_additional_image_link_warning_Set() const{
    return m_additional_image_link_warning_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_additional_image_link_warning_Valid() const{
    return m_additional_image_link_warning_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getImageLinkWarning() const {
    return image_link_warning;
}
void OAICatalogsFeedValidationWarnings::setImageLinkWarning(const qint32 &image_link_warning) {
    this->image_link_warning = image_link_warning;
    this->m_image_link_warning_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_image_link_warning_Set() const{
    return m_image_link_warning_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_image_link_warning_Valid() const{
    return m_image_link_warning_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getShippingInvalid() const {
    return shipping_invalid;
}
void OAICatalogsFeedValidationWarnings::setShippingInvalid(const qint32 &shipping_invalid) {
    this->shipping_invalid = shipping_invalid;
    this->m_shipping_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_shipping_invalid_Set() const{
    return m_shipping_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_shipping_invalid_Valid() const{
    return m_shipping_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getTaxInvalid() const {
    return tax_invalid;
}
void OAICatalogsFeedValidationWarnings::setTaxInvalid(const qint32 &tax_invalid) {
    this->tax_invalid = tax_invalid;
    this->m_tax_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_tax_invalid_Set() const{
    return m_tax_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_tax_invalid_Valid() const{
    return m_tax_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getShippingWeightInvalid() const {
    return shipping_weight_invalid;
}
void OAICatalogsFeedValidationWarnings::setShippingWeightInvalid(const qint32 &shipping_weight_invalid) {
    this->shipping_weight_invalid = shipping_weight_invalid;
    this->m_shipping_weight_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_shipping_weight_invalid_Set() const{
    return m_shipping_weight_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_shipping_weight_invalid_Valid() const{
    return m_shipping_weight_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getExpirationDateInvalid() const {
    return expiration_date_invalid;
}
void OAICatalogsFeedValidationWarnings::setExpirationDateInvalid(const qint32 &expiration_date_invalid) {
    this->expiration_date_invalid = expiration_date_invalid;
    this->m_expiration_date_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_expiration_date_invalid_Set() const{
    return m_expiration_date_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_expiration_date_invalid_Valid() const{
    return m_expiration_date_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAvailabilityDateInvalid() const {
    return availability_date_invalid;
}
void OAICatalogsFeedValidationWarnings::setAvailabilityDateInvalid(const qint32 &availability_date_invalid) {
    this->availability_date_invalid = availability_date_invalid;
    this->m_availability_date_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_availability_date_invalid_Set() const{
    return m_availability_date_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_availability_date_invalid_Valid() const{
    return m_availability_date_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getSaleDateInvalid() const {
    return sale_date_invalid;
}
void OAICatalogsFeedValidationWarnings::setSaleDateInvalid(const qint32 &sale_date_invalid) {
    this->sale_date_invalid = sale_date_invalid;
    this->m_sale_date_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_sale_date_invalid_Set() const{
    return m_sale_date_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_sale_date_invalid_Valid() const{
    return m_sale_date_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getWeightUnitInvalid() const {
    return weight_unit_invalid;
}
void OAICatalogsFeedValidationWarnings::setWeightUnitInvalid(const qint32 &weight_unit_invalid) {
    this->weight_unit_invalid = weight_unit_invalid;
    this->m_weight_unit_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_weight_unit_invalid_Set() const{
    return m_weight_unit_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_weight_unit_invalid_Valid() const{
    return m_weight_unit_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getIsBundleInvalid() const {
    return is_bundle_invalid;
}
void OAICatalogsFeedValidationWarnings::setIsBundleInvalid(const qint32 &is_bundle_invalid) {
    this->is_bundle_invalid = is_bundle_invalid;
    this->m_is_bundle_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_is_bundle_invalid_Set() const{
    return m_is_bundle_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_is_bundle_invalid_Valid() const{
    return m_is_bundle_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getUpdatedTimeInvalid() const {
    return updated_time_invalid;
}
void OAICatalogsFeedValidationWarnings::setUpdatedTimeInvalid(const qint32 &updated_time_invalid) {
    this->updated_time_invalid = updated_time_invalid;
    this->m_updated_time_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_updated_time_invalid_Set() const{
    return m_updated_time_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_updated_time_invalid_Valid() const{
    return m_updated_time_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getCustomLabelLengthTooLong() const {
    return custom_label_length_too_long;
}
void OAICatalogsFeedValidationWarnings::setCustomLabelLengthTooLong(const qint32 &custom_label_length_too_long) {
    this->custom_label_length_too_long = custom_label_length_too_long;
    this->m_custom_label_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_custom_label_length_too_long_Set() const{
    return m_custom_label_length_too_long_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_custom_label_length_too_long_Valid() const{
    return m_custom_label_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getProductTypeLengthTooLong() const {
    return product_type_length_too_long;
}
void OAICatalogsFeedValidationWarnings::setProductTypeLengthTooLong(const qint32 &product_type_length_too_long) {
    this->product_type_length_too_long = product_type_length_too_long;
    this->m_product_type_length_too_long_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_product_type_length_too_long_Set() const{
    return m_product_type_length_too_long_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_product_type_length_too_long_Valid() const{
    return m_product_type_length_too_long_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getTooManyAdditionalImageLinks() const {
    return too_many_additional_image_links;
}
void OAICatalogsFeedValidationWarnings::setTooManyAdditionalImageLinks(const qint32 &too_many_additional_image_links) {
    this->too_many_additional_image_links = too_many_additional_image_links;
    this->m_too_many_additional_image_links_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_too_many_additional_image_links_Set() const{
    return m_too_many_additional_image_links_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_too_many_additional_image_links_Valid() const{
    return m_too_many_additional_image_links_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getMultipackInvalid() const {
    return multipack_invalid;
}
void OAICatalogsFeedValidationWarnings::setMultipackInvalid(const qint32 &multipack_invalid) {
    this->multipack_invalid = multipack_invalid;
    this->m_multipack_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_multipack_invalid_Set() const{
    return m_multipack_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_multipack_invalid_Valid() const{
    return m_multipack_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getIndexedProductCountLargeDelta() const {
    return indexed_product_count_large_delta;
}
void OAICatalogsFeedValidationWarnings::setIndexedProductCountLargeDelta(const qint32 &indexed_product_count_large_delta) {
    this->indexed_product_count_large_delta = indexed_product_count_large_delta;
    this->m_indexed_product_count_large_delta_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_indexed_product_count_large_delta_Set() const{
    return m_indexed_product_count_large_delta_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_indexed_product_count_large_delta_Valid() const{
    return m_indexed_product_count_large_delta_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getItemAdditionalImageDownloadFailure() const {
    return item_additional_image_download_failure;
}
void OAICatalogsFeedValidationWarnings::setItemAdditionalImageDownloadFailure(const qint32 &item_additional_image_download_failure) {
    this->item_additional_image_download_failure = item_additional_image_download_failure;
    this->m_item_additional_image_download_failure_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_item_additional_image_download_failure_Set() const{
    return m_item_additional_image_download_failure_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_item_additional_image_download_failure_Valid() const{
    return m_item_additional_image_download_failure_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getOptionalProductCategoryMissing() const {
    return optional_product_category_missing;
}
void OAICatalogsFeedValidationWarnings::setOptionalProductCategoryMissing(const qint32 &optional_product_category_missing) {
    this->optional_product_category_missing = optional_product_category_missing;
    this->m_optional_product_category_missing_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_optional_product_category_missing_Set() const{
    return m_optional_product_category_missing_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_optional_product_category_missing_Valid() const{
    return m_optional_product_category_missing_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getOptionalProductCategoryInvalid() const {
    return optional_product_category_invalid;
}
void OAICatalogsFeedValidationWarnings::setOptionalProductCategoryInvalid(const qint32 &optional_product_category_invalid) {
    this->optional_product_category_invalid = optional_product_category_invalid;
    this->m_optional_product_category_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_optional_product_category_invalid_Set() const{
    return m_optional_product_category_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_optional_product_category_invalid_Valid() const{
    return m_optional_product_category_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getOptionalConditionMissing() const {
    return optional_condition_missing;
}
void OAICatalogsFeedValidationWarnings::setOptionalConditionMissing(const qint32 &optional_condition_missing) {
    this->optional_condition_missing = optional_condition_missing;
    this->m_optional_condition_missing_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_optional_condition_missing_Set() const{
    return m_optional_condition_missing_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_optional_condition_missing_Valid() const{
    return m_optional_condition_missing_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getOptionalConditionInvalid() const {
    return optional_condition_invalid;
}
void OAICatalogsFeedValidationWarnings::setOptionalConditionInvalid(const qint32 &optional_condition_invalid) {
    this->optional_condition_invalid = optional_condition_invalid;
    this->m_optional_condition_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_optional_condition_invalid_Set() const{
    return m_optional_condition_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_optional_condition_invalid_Valid() const{
    return m_optional_condition_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getIosDeepLinkInvalid() const {
    return ios_deep_link_invalid;
}
void OAICatalogsFeedValidationWarnings::setIosDeepLinkInvalid(const qint32 &ios_deep_link_invalid) {
    this->ios_deep_link_invalid = ios_deep_link_invalid;
    this->m_ios_deep_link_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_ios_deep_link_invalid_Set() const{
    return m_ios_deep_link_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_ios_deep_link_invalid_Valid() const{
    return m_ios_deep_link_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAndroidDeepLinkInvalid() const {
    return android_deep_link_invalid;
}
void OAICatalogsFeedValidationWarnings::setAndroidDeepLinkInvalid(const qint32 &android_deep_link_invalid) {
    this->android_deep_link_invalid = android_deep_link_invalid;
    this->m_android_deep_link_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_android_deep_link_invalid_Set() const{
    return m_android_deep_link_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_android_deep_link_invalid_Valid() const{
    return m_android_deep_link_invalid_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAvailabilityNormalized() const {
    return availability_normalized;
}
void OAICatalogsFeedValidationWarnings::setAvailabilityNormalized(const qint32 &availability_normalized) {
    this->availability_normalized = availability_normalized;
    this->m_availability_normalized_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_availability_normalized_Set() const{
    return m_availability_normalized_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_availability_normalized_Valid() const{
    return m_availability_normalized_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getConditionNormalized() const {
    return condition_normalized;
}
void OAICatalogsFeedValidationWarnings::setConditionNormalized(const qint32 &condition_normalized) {
    this->condition_normalized = condition_normalized;
    this->m_condition_normalized_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_condition_normalized_Set() const{
    return m_condition_normalized_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_condition_normalized_Valid() const{
    return m_condition_normalized_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getGenderNormalized() const {
    return gender_normalized;
}
void OAICatalogsFeedValidationWarnings::setGenderNormalized(const qint32 &gender_normalized) {
    this->gender_normalized = gender_normalized;
    this->m_gender_normalized_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_gender_normalized_Set() const{
    return m_gender_normalized_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_gender_normalized_Valid() const{
    return m_gender_normalized_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getSizeTypeNormalized() const {
    return size_type_normalized;
}
void OAICatalogsFeedValidationWarnings::setSizeTypeNormalized(const qint32 &size_type_normalized) {
    this->size_type_normalized = size_type_normalized;
    this->m_size_type_normalized_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_size_type_normalized_Set() const{
    return m_size_type_normalized_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_size_type_normalized_Valid() const{
    return m_size_type_normalized_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getAgeGroupNormalized() const {
    return age_group_normalized;
}
void OAICatalogsFeedValidationWarnings::setAgeGroupNormalized(const qint32 &age_group_normalized) {
    this->age_group_normalized = age_group_normalized;
    this->m_age_group_normalized_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_age_group_normalized_Set() const{
    return m_age_group_normalized_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_age_group_normalized_Valid() const{
    return m_age_group_normalized_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getUtmSourceAutoCorrected() const {
    return utm_source_auto_corrected;
}
void OAICatalogsFeedValidationWarnings::setUtmSourceAutoCorrected(const qint32 &utm_source_auto_corrected) {
    this->utm_source_auto_corrected = utm_source_auto_corrected;
    this->m_utm_source_auto_corrected_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_utm_source_auto_corrected_Set() const{
    return m_utm_source_auto_corrected_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_utm_source_auto_corrected_Valid() const{
    return m_utm_source_auto_corrected_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getCountryDoesNotMapToCurrency() const {
    return country_does_not_map_to_currency;
}
void OAICatalogsFeedValidationWarnings::setCountryDoesNotMapToCurrency(const qint32 &country_does_not_map_to_currency) {
    this->country_does_not_map_to_currency = country_does_not_map_to_currency;
    this->m_country_does_not_map_to_currency_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_country_does_not_map_to_currency_Set() const{
    return m_country_does_not_map_to_currency_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_country_does_not_map_to_currency_Valid() const{
    return m_country_does_not_map_to_currency_isValid;
}

qint32 OAICatalogsFeedValidationWarnings::getMinAdPriceInvalid() const {
    return min_ad_price_invalid;
}
void OAICatalogsFeedValidationWarnings::setMinAdPriceInvalid(const qint32 &min_ad_price_invalid) {
    this->min_ad_price_invalid = min_ad_price_invalid;
    this->m_min_ad_price_invalid_isSet = true;
}

bool OAICatalogsFeedValidationWarnings::is_min_ad_price_invalid_Set() const{
    return m_min_ad_price_invalid_isSet;
}

bool OAICatalogsFeedValidationWarnings::is_min_ad_price_invalid_Valid() const{
    return m_min_ad_price_invalid_isValid;
}

bool OAICatalogsFeedValidationWarnings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_group_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_type_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_format_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_price_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_category_depth_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adwords_same_as_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_same_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adwords_format_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_image_link_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_weight_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_date_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_date_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bundle_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_length_too_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_too_many_additional_image_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multipack_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_product_count_large_delta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_additional_image_download_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_product_category_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_product_category_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_condition_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_condition_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_deep_link_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_deep_link_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_type_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_group_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_source_auto_corrected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_does_not_map_to_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_ad_price_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsFeedValidationWarnings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
