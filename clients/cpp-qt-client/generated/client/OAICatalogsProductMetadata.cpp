/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsProductMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsProductMetadata::OAICatalogsProductMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsProductMetadata::OAICatalogsProductMetadata() {
    this->initializeModel();
}

OAICatalogsProductMetadata::~OAICatalogsProductMetadata() {}

void OAICatalogsProductMetadata::initializeModel() {

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_group_id_isSet = false;
    m_item_group_id_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_sale_price_isSet = false;
    m_sale_price_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;
}

void OAICatalogsProductMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsProductMetadata::fromJsonObject(QJsonObject json) {

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_item_group_id_isValid = ::OpenAPI::fromJsonValue(m_item_group_id, json[QString("item_group_id")]);
    m_item_group_id_isSet = !json[QString("item_group_id")].isNull() && m_item_group_id_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_sale_price_isValid = ::OpenAPI::fromJsonValue(m_sale_price, json[QString("sale_price")]);
    m_sale_price_isSet = !json[QString("sale_price")].isNull() && m_sale_price_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;
}

QString OAICatalogsProductMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsProductMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_group_id_isSet) {
        obj.insert(QString("item_group_id"), ::OpenAPI::toJsonValue(m_item_group_id));
    }
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_sale_price_isSet) {
        obj.insert(QString("sale_price"), ::OpenAPI::toJsonValue(m_sale_price));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    return obj;
}

QString OAICatalogsProductMetadata::getItemId() const {
    return m_item_id;
}
void OAICatalogsProductMetadata::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICatalogsProductMetadata::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICatalogsProductMetadata::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAICatalogsProductMetadata::getItemGroupId() const {
    return m_item_group_id;
}
void OAICatalogsProductMetadata::setItemGroupId(const QString &item_group_id) {
    m_item_group_id = item_group_id;
    m_item_group_id_isSet = true;
}

bool OAICatalogsProductMetadata::is_item_group_id_Set() const{
    return m_item_group_id_isSet;
}

bool OAICatalogsProductMetadata::is_item_group_id_Valid() const{
    return m_item_group_id_isValid;
}

OAINonNullableProductAvailabilityType OAICatalogsProductMetadata::getAvailability() const {
    return m_availability;
}
void OAICatalogsProductMetadata::setAvailability(const OAINonNullableProductAvailabilityType &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAICatalogsProductMetadata::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAICatalogsProductMetadata::is_availability_Valid() const{
    return m_availability_isValid;
}

double OAICatalogsProductMetadata::getPrice() const {
    return m_price;
}
void OAICatalogsProductMetadata::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICatalogsProductMetadata::is_price_Set() const{
    return m_price_isSet;
}

bool OAICatalogsProductMetadata::is_price_Valid() const{
    return m_price_isValid;
}

double OAICatalogsProductMetadata::getSalePrice() const {
    return m_sale_price;
}
void OAICatalogsProductMetadata::setSalePrice(const double &sale_price) {
    m_sale_price = sale_price;
    m_sale_price_isSet = true;
}

bool OAICatalogsProductMetadata::is_sale_price_Set() const{
    return m_sale_price_isSet;
}

bool OAICatalogsProductMetadata::is_sale_price_Valid() const{
    return m_sale_price_isValid;
}

OAINonNullableCatalogsCurrency OAICatalogsProductMetadata::getCurrency() const {
    return m_currency;
}
void OAICatalogsProductMetadata::setCurrency(const OAINonNullableCatalogsCurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICatalogsProductMetadata::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICatalogsProductMetadata::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAICatalogsProductMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsProductMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_id_isValid && m_item_group_id_isValid && m_availability_isValid && m_price_isValid && m_sale_price_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
