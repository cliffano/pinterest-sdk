/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignResponse_allOf_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignResponse_allOf_1::OAICampaignResponse_allOf_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignResponse_allOf_1::OAICampaignResponse_allOf_1() {
    this->initializeModel();
}

OAICampaignResponse_allOf_1::~OAICampaignResponse_allOf_1() {}

void OAICampaignResponse_allOf_1::initializeModel() {

    m_objective_type_isSet = false;
    m_objective_type_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICampaignResponse_allOf_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignResponse_allOf_1::fromJsonObject(QJsonObject json) {

    m_objective_type_isValid = ::OpenAPI::fromJsonValue(objective_type, json[QString("objective_type")]);
    m_objective_type_isSet = !json[QString("objective_type")].isNull() && m_objective_type_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICampaignResponse_allOf_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignResponse_allOf_1::asJsonObject() const {
    QJsonObject obj;
    if (objective_type.isSet()) {
        obj.insert(QString("objective_type"), ::OpenAPI::toJsonValue(objective_type));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(created_time));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(updated_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}

OAIObjectiveType OAICampaignResponse_allOf_1::getObjectiveType() const {
    return objective_type;
}
void OAICampaignResponse_allOf_1::setObjectiveType(const OAIObjectiveType &objective_type) {
    this->objective_type = objective_type;
    this->m_objective_type_isSet = true;
}

bool OAICampaignResponse_allOf_1::is_objective_type_Set() const{
    return m_objective_type_isSet;
}

bool OAICampaignResponse_allOf_1::is_objective_type_Valid() const{
    return m_objective_type_isValid;
}

qint32 OAICampaignResponse_allOf_1::getCreatedTime() const {
    return created_time;
}
void OAICampaignResponse_allOf_1::setCreatedTime(const qint32 &created_time) {
    this->created_time = created_time;
    this->m_created_time_isSet = true;
}

bool OAICampaignResponse_allOf_1::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICampaignResponse_allOf_1::is_created_time_Valid() const{
    return m_created_time_isValid;
}

qint32 OAICampaignResponse_allOf_1::getUpdatedTime() const {
    return updated_time;
}
void OAICampaignResponse_allOf_1::setUpdatedTime(const qint32 &updated_time) {
    this->updated_time = updated_time;
    this->m_updated_time_isSet = true;
}

bool OAICampaignResponse_allOf_1::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAICampaignResponse_allOf_1::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAICampaignResponse_allOf_1::getType() const {
    return type;
}
void OAICampaignResponse_allOf_1::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAICampaignResponse_allOf_1::is_type_Set() const{
    return m_type_isSet;
}

bool OAICampaignResponse_allOf_1::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICampaignResponse_allOf_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (objective_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignResponse_allOf_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
