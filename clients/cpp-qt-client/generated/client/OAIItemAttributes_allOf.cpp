/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemAttributes_allOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemAttributes_allOf::OAIItemAttributes_allOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemAttributes_allOf::OAIItemAttributes_allOf() {
    this->initializeModel();
}

OAIItemAttributes_allOf::~OAIItemAttributes_allOf() {}

void OAIItemAttributes_allOf::initializeModel() {

    m_additional_image_link_isSet = false;
    m_additional_image_link_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;
}

void OAIItemAttributes_allOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemAttributes_allOf::fromJsonObject(QJsonObject json) {

    m_additional_image_link_isValid = ::OpenAPI::fromJsonValue(additional_image_link, json[QString("additional_image_link")]);
    m_additional_image_link_isSet = !json[QString("additional_image_link")].isNull() && m_additional_image_link_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(image_link, json[QString("image_link")]);
    m_image_link_isSet = !json[QString("image_link")].isNull() && m_image_link_isValid;
}

QString OAIItemAttributes_allOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemAttributes_allOf::asJsonObject() const {
    QJsonObject obj;
    if (additional_image_link.size() > 0) {
        obj.insert(QString("additional_image_link"), ::OpenAPI::toJsonValue(additional_image_link));
    }
    if (image_link.size() > 0) {
        obj.insert(QString("image_link"), ::OpenAPI::toJsonValue(image_link));
    }
    return obj;
}

QList<QString> OAIItemAttributes_allOf::getAdditionalImageLink() const {
    return additional_image_link;
}
void OAIItemAttributes_allOf::setAdditionalImageLink(const QList<QString> &additional_image_link) {
    this->additional_image_link = additional_image_link;
    this->m_additional_image_link_isSet = true;
}

bool OAIItemAttributes_allOf::is_additional_image_link_Set() const{
    return m_additional_image_link_isSet;
}

bool OAIItemAttributes_allOf::is_additional_image_link_Valid() const{
    return m_additional_image_link_isValid;
}

QList<QString> OAIItemAttributes_allOf::getImageLink() const {
    return image_link;
}
void OAIItemAttributes_allOf::setImageLink(const QList<QString> &image_link) {
    this->image_link = image_link;
    this->m_image_link_isSet = true;
}

bool OAIItemAttributes_allOf::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAIItemAttributes_allOf::is_image_link_Valid() const{
    return m_image_link_isValid;
}

bool OAIItemAttributes_allOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (additional_image_link.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (image_link.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemAttributes_allOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
