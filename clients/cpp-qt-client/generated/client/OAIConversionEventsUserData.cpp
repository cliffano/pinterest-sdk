/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionEventsUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionEventsUserData::OAIConversionEventsUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionEventsUserData::OAIConversionEventsUserData() {
    this->initializeModel();
}

OAIConversionEventsUserData::~OAIConversionEventsUserData() {}

void OAIConversionEventsUserData::initializeModel() {

    m_ph_isSet = false;
    m_ph_isValid = false;

    m_ge_isSet = false;
    m_ge_isValid = false;

    m_db_isSet = false;
    m_db_isValid = false;

    m_ln_isSet = false;
    m_ln_isValid = false;

    m_fn_isSet = false;
    m_fn_isValid = false;

    m_ct_isSet = false;
    m_ct_isValid = false;

    m_st_isSet = false;
    m_st_isValid = false;

    m_zp_isSet = false;
    m_zp_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;
}

void OAIConversionEventsUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionEventsUserData::fromJsonObject(QJsonObject json) {

    m_ph_isValid = ::OpenAPI::fromJsonValue(m_ph, json[QString("ph")]);
    m_ph_isSet = !json[QString("ph")].isNull() && m_ph_isValid;

    m_ge_isValid = ::OpenAPI::fromJsonValue(m_ge, json[QString("ge")]);
    m_ge_isSet = !json[QString("ge")].isNull() && m_ge_isValid;

    m_db_isValid = ::OpenAPI::fromJsonValue(m_db, json[QString("db")]);
    m_db_isSet = !json[QString("db")].isNull() && m_db_isValid;

    m_ln_isValid = ::OpenAPI::fromJsonValue(m_ln, json[QString("ln")]);
    m_ln_isSet = !json[QString("ln")].isNull() && m_ln_isValid;

    m_fn_isValid = ::OpenAPI::fromJsonValue(m_fn, json[QString("fn")]);
    m_fn_isSet = !json[QString("fn")].isNull() && m_fn_isValid;

    m_ct_isValid = ::OpenAPI::fromJsonValue(m_ct, json[QString("ct")]);
    m_ct_isSet = !json[QString("ct")].isNull() && m_ct_isValid;

    m_st_isValid = ::OpenAPI::fromJsonValue(m_st, json[QString("st")]);
    m_st_isSet = !json[QString("st")].isNull() && m_st_isValid;

    m_zp_isValid = ::OpenAPI::fromJsonValue(m_zp, json[QString("zp")]);
    m_zp_isSet = !json[QString("zp")].isNull() && m_zp_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;
}

QString OAIConversionEventsUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionEventsUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_ph.size() > 0) {
        obj.insert(QString("ph"), ::OpenAPI::toJsonValue(m_ph));
    }
    if (m_ge.size() > 0) {
        obj.insert(QString("ge"), ::OpenAPI::toJsonValue(m_ge));
    }
    if (m_db.size() > 0) {
        obj.insert(QString("db"), ::OpenAPI::toJsonValue(m_db));
    }
    if (m_ln.size() > 0) {
        obj.insert(QString("ln"), ::OpenAPI::toJsonValue(m_ln));
    }
    if (m_fn.size() > 0) {
        obj.insert(QString("fn"), ::OpenAPI::toJsonValue(m_fn));
    }
    if (m_ct.size() > 0) {
        obj.insert(QString("ct"), ::OpenAPI::toJsonValue(m_ct));
    }
    if (m_st.size() > 0) {
        obj.insert(QString("st"), ::OpenAPI::toJsonValue(m_st));
    }
    if (m_zp.size() > 0) {
        obj.insert(QString("zp"), ::OpenAPI::toJsonValue(m_zp));
    }
    if (m_country.size() > 0) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_external_id.size() > 0) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    return obj;
}

QList<QString> OAIConversionEventsUserData::getPh() const {
    return m_ph;
}
void OAIConversionEventsUserData::setPh(const QList<QString> &ph) {
    m_ph = ph;
    m_ph_isSet = true;
}

bool OAIConversionEventsUserData::is_ph_Set() const{
    return m_ph_isSet;
}

bool OAIConversionEventsUserData::is_ph_Valid() const{
    return m_ph_isValid;
}

QList<QString> OAIConversionEventsUserData::getGe() const {
    return m_ge;
}
void OAIConversionEventsUserData::setGe(const QList<QString> &ge) {
    m_ge = ge;
    m_ge_isSet = true;
}

bool OAIConversionEventsUserData::is_ge_Set() const{
    return m_ge_isSet;
}

bool OAIConversionEventsUserData::is_ge_Valid() const{
    return m_ge_isValid;
}

QList<QString> OAIConversionEventsUserData::getDb() const {
    return m_db;
}
void OAIConversionEventsUserData::setDb(const QList<QString> &db) {
    m_db = db;
    m_db_isSet = true;
}

bool OAIConversionEventsUserData::is_db_Set() const{
    return m_db_isSet;
}

bool OAIConversionEventsUserData::is_db_Valid() const{
    return m_db_isValid;
}

QList<QString> OAIConversionEventsUserData::getLn() const {
    return m_ln;
}
void OAIConversionEventsUserData::setLn(const QList<QString> &ln) {
    m_ln = ln;
    m_ln_isSet = true;
}

bool OAIConversionEventsUserData::is_ln_Set() const{
    return m_ln_isSet;
}

bool OAIConversionEventsUserData::is_ln_Valid() const{
    return m_ln_isValid;
}

QList<QString> OAIConversionEventsUserData::getFn() const {
    return m_fn;
}
void OAIConversionEventsUserData::setFn(const QList<QString> &fn) {
    m_fn = fn;
    m_fn_isSet = true;
}

bool OAIConversionEventsUserData::is_fn_Set() const{
    return m_fn_isSet;
}

bool OAIConversionEventsUserData::is_fn_Valid() const{
    return m_fn_isValid;
}

QList<QString> OAIConversionEventsUserData::getCt() const {
    return m_ct;
}
void OAIConversionEventsUserData::setCt(const QList<QString> &ct) {
    m_ct = ct;
    m_ct_isSet = true;
}

bool OAIConversionEventsUserData::is_ct_Set() const{
    return m_ct_isSet;
}

bool OAIConversionEventsUserData::is_ct_Valid() const{
    return m_ct_isValid;
}

QList<QString> OAIConversionEventsUserData::getSt() const {
    return m_st;
}
void OAIConversionEventsUserData::setSt(const QList<QString> &st) {
    m_st = st;
    m_st_isSet = true;
}

bool OAIConversionEventsUserData::is_st_Set() const{
    return m_st_isSet;
}

bool OAIConversionEventsUserData::is_st_Valid() const{
    return m_st_isValid;
}

QList<QString> OAIConversionEventsUserData::getZp() const {
    return m_zp;
}
void OAIConversionEventsUserData::setZp(const QList<QString> &zp) {
    m_zp = zp;
    m_zp_isSet = true;
}

bool OAIConversionEventsUserData::is_zp_Set() const{
    return m_zp_isSet;
}

bool OAIConversionEventsUserData::is_zp_Valid() const{
    return m_zp_isValid;
}

QList<QString> OAIConversionEventsUserData::getCountry() const {
    return m_country;
}
void OAIConversionEventsUserData::setCountry(const QList<QString> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIConversionEventsUserData::is_country_Set() const{
    return m_country_isSet;
}

bool OAIConversionEventsUserData::is_country_Valid() const{
    return m_country_isValid;
}

QList<QString> OAIConversionEventsUserData::getExternalId() const {
    return m_external_id;
}
void OAIConversionEventsUserData::setExternalId(const QList<QString> &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIConversionEventsUserData::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIConversionEventsUserData::is_external_id_Valid() const{
    return m_external_id_isValid;
}

bool OAIConversionEventsUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ph.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ge.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_db.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ln.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ct.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_st.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zp.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionEventsUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
