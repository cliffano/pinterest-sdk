/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogs_feed_processing_result_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogs_feed_processing_result_fields::OAICatalogs_feed_processing_result_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogs_feed_processing_result_fields::OAICatalogs_feed_processing_result_fields() {
    this->initializeModel();
}

OAICatalogs_feed_processing_result_fields::~OAICatalogs_feed_processing_result_fields() {}

void OAICatalogs_feed_processing_result_fields::initializeModel() {

    m_ingestion_details_isSet = false;
    m_ingestion_details_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_product_counts_isSet = false;
    m_product_counts_isValid = false;

    m_validation_details_isSet = false;
    m_validation_details_isValid = false;
}

void OAICatalogs_feed_processing_result_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogs_feed_processing_result_fields::fromJsonObject(QJsonObject json) {

    m_ingestion_details_isValid = ::OpenAPI::fromJsonValue(ingestion_details, json[QString("ingestion_details")]);
    m_ingestion_details_isSet = !json[QString("ingestion_details")].isNull() && m_ingestion_details_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_product_counts_isValid = ::OpenAPI::fromJsonValue(product_counts, json[QString("product_counts")]);
    m_product_counts_isSet = !json[QString("product_counts")].isNull() && m_product_counts_isValid;

    m_validation_details_isValid = ::OpenAPI::fromJsonValue(validation_details, json[QString("validation_details")]);
    m_validation_details_isSet = !json[QString("validation_details")].isNull() && m_validation_details_isValid;
}

QString OAICatalogs_feed_processing_result_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogs_feed_processing_result_fields::asJsonObject() const {
    QJsonObject obj;
    if (ingestion_details.isSet()) {
        obj.insert(QString("ingestion_details"), ::OpenAPI::toJsonValue(ingestion_details));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (product_counts.isSet()) {
        obj.insert(QString("product_counts"), ::OpenAPI::toJsonValue(product_counts));
    }
    if (validation_details.isSet()) {
        obj.insert(QString("validation_details"), ::OpenAPI::toJsonValue(validation_details));
    }
    return obj;
}

OAICatalogsFeedIngestionDetails OAICatalogs_feed_processing_result_fields::getIngestionDetails() const {
    return ingestion_details;
}
void OAICatalogs_feed_processing_result_fields::setIngestionDetails(const OAICatalogsFeedIngestionDetails &ingestion_details) {
    this->ingestion_details = ingestion_details;
    this->m_ingestion_details_isSet = true;
}

bool OAICatalogs_feed_processing_result_fields::is_ingestion_details_Set() const{
    return m_ingestion_details_isSet;
}

bool OAICatalogs_feed_processing_result_fields::is_ingestion_details_Valid() const{
    return m_ingestion_details_isValid;
}

OAICatalogsFeedProcessingStatus OAICatalogs_feed_processing_result_fields::getStatus() const {
    return status;
}
void OAICatalogs_feed_processing_result_fields::setStatus(const OAICatalogsFeedProcessingStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAICatalogs_feed_processing_result_fields::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalogs_feed_processing_result_fields::is_status_Valid() const{
    return m_status_isValid;
}

OAICatalogsFeedProductCounts OAICatalogs_feed_processing_result_fields::getProductCounts() const {
    return product_counts;
}
void OAICatalogs_feed_processing_result_fields::setProductCounts(const OAICatalogsFeedProductCounts &product_counts) {
    this->product_counts = product_counts;
    this->m_product_counts_isSet = true;
}

bool OAICatalogs_feed_processing_result_fields::is_product_counts_Set() const{
    return m_product_counts_isSet;
}

bool OAICatalogs_feed_processing_result_fields::is_product_counts_Valid() const{
    return m_product_counts_isValid;
}

OAICatalogsFeedValidationDetails OAICatalogs_feed_processing_result_fields::getValidationDetails() const {
    return validation_details;
}
void OAICatalogs_feed_processing_result_fields::setValidationDetails(const OAICatalogsFeedValidationDetails &validation_details) {
    this->validation_details = validation_details;
    this->m_validation_details_isSet = true;
}

bool OAICatalogs_feed_processing_result_fields::is_validation_details_Set() const{
    return m_validation_details_isSet;
}

bool OAICatalogs_feed_processing_result_fields::is_validation_details_Valid() const{
    return m_validation_details_isValid;
}

bool OAICatalogs_feed_processing_result_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (ingestion_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (product_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (validation_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogs_feed_processing_result_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ingestion_details_isValid && m_status_isValid && m_product_counts_isValid && m_validation_details_isValid && true;
}

} // namespace OpenAPI
