/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CatalogsRetailFeed : Catalogs Retail Feed object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogsRetailFeed {
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "format")]
    pub format: models::CatalogsFormat,
    #[serde(rename = "catalog_type")]
    pub catalog_type: models::CatalogsType,
    #[serde(rename = "credentials", deserialize_with = "Option::deserialize")]
    pub credentials: Option<Box<models::CatalogsFeedCredentials>>,
    /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
    #[serde(rename = "location")]
    pub location: String,
    #[serde(rename = "preferred_processing_schedule", deserialize_with = "Option::deserialize")]
    pub preferred_processing_schedule: Option<Box<models::CatalogsFeedProcessingSchedule>>,
    #[serde(rename = "status")]
    pub status: models::CatalogsStatus,
    #[serde(rename = "default_currency", deserialize_with = "Option::deserialize")]
    pub default_currency: Option<models::NullableCurrency>,
    /// The locale used within a feed for product descriptions.
    #[serde(rename = "default_locale")]
    pub default_locale: String,
    #[serde(rename = "default_country")]
    pub default_country: models::Country,
    #[serde(rename = "default_availability", deserialize_with = "Option::deserialize")]
    pub default_availability: Option<models::ProductAvailabilityType>,
}

impl CatalogsRetailFeed {
    /// Catalogs Retail Feed object
    pub fn new(name: Option<String>, format: models::CatalogsFormat, catalog_type: models::CatalogsType, credentials: Option<models::CatalogsFeedCredentials>, location: String, preferred_processing_schedule: Option<models::CatalogsFeedProcessingSchedule>, status: models::CatalogsStatus, default_currency: Option<models::NullableCurrency>, default_locale: String, default_country: models::Country, default_availability: Option<models::ProductAvailabilityType>) -> CatalogsRetailFeed {
        CatalogsRetailFeed {
            created_at: None,
            id: None,
            updated_at: None,
            name,
            format,
            catalog_type,
            credentials: if let Some(x) = credentials {Some(Box::new(x))} else {None},
            location,
            preferred_processing_schedule: if let Some(x) = preferred_processing_schedule {Some(Box::new(x))} else {None},
            status,
            default_currency,
            default_locale,
            default_country,
            default_availability,
        }
    }
}

