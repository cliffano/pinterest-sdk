/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AdsAnalyticsCreateAsyncRequest {
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    #[serde(rename = "start_date")]
    pub start_date: String,
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    #[serde(rename = "end_date")]
    pub end_date: String,
    /// TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
    #[serde(rename = "granularity")]
    pub granularity: Box<crate::models::Granularity>,
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    #[serde(rename = "click_window_days", skip_serializing_if = "Option::is_none")]
    pub click_window_days: Option<Box<crate::models::ConversionAttributionWindowDays>>,
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    #[serde(rename = "engagement_window_days", skip_serializing_if = "Option::is_none")]
    pub engagement_window_days: Option<Box<crate::models::ConversionAttributionWindowDays>>,
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
    #[serde(rename = "view_window_days", skip_serializing_if = "Option::is_none")]
    pub view_window_days: Option<Box<crate::models::ConversionAttributionWindowDays>>,
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    #[serde(rename = "conversion_report_time", skip_serializing_if = "Option::is_none")]
    pub conversion_report_time: Option<Box<crate::models::ConversionReportTimeType>>,
    /// List of types of attribution for the conversion report
    #[serde(rename = "attribution_types", skip_serializing_if = "Option::is_none")]
    pub attribution_types: Option<Vec<crate::models::ConversionReportAttributionType>>,
    /// Metric and entity columns
    #[serde(rename = "columns")]
    pub columns: Vec<crate::models::ReportingColumnAsync>,
    /// Level of the report
    #[serde(rename = "level")]
    pub level: Box<crate::models::MetricsReportingLevel>,
    /// Specification for formatting report data
    #[serde(rename = "report_format", skip_serializing_if = "Option::is_none")]
    pub report_format: Option<Box<crate::models::DataOutputFormat>>,
    /// List of campaign ids
    #[serde(rename = "campaign_ids", skip_serializing_if = "Option::is_none")]
    pub campaign_ids: Option<Vec<String>>,
    /// List of status values for filtering
    #[serde(rename = "campaign_statuses", skip_serializing_if = "Option::is_none")]
    pub campaign_statuses: Option<Vec<crate::models::CampaignSummaryStatus>>,
    /// List of values for filtering
    #[serde(rename = "campaign_objective_types", skip_serializing_if = "Option::is_none")]
    pub campaign_objective_types: Option<Vec<crate::models::ObjectiveType>>,
    /// List of ad group ids
    #[serde(rename = "ad_group_ids", skip_serializing_if = "Option::is_none")]
    pub ad_group_ids: Option<Vec<String>>,
    /// List of values for filtering
    #[serde(rename = "ad_group_statuses", skip_serializing_if = "Option::is_none")]
    pub ad_group_statuses: Option<Vec<crate::models::AdGroupSummaryStatus>>,
    /// List of ad ids
    #[serde(rename = "ad_ids", skip_serializing_if = "Option::is_none")]
    pub ad_ids: Option<Vec<String>>,
    /// List of values for filtering
    #[serde(rename = "ad_statuses", skip_serializing_if = "Option::is_none")]
    pub ad_statuses: Option<Vec<crate::models::PinPromotionSummaryStatus>>,
    /// List of product group ids
    #[serde(rename = "product_group_ids", skip_serializing_if = "Option::is_none")]
    pub product_group_ids: Option<Vec<String>>,
    /// List of values for filtering
    #[serde(rename = "product_group_statuses", skip_serializing_if = "Option::is_none")]
    pub product_group_statuses: Option<Vec<crate::models::ProductGroupSummaryStatus>>,
    /// List of product item ids
    #[serde(rename = "product_item_ids", skip_serializing_if = "Option::is_none")]
    pub product_item_ids: Option<Vec<String>>,
    /// List of targeting types
    #[serde(rename = "targeting_types", skip_serializing_if = "Option::is_none")]
    pub targeting_types: Option<Vec<crate::models::AdsAnalyticsTargetingType>>,
    /// List of metrics filters
    #[serde(rename = "metrics_filters", skip_serializing_if = "Option::is_none")]
    pub metrics_filters: Option<Vec<crate::models::AdsAnalyticsMetricsFilter>>,
}

impl AdsAnalyticsCreateAsyncRequest {
    pub fn new(start_date: String, end_date: String, granularity: crate::models::Granularity, columns: Vec<crate::models::ReportingColumnAsync>, level: crate::models::MetricsReportingLevel) -> AdsAnalyticsCreateAsyncRequest {
        AdsAnalyticsCreateAsyncRequest {
            start_date,
            end_date,
            granularity: Box::new(granularity),
            click_window_days: None,
            engagement_window_days: None,
            view_window_days: None,
            conversion_report_time: None,
            attribution_types: None,
            columns,
            level: Box::new(level),
            report_format: None,
            campaign_ids: None,
            campaign_statuses: None,
            campaign_objective_types: None,
            ad_group_ids: None,
            ad_group_statuses: None,
            ad_ids: None,
            ad_statuses: None,
            product_group_ids: None,
            product_group_statuses: None,
            product_item_ids: None,
            targeting_types: None,
            metrics_filters: None,
        }
    }
}


