/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// TargetingAdvertiserCountry : Advertiser's ISO two character country code.
/// Advertiser's ISO two character country code.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TargetingAdvertiserCountry {
    #[serde(rename = "US")]
    Us,
    #[serde(rename = "GB")]
    Gb,
    #[serde(rename = "CA")]
    Ca,
    #[serde(rename = "IE")]
    Ie,
    #[serde(rename = "AU")]
    Au,
    #[serde(rename = "NZ")]
    Nz,
    #[serde(rename = "FR")]
    Fr,
    #[serde(rename = "SE")]
    Se,
    #[serde(rename = "IL")]
    Il,
    #[serde(rename = "DE")]
    De,
    #[serde(rename = "AT")]
    At,
    #[serde(rename = "IT")]
    It,
    #[serde(rename = "ES")]
    Es,
    #[serde(rename = "NL")]
    Nl,
    #[serde(rename = "BE")]
    Be,
    #[serde(rename = "PT")]
    Pt,
    #[serde(rename = "CH")]
    Ch,
    #[serde(rename = "HK")]
    Hk,
    #[serde(rename = "JP")]
    Jp,
    #[serde(rename = "KR")]
    Kr,
    #[serde(rename = "SG")]
    Sg,
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "DK")]
    Dk,
    #[serde(rename = "FI")]
    Fi,
    #[serde(rename = "CY")]
    Cy,
    #[serde(rename = "LU")]
    Lu,
    #[serde(rename = "MT")]
    Mt,
    #[serde(rename = "PL")]
    Pl,
    #[serde(rename = "RO")]
    Ro,
    #[serde(rename = "HU")]
    Hu,
    #[serde(rename = "CZ")]
    Cz,
    #[serde(rename = "GR")]
    Gr,
    #[serde(rename = "SK")]
    Sk,
    #[serde(rename = "BR")]
    Br,
    #[serde(rename = "MX")]
    Mx,
    #[serde(rename = "AR")]
    Ar,
    #[serde(rename = "CL")]
    Cl,
    #[serde(rename = "CO")]
    Co,

}

impl ToString for TargetingAdvertiserCountry {
    fn to_string(&self) -> String {
        match self {
            Self::Us => String::from("US"),
            Self::Gb => String::from("GB"),
            Self::Ca => String::from("CA"),
            Self::Ie => String::from("IE"),
            Self::Au => String::from("AU"),
            Self::Nz => String::from("NZ"),
            Self::Fr => String::from("FR"),
            Self::Se => String::from("SE"),
            Self::Il => String::from("IL"),
            Self::De => String::from("DE"),
            Self::At => String::from("AT"),
            Self::It => String::from("IT"),
            Self::Es => String::from("ES"),
            Self::Nl => String::from("NL"),
            Self::Be => String::from("BE"),
            Self::Pt => String::from("PT"),
            Self::Ch => String::from("CH"),
            Self::Hk => String::from("HK"),
            Self::Jp => String::from("JP"),
            Self::Kr => String::from("KR"),
            Self::Sg => String::from("SG"),
            Self::No => String::from("NO"),
            Self::Dk => String::from("DK"),
            Self::Fi => String::from("FI"),
            Self::Cy => String::from("CY"),
            Self::Lu => String::from("LU"),
            Self::Mt => String::from("MT"),
            Self::Pl => String::from("PL"),
            Self::Ro => String::from("RO"),
            Self::Hu => String::from("HU"),
            Self::Cz => String::from("CZ"),
            Self::Gr => String::from("GR"),
            Self::Sk => String::from("SK"),
            Self::Br => String::from("BR"),
            Self::Mx => String::from("MX"),
            Self::Ar => String::from("AR"),
            Self::Cl => String::from("CL"),
            Self::Co => String::from("CO"),
        }
    }
}

impl Default for TargetingAdvertiserCountry {
    fn default() -> TargetingAdvertiserCountry {
        Self::Us
    }
}

