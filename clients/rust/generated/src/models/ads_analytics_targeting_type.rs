/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// AdsAnalyticsTargetingType : Reporting targeting type
/// Reporting targeting type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdsAnalyticsTargetingType {
    #[serde(rename = "KEYWORD")]
    Keyword,
    #[serde(rename = "APPTYPE")]
    Apptype,
    #[serde(rename = "GENDER")]
    Gender,
    #[serde(rename = "LOCATION")]
    Location,
    #[serde(rename = "PLACEMENT")]
    Placement,
    #[serde(rename = "COUNTRY")]
    Country,
    #[serde(rename = "TARGETED_INTEREST")]
    TargetedInterest,
    #[serde(rename = "PINNER_INTEREST")]
    PinnerInterest,
    #[serde(rename = "AUDIENCE_INCLUDE")]
    AudienceInclude,
    #[serde(rename = "GEO")]
    Geo,
    #[serde(rename = "AGE_BUCKET")]
    AgeBucket,
    #[serde(rename = "REGION")]
    Region,

}

impl ToString for AdsAnalyticsTargetingType {
    fn to_string(&self) -> String {
        match self {
            Self::Keyword => String::from("KEYWORD"),
            Self::Apptype => String::from("APPTYPE"),
            Self::Gender => String::from("GENDER"),
            Self::Location => String::from("LOCATION"),
            Self::Placement => String::from("PLACEMENT"),
            Self::Country => String::from("COUNTRY"),
            Self::TargetedInterest => String::from("TARGETED_INTEREST"),
            Self::PinnerInterest => String::from("PINNER_INTEREST"),
            Self::AudienceInclude => String::from("AUDIENCE_INCLUDE"),
            Self::Geo => String::from("GEO"),
            Self::AgeBucket => String::from("AGE_BUCKET"),
            Self::Region => String::from("REGION"),
        }
    }
}

impl Default for AdsAnalyticsTargetingType {
    fn default() -> AdsAnalyticsTargetingType {
        Self::Keyword
    }
}

