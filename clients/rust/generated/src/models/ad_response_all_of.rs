/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

/// AdResponseAllOf : Creation fields



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AdResponseAllOf {
    /// ID of the ad group that contains the ad.
    #[serde(rename = "ad_group_id", skip_serializing_if = "Option::is_none")]
    pub ad_group_id: Option<String>,
    /// Deep link URL for Android devices. Not currently available. Using this field will generate an error.
    #[serde(rename = "android_deep_link", skip_serializing_if = "Option::is_none")]
    pub android_deep_link: Option<String>,
    /// Comma-separated deep links for the carousel pin on Android.
    #[serde(rename = "carousel_android_deep_links", skip_serializing_if = "Option::is_none")]
    pub carousel_android_deep_links: Option<Vec<String>>,
    /// Comma-separated destination URLs for the carousel pin to promote.
    #[serde(rename = "carousel_destination_urls", skip_serializing_if = "Option::is_none")]
    pub carousel_destination_urls: Option<Vec<String>>,
    /// Comma-separated deep links for the carousel pin on iOS.
    #[serde(rename = "carousel_ios_deep_links", skip_serializing_if = "Option::is_none")]
    pub carousel_ios_deep_links: Option<Vec<String>>,
    /// Tracking url for the ad clicks.
    #[serde(rename = "click_tracking_url", skip_serializing_if = "Option::is_none")]
    pub click_tracking_url: Option<String>,
    /// Ad creative type enum
    #[serde(rename = "creative_type", skip_serializing_if = "Option::is_none")]
    pub creative_type: Option<CreativeType>,
    /// Destination URL.
    #[serde(rename = "destination_url", skip_serializing_if = "Option::is_none")]
    pub destination_url: Option<String>,
    /// Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
    #[serde(rename = "ios_deep_link", skip_serializing_if = "Option::is_none")]
    pub ios_deep_link: Option<String>,
    /// Is original pin deleted?
    #[serde(rename = "is_pin_deleted", skip_serializing_if = "Option::is_none")]
    pub is_pin_deleted: Option<bool>,
    /// Is pin repinnable?
    #[serde(rename = "is_removable", skip_serializing_if = "Option::is_none")]
    pub is_removable: Option<bool>,
    /// Name of the ad - 255 chars max.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Pin ID.
    #[serde(rename = "pin_id", skip_serializing_if = "Option::is_none")]
    pub pin_id: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::EntityStatus>,
    #[serde(rename = "tracking_urls", skip_serializing_if = "Option::is_none")]
    pub tracking_urls: Option<Box<crate::models::TrackingUrls>>,
    /// Tracking URL for ad impressions.
    #[serde(rename = "view_tracking_url", skip_serializing_if = "Option::is_none")]
    pub view_tracking_url: Option<String>,
}

impl AdResponseAllOf {
    /// Creation fields
    pub fn new() -> AdResponseAllOf {
        AdResponseAllOf {
            ad_group_id: None,
            android_deep_link: None,
            carousel_android_deep_links: None,
            carousel_destination_urls: None,
            carousel_ios_deep_links: None,
            click_tracking_url: None,
            creative_type: None,
            destination_url: None,
            ios_deep_link: None,
            is_pin_deleted: None,
            is_removable: None,
            name: None,
            pin_id: None,
            status: None,
            tracking_urls: None: None,
            view_tracking_url: None,
        }
    }
}

/// Ad creative type enum
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CreativeType {
    #[serde(rename = "REGULAR")]
    REGULAR,
    #[serde(rename = "VIDEO")]
    VIDEO,
    #[serde(rename = "SHOPPING")]
    SHOPPING,
    #[serde(rename = "CAROUSEL")]
    CAROUSEL,
    #[serde(rename = "MAX_VIDEO")]
    MAXVIDEO,
    #[serde(rename = "SHOP_THE_PIN")]
    SHOPTHEPIN,
    #[serde(rename = "STORY")]
    STORY,
}

impl Default for CreativeType {
    fn default() -> CreativeType {
        Self::REGULAR
    }
}

