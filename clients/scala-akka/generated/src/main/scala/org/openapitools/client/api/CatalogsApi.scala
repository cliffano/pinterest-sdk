/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CatalogsFeed
import org.openapitools.client.model.CatalogsFeedsCreateRequest
import org.openapitools.client.model.CatalogsFeedsUpdateRequest
import org.openapitools.client.model.CatalogsItems
import org.openapitools.client.model.CatalogsItemsBatch
import org.openapitools.client.model.CatalogsItemsBatchRequest
import org.openapitools.client.model.CatalogsProductGroup
import org.openapitools.client.model.CatalogsProductGroupCreateRequest
import org.openapitools.client.model.CatalogsProductGroupUpdateRequest
import org.openapitools.client.model.Error
import org.openapitools.client.model.Paginated
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CatalogsApi {

  def apply(baseUrl: String = "https://api.pinterest.com/v5") = new CatalogsApi(baseUrl)
}

class CatalogsApi(baseUrl: String) {

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create product group to use in Catalogs.
   * 
   * Expected answers:
   *   code 201 : Any (Success)
   *   code 400 : Error (Invalid body.)
   *   code 401 : Error (Unauthorized access.)
   *   code 403 : Error (Forbidden. Account not approved for feed mutations yet.)
   *   code 409 : Error (Conflict. Can't create this catalogs product group with this value.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
   */
  def catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, baseUrl, "/catalogs/product_groups", "application/json")
      .withBody(catalogsProductGroupCreateRequest)
      .withSuccessResponse[Any](201)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](409)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
   * 
   * Expected answers:
   *   code 204 :  (Catalogs Product Group deleted successfully.)
   *   code 400 : Error (Invalid catalogs product group id parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 403 : Error (Forbidden. Account not approved for feed mutations yet.)
   *   code 404 : Error (Catalogs product group not found.)
   *   code 409 : Error (Conflict. Can't delete this catalogs product group.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param productGroupId Unique identifier of a product group
   */
  def catalogsProductGroupsDelete(productGroupId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/catalogs/product_groups/{product_group_id}", "application/json")
      .withPathParam("product_group_id", productGroupId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](404)
      .withErrorResponse[Error](409)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
   * 
   * Expected answers:
   *   code 200 : Paginated (Success)
   *   code 400 : Error (Invalid feed parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 403 : Error (Forbidden. Account not approved for feed mutations yet.)
   *   code 404 : Error (Data feed not found.)
   *   code 409 : Error (Conflict. Can't create this catalogs product group with this value.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param feedId Unique identifier of a feed
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.
   */
  def catalogsProductGroupsList(feedId: String, bookmark: Option[String] = None, pageSize: Option[Int] = None): ApiRequest[Paginated] =
    ApiRequest[Paginated](ApiMethods.GET, baseUrl, "/catalogs/product_groups", "application/json")
      .withQueryParam("feed_id", feedId)
      .withQueryParam("bookmark", bookmark)
      .withQueryParam("page_size", pageSize)
      .withSuccessResponse[Paginated](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](404)
      .withErrorResponse[Error](409)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update product group to use in Catalogs.
   * 
   * Expected answers:
   *   code 200 : CatalogsProductGroup (Success)
   *   code 400 : Error (Invalid parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 404 : Error (Catalogs product group not found.)
   *   code 409 : Error (Conflict. Can't update this catalogs product group to this value.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param productGroupId Unique identifier of a product group
   * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
   */
  def catalogsProductGroupsUpdate(productGroupId: String, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest): ApiRequest[CatalogsProductGroup] =
    ApiRequest[CatalogsProductGroup](ApiMethods.PATCH, baseUrl, "/catalogs/product_groups/{product_group_id}", "application/json")
      .withBody(catalogsProductGroupUpdateRequest)
      .withPathParam("product_group_id", productGroupId)
      .withSuccessResponse[CatalogsProductGroup](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
      .withErrorResponse[Error](409)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
   * 
   * Expected answers:
   *   code 200 : Paginated (Success)
   *   code 400 : Error (Invalid parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 404 : Error (Feed not found.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param feedId Unique identifier of a feed
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.
   */
  def feedProcessingResultsList(feedId: String, bookmark: Option[String] = None, pageSize: Option[Int] = None): ApiRequest[Paginated] =
    ApiRequest[Paginated](ApiMethods.GET, baseUrl, "/catalogs/feeds/{feed_id}/processing_results", "application/json")
      .withQueryParam("bookmark", bookmark)
      .withQueryParam("page_size", pageSize)
      .withPathParam("feed_id", feedId)
      .withSuccessResponse[Paginated](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
   * 
   * Expected answers:
   *   code 201 : CatalogsFeed (Success)
   *   code 400 : Error (Invalid feed parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 403 : Error (Business account required.)
   *   code 409 : Error (User website required.)
   *   code 422 : Error (Unique feed name is required.)
   *   code 0 : Error (Unexpected error)
   * 
   * @param catalogsFeedsCreateRequest Request object used to created a feed.
   */
  def feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest): ApiRequest[CatalogsFeed] =
    ApiRequest[CatalogsFeed](ApiMethods.POST, baseUrl, "/catalogs/feeds", "application/json")
      .withBody(catalogsFeedsCreateRequest)
      .withSuccessResponse[CatalogsFeed](201)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](409)
      .withErrorResponse[Error](422)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
   * 
   * Expected answers:
   *   code 204 :  (Feed deleted successfully.)
   *   code 400 : Error (Invalid feed parameters.)
   *   code 403 : Error (Forbidden. Account not approved for feed mutations yet.)
   *   code 404 : Error (Data feed not found.)
   *   code 409 : Error (Conflict. Can't delete a feed with active promotions.)
   *   code 0 : Error (Unexpected error)
   * 
   * @param feedId Unique identifier of a feed
   */
  def feedsDelete(feedId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/catalogs/feeds/{feed_id}", "application/json")
      .withPathParam("feed_id", feedId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](404)
      .withErrorResponse[Error](409)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
   * 
   * Expected answers:
   *   code 200 : CatalogsFeed (Success)
   *   code 400 : Error (Invalid feed parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 404 : Error (Data feed not found.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param feedId Unique identifier of a feed
   */
  def feedsGet(feedId: String): ApiRequest[CatalogsFeed] =
    ApiRequest[CatalogsFeed](ApiMethods.GET, baseUrl, "/catalogs/feeds/{feed_id}", "application/json")
      .withPathParam("feed_id", feedId)
      .withSuccessResponse[CatalogsFeed](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](404)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
   * 
   * Expected answers:
   *   code 200 : Paginated (Success)
   *   code 400 : Error (Invalid parameters.)
   *   code 401 : Error (Unauthorized access.)
   *   code 0 : Error (Unexpected error.)
   * 
   * @param bookmark Cursor used to fetch the next page of items
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.
   */
  def feedsList(bookmark: Option[String] = None, pageSize: Option[Int] = None): ApiRequest[Paginated] =
    ApiRequest[Paginated](ApiMethods.GET, baseUrl, "/catalogs/feeds", "application/json")
      .withQueryParam("bookmark", bookmark)
      .withQueryParam("page_size", pageSize)
      .withSuccessResponse[Paginated](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](401)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
   * 
   * Expected answers:
   *   code 200 : CatalogsFeed (Success)
   *   code 400 : Error (Invalid feed parameters.)
   *   code 403 : Error (Forbidden. Account not approved for feed mutations yet.)
   *   code 404 : Error (Data feed not found.)
   *   code 0 : Error (Unexpected error)
   * 
   * @param feedId Unique identifier of a feed
   * @param catalogsFeedsUpdateRequest Request object used to update a feed.
   */
  def feedsUpdate(feedId: String, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest): ApiRequest[CatalogsFeed] =
    ApiRequest[CatalogsFeed](ApiMethods.PATCH, baseUrl, "/catalogs/feeds/{feed_id}", "application/json")
      .withBody(catalogsFeedsUpdateRequest)
      .withPathParam("feed_id", feedId)
      .withSuccessResponse[CatalogsFeed](200)
      .withErrorResponse[Error](400)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](404)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
   * 
   * Expected answers:
   *   code 200 : CatalogsItemsBatch (Response containing the requested catalogs items batch)
   *   code 401 : Error (Not authorized to access catalogs items batch)
   *   code 403 : Error (Not authorized to access catalogs items batch)
   *   code 404 : Error (Catalogs items batch not found)
   *   code 0 : Error (Unexpected error)
   * 
   * @param batchId Id of a catalogs items batch to fetch
   */
  def itemsBatchGet(batchId: String): ApiRequest[CatalogsItemsBatch] =
    ApiRequest[CatalogsItemsBatch](ApiMethods.GET, baseUrl, "/catalogs/items/batch/{batch_id}", "application/json")
      .withPathParam("batch_id", batchId)
      .withSuccessResponse[CatalogsItemsBatch](200)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withErrorResponse[Error](404)
      .withDefaultErrorResponse[Error]
      

  /**
   * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
   * 
   * Expected answers:
   *   code 200 : CatalogsItemsBatch (Response containing the requested catalogs items batch)
   *   code 401 : Error (Not authorized to post catalogs items)
   *   code 403 : Error (Not authorized to post catalogs items)
   *   code 0 : Error (Unexpected error)
   * 
   * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch
   */
  def itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest): ApiRequest[CatalogsItemsBatch] =
    ApiRequest[CatalogsItemsBatch](ApiMethods.POST, baseUrl, "/catalogs/items/batch", "application/json")
      .withBody(catalogsItemsBatchRequest)
      .withSuccessResponse[CatalogsItemsBatch](200)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get the items of the catalog created by the \"operating user_account\"
   * 
   * Expected answers:
   *   code 200 : CatalogsItems (Response containing the requested catalogs items)
   *   code 401 : Error (Not authorized to access catalogs items)
   *   code 403 : Error (Not authorized to access catalogs items)
   *   code 0 : Error (Unexpected error)
   * 
   * @param country Country for the Catalogs Items
   * @param itemIds Catalos Item ids
   * @param language Language for the Catalogs Items
   */
  def itemsGet(country: String, itemIds: Seq[String], language: String): ApiRequest[CatalogsItems] =
    ApiRequest[CatalogsItems](ApiMethods.GET, baseUrl, "/catalogs/items", "application/json")
      .withQueryParam("country", country)
      .withQueryParam("item_ids", ArrayValues(itemIds, MULTI))
      .withQueryParam("language", language)
      .withSuccessResponse[CatalogsItems](200)
      .withErrorResponse[Error](401)
      .withErrorResponse[Error](403)
      .withDefaultErrorResponse[Error]
      



}

