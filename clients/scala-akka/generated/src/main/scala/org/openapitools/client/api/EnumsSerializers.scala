/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model._
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(AccountEnums.AccountType) :+
    new EnumNameSerializer(AdGroupResponseEnums.BudgetType) :+
    new EnumNameSerializer(AdGroupResponseEnums.ConversionLearningModeType) :+
    new EnumNameSerializer(AdGroupResponseAllOfEnums.BudgetType) :+
    new EnumNameSerializer(AdGroupResponseAllOfEnums.ConversionLearningModeType) :+
    new EnumNameSerializer(AdResponseEnums.CreativeType) :+
    new EnumNameSerializer(AdResponseEnums.Seq[RejectedReasons]) :+
    new EnumNameSerializer(AdResponseEnums.ReviewStatus) :+
    new EnumNameSerializer(AdResponseAllOfEnums.CreativeType) :+
    new EnumNameSerializer(AdResponseAllOf1Enums.Seq[RejectedReasons]) :+
    new EnumNameSerializer(AdResponseAllOf1Enums.ReviewStatus) :+
    new EnumNameSerializer(AnalyticsMetricsResponseDailyMetricsEnums.DataStatus) :+
    new EnumNameSerializer(BoardEnums.Privacy) :+
    new EnumNameSerializer(BoardUpdateEnums.Privacy) :+
    new EnumNameSerializer(CatalogsFeedIngestionErrorsEnums.LargeProductCountDecrease) :+
    new EnumNameSerializer(CatalogsFeedProcessingScheduleEnums.Timezone) :+
    new EnumNameSerializer(OauthAccessTokenRequestEnums.GrantType) :+
    new EnumNameSerializer(OauthAccessTokenRequestCodeEnums.GrantType) :+
    new EnumNameSerializer(OauthAccessTokenRequestRefreshEnums.GrantType) :+
    new EnumNameSerializer(OauthAccessTokenResponseEnums.ResponseType) :+
    new EnumNameSerializer(OauthAccessTokenResponseCodeEnums.ResponseType) :+
    new EnumNameSerializer(OauthAccessTokenResponseRefreshEnums.ResponseType) :+
    new EnumNameSerializer(PinMediaSourceEnums.SourceType) :+
    new EnumNameSerializer(PinMediaSourceEnums.ContentType) :+
    new EnumNameSerializer(PinMediaSourceImageBase64Enums.SourceType) :+
    new EnumNameSerializer(PinMediaSourceImageBase64Enums.ContentType) :+
    new EnumNameSerializer(PinMediaSourceImageURLEnums.SourceType) :+
    new EnumNameSerializer(PinMediaSourceVideoIDEnums.SourceType)

  private class EnumNameSerializer[E <: Enumeration: ClassTag](enum: E)
    extends Serializer[E#Value] {
    import JsonDSL._

    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats):
    PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t @ TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            enum.withName(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
    }
  }

}
