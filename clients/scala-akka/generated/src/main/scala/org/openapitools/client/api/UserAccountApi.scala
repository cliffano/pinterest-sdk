/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Account
import org.openapitools.client.model.AnalyticsMetricsResponse
import org.openapitools.client.model.Error
import java.time.LocalDate
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object UserAccountApi {

  def apply(baseUrl: String = "https://api.pinterest.com/v5") = new UserAccountApi(baseUrl)
}

class UserAccountApi(baseUrl: String) {

  /**
   * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
   * 
   * Expected answers:
   *   code 200 : Map[String, AnalyticsMetricsResponse] (Success)
   *   code 403 : Error (Not authorized to access the user account analytics.)
   *   code 0 : Error (Unexpected error)
   * 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
   * @param fromClaimedContent Filter on Pins that match your claimed domain.
   * @param pinFormat Pin formats to get data for, default is all.
   * @param appTypes Apps or devices to get data for, default is all.
   * @param metricTypes Metric types to get data for, default is all. 
   * @param splitField How to split the data into groups. Not including this param means data won't be split.
   * @param adAccountId Unique identifier of an ad account.
   */
  def userAccountAnalytics(startDate: LocalDate, endDate: LocalDate, fromClaimedContent: Option[String] = None, pinFormat: Option[String] = None, appTypes: Option[String] = None, metricTypes: Seq[String], splitField: Option[String] = None, adAccountId: Option[String] = None): ApiRequest[Map[String, AnalyticsMetricsResponse]] =
    ApiRequest[Map[String, AnalyticsMetricsResponse]](ApiMethods.GET, baseUrl, "/user_account/analytics", "application/json")
      .withQueryParam("start_date", startDate)
      .withQueryParam("end_date", endDate)
      .withQueryParam("from_claimed_content", fromClaimedContent)
      .withQueryParam("pin_format", pinFormat)
      .withQueryParam("app_types", appTypes)
      .withQueryParam("metric_types", ArrayValues(metricTypes, CSV))
      .withQueryParam("split_field", splitField)
      .withQueryParam("ad_account_id", adAccountId)
      .withSuccessResponse[Map[String, AnalyticsMetricsResponse]](200)
      .withErrorResponse[Error](403)
      .withDefaultErrorResponse[Error]
      

  /**
   * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/api/v5/#tag/Understanding-business-access'>Understanding Business Access</a> for more information.
   * 
   * Expected answers:
   *   code 200 : Account (response)
   *   code 403 : Error (Not authorized to access the user account.)
   *   code 0 : Error (Unexpected error)
   * 
   * @param adAccountId Unique identifier of an ad account.
   */
  def userAccountGet(adAccountId: Option[String] = None): ApiRequest[Account] =
    ApiRequest[Account](ApiMethods.GET, baseUrl, "/user_account", "application/json")
      .withQueryParam("ad_account_id", adAccountId)
      .withSuccessResponse[Account](200)
      .withErrorResponse[Error](403)
      .withDefaultErrorResponse[Error]
      



}

