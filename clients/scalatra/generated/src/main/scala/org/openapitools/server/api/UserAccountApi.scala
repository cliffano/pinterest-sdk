/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Account
import org.openapitools.server.model.AnalyticsMetricsResponse
import org.openapitools.server.model.Error
import java.time.LocalDate

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class UserAccountApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "UserAccountApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val userAccountAnalyticsOperation = (apiOperation[Map[String, AnalyticsMetricsResponse]]("userAccountAnalytics")
    summary "Get user account analytics"
    parameters(queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[String]("fromClaimedContent").description("").optional.defaultValue(BOTH), queryParam[String]("pinFormat").description("").optional.defaultValue(ALL), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[List[String]]("metricTypes").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("splitField").description("").optional.defaultValue(NO_SPLIT), queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account/analytics", operation(userAccountAnalyticsOperation)) {
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
            val fromClaimedContent = params.getAs[String]("fromClaimedContent")

    //println("fromClaimedContent: " + fromClaimedContent)
            val pinFormat = params.getAs[String]("pinFormat")

    //println("pinFormat: " + pinFormat)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val splitField = params.getAs[String]("splitField")

    //println("splitField: " + splitField)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val userAccountGetOperation = (apiOperation[Account]("userAccountGet")
    summary "Get user account"
    parameters(queryParam[String]("adAccountId").description("").optional)
  )

  get("/user_account", operation(userAccountGetOperation)) {
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

}
