/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.CatalogsFeed
import org.openapitools.server.model.CatalogsFeedsCreateRequest
import org.openapitools.server.model.CatalogsFeedsUpdateRequest
import org.openapitools.server.model.CatalogsItems
import org.openapitools.server.model.CatalogsItemsBatch
import org.openapitools.server.model.CatalogsItemsBatchRequest
import org.openapitools.server.model.CatalogsProductGroup
import org.openapitools.server.model.CatalogsProductGroupCreateRequest
import org.openapitools.server.model.CatalogsProductGroupUpdateRequest
import org.openapitools.server.model.Error
import org.openapitools.server.model.Paginated

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class CatalogsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "CatalogsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val catalogsProductGroupsCreateOperation = (apiOperation[Any]("catalogsProductGroupsCreate")
    summary "Create product group"
    parameters(bodyParam[CatalogsProductGroupCreateRequest]("catalogsProductGroupCreateRequest").description(""))
  )

  post("/catalogs/product_groups", operation(catalogsProductGroupsCreateOperation)) {
    //println("catalogsProductGroupCreateRequest: " + catalogsProductGroupCreateRequest)
  }

  

  val catalogsProductGroupsDeleteOperation = (apiOperation[Unit]("catalogsProductGroupsDelete")
    summary "Delete product group"
    parameters(pathParam[String]("productGroupId").description(""))
  )

  delete("/catalogs/product_groups/:product_group_id", operation(catalogsProductGroupsDeleteOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
  }

  

  val catalogsProductGroupsListOperation = (apiOperation[Paginated]("catalogsProductGroupsList")
    summary "Get product groups list"
    parameters(queryParam[String]("feedId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/catalogs/product_groups", operation(catalogsProductGroupsListOperation)) {
            val feedId = params.getAs[String]("feedId")

    //println("feedId: " + feedId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val catalogsProductGroupsUpdateOperation = (apiOperation[CatalogsProductGroup]("catalogsProductGroupsUpdate")
    summary "Update product group"
    parameters(pathParam[String]("productGroupId").description(""), bodyParam[CatalogsProductGroupUpdateRequest]("catalogsProductGroupUpdateRequest").description(""))
  )

  patch("/catalogs/product_groups/:product_group_id", operation(catalogsProductGroupsUpdateOperation)) {
    val productGroupId = params.getOrElse("productGroupId", halt(400))
    //println("productGroupId: " + productGroupId)
    //println("catalogsProductGroupUpdateRequest: " + catalogsProductGroupUpdateRequest)
  }

  

  val feedProcessingResultsListOperation = (apiOperation[Paginated]("feedProcessingResultsList")
    summary "List processing results for a given feed"
    parameters(pathParam[String]("feedId").description(""), queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/catalogs/feeds/:feed_id/processing_results", operation(feedProcessingResultsListOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val feedsCreateOperation = (apiOperation[CatalogsFeed]("feedsCreate")
    summary "Create feed"
    parameters(bodyParam[CatalogsFeedsCreateRequest]("catalogsFeedsCreateRequest").description(""))
  )

  post("/catalogs/feeds", operation(feedsCreateOperation)) {
    //println("catalogsFeedsCreateRequest: " + catalogsFeedsCreateRequest)
  }

  

  val feedsDeleteOperation = (apiOperation[Unit]("feedsDelete")
    summary "Delete feed"
    parameters(pathParam[String]("feedId").description(""))
  )

  delete("/catalogs/feeds/:feed_id", operation(feedsDeleteOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
  }

  

  val feedsGetOperation = (apiOperation[CatalogsFeed]("feedsGet")
    summary "Get feed"
    parameters(pathParam[String]("feedId").description(""))
  )

  get("/catalogs/feeds/:feed_id", operation(feedsGetOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
  }

  

  val feedsListOperation = (apiOperation[Paginated]("feedsList")
    summary "List feeds"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25))
  )

  get("/catalogs/feeds", operation(feedsListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val feedsUpdateOperation = (apiOperation[CatalogsFeed]("feedsUpdate")
    summary "Update feed"
    parameters(pathParam[String]("feedId").description(""), bodyParam[CatalogsFeedsUpdateRequest]("catalogsFeedsUpdateRequest").description(""))
  )

  patch("/catalogs/feeds/:feed_id", operation(feedsUpdateOperation)) {
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
    //println("catalogsFeedsUpdateRequest: " + catalogsFeedsUpdateRequest)
  }

  

  val itemsBatchGetOperation = (apiOperation[CatalogsItemsBatch]("itemsBatchGet")
    summary "Get catalogs items batch"
    parameters(pathParam[String]("batchId").description(""))
  )

  get("/catalogs/items/batch/:batch_id", operation(itemsBatchGetOperation)) {
    val batchId = params.getOrElse("batchId", halt(400))
    //println("batchId: " + batchId)
  }

  

  val itemsBatchPostOperation = (apiOperation[CatalogsItemsBatch]("itemsBatchPost")
    summary "Perform an operation on an item batch"
    parameters(bodyParam[CatalogsItemsBatchRequest]("catalogsItemsBatchRequest").description(""))
  )

  post("/catalogs/items/batch", operation(itemsBatchPostOperation)) {
    //println("catalogsItemsBatchRequest: " + catalogsItemsBatchRequest)
  }

  

  val itemsGetOperation = (apiOperation[CatalogsItems]("itemsGet")
    summary "Get catalogs items"
    parameters(queryParam[String]("country").description(""), queryParam[List[String]]("itemIds").description("").defaultValue(List.empty[String] ), queryParam[String]("language").description(""))
  )

  get("/catalogs/items", operation(itemsGetOperation)) {
            val country = params.getAs[String]("country")

    //println("country: " + country)
        val itemIdsString = params.getAs[String]("itemIds")
    val itemIds = if("multi" == "default" || "multi" == "csv") {
      itemIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("itemIds: " + itemIds)
            val language = params.getAs[String]("language")

    //println("language: " + language)
  }

}
