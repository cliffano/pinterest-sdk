/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AnalyticsMetricsResponse
import org.openapitools.server.model.Error
import java.time.LocalDate
import org.openapitools.server.model.Pin

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class PinsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "PinsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val pinsAnalyticsOperation = (apiOperation[Map[String, AnalyticsMetricsResponse]]("pinsAnalytics")
    summary "Get Pin analytics"
    parameters(pathParam[String]("pinId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("metricTypes").description("").defaultValue(List.empty[String] ), queryParam[String]("appTypes").description("").optional.defaultValue(ALL), queryParam[String]("splitField").description("").optional.defaultValue(NO_SPLIT), queryParam[String]("adAccountId").description("").optional)
  )

  get("/pins/:pin_id/analytics", operation(pinsAnalyticsOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val metricTypesString = params.getAs[String]("metricTypes")
    val metricTypes = if("csv" == "default" || "csv" == "csv") {
      metricTypesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("metricTypes: " + metricTypes)
            val appTypes = params.getAs[String]("appTypes")

    //println("appTypes: " + appTypes)
            val splitField = params.getAs[String]("splitField")

    //println("splitField: " + splitField)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

  

  val pinsCreateOperation = (apiOperation[Pin]("pinsCreate")
    summary "Create Pin"
    parameters(bodyParam[Pin]("pin").description(""))
  )

  post("/pins", operation(pinsCreateOperation)) {
    //println("pin: " + pin)
  }

  

  val pinsDeleteOperation = (apiOperation[Unit]("pinsDelete")
    summary "Delete Pin"
    parameters(pathParam[String]("pinId").description(""))
  )

  delete("/pins/:pin_id", operation(pinsDeleteOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
  }

  

  val pinsGetOperation = (apiOperation[Pin]("pinsGet")
    summary "Get Pin"
    parameters(pathParam[String]("pinId").description(""), queryParam[String]("adAccountId").description("").optional)
  )

  get("/pins/:pin_id", operation(pinsGetOperation)) {
    val pinId = params.getOrElse("pinId", halt(400))
    //println("pinId: " + pinId)
            val adAccountId = params.getAs[String]("adAccountId")

    //println("adAccountId: " + adAccountId)
  }

}
