/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AdsAnalyticsCreateAsyncRequest
import org.openapitools.server.model.AdsAnalyticsCreateAsyncResponse
import org.openapitools.server.model.AdsAnalyticsGetAsyncResponse
import org.openapitools.server.model.AnyType
import org.openapitools.server.model.Error
import org.openapitools.server.model.Granularity
import java.time.LocalDate
import org.openapitools.server.model.Paginated

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class AdAccountsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "AdAccountsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val adAccountAnalyticsOperation = (apiOperation[List[Map[String, Any]]]("adAccountAnalytics")
    summary "Get ad account analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/analytics", operation(adAccountAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

  

  val adAccountsListOperation = (apiOperation[Paginated]("adAccountsList")
    summary "List ad accounts"
    parameters(queryParam[String]("bookmark").description("").optional, queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[Boolean]("includeSharedAccounts").description("").optional.defaultValue(true))
  )

  get("/ad_accounts", operation(adAccountsListOperation)) {
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val includeSharedAccounts = params.getAs[Boolean]("includeSharedAccounts")

    //println("includeSharedAccounts: " + includeSharedAccounts)
  }

  

  val adGroupsAnalyticsOperation = (apiOperation[List[Map[String, Any]]]("adGroupsAnalytics")
    summary "Get ad group analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("adGroupIds").description("").defaultValue(List.empty[String] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/ad_groups/analytics", operation(adGroupsAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val adGroupIdsString = params.getAs[String]("adGroupIds")
    val adGroupIds = if("multi" == "default" || "multi" == "csv") {
      adGroupIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("adGroupIds: " + adGroupIds)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

  

  val adGroupsListOperation = (apiOperation[Paginated]("adGroupsList")
    summary "List ad groups"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[List[String]]("campaignIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("adGroupIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("entityStatuses").description("").optional.defaultValue(List.empty[String] ), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("order").description("").optional, queryParam[String]("bookmark").description("").optional, queryParam[Boolean]("translateInterestsToNames").description("").optional.defaultValue(false))
  )

  get("/ad_accounts/:ad_account_id/ad_groups", operation(adGroupsListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
        val adGroupIdsString = params.getAs[String]("adGroupIds")
    val adGroupIds = if("multi" == "default" || "multi" == "csv") {
      adGroupIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("adGroupIds: " + adGroupIds)
        val entityStatusesString = params.getAs[String]("entityStatuses")
    val entityStatuses = if("multi" == "default" || "multi" == "csv") {
      entityStatusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("entityStatuses: " + entityStatuses)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
            val translateInterestsToNames = params.getAs[Boolean]("translateInterestsToNames")

    //println("translateInterestsToNames: " + translateInterestsToNames)
  }

  

  val adsAnalyticsOperation = (apiOperation[List[Map[String, Any]]]("adsAnalytics")
    summary "Get ad analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("adIds").description("").defaultValue(List.empty[String] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/ads/analytics", operation(adsAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val adIdsString = params.getAs[String]("adIds")
    val adIds = if("multi" == "default" || "multi" == "csv") {
      adIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("adIds: " + adIds)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

  

  val adsListOperation = (apiOperation[Paginated]("adsList")
    summary "List ads"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[List[String]]("campaignIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("adGroupIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("adIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("entityStatuses").description("").optional.defaultValue(List.empty[String] ), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("order").description("").optional, queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/ads", operation(adsListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
        val adGroupIdsString = params.getAs[String]("adGroupIds")
    val adGroupIds = if("multi" == "default" || "multi" == "csv") {
      adGroupIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("adGroupIds: " + adGroupIds)
        val adIdsString = params.getAs[String]("adIds")
    val adIds = if("multi" == "default" || "multi" == "csv") {
      adIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("adIds: " + adIds)
        val entityStatusesString = params.getAs[String]("entityStatuses")
    val entityStatuses = if("multi" == "default" || "multi" == "csv") {
      entityStatusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("entityStatuses: " + entityStatuses)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val analyticsCreateReportOperation = (apiOperation[AdsAnalyticsCreateAsyncResponse]("analyticsCreateReport")
    summary "Create async request for an account analytics report"
    parameters(pathParam[String]("adAccountId").description(""), bodyParam[AdsAnalyticsCreateAsyncRequest]("adsAnalyticsCreateAsyncRequest").description(""))
  )

  post("/ad_accounts/:ad_account_id/reports", operation(analyticsCreateReportOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
    //println("adsAnalyticsCreateAsyncRequest: " + adsAnalyticsCreateAsyncRequest)
  }

  

  val analyticsGetReportOperation = (apiOperation[AdsAnalyticsGetAsyncResponse]("analyticsGetReport")
    summary "Get the account analytics report created by the async call"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[String]("token").description(""))
  )

  get("/ad_accounts/:ad_account_id/reports", operation(analyticsGetReportOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val token = params.getAs[String]("token")

    //println("token: " + token)
  }

  

  val campaignsAnalyticsOperation = (apiOperation[List[Map[String, Any]]]("campaignsAnalytics")
    summary "Get campaign analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("campaignIds").description("").defaultValue(List.empty[String] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/campaigns/analytics", operation(campaignsAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

  

  val campaignsListOperation = (apiOperation[Paginated]("campaignsList")
    summary "List campaigns"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[List[String]]("campaignIds").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("entityStatuses").description("").optional.defaultValue(List.empty[String] ), queryParam[Int]("pageSize").description("").optional.defaultValue(25), queryParam[String]("order").description("").optional, queryParam[String]("bookmark").description("").optional)
  )

  get("/ad_accounts/:ad_account_id/campaigns", operation(campaignsListOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
        val campaignIdsString = params.getAs[String]("campaignIds")
    val campaignIds = if("multi" == "default" || "multi" == "csv") {
      campaignIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("campaignIds: " + campaignIds)
        val entityStatusesString = params.getAs[String]("entityStatuses")
    val entityStatuses = if("multi" == "default" || "multi" == "csv") {
      entityStatusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("entityStatuses: " + entityStatuses)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val order = params.getAs[String]("order")

    //println("order: " + order)
            val bookmark = params.getAs[String]("bookmark")

    //println("bookmark: " + bookmark)
  }

  

  val productGroupsAnalyticsOperation = (apiOperation[List[Map[String, Any]]]("productGroupsAnalytics")
    summary "Get product group analytics"
    parameters(pathParam[String]("adAccountId").description(""), queryParam[LocalDate]("startDate").description(""), queryParam[LocalDate]("endDate").description(""), queryParam[List[String]]("productGroupIds").description("").defaultValue(List.empty[String] ), queryParam[List[String]]("columns").description("").defaultValue(List.empty[String] ), queryParam[Granularity]("granularity").description(""), queryParam[Int]("clickWindowDays").description("").optional.defaultValue(30), queryParam[Int]("engagementWindowDays").description("").optional.defaultValue(30), queryParam[Int]("viewWindowDays").description("").optional.defaultValue(1), queryParam[String]("conversionReportTime").description("").optional.defaultValue(TIME_OF_AD_ACTION))
  )

  get("/ad_accounts/:ad_account_id/product_groups/analytics", operation(productGroupsAnalyticsOperation)) {
    val adAccountId = params.getOrElse("adAccountId", halt(400))
    //println("adAccountId: " + adAccountId)
            val startDate = params.getAs[LocalDate]("startDate")

    //println("startDate: " + startDate)
            val endDate = params.getAs[LocalDate]("endDate")

    //println("endDate: " + endDate)
        val productGroupIdsString = params.getAs[String]("productGroupIds")
    val productGroupIds = if("multi" == "default" || "multi" == "csv") {
      productGroupIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("productGroupIds: " + productGroupIds)
        val columnsString = params.getAs[String]("columns")
    val columns = if("csv" == "default" || "csv" == "csv") {
      columnsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("columns: " + columns)
            val granularity = params.getAs[Granularity]("granularity")

    //println("granularity: " + granularity)
            val clickWindowDays = params.getAs[Int]("clickWindowDays")

    //println("clickWindowDays: " + clickWindowDays)
            val engagementWindowDays = params.getAs[Int]("engagementWindowDays")

    //println("engagementWindowDays: " + engagementWindowDays)
            val viewWindowDays = params.getAs[Int]("viewWindowDays")

    //println("viewWindowDays: " + viewWindowDays)
            val conversionReportTime = params.getAs[String]("conversionReportTime")

    //println("conversionReportTime: " + conversionReportTime)
  }

}
