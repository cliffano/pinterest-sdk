/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIUserAccountApiHandler.h"
#include "OAIUserAccountApiRequest.h"

namespace OpenAPI {

OAIUserAccountApiHandler::OAIUserAccountApiHandler(){

}

OAIUserAccountApiHandler::~OAIUserAccountApiHandler(){

}

void OAIUserAccountApiHandler::userAccount_analytics(QDate start_date, QDate end_date, QString from_claimed_content, QString pin_format, QString app_types, QList<QString> metric_types, QString split_field, QString ad_account_id) {
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(from_claimed_content);
    Q_UNUSED(pin_format);
    Q_UNUSED(app_types);
    Q_UNUSED(metric_types);
    Q_UNUSED(split_field);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QMap<QString, OAIAnalyticsMetricsResponse> res;
        reqObj->userAccount_analyticsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_analytics_topPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id) {
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(sort_by);
    Q_UNUSED(from_claimed_content);
    Q_UNUSED(pin_format);
    Q_UNUSED(app_types);
    Q_UNUSED(metric_types);
    Q_UNUSED(num_of_pins);
    Q_UNUSED(created_in_last_n_days);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAITopPinsAnalyticsResponse res;
        reqObj->userAccount_analytics_topPinsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_analytics_topVideoPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id) {
    Q_UNUSED(start_date);
    Q_UNUSED(end_date);
    Q_UNUSED(sort_by);
    Q_UNUSED(from_claimed_content);
    Q_UNUSED(pin_format);
    Q_UNUSED(app_types);
    Q_UNUSED(metric_types);
    Q_UNUSED(num_of_pins);
    Q_UNUSED(created_in_last_n_days);
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAITopVideoPinsAnalyticsResponse res;
        reqObj->userAccount_analytics_topVideoPinsResponse(res);
    }
}
void OAIUserAccountApiHandler::userAccount_get(QString ad_account_id) {
    Q_UNUSED(ad_account_id);
    auto reqObj = qobject_cast<OAIUserAccountApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIAccount res;
        reqObj->userAccount_getResponse(res);
    }
}


}
