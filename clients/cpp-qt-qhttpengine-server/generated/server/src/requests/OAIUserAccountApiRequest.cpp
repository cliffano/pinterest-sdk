/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIUserAccountApiRequest.h"

namespace OpenAPI {

OAIUserAccountApiRequest::OAIUserAccountApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIUserAccountApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIUserAccountApiRequest::~OAIUserAccountApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIUserAccountApiRequest::~OAIUserAccountApiRequest()";
}

QMap<QString, QString>
OAIUserAccountApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIUserAccountApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIUserAccountApiRequest::getRawSocket(){
    return socket;
}


void OAIUserAccountApiRequest::userAccount_analyticsRequest(){
    qDebug() << "/v5/user_account/analytics";
    connect(this, &OAIUserAccountApiRequest::userAccount_analytics, handler.data(), &OAIUserAccountApiHandler::userAccount_analytics);

    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    QString from_claimed_content;
    if(socket->queryString().keys().contains("from_claimed_content")){
        fromStringValue(socket->queryString().value("from_claimed_content"), from_claimed_content);
    }
    
    QString pin_format;
    if(socket->queryString().keys().contains("pin_format")){
        fromStringValue(socket->queryString().value("pin_format"), pin_format);
    }
    
    QString app_types;
    if(socket->queryString().keys().contains("app_types")){
        fromStringValue(socket->queryString().value("app_types"), app_types);
    }
    
    QList<QString> metric_types;
    if(socket->queryString().keys().contains("metric_types")){
        fromStringValue(socket->queryString().values("metric_types"), metric_types);
    }
    
    QString split_field;
    if(socket->queryString().keys().contains("split_field")){
        fromStringValue(socket->queryString().value("split_field"), split_field);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    


    emit userAccount_analytics(start_date, end_date, from_claimed_content, pin_format, app_types, metric_types, split_field, ad_account_id);
}


void OAIUserAccountApiRequest::userAccount_getRequest(){
    qDebug() << "/v5/user_account";
    connect(this, &OAIUserAccountApiRequest::userAccount_get, handler.data(), &OAIUserAccountApiHandler::userAccount_get);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    


    emit userAccount_get(ad_account_id);
}



void OAIUserAccountApiRequest::userAccount_analyticsResponse(const QMap<QString, OAIAnalyticsMetricsResponse>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserAccountApiRequest::userAccount_getResponse(const OAIAccount& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIUserAccountApiRequest::userAccount_analyticsError(const QMap<QString, OAIAnalyticsMetricsResponse>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserAccountApiRequest::userAccount_getError(const OAIAccount& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIUserAccountApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUserAccountApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
