/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserAccountApiRequest_H
#define OAI_OAIUserAccountApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAccount.h"
#include "OAIAnalyticsMetricsResponse.h"
#include "OAIError.h"
#include "OAITopPinsAnalyticsResponse.h"
#include "OAITopVideoPinsAnalyticsResponse.h"
#include <QList>
#include <QMap>
#include <QString>
#include "OAIUserAccountApiHandler.h"

namespace OpenAPI {

class OAIUserAccountApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIUserAccountApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIUserAccountApiHandler> handler);
    virtual ~OAIUserAccountApiRequest();

    void userAccount_analyticsRequest();
    void userAccount_analytics_topPinsRequest();
    void userAccount_analytics_topVideoPinsRequest();
    void userAccount_getRequest();
    

    void userAccount_analyticsResponse(const QMap<QString, OAIAnalyticsMetricsResponse>& res);
    void userAccount_analytics_topPinsResponse(const OAITopPinsAnalyticsResponse& res);
    void userAccount_analytics_topVideoPinsResponse(const OAITopVideoPinsAnalyticsResponse& res);
    void userAccount_getResponse(const OAIAccount& res);
    

    void userAccount_analyticsError(const QMap<QString, OAIAnalyticsMetricsResponse>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_analytics_topPinsError(const OAITopPinsAnalyticsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_analytics_topVideoPinsError(const OAITopVideoPinsAnalyticsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void userAccount_getError(const OAIAccount& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void userAccount_analytics(QDate start_date, QDate end_date, QString from_claimed_content, QString pin_format, QString app_types, QList<QString> metric_types, QString split_field, QString ad_account_id);
    void userAccount_analytics_topPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id);
    void userAccount_analytics_topVideoPins(QDate start_date, QDate end_date, QString sort_by, QString from_claimed_content, QString pin_format, QString app_types, QList<QString> metric_types, qint32 num_of_pins, qint32 created_in_last_n_days, QString ad_account_id);
    void userAccount_get(QString ad_account_id);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIUserAccountApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIUserAccountApiRequest_H
