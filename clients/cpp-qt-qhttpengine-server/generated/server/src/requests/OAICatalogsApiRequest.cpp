/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICatalogsApiRequest.h"

namespace OpenAPI {

OAICatalogsApiRequest::OAICatalogsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICatalogsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAICatalogsApiRequest::~OAICatalogsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICatalogsApiRequest::~OAICatalogsApiRequest()";
}

QMap<QString, QString>
OAICatalogsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICatalogsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICatalogsApiRequest::getRawSocket(){
    return socket;
}


void OAICatalogsApiRequest::catalogsProductGroupPins_listRequest(const QString& product_group_idstr){
    qDebug() << "/v5/catalogs/product_groups/{product_group_id}/products";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroupPins_list, handler.data(), &OAICatalogsApiHandler::catalogsProductGroupPins_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString product_group_id;
    fromStringValue(product_group_idstr, product_group_id);
    

    emit catalogsProductGroupPins_list(product_group_id, bookmark, page_size, ad_account_id);
}


void OAICatalogsApiRequest::catalogsProductGroups_createRequest(){
    qDebug() << "/v5/catalogs/product_groups";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroups_create, handler.data(), &OAICatalogsApiHandler::catalogsProductGroups_create);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICatalogsProductGroupCreateRequest oai_catalogs_product_group_create_request;
    ::OpenAPI::fromJsonValue(oai_catalogs_product_group_create_request, obj);
    

    emit catalogsProductGroups_create(oai_catalogs_product_group_create_request, ad_account_id);
}


void OAICatalogsApiRequest::catalogsProductGroups_deleteRequest(const QString& product_group_idstr){
    qDebug() << "/v5/catalogs/product_groups/{product_group_id}";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroups_delete, handler.data(), &OAICatalogsApiHandler::catalogsProductGroups_delete);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString product_group_id;
    fromStringValue(product_group_idstr, product_group_id);
    

    emit catalogsProductGroups_delete(product_group_id, ad_account_id);
}


void OAICatalogsApiRequest::catalogsProductGroups_getRequest(const QString& product_group_idstr){
    qDebug() << "/v5/catalogs/product_groups/{product_group_id}";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroups_get, handler.data(), &OAICatalogsApiHandler::catalogsProductGroups_get);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString product_group_id;
    fromStringValue(product_group_idstr, product_group_id);
    

    emit catalogsProductGroups_get(product_group_id, ad_account_id);
}


void OAICatalogsApiRequest::catalogsProductGroups_listRequest(){
    qDebug() << "/v5/catalogs/product_groups";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroups_list, handler.data(), &OAICatalogsApiHandler::catalogsProductGroups_list);

    
    QString feed_id;
    if(socket->queryString().keys().contains("feed_id")){
        fromStringValue(socket->queryString().value("feed_id"), feed_id);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    


    emit catalogsProductGroups_list(feed_id, bookmark, page_size, ad_account_id);
}


void OAICatalogsApiRequest::catalogsProductGroups_productCountsGetRequest(const QString& product_group_idstr){
    qDebug() << "/v5/catalogs/product_groups/{product_group_id}/product_counts";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroups_productCountsGet, handler.data(), &OAICatalogsApiHandler::catalogsProductGroups_productCountsGet);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString product_group_id;
    fromStringValue(product_group_idstr, product_group_id);
    

    emit catalogsProductGroups_productCountsGet(product_group_id, ad_account_id);
}


void OAICatalogsApiRequest::catalogsProductGroups_updateRequest(const QString& product_group_idstr){
    qDebug() << "/v5/catalogs/product_groups/{product_group_id}";
    connect(this, &OAICatalogsApiRequest::catalogsProductGroups_update, handler.data(), &OAICatalogsApiHandler::catalogsProductGroups_update);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString product_group_id;
    fromStringValue(product_group_idstr, product_group_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICatalogsProductGroupUpdateRequest oai_catalogs_product_group_update_request;
    ::OpenAPI::fromJsonValue(oai_catalogs_product_group_update_request, obj);
    

    emit catalogsProductGroups_update(product_group_id, oai_catalogs_product_group_update_request, ad_account_id);
}


void OAICatalogsApiRequest::feedProcessingResults_listRequest(const QString& feed_idstr){
    qDebug() << "/v5/catalogs/feeds/{feed_id}/processing_results";
    connect(this, &OAICatalogsApiRequest::feedProcessingResults_list, handler.data(), &OAICatalogsApiHandler::feedProcessingResults_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    emit feedProcessingResults_list(feed_id, bookmark, page_size, ad_account_id);
}


void OAICatalogsApiRequest::feeds_createRequest(){
    qDebug() << "/v5/catalogs/feeds";
    connect(this, &OAICatalogsApiRequest::feeds_create, handler.data(), &OAICatalogsApiHandler::feeds_create);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICatalogsFeedsCreateRequest oai_catalogs_feeds_create_request;
    ::OpenAPI::fromJsonValue(oai_catalogs_feeds_create_request, obj);
    

    emit feeds_create(oai_catalogs_feeds_create_request, ad_account_id);
}


void OAICatalogsApiRequest::feeds_deleteRequest(const QString& feed_idstr){
    qDebug() << "/v5/catalogs/feeds/{feed_id}";
    connect(this, &OAICatalogsApiRequest::feeds_delete, handler.data(), &OAICatalogsApiHandler::feeds_delete);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    emit feeds_delete(feed_id, ad_account_id);
}


void OAICatalogsApiRequest::feeds_getRequest(const QString& feed_idstr){
    qDebug() << "/v5/catalogs/feeds/{feed_id}";
    connect(this, &OAICatalogsApiRequest::feeds_get, handler.data(), &OAICatalogsApiHandler::feeds_get);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString feed_id;
    fromStringValue(feed_idstr, feed_id);
    

    emit feeds_get(feed_id, ad_account_id);
}


void OAICatalogsApiRequest::feeds_listRequest(){
    qDebug() << "/v5/catalogs/feeds";
    connect(this, &OAICatalogsApiRequest::feeds_list, handler.data(), &OAICatalogsApiHandler::feeds_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    


    emit feeds_list(bookmark, page_size, ad_account_id);
}


void OAICatalogsApiRequest::feeds_updateRequest(const QString& feed_idstr){
    qDebug() << "/v5/catalogs/feeds/{feed_id}";
    connect(this, &OAICatalogsApiRequest::feeds_update, handler.data(), &OAICatalogsApiHandler::feeds_update);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString feed_id;
    fromStringValue(feed_idstr, feed_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICatalogsFeedsUpdateRequest oai_catalogs_feeds_update_request;
    ::OpenAPI::fromJsonValue(oai_catalogs_feeds_update_request, obj);
    

    emit feeds_update(feed_id, oai_catalogs_feeds_update_request, ad_account_id);
}


void OAICatalogsApiRequest::itemsBatch_getRequest(const QString& batch_idstr){
    qDebug() << "/v5/catalogs/items/batch/{batch_id}";
    connect(this, &OAICatalogsApiRequest::itemsBatch_get, handler.data(), &OAICatalogsApiHandler::itemsBatch_get);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString batch_id;
    fromStringValue(batch_idstr, batch_id);
    

    emit itemsBatch_get(batch_id, ad_account_id);
}


void OAICatalogsApiRequest::itemsBatch_postRequest(){
    qDebug() << "/v5/catalogs/items/batch";
    connect(this, &OAICatalogsApiRequest::itemsBatch_post, handler.data(), &OAICatalogsApiHandler::itemsBatch_post);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICatalogsItemsBatchRequest oai_catalogs_items_batch_request;
    ::OpenAPI::fromJsonValue(oai_catalogs_items_batch_request, obj);
    

    emit itemsBatch_post(oai_catalogs_items_batch_request, ad_account_id);
}


void OAICatalogsApiRequest::itemsIssues_listRequest(const QString& processing_result_idstr){
    qDebug() << "/v5/catalogs/processing_results/{processing_result_id}/item_issues";
    connect(this, &OAICatalogsApiRequest::itemsIssues_list, handler.data(), &OAICatalogsApiHandler::itemsIssues_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QList<qint32> item_numbers;
    if(socket->queryString().keys().contains("item_numbers")){
        fromStringValue(socket->queryString().values("item_numbers"), item_numbers);
    }
    
    OAICatalogsItemValidationIssue item_validation_issue;
    if(socket->queryString().keys().contains("item_validation_issue")){
        fromStringValue(socket->queryString().value("item_validation_issue"), item_validation_issue);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString processing_result_id;
    fromStringValue(processing_result_idstr, processing_result_id);
    

    emit itemsIssues_list(processing_result_id, bookmark, page_size, item_numbers, item_validation_issue, ad_account_id);
}


void OAICatalogsApiRequest::items_getRequest(){
    qDebug() << "/v5/catalogs/items";
    connect(this, &OAICatalogsApiRequest::items_get, handler.data(), &OAICatalogsApiHandler::items_get);

    
    QString country;
    if(socket->queryString().keys().contains("country")){
        fromStringValue(socket->queryString().value("country"), country);
    }
    
    QList<QString> item_ids;
    if(socket->queryString().keys().contains("item_ids")){
        fromStringValue(socket->queryString().values("item_ids"), item_ids);
    }
    
    QString language;
    if(socket->queryString().keys().contains("language")){
        fromStringValue(socket->queryString().value("language"), language);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    


    emit items_get(country, item_ids, language, ad_account_id);
}


void OAICatalogsApiRequest::productsByProductGroupFilter_listRequest(){
    qDebug() << "/v5/catalogs/products/get_by_product_group_filters";
    connect(this, &OAICatalogsApiRequest::productsByProductGroupFilter_list, handler.data(), &OAICatalogsApiHandler::productsByProductGroupFilter_list);

    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAICatalogsListProductsByFilterRequest oai_catalogs_list_products_by_filter_request;
    ::OpenAPI::fromJsonValue(oai_catalogs_list_products_by_filter_request, obj);
    

    emit productsByProductGroupFilter_list(oai_catalogs_list_products_by_filter_request, bookmark, page_size, ad_account_id);
}



void OAICatalogsApiRequest::catalogsProductGroupPins_listResponse(const OAIProducts_by_product_group_filter_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_createResponse(const OAICatalogsProductGroup& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_deleteResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_getResponse(const OAICatalogsProductGroup& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_listResponse(const OAICatalogs_product_groups_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_productCountsGetResponse(const OAICatalogsProductGroupProductCounts& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_updateResponse(const OAICatalogsProductGroup& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feedProcessingResults_listResponse(const OAIFeed_processing_results_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_createResponse(const OAICatalogsFeed& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_deleteResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_getResponse(const OAICatalogsFeed& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_listResponse(const OAIFeeds_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_updateResponse(const OAICatalogsFeed& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::itemsBatch_getResponse(const OAICatalogsItemsBatch& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::itemsBatch_postResponse(const OAICatalogsItemsBatch& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::itemsIssues_listResponse(const OAIItems_issues_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::items_getResponse(const OAICatalogsItems& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::productsByProductGroupFilter_listResponse(const OAIProducts_by_product_group_filter_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICatalogsApiRequest::catalogsProductGroupPins_listError(const OAIProducts_by_product_group_filter_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_createError(const OAICatalogsProductGroup& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_deleteError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_getError(const OAICatalogsProductGroup& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_listError(const OAICatalogs_product_groups_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_productCountsGetError(const OAICatalogsProductGroupProductCounts& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::catalogsProductGroups_updateError(const OAICatalogsProductGroup& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feedProcessingResults_listError(const OAIFeed_processing_results_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_createError(const OAICatalogsFeed& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_deleteError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_getError(const OAICatalogsFeed& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_listError(const OAIFeeds_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::feeds_updateError(const OAICatalogsFeed& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::itemsBatch_getError(const OAICatalogsItemsBatch& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::itemsBatch_postError(const OAICatalogsItemsBatch& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::itemsIssues_listError(const OAIItems_issues_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::items_getError(const OAICatalogsItems& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::productsByProductGroupFilter_listError(const OAIProducts_by_product_group_filter_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICatalogsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICatalogsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
