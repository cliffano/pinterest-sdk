/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIPinsApiRequest.h"

namespace OpenAPI {

OAIPinsApiRequest::OAIPinsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIPinsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIPinsApiRequest::~OAIPinsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIPinsApiRequest::~OAIPinsApiRequest()";
}

QMap<QString, QString>
OAIPinsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIPinsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIPinsApiRequest::getRawSocket(){
    return socket;
}


void OAIPinsApiRequest::pins_analyticsRequest(const QString& pin_idstr){
    qDebug() << "/v5/pins/{pin_id}/analytics";
    connect(this, &OAIPinsApiRequest::pins_analytics, handler.data(), &OAIPinsApiHandler::pins_analytics);

    
    QDate start_date;
    if(socket->queryString().keys().contains("start_date")){
        fromStringValue(socket->queryString().value("start_date"), start_date);
    }
    
    QDate end_date;
    if(socket->queryString().keys().contains("end_date")){
        fromStringValue(socket->queryString().value("end_date"), end_date);
    }
    
    QString app_types;
    if(socket->queryString().keys().contains("app_types")){
        fromStringValue(socket->queryString().value("app_types"), app_types);
    }
    
    QList<QString> metric_types;
    if(socket->queryString().keys().contains("metric_types")){
        fromStringValue(socket->queryString().values("metric_types"), metric_types);
    }
    
    QString split_field;
    if(socket->queryString().keys().contains("split_field")){
        fromStringValue(socket->queryString().value("split_field"), split_field);
    }
    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString pin_id;
    fromStringValue(pin_idstr, pin_id);
    

    Q_EMIT pins_analytics(pin_id, start_date, end_date, metric_types, app_types, split_field, ad_account_id);
}


void OAIPinsApiRequest::pins_createRequest(){
    qDebug() << "/v5/pins";
    connect(this, &OAIPinsApiRequest::pins_create, handler.data(), &OAIPinsApiHandler::pins_create);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIPin oai_pin;
    ::OpenAPI::fromJsonValue(oai_pin, obj);
    

    Q_EMIT pins_create(oai_pin);
}


void OAIPinsApiRequest::pins_deleteRequest(const QString& pin_idstr){
    qDebug() << "/v5/pins/{pin_id}";
    connect(this, &OAIPinsApiRequest::pins_delete, handler.data(), &OAIPinsApiHandler::pins_delete);

    
    QString pin_id;
    fromStringValue(pin_idstr, pin_id);
    

    Q_EMIT pins_delete(pin_id);
}


void OAIPinsApiRequest::pins_getRequest(const QString& pin_idstr){
    qDebug() << "/v5/pins/{pin_id}";
    connect(this, &OAIPinsApiRequest::pins_get, handler.data(), &OAIPinsApiHandler::pins_get);

    
    QString ad_account_id;
    if(socket->queryString().keys().contains("ad_account_id")){
        fromStringValue(socket->queryString().value("ad_account_id"), ad_account_id);
    }
    
    QString pin_id;
    fromStringValue(pin_idstr, pin_id);
    

    Q_EMIT pins_get(pin_id, ad_account_id);
}


void OAIPinsApiRequest::pins_saveRequest(const QString& pin_idstr){
    qDebug() << "/v5/pins/{pin_id}/save";
    connect(this, &OAIPinsApiRequest::pins_save, handler.data(), &OAIPinsApiHandler::pins_save);

    
    QString pin_id;
    fromStringValue(pin_idstr, pin_id);
     
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIPins_save_request oai_pins_save_request;
    ::OpenAPI::fromJsonValue(oai_pins_save_request, obj);
    

    Q_EMIT pins_save(pin_id, oai_pins_save_request);
}



void OAIPinsApiRequest::pins_analyticsResponse(const QMap<QString, OAIAnalyticsMetricsResponse>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_createResponse(const OAIPin& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_deleteResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_getResponse(const OAIPin& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_saveResponse(const OAIPin& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIPinsApiRequest::pins_analyticsError(const QMap<QString, OAIAnalyticsMetricsResponse>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_createError(const OAIPin& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_deleteError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_getError(const OAIPin& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::pins_saveError(const OAIPin& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIPinsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIPinsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
