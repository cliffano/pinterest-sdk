/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICampaignsApiRequest.h"

namespace OpenAPI {

OAICampaignsApiRequest::OAICampaignsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAICampaignsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAICampaignsApiRequest::~OAICampaignsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICampaignsApiRequest::~OAICampaignsApiRequest()";
}

QMap<QString, QString>
OAICampaignsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICampaignsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICampaignsApiRequest::getRawSocket(){
    return socket;
}


void OAICampaignsApiRequest::campaigns_createRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/campaigns";
    connect(this, &OAICampaignsApiRequest::campaigns_create, handler.data(), &OAICampaignsApiHandler::campaigns_create);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    QJsonDocument doc;
    QList<OAICampaignCreateRequest> oai_campaign_create_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAICampaignCreateRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_campaign_create_request.append(o);
        }
    }
    

    emit campaigns_create(ad_account_id, oai_campaign_create_request);
}


void OAICampaignsApiRequest::campaigns_getRequest(const QString& ad_account_idstr, const QString& campaign_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/campaigns/{campaign_id}";
    connect(this, &OAICampaignsApiRequest::campaigns_get, handler.data(), &OAICampaignsApiHandler::campaigns_get);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
        QString campaign_id;
    fromStringValue(campaign_idstr, campaign_id);
    

    emit campaigns_get(ad_account_id, campaign_id);
}


void OAICampaignsApiRequest::campaigns_listRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/campaigns";
    connect(this, &OAICampaignsApiRequest::campaigns_list, handler.data(), &OAICampaignsApiHandler::campaigns_list);

    
    QList<QString> campaign_ids;
    if(socket->queryString().keys().contains("campaign_ids")){
        fromStringValue(socket->queryString().values("campaign_ids"), campaign_ids);
    }
    
    QList<QString> entity_statuses;
    if(socket->queryString().keys().contains("entity_statuses")){
        fromStringValue(socket->queryString().values("entity_statuses"), entity_statuses);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    QString order;
    if(socket->queryString().keys().contains("order")){
        fromStringValue(socket->queryString().value("order"), order);
    }
    
    QString bookmark;
    if(socket->queryString().keys().contains("bookmark")){
        fromStringValue(socket->queryString().value("bookmark"), bookmark);
    }
    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
    

    emit campaigns_list(ad_account_id, campaign_ids, entity_statuses, page_size, order, bookmark);
}


void OAICampaignsApiRequest::campaigns_updateRequest(const QString& ad_account_idstr){
    qDebug() << "/v5/ad_accounts/{ad_account_id}/campaigns";
    connect(this, &OAICampaignsApiRequest::campaigns_update, handler.data(), &OAICampaignsApiHandler::campaigns_update);

    
    QString ad_account_id;
    fromStringValue(ad_account_idstr, ad_account_id);
     
    QJsonDocument doc;
    QList<OAICampaignUpdateRequest> oai_campaign_update_request;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAICampaignUpdateRequest o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_campaign_update_request.append(o);
        }
    }
    

    emit campaigns_update(ad_account_id, oai_campaign_update_request);
}



void OAICampaignsApiRequest::campaigns_createResponse(const OAICampaignCreateResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::campaigns_getResponse(const OAICampaignResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::campaigns_listResponse(const OAICampaigns_list_200_response& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::campaigns_updateResponse(const OAICampaignUpdateResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICampaignsApiRequest::campaigns_createError(const OAICampaignCreateResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::campaigns_getError(const OAICampaignResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::campaigns_listError(const OAICampaigns_list_200_response& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::campaigns_updateError(const OAICampaignUpdateResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICampaignsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICampaignsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
