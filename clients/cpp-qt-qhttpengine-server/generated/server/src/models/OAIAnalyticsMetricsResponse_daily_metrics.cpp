/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsMetricsResponse_daily_metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsMetricsResponse_daily_metrics::OAIAnalyticsMetricsResponse_daily_metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsMetricsResponse_daily_metrics::OAIAnalyticsMetricsResponse_daily_metrics() {
    this->initializeModel();
}

OAIAnalyticsMetricsResponse_daily_metrics::~OAIAnalyticsMetricsResponse_daily_metrics() {}

void OAIAnalyticsMetricsResponse_daily_metrics::initializeModel() {

    m_data_status_isSet = false;
    m_data_status_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIAnalyticsMetricsResponse_daily_metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyticsMetricsResponse_daily_metrics::fromJsonObject(QJsonObject json) {

    m_data_status_isValid = ::OpenAPI::fromJsonValue(data_status, json[QString("data_status")]);
    m_data_status_isSet = !json[QString("data_status")].isNull() && m_data_status_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIAnalyticsMetricsResponse_daily_metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyticsMetricsResponse_daily_metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_data_status_isSet) {
        obj.insert(QString("data_status"), ::OpenAPI::toJsonValue(data_status));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(date));
    }
    if (metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(metrics));
    }
    return obj;
}

QString OAIAnalyticsMetricsResponse_daily_metrics::getDataStatus() const {
    return data_status;
}
void OAIAnalyticsMetricsResponse_daily_metrics::setDataStatus(const QString &data_status) {
    this->data_status = data_status;
    this->m_data_status_isSet = true;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::is_data_status_Set() const{
    return m_data_status_isSet;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::is_data_status_Valid() const{
    return m_data_status_isValid;
}

QString OAIAnalyticsMetricsResponse_daily_metrics::getDate() const {
    return date;
}
void OAIAnalyticsMetricsResponse_daily_metrics::setDate(const QString &date) {
    this->date = date;
    this->m_date_isSet = true;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::is_date_Valid() const{
    return m_date_isValid;
}

QMap<QString, double> OAIAnalyticsMetricsResponse_daily_metrics::getMetrics() const {
    return metrics;
}
void OAIAnalyticsMetricsResponse_daily_metrics::setMetrics(const QMap<QString, double> &metrics) {
    this->metrics = metrics;
    this->m_metrics_isSet = true;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyticsMetricsResponse_daily_metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
