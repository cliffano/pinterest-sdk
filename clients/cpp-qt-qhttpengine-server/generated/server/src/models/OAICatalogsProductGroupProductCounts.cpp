/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogsProductGroupProductCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogsProductGroupProductCounts::OAICatalogsProductGroupProductCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogsProductGroupProductCounts::OAICatalogsProductGroupProductCounts() {
    this->initializeModel();
}

OAICatalogsProductGroupProductCounts::~OAICatalogsProductGroupProductCounts() {}

void OAICatalogsProductGroupProductCounts::initializeModel() {

    m_in_stock_isSet = false;
    m_in_stock_isValid = false;

    m_out_of_stock_isSet = false;
    m_out_of_stock_isValid = false;

    m_preorder_isSet = false;
    m_preorder_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAICatalogsProductGroupProductCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogsProductGroupProductCounts::fromJsonObject(QJsonObject json) {

    m_in_stock_isValid = ::OpenAPI::fromJsonValue(in_stock, json[QString("in_stock")]);
    m_in_stock_isSet = !json[QString("in_stock")].isNull() && m_in_stock_isValid;

    m_out_of_stock_isValid = ::OpenAPI::fromJsonValue(out_of_stock, json[QString("out_of_stock")]);
    m_out_of_stock_isSet = !json[QString("out_of_stock")].isNull() && m_out_of_stock_isValid;

    m_preorder_isValid = ::OpenAPI::fromJsonValue(preorder, json[QString("preorder")]);
    m_preorder_isSet = !json[QString("preorder")].isNull() && m_preorder_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAICatalogsProductGroupProductCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogsProductGroupProductCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_in_stock_isSet) {
        obj.insert(QString("in_stock"), ::OpenAPI::toJsonValue(in_stock));
    }
    if (m_out_of_stock_isSet) {
        obj.insert(QString("out_of_stock"), ::OpenAPI::toJsonValue(out_of_stock));
    }
    if (m_preorder_isSet) {
        obj.insert(QString("preorder"), ::OpenAPI::toJsonValue(preorder));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(total));
    }
    return obj;
}

double OAICatalogsProductGroupProductCounts::getInStock() const {
    return in_stock;
}
void OAICatalogsProductGroupProductCounts::setInStock(const double &in_stock) {
    this->in_stock = in_stock;
    this->m_in_stock_isSet = true;
}

bool OAICatalogsProductGroupProductCounts::is_in_stock_Set() const{
    return m_in_stock_isSet;
}

bool OAICatalogsProductGroupProductCounts::is_in_stock_Valid() const{
    return m_in_stock_isValid;
}

double OAICatalogsProductGroupProductCounts::getOutOfStock() const {
    return out_of_stock;
}
void OAICatalogsProductGroupProductCounts::setOutOfStock(const double &out_of_stock) {
    this->out_of_stock = out_of_stock;
    this->m_out_of_stock_isSet = true;
}

bool OAICatalogsProductGroupProductCounts::is_out_of_stock_Set() const{
    return m_out_of_stock_isSet;
}

bool OAICatalogsProductGroupProductCounts::is_out_of_stock_Valid() const{
    return m_out_of_stock_isValid;
}

double OAICatalogsProductGroupProductCounts::getPreorder() const {
    return preorder;
}
void OAICatalogsProductGroupProductCounts::setPreorder(const double &preorder) {
    this->preorder = preorder;
    this->m_preorder_isSet = true;
}

bool OAICatalogsProductGroupProductCounts::is_preorder_Set() const{
    return m_preorder_isSet;
}

bool OAICatalogsProductGroupProductCounts::is_preorder_Valid() const{
    return m_preorder_isValid;
}

double OAICatalogsProductGroupProductCounts::getTotal() const {
    return total;
}
void OAICatalogsProductGroupProductCounts::setTotal(const double &total) {
    this->total = total;
    this->m_total_isSet = true;
}

bool OAICatalogsProductGroupProductCounts::is_total_Set() const{
    return m_total_isSet;
}

bool OAICatalogsProductGroupProductCounts::is_total_Valid() const{
    return m_total_isValid;
}

bool OAICatalogsProductGroupProductCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preorder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogsProductGroupProductCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_in_stock_isValid && m_out_of_stock_isValid && m_preorder_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
