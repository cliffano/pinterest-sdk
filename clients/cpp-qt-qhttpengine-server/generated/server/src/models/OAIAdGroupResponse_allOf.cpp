/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdGroupResponse_allOf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdGroupResponse_allOf::OAIAdGroupResponse_allOf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdGroupResponse_allOf::OAIAdGroupResponse_allOf() {
    this->initializeModel();
}

OAIAdGroupResponse_allOf::~OAIAdGroupResponse_allOf() {}

void OAIAdGroupResponse_allOf::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_conversion_learning_mode_type_isSet = false;
    m_conversion_learning_mode_type_isValid = false;

    m_summary_status_isSet = false;
    m_summary_status_isValid = false;

    m_feed_profile_id_isSet = false;
    m_feed_profile_id_isValid = false;

    m_dca_assets_isSet = false;
    m_dca_assets_isValid = false;
}

void OAIAdGroupResponse_allOf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdGroupResponse_allOf::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_conversion_learning_mode_type_isValid = ::OpenAPI::fromJsonValue(conversion_learning_mode_type, json[QString("conversion_learning_mode_type")]);
    m_conversion_learning_mode_type_isSet = !json[QString("conversion_learning_mode_type")].isNull() && m_conversion_learning_mode_type_isValid;

    m_summary_status_isValid = ::OpenAPI::fromJsonValue(summary_status, json[QString("summary_status")]);
    m_summary_status_isSet = !json[QString("summary_status")].isNull() && m_summary_status_isValid;

    m_feed_profile_id_isValid = ::OpenAPI::fromJsonValue(feed_profile_id, json[QString("feed_profile_id")]);
    m_feed_profile_id_isSet = !json[QString("feed_profile_id")].isNull() && m_feed_profile_id_isValid;

    m_dca_assets_isValid = ::OpenAPI::fromJsonValue(dca_assets, json[QString("dca_assets")]);
    m_dca_assets_isSet = !json[QString("dca_assets")].isNull() && m_dca_assets_isValid;
}

QString OAIAdGroupResponse_allOf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdGroupResponse_allOf::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(ad_account_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(created_time));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(updated_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_conversion_learning_mode_type_isSet) {
        obj.insert(QString("conversion_learning_mode_type"), ::OpenAPI::toJsonValue(conversion_learning_mode_type));
    }
    if (summary_status.isSet()) {
        obj.insert(QString("summary_status"), ::OpenAPI::toJsonValue(summary_status));
    }
    if (m_feed_profile_id_isSet) {
        obj.insert(QString("feed_profile_id"), ::OpenAPI::toJsonValue(feed_profile_id));
    }
    if (m_dca_assets_isSet) {
        obj.insert(QString("dca_assets"), ::OpenAPI::toJsonValue(dca_assets));
    }
    return obj;
}

QString OAIAdGroupResponse_allOf::getId() const {
    return id;
}
void OAIAdGroupResponse_allOf::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdGroupResponse_allOf::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdGroupResponse_allOf::getAdAccountId() const {
    return ad_account_id;
}
void OAIAdGroupResponse_allOf::setAdAccountId(const QString &ad_account_id) {
    this->ad_account_id = ad_account_id;
    this->m_ad_account_id_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIAdGroupResponse_allOf::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

qint32 OAIAdGroupResponse_allOf::getCreatedTime() const {
    return created_time;
}
void OAIAdGroupResponse_allOf::setCreatedTime(const qint32 &created_time) {
    this->created_time = created_time;
    this->m_created_time_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAdGroupResponse_allOf::is_created_time_Valid() const{
    return m_created_time_isValid;
}

qint32 OAIAdGroupResponse_allOf::getUpdatedTime() const {
    return updated_time;
}
void OAIAdGroupResponse_allOf::setUpdatedTime(const qint32 &updated_time) {
    this->updated_time = updated_time;
    this->m_updated_time_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIAdGroupResponse_allOf::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIAdGroupResponse_allOf::getType() const {
    return type;
}
void OAIAdGroupResponse_allOf::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdGroupResponse_allOf::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAdGroupResponse_allOf::getConversionLearningModeType() const {
    return conversion_learning_mode_type;
}
void OAIAdGroupResponse_allOf::setConversionLearningModeType(const QString &conversion_learning_mode_type) {
    this->conversion_learning_mode_type = conversion_learning_mode_type;
    this->m_conversion_learning_mode_type_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_conversion_learning_mode_type_Set() const{
    return m_conversion_learning_mode_type_isSet;
}

bool OAIAdGroupResponse_allOf::is_conversion_learning_mode_type_Valid() const{
    return m_conversion_learning_mode_type_isValid;
}

OAIAdGroupSummaryStatus OAIAdGroupResponse_allOf::getSummaryStatus() const {
    return summary_status;
}
void OAIAdGroupResponse_allOf::setSummaryStatus(const OAIAdGroupSummaryStatus &summary_status) {
    this->summary_status = summary_status;
    this->m_summary_status_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_summary_status_Set() const{
    return m_summary_status_isSet;
}

bool OAIAdGroupResponse_allOf::is_summary_status_Valid() const{
    return m_summary_status_isValid;
}

QString OAIAdGroupResponse_allOf::getFeedProfileId() const {
    return feed_profile_id;
}
void OAIAdGroupResponse_allOf::setFeedProfileId(const QString &feed_profile_id) {
    this->feed_profile_id = feed_profile_id;
    this->m_feed_profile_id_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_feed_profile_id_Set() const{
    return m_feed_profile_id_isSet;
}

bool OAIAdGroupResponse_allOf::is_feed_profile_id_Valid() const{
    return m_feed_profile_id_isValid;
}

OAIAnyType OAIAdGroupResponse_allOf::getDcaAssets() const {
    return dca_assets;
}
void OAIAdGroupResponse_allOf::setDcaAssets(const OAIAnyType &dca_assets) {
    this->dca_assets = dca_assets;
    this->m_dca_assets_isSet = true;
}

bool OAIAdGroupResponse_allOf::is_dca_assets_Set() const{
    return m_dca_assets_isSet;
}

bool OAIAdGroupResponse_allOf::is_dca_assets_Valid() const{
    return m_dca_assets_isValid;
}

bool OAIAdGroupResponse_allOf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_learning_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (summary_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dca_assets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdGroupResponse_allOf::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
