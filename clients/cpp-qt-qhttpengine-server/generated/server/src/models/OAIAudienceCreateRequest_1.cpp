/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceCreateRequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceCreateRequest_1::OAIAudienceCreateRequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceCreateRequest_1::OAIAudienceCreateRequest_1() {
    this->initializeModel();
}

OAIAudienceCreateRequest_1::~OAIAudienceCreateRequest_1() {}

void OAIAudienceCreateRequest_1::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_audience_type_isSet = false;
    m_audience_type_isValid = false;
}

void OAIAudienceCreateRequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceCreateRequest_1::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_audience_type_isValid = ::OpenAPI::fromJsonValue(audience_type, json[QString("audience_type")]);
    m_audience_type_isSet = !json[QString("audience_type")].isNull() && m_audience_type_isValid;
}

QString OAIAudienceCreateRequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceCreateRequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (audience_type.isSet()) {
        obj.insert(QString("audience_type"), ::OpenAPI::toJsonValue(audience_type));
    }
    return obj;
}

QString OAIAudienceCreateRequest_1::getDescription() const {
    return description;
}
void OAIAudienceCreateRequest_1::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIAudienceCreateRequest_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAudienceCreateRequest_1::is_description_Valid() const{
    return m_description_isValid;
}

OAIAudienceType OAIAudienceCreateRequest_1::getAudienceType() const {
    return audience_type;
}
void OAIAudienceCreateRequest_1::setAudienceType(const OAIAudienceType &audience_type) {
    this->audience_type = audience_type;
    this->m_audience_type_isSet = true;
}

bool OAIAudienceCreateRequest_1::is_audience_type_Set() const{
    return m_audience_type_isSet;
}

bool OAIAudienceCreateRequest_1::is_audience_type_Valid() const{
    return m_audience_type_isValid;
}

bool OAIAudienceCreateRequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (audience_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceCreateRequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audience_type_isValid && true;
}

} // namespace OpenAPI
