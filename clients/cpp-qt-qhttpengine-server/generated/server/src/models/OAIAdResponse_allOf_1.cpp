/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdResponse_allOf_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdResponse_allOf_1::OAIAdResponse_allOf_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdResponse_allOf_1::OAIAdResponse_allOf_1() {
    this->initializeModel();
}

OAIAdResponse_allOf_1::~OAIAdResponse_allOf_1() {}

void OAIAdResponse_allOf_1::initializeModel() {

    m_ad_account_id_isSet = false;
    m_ad_account_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_collection_items_destination_url_template_isSet = false;
    m_collection_items_destination_url_template_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rejected_reasons_isSet = false;
    m_rejected_reasons_isValid = false;

    m_rejection_labels_isSet = false;
    m_rejection_labels_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_summary_status_isSet = false;
    m_summary_status_isValid = false;
}

void OAIAdResponse_allOf_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdResponse_allOf_1::fromJsonObject(QJsonObject json) {

    m_ad_account_id_isValid = ::OpenAPI::fromJsonValue(ad_account_id, json[QString("ad_account_id")]);
    m_ad_account_id_isSet = !json[QString("ad_account_id")].isNull() && m_ad_account_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_collection_items_destination_url_template_isValid = ::OpenAPI::fromJsonValue(collection_items_destination_url_template, json[QString("collection_items_destination_url_template")]);
    m_collection_items_destination_url_template_isSet = !json[QString("collection_items_destination_url_template")].isNull() && m_collection_items_destination_url_template_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rejected_reasons_isValid = ::OpenAPI::fromJsonValue(rejected_reasons, json[QString("rejected_reasons")]);
    m_rejected_reasons_isSet = !json[QString("rejected_reasons")].isNull() && m_rejected_reasons_isValid;

    m_rejection_labels_isValid = ::OpenAPI::fromJsonValue(rejection_labels, json[QString("rejection_labels")]);
    m_rejection_labels_isSet = !json[QString("rejection_labels")].isNull() && m_rejection_labels_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(review_status, json[QString("review_status")]);
    m_review_status_isSet = !json[QString("review_status")].isNull() && m_review_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_summary_status_isValid = ::OpenAPI::fromJsonValue(summary_status, json[QString("summary_status")]);
    m_summary_status_isSet = !json[QString("summary_status")].isNull() && m_summary_status_isValid;
}

QString OAIAdResponse_allOf_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdResponse_allOf_1::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_account_id_isSet) {
        obj.insert(QString("ad_account_id"), ::OpenAPI::toJsonValue(ad_account_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(campaign_id));
    }
    if (m_collection_items_destination_url_template_isSet) {
        obj.insert(QString("collection_items_destination_url_template"), ::OpenAPI::toJsonValue(collection_items_destination_url_template));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(created_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (rejected_reasons.size() > 0) {
        obj.insert(QString("rejected_reasons"), ::OpenAPI::toJsonValue(rejected_reasons));
    }
    if (rejection_labels.size() > 0) {
        obj.insert(QString("rejection_labels"), ::OpenAPI::toJsonValue(rejection_labels));
    }
    if (m_review_status_isSet) {
        obj.insert(QString("review_status"), ::OpenAPI::toJsonValue(review_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(updated_time));
    }
    if (summary_status.isSet()) {
        obj.insert(QString("summary_status"), ::OpenAPI::toJsonValue(summary_status));
    }
    return obj;
}

QString OAIAdResponse_allOf_1::getAdAccountId() const {
    return ad_account_id;
}
void OAIAdResponse_allOf_1::setAdAccountId(const QString &ad_account_id) {
    this->ad_account_id = ad_account_id;
    this->m_ad_account_id_isSet = true;
}

bool OAIAdResponse_allOf_1::is_ad_account_id_Set() const{
    return m_ad_account_id_isSet;
}

bool OAIAdResponse_allOf_1::is_ad_account_id_Valid() const{
    return m_ad_account_id_isValid;
}

QString OAIAdResponse_allOf_1::getCampaignId() const {
    return campaign_id;
}
void OAIAdResponse_allOf_1::setCampaignId(const QString &campaign_id) {
    this->campaign_id = campaign_id;
    this->m_campaign_id_isSet = true;
}

bool OAIAdResponse_allOf_1::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIAdResponse_allOf_1::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIAdResponse_allOf_1::getCollectionItemsDestinationUrlTemplate() const {
    return collection_items_destination_url_template;
}
void OAIAdResponse_allOf_1::setCollectionItemsDestinationUrlTemplate(const QString &collection_items_destination_url_template) {
    this->collection_items_destination_url_template = collection_items_destination_url_template;
    this->m_collection_items_destination_url_template_isSet = true;
}

bool OAIAdResponse_allOf_1::is_collection_items_destination_url_template_Set() const{
    return m_collection_items_destination_url_template_isSet;
}

bool OAIAdResponse_allOf_1::is_collection_items_destination_url_template_Valid() const{
    return m_collection_items_destination_url_template_isValid;
}

qint32 OAIAdResponse_allOf_1::getCreatedTime() const {
    return created_time;
}
void OAIAdResponse_allOf_1::setCreatedTime(const qint32 &created_time) {
    this->created_time = created_time;
    this->m_created_time_isSet = true;
}

bool OAIAdResponse_allOf_1::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAdResponse_allOf_1::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIAdResponse_allOf_1::getId() const {
    return id;
}
void OAIAdResponse_allOf_1::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAdResponse_allOf_1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdResponse_allOf_1::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIAdResponse_allOf_1::getRejectedReasons() const {
    return rejected_reasons;
}
void OAIAdResponse_allOf_1::setRejectedReasons(const QList<QString> &rejected_reasons) {
    this->rejected_reasons = rejected_reasons;
    this->m_rejected_reasons_isSet = true;
}

bool OAIAdResponse_allOf_1::is_rejected_reasons_Set() const{
    return m_rejected_reasons_isSet;
}

bool OAIAdResponse_allOf_1::is_rejected_reasons_Valid() const{
    return m_rejected_reasons_isValid;
}

QList<QString> OAIAdResponse_allOf_1::getRejectionLabels() const {
    return rejection_labels;
}
void OAIAdResponse_allOf_1::setRejectionLabels(const QList<QString> &rejection_labels) {
    this->rejection_labels = rejection_labels;
    this->m_rejection_labels_isSet = true;
}

bool OAIAdResponse_allOf_1::is_rejection_labels_Set() const{
    return m_rejection_labels_isSet;
}

bool OAIAdResponse_allOf_1::is_rejection_labels_Valid() const{
    return m_rejection_labels_isValid;
}

QString OAIAdResponse_allOf_1::getReviewStatus() const {
    return review_status;
}
void OAIAdResponse_allOf_1::setReviewStatus(const QString &review_status) {
    this->review_status = review_status;
    this->m_review_status_isSet = true;
}

bool OAIAdResponse_allOf_1::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAIAdResponse_allOf_1::is_review_status_Valid() const{
    return m_review_status_isValid;
}

QString OAIAdResponse_allOf_1::getType() const {
    return type;
}
void OAIAdResponse_allOf_1::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIAdResponse_allOf_1::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdResponse_allOf_1::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIAdResponse_allOf_1::getUpdatedTime() const {
    return updated_time;
}
void OAIAdResponse_allOf_1::setUpdatedTime(const qint32 &updated_time) {
    this->updated_time = updated_time;
    this->m_updated_time_isSet = true;
}

bool OAIAdResponse_allOf_1::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIAdResponse_allOf_1::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

OAIPinPromotionSummaryStatus OAIAdResponse_allOf_1::getSummaryStatus() const {
    return summary_status;
}
void OAIAdResponse_allOf_1::setSummaryStatus(const OAIPinPromotionSummaryStatus &summary_status) {
    this->summary_status = summary_status;
    this->m_summary_status_isSet = true;
}

bool OAIAdResponse_allOf_1::is_summary_status_Set() const{
    return m_summary_status_isSet;
}

bool OAIAdResponse_allOf_1::is_summary_status_Valid() const{
    return m_summary_status_isValid;
}

bool OAIAdResponse_allOf_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_items_destination_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (rejected_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (rejection_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (summary_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdResponse_allOf_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
