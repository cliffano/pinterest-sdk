/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.CatalogsDbItem
import org.openapitools.server.api.model.CatalogsFeedCredentials
import org.openapitools.server.api.model.CatalogsFeedProcessingSchedule
import org.openapitools.server.api.model.CatalogsFormat
import org.openapitools.server.api.model.CatalogsStatus
import org.openapitools.server.api.model.Country
import org.openapitools.server.api.model.FeedFields
import org.openapitools.server.api.model.NullableCurrency
import org.openapitools.server.api.model.ProductAvailabilityType

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Catalogs Catalogs Feed object
 * @param defaultCountry 
 * @param defaultAvailability 
 * @param defaultCurrency 
 * @param name A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
 * @param format 
 * @param defaultLocale The locale used within a feed for product descriptions.
 * @param credentials 
 * @param location The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
 * @param preferredProcessingSchedule 
 * @param status 
 * @param createdAt 
 * @param id 
 * @param updatedAt 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CatalogsFeed (
    @SerializedName("defaultCountry") private val _defaultCountry: Country?,
    @SerializedName("defaultAvailability") private val _defaultAvailability: ProductAvailabilityType?,
    @SerializedName("defaultCurrency") private val _defaultCurrency: NullableCurrency?,
    /* A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future. */
    @SerializedName("name") private val _name: kotlin.String?,
    @SerializedName("format") private val _format: CatalogsFormat?,
    /* The locale used within a feed for product descriptions. */
    @SerializedName("defaultLocale") private val _defaultLocale: kotlin.String?,
    @SerializedName("credentials") private val _credentials: CatalogsFeedCredentials?,
    /* The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing. */
    @SerializedName("location") private val _location: kotlin.String?,
    @SerializedName("preferredProcessingSchedule") private val _preferredProcessingSchedule: CatalogsFeedProcessingSchedule?,
    @SerializedName("status") private val _status: CatalogsStatus?,
    val createdAt: java.time.OffsetDateTime? = null,
    val id: kotlin.String? = null,
    val updatedAt: java.time.OffsetDateTime? = null
) {

        val defaultCountry get() = _defaultCountry ?: throw IllegalArgumentException("defaultCountry is required")
                    
        val defaultAvailability get() = _defaultAvailability ?: throw IllegalArgumentException("defaultAvailability is required")
                    
        val defaultCurrency get() = _defaultCurrency ?: throw IllegalArgumentException("defaultCurrency is required")
                    
        val name get() = _name ?: throw IllegalArgumentException("name is required")
                    
        val format get() = _format ?: throw IllegalArgumentException("format is required")
                    
        val defaultLocale get() = _defaultLocale ?: throw IllegalArgumentException("defaultLocale is required")
                    
        val credentials get() = _credentials ?: throw IllegalArgumentException("credentials is required")
                    
        val location get() = _location ?: throw IllegalArgumentException("location is required")
                    
        val preferredProcessingSchedule get() = _preferredProcessingSchedule ?: throw IllegalArgumentException("preferredProcessingSchedule is required")
                    
        val status get() = _status ?: throw IllegalArgumentException("status is required")
                    
}

