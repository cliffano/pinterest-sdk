/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.api.model

import org.openapitools.server.api.model.PinMediaSourceImageBase64
import org.openapitools.server.api.model.PinMediaSourceImageURL
import org.openapitools.server.api.model.PinMediaSourceVideoID

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Pin media source.
 * @param sourceType 
 * @param contentType 
 * @param &#x60;data&#x60; 
 * @param url 
 * @param coverImageUrl 
 * @param mediaId 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class PinMediaSource (
    @SerializedName("sourceType") private val _sourceType: PinMediaSource.SourceType?,
    @SerializedName("contentType") private val _contentType: PinMediaSource.ContentType?,
    @SerializedName("`data`") private val _`data`: kotlin.String?,
    @SerializedName("url") private val _url: kotlin.String?,
    @SerializedName("coverImageUrl") private val _coverImageUrl: kotlin.String?,
    @SerializedName("mediaId") private val _mediaId: kotlin.String?
) {

    /**
    * 
    * Values: videoId
    */
    enum class SourceType(val value: kotlin.String){
    
        videoId("video_id");
    
    }

    /**
    * 
    * Values: jpeg,png
    */
    enum class ContentType(val value: kotlin.String){
    
        jpeg("image/jpeg"),
    
        png("image/png");
    
    }

        val sourceType get() = _sourceType ?: throw IllegalArgumentException("sourceType is required")
                    
        val contentType get() = _contentType ?: throw IllegalArgumentException("contentType is required")
                    
        val `data` get() = _`data` ?: throw IllegalArgumentException("`data` is required")
                    
        val url get() = _url ?: throw IllegalArgumentException("url is required")
                    
        val coverImageUrl get() = _coverImageUrl ?: throw IllegalArgumentException("coverImageUrl is required")
                    
        val mediaId get() = _mediaId ?: throw IllegalArgumentException("mediaId is required")
                    
}

