/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinMediaSourceVideoID.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PinMediaSourceVideoID::PinMediaSourceVideoID()
{
    m_Source_type = utility::conversions::to_string_t("");
    m_Source_typeIsSet = false;
    m_Cover_image_url = utility::conversions::to_string_t("");
    m_Cover_image_urlIsSet = false;
    m_Media_id = utility::conversions::to_string_t("");
    m_Media_idIsSet = false;
}

PinMediaSourceVideoID::~PinMediaSourceVideoID()
{
}

void PinMediaSourceVideoID::validate()
{
    // TODO: implement validation
}

web::json::value PinMediaSourceVideoID::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Source_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("source_type"))] = ModelBase::toJson(m_Source_type);
    }
    if(m_Cover_image_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("cover_image_url"))] = ModelBase::toJson(m_Cover_image_url);
    }
    if(m_Media_idIsSet)
    {
        val[utility::conversions::to_string_t(U("media_id"))] = ModelBase::toJson(m_Media_id);
    }

    return val;
}

bool PinMediaSourceVideoID::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("source_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_source_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_source_type);
            setSourceType(refVal_source_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cover_image_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cover_image_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cover_image_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_cover_image_url);
            setCoverImageUrl(refVal_cover_image_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_media_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_media_id);
            setMediaId(refVal_media_id);
        }
    }
    return ok;
}

void PinMediaSourceVideoID::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Source_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source_type")), m_Source_type));
    }
    if(m_Cover_image_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cover_image_url")), m_Cover_image_url));
    }
    if(m_Media_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media_id")), m_Media_id));
    }
}

bool PinMediaSourceVideoID::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("source_type"))))
    {
        utility::string_t refVal_source_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source_type"))), refVal_source_type );
        setSourceType(refVal_source_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cover_image_url"))))
    {
        utility::string_t refVal_cover_image_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cover_image_url"))), refVal_cover_image_url );
        setCoverImageUrl(refVal_cover_image_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media_id"))))
    {
        utility::string_t refVal_media_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media_id"))), refVal_media_id );
        setMediaId(refVal_media_id);
    }
    return ok;
}

utility::string_t PinMediaSourceVideoID::getSourceType() const
{
    return m_Source_type;
}

void PinMediaSourceVideoID::setSourceType(const utility::string_t& value)
{
    m_Source_type = value;
    m_Source_typeIsSet = true;
}

bool PinMediaSourceVideoID::sourceTypeIsSet() const
{
    return m_Source_typeIsSet;
}

void PinMediaSourceVideoID::unsetSource_type()
{
    m_Source_typeIsSet = false;
}
utility::string_t PinMediaSourceVideoID::getCoverImageUrl() const
{
    return m_Cover_image_url;
}

void PinMediaSourceVideoID::setCoverImageUrl(const utility::string_t& value)
{
    m_Cover_image_url = value;
    m_Cover_image_urlIsSet = true;
}

bool PinMediaSourceVideoID::coverImageUrlIsSet() const
{
    return m_Cover_image_urlIsSet;
}

void PinMediaSourceVideoID::unsetCover_image_url()
{
    m_Cover_image_urlIsSet = false;
}
utility::string_t PinMediaSourceVideoID::getMediaId() const
{
    return m_Media_id;
}

void PinMediaSourceVideoID::setMediaId(const utility::string_t& value)
{
    m_Media_id = value;
    m_Media_idIsSet = true;
}

bool PinMediaSourceVideoID::mediaIdIsSet() const
{
    return m_Media_idIsSet;
}

void PinMediaSourceVideoID::unsetMedia_id()
{
    m_Media_idIsSet = false;
}
}
}
}
}


