/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MediaUpload_allOf_upload_parameters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




MediaUpload_allOf_upload_parameters::MediaUpload_allOf_upload_parameters()
{
    m_X_amz_date = utility::conversions::to_string_t("");
    m_X_amz_dateIsSet = false;
    m_X_amz_signature = utility::conversions::to_string_t("");
    m_X_amz_signatureIsSet = false;
    m_X_amz_security_token = utility::conversions::to_string_t("");
    m_X_amz_security_tokenIsSet = false;
    m_X_amz_algorithm = utility::conversions::to_string_t("");
    m_X_amz_algorithmIsSet = false;
    m_Key = utility::conversions::to_string_t("");
    m_KeyIsSet = false;
    m_Policy = utility::conversions::to_string_t("");
    m_PolicyIsSet = false;
    m_X_amz_credential = utility::conversions::to_string_t("");
    m_X_amz_credentialIsSet = false;
    m_Content_Type = utility::conversions::to_string_t("");
    m_Content_TypeIsSet = false;
}

MediaUpload_allOf_upload_parameters::~MediaUpload_allOf_upload_parameters()
{
}

void MediaUpload_allOf_upload_parameters::validate()
{
    // TODO: implement validation
}

web::json::value MediaUpload_allOf_upload_parameters::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_X_amz_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("x-amz-date"))] = ModelBase::toJson(m_X_amz_date);
    }
    if(m_X_amz_signatureIsSet)
    {
        val[utility::conversions::to_string_t(U("x-amz-signature"))] = ModelBase::toJson(m_X_amz_signature);
    }
    if(m_X_amz_security_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("x-amz-security-token"))] = ModelBase::toJson(m_X_amz_security_token);
    }
    if(m_X_amz_algorithmIsSet)
    {
        val[utility::conversions::to_string_t(U("x-amz-algorithm"))] = ModelBase::toJson(m_X_amz_algorithm);
    }
    if(m_KeyIsSet)
    {
        val[utility::conversions::to_string_t(U("key"))] = ModelBase::toJson(m_Key);
    }
    if(m_PolicyIsSet)
    {
        val[utility::conversions::to_string_t(U("policy"))] = ModelBase::toJson(m_Policy);
    }
    if(m_X_amz_credentialIsSet)
    {
        val[utility::conversions::to_string_t(U("x-amz-credential"))] = ModelBase::toJson(m_X_amz_credential);
    }
    if(m_Content_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("Content-Type"))] = ModelBase::toJson(m_Content_Type);
    }

    return val;
}

bool MediaUpload_allOf_upload_parameters::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("x-amz-date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x-amz-date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_x-amz-date;
            ok &= ModelBase::fromJson(fieldValue, refVal_x-amz-date);
            setXAmzDate(refVal_x-amz-date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x-amz-signature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x-amz-signature")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_x-amz-signature;
            ok &= ModelBase::fromJson(fieldValue, refVal_x-amz-signature);
            setXAmzSignature(refVal_x-amz-signature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x-amz-security-token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x-amz-security-token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_x-amz-security-token;
            ok &= ModelBase::fromJson(fieldValue, refVal_x-amz-security-token);
            setXAmzSecurityToken(refVal_x-amz-security-token);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x-amz-algorithm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x-amz-algorithm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_x-amz-algorithm;
            ok &= ModelBase::fromJson(fieldValue, refVal_x-amz-algorithm);
            setXAmzAlgorithm(refVal_x-amz-algorithm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_key);
            setKey(refVal_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("policy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("policy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_policy;
            ok &= ModelBase::fromJson(fieldValue, refVal_policy);
            setPolicy(refVal_policy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x-amz-credential"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x-amz-credential")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_x-amz-credential;
            ok &= ModelBase::fromJson(fieldValue, refVal_x-amz-credential);
            setXAmzCredential(refVal_x-amz-credential);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("Content-Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("Content-Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_Content-Type;
            ok &= ModelBase::fromJson(fieldValue, refVal_Content-Type);
            setContentType(refVal_Content-Type);
        }
    }
    return ok;
}

void MediaUpload_allOf_upload_parameters::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_X_amz_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x-amz-date")), m_X_amz_date));
    }
    if(m_X_amz_signatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x-amz-signature")), m_X_amz_signature));
    }
    if(m_X_amz_security_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x-amz-security-token")), m_X_amz_security_token));
    }
    if(m_X_amz_algorithmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x-amz-algorithm")), m_X_amz_algorithm));
    }
    if(m_KeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("key")), m_Key));
    }
    if(m_PolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("policy")), m_Policy));
    }
    if(m_X_amz_credentialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x-amz-credential")), m_X_amz_credential));
    }
    if(m_Content_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("Content-Type")), m_Content_Type));
    }
}

bool MediaUpload_allOf_upload_parameters::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("x-amz-date"))))
    {
        utility::string_t refVal_x-amz-date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x-amz-date"))), refVal_x-amz-date );
        setXAmzDate(refVal_x-amz-date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x-amz-signature"))))
    {
        utility::string_t refVal_x-amz-signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x-amz-signature"))), refVal_x-amz-signature );
        setXAmzSignature(refVal_x-amz-signature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x-amz-security-token"))))
    {
        utility::string_t refVal_x-amz-security-token;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x-amz-security-token"))), refVal_x-amz-security-token );
        setXAmzSecurityToken(refVal_x-amz-security-token);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x-amz-algorithm"))))
    {
        utility::string_t refVal_x-amz-algorithm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x-amz-algorithm"))), refVal_x-amz-algorithm );
        setXAmzAlgorithm(refVal_x-amz-algorithm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("key"))))
    {
        utility::string_t refVal_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("key"))), refVal_key );
        setKey(refVal_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("policy"))))
    {
        utility::string_t refVal_policy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("policy"))), refVal_policy );
        setPolicy(refVal_policy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x-amz-credential"))))
    {
        utility::string_t refVal_x-amz-credential;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x-amz-credential"))), refVal_x-amz-credential );
        setXAmzCredential(refVal_x-amz-credential);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("Content-Type"))))
    {
        utility::string_t refVal_Content-Type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("Content-Type"))), refVal_Content-Type );
        setContentType(refVal_Content-Type);
    }
    return ok;
}

utility::string_t MediaUpload_allOf_upload_parameters::getXAmzDate() const
{
    return m_X_amz_date;
}

void MediaUpload_allOf_upload_parameters::setXAmzDate(const utility::string_t& value)
{
    m_X_amz_date = value;
    m_X_amz_dateIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::xAmzDateIsSet() const
{
    return m_X_amz_dateIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetX_amz_date()
{
    m_X_amz_dateIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getXAmzSignature() const
{
    return m_X_amz_signature;
}

void MediaUpload_allOf_upload_parameters::setXAmzSignature(const utility::string_t& value)
{
    m_X_amz_signature = value;
    m_X_amz_signatureIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::xAmzSignatureIsSet() const
{
    return m_X_amz_signatureIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetX_amz_signature()
{
    m_X_amz_signatureIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getXAmzSecurityToken() const
{
    return m_X_amz_security_token;
}

void MediaUpload_allOf_upload_parameters::setXAmzSecurityToken(const utility::string_t& value)
{
    m_X_amz_security_token = value;
    m_X_amz_security_tokenIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::xAmzSecurityTokenIsSet() const
{
    return m_X_amz_security_tokenIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetX_amz_security_token()
{
    m_X_amz_security_tokenIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getXAmzAlgorithm() const
{
    return m_X_amz_algorithm;
}

void MediaUpload_allOf_upload_parameters::setXAmzAlgorithm(const utility::string_t& value)
{
    m_X_amz_algorithm = value;
    m_X_amz_algorithmIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::xAmzAlgorithmIsSet() const
{
    return m_X_amz_algorithmIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetX_amz_algorithm()
{
    m_X_amz_algorithmIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getKey() const
{
    return m_Key;
}

void MediaUpload_allOf_upload_parameters::setKey(const utility::string_t& value)
{
    m_Key = value;
    m_KeyIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::keyIsSet() const
{
    return m_KeyIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetKey()
{
    m_KeyIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getPolicy() const
{
    return m_Policy;
}

void MediaUpload_allOf_upload_parameters::setPolicy(const utility::string_t& value)
{
    m_Policy = value;
    m_PolicyIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::policyIsSet() const
{
    return m_PolicyIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetPolicy()
{
    m_PolicyIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getXAmzCredential() const
{
    return m_X_amz_credential;
}

void MediaUpload_allOf_upload_parameters::setXAmzCredential(const utility::string_t& value)
{
    m_X_amz_credential = value;
    m_X_amz_credentialIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::xAmzCredentialIsSet() const
{
    return m_X_amz_credentialIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetX_amz_credential()
{
    m_X_amz_credentialIsSet = false;
}
utility::string_t MediaUpload_allOf_upload_parameters::getContentType() const
{
    return m_Content_Type;
}

void MediaUpload_allOf_upload_parameters::setContentType(const utility::string_t& value)
{
    m_Content_Type = value;
    m_Content_TypeIsSet = true;
}

bool MediaUpload_allOf_upload_parameters::contentTypeIsSet() const
{
    return m_Content_TypeIsSet;
}

void MediaUpload_allOf_upload_parameters::unsetContent_Type()
{
    m_Content_TypeIsSet = false;
}
}
}
}
}


