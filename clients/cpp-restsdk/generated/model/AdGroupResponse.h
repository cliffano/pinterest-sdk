/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdGroupResponse.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AdGroupResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AdGroupResponse_H_


#include "ModelBase.h"

#include "model/AdGroupResponse_allOf_1.h"
#include "model/AdGroupSummaryStatus.h"
#include "model/AdGroupResponse_allOf.h"
#include "model/PlacementGroupType.h"
#include "model/ActionType.h"
#include "model/TrackingUrls.h"
#include "model/EntityStatus.h"
#include "model/PacingDeliveryType.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AdGroupResponse
    : public ModelBase
{
public:
    AdGroupResponse();
    virtual ~AdGroupResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdGroupResponse members

    /// <summary>
    /// Ad group name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Ad group/entity status.
    /// </summary>
    EntityStatus getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const EntityStatus& value);

    /// <summary>
    /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    /// </summary>
    int32_t getBudgetInMicroCurrency() const;
    bool budgetInMicroCurrencyIsSet() const;
    void unsetBudget_in_micro_currency();

    void setBudgetInMicroCurrency(int32_t value);

    /// <summary>
    /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    /// </summary>
    int32_t getBidInMicroCurrency() const;
    bool bidInMicroCurrencyIsSet() const;
    void unsetBid_in_micro_currency();

    void setBidInMicroCurrency(int32_t value);

    /// <summary>
    /// Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
    /// </summary>
    utility::string_t getBudgetType() const;
    bool budgetTypeIsSet() const;
    void unsetBudget_type();

    void setBudgetType(const utility::string_t& value);

    /// <summary>
    /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
    /// </summary>
    int32_t getStartTime() const;
    bool startTimeIsSet() const;
    void unsetStart_time();

    void setStartTime(int32_t value);

    /// <summary>
    /// Ad group end time. Unix timestamp in seconds.
    /// </summary>
    int32_t getEndTime() const;
    bool endTimeIsSet() const;
    void unsetEnd_time();

    void setEndTime(int32_t value);

    /// <summary>
    /// Ad group targeting specification defining the ad group target audience. For example, &#39;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#39;
    /// </summary>
    std::map<utility::string_t, std::vector<utility::string_t>>& getTargetingSpec();
    bool targetingSpecIsSet() const;
    void unsetTargeting_spec();

    void setTargetingSpec(const std::map<utility::string_t, std::vector<utility::string_t>>& value);

    /// <summary>
    /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Billable-event\\\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
    /// </summary>
    int32_t getLifetimeFrequencyCap() const;
    bool lifetimeFrequencyCapIsSet() const;
    void unsetLifetime_frequency_cap();

    void setLifetimeFrequencyCap(int32_t value);

    /// <summary>
    /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
    /// </summary>
    std::shared_ptr<TrackingUrls> getTrackingUrls() const;
    bool trackingUrlsIsSet() const;
    void unsetTracking_urls();

    void setTrackingUrls(const std::shared_ptr<TrackingUrls>& value);

    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    bool autoTargetingEnabledIsSet() const;
    void unsetAuto_targeting_enabled();

    void setAutoTargetingEnabled(bool value);

    /// <summary>
    /// &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Placement-group\\\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    PlacementGroupType getPlacementGroup() const;
    bool placementGroupIsSet() const;
    void unsetPlacement_group();

    void setPlacementGroup(const PlacementGroupType& value);

    /// <summary>
    /// Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
    /// </summary>
    PacingDeliveryType getPacingDeliveryType() const;
    bool pacingDeliveryTypeIsSet() const;
    void unsetPacing_delivery_type();

    void setPacingDeliveryType(const PacingDeliveryType& value);

    /// <summary>
    /// oCPM learn mode
    /// </summary>
    utility::string_t getConversionLearningModeType() const;
    bool conversionLearningModeTypeIsSet() const;
    void unsetConversion_learning_mode_type();

    void setConversionLearningModeType(const utility::string_t& value);

    /// <summary>
    /// Ad group summary status.
    /// </summary>
    AdGroupSummaryStatus getSummaryStatus() const;
    bool summaryStatusIsSet() const;
    void unsetSummary_status();

    void setSummaryStatus(const AdGroupSummaryStatus& value);

    /// <summary>
    /// Feed Profile ID associated to the adgroup.
    /// </summary>
    utility::string_t getFeedProfileId() const;
    bool feedProfileIdIsSet() const;
    void unsetFeed_profile_id();

    void setFeedProfileId(const utility::string_t& value);

    /// <summary>
    /// Campaign ID of the ad group.
    /// </summary>
    utility::string_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaign_id();

    void setCampaignId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ActionType> getBillableEvent() const;
    bool billableEventIsSet() const;
    void unsetBillable_event();

    void setBillableEvent(const std::shared_ptr<ActionType>& value);

    /// <summary>
    /// Ad group ID.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Always \&quot;adgroup\&quot;.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// Advertiser ID.
    /// </summary>
    utility::string_t getAdAccountId() const;
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();

    void setAdAccountId(const utility::string_t& value);

    /// <summary>
    /// Ad group creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    bool createdTimeIsSet() const;
    void unsetCreated_time();

    void setCreatedTime(int32_t value);

    /// <summary>
    /// Ad group last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();

    void setUpdatedTime(int32_t value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    EntityStatus m_Status;
    bool m_StatusIsSet;
    int32_t m_Budget_in_micro_currency;
    bool m_Budget_in_micro_currencyIsSet;
    int32_t m_Bid_in_micro_currency;
    bool m_Bid_in_micro_currencyIsSet;
    utility::string_t m_Budget_type;
    bool m_Budget_typeIsSet;
    int32_t m_Start_time;
    bool m_Start_timeIsSet;
    int32_t m_End_time;
    bool m_End_timeIsSet;
    std::map<utility::string_t, std::vector<utility::string_t>> m_Targeting_spec;
    bool m_Targeting_specIsSet;
    int32_t m_Lifetime_frequency_cap;
    bool m_Lifetime_frequency_capIsSet;
    std::shared_ptr<TrackingUrls> m_Tracking_urls;
    bool m_Tracking_urlsIsSet;
    bool m_Auto_targeting_enabled;
    bool m_Auto_targeting_enabledIsSet;
    PlacementGroupType m_Placement_group;
    bool m_Placement_groupIsSet;
    PacingDeliveryType m_Pacing_delivery_type;
    bool m_Pacing_delivery_typeIsSet;
    utility::string_t m_Conversion_learning_mode_type;
    bool m_Conversion_learning_mode_typeIsSet;
    AdGroupSummaryStatus m_Summary_status;
    bool m_Summary_statusIsSet;
    utility::string_t m_Feed_profile_id;
    bool m_Feed_profile_idIsSet;
    utility::string_t m_Campaign_id;
    bool m_Campaign_idIsSet;
    std::shared_ptr<ActionType> m_Billable_event;
    bool m_Billable_eventIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AdGroupResponse_H_ */
