/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Account.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Account::Account()
{
    m_Account_type = utility::conversions::to_string_t("");
    m_Account_typeIsSet = false;
    m_Profile_image = utility::conversions::to_string_t("");
    m_Profile_imageIsSet = false;
    m_Website_url = utility::conversions::to_string_t("");
    m_Website_urlIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
}

Account::~Account()
{
}

void Account::validate()
{
    // TODO: implement validation
}

web::json::value Account::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Account_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("account_type"))] = ModelBase::toJson(m_Account_type);
    }
    if(m_Profile_imageIsSet)
    {
        val[utility::conversions::to_string_t(U("profile_image"))] = ModelBase::toJson(m_Profile_image);
    }
    if(m_Website_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("website_url"))] = ModelBase::toJson(m_Website_url);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }

    return val;
}

bool Account::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_account_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_account_type);
            setAccountType(refVal_account_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profile_image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profile_image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_profile_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_profile_image);
            setProfileImage(refVal_profile_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("website_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("website_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_website_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_website_url);
            setWebsiteUrl(refVal_website_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_username;
            ok &= ModelBase::fromJson(fieldValue, refVal_username);
            setUsername(refVal_username);
        }
    }
    return ok;
}

void Account::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Account_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_type")), m_Account_type));
    }
    if(m_Profile_imageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profile_image")), m_Profile_image));
    }
    if(m_Website_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("website_url")), m_Website_url));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
}

bool Account::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account_type"))))
    {
        utility::string_t refVal_account_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_type"))), refVal_account_type );
        setAccountType(refVal_account_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profile_image"))))
    {
        utility::string_t refVal_profile_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profile_image"))), refVal_profile_image );
        setProfileImage(refVal_profile_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("website_url"))))
    {
        utility::string_t refVal_website_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("website_url"))), refVal_website_url );
        setWebsiteUrl(refVal_website_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_username;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_username );
        setUsername(refVal_username);
    }
    return ok;
}

utility::string_t Account::getAccountType() const
{
    return m_Account_type;
}

void Account::setAccountType(const utility::string_t& value)
{
    m_Account_type = value;
    m_Account_typeIsSet = true;
}

bool Account::accountTypeIsSet() const
{
    return m_Account_typeIsSet;
}

void Account::unsetAccount_type()
{
    m_Account_typeIsSet = false;
}
utility::string_t Account::getProfileImage() const
{
    return m_Profile_image;
}

void Account::setProfileImage(const utility::string_t& value)
{
    m_Profile_image = value;
    m_Profile_imageIsSet = true;
}

bool Account::profileImageIsSet() const
{
    return m_Profile_imageIsSet;
}

void Account::unsetProfile_image()
{
    m_Profile_imageIsSet = false;
}
utility::string_t Account::getWebsiteUrl() const
{
    return m_Website_url;
}

void Account::setWebsiteUrl(const utility::string_t& value)
{
    m_Website_url = value;
    m_Website_urlIsSet = true;
}

bool Account::websiteUrlIsSet() const
{
    return m_Website_urlIsSet;
}

void Account::unsetWebsite_url()
{
    m_Website_urlIsSet = false;
}
utility::string_t Account::getUsername() const
{
    return m_Username;
}

void Account::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool Account::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void Account::unsetUsername()
{
    m_UsernameIsSet = false;
}
}
}
}
}


