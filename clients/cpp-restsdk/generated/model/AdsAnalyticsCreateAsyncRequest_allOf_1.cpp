/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsAnalyticsCreateAsyncRequest_allOf_1.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AdsAnalyticsCreateAsyncRequest_allOf_1::AdsAnalyticsCreateAsyncRequest_allOf_1()
{
    m_ColumnsIsSet = false;
    m_Level = utility::conversions::to_string_t("");
    m_LevelIsSet = false;
    m_Report_format = utility::conversions::to_string_t("");
    m_Report_formatIsSet = false;
}

AdsAnalyticsCreateAsyncRequest_allOf_1::~AdsAnalyticsCreateAsyncRequest_allOf_1()
{
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::validate()
{
    // TODO: implement validation
}

web::json::value AdsAnalyticsCreateAsyncRequest_allOf_1::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ColumnsIsSet)
    {
        val[utility::conversions::to_string_t(U("columns"))] = ModelBase::toJson(m_Columns);
    }
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t(U("level"))] = ModelBase::toJson(m_Level);
    }
    if(m_Report_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("report_format"))] = ModelBase::toJson(m_Report_format);
    }

    return val;
}

bool AdsAnalyticsCreateAsyncRequest_allOf_1::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("columns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("columns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReportingColumnAsync>> refVal_columns;
            ok &= ModelBase::fromJson(fieldValue, refVal_columns);
            setColumns(refVal_columns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("level")));
        if(!fieldValue.is_null())
        {
            MetricsReportingLevel refVal_level;
            ok &= ModelBase::fromJson(fieldValue, refVal_level);
            setLevel(refVal_level);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_format")));
        if(!fieldValue.is_null())
        {
            DataOutputFormat refVal_report_format;
            ok &= ModelBase::fromJson(fieldValue, refVal_report_format);
            setReportFormat(refVal_report_format);
        }
    }
    return ok;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("columns")), m_Columns));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("level")), m_Level));
    }
    if(m_Report_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_format")), m_Report_format));
    }
}

bool AdsAnalyticsCreateAsyncRequest_allOf_1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("columns"))))
    {
        std::vector<std::shared_ptr<ReportingColumnAsync>> refVal_columns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("columns"))), refVal_columns );
        setColumns(refVal_columns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("level"))))
    {
        MetricsReportingLevel refVal_level;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("level"))), refVal_level );
        setLevel(refVal_level);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_format"))))
    {
        DataOutputFormat refVal_report_format;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_format"))), refVal_report_format );
        setReportFormat(refVal_report_format);
    }
    return ok;
}

std::vector<std::shared_ptr<ReportingColumnAsync>>& AdsAnalyticsCreateAsyncRequest_allOf_1::getColumns()
{
    return m_Columns;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::setColumns(const std::vector<std::shared_ptr<ReportingColumnAsync>>& value)
{
    m_Columns = value;
    m_ColumnsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf_1::columnsIsSet() const
{
    return m_ColumnsIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::unsetColumns()
{
    m_ColumnsIsSet = false;
}
MetricsReportingLevel AdsAnalyticsCreateAsyncRequest_allOf_1::getLevel() const
{
    return m_Level;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::setLevel(const MetricsReportingLevel& value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf_1::levelIsSet() const
{
    return m_LevelIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::unsetLevel()
{
    m_LevelIsSet = false;
}
DataOutputFormat AdsAnalyticsCreateAsyncRequest_allOf_1::getReportFormat() const
{
    return m_Report_format;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::setReportFormat(const DataOutputFormat& value)
{
    m_Report_format = value;
    m_Report_formatIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf_1::reportFormatIsSet() const
{
    return m_Report_formatIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::unsetReport_format()
{
    m_Report_formatIsSet = false;
}
}
}
}
}


