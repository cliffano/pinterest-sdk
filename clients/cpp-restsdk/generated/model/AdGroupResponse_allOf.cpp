/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdGroupResponse_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AdGroupResponse_allOf::AdGroupResponse_allOf()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Budget_in_micro_currency = 0;
    m_Budget_in_micro_currencyIsSet = false;
    m_Bid_in_micro_currency = 0;
    m_Bid_in_micro_currencyIsSet = false;
    m_Budget_type = utility::conversions::to_string_t("");
    m_Budget_typeIsSet = false;
    m_Start_time = 0;
    m_Start_timeIsSet = false;
    m_End_time = 0;
    m_End_timeIsSet = false;
    m_Targeting_specIsSet = false;
    m_Lifetime_frequency_cap = 0;
    m_Lifetime_frequency_capIsSet = false;
    m_Tracking_urlsIsSet = false;
    m_Auto_targeting_enabled = false;
    m_Auto_targeting_enabledIsSet = false;
    m_Placement_group = utility::conversions::to_string_t("");
    m_Placement_groupIsSet = false;
    m_Pacing_delivery_type = utility::conversions::to_string_t("");
    m_Pacing_delivery_typeIsSet = false;
    m_Conversion_learning_mode_type = utility::conversions::to_string_t("");
    m_Conversion_learning_mode_typeIsSet = false;
    m_Summary_status = utility::conversions::to_string_t("");
    m_Summary_statusIsSet = false;
    m_Feed_profile_id = utility::conversions::to_string_t("");
    m_Feed_profile_idIsSet = false;
}

AdGroupResponse_allOf::~AdGroupResponse_allOf()
{
}

void AdGroupResponse_allOf::validate()
{
    // TODO: implement validation
}

web::json::value AdGroupResponse_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Budget_in_micro_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("budget_in_micro_currency"))] = ModelBase::toJson(m_Budget_in_micro_currency);
    }
    if(m_Bid_in_micro_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("bid_in_micro_currency"))] = ModelBase::toJson(m_Bid_in_micro_currency);
    }
    if(m_Budget_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("budget_type"))] = ModelBase::toJson(m_Budget_type);
    }
    if(m_Start_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("start_time"))] = ModelBase::toJson(m_Start_time);
    }
    if(m_End_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("end_time"))] = ModelBase::toJson(m_End_time);
    }
    if(m_Targeting_specIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_spec"))] = ModelBase::toJson(m_Targeting_spec);
    }
    if(m_Lifetime_frequency_capIsSet)
    {
        val[utility::conversions::to_string_t(U("lifetime_frequency_cap"))] = ModelBase::toJson(m_Lifetime_frequency_cap);
    }
    if(m_Tracking_urlsIsSet)
    {
        val[utility::conversions::to_string_t(U("tracking_urls"))] = ModelBase::toJson(m_Tracking_urls);
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        val[utility::conversions::to_string_t(U("auto_targeting_enabled"))] = ModelBase::toJson(m_Auto_targeting_enabled);
    }
    if(m_Placement_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("placement_group"))] = ModelBase::toJson(m_Placement_group);
    }
    if(m_Pacing_delivery_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("pacing_delivery_type"))] = ModelBase::toJson(m_Pacing_delivery_type);
    }
    if(m_Conversion_learning_mode_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_learning_mode_type"))] = ModelBase::toJson(m_Conversion_learning_mode_type);
    }
    if(m_Summary_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_status"))] = ModelBase::toJson(m_Summary_status);
    }
    if(m_Feed_profile_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_profile_id"))] = ModelBase::toJson(m_Feed_profile_id);
    }

    return val;
}

bool AdGroupResponse_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            EntityStatus refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("budget_in_micro_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("budget_in_micro_currency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_budget_in_micro_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_budget_in_micro_currency);
            setBudgetInMicroCurrency(refVal_budget_in_micro_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid_in_micro_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid_in_micro_currency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bid_in_micro_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_bid_in_micro_currency);
            setBidInMicroCurrency(refVal_bid_in_micro_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("budget_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("budget_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_budget_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_budget_type);
            setBudgetType(refVal_budget_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_start_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_start_time);
            setStartTime(refVal_start_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_end_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_end_time);
            setEndTime(refVal_end_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_spec")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::vector<utility::string_t>> refVal_targeting_spec;
            ok &= ModelBase::fromJson(fieldValue, refVal_targeting_spec);
            setTargetingSpec(refVal_targeting_spec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lifetime_frequency_cap"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lifetime_frequency_cap")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_lifetime_frequency_cap;
            ok &= ModelBase::fromJson(fieldValue, refVal_lifetime_frequency_cap);
            setLifetimeFrequencyCap(refVal_lifetime_frequency_cap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracking_urls")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrackingUrls> refVal_tracking_urls;
            ok &= ModelBase::fromJson(fieldValue, refVal_tracking_urls);
            setTrackingUrls(refVal_tracking_urls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("auto_targeting_enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_auto_targeting_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_auto_targeting_enabled);
            setAutoTargetingEnabled(refVal_auto_targeting_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placement_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placement_group")));
        if(!fieldValue.is_null())
        {
            PlacementGroupType refVal_placement_group;
            ok &= ModelBase::fromJson(fieldValue, refVal_placement_group);
            setPlacementGroup(refVal_placement_group);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pacing_delivery_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pacing_delivery_type")));
        if(!fieldValue.is_null())
        {
            PacingDeliveryType refVal_pacing_delivery_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_pacing_delivery_type);
            setPacingDeliveryType(refVal_pacing_delivery_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_learning_mode_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_learning_mode_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_conversion_learning_mode_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_conversion_learning_mode_type);
            setConversionLearningModeType(refVal_conversion_learning_mode_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_status")));
        if(!fieldValue.is_null())
        {
            AdGroupSummaryStatus refVal_summary_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_summary_status);
            setSummaryStatus(refVal_summary_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_profile_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_feed_profile_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_feed_profile_id);
            setFeedProfileId(refVal_feed_profile_id);
        }
    }
    return ok;
}

void AdGroupResponse_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Budget_in_micro_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("budget_in_micro_currency")), m_Budget_in_micro_currency));
    }
    if(m_Bid_in_micro_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid_in_micro_currency")), m_Bid_in_micro_currency));
    }
    if(m_Budget_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("budget_type")), m_Budget_type));
    }
    if(m_Start_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_time")), m_Start_time));
    }
    if(m_End_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_time")), m_End_time));
    }
    if(m_Targeting_specIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_spec")), m_Targeting_spec));
    }
    if(m_Lifetime_frequency_capIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lifetime_frequency_cap")), m_Lifetime_frequency_cap));
    }
    if(m_Tracking_urlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracking_urls")), m_Tracking_urls));
    }
    if(m_Auto_targeting_enabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("auto_targeting_enabled")), m_Auto_targeting_enabled));
    }
    if(m_Placement_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placement_group")), m_Placement_group));
    }
    if(m_Pacing_delivery_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pacing_delivery_type")), m_Pacing_delivery_type));
    }
    if(m_Conversion_learning_mode_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_learning_mode_type")), m_Conversion_learning_mode_type));
    }
    if(m_Summary_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_status")), m_Summary_status));
    }
    if(m_Feed_profile_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_profile_id")), m_Feed_profile_id));
    }
}

bool AdGroupResponse_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        EntityStatus refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("budget_in_micro_currency"))))
    {
        int32_t refVal_budget_in_micro_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("budget_in_micro_currency"))), refVal_budget_in_micro_currency );
        setBudgetInMicroCurrency(refVal_budget_in_micro_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid_in_micro_currency"))))
    {
        int32_t refVal_bid_in_micro_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid_in_micro_currency"))), refVal_bid_in_micro_currency );
        setBidInMicroCurrency(refVal_bid_in_micro_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("budget_type"))))
    {
        utility::string_t refVal_budget_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("budget_type"))), refVal_budget_type );
        setBudgetType(refVal_budget_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_time"))))
    {
        int32_t refVal_start_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_time"))), refVal_start_time );
        setStartTime(refVal_start_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_time"))))
    {
        int32_t refVal_end_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_time"))), refVal_end_time );
        setEndTime(refVal_end_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        std::map<utility::string_t, std::vector<utility::string_t>> refVal_targeting_spec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_spec"))), refVal_targeting_spec );
        setTargetingSpec(refVal_targeting_spec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lifetime_frequency_cap"))))
    {
        int32_t refVal_lifetime_frequency_cap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lifetime_frequency_cap"))), refVal_lifetime_frequency_cap );
        setLifetimeFrequencyCap(refVal_lifetime_frequency_cap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracking_urls"))))
    {
        std::shared_ptr<TrackingUrls> refVal_tracking_urls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracking_urls"))), refVal_tracking_urls );
        setTrackingUrls(refVal_tracking_urls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))))
    {
        bool refVal_auto_targeting_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("auto_targeting_enabled"))), refVal_auto_targeting_enabled );
        setAutoTargetingEnabled(refVal_auto_targeting_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placement_group"))))
    {
        PlacementGroupType refVal_placement_group;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placement_group"))), refVal_placement_group );
        setPlacementGroup(refVal_placement_group);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pacing_delivery_type"))))
    {
        PacingDeliveryType refVal_pacing_delivery_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pacing_delivery_type"))), refVal_pacing_delivery_type );
        setPacingDeliveryType(refVal_pacing_delivery_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_learning_mode_type"))))
    {
        utility::string_t refVal_conversion_learning_mode_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_learning_mode_type"))), refVal_conversion_learning_mode_type );
        setConversionLearningModeType(refVal_conversion_learning_mode_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_status"))))
    {
        AdGroupSummaryStatus refVal_summary_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_status"))), refVal_summary_status );
        setSummaryStatus(refVal_summary_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        utility::string_t refVal_feed_profile_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_profile_id"))), refVal_feed_profile_id );
        setFeedProfileId(refVal_feed_profile_id);
    }
    return ok;
}

utility::string_t AdGroupResponse_allOf::getName() const
{
    return m_Name;
}

void AdGroupResponse_allOf::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AdGroupResponse_allOf::nameIsSet() const
{
    return m_NameIsSet;
}

void AdGroupResponse_allOf::unsetName()
{
    m_NameIsSet = false;
}
EntityStatus AdGroupResponse_allOf::getStatus() const
{
    return m_Status;
}

void AdGroupResponse_allOf::setStatus(const EntityStatus& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool AdGroupResponse_allOf::statusIsSet() const
{
    return m_StatusIsSet;
}

void AdGroupResponse_allOf::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t AdGroupResponse_allOf::getBudgetInMicroCurrency() const
{
    return m_Budget_in_micro_currency;
}

void AdGroupResponse_allOf::setBudgetInMicroCurrency(int32_t value)
{
    m_Budget_in_micro_currency = value;
    m_Budget_in_micro_currencyIsSet = true;
}

bool AdGroupResponse_allOf::budgetInMicroCurrencyIsSet() const
{
    return m_Budget_in_micro_currencyIsSet;
}

void AdGroupResponse_allOf::unsetBudget_in_micro_currency()
{
    m_Budget_in_micro_currencyIsSet = false;
}
int32_t AdGroupResponse_allOf::getBidInMicroCurrency() const
{
    return m_Bid_in_micro_currency;
}

void AdGroupResponse_allOf::setBidInMicroCurrency(int32_t value)
{
    m_Bid_in_micro_currency = value;
    m_Bid_in_micro_currencyIsSet = true;
}

bool AdGroupResponse_allOf::bidInMicroCurrencyIsSet() const
{
    return m_Bid_in_micro_currencyIsSet;
}

void AdGroupResponse_allOf::unsetBid_in_micro_currency()
{
    m_Bid_in_micro_currencyIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getBudgetType() const
{
    return m_Budget_type;
}

void AdGroupResponse_allOf::setBudgetType(const utility::string_t& value)
{
    m_Budget_type = value;
    m_Budget_typeIsSet = true;
}

bool AdGroupResponse_allOf::budgetTypeIsSet() const
{
    return m_Budget_typeIsSet;
}

void AdGroupResponse_allOf::unsetBudget_type()
{
    m_Budget_typeIsSet = false;
}
int32_t AdGroupResponse_allOf::getStartTime() const
{
    return m_Start_time;
}

void AdGroupResponse_allOf::setStartTime(int32_t value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}

bool AdGroupResponse_allOf::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}

void AdGroupResponse_allOf::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
int32_t AdGroupResponse_allOf::getEndTime() const
{
    return m_End_time;
}

void AdGroupResponse_allOf::setEndTime(int32_t value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}

bool AdGroupResponse_allOf::endTimeIsSet() const
{
    return m_End_timeIsSet;
}

void AdGroupResponse_allOf::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
std::map<utility::string_t, std::vector<utility::string_t>>& AdGroupResponse_allOf::getTargetingSpec()
{
    return m_Targeting_spec;
}

void AdGroupResponse_allOf::setTargetingSpec(const std::map<utility::string_t, std::vector<utility::string_t>>& value)
{
    m_Targeting_spec = value;
    m_Targeting_specIsSet = true;
}

bool AdGroupResponse_allOf::targetingSpecIsSet() const
{
    return m_Targeting_specIsSet;
}

void AdGroupResponse_allOf::unsetTargeting_spec()
{
    m_Targeting_specIsSet = false;
}
int32_t AdGroupResponse_allOf::getLifetimeFrequencyCap() const
{
    return m_Lifetime_frequency_cap;
}

void AdGroupResponse_allOf::setLifetimeFrequencyCap(int32_t value)
{
    m_Lifetime_frequency_cap = value;
    m_Lifetime_frequency_capIsSet = true;
}

bool AdGroupResponse_allOf::lifetimeFrequencyCapIsSet() const
{
    return m_Lifetime_frequency_capIsSet;
}

void AdGroupResponse_allOf::unsetLifetime_frequency_cap()
{
    m_Lifetime_frequency_capIsSet = false;
}
std::shared_ptr<TrackingUrls> AdGroupResponse_allOf::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void AdGroupResponse_allOf::setTrackingUrls(const std::shared_ptr<TrackingUrls>& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}

bool AdGroupResponse_allOf::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}

void AdGroupResponse_allOf::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
bool AdGroupResponse_allOf::isAutoTargetingEnabled() const
{
    return m_Auto_targeting_enabled;
}

void AdGroupResponse_allOf::setAutoTargetingEnabled(bool value)
{
    m_Auto_targeting_enabled = value;
    m_Auto_targeting_enabledIsSet = true;
}

bool AdGroupResponse_allOf::autoTargetingEnabledIsSet() const
{
    return m_Auto_targeting_enabledIsSet;
}

void AdGroupResponse_allOf::unsetAuto_targeting_enabled()
{
    m_Auto_targeting_enabledIsSet = false;
}
PlacementGroupType AdGroupResponse_allOf::getPlacementGroup() const
{
    return m_Placement_group;
}

void AdGroupResponse_allOf::setPlacementGroup(const PlacementGroupType& value)
{
    m_Placement_group = value;
    m_Placement_groupIsSet = true;
}

bool AdGroupResponse_allOf::placementGroupIsSet() const
{
    return m_Placement_groupIsSet;
}

void AdGroupResponse_allOf::unsetPlacement_group()
{
    m_Placement_groupIsSet = false;
}
PacingDeliveryType AdGroupResponse_allOf::getPacingDeliveryType() const
{
    return m_Pacing_delivery_type;
}

void AdGroupResponse_allOf::setPacingDeliveryType(const PacingDeliveryType& value)
{
    m_Pacing_delivery_type = value;
    m_Pacing_delivery_typeIsSet = true;
}

bool AdGroupResponse_allOf::pacingDeliveryTypeIsSet() const
{
    return m_Pacing_delivery_typeIsSet;
}

void AdGroupResponse_allOf::unsetPacing_delivery_type()
{
    m_Pacing_delivery_typeIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getConversionLearningModeType() const
{
    return m_Conversion_learning_mode_type;
}

void AdGroupResponse_allOf::setConversionLearningModeType(const utility::string_t& value)
{
    m_Conversion_learning_mode_type = value;
    m_Conversion_learning_mode_typeIsSet = true;
}

bool AdGroupResponse_allOf::conversionLearningModeTypeIsSet() const
{
    return m_Conversion_learning_mode_typeIsSet;
}

void AdGroupResponse_allOf::unsetConversion_learning_mode_type()
{
    m_Conversion_learning_mode_typeIsSet = false;
}
AdGroupSummaryStatus AdGroupResponse_allOf::getSummaryStatus() const
{
    return m_Summary_status;
}

void AdGroupResponse_allOf::setSummaryStatus(const AdGroupSummaryStatus& value)
{
    m_Summary_status = value;
    m_Summary_statusIsSet = true;
}

bool AdGroupResponse_allOf::summaryStatusIsSet() const
{
    return m_Summary_statusIsSet;
}

void AdGroupResponse_allOf::unsetSummary_status()
{
    m_Summary_statusIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getFeedProfileId() const
{
    return m_Feed_profile_id;
}

void AdGroupResponse_allOf::setFeedProfileId(const utility::string_t& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}

bool AdGroupResponse_allOf::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}

void AdGroupResponse_allOf::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
}
}
}
}


