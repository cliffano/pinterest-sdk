/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedIngestionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CatalogsFeedIngestionInfo::CatalogsFeedIngestionInfo()
{
    m_In_stock = 0;
    m_In_stockIsSet = false;
    m_Out_of_stock = 0;
    m_Out_of_stockIsSet = false;
    m_Preorder = 0;
    m_PreorderIsSet = false;
}

CatalogsFeedIngestionInfo::~CatalogsFeedIngestionInfo()
{
}

void CatalogsFeedIngestionInfo::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedIngestionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_In_stockIsSet)
    {
        val[utility::conversions::to_string_t(U("in_stock"))] = ModelBase::toJson(m_In_stock);
    }
    if(m_Out_of_stockIsSet)
    {
        val[utility::conversions::to_string_t(U("out_of_stock"))] = ModelBase::toJson(m_Out_of_stock);
    }
    if(m_PreorderIsSet)
    {
        val[utility::conversions::to_string_t(U("preorder"))] = ModelBase::toJson(m_Preorder);
    }

    return val;
}

bool CatalogsFeedIngestionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("in_stock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("in_stock")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_in_stock;
            ok &= ModelBase::fromJson(fieldValue, refVal_in_stock);
            setInStock(refVal_in_stock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("out_of_stock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("out_of_stock")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_out_of_stock;
            ok &= ModelBase::fromJson(fieldValue, refVal_out_of_stock);
            setOutOfStock(refVal_out_of_stock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preorder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preorder")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_preorder;
            ok &= ModelBase::fromJson(fieldValue, refVal_preorder);
            setPreorder(refVal_preorder);
        }
    }
    return ok;
}

void CatalogsFeedIngestionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_In_stockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("in_stock")), m_In_stock));
    }
    if(m_Out_of_stockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("out_of_stock")), m_Out_of_stock));
    }
    if(m_PreorderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preorder")), m_Preorder));
    }
}

bool CatalogsFeedIngestionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("in_stock"))))
    {
        int32_t refVal_in_stock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("in_stock"))), refVal_in_stock );
        setInStock(refVal_in_stock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("out_of_stock"))))
    {
        int32_t refVal_out_of_stock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("out_of_stock"))), refVal_out_of_stock );
        setOutOfStock(refVal_out_of_stock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preorder"))))
    {
        int32_t refVal_preorder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preorder"))), refVal_preorder );
        setPreorder(refVal_preorder);
    }
    return ok;
}

int32_t CatalogsFeedIngestionInfo::getInStock() const
{
    return m_In_stock;
}

void CatalogsFeedIngestionInfo::setInStock(int32_t value)
{
    m_In_stock = value;
    m_In_stockIsSet = true;
}

bool CatalogsFeedIngestionInfo::inStockIsSet() const
{
    return m_In_stockIsSet;
}

void CatalogsFeedIngestionInfo::unsetIn_stock()
{
    m_In_stockIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getOutOfStock() const
{
    return m_Out_of_stock;
}

void CatalogsFeedIngestionInfo::setOutOfStock(int32_t value)
{
    m_Out_of_stock = value;
    m_Out_of_stockIsSet = true;
}

bool CatalogsFeedIngestionInfo::outOfStockIsSet() const
{
    return m_Out_of_stockIsSet;
}

void CatalogsFeedIngestionInfo::unsetOut_of_stock()
{
    m_Out_of_stockIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getPreorder() const
{
    return m_Preorder;
}

void CatalogsFeedIngestionInfo::setPreorder(int32_t value)
{
    m_Preorder = value;
    m_PreorderIsSet = true;
}

bool CatalogsFeedIngestionInfo::preorderIsSet() const
{
    return m_PreorderIsSet;
}

void CatalogsFeedIngestionInfo::unsetPreorder()
{
    m_PreorderIsSet = false;
}
}
}
}
}


