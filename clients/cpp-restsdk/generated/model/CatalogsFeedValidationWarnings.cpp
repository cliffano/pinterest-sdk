/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedValidationWarnings.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CatalogsFeedValidationWarnings::CatalogsFeedValidationWarnings()
{
    m_Title_length_too_long = 0;
    m_Title_length_too_longIsSet = false;
    m_Description_length_too_long = 0;
    m_Description_length_too_longIsSet = false;
    m_Gender_invalid = 0;
    m_Gender_invalidIsSet = false;
    m_Age_group_invalid = 0;
    m_Age_group_invalidIsSet = false;
    m_Size_type_invalid = 0;
    m_Size_type_invalidIsSet = false;
    m_Link_format_warning = 0;
    m_Link_format_warningIsSet = false;
    m_Duplicate_products = 0;
    m_Duplicate_productsIsSet = false;
    m_Duplicate_links = 0;
    m_Duplicate_linksIsSet = false;
    m_Sales_price_invalid = 0;
    m_Sales_price_invalidIsSet = false;
    m_Product_category_depth_warning = 0;
    m_Product_category_depth_warningIsSet = false;
    m_Adwords_same_as_link = 0;
    m_Adwords_same_as_linkIsSet = false;
    m_Duplicate_headers = 0;
    m_Duplicate_headersIsSet = false;
    m_Fetch_same_signature = 0;
    m_Fetch_same_signatureIsSet = false;
    m_Adwords_format_warning = 0;
    m_Adwords_format_warningIsSet = false;
    m_Additional_image_link_warning = 0;
    m_Additional_image_link_warningIsSet = false;
    m_Image_link_warning = 0;
    m_Image_link_warningIsSet = false;
    m_Shipping_invalid = 0;
    m_Shipping_invalidIsSet = false;
    m_Tax_invalid = 0;
    m_Tax_invalidIsSet = false;
    m_Shipping_weight_invalid = 0;
    m_Shipping_weight_invalidIsSet = false;
    m_Expiration_date_invalid = 0;
    m_Expiration_date_invalidIsSet = false;
    m_Availability_date_invalid = 0;
    m_Availability_date_invalidIsSet = false;
    m_Sale_date_invalid = 0;
    m_Sale_date_invalidIsSet = false;
    m_Weight_unit_invalid = 0;
    m_Weight_unit_invalidIsSet = false;
    m_Is_bundle_invalid = 0;
    m_Is_bundle_invalidIsSet = false;
    m_Updated_time_invalid = 0;
    m_Updated_time_invalidIsSet = false;
    m_Custom_label_length_too_long = 0;
    m_Custom_label_length_too_longIsSet = false;
    m_Product_type_length_too_long = 0;
    m_Product_type_length_too_longIsSet = false;
    m_Too_many_additional_image_links = 0;
    m_Too_many_additional_image_linksIsSet = false;
    m_Multipack_invalid = 0;
    m_Multipack_invalidIsSet = false;
    m_Indexed_product_count_large_delta = 0;
    m_Indexed_product_count_large_deltaIsSet = false;
    m_Item_additional_image_download_failure = 0;
    m_Item_additional_image_download_failureIsSet = false;
    m_Optional_product_category_missing = 0;
    m_Optional_product_category_missingIsSet = false;
    m_Optional_product_category_invalid = 0;
    m_Optional_product_category_invalidIsSet = false;
    m_Optional_condition_missing = 0;
    m_Optional_condition_missingIsSet = false;
    m_Optional_condition_invalid = 0;
    m_Optional_condition_invalidIsSet = false;
    m_Ios_deep_link_invalid = 0;
    m_Ios_deep_link_invalidIsSet = false;
    m_Android_deep_link_invalid = 0;
    m_Android_deep_link_invalidIsSet = false;
    m_Availability_normalized = 0;
    m_Availability_normalizedIsSet = false;
    m_Condition_normalized = 0;
    m_Condition_normalizedIsSet = false;
    m_Gender_normalized = 0;
    m_Gender_normalizedIsSet = false;
    m_Size_type_normalized = 0;
    m_Size_type_normalizedIsSet = false;
    m_Age_group_normalized = 0;
    m_Age_group_normalizedIsSet = false;
    m_Utm_source_auto_corrected = 0;
    m_Utm_source_auto_correctedIsSet = false;
    m_Country_does_not_map_to_currency = 0;
    m_Country_does_not_map_to_currencyIsSet = false;
    m_Min_ad_price_invalid = 0;
    m_Min_ad_price_invalidIsSet = false;
}

CatalogsFeedValidationWarnings::~CatalogsFeedValidationWarnings()
{
}

void CatalogsFeedValidationWarnings::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedValidationWarnings::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Title_length_too_longIsSet)
    {
        val[utility::conversions::to_string_t(U("title_length_too_long"))] = ModelBase::toJson(m_Title_length_too_long);
    }
    if(m_Description_length_too_longIsSet)
    {
        val[utility::conversions::to_string_t(U("description_length_too_long"))] = ModelBase::toJson(m_Description_length_too_long);
    }
    if(m_Gender_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("gender_invalid"))] = ModelBase::toJson(m_Gender_invalid);
    }
    if(m_Age_group_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("age_group_invalid"))] = ModelBase::toJson(m_Age_group_invalid);
    }
    if(m_Size_type_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("size_type_invalid"))] = ModelBase::toJson(m_Size_type_invalid);
    }
    if(m_Link_format_warningIsSet)
    {
        val[utility::conversions::to_string_t(U("link_format_warning"))] = ModelBase::toJson(m_Link_format_warning);
    }
    if(m_Duplicate_productsIsSet)
    {
        val[utility::conversions::to_string_t(U("duplicate_products"))] = ModelBase::toJson(m_Duplicate_products);
    }
    if(m_Duplicate_linksIsSet)
    {
        val[utility::conversions::to_string_t(U("duplicate_links"))] = ModelBase::toJson(m_Duplicate_links);
    }
    if(m_Sales_price_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("sales_price_invalid"))] = ModelBase::toJson(m_Sales_price_invalid);
    }
    if(m_Product_category_depth_warningIsSet)
    {
        val[utility::conversions::to_string_t(U("product_category_depth_warning"))] = ModelBase::toJson(m_Product_category_depth_warning);
    }
    if(m_Adwords_same_as_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("adwords_same_as_link"))] = ModelBase::toJson(m_Adwords_same_as_link);
    }
    if(m_Duplicate_headersIsSet)
    {
        val[utility::conversions::to_string_t(U("duplicate_headers"))] = ModelBase::toJson(m_Duplicate_headers);
    }
    if(m_Fetch_same_signatureIsSet)
    {
        val[utility::conversions::to_string_t(U("fetch_same_signature"))] = ModelBase::toJson(m_Fetch_same_signature);
    }
    if(m_Adwords_format_warningIsSet)
    {
        val[utility::conversions::to_string_t(U("adwords_format_warning"))] = ModelBase::toJson(m_Adwords_format_warning);
    }
    if(m_Additional_image_link_warningIsSet)
    {
        val[utility::conversions::to_string_t(U("additional_image_link_warning"))] = ModelBase::toJson(m_Additional_image_link_warning);
    }
    if(m_Image_link_warningIsSet)
    {
        val[utility::conversions::to_string_t(U("image_link_warning"))] = ModelBase::toJson(m_Image_link_warning);
    }
    if(m_Shipping_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_invalid"))] = ModelBase::toJson(m_Shipping_invalid);
    }
    if(m_Tax_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("tax_invalid"))] = ModelBase::toJson(m_Tax_invalid);
    }
    if(m_Shipping_weight_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_weight_invalid"))] = ModelBase::toJson(m_Shipping_weight_invalid);
    }
    if(m_Expiration_date_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration_date_invalid"))] = ModelBase::toJson(m_Expiration_date_invalid);
    }
    if(m_Availability_date_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("availability_date_invalid"))] = ModelBase::toJson(m_Availability_date_invalid);
    }
    if(m_Sale_date_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("sale_date_invalid"))] = ModelBase::toJson(m_Sale_date_invalid);
    }
    if(m_Weight_unit_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("weight_unit_invalid"))] = ModelBase::toJson(m_Weight_unit_invalid);
    }
    if(m_Is_bundle_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("is_bundle_invalid"))] = ModelBase::toJson(m_Is_bundle_invalid);
    }
    if(m_Updated_time_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time_invalid"))] = ModelBase::toJson(m_Updated_time_invalid);
    }
    if(m_Custom_label_length_too_longIsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_length_too_long"))] = ModelBase::toJson(m_Custom_label_length_too_long);
    }
    if(m_Product_type_length_too_longIsSet)
    {
        val[utility::conversions::to_string_t(U("product_type_length_too_long"))] = ModelBase::toJson(m_Product_type_length_too_long);
    }
    if(m_Too_many_additional_image_linksIsSet)
    {
        val[utility::conversions::to_string_t(U("too_many_additional_image_links"))] = ModelBase::toJson(m_Too_many_additional_image_links);
    }
    if(m_Multipack_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("multipack_invalid"))] = ModelBase::toJson(m_Multipack_invalid);
    }
    if(m_Indexed_product_count_large_deltaIsSet)
    {
        val[utility::conversions::to_string_t(U("indexed_product_count_large_delta"))] = ModelBase::toJson(m_Indexed_product_count_large_delta);
    }
    if(m_Item_additional_image_download_failureIsSet)
    {
        val[utility::conversions::to_string_t(U("item_additional_image_download_failure"))] = ModelBase::toJson(m_Item_additional_image_download_failure);
    }
    if(m_Optional_product_category_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("optional_product_category_missing"))] = ModelBase::toJson(m_Optional_product_category_missing);
    }
    if(m_Optional_product_category_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("optional_product_category_invalid"))] = ModelBase::toJson(m_Optional_product_category_invalid);
    }
    if(m_Optional_condition_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("optional_condition_missing"))] = ModelBase::toJson(m_Optional_condition_missing);
    }
    if(m_Optional_condition_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("optional_condition_invalid"))] = ModelBase::toJson(m_Optional_condition_invalid);
    }
    if(m_Ios_deep_link_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_deep_link_invalid"))] = ModelBase::toJson(m_Ios_deep_link_invalid);
    }
    if(m_Android_deep_link_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("android_deep_link_invalid"))] = ModelBase::toJson(m_Android_deep_link_invalid);
    }
    if(m_Availability_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("availability_normalized"))] = ModelBase::toJson(m_Availability_normalized);
    }
    if(m_Condition_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("condition_normalized"))] = ModelBase::toJson(m_Condition_normalized);
    }
    if(m_Gender_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("gender_normalized"))] = ModelBase::toJson(m_Gender_normalized);
    }
    if(m_Size_type_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("size_type_normalized"))] = ModelBase::toJson(m_Size_type_normalized);
    }
    if(m_Age_group_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("age_group_normalized"))] = ModelBase::toJson(m_Age_group_normalized);
    }
    if(m_Utm_source_auto_correctedIsSet)
    {
        val[utility::conversions::to_string_t(U("utm_source_auto_corrected"))] = ModelBase::toJson(m_Utm_source_auto_corrected);
    }
    if(m_Country_does_not_map_to_currencyIsSet)
    {
        val[utility::conversions::to_string_t(U("country_does_not_map_to_currency"))] = ModelBase::toJson(m_Country_does_not_map_to_currency);
    }
    if(m_Min_ad_price_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("min_ad_price_invalid"))] = ModelBase::toJson(m_Min_ad_price_invalid);
    }

    return val;
}

bool CatalogsFeedValidationWarnings::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("title_length_too_long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title_length_too_long")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_title_length_too_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_title_length_too_long);
            setTitleLengthTooLong(refVal_title_length_too_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description_length_too_long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description_length_too_long")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_description_length_too_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_description_length_too_long);
            setDescriptionLengthTooLong(refVal_description_length_too_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gender_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gender_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_gender_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_gender_invalid);
            setGenderInvalid(refVal_gender_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("age_group_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("age_group_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_age_group_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_age_group_invalid);
            setAgeGroupInvalid(refVal_age_group_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_type_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_type_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_size_type_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_size_type_invalid);
            setSizeTypeInvalid(refVal_size_type_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link_format_warning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link_format_warning")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_link_format_warning;
            ok &= ModelBase::fromJson(fieldValue, refVal_link_format_warning);
            setLinkFormatWarning(refVal_link_format_warning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duplicate_products"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duplicate_products")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_duplicate_products;
            ok &= ModelBase::fromJson(fieldValue, refVal_duplicate_products);
            setDuplicateProducts(refVal_duplicate_products);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duplicate_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duplicate_links")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_duplicate_links;
            ok &= ModelBase::fromJson(fieldValue, refVal_duplicate_links);
            setDuplicateLinks(refVal_duplicate_links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sales_price_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sales_price_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_sales_price_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_sales_price_invalid);
            setSalesPriceInvalid(refVal_sales_price_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_category_depth_warning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_category_depth_warning")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_product_category_depth_warning;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_category_depth_warning);
            setProductCategoryDepthWarning(refVal_product_category_depth_warning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adwords_same_as_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adwords_same_as_link")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_adwords_same_as_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_adwords_same_as_link);
            setAdwordsSameAsLink(refVal_adwords_same_as_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duplicate_headers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duplicate_headers")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_duplicate_headers;
            ok &= ModelBase::fromJson(fieldValue, refVal_duplicate_headers);
            setDuplicateHeaders(refVal_duplicate_headers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fetch_same_signature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fetch_same_signature")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fetch_same_signature;
            ok &= ModelBase::fromJson(fieldValue, refVal_fetch_same_signature);
            setFetchSameSignature(refVal_fetch_same_signature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adwords_format_warning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adwords_format_warning")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_adwords_format_warning;
            ok &= ModelBase::fromJson(fieldValue, refVal_adwords_format_warning);
            setAdwordsFormatWarning(refVal_adwords_format_warning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("additional_image_link_warning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additional_image_link_warning")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_additional_image_link_warning;
            ok &= ModelBase::fromJson(fieldValue, refVal_additional_image_link_warning);
            setAdditionalImageLinkWarning(refVal_additional_image_link_warning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image_link_warning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_link_warning")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_image_link_warning;
            ok &= ModelBase::fromJson(fieldValue, refVal_image_link_warning);
            setImageLinkWarning(refVal_image_link_warning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_shipping_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_shipping_invalid);
            setShippingInvalid(refVal_shipping_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tax_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tax_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_tax_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_tax_invalid);
            setTaxInvalid(refVal_tax_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_weight_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_weight_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_shipping_weight_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_shipping_weight_invalid);
            setShippingWeightInvalid(refVal_shipping_weight_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration_date_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration_date_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_expiration_date_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiration_date_invalid);
            setExpirationDateInvalid(refVal_expiration_date_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availability_date_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availability_date_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_availability_date_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_availability_date_invalid);
            setAvailabilityDateInvalid(refVal_availability_date_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sale_date_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sale_date_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_sale_date_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_sale_date_invalid);
            setSaleDateInvalid(refVal_sale_date_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weight_unit_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weight_unit_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_weight_unit_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_weight_unit_invalid);
            setWeightUnitInvalid(refVal_weight_unit_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_bundle_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_bundle_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_is_bundle_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_bundle_invalid);
            setIsBundleInvalid(refVal_is_bundle_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_updated_time_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_updated_time_invalid);
            setUpdatedTimeInvalid(refVal_updated_time_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_length_too_long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_length_too_long")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_custom_label_length_too_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_custom_label_length_too_long);
            setCustomLabelLengthTooLong(refVal_custom_label_length_too_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_type_length_too_long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_type_length_too_long")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_product_type_length_too_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_type_length_too_long);
            setProductTypeLengthTooLong(refVal_product_type_length_too_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("too_many_additional_image_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("too_many_additional_image_links")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_too_many_additional_image_links;
            ok &= ModelBase::fromJson(fieldValue, refVal_too_many_additional_image_links);
            setTooManyAdditionalImageLinks(refVal_too_many_additional_image_links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("multipack_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("multipack_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_multipack_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_multipack_invalid);
            setMultipackInvalid(refVal_multipack_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("indexed_product_count_large_delta"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("indexed_product_count_large_delta")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_indexed_product_count_large_delta;
            ok &= ModelBase::fromJson(fieldValue, refVal_indexed_product_count_large_delta);
            setIndexedProductCountLargeDelta(refVal_indexed_product_count_large_delta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item_additional_image_download_failure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_additional_image_download_failure")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_item_additional_image_download_failure;
            ok &= ModelBase::fromJson(fieldValue, refVal_item_additional_image_download_failure);
            setItemAdditionalImageDownloadFailure(refVal_item_additional_image_download_failure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("optional_product_category_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optional_product_category_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_optional_product_category_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_optional_product_category_missing);
            setOptionalProductCategoryMissing(refVal_optional_product_category_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("optional_product_category_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optional_product_category_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_optional_product_category_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_optional_product_category_invalid);
            setOptionalProductCategoryInvalid(refVal_optional_product_category_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("optional_condition_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optional_condition_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_optional_condition_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_optional_condition_missing);
            setOptionalConditionMissing(refVal_optional_condition_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("optional_condition_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optional_condition_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_optional_condition_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_optional_condition_invalid);
            setOptionalConditionInvalid(refVal_optional_condition_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_deep_link_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_deep_link_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ios_deep_link_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_ios_deep_link_invalid);
            setIosDeepLinkInvalid(refVal_ios_deep_link_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_deep_link_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_deep_link_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_android_deep_link_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_deep_link_invalid);
            setAndroidDeepLinkInvalid(refVal_android_deep_link_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availability_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availability_normalized")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_availability_normalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_availability_normalized);
            setAvailabilityNormalized(refVal_availability_normalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("condition_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("condition_normalized")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_condition_normalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_condition_normalized);
            setConditionNormalized(refVal_condition_normalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gender_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gender_normalized")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_gender_normalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_gender_normalized);
            setGenderNormalized(refVal_gender_normalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_type_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_type_normalized")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_size_type_normalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_size_type_normalized);
            setSizeTypeNormalized(refVal_size_type_normalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("age_group_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("age_group_normalized")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_age_group_normalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_age_group_normalized);
            setAgeGroupNormalized(refVal_age_group_normalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("utm_source_auto_corrected"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("utm_source_auto_corrected")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_utm_source_auto_corrected;
            ok &= ModelBase::fromJson(fieldValue, refVal_utm_source_auto_corrected);
            setUtmSourceAutoCorrected(refVal_utm_source_auto_corrected);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country_does_not_map_to_currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country_does_not_map_to_currency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_country_does_not_map_to_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_country_does_not_map_to_currency);
            setCountryDoesNotMapToCurrency(refVal_country_does_not_map_to_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_ad_price_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_ad_price_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_min_ad_price_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_min_ad_price_invalid);
            setMinAdPriceInvalid(refVal_min_ad_price_invalid);
        }
    }
    return ok;
}

void CatalogsFeedValidationWarnings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Title_length_too_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title_length_too_long")), m_Title_length_too_long));
    }
    if(m_Description_length_too_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description_length_too_long")), m_Description_length_too_long));
    }
    if(m_Gender_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gender_invalid")), m_Gender_invalid));
    }
    if(m_Age_group_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("age_group_invalid")), m_Age_group_invalid));
    }
    if(m_Size_type_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_type_invalid")), m_Size_type_invalid));
    }
    if(m_Link_format_warningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link_format_warning")), m_Link_format_warning));
    }
    if(m_Duplicate_productsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duplicate_products")), m_Duplicate_products));
    }
    if(m_Duplicate_linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duplicate_links")), m_Duplicate_links));
    }
    if(m_Sales_price_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sales_price_invalid")), m_Sales_price_invalid));
    }
    if(m_Product_category_depth_warningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_category_depth_warning")), m_Product_category_depth_warning));
    }
    if(m_Adwords_same_as_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adwords_same_as_link")), m_Adwords_same_as_link));
    }
    if(m_Duplicate_headersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duplicate_headers")), m_Duplicate_headers));
    }
    if(m_Fetch_same_signatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fetch_same_signature")), m_Fetch_same_signature));
    }
    if(m_Adwords_format_warningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adwords_format_warning")), m_Adwords_format_warning));
    }
    if(m_Additional_image_link_warningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additional_image_link_warning")), m_Additional_image_link_warning));
    }
    if(m_Image_link_warningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_link_warning")), m_Image_link_warning));
    }
    if(m_Shipping_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_invalid")), m_Shipping_invalid));
    }
    if(m_Tax_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tax_invalid")), m_Tax_invalid));
    }
    if(m_Shipping_weight_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_weight_invalid")), m_Shipping_weight_invalid));
    }
    if(m_Expiration_date_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration_date_invalid")), m_Expiration_date_invalid));
    }
    if(m_Availability_date_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availability_date_invalid")), m_Availability_date_invalid));
    }
    if(m_Sale_date_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sale_date_invalid")), m_Sale_date_invalid));
    }
    if(m_Weight_unit_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weight_unit_invalid")), m_Weight_unit_invalid));
    }
    if(m_Is_bundle_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_bundle_invalid")), m_Is_bundle_invalid));
    }
    if(m_Updated_time_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time_invalid")), m_Updated_time_invalid));
    }
    if(m_Custom_label_length_too_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_length_too_long")), m_Custom_label_length_too_long));
    }
    if(m_Product_type_length_too_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_type_length_too_long")), m_Product_type_length_too_long));
    }
    if(m_Too_many_additional_image_linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("too_many_additional_image_links")), m_Too_many_additional_image_links));
    }
    if(m_Multipack_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("multipack_invalid")), m_Multipack_invalid));
    }
    if(m_Indexed_product_count_large_deltaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("indexed_product_count_large_delta")), m_Indexed_product_count_large_delta));
    }
    if(m_Item_additional_image_download_failureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_additional_image_download_failure")), m_Item_additional_image_download_failure));
    }
    if(m_Optional_product_category_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optional_product_category_missing")), m_Optional_product_category_missing));
    }
    if(m_Optional_product_category_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optional_product_category_invalid")), m_Optional_product_category_invalid));
    }
    if(m_Optional_condition_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optional_condition_missing")), m_Optional_condition_missing));
    }
    if(m_Optional_condition_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optional_condition_invalid")), m_Optional_condition_invalid));
    }
    if(m_Ios_deep_link_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_deep_link_invalid")), m_Ios_deep_link_invalid));
    }
    if(m_Android_deep_link_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_deep_link_invalid")), m_Android_deep_link_invalid));
    }
    if(m_Availability_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availability_normalized")), m_Availability_normalized));
    }
    if(m_Condition_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("condition_normalized")), m_Condition_normalized));
    }
    if(m_Gender_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gender_normalized")), m_Gender_normalized));
    }
    if(m_Size_type_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_type_normalized")), m_Size_type_normalized));
    }
    if(m_Age_group_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("age_group_normalized")), m_Age_group_normalized));
    }
    if(m_Utm_source_auto_correctedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("utm_source_auto_corrected")), m_Utm_source_auto_corrected));
    }
    if(m_Country_does_not_map_to_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country_does_not_map_to_currency")), m_Country_does_not_map_to_currency));
    }
    if(m_Min_ad_price_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_ad_price_invalid")), m_Min_ad_price_invalid));
    }
}

bool CatalogsFeedValidationWarnings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("title_length_too_long"))))
    {
        int32_t refVal_title_length_too_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title_length_too_long"))), refVal_title_length_too_long );
        setTitleLengthTooLong(refVal_title_length_too_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description_length_too_long"))))
    {
        int32_t refVal_description_length_too_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description_length_too_long"))), refVal_description_length_too_long );
        setDescriptionLengthTooLong(refVal_description_length_too_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gender_invalid"))))
    {
        int32_t refVal_gender_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gender_invalid"))), refVal_gender_invalid );
        setGenderInvalid(refVal_gender_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("age_group_invalid"))))
    {
        int32_t refVal_age_group_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("age_group_invalid"))), refVal_age_group_invalid );
        setAgeGroupInvalid(refVal_age_group_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_type_invalid"))))
    {
        int32_t refVal_size_type_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_type_invalid"))), refVal_size_type_invalid );
        setSizeTypeInvalid(refVal_size_type_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link_format_warning"))))
    {
        int32_t refVal_link_format_warning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link_format_warning"))), refVal_link_format_warning );
        setLinkFormatWarning(refVal_link_format_warning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duplicate_products"))))
    {
        int32_t refVal_duplicate_products;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duplicate_products"))), refVal_duplicate_products );
        setDuplicateProducts(refVal_duplicate_products);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duplicate_links"))))
    {
        int32_t refVal_duplicate_links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duplicate_links"))), refVal_duplicate_links );
        setDuplicateLinks(refVal_duplicate_links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sales_price_invalid"))))
    {
        int32_t refVal_sales_price_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sales_price_invalid"))), refVal_sales_price_invalid );
        setSalesPriceInvalid(refVal_sales_price_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_category_depth_warning"))))
    {
        int32_t refVal_product_category_depth_warning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_category_depth_warning"))), refVal_product_category_depth_warning );
        setProductCategoryDepthWarning(refVal_product_category_depth_warning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adwords_same_as_link"))))
    {
        int32_t refVal_adwords_same_as_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adwords_same_as_link"))), refVal_adwords_same_as_link );
        setAdwordsSameAsLink(refVal_adwords_same_as_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duplicate_headers"))))
    {
        int32_t refVal_duplicate_headers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duplicate_headers"))), refVal_duplicate_headers );
        setDuplicateHeaders(refVal_duplicate_headers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fetch_same_signature"))))
    {
        int32_t refVal_fetch_same_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fetch_same_signature"))), refVal_fetch_same_signature );
        setFetchSameSignature(refVal_fetch_same_signature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adwords_format_warning"))))
    {
        int32_t refVal_adwords_format_warning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adwords_format_warning"))), refVal_adwords_format_warning );
        setAdwordsFormatWarning(refVal_adwords_format_warning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("additional_image_link_warning"))))
    {
        int32_t refVal_additional_image_link_warning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additional_image_link_warning"))), refVal_additional_image_link_warning );
        setAdditionalImageLinkWarning(refVal_additional_image_link_warning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image_link_warning"))))
    {
        int32_t refVal_image_link_warning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_link_warning"))), refVal_image_link_warning );
        setImageLinkWarning(refVal_image_link_warning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_invalid"))))
    {
        int32_t refVal_shipping_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_invalid"))), refVal_shipping_invalid );
        setShippingInvalid(refVal_shipping_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tax_invalid"))))
    {
        int32_t refVal_tax_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tax_invalid"))), refVal_tax_invalid );
        setTaxInvalid(refVal_tax_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_weight_invalid"))))
    {
        int32_t refVal_shipping_weight_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_weight_invalid"))), refVal_shipping_weight_invalid );
        setShippingWeightInvalid(refVal_shipping_weight_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration_date_invalid"))))
    {
        int32_t refVal_expiration_date_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration_date_invalid"))), refVal_expiration_date_invalid );
        setExpirationDateInvalid(refVal_expiration_date_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availability_date_invalid"))))
    {
        int32_t refVal_availability_date_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availability_date_invalid"))), refVal_availability_date_invalid );
        setAvailabilityDateInvalid(refVal_availability_date_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sale_date_invalid"))))
    {
        int32_t refVal_sale_date_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sale_date_invalid"))), refVal_sale_date_invalid );
        setSaleDateInvalid(refVal_sale_date_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weight_unit_invalid"))))
    {
        int32_t refVal_weight_unit_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weight_unit_invalid"))), refVal_weight_unit_invalid );
        setWeightUnitInvalid(refVal_weight_unit_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_bundle_invalid"))))
    {
        int32_t refVal_is_bundle_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_bundle_invalid"))), refVal_is_bundle_invalid );
        setIsBundleInvalid(refVal_is_bundle_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time_invalid"))))
    {
        int32_t refVal_updated_time_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time_invalid"))), refVal_updated_time_invalid );
        setUpdatedTimeInvalid(refVal_updated_time_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_length_too_long"))))
    {
        int32_t refVal_custom_label_length_too_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_length_too_long"))), refVal_custom_label_length_too_long );
        setCustomLabelLengthTooLong(refVal_custom_label_length_too_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_type_length_too_long"))))
    {
        int32_t refVal_product_type_length_too_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_type_length_too_long"))), refVal_product_type_length_too_long );
        setProductTypeLengthTooLong(refVal_product_type_length_too_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("too_many_additional_image_links"))))
    {
        int32_t refVal_too_many_additional_image_links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("too_many_additional_image_links"))), refVal_too_many_additional_image_links );
        setTooManyAdditionalImageLinks(refVal_too_many_additional_image_links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("multipack_invalid"))))
    {
        int32_t refVal_multipack_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("multipack_invalid"))), refVal_multipack_invalid );
        setMultipackInvalid(refVal_multipack_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("indexed_product_count_large_delta"))))
    {
        int32_t refVal_indexed_product_count_large_delta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("indexed_product_count_large_delta"))), refVal_indexed_product_count_large_delta );
        setIndexedProductCountLargeDelta(refVal_indexed_product_count_large_delta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item_additional_image_download_failure"))))
    {
        int32_t refVal_item_additional_image_download_failure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_additional_image_download_failure"))), refVal_item_additional_image_download_failure );
        setItemAdditionalImageDownloadFailure(refVal_item_additional_image_download_failure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("optional_product_category_missing"))))
    {
        int32_t refVal_optional_product_category_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optional_product_category_missing"))), refVal_optional_product_category_missing );
        setOptionalProductCategoryMissing(refVal_optional_product_category_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("optional_product_category_invalid"))))
    {
        int32_t refVal_optional_product_category_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optional_product_category_invalid"))), refVal_optional_product_category_invalid );
        setOptionalProductCategoryInvalid(refVal_optional_product_category_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("optional_condition_missing"))))
    {
        int32_t refVal_optional_condition_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optional_condition_missing"))), refVal_optional_condition_missing );
        setOptionalConditionMissing(refVal_optional_condition_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("optional_condition_invalid"))))
    {
        int32_t refVal_optional_condition_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optional_condition_invalid"))), refVal_optional_condition_invalid );
        setOptionalConditionInvalid(refVal_optional_condition_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_deep_link_invalid"))))
    {
        int32_t refVal_ios_deep_link_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_deep_link_invalid"))), refVal_ios_deep_link_invalid );
        setIosDeepLinkInvalid(refVal_ios_deep_link_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_deep_link_invalid"))))
    {
        int32_t refVal_android_deep_link_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_deep_link_invalid"))), refVal_android_deep_link_invalid );
        setAndroidDeepLinkInvalid(refVal_android_deep_link_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availability_normalized"))))
    {
        int32_t refVal_availability_normalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availability_normalized"))), refVal_availability_normalized );
        setAvailabilityNormalized(refVal_availability_normalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("condition_normalized"))))
    {
        int32_t refVal_condition_normalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("condition_normalized"))), refVal_condition_normalized );
        setConditionNormalized(refVal_condition_normalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gender_normalized"))))
    {
        int32_t refVal_gender_normalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gender_normalized"))), refVal_gender_normalized );
        setGenderNormalized(refVal_gender_normalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_type_normalized"))))
    {
        int32_t refVal_size_type_normalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_type_normalized"))), refVal_size_type_normalized );
        setSizeTypeNormalized(refVal_size_type_normalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("age_group_normalized"))))
    {
        int32_t refVal_age_group_normalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("age_group_normalized"))), refVal_age_group_normalized );
        setAgeGroupNormalized(refVal_age_group_normalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("utm_source_auto_corrected"))))
    {
        int32_t refVal_utm_source_auto_corrected;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("utm_source_auto_corrected"))), refVal_utm_source_auto_corrected );
        setUtmSourceAutoCorrected(refVal_utm_source_auto_corrected);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country_does_not_map_to_currency"))))
    {
        int32_t refVal_country_does_not_map_to_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country_does_not_map_to_currency"))), refVal_country_does_not_map_to_currency );
        setCountryDoesNotMapToCurrency(refVal_country_does_not_map_to_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_ad_price_invalid"))))
    {
        int32_t refVal_min_ad_price_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_ad_price_invalid"))), refVal_min_ad_price_invalid );
        setMinAdPriceInvalid(refVal_min_ad_price_invalid);
    }
    return ok;
}

int32_t CatalogsFeedValidationWarnings::getTitleLengthTooLong() const
{
    return m_Title_length_too_long;
}

void CatalogsFeedValidationWarnings::setTitleLengthTooLong(int32_t value)
{
    m_Title_length_too_long = value;
    m_Title_length_too_longIsSet = true;
}

bool CatalogsFeedValidationWarnings::titleLengthTooLongIsSet() const
{
    return m_Title_length_too_longIsSet;
}

void CatalogsFeedValidationWarnings::unsetTitle_length_too_long()
{
    m_Title_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getDescriptionLengthTooLong() const
{
    return m_Description_length_too_long;
}

void CatalogsFeedValidationWarnings::setDescriptionLengthTooLong(int32_t value)
{
    m_Description_length_too_long = value;
    m_Description_length_too_longIsSet = true;
}

bool CatalogsFeedValidationWarnings::descriptionLengthTooLongIsSet() const
{
    return m_Description_length_too_longIsSet;
}

void CatalogsFeedValidationWarnings::unsetDescription_length_too_long()
{
    m_Description_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getGenderInvalid() const
{
    return m_Gender_invalid;
}

void CatalogsFeedValidationWarnings::setGenderInvalid(int32_t value)
{
    m_Gender_invalid = value;
    m_Gender_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::genderInvalidIsSet() const
{
    return m_Gender_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetGender_invalid()
{
    m_Gender_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAgeGroupInvalid() const
{
    return m_Age_group_invalid;
}

void CatalogsFeedValidationWarnings::setAgeGroupInvalid(int32_t value)
{
    m_Age_group_invalid = value;
    m_Age_group_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::ageGroupInvalidIsSet() const
{
    return m_Age_group_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetAge_group_invalid()
{
    m_Age_group_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSizeTypeInvalid() const
{
    return m_Size_type_invalid;
}

void CatalogsFeedValidationWarnings::setSizeTypeInvalid(int32_t value)
{
    m_Size_type_invalid = value;
    m_Size_type_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::sizeTypeInvalidIsSet() const
{
    return m_Size_type_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetSize_type_invalid()
{
    m_Size_type_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getLinkFormatWarning() const
{
    return m_Link_format_warning;
}

void CatalogsFeedValidationWarnings::setLinkFormatWarning(int32_t value)
{
    m_Link_format_warning = value;
    m_Link_format_warningIsSet = true;
}

bool CatalogsFeedValidationWarnings::linkFormatWarningIsSet() const
{
    return m_Link_format_warningIsSet;
}

void CatalogsFeedValidationWarnings::unsetLink_format_warning()
{
    m_Link_format_warningIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getDuplicateProducts() const
{
    return m_Duplicate_products;
}

void CatalogsFeedValidationWarnings::setDuplicateProducts(int32_t value)
{
    m_Duplicate_products = value;
    m_Duplicate_productsIsSet = true;
}

bool CatalogsFeedValidationWarnings::duplicateProductsIsSet() const
{
    return m_Duplicate_productsIsSet;
}

void CatalogsFeedValidationWarnings::unsetDuplicate_products()
{
    m_Duplicate_productsIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getDuplicateLinks() const
{
    return m_Duplicate_links;
}

void CatalogsFeedValidationWarnings::setDuplicateLinks(int32_t value)
{
    m_Duplicate_links = value;
    m_Duplicate_linksIsSet = true;
}

bool CatalogsFeedValidationWarnings::duplicateLinksIsSet() const
{
    return m_Duplicate_linksIsSet;
}

void CatalogsFeedValidationWarnings::unsetDuplicate_links()
{
    m_Duplicate_linksIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSalesPriceInvalid() const
{
    return m_Sales_price_invalid;
}

void CatalogsFeedValidationWarnings::setSalesPriceInvalid(int32_t value)
{
    m_Sales_price_invalid = value;
    m_Sales_price_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::salesPriceInvalidIsSet() const
{
    return m_Sales_price_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetSales_price_invalid()
{
    m_Sales_price_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getProductCategoryDepthWarning() const
{
    return m_Product_category_depth_warning;
}

void CatalogsFeedValidationWarnings::setProductCategoryDepthWarning(int32_t value)
{
    m_Product_category_depth_warning = value;
    m_Product_category_depth_warningIsSet = true;
}

bool CatalogsFeedValidationWarnings::productCategoryDepthWarningIsSet() const
{
    return m_Product_category_depth_warningIsSet;
}

void CatalogsFeedValidationWarnings::unsetProduct_category_depth_warning()
{
    m_Product_category_depth_warningIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAdwordsSameAsLink() const
{
    return m_Adwords_same_as_link;
}

void CatalogsFeedValidationWarnings::setAdwordsSameAsLink(int32_t value)
{
    m_Adwords_same_as_link = value;
    m_Adwords_same_as_linkIsSet = true;
}

bool CatalogsFeedValidationWarnings::adwordsSameAsLinkIsSet() const
{
    return m_Adwords_same_as_linkIsSet;
}

void CatalogsFeedValidationWarnings::unsetAdwords_same_as_link()
{
    m_Adwords_same_as_linkIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getDuplicateHeaders() const
{
    return m_Duplicate_headers;
}

void CatalogsFeedValidationWarnings::setDuplicateHeaders(int32_t value)
{
    m_Duplicate_headers = value;
    m_Duplicate_headersIsSet = true;
}

bool CatalogsFeedValidationWarnings::duplicateHeadersIsSet() const
{
    return m_Duplicate_headersIsSet;
}

void CatalogsFeedValidationWarnings::unsetDuplicate_headers()
{
    m_Duplicate_headersIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getFetchSameSignature() const
{
    return m_Fetch_same_signature;
}

void CatalogsFeedValidationWarnings::setFetchSameSignature(int32_t value)
{
    m_Fetch_same_signature = value;
    m_Fetch_same_signatureIsSet = true;
}

bool CatalogsFeedValidationWarnings::fetchSameSignatureIsSet() const
{
    return m_Fetch_same_signatureIsSet;
}

void CatalogsFeedValidationWarnings::unsetFetch_same_signature()
{
    m_Fetch_same_signatureIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAdwordsFormatWarning() const
{
    return m_Adwords_format_warning;
}

void CatalogsFeedValidationWarnings::setAdwordsFormatWarning(int32_t value)
{
    m_Adwords_format_warning = value;
    m_Adwords_format_warningIsSet = true;
}

bool CatalogsFeedValidationWarnings::adwordsFormatWarningIsSet() const
{
    return m_Adwords_format_warningIsSet;
}

void CatalogsFeedValidationWarnings::unsetAdwords_format_warning()
{
    m_Adwords_format_warningIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAdditionalImageLinkWarning() const
{
    return m_Additional_image_link_warning;
}

void CatalogsFeedValidationWarnings::setAdditionalImageLinkWarning(int32_t value)
{
    m_Additional_image_link_warning = value;
    m_Additional_image_link_warningIsSet = true;
}

bool CatalogsFeedValidationWarnings::additionalImageLinkWarningIsSet() const
{
    return m_Additional_image_link_warningIsSet;
}

void CatalogsFeedValidationWarnings::unsetAdditional_image_link_warning()
{
    m_Additional_image_link_warningIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getImageLinkWarning() const
{
    return m_Image_link_warning;
}

void CatalogsFeedValidationWarnings::setImageLinkWarning(int32_t value)
{
    m_Image_link_warning = value;
    m_Image_link_warningIsSet = true;
}

bool CatalogsFeedValidationWarnings::imageLinkWarningIsSet() const
{
    return m_Image_link_warningIsSet;
}

void CatalogsFeedValidationWarnings::unsetImage_link_warning()
{
    m_Image_link_warningIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getShippingInvalid() const
{
    return m_Shipping_invalid;
}

void CatalogsFeedValidationWarnings::setShippingInvalid(int32_t value)
{
    m_Shipping_invalid = value;
    m_Shipping_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::shippingInvalidIsSet() const
{
    return m_Shipping_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetShipping_invalid()
{
    m_Shipping_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getTaxInvalid() const
{
    return m_Tax_invalid;
}

void CatalogsFeedValidationWarnings::setTaxInvalid(int32_t value)
{
    m_Tax_invalid = value;
    m_Tax_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::taxInvalidIsSet() const
{
    return m_Tax_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetTax_invalid()
{
    m_Tax_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getShippingWeightInvalid() const
{
    return m_Shipping_weight_invalid;
}

void CatalogsFeedValidationWarnings::setShippingWeightInvalid(int32_t value)
{
    m_Shipping_weight_invalid = value;
    m_Shipping_weight_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::shippingWeightInvalidIsSet() const
{
    return m_Shipping_weight_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetShipping_weight_invalid()
{
    m_Shipping_weight_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getExpirationDateInvalid() const
{
    return m_Expiration_date_invalid;
}

void CatalogsFeedValidationWarnings::setExpirationDateInvalid(int32_t value)
{
    m_Expiration_date_invalid = value;
    m_Expiration_date_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::expirationDateInvalidIsSet() const
{
    return m_Expiration_date_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetExpiration_date_invalid()
{
    m_Expiration_date_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAvailabilityDateInvalid() const
{
    return m_Availability_date_invalid;
}

void CatalogsFeedValidationWarnings::setAvailabilityDateInvalid(int32_t value)
{
    m_Availability_date_invalid = value;
    m_Availability_date_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::availabilityDateInvalidIsSet() const
{
    return m_Availability_date_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetAvailability_date_invalid()
{
    m_Availability_date_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSaleDateInvalid() const
{
    return m_Sale_date_invalid;
}

void CatalogsFeedValidationWarnings::setSaleDateInvalid(int32_t value)
{
    m_Sale_date_invalid = value;
    m_Sale_date_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::saleDateInvalidIsSet() const
{
    return m_Sale_date_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetSale_date_invalid()
{
    m_Sale_date_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getWeightUnitInvalid() const
{
    return m_Weight_unit_invalid;
}

void CatalogsFeedValidationWarnings::setWeightUnitInvalid(int32_t value)
{
    m_Weight_unit_invalid = value;
    m_Weight_unit_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::weightUnitInvalidIsSet() const
{
    return m_Weight_unit_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetWeight_unit_invalid()
{
    m_Weight_unit_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getIsBundleInvalid() const
{
    return m_Is_bundle_invalid;
}

void CatalogsFeedValidationWarnings::setIsBundleInvalid(int32_t value)
{
    m_Is_bundle_invalid = value;
    m_Is_bundle_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::isBundleInvalidIsSet() const
{
    return m_Is_bundle_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetIs_bundle_invalid()
{
    m_Is_bundle_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getUpdatedTimeInvalid() const
{
    return m_Updated_time_invalid;
}

void CatalogsFeedValidationWarnings::setUpdatedTimeInvalid(int32_t value)
{
    m_Updated_time_invalid = value;
    m_Updated_time_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::updatedTimeInvalidIsSet() const
{
    return m_Updated_time_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetUpdated_time_invalid()
{
    m_Updated_time_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getCustomLabelLengthTooLong() const
{
    return m_Custom_label_length_too_long;
}

void CatalogsFeedValidationWarnings::setCustomLabelLengthTooLong(int32_t value)
{
    m_Custom_label_length_too_long = value;
    m_Custom_label_length_too_longIsSet = true;
}

bool CatalogsFeedValidationWarnings::customLabelLengthTooLongIsSet() const
{
    return m_Custom_label_length_too_longIsSet;
}

void CatalogsFeedValidationWarnings::unsetCustom_label_length_too_long()
{
    m_Custom_label_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getProductTypeLengthTooLong() const
{
    return m_Product_type_length_too_long;
}

void CatalogsFeedValidationWarnings::setProductTypeLengthTooLong(int32_t value)
{
    m_Product_type_length_too_long = value;
    m_Product_type_length_too_longIsSet = true;
}

bool CatalogsFeedValidationWarnings::productTypeLengthTooLongIsSet() const
{
    return m_Product_type_length_too_longIsSet;
}

void CatalogsFeedValidationWarnings::unsetProduct_type_length_too_long()
{
    m_Product_type_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getTooManyAdditionalImageLinks() const
{
    return m_Too_many_additional_image_links;
}

void CatalogsFeedValidationWarnings::setTooManyAdditionalImageLinks(int32_t value)
{
    m_Too_many_additional_image_links = value;
    m_Too_many_additional_image_linksIsSet = true;
}

bool CatalogsFeedValidationWarnings::tooManyAdditionalImageLinksIsSet() const
{
    return m_Too_many_additional_image_linksIsSet;
}

void CatalogsFeedValidationWarnings::unsetToo_many_additional_image_links()
{
    m_Too_many_additional_image_linksIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getMultipackInvalid() const
{
    return m_Multipack_invalid;
}

void CatalogsFeedValidationWarnings::setMultipackInvalid(int32_t value)
{
    m_Multipack_invalid = value;
    m_Multipack_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::multipackInvalidIsSet() const
{
    return m_Multipack_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetMultipack_invalid()
{
    m_Multipack_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getIndexedProductCountLargeDelta() const
{
    return m_Indexed_product_count_large_delta;
}

void CatalogsFeedValidationWarnings::setIndexedProductCountLargeDelta(int32_t value)
{
    m_Indexed_product_count_large_delta = value;
    m_Indexed_product_count_large_deltaIsSet = true;
}

bool CatalogsFeedValidationWarnings::indexedProductCountLargeDeltaIsSet() const
{
    return m_Indexed_product_count_large_deltaIsSet;
}

void CatalogsFeedValidationWarnings::unsetIndexed_product_count_large_delta()
{
    m_Indexed_product_count_large_deltaIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getItemAdditionalImageDownloadFailure() const
{
    return m_Item_additional_image_download_failure;
}

void CatalogsFeedValidationWarnings::setItemAdditionalImageDownloadFailure(int32_t value)
{
    m_Item_additional_image_download_failure = value;
    m_Item_additional_image_download_failureIsSet = true;
}

bool CatalogsFeedValidationWarnings::itemAdditionalImageDownloadFailureIsSet() const
{
    return m_Item_additional_image_download_failureIsSet;
}

void CatalogsFeedValidationWarnings::unsetItem_additional_image_download_failure()
{
    m_Item_additional_image_download_failureIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOptionalProductCategoryMissing() const
{
    return m_Optional_product_category_missing;
}

void CatalogsFeedValidationWarnings::setOptionalProductCategoryMissing(int32_t value)
{
    m_Optional_product_category_missing = value;
    m_Optional_product_category_missingIsSet = true;
}

bool CatalogsFeedValidationWarnings::optionalProductCategoryMissingIsSet() const
{
    return m_Optional_product_category_missingIsSet;
}

void CatalogsFeedValidationWarnings::unsetOptional_product_category_missing()
{
    m_Optional_product_category_missingIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOptionalProductCategoryInvalid() const
{
    return m_Optional_product_category_invalid;
}

void CatalogsFeedValidationWarnings::setOptionalProductCategoryInvalid(int32_t value)
{
    m_Optional_product_category_invalid = value;
    m_Optional_product_category_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::optionalProductCategoryInvalidIsSet() const
{
    return m_Optional_product_category_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetOptional_product_category_invalid()
{
    m_Optional_product_category_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOptionalConditionMissing() const
{
    return m_Optional_condition_missing;
}

void CatalogsFeedValidationWarnings::setOptionalConditionMissing(int32_t value)
{
    m_Optional_condition_missing = value;
    m_Optional_condition_missingIsSet = true;
}

bool CatalogsFeedValidationWarnings::optionalConditionMissingIsSet() const
{
    return m_Optional_condition_missingIsSet;
}

void CatalogsFeedValidationWarnings::unsetOptional_condition_missing()
{
    m_Optional_condition_missingIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getOptionalConditionInvalid() const
{
    return m_Optional_condition_invalid;
}

void CatalogsFeedValidationWarnings::setOptionalConditionInvalid(int32_t value)
{
    m_Optional_condition_invalid = value;
    m_Optional_condition_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::optionalConditionInvalidIsSet() const
{
    return m_Optional_condition_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetOptional_condition_invalid()
{
    m_Optional_condition_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getIosDeepLinkInvalid() const
{
    return m_Ios_deep_link_invalid;
}

void CatalogsFeedValidationWarnings::setIosDeepLinkInvalid(int32_t value)
{
    m_Ios_deep_link_invalid = value;
    m_Ios_deep_link_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::iosDeepLinkInvalidIsSet() const
{
    return m_Ios_deep_link_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetIos_deep_link_invalid()
{
    m_Ios_deep_link_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAndroidDeepLinkInvalid() const
{
    return m_Android_deep_link_invalid;
}

void CatalogsFeedValidationWarnings::setAndroidDeepLinkInvalid(int32_t value)
{
    m_Android_deep_link_invalid = value;
    m_Android_deep_link_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::androidDeepLinkInvalidIsSet() const
{
    return m_Android_deep_link_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetAndroid_deep_link_invalid()
{
    m_Android_deep_link_invalidIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAvailabilityNormalized() const
{
    return m_Availability_normalized;
}

void CatalogsFeedValidationWarnings::setAvailabilityNormalized(int32_t value)
{
    m_Availability_normalized = value;
    m_Availability_normalizedIsSet = true;
}

bool CatalogsFeedValidationWarnings::availabilityNormalizedIsSet() const
{
    return m_Availability_normalizedIsSet;
}

void CatalogsFeedValidationWarnings::unsetAvailability_normalized()
{
    m_Availability_normalizedIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getConditionNormalized() const
{
    return m_Condition_normalized;
}

void CatalogsFeedValidationWarnings::setConditionNormalized(int32_t value)
{
    m_Condition_normalized = value;
    m_Condition_normalizedIsSet = true;
}

bool CatalogsFeedValidationWarnings::conditionNormalizedIsSet() const
{
    return m_Condition_normalizedIsSet;
}

void CatalogsFeedValidationWarnings::unsetCondition_normalized()
{
    m_Condition_normalizedIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getGenderNormalized() const
{
    return m_Gender_normalized;
}

void CatalogsFeedValidationWarnings::setGenderNormalized(int32_t value)
{
    m_Gender_normalized = value;
    m_Gender_normalizedIsSet = true;
}

bool CatalogsFeedValidationWarnings::genderNormalizedIsSet() const
{
    return m_Gender_normalizedIsSet;
}

void CatalogsFeedValidationWarnings::unsetGender_normalized()
{
    m_Gender_normalizedIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getSizeTypeNormalized() const
{
    return m_Size_type_normalized;
}

void CatalogsFeedValidationWarnings::setSizeTypeNormalized(int32_t value)
{
    m_Size_type_normalized = value;
    m_Size_type_normalizedIsSet = true;
}

bool CatalogsFeedValidationWarnings::sizeTypeNormalizedIsSet() const
{
    return m_Size_type_normalizedIsSet;
}

void CatalogsFeedValidationWarnings::unsetSize_type_normalized()
{
    m_Size_type_normalizedIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getAgeGroupNormalized() const
{
    return m_Age_group_normalized;
}

void CatalogsFeedValidationWarnings::setAgeGroupNormalized(int32_t value)
{
    m_Age_group_normalized = value;
    m_Age_group_normalizedIsSet = true;
}

bool CatalogsFeedValidationWarnings::ageGroupNormalizedIsSet() const
{
    return m_Age_group_normalizedIsSet;
}

void CatalogsFeedValidationWarnings::unsetAge_group_normalized()
{
    m_Age_group_normalizedIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getUtmSourceAutoCorrected() const
{
    return m_Utm_source_auto_corrected;
}

void CatalogsFeedValidationWarnings::setUtmSourceAutoCorrected(int32_t value)
{
    m_Utm_source_auto_corrected = value;
    m_Utm_source_auto_correctedIsSet = true;
}

bool CatalogsFeedValidationWarnings::utmSourceAutoCorrectedIsSet() const
{
    return m_Utm_source_auto_correctedIsSet;
}

void CatalogsFeedValidationWarnings::unsetUtm_source_auto_corrected()
{
    m_Utm_source_auto_correctedIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getCountryDoesNotMapToCurrency() const
{
    return m_Country_does_not_map_to_currency;
}

void CatalogsFeedValidationWarnings::setCountryDoesNotMapToCurrency(int32_t value)
{
    m_Country_does_not_map_to_currency = value;
    m_Country_does_not_map_to_currencyIsSet = true;
}

bool CatalogsFeedValidationWarnings::countryDoesNotMapToCurrencyIsSet() const
{
    return m_Country_does_not_map_to_currencyIsSet;
}

void CatalogsFeedValidationWarnings::unsetCountry_does_not_map_to_currency()
{
    m_Country_does_not_map_to_currencyIsSet = false;
}
int32_t CatalogsFeedValidationWarnings::getMinAdPriceInvalid() const
{
    return m_Min_ad_price_invalid;
}

void CatalogsFeedValidationWarnings::setMinAdPriceInvalid(int32_t value)
{
    m_Min_ad_price_invalid = value;
    m_Min_ad_price_invalidIsSet = true;
}

bool CatalogsFeedValidationWarnings::minAdPriceInvalidIsSet() const
{
    return m_Min_ad_price_invalidIsSet;
}

void CatalogsFeedValidationWarnings::unsetMin_ad_price_invalid()
{
    m_Min_ad_price_invalidIsSet = false;
}
}
}
}
}


