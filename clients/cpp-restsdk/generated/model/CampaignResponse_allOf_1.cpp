/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CampaignResponse_allOf_1.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CampaignResponse_allOf_1::CampaignResponse_allOf_1()
{
    m_Objective_typeIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

CampaignResponse_allOf_1::~CampaignResponse_allOf_1()
{
}

void CampaignResponse_allOf_1::validate()
{
    // TODO: implement validation
}

web::json::value CampaignResponse_allOf_1::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Objective_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("objective_type"))] = ModelBase::toJson(m_Objective_type);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool CampaignResponse_allOf_1::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("objective_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("objective_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ObjectiveType> refVal_objective_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_objective_type);
            setObjectiveType(refVal_objective_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_created_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_created_time);
            setCreatedTime(refVal_created_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_updated_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_updated_time);
            setUpdatedTime(refVal_updated_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void CampaignResponse_allOf_1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Objective_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("objective_type")), m_Objective_type));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
}

bool CampaignResponse_allOf_1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("objective_type"))))
    {
        std::shared_ptr<ObjectiveType> refVal_objective_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("objective_type"))), refVal_objective_type );
        setObjectiveType(refVal_objective_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_created_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_created_time );
        setCreatedTime(refVal_created_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_updated_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_updated_time );
        setUpdatedTime(refVal_updated_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

std::shared_ptr<ObjectiveType> CampaignResponse_allOf_1::getObjectiveType() const
{
    return m_Objective_type;
}

void CampaignResponse_allOf_1::setObjectiveType(const std::shared_ptr<ObjectiveType>& value)
{
    m_Objective_type = value;
    m_Objective_typeIsSet = true;
}

bool CampaignResponse_allOf_1::objectiveTypeIsSet() const
{
    return m_Objective_typeIsSet;
}

void CampaignResponse_allOf_1::unsetObjective_type()
{
    m_Objective_typeIsSet = false;
}
int32_t CampaignResponse_allOf_1::getCreatedTime() const
{
    return m_Created_time;
}

void CampaignResponse_allOf_1::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool CampaignResponse_allOf_1::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void CampaignResponse_allOf_1::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t CampaignResponse_allOf_1::getUpdatedTime() const
{
    return m_Updated_time;
}

void CampaignResponse_allOf_1::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool CampaignResponse_allOf_1::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void CampaignResponse_allOf_1::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
utility::string_t CampaignResponse_allOf_1::getType() const
{
    return m_Type;
}

void CampaignResponse_allOf_1::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool CampaignResponse_allOf_1::typeIsSet() const
{
    return m_TypeIsSet;
}

void CampaignResponse_allOf_1::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


