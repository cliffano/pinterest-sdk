/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedValidationErrors.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CatalogsFeedValidationErrors::CatalogsFeedValidationErrors()
{
    m_Fetch_error = 0;
    m_Fetch_errorIsSet = false;
    m_Fetch_inactive_feed_error = 0;
    m_Fetch_inactive_feed_errorIsSet = false;
    m_Encoding_error = 0;
    m_Encoding_errorIsSet = false;
    m_Delimiter_error = 0;
    m_Delimiter_errorIsSet = false;
    m_Required_columns_missing = 0;
    m_Required_columns_missingIsSet = false;
    m_Image_link_invalid = 0;
    m_Image_link_invalidIsSet = false;
    m_Itemid_missing = 0;
    m_Itemid_missingIsSet = false;
    m_Title_missing = 0;
    m_Title_missingIsSet = false;
    m_Description_missing = 0;
    m_Description_missingIsSet = false;
    m_Product_category_invalid = 0;
    m_Product_category_invalidIsSet = false;
    m_Product_link_missing = 0;
    m_Product_link_missingIsSet = false;
    m_Image_link_missing = 0;
    m_Image_link_missingIsSet = false;
    m_Availability_invalid = 0;
    m_Availability_invalidIsSet = false;
    m_Product_price_invalid = 0;
    m_Product_price_invalidIsSet = false;
    m_Link_format_invalid = 0;
    m_Link_format_invalidIsSet = false;
    m_Parse_line_error = 0;
    m_Parse_line_errorIsSet = false;
    m_Adwords_format_invalid = 0;
    m_Adwords_format_invalidIsSet = false;
    m_Product_category_missing = 0;
    m_Product_category_missingIsSet = false;
    m_Internal_service_error = 0;
    m_Internal_service_errorIsSet = false;
    m_No_verified_domain = 0;
    m_No_verified_domainIsSet = false;
    m_Adult_invalid = 0;
    m_Adult_invalidIsSet = false;
    m_Invalid_domain = 0;
    m_Invalid_domainIsSet = false;
    m_Feed_length_too_long = 0;
    m_Feed_length_too_longIsSet = false;
    m_Link_length_too_long = 0;
    m_Link_length_too_longIsSet = false;
    m_Malformed_xml = 0;
    m_Malformed_xmlIsSet = false;
    m_Redirect_invalid = 0;
    m_Redirect_invalidIsSet = false;
    m_Price_missing = 0;
    m_Price_missingIsSet = false;
    m_Feed_too_small = 0;
    m_Feed_too_smallIsSet = false;
    m_Condition_invalid = 0;
    m_Condition_invalidIsSet = false;
    m_Shopify_no_products = 0;
    m_Shopify_no_productsIsSet = false;
    m_Max_items_per_item_group_exceeded = 0;
    m_Max_items_per_item_group_exceededIsSet = false;
    m_Item_main_image_download_failure = 0;
    m_Item_main_image_download_failureIsSet = false;
    m_Pinjoin_content_unsafe = 0;
    m_Pinjoin_content_unsafeIsSet = false;
    m_Blocklisted_image_signature = 0;
    m_Blocklisted_image_signatureIsSet = false;
}

CatalogsFeedValidationErrors::~CatalogsFeedValidationErrors()
{
}

void CatalogsFeedValidationErrors::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedValidationErrors::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Fetch_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("fetch_error"))] = ModelBase::toJson(m_Fetch_error);
    }
    if(m_Fetch_inactive_feed_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("fetch_inactive_feed_error"))] = ModelBase::toJson(m_Fetch_inactive_feed_error);
    }
    if(m_Encoding_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("encoding_error"))] = ModelBase::toJson(m_Encoding_error);
    }
    if(m_Delimiter_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("delimiter_error"))] = ModelBase::toJson(m_Delimiter_error);
    }
    if(m_Required_columns_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("required_columns_missing"))] = ModelBase::toJson(m_Required_columns_missing);
    }
    if(m_Image_link_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("image_link_invalid"))] = ModelBase::toJson(m_Image_link_invalid);
    }
    if(m_Itemid_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("itemid_missing"))] = ModelBase::toJson(m_Itemid_missing);
    }
    if(m_Title_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("title_missing"))] = ModelBase::toJson(m_Title_missing);
    }
    if(m_Description_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("description_missing"))] = ModelBase::toJson(m_Description_missing);
    }
    if(m_Product_category_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("product_category_invalid"))] = ModelBase::toJson(m_Product_category_invalid);
    }
    if(m_Product_link_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("product_link_missing"))] = ModelBase::toJson(m_Product_link_missing);
    }
    if(m_Image_link_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("image_link_missing"))] = ModelBase::toJson(m_Image_link_missing);
    }
    if(m_Availability_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("availability_invalid"))] = ModelBase::toJson(m_Availability_invalid);
    }
    if(m_Product_price_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("product_price_invalid"))] = ModelBase::toJson(m_Product_price_invalid);
    }
    if(m_Link_format_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("link_format_invalid"))] = ModelBase::toJson(m_Link_format_invalid);
    }
    if(m_Parse_line_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("parse_line_error"))] = ModelBase::toJson(m_Parse_line_error);
    }
    if(m_Adwords_format_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("adwords_format_invalid"))] = ModelBase::toJson(m_Adwords_format_invalid);
    }
    if(m_Product_category_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("product_category_missing"))] = ModelBase::toJson(m_Product_category_missing);
    }
    if(m_Internal_service_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("internal_service_error"))] = ModelBase::toJson(m_Internal_service_error);
    }
    if(m_No_verified_domainIsSet)
    {
        val[utility::conversions::to_string_t(U("no_verified_domain"))] = ModelBase::toJson(m_No_verified_domain);
    }
    if(m_Adult_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("adult_invalid"))] = ModelBase::toJson(m_Adult_invalid);
    }
    if(m_Invalid_domainIsSet)
    {
        val[utility::conversions::to_string_t(U("invalid_domain"))] = ModelBase::toJson(m_Invalid_domain);
    }
    if(m_Feed_length_too_longIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_length_too_long"))] = ModelBase::toJson(m_Feed_length_too_long);
    }
    if(m_Link_length_too_longIsSet)
    {
        val[utility::conversions::to_string_t(U("link_length_too_long"))] = ModelBase::toJson(m_Link_length_too_long);
    }
    if(m_Malformed_xmlIsSet)
    {
        val[utility::conversions::to_string_t(U("malformed_xml"))] = ModelBase::toJson(m_Malformed_xml);
    }
    if(m_Redirect_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("redirect_invalid"))] = ModelBase::toJson(m_Redirect_invalid);
    }
    if(m_Price_missingIsSet)
    {
        val[utility::conversions::to_string_t(U("price_missing"))] = ModelBase::toJson(m_Price_missing);
    }
    if(m_Feed_too_smallIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_too_small"))] = ModelBase::toJson(m_Feed_too_small);
    }
    if(m_Condition_invalidIsSet)
    {
        val[utility::conversions::to_string_t(U("condition_invalid"))] = ModelBase::toJson(m_Condition_invalid);
    }
    if(m_Shopify_no_productsIsSet)
    {
        val[utility::conversions::to_string_t(U("shopify_no_products"))] = ModelBase::toJson(m_Shopify_no_products);
    }
    if(m_Max_items_per_item_group_exceededIsSet)
    {
        val[utility::conversions::to_string_t(U("max_items_per_item_group_exceeded"))] = ModelBase::toJson(m_Max_items_per_item_group_exceeded);
    }
    if(m_Item_main_image_download_failureIsSet)
    {
        val[utility::conversions::to_string_t(U("item_main_image_download_failure"))] = ModelBase::toJson(m_Item_main_image_download_failure);
    }
    if(m_Pinjoin_content_unsafeIsSet)
    {
        val[utility::conversions::to_string_t(U("pinjoin_content_unsafe"))] = ModelBase::toJson(m_Pinjoin_content_unsafe);
    }
    if(m_Blocklisted_image_signatureIsSet)
    {
        val[utility::conversions::to_string_t(U("blocklisted_image_signature"))] = ModelBase::toJson(m_Blocklisted_image_signature);
    }

    return val;
}

bool CatalogsFeedValidationErrors::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fetch_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fetch_error")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fetch_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_fetch_error);
            setFetchError(refVal_fetch_error);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fetch_inactive_feed_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fetch_inactive_feed_error")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fetch_inactive_feed_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_fetch_inactive_feed_error);
            setFetchInactiveFeedError(refVal_fetch_inactive_feed_error);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("encoding_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("encoding_error")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_encoding_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_encoding_error);
            setEncodingError(refVal_encoding_error);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delimiter_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delimiter_error")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_delimiter_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_delimiter_error);
            setDelimiterError(refVal_delimiter_error);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_columns_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_columns_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_required_columns_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_required_columns_missing);
            setRequiredColumnsMissing(refVal_required_columns_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image_link_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_link_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_image_link_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_image_link_invalid);
            setImageLinkInvalid(refVal_image_link_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("itemid_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("itemid_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_itemid_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_itemid_missing);
            setItemidMissing(refVal_itemid_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_title_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_title_missing);
            setTitleMissing(refVal_title_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_description_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_description_missing);
            setDescriptionMissing(refVal_description_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_category_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_category_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_product_category_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_category_invalid);
            setProductCategoryInvalid(refVal_product_category_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_link_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_link_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_product_link_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_link_missing);
            setProductLinkMissing(refVal_product_link_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image_link_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_link_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_image_link_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_image_link_missing);
            setImageLinkMissing(refVal_image_link_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availability_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availability_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_availability_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_availability_invalid);
            setAvailabilityInvalid(refVal_availability_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_price_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_price_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_product_price_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_price_invalid);
            setProductPriceInvalid(refVal_product_price_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link_format_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link_format_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_link_format_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_link_format_invalid);
            setLinkFormatInvalid(refVal_link_format_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parse_line_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parse_line_error")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_parse_line_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_parse_line_error);
            setParseLineError(refVal_parse_line_error);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adwords_format_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adwords_format_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_adwords_format_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_adwords_format_invalid);
            setAdwordsFormatInvalid(refVal_adwords_format_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_category_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_category_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_product_category_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_category_missing);
            setProductCategoryMissing(refVal_product_category_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("internal_service_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("internal_service_error")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_internal_service_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_internal_service_error);
            setInternalServiceError(refVal_internal_service_error);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("no_verified_domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("no_verified_domain")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_no_verified_domain;
            ok &= ModelBase::fromJson(fieldValue, refVal_no_verified_domain);
            setNoVerifiedDomain(refVal_no_verified_domain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adult_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adult_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_adult_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_adult_invalid);
            setAdultInvalid(refVal_adult_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invalid_domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invalid_domain")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_invalid_domain;
            ok &= ModelBase::fromJson(fieldValue, refVal_invalid_domain);
            setInvalidDomain(refVal_invalid_domain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_length_too_long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_length_too_long")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_feed_length_too_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_feed_length_too_long);
            setFeedLengthTooLong(refVal_feed_length_too_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link_length_too_long"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link_length_too_long")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_link_length_too_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_link_length_too_long);
            setLinkLengthTooLong(refVal_link_length_too_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("malformed_xml"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("malformed_xml")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_malformed_xml;
            ok &= ModelBase::fromJson(fieldValue, refVal_malformed_xml);
            setMalformedXml(refVal_malformed_xml);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("redirect_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("redirect_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_redirect_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_redirect_invalid);
            setRedirectInvalid(refVal_redirect_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_missing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_missing")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_price_missing;
            ok &= ModelBase::fromJson(fieldValue, refVal_price_missing);
            setPriceMissing(refVal_price_missing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_too_small"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_too_small")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_feed_too_small;
            ok &= ModelBase::fromJson(fieldValue, refVal_feed_too_small);
            setFeedTooSmall(refVal_feed_too_small);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("condition_invalid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("condition_invalid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_condition_invalid;
            ok &= ModelBase::fromJson(fieldValue, refVal_condition_invalid);
            setConditionInvalid(refVal_condition_invalid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopify_no_products"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopify_no_products")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_shopify_no_products;
            ok &= ModelBase::fromJson(fieldValue, refVal_shopify_no_products);
            setShopifyNoProducts(refVal_shopify_no_products);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_items_per_item_group_exceeded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_items_per_item_group_exceeded")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_max_items_per_item_group_exceeded;
            ok &= ModelBase::fromJson(fieldValue, refVal_max_items_per_item_group_exceeded);
            setMaxItemsPerItemGroupExceeded(refVal_max_items_per_item_group_exceeded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item_main_image_download_failure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_main_image_download_failure")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_item_main_image_download_failure;
            ok &= ModelBase::fromJson(fieldValue, refVal_item_main_image_download_failure);
            setItemMainImageDownloadFailure(refVal_item_main_image_download_failure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pinjoin_content_unsafe"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pinjoin_content_unsafe")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pinjoin_content_unsafe;
            ok &= ModelBase::fromJson(fieldValue, refVal_pinjoin_content_unsafe);
            setPinjoinContentUnsafe(refVal_pinjoin_content_unsafe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blocklisted_image_signature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blocklisted_image_signature")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_blocklisted_image_signature;
            ok &= ModelBase::fromJson(fieldValue, refVal_blocklisted_image_signature);
            setBlocklistedImageSignature(refVal_blocklisted_image_signature);
        }
    }
    return ok;
}

void CatalogsFeedValidationErrors::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Fetch_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fetch_error")), m_Fetch_error));
    }
    if(m_Fetch_inactive_feed_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fetch_inactive_feed_error")), m_Fetch_inactive_feed_error));
    }
    if(m_Encoding_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("encoding_error")), m_Encoding_error));
    }
    if(m_Delimiter_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delimiter_error")), m_Delimiter_error));
    }
    if(m_Required_columns_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_columns_missing")), m_Required_columns_missing));
    }
    if(m_Image_link_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_link_invalid")), m_Image_link_invalid));
    }
    if(m_Itemid_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("itemid_missing")), m_Itemid_missing));
    }
    if(m_Title_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title_missing")), m_Title_missing));
    }
    if(m_Description_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description_missing")), m_Description_missing));
    }
    if(m_Product_category_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_category_invalid")), m_Product_category_invalid));
    }
    if(m_Product_link_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_link_missing")), m_Product_link_missing));
    }
    if(m_Image_link_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_link_missing")), m_Image_link_missing));
    }
    if(m_Availability_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availability_invalid")), m_Availability_invalid));
    }
    if(m_Product_price_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_price_invalid")), m_Product_price_invalid));
    }
    if(m_Link_format_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link_format_invalid")), m_Link_format_invalid));
    }
    if(m_Parse_line_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parse_line_error")), m_Parse_line_error));
    }
    if(m_Adwords_format_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adwords_format_invalid")), m_Adwords_format_invalid));
    }
    if(m_Product_category_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_category_missing")), m_Product_category_missing));
    }
    if(m_Internal_service_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("internal_service_error")), m_Internal_service_error));
    }
    if(m_No_verified_domainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("no_verified_domain")), m_No_verified_domain));
    }
    if(m_Adult_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adult_invalid")), m_Adult_invalid));
    }
    if(m_Invalid_domainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invalid_domain")), m_Invalid_domain));
    }
    if(m_Feed_length_too_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_length_too_long")), m_Feed_length_too_long));
    }
    if(m_Link_length_too_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link_length_too_long")), m_Link_length_too_long));
    }
    if(m_Malformed_xmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("malformed_xml")), m_Malformed_xml));
    }
    if(m_Redirect_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("redirect_invalid")), m_Redirect_invalid));
    }
    if(m_Price_missingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_missing")), m_Price_missing));
    }
    if(m_Feed_too_smallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_too_small")), m_Feed_too_small));
    }
    if(m_Condition_invalidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("condition_invalid")), m_Condition_invalid));
    }
    if(m_Shopify_no_productsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopify_no_products")), m_Shopify_no_products));
    }
    if(m_Max_items_per_item_group_exceededIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_items_per_item_group_exceeded")), m_Max_items_per_item_group_exceeded));
    }
    if(m_Item_main_image_download_failureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_main_image_download_failure")), m_Item_main_image_download_failure));
    }
    if(m_Pinjoin_content_unsafeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pinjoin_content_unsafe")), m_Pinjoin_content_unsafe));
    }
    if(m_Blocklisted_image_signatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blocklisted_image_signature")), m_Blocklisted_image_signature));
    }
}

bool CatalogsFeedValidationErrors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fetch_error"))))
    {
        int32_t refVal_fetch_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fetch_error"))), refVal_fetch_error );
        setFetchError(refVal_fetch_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fetch_inactive_feed_error"))))
    {
        int32_t refVal_fetch_inactive_feed_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fetch_inactive_feed_error"))), refVal_fetch_inactive_feed_error );
        setFetchInactiveFeedError(refVal_fetch_inactive_feed_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("encoding_error"))))
    {
        int32_t refVal_encoding_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("encoding_error"))), refVal_encoding_error );
        setEncodingError(refVal_encoding_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delimiter_error"))))
    {
        int32_t refVal_delimiter_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delimiter_error"))), refVal_delimiter_error );
        setDelimiterError(refVal_delimiter_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_columns_missing"))))
    {
        int32_t refVal_required_columns_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_columns_missing"))), refVal_required_columns_missing );
        setRequiredColumnsMissing(refVal_required_columns_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image_link_invalid"))))
    {
        int32_t refVal_image_link_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_link_invalid"))), refVal_image_link_invalid );
        setImageLinkInvalid(refVal_image_link_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("itemid_missing"))))
    {
        int32_t refVal_itemid_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("itemid_missing"))), refVal_itemid_missing );
        setItemidMissing(refVal_itemid_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title_missing"))))
    {
        int32_t refVal_title_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title_missing"))), refVal_title_missing );
        setTitleMissing(refVal_title_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description_missing"))))
    {
        int32_t refVal_description_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description_missing"))), refVal_description_missing );
        setDescriptionMissing(refVal_description_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_category_invalid"))))
    {
        int32_t refVal_product_category_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_category_invalid"))), refVal_product_category_invalid );
        setProductCategoryInvalid(refVal_product_category_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_link_missing"))))
    {
        int32_t refVal_product_link_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_link_missing"))), refVal_product_link_missing );
        setProductLinkMissing(refVal_product_link_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image_link_missing"))))
    {
        int32_t refVal_image_link_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_link_missing"))), refVal_image_link_missing );
        setImageLinkMissing(refVal_image_link_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availability_invalid"))))
    {
        int32_t refVal_availability_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availability_invalid"))), refVal_availability_invalid );
        setAvailabilityInvalid(refVal_availability_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_price_invalid"))))
    {
        int32_t refVal_product_price_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_price_invalid"))), refVal_product_price_invalid );
        setProductPriceInvalid(refVal_product_price_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link_format_invalid"))))
    {
        int32_t refVal_link_format_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link_format_invalid"))), refVal_link_format_invalid );
        setLinkFormatInvalid(refVal_link_format_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parse_line_error"))))
    {
        int32_t refVal_parse_line_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parse_line_error"))), refVal_parse_line_error );
        setParseLineError(refVal_parse_line_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adwords_format_invalid"))))
    {
        int32_t refVal_adwords_format_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adwords_format_invalid"))), refVal_adwords_format_invalid );
        setAdwordsFormatInvalid(refVal_adwords_format_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_category_missing"))))
    {
        int32_t refVal_product_category_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_category_missing"))), refVal_product_category_missing );
        setProductCategoryMissing(refVal_product_category_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("internal_service_error"))))
    {
        int32_t refVal_internal_service_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("internal_service_error"))), refVal_internal_service_error );
        setInternalServiceError(refVal_internal_service_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("no_verified_domain"))))
    {
        int32_t refVal_no_verified_domain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("no_verified_domain"))), refVal_no_verified_domain );
        setNoVerifiedDomain(refVal_no_verified_domain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adult_invalid"))))
    {
        int32_t refVal_adult_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adult_invalid"))), refVal_adult_invalid );
        setAdultInvalid(refVal_adult_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invalid_domain"))))
    {
        int32_t refVal_invalid_domain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invalid_domain"))), refVal_invalid_domain );
        setInvalidDomain(refVal_invalid_domain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_length_too_long"))))
    {
        int32_t refVal_feed_length_too_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_length_too_long"))), refVal_feed_length_too_long );
        setFeedLengthTooLong(refVal_feed_length_too_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link_length_too_long"))))
    {
        int32_t refVal_link_length_too_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link_length_too_long"))), refVal_link_length_too_long );
        setLinkLengthTooLong(refVal_link_length_too_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("malformed_xml"))))
    {
        int32_t refVal_malformed_xml;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("malformed_xml"))), refVal_malformed_xml );
        setMalformedXml(refVal_malformed_xml);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("redirect_invalid"))))
    {
        int32_t refVal_redirect_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("redirect_invalid"))), refVal_redirect_invalid );
        setRedirectInvalid(refVal_redirect_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_missing"))))
    {
        int32_t refVal_price_missing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_missing"))), refVal_price_missing );
        setPriceMissing(refVal_price_missing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_too_small"))))
    {
        int32_t refVal_feed_too_small;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_too_small"))), refVal_feed_too_small );
        setFeedTooSmall(refVal_feed_too_small);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("condition_invalid"))))
    {
        int32_t refVal_condition_invalid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("condition_invalid"))), refVal_condition_invalid );
        setConditionInvalid(refVal_condition_invalid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopify_no_products"))))
    {
        int32_t refVal_shopify_no_products;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopify_no_products"))), refVal_shopify_no_products );
        setShopifyNoProducts(refVal_shopify_no_products);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_items_per_item_group_exceeded"))))
    {
        int32_t refVal_max_items_per_item_group_exceeded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_items_per_item_group_exceeded"))), refVal_max_items_per_item_group_exceeded );
        setMaxItemsPerItemGroupExceeded(refVal_max_items_per_item_group_exceeded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item_main_image_download_failure"))))
    {
        int32_t refVal_item_main_image_download_failure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_main_image_download_failure"))), refVal_item_main_image_download_failure );
        setItemMainImageDownloadFailure(refVal_item_main_image_download_failure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pinjoin_content_unsafe"))))
    {
        int32_t refVal_pinjoin_content_unsafe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pinjoin_content_unsafe"))), refVal_pinjoin_content_unsafe );
        setPinjoinContentUnsafe(refVal_pinjoin_content_unsafe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blocklisted_image_signature"))))
    {
        int32_t refVal_blocklisted_image_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blocklisted_image_signature"))), refVal_blocklisted_image_signature );
        setBlocklistedImageSignature(refVal_blocklisted_image_signature);
    }
    return ok;
}

int32_t CatalogsFeedValidationErrors::getFetchError() const
{
    return m_Fetch_error;
}

void CatalogsFeedValidationErrors::setFetchError(int32_t value)
{
    m_Fetch_error = value;
    m_Fetch_errorIsSet = true;
}

bool CatalogsFeedValidationErrors::fetchErrorIsSet() const
{
    return m_Fetch_errorIsSet;
}

void CatalogsFeedValidationErrors::unsetFetch_error()
{
    m_Fetch_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFetchInactiveFeedError() const
{
    return m_Fetch_inactive_feed_error;
}

void CatalogsFeedValidationErrors::setFetchInactiveFeedError(int32_t value)
{
    m_Fetch_inactive_feed_error = value;
    m_Fetch_inactive_feed_errorIsSet = true;
}

bool CatalogsFeedValidationErrors::fetchInactiveFeedErrorIsSet() const
{
    return m_Fetch_inactive_feed_errorIsSet;
}

void CatalogsFeedValidationErrors::unsetFetch_inactive_feed_error()
{
    m_Fetch_inactive_feed_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getEncodingError() const
{
    return m_Encoding_error;
}

void CatalogsFeedValidationErrors::setEncodingError(int32_t value)
{
    m_Encoding_error = value;
    m_Encoding_errorIsSet = true;
}

bool CatalogsFeedValidationErrors::encodingErrorIsSet() const
{
    return m_Encoding_errorIsSet;
}

void CatalogsFeedValidationErrors::unsetEncoding_error()
{
    m_Encoding_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDelimiterError() const
{
    return m_Delimiter_error;
}

void CatalogsFeedValidationErrors::setDelimiterError(int32_t value)
{
    m_Delimiter_error = value;
    m_Delimiter_errorIsSet = true;
}

bool CatalogsFeedValidationErrors::delimiterErrorIsSet() const
{
    return m_Delimiter_errorIsSet;
}

void CatalogsFeedValidationErrors::unsetDelimiter_error()
{
    m_Delimiter_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getRequiredColumnsMissing() const
{
    return m_Required_columns_missing;
}

void CatalogsFeedValidationErrors::setRequiredColumnsMissing(int32_t value)
{
    m_Required_columns_missing = value;
    m_Required_columns_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::requiredColumnsMissingIsSet() const
{
    return m_Required_columns_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetRequired_columns_missing()
{
    m_Required_columns_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getImageLinkInvalid() const
{
    return m_Image_link_invalid;
}

void CatalogsFeedValidationErrors::setImageLinkInvalid(int32_t value)
{
    m_Image_link_invalid = value;
    m_Image_link_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::imageLinkInvalidIsSet() const
{
    return m_Image_link_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetImage_link_invalid()
{
    m_Image_link_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getItemidMissing() const
{
    return m_Itemid_missing;
}

void CatalogsFeedValidationErrors::setItemidMissing(int32_t value)
{
    m_Itemid_missing = value;
    m_Itemid_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::itemidMissingIsSet() const
{
    return m_Itemid_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetItemid_missing()
{
    m_Itemid_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getTitleMissing() const
{
    return m_Title_missing;
}

void CatalogsFeedValidationErrors::setTitleMissing(int32_t value)
{
    m_Title_missing = value;
    m_Title_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::titleMissingIsSet() const
{
    return m_Title_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetTitle_missing()
{
    m_Title_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDescriptionMissing() const
{
    return m_Description_missing;
}

void CatalogsFeedValidationErrors::setDescriptionMissing(int32_t value)
{
    m_Description_missing = value;
    m_Description_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::descriptionMissingIsSet() const
{
    return m_Description_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetDescription_missing()
{
    m_Description_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductCategoryInvalid() const
{
    return m_Product_category_invalid;
}

void CatalogsFeedValidationErrors::setProductCategoryInvalid(int32_t value)
{
    m_Product_category_invalid = value;
    m_Product_category_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::productCategoryInvalidIsSet() const
{
    return m_Product_category_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetProduct_category_invalid()
{
    m_Product_category_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductLinkMissing() const
{
    return m_Product_link_missing;
}

void CatalogsFeedValidationErrors::setProductLinkMissing(int32_t value)
{
    m_Product_link_missing = value;
    m_Product_link_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::productLinkMissingIsSet() const
{
    return m_Product_link_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetProduct_link_missing()
{
    m_Product_link_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getImageLinkMissing() const
{
    return m_Image_link_missing;
}

void CatalogsFeedValidationErrors::setImageLinkMissing(int32_t value)
{
    m_Image_link_missing = value;
    m_Image_link_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::imageLinkMissingIsSet() const
{
    return m_Image_link_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetImage_link_missing()
{
    m_Image_link_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAvailabilityInvalid() const
{
    return m_Availability_invalid;
}

void CatalogsFeedValidationErrors::setAvailabilityInvalid(int32_t value)
{
    m_Availability_invalid = value;
    m_Availability_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::availabilityInvalidIsSet() const
{
    return m_Availability_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetAvailability_invalid()
{
    m_Availability_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductPriceInvalid() const
{
    return m_Product_price_invalid;
}

void CatalogsFeedValidationErrors::setProductPriceInvalid(int32_t value)
{
    m_Product_price_invalid = value;
    m_Product_price_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::productPriceInvalidIsSet() const
{
    return m_Product_price_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetProduct_price_invalid()
{
    m_Product_price_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLinkFormatInvalid() const
{
    return m_Link_format_invalid;
}

void CatalogsFeedValidationErrors::setLinkFormatInvalid(int32_t value)
{
    m_Link_format_invalid = value;
    m_Link_format_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::linkFormatInvalidIsSet() const
{
    return m_Link_format_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetLink_format_invalid()
{
    m_Link_format_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getParseLineError() const
{
    return m_Parse_line_error;
}

void CatalogsFeedValidationErrors::setParseLineError(int32_t value)
{
    m_Parse_line_error = value;
    m_Parse_line_errorIsSet = true;
}

bool CatalogsFeedValidationErrors::parseLineErrorIsSet() const
{
    return m_Parse_line_errorIsSet;
}

void CatalogsFeedValidationErrors::unsetParse_line_error()
{
    m_Parse_line_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAdwordsFormatInvalid() const
{
    return m_Adwords_format_invalid;
}

void CatalogsFeedValidationErrors::setAdwordsFormatInvalid(int32_t value)
{
    m_Adwords_format_invalid = value;
    m_Adwords_format_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::adwordsFormatInvalidIsSet() const
{
    return m_Adwords_format_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetAdwords_format_invalid()
{
    m_Adwords_format_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductCategoryMissing() const
{
    return m_Product_category_missing;
}

void CatalogsFeedValidationErrors::setProductCategoryMissing(int32_t value)
{
    m_Product_category_missing = value;
    m_Product_category_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::productCategoryMissingIsSet() const
{
    return m_Product_category_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetProduct_category_missing()
{
    m_Product_category_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getInternalServiceError() const
{
    return m_Internal_service_error;
}

void CatalogsFeedValidationErrors::setInternalServiceError(int32_t value)
{
    m_Internal_service_error = value;
    m_Internal_service_errorIsSet = true;
}

bool CatalogsFeedValidationErrors::internalServiceErrorIsSet() const
{
    return m_Internal_service_errorIsSet;
}

void CatalogsFeedValidationErrors::unsetInternal_service_error()
{
    m_Internal_service_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getNoVerifiedDomain() const
{
    return m_No_verified_domain;
}

void CatalogsFeedValidationErrors::setNoVerifiedDomain(int32_t value)
{
    m_No_verified_domain = value;
    m_No_verified_domainIsSet = true;
}

bool CatalogsFeedValidationErrors::noVerifiedDomainIsSet() const
{
    return m_No_verified_domainIsSet;
}

void CatalogsFeedValidationErrors::unsetNo_verified_domain()
{
    m_No_verified_domainIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAdultInvalid() const
{
    return m_Adult_invalid;
}

void CatalogsFeedValidationErrors::setAdultInvalid(int32_t value)
{
    m_Adult_invalid = value;
    m_Adult_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::adultInvalidIsSet() const
{
    return m_Adult_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetAdult_invalid()
{
    m_Adult_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getInvalidDomain() const
{
    return m_Invalid_domain;
}

void CatalogsFeedValidationErrors::setInvalidDomain(int32_t value)
{
    m_Invalid_domain = value;
    m_Invalid_domainIsSet = true;
}

bool CatalogsFeedValidationErrors::invalidDomainIsSet() const
{
    return m_Invalid_domainIsSet;
}

void CatalogsFeedValidationErrors::unsetInvalid_domain()
{
    m_Invalid_domainIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFeedLengthTooLong() const
{
    return m_Feed_length_too_long;
}

void CatalogsFeedValidationErrors::setFeedLengthTooLong(int32_t value)
{
    m_Feed_length_too_long = value;
    m_Feed_length_too_longIsSet = true;
}

bool CatalogsFeedValidationErrors::feedLengthTooLongIsSet() const
{
    return m_Feed_length_too_longIsSet;
}

void CatalogsFeedValidationErrors::unsetFeed_length_too_long()
{
    m_Feed_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLinkLengthTooLong() const
{
    return m_Link_length_too_long;
}

void CatalogsFeedValidationErrors::setLinkLengthTooLong(int32_t value)
{
    m_Link_length_too_long = value;
    m_Link_length_too_longIsSet = true;
}

bool CatalogsFeedValidationErrors::linkLengthTooLongIsSet() const
{
    return m_Link_length_too_longIsSet;
}

void CatalogsFeedValidationErrors::unsetLink_length_too_long()
{
    m_Link_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getMalformedXml() const
{
    return m_Malformed_xml;
}

void CatalogsFeedValidationErrors::setMalformedXml(int32_t value)
{
    m_Malformed_xml = value;
    m_Malformed_xmlIsSet = true;
}

bool CatalogsFeedValidationErrors::malformedXmlIsSet() const
{
    return m_Malformed_xmlIsSet;
}

void CatalogsFeedValidationErrors::unsetMalformed_xml()
{
    m_Malformed_xmlIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getRedirectInvalid() const
{
    return m_Redirect_invalid;
}

void CatalogsFeedValidationErrors::setRedirectInvalid(int32_t value)
{
    m_Redirect_invalid = value;
    m_Redirect_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::redirectInvalidIsSet() const
{
    return m_Redirect_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetRedirect_invalid()
{
    m_Redirect_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPriceMissing() const
{
    return m_Price_missing;
}

void CatalogsFeedValidationErrors::setPriceMissing(int32_t value)
{
    m_Price_missing = value;
    m_Price_missingIsSet = true;
}

bool CatalogsFeedValidationErrors::priceMissingIsSet() const
{
    return m_Price_missingIsSet;
}

void CatalogsFeedValidationErrors::unsetPrice_missing()
{
    m_Price_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFeedTooSmall() const
{
    return m_Feed_too_small;
}

void CatalogsFeedValidationErrors::setFeedTooSmall(int32_t value)
{
    m_Feed_too_small = value;
    m_Feed_too_smallIsSet = true;
}

bool CatalogsFeedValidationErrors::feedTooSmallIsSet() const
{
    return m_Feed_too_smallIsSet;
}

void CatalogsFeedValidationErrors::unsetFeed_too_small()
{
    m_Feed_too_smallIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getConditionInvalid() const
{
    return m_Condition_invalid;
}

void CatalogsFeedValidationErrors::setConditionInvalid(int32_t value)
{
    m_Condition_invalid = value;
    m_Condition_invalidIsSet = true;
}

bool CatalogsFeedValidationErrors::conditionInvalidIsSet() const
{
    return m_Condition_invalidIsSet;
}

void CatalogsFeedValidationErrors::unsetCondition_invalid()
{
    m_Condition_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getShopifyNoProducts() const
{
    return m_Shopify_no_products;
}

void CatalogsFeedValidationErrors::setShopifyNoProducts(int32_t value)
{
    m_Shopify_no_products = value;
    m_Shopify_no_productsIsSet = true;
}

bool CatalogsFeedValidationErrors::shopifyNoProductsIsSet() const
{
    return m_Shopify_no_productsIsSet;
}

void CatalogsFeedValidationErrors::unsetShopify_no_products()
{
    m_Shopify_no_productsIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getMaxItemsPerItemGroupExceeded() const
{
    return m_Max_items_per_item_group_exceeded;
}

void CatalogsFeedValidationErrors::setMaxItemsPerItemGroupExceeded(int32_t value)
{
    m_Max_items_per_item_group_exceeded = value;
    m_Max_items_per_item_group_exceededIsSet = true;
}

bool CatalogsFeedValidationErrors::maxItemsPerItemGroupExceededIsSet() const
{
    return m_Max_items_per_item_group_exceededIsSet;
}

void CatalogsFeedValidationErrors::unsetMax_items_per_item_group_exceeded()
{
    m_Max_items_per_item_group_exceededIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getItemMainImageDownloadFailure() const
{
    return m_Item_main_image_download_failure;
}

void CatalogsFeedValidationErrors::setItemMainImageDownloadFailure(int32_t value)
{
    m_Item_main_image_download_failure = value;
    m_Item_main_image_download_failureIsSet = true;
}

bool CatalogsFeedValidationErrors::itemMainImageDownloadFailureIsSet() const
{
    return m_Item_main_image_download_failureIsSet;
}

void CatalogsFeedValidationErrors::unsetItem_main_image_download_failure()
{
    m_Item_main_image_download_failureIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPinjoinContentUnsafe() const
{
    return m_Pinjoin_content_unsafe;
}

void CatalogsFeedValidationErrors::setPinjoinContentUnsafe(int32_t value)
{
    m_Pinjoin_content_unsafe = value;
    m_Pinjoin_content_unsafeIsSet = true;
}

bool CatalogsFeedValidationErrors::pinjoinContentUnsafeIsSet() const
{
    return m_Pinjoin_content_unsafeIsSet;
}

void CatalogsFeedValidationErrors::unsetPinjoin_content_unsafe()
{
    m_Pinjoin_content_unsafeIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getBlocklistedImageSignature() const
{
    return m_Blocklisted_image_signature;
}

void CatalogsFeedValidationErrors::setBlocklistedImageSignature(int32_t value)
{
    m_Blocklisted_image_signature = value;
    m_Blocklisted_image_signatureIsSet = true;
}

bool CatalogsFeedValidationErrors::blocklistedImageSignatureIsSet() const
{
    return m_Blocklisted_image_signatureIsSet;
}

void CatalogsFeedValidationErrors::unsetBlocklisted_image_signature()
{
    m_Blocklisted_image_signatureIsSet = false;
}
}
}
}
}


