/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsCreateAsyncRequest_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AdsAnalyticsCreateAsyncRequest_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AdsAnalyticsCreateAsyncRequest_allOf_H_


#include "ModelBase.h"

#include "model/ConversionReportTimeType.h"
#include "model/ConversionReportAttributionType.h"
#include <cpprest/details/basic_types.h>
#include "model/Granularity.h"
#include "model/ConversionAttributionWindowDays.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AdsAnalyticsCreateAsyncRequest_allOf
    : public ModelBase
{
public:
    AdsAnalyticsCreateAsyncRequest_allOf();
    virtual ~AdsAnalyticsCreateAsyncRequest_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdsAnalyticsCreateAsyncRequest_allOf members

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    utility::string_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();

    void setStartDate(const utility::string_t& value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    utility::string_t getEndDate() const;
    bool endDateIsSet() const;
    void unsetEnd_date();

    void setEndDate(const utility::string_t& value);

    /// <summary>
    /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    /// </summary>
    Granularity getGranularity() const;
    bool granularityIsSet() const;
    void unsetGranularity();

    void setGranularity(const Granularity& value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getClickWindowDays() const;
    bool clickWindowDaysIsSet() const;
    void unsetClick_window_days();

    void setClickWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getEngagementWindowDays() const;
    bool engagementWindowDaysIsSet() const;
    void unsetEngagement_window_days();

    void setEngagementWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getViewWindowDays() const;
    bool viewWindowDaysIsSet() const;
    void unsetView_window_days();

    void setViewWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value);

    /// <summary>
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    /// </summary>
    ConversionReportTimeType getConversionReportTime() const;
    bool conversionReportTimeIsSet() const;
    void unsetConversion_report_time();

    void setConversionReportTime(const ConversionReportTimeType& value);

    /// <summary>
    /// List of types of attribution for the conversion report
    /// </summary>
    std::vector<std::shared_ptr<ConversionReportAttributionType>>& getAttributionTypes();
    bool attributionTypesIsSet() const;
    void unsetAttribution_types();

    void setAttributionTypes(const std::vector<std::shared_ptr<ConversionReportAttributionType>>& value);


protected:
    utility::string_t m_Start_date;
    bool m_Start_dateIsSet;
    utility::string_t m_End_date;
    bool m_End_dateIsSet;
    Granularity m_Granularity;
    bool m_GranularityIsSet;
    std::shared_ptr<ConversionAttributionWindowDays> m_Click_window_days;
    bool m_Click_window_daysIsSet;
    std::shared_ptr<ConversionAttributionWindowDays> m_Engagement_window_days;
    bool m_Engagement_window_daysIsSet;
    std::shared_ptr<ConversionAttributionWindowDays> m_View_window_days;
    bool m_View_window_daysIsSet;
    ConversionReportTimeType m_Conversion_report_time;
    bool m_Conversion_report_timeIsSet;
    std::vector<std::shared_ptr<ConversionReportAttributionType>> m_Attribution_types;
    bool m_Attribution_typesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AdsAnalyticsCreateAsyncRequest_allOf_H_ */
