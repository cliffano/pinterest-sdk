/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsAnalyticsCreateAsyncRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AdsAnalyticsCreateAsyncRequest::AdsAnalyticsCreateAsyncRequest()
{
    m_Start_date = utility::conversions::to_string_t("");
    m_Start_dateIsSet = false;
    m_End_date = utility::conversions::to_string_t("");
    m_End_dateIsSet = false;
    m_Granularity = utility::conversions::to_string_t("");
    m_GranularityIsSet = false;
    m_Click_window_daysIsSet = false;
    m_Engagement_window_daysIsSet = false;
    m_View_window_daysIsSet = false;
    m_Conversion_report_time = utility::conversions::to_string_t("");
    m_Conversion_report_timeIsSet = false;
    m_Attribution_typesIsSet = false;
    m_ColumnsIsSet = false;
    m_Level = utility::conversions::to_string_t("");
    m_LevelIsSet = false;
    m_Report_format = utility::conversions::to_string_t("");
    m_Report_formatIsSet = false;
    m_Campaign_idsIsSet = false;
    m_Campaign_statusesIsSet = false;
    m_Campaign_objective_typesIsSet = false;
    m_Ad_group_idsIsSet = false;
    m_Ad_group_statusesIsSet = false;
    m_Ad_idsIsSet = false;
    m_Ad_statusesIsSet = false;
    m_Product_group_idsIsSet = false;
    m_Product_group_statusesIsSet = false;
    m_Product_item_idsIsSet = false;
    m_Targeting_typesIsSet = false;
    m_Metrics_filtersIsSet = false;
}

AdsAnalyticsCreateAsyncRequest::~AdsAnalyticsCreateAsyncRequest()
{
}

void AdsAnalyticsCreateAsyncRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdsAnalyticsCreateAsyncRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Start_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("start_date"))] = ModelBase::toJson(m_Start_date);
    }
    if(m_End_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("end_date"))] = ModelBase::toJson(m_End_date);
    }
    if(m_GranularityIsSet)
    {
        val[utility::conversions::to_string_t(U("granularity"))] = ModelBase::toJson(m_Granularity);
    }
    if(m_Click_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("click_window_days"))] = ModelBase::toJson(m_Click_window_days);
    }
    if(m_Engagement_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("engagement_window_days"))] = ModelBase::toJson(m_Engagement_window_days);
    }
    if(m_View_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("view_window_days"))] = ModelBase::toJson(m_View_window_days);
    }
    if(m_Conversion_report_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_report_time"))] = ModelBase::toJson(m_Conversion_report_time);
    }
    if(m_Attribution_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("attribution_types"))] = ModelBase::toJson(m_Attribution_types);
    }
    if(m_ColumnsIsSet)
    {
        val[utility::conversions::to_string_t(U("columns"))] = ModelBase::toJson(m_Columns);
    }
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t(U("level"))] = ModelBase::toJson(m_Level);
    }
    if(m_Report_formatIsSet)
    {
        val[utility::conversions::to_string_t(U("report_format"))] = ModelBase::toJson(m_Report_format);
    }
    if(m_Campaign_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_ids"))] = ModelBase::toJson(m_Campaign_ids);
    }
    if(m_Campaign_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_statuses"))] = ModelBase::toJson(m_Campaign_statuses);
    }
    if(m_Campaign_objective_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_objective_types"))] = ModelBase::toJson(m_Campaign_objective_types);
    }
    if(m_Ad_group_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_group_ids"))] = ModelBase::toJson(m_Ad_group_ids);
    }
    if(m_Ad_group_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_group_statuses"))] = ModelBase::toJson(m_Ad_group_statuses);
    }
    if(m_Ad_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_ids"))] = ModelBase::toJson(m_Ad_ids);
    }
    if(m_Ad_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_statuses"))] = ModelBase::toJson(m_Ad_statuses);
    }
    if(m_Product_group_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("product_group_ids"))] = ModelBase::toJson(m_Product_group_ids);
    }
    if(m_Product_group_statusesIsSet)
    {
        val[utility::conversions::to_string_t(U("product_group_statuses"))] = ModelBase::toJson(m_Product_group_statuses);
    }
    if(m_Product_item_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("product_item_ids"))] = ModelBase::toJson(m_Product_item_ids);
    }
    if(m_Targeting_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_types"))] = ModelBase::toJson(m_Targeting_types);
    }
    if(m_Metrics_filtersIsSet)
    {
        val[utility::conversions::to_string_t(U("metrics_filters"))] = ModelBase::toJson(m_Metrics_filters);
    }

    return val;
}

bool AdsAnalyticsCreateAsyncRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("start_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_start_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_start_date);
            setStartDate(refVal_start_date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_end_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_end_date);
            setEndDate(refVal_end_date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("granularity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("granularity")));
        if(!fieldValue.is_null())
        {
            Granularity refVal_granularity;
            ok &= ModelBase::fromJson(fieldValue, refVal_granularity);
            setGranularity(refVal_granularity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("click_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("click_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_click_window_days;
            ok &= ModelBase::fromJson(fieldValue, refVal_click_window_days);
            setClickWindowDays(refVal_click_window_days);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engagement_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_engagement_window_days;
            ok &= ModelBase::fromJson(fieldValue, refVal_engagement_window_days);
            setEngagementWindowDays(refVal_engagement_window_days);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("view_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("view_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_view_window_days;
            ok &= ModelBase::fromJson(fieldValue, refVal_view_window_days);
            setViewWindowDays(refVal_view_window_days);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_report_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_report_time")));
        if(!fieldValue.is_null())
        {
            ConversionReportTimeType refVal_conversion_report_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_conversion_report_time);
            setConversionReportTime(refVal_conversion_report_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attribution_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attribution_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConversionReportAttributionType>> refVal_attribution_types;
            ok &= ModelBase::fromJson(fieldValue, refVal_attribution_types);
            setAttributionTypes(refVal_attribution_types);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("columns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("columns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReportingColumnAsync>> refVal_columns;
            ok &= ModelBase::fromJson(fieldValue, refVal_columns);
            setColumns(refVal_columns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("level")));
        if(!fieldValue.is_null())
        {
            MetricsReportingLevel refVal_level;
            ok &= ModelBase::fromJson(fieldValue, refVal_level);
            setLevel(refVal_level);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_format")));
        if(!fieldValue.is_null())
        {
            DataOutputFormat refVal_report_format;
            ok &= ModelBase::fromJson(fieldValue, refVal_report_format);
            setReportFormat(refVal_report_format);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_campaign_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_campaign_ids);
            setCampaignIds(refVal_campaign_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CampaignSummaryStatus>> refVal_campaign_statuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_campaign_statuses);
            setCampaignStatuses(refVal_campaign_statuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_objective_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_objective_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ObjectiveType>> refVal_campaign_objective_types;
            ok &= ModelBase::fromJson(fieldValue, refVal_campaign_objective_types);
            setCampaignObjectiveTypes(refVal_campaign_objective_types);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_group_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_group_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_ad_group_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_ad_group_ids);
            setAdGroupIds(refVal_ad_group_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_group_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_group_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdGroupSummaryStatus>> refVal_ad_group_statuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_ad_group_statuses);
            setAdGroupStatuses(refVal_ad_group_statuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_ad_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_ad_ids);
            setAdIds(refVal_ad_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PinPromotionSummaryStatus>> refVal_ad_statuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_ad_statuses);
            setAdStatuses(refVal_ad_statuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_group_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_group_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_product_group_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_group_ids);
            setProductGroupIds(refVal_product_group_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_group_statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_group_statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProductGroupSummaryStatus>> refVal_product_group_statuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_group_statuses);
            setProductGroupStatuses(refVal_product_group_statuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_item_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_item_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_product_item_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_item_ids);
            setProductItemIds(refVal_product_item_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("targeting_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> refVal_targeting_types;
            ok &= ModelBase::fromJson(fieldValue, refVal_targeting_types);
            setTargetingTypes(refVal_targeting_types);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metrics_filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metrics_filters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> refVal_metrics_filters;
            ok &= ModelBase::fromJson(fieldValue, refVal_metrics_filters);
            setMetricsFilters(refVal_metrics_filters);
        }
    }
    return ok;
}

void AdsAnalyticsCreateAsyncRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_date")), m_Start_date));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_date")), m_End_date));
    }
    if(m_GranularityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("granularity")), m_Granularity));
    }
    if(m_Click_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("click_window_days")), m_Click_window_days));
    }
    if(m_Engagement_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engagement_window_days")), m_Engagement_window_days));
    }
    if(m_View_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("view_window_days")), m_View_window_days));
    }
    if(m_Conversion_report_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_report_time")), m_Conversion_report_time));
    }
    if(m_Attribution_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attribution_types")), m_Attribution_types));
    }
    if(m_ColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("columns")), m_Columns));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("level")), m_Level));
    }
    if(m_Report_formatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_format")), m_Report_format));
    }
    if(m_Campaign_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_ids")), m_Campaign_ids));
    }
    if(m_Campaign_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_statuses")), m_Campaign_statuses));
    }
    if(m_Campaign_objective_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_objective_types")), m_Campaign_objective_types));
    }
    if(m_Ad_group_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_group_ids")), m_Ad_group_ids));
    }
    if(m_Ad_group_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_group_statuses")), m_Ad_group_statuses));
    }
    if(m_Ad_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_ids")), m_Ad_ids));
    }
    if(m_Ad_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_statuses")), m_Ad_statuses));
    }
    if(m_Product_group_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_group_ids")), m_Product_group_ids));
    }
    if(m_Product_group_statusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_group_statuses")), m_Product_group_statuses));
    }
    if(m_Product_item_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_item_ids")), m_Product_item_ids));
    }
    if(m_Targeting_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_types")), m_Targeting_types));
    }
    if(m_Metrics_filtersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metrics_filters")), m_Metrics_filters));
    }
}

bool AdsAnalyticsCreateAsyncRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("start_date"))))
    {
        utility::string_t refVal_start_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_date"))), refVal_start_date );
        setStartDate(refVal_start_date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_date"))))
    {
        utility::string_t refVal_end_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_date"))), refVal_end_date );
        setEndDate(refVal_end_date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("granularity"))))
    {
        Granularity refVal_granularity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("granularity"))), refVal_granularity );
        setGranularity(refVal_granularity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("click_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_click_window_days;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("click_window_days"))), refVal_click_window_days );
        setClickWindowDays(refVal_click_window_days);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_engagement_window_days;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engagement_window_days"))), refVal_engagement_window_days );
        setEngagementWindowDays(refVal_engagement_window_days);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("view_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_view_window_days;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("view_window_days"))), refVal_view_window_days );
        setViewWindowDays(refVal_view_window_days);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_report_time"))))
    {
        ConversionReportTimeType refVal_conversion_report_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_report_time"))), refVal_conversion_report_time );
        setConversionReportTime(refVal_conversion_report_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attribution_types"))))
    {
        std::vector<std::shared_ptr<ConversionReportAttributionType>> refVal_attribution_types;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attribution_types"))), refVal_attribution_types );
        setAttributionTypes(refVal_attribution_types);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("columns"))))
    {
        std::vector<std::shared_ptr<ReportingColumnAsync>> refVal_columns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("columns"))), refVal_columns );
        setColumns(refVal_columns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("level"))))
    {
        MetricsReportingLevel refVal_level;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("level"))), refVal_level );
        setLevel(refVal_level);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_format"))))
    {
        DataOutputFormat refVal_report_format;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_format"))), refVal_report_format );
        setReportFormat(refVal_report_format);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_ids"))))
    {
        std::vector<utility::string_t> refVal_campaign_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_ids"))), refVal_campaign_ids );
        setCampaignIds(refVal_campaign_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_statuses"))))
    {
        std::vector<std::shared_ptr<CampaignSummaryStatus>> refVal_campaign_statuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_statuses"))), refVal_campaign_statuses );
        setCampaignStatuses(refVal_campaign_statuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_objective_types"))))
    {
        std::vector<std::shared_ptr<ObjectiveType>> refVal_campaign_objective_types;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_objective_types"))), refVal_campaign_objective_types );
        setCampaignObjectiveTypes(refVal_campaign_objective_types);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_group_ids"))))
    {
        std::vector<utility::string_t> refVal_ad_group_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_group_ids"))), refVal_ad_group_ids );
        setAdGroupIds(refVal_ad_group_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_group_statuses"))))
    {
        std::vector<std::shared_ptr<AdGroupSummaryStatus>> refVal_ad_group_statuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_group_statuses"))), refVal_ad_group_statuses );
        setAdGroupStatuses(refVal_ad_group_statuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_ids"))))
    {
        std::vector<utility::string_t> refVal_ad_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_ids"))), refVal_ad_ids );
        setAdIds(refVal_ad_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_statuses"))))
    {
        std::vector<std::shared_ptr<PinPromotionSummaryStatus>> refVal_ad_statuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_statuses"))), refVal_ad_statuses );
        setAdStatuses(refVal_ad_statuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_group_ids"))))
    {
        std::vector<utility::string_t> refVal_product_group_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_group_ids"))), refVal_product_group_ids );
        setProductGroupIds(refVal_product_group_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_group_statuses"))))
    {
        std::vector<std::shared_ptr<ProductGroupSummaryStatus>> refVal_product_group_statuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_group_statuses"))), refVal_product_group_statuses );
        setProductGroupStatuses(refVal_product_group_statuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_item_ids"))))
    {
        std::vector<utility::string_t> refVal_product_item_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_item_ids"))), refVal_product_item_ids );
        setProductItemIds(refVal_product_item_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_types"))))
    {
        std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> refVal_targeting_types;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_types"))), refVal_targeting_types );
        setTargetingTypes(refVal_targeting_types);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metrics_filters"))))
    {
        std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> refVal_metrics_filters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metrics_filters"))), refVal_metrics_filters );
        setMetricsFilters(refVal_metrics_filters);
    }
    return ok;
}

utility::string_t AdsAnalyticsCreateAsyncRequest::getStartDate() const
{
    return m_Start_date;
}

void AdsAnalyticsCreateAsyncRequest::setStartDate(const utility::string_t& value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::startDateIsSet() const
{
    return m_Start_dateIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::string_t AdsAnalyticsCreateAsyncRequest::getEndDate() const
{
    return m_End_date;
}

void AdsAnalyticsCreateAsyncRequest::setEndDate(const utility::string_t& value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::endDateIsSet() const
{
    return m_End_dateIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
Granularity AdsAnalyticsCreateAsyncRequest::getGranularity() const
{
    return m_Granularity;
}

void AdsAnalyticsCreateAsyncRequest::setGranularity(const Granularity& value)
{
    m_Granularity = value;
    m_GranularityIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::granularityIsSet() const
{
    return m_GranularityIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetGranularity()
{
    m_GranularityIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getClickWindowDays() const
{
    return m_Click_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setClickWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_Click_window_days = value;
    m_Click_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::clickWindowDaysIsSet() const
{
    return m_Click_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetClick_window_days()
{
    m_Click_window_daysIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setEngagementWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_Engagement_window_days = value;
    m_Engagement_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::engagementWindowDaysIsSet() const
{
    return m_Engagement_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetEngagement_window_days()
{
    m_Engagement_window_daysIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getViewWindowDays() const
{
    return m_View_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setViewWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_View_window_days = value;
    m_View_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::viewWindowDaysIsSet() const
{
    return m_View_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetView_window_days()
{
    m_View_window_daysIsSet = false;
}
ConversionReportTimeType AdsAnalyticsCreateAsyncRequest::getConversionReportTime() const
{
    return m_Conversion_report_time;
}

void AdsAnalyticsCreateAsyncRequest::setConversionReportTime(const ConversionReportTimeType& value)
{
    m_Conversion_report_time = value;
    m_Conversion_report_timeIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::conversionReportTimeIsSet() const
{
    return m_Conversion_report_timeIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetConversion_report_time()
{
    m_Conversion_report_timeIsSet = false;
}
std::vector<std::shared_ptr<ConversionReportAttributionType>>& AdsAnalyticsCreateAsyncRequest::getAttributionTypes()
{
    return m_Attribution_types;
}

void AdsAnalyticsCreateAsyncRequest::setAttributionTypes(const std::vector<std::shared_ptr<ConversionReportAttributionType>>& value)
{
    m_Attribution_types = value;
    m_Attribution_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::attributionTypesIsSet() const
{
    return m_Attribution_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAttribution_types()
{
    m_Attribution_typesIsSet = false;
}
std::vector<std::shared_ptr<ReportingColumnAsync>>& AdsAnalyticsCreateAsyncRequest::getColumns()
{
    return m_Columns;
}

void AdsAnalyticsCreateAsyncRequest::setColumns(const std::vector<std::shared_ptr<ReportingColumnAsync>>& value)
{
    m_Columns = value;
    m_ColumnsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::columnsIsSet() const
{
    return m_ColumnsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetColumns()
{
    m_ColumnsIsSet = false;
}
MetricsReportingLevel AdsAnalyticsCreateAsyncRequest::getLevel() const
{
    return m_Level;
}

void AdsAnalyticsCreateAsyncRequest::setLevel(const MetricsReportingLevel& value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::levelIsSet() const
{
    return m_LevelIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetLevel()
{
    m_LevelIsSet = false;
}
DataOutputFormat AdsAnalyticsCreateAsyncRequest::getReportFormat() const
{
    return m_Report_format;
}

void AdsAnalyticsCreateAsyncRequest::setReportFormat(const DataOutputFormat& value)
{
    m_Report_format = value;
    m_Report_formatIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::reportFormatIsSet() const
{
    return m_Report_formatIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetReport_format()
{
    m_Report_formatIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getCampaignIds()
{
    return m_Campaign_ids;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignIds(const std::vector<utility::string_t>& value)
{
    m_Campaign_ids = value;
    m_Campaign_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::campaignIdsIsSet() const
{
    return m_Campaign_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetCampaign_ids()
{
    m_Campaign_idsIsSet = false;
}
std::vector<std::shared_ptr<CampaignSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getCampaignStatuses()
{
    return m_Campaign_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignStatuses(const std::vector<std::shared_ptr<CampaignSummaryStatus>>& value)
{
    m_Campaign_statuses = value;
    m_Campaign_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::campaignStatusesIsSet() const
{
    return m_Campaign_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetCampaign_statuses()
{
    m_Campaign_statusesIsSet = false;
}
std::vector<std::shared_ptr<ObjectiveType>>& AdsAnalyticsCreateAsyncRequest::getCampaignObjectiveTypes()
{
    return m_Campaign_objective_types;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignObjectiveTypes(const std::vector<std::shared_ptr<ObjectiveType>>& value)
{
    m_Campaign_objective_types = value;
    m_Campaign_objective_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::campaignObjectiveTypesIsSet() const
{
    return m_Campaign_objective_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetCampaign_objective_types()
{
    m_Campaign_objective_typesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getAdGroupIds()
{
    return m_Ad_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupIds(const std::vector<utility::string_t>& value)
{
    m_Ad_group_ids = value;
    m_Ad_group_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adGroupIdsIsSet() const
{
    return m_Ad_group_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_group_ids()
{
    m_Ad_group_idsIsSet = false;
}
std::vector<std::shared_ptr<AdGroupSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getAdGroupStatuses()
{
    return m_Ad_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupStatuses(const std::vector<std::shared_ptr<AdGroupSummaryStatus>>& value)
{
    m_Ad_group_statuses = value;
    m_Ad_group_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adGroupStatusesIsSet() const
{
    return m_Ad_group_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_group_statuses()
{
    m_Ad_group_statusesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getAdIds()
{
    return m_Ad_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdIds(const std::vector<utility::string_t>& value)
{
    m_Ad_ids = value;
    m_Ad_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adIdsIsSet() const
{
    return m_Ad_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_ids()
{
    m_Ad_idsIsSet = false;
}
std::vector<std::shared_ptr<PinPromotionSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getAdStatuses()
{
    return m_Ad_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdStatuses(const std::vector<std::shared_ptr<PinPromotionSummaryStatus>>& value)
{
    m_Ad_statuses = value;
    m_Ad_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::adStatusesIsSet() const
{
    return m_Ad_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetAd_statuses()
{
    m_Ad_statusesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getProductGroupIds()
{
    return m_Product_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupIds(const std::vector<utility::string_t>& value)
{
    m_Product_group_ids = value;
    m_Product_group_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::productGroupIdsIsSet() const
{
    return m_Product_group_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetProduct_group_ids()
{
    m_Product_group_idsIsSet = false;
}
std::vector<std::shared_ptr<ProductGroupSummaryStatus>>& AdsAnalyticsCreateAsyncRequest::getProductGroupStatuses()
{
    return m_Product_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupStatuses(const std::vector<std::shared_ptr<ProductGroupSummaryStatus>>& value)
{
    m_Product_group_statuses = value;
    m_Product_group_statusesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::productGroupStatusesIsSet() const
{
    return m_Product_group_statusesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetProduct_group_statuses()
{
    m_Product_group_statusesIsSet = false;
}
std::vector<utility::string_t>& AdsAnalyticsCreateAsyncRequest::getProductItemIds()
{
    return m_Product_item_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductItemIds(const std::vector<utility::string_t>& value)
{
    m_Product_item_ids = value;
    m_Product_item_idsIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::productItemIdsIsSet() const
{
    return m_Product_item_idsIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetProduct_item_ids()
{
    m_Product_item_idsIsSet = false;
}
std::vector<std::shared_ptr<AdsAnalyticsTargetingType>>& AdsAnalyticsCreateAsyncRequest::getTargetingTypes()
{
    return m_Targeting_types;
}

void AdsAnalyticsCreateAsyncRequest::setTargetingTypes(const std::vector<std::shared_ptr<AdsAnalyticsTargetingType>>& value)
{
    m_Targeting_types = value;
    m_Targeting_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::targetingTypesIsSet() const
{
    return m_Targeting_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetTargeting_types()
{
    m_Targeting_typesIsSet = false;
}
std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>>& AdsAnalyticsCreateAsyncRequest::getMetricsFilters()
{
    return m_Metrics_filters;
}

void AdsAnalyticsCreateAsyncRequest::setMetricsFilters(const std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>>& value)
{
    m_Metrics_filters = value;
    m_Metrics_filtersIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest::metricsFiltersIsSet() const
{
    return m_Metrics_filtersIsSet;
}

void AdsAnalyticsCreateAsyncRequest::unsetMetrics_filters()
{
    m_Metrics_filtersIsSet = false;
}
}
}
}
}


