/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedCredentials.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CatalogsFeedCredentials::CatalogsFeedCredentials()
{
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
}

CatalogsFeedCredentials::~CatalogsFeedCredentials()
{
}

void CatalogsFeedCredentials::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedCredentials::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_Password);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }

    return val;
}

bool CatalogsFeedCredentials::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_password);
            setPassword(refVal_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_username;
            ok &= ModelBase::fromJson(fieldValue, refVal_username);
            setUsername(refVal_username);
        }
    }
    return ok;
}

void CatalogsFeedCredentials::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")), m_Password));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
}

bool CatalogsFeedCredentials::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("password"))))
    {
        utility::string_t refVal_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_password );
        setPassword(refVal_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_username;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_username );
        setUsername(refVal_username);
    }
    return ok;
}

utility::string_t CatalogsFeedCredentials::getPassword() const
{
    return m_Password;
}

void CatalogsFeedCredentials::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool CatalogsFeedCredentials::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void CatalogsFeedCredentials::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::string_t CatalogsFeedCredentials::getUsername() const
{
    return m_Username;
}

void CatalogsFeedCredentials::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool CatalogsFeedCredentials::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void CatalogsFeedCredentials::unsetUsername()
{
    m_UsernameIsSet = false;
}
}
}
}
}


