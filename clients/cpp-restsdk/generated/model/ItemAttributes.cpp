/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ItemAttributes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ItemAttributes::ItemAttributes()
{
    m_Ad_link = utility::conversions::to_string_t("");
    m_Ad_linkIsSet = false;
    m_Additional_image_linkIsSet = false;
    m_Adult = false;
    m_AdultIsSet = false;
    m_Age_group = utility::conversions::to_string_t("");
    m_Age_groupIsSet = false;
    m_Availability = utility::conversions::to_string_t("");
    m_AvailabilityIsSet = false;
    m_Average_review_rating = 0.0;
    m_Average_review_ratingIsSet = false;
    m_Brand = utility::conversions::to_string_t("");
    m_BrandIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_Condition = utility::conversions::to_string_t("");
    m_ConditionIsSet = false;
    m_Custom_label_0 = utility::conversions::to_string_t("");
    m_Custom_label_0IsSet = false;
    m_Custom_label_1 = utility::conversions::to_string_t("");
    m_Custom_label_1IsSet = false;
    m_Custom_label_2 = utility::conversions::to_string_t("");
    m_Custom_label_2IsSet = false;
    m_Custom_label_3 = utility::conversions::to_string_t("");
    m_Custom_label_3IsSet = false;
    m_Custom_label_4 = utility::conversions::to_string_t("");
    m_Custom_label_4IsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Free_shipping_label = false;
    m_Free_shipping_labelIsSet = false;
    m_Free_shipping_limit = utility::conversions::to_string_t("");
    m_Free_shipping_limitIsSet = false;
    m_Gender = utility::conversions::to_string_t("");
    m_GenderIsSet = false;
    m_Google_product_category = utility::conversions::to_string_t("");
    m_Google_product_categoryIsSet = false;
    m_Gtin = 0;
    m_GtinIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Image_linkIsSet = false;
    m_Item_group_id = utility::conversions::to_string_t("");
    m_Item_group_idIsSet = false;
    m_Last_updated_time = 0L;
    m_Last_updated_timeIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Material = utility::conversions::to_string_t("");
    m_MaterialIsSet = false;
    m_Min_ad_price = utility::conversions::to_string_t("");
    m_Min_ad_priceIsSet = false;
    m_Mobile_link = utility::conversions::to_string_t("");
    m_Mobile_linkIsSet = false;
    m_Mpn = utility::conversions::to_string_t("");
    m_MpnIsSet = false;
    m_Number_of_ratings = 0;
    m_Number_of_ratingsIsSet = false;
    m_Number_of_reviews = 0;
    m_Number_of_reviewsIsSet = false;
    m_Pattern = utility::conversions::to_string_t("");
    m_PatternIsSet = false;
    m_Price = utility::conversions::to_string_t("");
    m_PriceIsSet = false;
    m_Product_type = utility::conversions::to_string_t("");
    m_Product_typeIsSet = false;
    m_Sale_price = utility::conversions::to_string_t("");
    m_Sale_priceIsSet = false;
    m_Shipping = utility::conversions::to_string_t("");
    m_ShippingIsSet = false;
    m_Shipping_height = utility::conversions::to_string_t("");
    m_Shipping_heightIsSet = false;
    m_Shipping_weight = utility::conversions::to_string_t("");
    m_Shipping_weightIsSet = false;
    m_Shipping_width = utility::conversions::to_string_t("");
    m_Shipping_widthIsSet = false;
    m_Size = utility::conversions::to_string_t("");
    m_SizeIsSet = false;
    m_Size_system = utility::conversions::to_string_t("");
    m_Size_systemIsSet = false;
    m_Size_type = utility::conversions::to_string_t("");
    m_Size_typeIsSet = false;
    m_Tax = utility::conversions::to_string_t("");
    m_TaxIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
}

ItemAttributes::~ItemAttributes()
{
}

void ItemAttributes::validate()
{
    // TODO: implement validation
}

web::json::value ItemAttributes::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_link"))] = ModelBase::toJson(m_Ad_link);
    }
    if(m_Additional_image_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("additional_image_link"))] = ModelBase::toJson(m_Additional_image_link);
    }
    if(m_AdultIsSet)
    {
        val[utility::conversions::to_string_t(U("adult"))] = ModelBase::toJson(m_Adult);
    }
    if(m_Age_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("age_group"))] = ModelBase::toJson(m_Age_group);
    }
    if(m_AvailabilityIsSet)
    {
        val[utility::conversions::to_string_t(U("availability"))] = ModelBase::toJson(m_Availability);
    }
    if(m_Average_review_ratingIsSet)
    {
        val[utility::conversions::to_string_t(U("average_review_rating"))] = ModelBase::toJson(m_Average_review_rating);
    }
    if(m_BrandIsSet)
    {
        val[utility::conversions::to_string_t(U("brand"))] = ModelBase::toJson(m_Brand);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t(U("color"))] = ModelBase::toJson(m_Color);
    }
    if(m_ConditionIsSet)
    {
        val[utility::conversions::to_string_t(U("condition"))] = ModelBase::toJson(m_Condition);
    }
    if(m_Custom_label_0IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_0"))] = ModelBase::toJson(m_Custom_label_0);
    }
    if(m_Custom_label_1IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_1"))] = ModelBase::toJson(m_Custom_label_1);
    }
    if(m_Custom_label_2IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_2"))] = ModelBase::toJson(m_Custom_label_2);
    }
    if(m_Custom_label_3IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_3"))] = ModelBase::toJson(m_Custom_label_3);
    }
    if(m_Custom_label_4IsSet)
    {
        val[utility::conversions::to_string_t(U("custom_label_4"))] = ModelBase::toJson(m_Custom_label_4);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Free_shipping_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("free_shipping_label"))] = ModelBase::toJson(m_Free_shipping_label);
    }
    if(m_Free_shipping_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("free_shipping_limit"))] = ModelBase::toJson(m_Free_shipping_limit);
    }
    if(m_GenderIsSet)
    {
        val[utility::conversions::to_string_t(U("gender"))] = ModelBase::toJson(m_Gender);
    }
    if(m_Google_product_categoryIsSet)
    {
        val[utility::conversions::to_string_t(U("google_product_category"))] = ModelBase::toJson(m_Google_product_category);
    }
    if(m_GtinIsSet)
    {
        val[utility::conversions::to_string_t(U("gtin"))] = ModelBase::toJson(m_Gtin);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Image_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("image_link"))] = ModelBase::toJson(m_Image_link);
    }
    if(m_Item_group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("item_group_id"))] = ModelBase::toJson(m_Item_group_id);
    }
    if(m_Last_updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("last_updated_time"))] = ModelBase::toJson(m_Last_updated_time);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t(U("link"))] = ModelBase::toJson(m_Link);
    }
    if(m_MaterialIsSet)
    {
        val[utility::conversions::to_string_t(U("material"))] = ModelBase::toJson(m_Material);
    }
    if(m_Min_ad_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("min_ad_price"))] = ModelBase::toJson(m_Min_ad_price);
    }
    if(m_Mobile_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("mobile_link"))] = ModelBase::toJson(m_Mobile_link);
    }
    if(m_MpnIsSet)
    {
        val[utility::conversions::to_string_t(U("mpn"))] = ModelBase::toJson(m_Mpn);
    }
    if(m_Number_of_ratingsIsSet)
    {
        val[utility::conversions::to_string_t(U("number_of_ratings"))] = ModelBase::toJson(m_Number_of_ratings);
    }
    if(m_Number_of_reviewsIsSet)
    {
        val[utility::conversions::to_string_t(U("number_of_reviews"))] = ModelBase::toJson(m_Number_of_reviews);
    }
    if(m_PatternIsSet)
    {
        val[utility::conversions::to_string_t(U("pattern"))] = ModelBase::toJson(m_Pattern);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_Product_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("product_type"))] = ModelBase::toJson(m_Product_type);
    }
    if(m_Sale_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("sale_price"))] = ModelBase::toJson(m_Sale_price);
    }
    if(m_ShippingIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping"))] = ModelBase::toJson(m_Shipping);
    }
    if(m_Shipping_heightIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_height"))] = ModelBase::toJson(m_Shipping_height);
    }
    if(m_Shipping_weightIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_weight"))] = ModelBase::toJson(m_Shipping_weight);
    }
    if(m_Shipping_widthIsSet)
    {
        val[utility::conversions::to_string_t(U("shipping_width"))] = ModelBase::toJson(m_Shipping_width);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_Size_systemIsSet)
    {
        val[utility::conversions::to_string_t(U("size_system"))] = ModelBase::toJson(m_Size_system);
    }
    if(m_Size_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("size_type"))] = ModelBase::toJson(m_Size_type);
    }
    if(m_TaxIsSet)
    {
        val[utility::conversions::to_string_t(U("tax"))] = ModelBase::toJson(m_Tax);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }

    return val;
}

bool ItemAttributes::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ad_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_ad_link);
            setAdLink(refVal_ad_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("additional_image_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additional_image_link")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_additional_image_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_additional_image_link);
            setAdditionalImageLink(refVal_additional_image_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adult"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adult")));
        if(!fieldValue.is_null())
        {
            bool refVal_adult;
            ok &= ModelBase::fromJson(fieldValue, refVal_adult);
            setAdult(refVal_adult);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("age_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("age_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_age_group;
            ok &= ModelBase::fromJson(fieldValue, refVal_age_group);
            setAgeGroup(refVal_age_group);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availability"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availability")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_availability;
            ok &= ModelBase::fromJson(fieldValue, refVal_availability);
            setAvailability(refVal_availability);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("average_review_rating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average_review_rating")));
        if(!fieldValue.is_null())
        {
            double refVal_average_review_rating;
            ok &= ModelBase::fromJson(fieldValue, refVal_average_review_rating);
            setAverageReviewRating(refVal_average_review_rating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("brand"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("brand")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_brand;
            ok &= ModelBase::fromJson(fieldValue, refVal_brand);
            setBrand(refVal_brand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("condition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("condition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_condition;
            ok &= ModelBase::fromJson(fieldValue, refVal_condition);
            setCondition(refVal_condition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_custom_label_0;
            ok &= ModelBase::fromJson(fieldValue, refVal_custom_label_0);
            setCustomLabel0(refVal_custom_label_0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_custom_label_1;
            ok &= ModelBase::fromJson(fieldValue, refVal_custom_label_1);
            setCustomLabel1(refVal_custom_label_1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_custom_label_2;
            ok &= ModelBase::fromJson(fieldValue, refVal_custom_label_2);
            setCustomLabel2(refVal_custom_label_2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_3")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_custom_label_3;
            ok &= ModelBase::fromJson(fieldValue, refVal_custom_label_3);
            setCustomLabel3(refVal_custom_label_3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("custom_label_4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("custom_label_4")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_custom_label_4;
            ok &= ModelBase::fromJson(fieldValue, refVal_custom_label_4);
            setCustomLabel4(refVal_custom_label_4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_shipping_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_shipping_label")));
        if(!fieldValue.is_null())
        {
            bool refVal_free_shipping_label;
            ok &= ModelBase::fromJson(fieldValue, refVal_free_shipping_label);
            setFreeShippingLabel(refVal_free_shipping_label);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_shipping_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_shipping_limit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_free_shipping_limit;
            ok &= ModelBase::fromJson(fieldValue, refVal_free_shipping_limit);
            setFreeShippingLimit(refVal_free_shipping_limit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gender")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_gender;
            ok &= ModelBase::fromJson(fieldValue, refVal_gender);
            setGender(refVal_gender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("google_product_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("google_product_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_google_product_category;
            ok &= ModelBase::fromJson(fieldValue, refVal_google_product_category);
            setGoogleProductCategory(refVal_google_product_category);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gtin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gtin")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_gtin;
            ok &= ModelBase::fromJson(fieldValue, refVal_gtin);
            setGtin(refVal_gtin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_link")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_image_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_image_link);
            setImageLink(refVal_image_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item_group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_item_group_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_item_group_id);
            setItemGroupId(refVal_item_group_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_updated_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_last_updated_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_last_updated_time);
            setLastUpdatedTime(refVal_last_updated_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_link);
            setLink(refVal_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("material"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("material")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_material;
            ok &= ModelBase::fromJson(fieldValue, refVal_material);
            setMaterial(refVal_material);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_ad_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_ad_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_min_ad_price;
            ok &= ModelBase::fromJson(fieldValue, refVal_min_ad_price);
            setMinAdPrice(refVal_min_ad_price);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mobile_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mobile_link")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mobile_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_mobile_link);
            setMobileLink(refVal_mobile_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mpn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mpn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mpn;
            ok &= ModelBase::fromJson(fieldValue, refVal_mpn);
            setMpn(refVal_mpn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number_of_ratings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number_of_ratings")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_number_of_ratings;
            ok &= ModelBase::fromJson(fieldValue, refVal_number_of_ratings);
            setNumberOfRatings(refVal_number_of_ratings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number_of_reviews"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number_of_reviews")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_number_of_reviews;
            ok &= ModelBase::fromJson(fieldValue, refVal_number_of_reviews);
            setNumberOfReviews(refVal_number_of_reviews);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pattern"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pattern")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pattern;
            ok &= ModelBase::fromJson(fieldValue, refVal_pattern);
            setPattern(refVal_pattern);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_price;
            ok &= ModelBase::fromJson(fieldValue, refVal_price);
            setPrice(refVal_price);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_product_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_product_type);
            setProductType(refVal_product_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sale_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sale_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sale_price;
            ok &= ModelBase::fromJson(fieldValue, refVal_sale_price);
            setSalePrice(refVal_sale_price);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_shipping;
            ok &= ModelBase::fromJson(fieldValue, refVal_shipping);
            setShipping(refVal_shipping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_height"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_height")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_shipping_height;
            ok &= ModelBase::fromJson(fieldValue, refVal_shipping_height);
            setShippingHeight(refVal_shipping_height);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_weight")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_shipping_weight;
            ok &= ModelBase::fromJson(fieldValue, refVal_shipping_weight);
            setShippingWeight(refVal_shipping_weight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipping_width"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipping_width")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_shipping_width;
            ok &= ModelBase::fromJson(fieldValue, refVal_shipping_width);
            setShippingWidth(refVal_shipping_width);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_size);
            setSize(refVal_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_system"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_system")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_size_system;
            ok &= ModelBase::fromJson(fieldValue, refVal_size_system);
            setSizeSystem(refVal_size_system);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_size_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_size_type);
            setSizeType(refVal_size_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tax"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tax")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tax;
            ok &= ModelBase::fromJson(fieldValue, refVal_tax);
            setTax(refVal_tax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    return ok;
}

void ItemAttributes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_link")), m_Ad_link));
    }
    if(m_Additional_image_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additional_image_link")), m_Additional_image_link));
    }
    if(m_AdultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adult")), m_Adult));
    }
    if(m_Age_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("age_group")), m_Age_group));
    }
    if(m_AvailabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availability")), m_Availability));
    }
    if(m_Average_review_ratingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average_review_rating")), m_Average_review_rating));
    }
    if(m_BrandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("brand")), m_Brand));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("color")), m_Color));
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("condition")), m_Condition));
    }
    if(m_Custom_label_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_0")), m_Custom_label_0));
    }
    if(m_Custom_label_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_1")), m_Custom_label_1));
    }
    if(m_Custom_label_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_2")), m_Custom_label_2));
    }
    if(m_Custom_label_3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_3")), m_Custom_label_3));
    }
    if(m_Custom_label_4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("custom_label_4")), m_Custom_label_4));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Free_shipping_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_shipping_label")), m_Free_shipping_label));
    }
    if(m_Free_shipping_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_shipping_limit")), m_Free_shipping_limit));
    }
    if(m_GenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gender")), m_Gender));
    }
    if(m_Google_product_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("google_product_category")), m_Google_product_category));
    }
    if(m_GtinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gtin")), m_Gtin));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Image_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_link")), m_Image_link));
    }
    if(m_Item_group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_group_id")), m_Item_group_id));
    }
    if(m_Last_updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_updated_time")), m_Last_updated_time));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
    }
    if(m_MaterialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("material")), m_Material));
    }
    if(m_Min_ad_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_ad_price")), m_Min_ad_price));
    }
    if(m_Mobile_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mobile_link")), m_Mobile_link));
    }
    if(m_MpnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mpn")), m_Mpn));
    }
    if(m_Number_of_ratingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number_of_ratings")), m_Number_of_ratings));
    }
    if(m_Number_of_reviewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number_of_reviews")), m_Number_of_reviews));
    }
    if(m_PatternIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pattern")), m_Pattern));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_Product_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_type")), m_Product_type));
    }
    if(m_Sale_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sale_price")), m_Sale_price));
    }
    if(m_ShippingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping")), m_Shipping));
    }
    if(m_Shipping_heightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_height")), m_Shipping_height));
    }
    if(m_Shipping_weightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_weight")), m_Shipping_weight));
    }
    if(m_Shipping_widthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipping_width")), m_Shipping_width));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_Size_systemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_system")), m_Size_system));
    }
    if(m_Size_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_type")), m_Size_type));
    }
    if(m_TaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tax")), m_Tax));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
}

bool ItemAttributes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_link"))))
    {
        utility::string_t refVal_ad_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_link"))), refVal_ad_link );
        setAdLink(refVal_ad_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("additional_image_link"))))
    {
        std::vector<utility::string_t> refVal_additional_image_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additional_image_link"))), refVal_additional_image_link );
        setAdditionalImageLink(refVal_additional_image_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adult"))))
    {
        bool refVal_adult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adult"))), refVal_adult );
        setAdult(refVal_adult);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("age_group"))))
    {
        utility::string_t refVal_age_group;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("age_group"))), refVal_age_group );
        setAgeGroup(refVal_age_group);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availability"))))
    {
        utility::string_t refVal_availability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availability"))), refVal_availability );
        setAvailability(refVal_availability);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("average_review_rating"))))
    {
        double refVal_average_review_rating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average_review_rating"))), refVal_average_review_rating );
        setAverageReviewRating(refVal_average_review_rating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("brand"))))
    {
        utility::string_t refVal_brand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("brand"))), refVal_brand );
        setBrand(refVal_brand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("color"))))
    {
        utility::string_t refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("color"))), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("condition"))))
    {
        utility::string_t refVal_condition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("condition"))), refVal_condition );
        setCondition(refVal_condition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_0"))))
    {
        utility::string_t refVal_custom_label_0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_0"))), refVal_custom_label_0 );
        setCustomLabel0(refVal_custom_label_0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_1"))))
    {
        utility::string_t refVal_custom_label_1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_1"))), refVal_custom_label_1 );
        setCustomLabel1(refVal_custom_label_1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_2"))))
    {
        utility::string_t refVal_custom_label_2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_2"))), refVal_custom_label_2 );
        setCustomLabel2(refVal_custom_label_2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_3"))))
    {
        utility::string_t refVal_custom_label_3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_3"))), refVal_custom_label_3 );
        setCustomLabel3(refVal_custom_label_3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("custom_label_4"))))
    {
        utility::string_t refVal_custom_label_4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("custom_label_4"))), refVal_custom_label_4 );
        setCustomLabel4(refVal_custom_label_4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_shipping_label"))))
    {
        bool refVal_free_shipping_label;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_shipping_label"))), refVal_free_shipping_label );
        setFreeShippingLabel(refVal_free_shipping_label);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_shipping_limit"))))
    {
        utility::string_t refVal_free_shipping_limit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_shipping_limit"))), refVal_free_shipping_limit );
        setFreeShippingLimit(refVal_free_shipping_limit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gender"))))
    {
        utility::string_t refVal_gender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gender"))), refVal_gender );
        setGender(refVal_gender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("google_product_category"))))
    {
        utility::string_t refVal_google_product_category;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("google_product_category"))), refVal_google_product_category );
        setGoogleProductCategory(refVal_google_product_category);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gtin"))))
    {
        int32_t refVal_gtin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gtin"))), refVal_gtin );
        setGtin(refVal_gtin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image_link"))))
    {
        std::vector<utility::string_t> refVal_image_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_link"))), refVal_image_link );
        setImageLink(refVal_image_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item_group_id"))))
    {
        utility::string_t refVal_item_group_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_group_id"))), refVal_item_group_id );
        setItemGroupId(refVal_item_group_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_updated_time"))))
    {
        int64_t refVal_last_updated_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_updated_time"))), refVal_last_updated_time );
        setLastUpdatedTime(refVal_last_updated_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("link"))))
    {
        utility::string_t refVal_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("link"))), refVal_link );
        setLink(refVal_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("material"))))
    {
        utility::string_t refVal_material;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("material"))), refVal_material );
        setMaterial(refVal_material);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_ad_price"))))
    {
        utility::string_t refVal_min_ad_price;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_ad_price"))), refVal_min_ad_price );
        setMinAdPrice(refVal_min_ad_price);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mobile_link"))))
    {
        utility::string_t refVal_mobile_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mobile_link"))), refVal_mobile_link );
        setMobileLink(refVal_mobile_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mpn"))))
    {
        utility::string_t refVal_mpn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mpn"))), refVal_mpn );
        setMpn(refVal_mpn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number_of_ratings"))))
    {
        int32_t refVal_number_of_ratings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number_of_ratings"))), refVal_number_of_ratings );
        setNumberOfRatings(refVal_number_of_ratings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number_of_reviews"))))
    {
        int32_t refVal_number_of_reviews;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number_of_reviews"))), refVal_number_of_reviews );
        setNumberOfReviews(refVal_number_of_reviews);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pattern"))))
    {
        utility::string_t refVal_pattern;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pattern"))), refVal_pattern );
        setPattern(refVal_pattern);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        utility::string_t refVal_price;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_price );
        setPrice(refVal_price);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_type"))))
    {
        utility::string_t refVal_product_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_type"))), refVal_product_type );
        setProductType(refVal_product_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sale_price"))))
    {
        utility::string_t refVal_sale_price;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sale_price"))), refVal_sale_price );
        setSalePrice(refVal_sale_price);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping"))))
    {
        utility::string_t refVal_shipping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping"))), refVal_shipping );
        setShipping(refVal_shipping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_height"))))
    {
        utility::string_t refVal_shipping_height;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_height"))), refVal_shipping_height );
        setShippingHeight(refVal_shipping_height);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_weight"))))
    {
        utility::string_t refVal_shipping_weight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_weight"))), refVal_shipping_weight );
        setShippingWeight(refVal_shipping_weight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipping_width"))))
    {
        utility::string_t refVal_shipping_width;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipping_width"))), refVal_shipping_width );
        setShippingWidth(refVal_shipping_width);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        utility::string_t refVal_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_size );
        setSize(refVal_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_system"))))
    {
        utility::string_t refVal_size_system;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_system"))), refVal_size_system );
        setSizeSystem(refVal_size_system);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_type"))))
    {
        utility::string_t refVal_size_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_type"))), refVal_size_type );
        setSizeType(refVal_size_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tax"))))
    {
        utility::string_t refVal_tax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tax"))), refVal_tax );
        setTax(refVal_tax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_title );
        setTitle(refVal_title);
    }
    return ok;
}

utility::string_t ItemAttributes::getAdLink() const
{
    return m_Ad_link;
}

void ItemAttributes::setAdLink(const utility::string_t& value)
{
    m_Ad_link = value;
    m_Ad_linkIsSet = true;
}

bool ItemAttributes::adLinkIsSet() const
{
    return m_Ad_linkIsSet;
}

void ItemAttributes::unsetAd_link()
{
    m_Ad_linkIsSet = false;
}
std::vector<utility::string_t>& ItemAttributes::getAdditionalImageLink()
{
    return m_Additional_image_link;
}

void ItemAttributes::setAdditionalImageLink(const std::vector<utility::string_t>& value)
{
    m_Additional_image_link = value;
    m_Additional_image_linkIsSet = true;
}

bool ItemAttributes::additionalImageLinkIsSet() const
{
    return m_Additional_image_linkIsSet;
}

void ItemAttributes::unsetAdditional_image_link()
{
    m_Additional_image_linkIsSet = false;
}
bool ItemAttributes::isAdult() const
{
    return m_Adult;
}

void ItemAttributes::setAdult(bool value)
{
    m_Adult = value;
    m_AdultIsSet = true;
}

bool ItemAttributes::adultIsSet() const
{
    return m_AdultIsSet;
}

void ItemAttributes::unsetAdult()
{
    m_AdultIsSet = false;
}
utility::string_t ItemAttributes::getAgeGroup() const
{
    return m_Age_group;
}

void ItemAttributes::setAgeGroup(const utility::string_t& value)
{
    m_Age_group = value;
    m_Age_groupIsSet = true;
}

bool ItemAttributes::ageGroupIsSet() const
{
    return m_Age_groupIsSet;
}

void ItemAttributes::unsetAge_group()
{
    m_Age_groupIsSet = false;
}
utility::string_t ItemAttributes::getAvailability() const
{
    return m_Availability;
}

void ItemAttributes::setAvailability(const utility::string_t& value)
{
    m_Availability = value;
    m_AvailabilityIsSet = true;
}

bool ItemAttributes::availabilityIsSet() const
{
    return m_AvailabilityIsSet;
}

void ItemAttributes::unsetAvailability()
{
    m_AvailabilityIsSet = false;
}
double ItemAttributes::getAverageReviewRating() const
{
    return m_Average_review_rating;
}

void ItemAttributes::setAverageReviewRating(double value)
{
    m_Average_review_rating = value;
    m_Average_review_ratingIsSet = true;
}

bool ItemAttributes::averageReviewRatingIsSet() const
{
    return m_Average_review_ratingIsSet;
}

void ItemAttributes::unsetAverage_review_rating()
{
    m_Average_review_ratingIsSet = false;
}
utility::string_t ItemAttributes::getBrand() const
{
    return m_Brand;
}

void ItemAttributes::setBrand(const utility::string_t& value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}

bool ItemAttributes::brandIsSet() const
{
    return m_BrandIsSet;
}

void ItemAttributes::unsetBrand()
{
    m_BrandIsSet = false;
}
utility::string_t ItemAttributes::getColor() const
{
    return m_Color;
}

void ItemAttributes::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool ItemAttributes::colorIsSet() const
{
    return m_ColorIsSet;
}

void ItemAttributes::unsetColor()
{
    m_ColorIsSet = false;
}
utility::string_t ItemAttributes::getCondition() const
{
    return m_Condition;
}

void ItemAttributes::setCondition(const utility::string_t& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}

bool ItemAttributes::conditionIsSet() const
{
    return m_ConditionIsSet;
}

void ItemAttributes::unsetCondition()
{
    m_ConditionIsSet = false;
}
utility::string_t ItemAttributes::getCustomLabel0() const
{
    return m_Custom_label_0;
}

void ItemAttributes::setCustomLabel0(const utility::string_t& value)
{
    m_Custom_label_0 = value;
    m_Custom_label_0IsSet = true;
}

bool ItemAttributes::customLabel0IsSet() const
{
    return m_Custom_label_0IsSet;
}

void ItemAttributes::unsetCustom_label_0()
{
    m_Custom_label_0IsSet = false;
}
utility::string_t ItemAttributes::getCustomLabel1() const
{
    return m_Custom_label_1;
}

void ItemAttributes::setCustomLabel1(const utility::string_t& value)
{
    m_Custom_label_1 = value;
    m_Custom_label_1IsSet = true;
}

bool ItemAttributes::customLabel1IsSet() const
{
    return m_Custom_label_1IsSet;
}

void ItemAttributes::unsetCustom_label_1()
{
    m_Custom_label_1IsSet = false;
}
utility::string_t ItemAttributes::getCustomLabel2() const
{
    return m_Custom_label_2;
}

void ItemAttributes::setCustomLabel2(const utility::string_t& value)
{
    m_Custom_label_2 = value;
    m_Custom_label_2IsSet = true;
}

bool ItemAttributes::customLabel2IsSet() const
{
    return m_Custom_label_2IsSet;
}

void ItemAttributes::unsetCustom_label_2()
{
    m_Custom_label_2IsSet = false;
}
utility::string_t ItemAttributes::getCustomLabel3() const
{
    return m_Custom_label_3;
}

void ItemAttributes::setCustomLabel3(const utility::string_t& value)
{
    m_Custom_label_3 = value;
    m_Custom_label_3IsSet = true;
}

bool ItemAttributes::customLabel3IsSet() const
{
    return m_Custom_label_3IsSet;
}

void ItemAttributes::unsetCustom_label_3()
{
    m_Custom_label_3IsSet = false;
}
utility::string_t ItemAttributes::getCustomLabel4() const
{
    return m_Custom_label_4;
}

void ItemAttributes::setCustomLabel4(const utility::string_t& value)
{
    m_Custom_label_4 = value;
    m_Custom_label_4IsSet = true;
}

bool ItemAttributes::customLabel4IsSet() const
{
    return m_Custom_label_4IsSet;
}

void ItemAttributes::unsetCustom_label_4()
{
    m_Custom_label_4IsSet = false;
}
utility::string_t ItemAttributes::getDescription() const
{
    return m_Description;
}

void ItemAttributes::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool ItemAttributes::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ItemAttributes::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool ItemAttributes::isFreeShippingLabel() const
{
    return m_Free_shipping_label;
}

void ItemAttributes::setFreeShippingLabel(bool value)
{
    m_Free_shipping_label = value;
    m_Free_shipping_labelIsSet = true;
}

bool ItemAttributes::freeShippingLabelIsSet() const
{
    return m_Free_shipping_labelIsSet;
}

void ItemAttributes::unsetFree_shipping_label()
{
    m_Free_shipping_labelIsSet = false;
}
utility::string_t ItemAttributes::getFreeShippingLimit() const
{
    return m_Free_shipping_limit;
}

void ItemAttributes::setFreeShippingLimit(const utility::string_t& value)
{
    m_Free_shipping_limit = value;
    m_Free_shipping_limitIsSet = true;
}

bool ItemAttributes::freeShippingLimitIsSet() const
{
    return m_Free_shipping_limitIsSet;
}

void ItemAttributes::unsetFree_shipping_limit()
{
    m_Free_shipping_limitIsSet = false;
}
utility::string_t ItemAttributes::getGender() const
{
    return m_Gender;
}

void ItemAttributes::setGender(const utility::string_t& value)
{
    m_Gender = value;
    m_GenderIsSet = true;
}

bool ItemAttributes::genderIsSet() const
{
    return m_GenderIsSet;
}

void ItemAttributes::unsetGender()
{
    m_GenderIsSet = false;
}
utility::string_t ItemAttributes::getGoogleProductCategory() const
{
    return m_Google_product_category;
}

void ItemAttributes::setGoogleProductCategory(const utility::string_t& value)
{
    m_Google_product_category = value;
    m_Google_product_categoryIsSet = true;
}

bool ItemAttributes::googleProductCategoryIsSet() const
{
    return m_Google_product_categoryIsSet;
}

void ItemAttributes::unsetGoogle_product_category()
{
    m_Google_product_categoryIsSet = false;
}
int32_t ItemAttributes::getGtin() const
{
    return m_Gtin;
}

void ItemAttributes::setGtin(int32_t value)
{
    m_Gtin = value;
    m_GtinIsSet = true;
}

bool ItemAttributes::gtinIsSet() const
{
    return m_GtinIsSet;
}

void ItemAttributes::unsetGtin()
{
    m_GtinIsSet = false;
}
utility::string_t ItemAttributes::getId() const
{
    return m_Id;
}

void ItemAttributes::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ItemAttributes::idIsSet() const
{
    return m_IdIsSet;
}

void ItemAttributes::unsetId()
{
    m_IdIsSet = false;
}
std::vector<utility::string_t>& ItemAttributes::getImageLink()
{
    return m_Image_link;
}

void ItemAttributes::setImageLink(const std::vector<utility::string_t>& value)
{
    m_Image_link = value;
    m_Image_linkIsSet = true;
}

bool ItemAttributes::imageLinkIsSet() const
{
    return m_Image_linkIsSet;
}

void ItemAttributes::unsetImage_link()
{
    m_Image_linkIsSet = false;
}
utility::string_t ItemAttributes::getItemGroupId() const
{
    return m_Item_group_id;
}

void ItemAttributes::setItemGroupId(const utility::string_t& value)
{
    m_Item_group_id = value;
    m_Item_group_idIsSet = true;
}

bool ItemAttributes::itemGroupIdIsSet() const
{
    return m_Item_group_idIsSet;
}

void ItemAttributes::unsetItem_group_id()
{
    m_Item_group_idIsSet = false;
}
int64_t ItemAttributes::getLastUpdatedTime() const
{
    return m_Last_updated_time;
}

void ItemAttributes::setLastUpdatedTime(int64_t value)
{
    m_Last_updated_time = value;
    m_Last_updated_timeIsSet = true;
}

bool ItemAttributes::lastUpdatedTimeIsSet() const
{
    return m_Last_updated_timeIsSet;
}

void ItemAttributes::unsetLast_updated_time()
{
    m_Last_updated_timeIsSet = false;
}
utility::string_t ItemAttributes::getLink() const
{
    return m_Link;
}

void ItemAttributes::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool ItemAttributes::linkIsSet() const
{
    return m_LinkIsSet;
}

void ItemAttributes::unsetLink()
{
    m_LinkIsSet = false;
}
utility::string_t ItemAttributes::getMaterial() const
{
    return m_Material;
}

void ItemAttributes::setMaterial(const utility::string_t& value)
{
    m_Material = value;
    m_MaterialIsSet = true;
}

bool ItemAttributes::materialIsSet() const
{
    return m_MaterialIsSet;
}

void ItemAttributes::unsetMaterial()
{
    m_MaterialIsSet = false;
}
utility::string_t ItemAttributes::getMinAdPrice() const
{
    return m_Min_ad_price;
}

void ItemAttributes::setMinAdPrice(const utility::string_t& value)
{
    m_Min_ad_price = value;
    m_Min_ad_priceIsSet = true;
}

bool ItemAttributes::minAdPriceIsSet() const
{
    return m_Min_ad_priceIsSet;
}

void ItemAttributes::unsetMin_ad_price()
{
    m_Min_ad_priceIsSet = false;
}
utility::string_t ItemAttributes::getMobileLink() const
{
    return m_Mobile_link;
}

void ItemAttributes::setMobileLink(const utility::string_t& value)
{
    m_Mobile_link = value;
    m_Mobile_linkIsSet = true;
}

bool ItemAttributes::mobileLinkIsSet() const
{
    return m_Mobile_linkIsSet;
}

void ItemAttributes::unsetMobile_link()
{
    m_Mobile_linkIsSet = false;
}
utility::string_t ItemAttributes::getMpn() const
{
    return m_Mpn;
}

void ItemAttributes::setMpn(const utility::string_t& value)
{
    m_Mpn = value;
    m_MpnIsSet = true;
}

bool ItemAttributes::mpnIsSet() const
{
    return m_MpnIsSet;
}

void ItemAttributes::unsetMpn()
{
    m_MpnIsSet = false;
}
int32_t ItemAttributes::getNumberOfRatings() const
{
    return m_Number_of_ratings;
}

void ItemAttributes::setNumberOfRatings(int32_t value)
{
    m_Number_of_ratings = value;
    m_Number_of_ratingsIsSet = true;
}

bool ItemAttributes::numberOfRatingsIsSet() const
{
    return m_Number_of_ratingsIsSet;
}

void ItemAttributes::unsetNumber_of_ratings()
{
    m_Number_of_ratingsIsSet = false;
}
int32_t ItemAttributes::getNumberOfReviews() const
{
    return m_Number_of_reviews;
}

void ItemAttributes::setNumberOfReviews(int32_t value)
{
    m_Number_of_reviews = value;
    m_Number_of_reviewsIsSet = true;
}

bool ItemAttributes::numberOfReviewsIsSet() const
{
    return m_Number_of_reviewsIsSet;
}

void ItemAttributes::unsetNumber_of_reviews()
{
    m_Number_of_reviewsIsSet = false;
}
utility::string_t ItemAttributes::getPattern() const
{
    return m_Pattern;
}

void ItemAttributes::setPattern(const utility::string_t& value)
{
    m_Pattern = value;
    m_PatternIsSet = true;
}

bool ItemAttributes::patternIsSet() const
{
    return m_PatternIsSet;
}

void ItemAttributes::unsetPattern()
{
    m_PatternIsSet = false;
}
utility::string_t ItemAttributes::getPrice() const
{
    return m_Price;
}

void ItemAttributes::setPrice(const utility::string_t& value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool ItemAttributes::priceIsSet() const
{
    return m_PriceIsSet;
}

void ItemAttributes::unsetPrice()
{
    m_PriceIsSet = false;
}
utility::string_t ItemAttributes::getProductType() const
{
    return m_Product_type;
}

void ItemAttributes::setProductType(const utility::string_t& value)
{
    m_Product_type = value;
    m_Product_typeIsSet = true;
}

bool ItemAttributes::productTypeIsSet() const
{
    return m_Product_typeIsSet;
}

void ItemAttributes::unsetProduct_type()
{
    m_Product_typeIsSet = false;
}
utility::string_t ItemAttributes::getSalePrice() const
{
    return m_Sale_price;
}

void ItemAttributes::setSalePrice(const utility::string_t& value)
{
    m_Sale_price = value;
    m_Sale_priceIsSet = true;
}

bool ItemAttributes::salePriceIsSet() const
{
    return m_Sale_priceIsSet;
}

void ItemAttributes::unsetSale_price()
{
    m_Sale_priceIsSet = false;
}
utility::string_t ItemAttributes::getShipping() const
{
    return m_Shipping;
}

void ItemAttributes::setShipping(const utility::string_t& value)
{
    m_Shipping = value;
    m_ShippingIsSet = true;
}

bool ItemAttributes::shippingIsSet() const
{
    return m_ShippingIsSet;
}

void ItemAttributes::unsetShipping()
{
    m_ShippingIsSet = false;
}
utility::string_t ItemAttributes::getShippingHeight() const
{
    return m_Shipping_height;
}

void ItemAttributes::setShippingHeight(const utility::string_t& value)
{
    m_Shipping_height = value;
    m_Shipping_heightIsSet = true;
}

bool ItemAttributes::shippingHeightIsSet() const
{
    return m_Shipping_heightIsSet;
}

void ItemAttributes::unsetShipping_height()
{
    m_Shipping_heightIsSet = false;
}
utility::string_t ItemAttributes::getShippingWeight() const
{
    return m_Shipping_weight;
}

void ItemAttributes::setShippingWeight(const utility::string_t& value)
{
    m_Shipping_weight = value;
    m_Shipping_weightIsSet = true;
}

bool ItemAttributes::shippingWeightIsSet() const
{
    return m_Shipping_weightIsSet;
}

void ItemAttributes::unsetShipping_weight()
{
    m_Shipping_weightIsSet = false;
}
utility::string_t ItemAttributes::getShippingWidth() const
{
    return m_Shipping_width;
}

void ItemAttributes::setShippingWidth(const utility::string_t& value)
{
    m_Shipping_width = value;
    m_Shipping_widthIsSet = true;
}

bool ItemAttributes::shippingWidthIsSet() const
{
    return m_Shipping_widthIsSet;
}

void ItemAttributes::unsetShipping_width()
{
    m_Shipping_widthIsSet = false;
}
utility::string_t ItemAttributes::getSize() const
{
    return m_Size;
}

void ItemAttributes::setSize(const utility::string_t& value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool ItemAttributes::sizeIsSet() const
{
    return m_SizeIsSet;
}

void ItemAttributes::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t ItemAttributes::getSizeSystem() const
{
    return m_Size_system;
}

void ItemAttributes::setSizeSystem(const utility::string_t& value)
{
    m_Size_system = value;
    m_Size_systemIsSet = true;
}

bool ItemAttributes::sizeSystemIsSet() const
{
    return m_Size_systemIsSet;
}

void ItemAttributes::unsetSize_system()
{
    m_Size_systemIsSet = false;
}
utility::string_t ItemAttributes::getSizeType() const
{
    return m_Size_type;
}

void ItemAttributes::setSizeType(const utility::string_t& value)
{
    m_Size_type = value;
    m_Size_typeIsSet = true;
}

bool ItemAttributes::sizeTypeIsSet() const
{
    return m_Size_typeIsSet;
}

void ItemAttributes::unsetSize_type()
{
    m_Size_typeIsSet = false;
}
utility::string_t ItemAttributes::getTax() const
{
    return m_Tax;
}

void ItemAttributes::setTax(const utility::string_t& value)
{
    m_Tax = value;
    m_TaxIsSet = true;
}

bool ItemAttributes::taxIsSet() const
{
    return m_TaxIsSet;
}

void ItemAttributes::unsetTax()
{
    m_TaxIsSet = false;
}
utility::string_t ItemAttributes::getTitle() const
{
    return m_Title;
}

void ItemAttributes::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool ItemAttributes::titleIsSet() const
{
    return m_TitleIsSet;
}

void ItemAttributes::unsetTitle()
{
    m_TitleIsSet = false;
}
}
}
}
}


