/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TermsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_TermsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_TermsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/RelatedTerms.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  TermsApi 
{
public:

    explicit TermsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~TermsApi();

    /// <summary>
    /// List related terms
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term &#39;workout&#39; would list related terms like &#39;one song workout&#39;, &#39;yoga workout&#39;, &#39;workout motivation&#39;, etc.
    /// </remarks>
    /// <param name="terms">List of input terms.</param>
    pplx::task<std::shared_ptr<RelatedTerms>> termsRelated_list(
        std::vector<utility::string_t> terms
    ) const;
    /// <summary>
    /// List suggested terms
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Get popular search terms that begin with your input term. &lt;p/&gt; Example: &#39;sport&#39; would return popular terms like &#39;sports bar&#39; and &#39;sportswear&#39;, but not &#39;motor sports&#39; since the phrase does not begin with the given term.
    /// </remarks>
    /// <param name="term">Input term.</param>
    /// <param name="limit">Max suggested terms to return. (optional, default to 0)</param>
    pplx::task<std::vector<utility::string_t>> termsSuggested_list(
        utility::string_t term,
        boost::optional<int32_t> limit
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_TermsApi_H_ */

