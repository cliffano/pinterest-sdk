/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CatalogsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CatalogsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CatalogsFeed.h"
#include "CppRestOpenAPIClient/model/CatalogsFeedsCreateRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsFeedsUpdateRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsItemValidationIssue.h"
#include "CppRestOpenAPIClient/model/CatalogsItems.h"
#include "CppRestOpenAPIClient/model/CatalogsItemsBatch.h"
#include "CppRestOpenAPIClient/model/CatalogsItemsBatchRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsListProductsByFilterRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsProductGroup.h"
#include "CppRestOpenAPIClient/model/CatalogsProductGroupCreateRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsProductGroupProductCounts.h"
#include "CppRestOpenAPIClient/model/CatalogsProductGroupUpdateRequest.h"
#include "CppRestOpenAPIClient/model/Catalogs_product_groups_list_200_response.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/Feed_processing_results_list_200_response.h"
#include "CppRestOpenAPIClient/model/Feeds_list_200_response.h"
#include "CppRestOpenAPIClient/model/Items_issues_list_200_response.h"
#include "CppRestOpenAPIClient/model/Products_by_product_group_filter_list_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CatalogsApi 
{
public:

    explicit CatalogsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CatalogsApi();

    /// <summary>
    /// List products for a given product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product pins for a given Catalogs Product Group Id.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Products_by_product_group_filter_list_200_response>> catalogsProductGroupPins_list(
        utility::string_t productGroupId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Create product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
    /// </remarks>
    /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
    pplx::task<std::shared_ptr<CatalogsProductGroup>> catalogsProductGroups_create(
        std::shared_ptr<CatalogsProductGroupCreateRequest> catalogsProductGroupCreateRequest
    ) const;
    /// <summary>
    /// Delete product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    pplx::task<void> catalogsProductGroups_delete(
        utility::string_t productGroupId
    ) const;
    /// <summary>
    /// Get a product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a singe product group for a given Catalogs Product Group Id.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    pplx::task<std::shared_ptr<CatalogsProductGroup>> catalogsProductGroups_get(
        utility::string_t productGroupId
    ) const;
    /// <summary>
    /// Get product groups list
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Catalogs_product_groups_list_200_response>> catalogsProductGroups_list(
        utility::string_t feedId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Get product counts for a given product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; Get a product counts for a given Catalogs Product Group.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    pplx::task<std::shared_ptr<CatalogsProductGroupProductCounts>> catalogsProductGroups_productCountsGet(
        utility::string_t productGroupId
    ) const;
    /// <summary>
    /// Update product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
    pplx::task<std::shared_ptr<CatalogsProductGroup>> catalogsProductGroups_update(
        utility::string_t productGroupId,
        std::shared_ptr<CatalogsProductGroupUpdateRequest> catalogsProductGroupUpdateRequest
    ) const;
    /// <summary>
    /// List processing results for a given feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account. Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Feed_processing_results_list_200_response>> feedProcessingResults_list(
        utility::string_t feedId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Create feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
    pplx::task<std::shared_ptr<CatalogsFeed>> feeds_create(
        std::shared_ptr<CatalogsFeedsCreateRequest> catalogsFeedsCreateRequest
    ) const;
    /// <summary>
    /// Delete feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    pplx::task<void> feeds_delete(
        utility::string_t feedId
    ) const;
    /// <summary>
    /// Get feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    pplx::task<std::shared_ptr<CatalogsFeed>> feeds_get(
        utility::string_t feedId
    ) const;
    /// <summary>
    /// List feeds
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Feeds_list_200_response>> feeds_list(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Update feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
    pplx::task<std::shared_ptr<CatalogsFeed>> feeds_update(
        utility::string_t feedId,
        std::shared_ptr<CatalogsFeedsUpdateRequest> catalogsFeedsUpdateRequest
    ) const;
    /// <summary>
    /// Get catalogs items batch
    /// </summary>
    /// <remarks>
    /// Get a single catalogs items batch created by the \&quot;operating user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/features/catalog-management/#Using%20batch%20updates%20for%20catalog%20management\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt;
    /// </remarks>
    /// <param name="batchId">Id of a catalogs items batch to fetch</param>
    pplx::task<std::shared_ptr<CatalogsItemsBatch>> itemsBatch_get(
        utility::string_t batchId
    ) const;
    /// <summary>
    /// Perform an operation on an item batch
    /// </summary>
    /// <remarks>
    /// This endpoint supports multiple operations on a set of one or more catalog items. &lt;a href&#x3D;\&quot;/docs/features/catalog-management/#Using%20batch%20updates%20for%20catalog%20management\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt;
    /// </remarks>
    /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
    pplx::task<std::shared_ptr<CatalogsItemsBatch>> itemsBatch_post(
        std::shared_ptr<CatalogsItemsBatchRequest> catalogsItemsBatchRequest
    ) const;
    /// <summary>
    /// List item issues for a given processing result
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  List item validation issues for a given feed processing result. Please note that for now query parameters &#39;item_numbers&#39; and &#39;item_validation_issue&#39; cannot be used simultaneously until it is implemented in some release in the future.
    /// </remarks>
    /// <param name="processingResultId">Unique identifier of a feed processing result</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="itemNumbers">Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation. (optional, default to std::vector&lt;int32_t&gt;())</param>
    /// <param name="itemValidationIssue">Filter item validation issues that have a given type of item validation issue. (optional, default to new CatalogsItemValidationIssue())</param>
    pplx::task<std::shared_ptr<Items_issues_list_200_response>> itemsIssues_list(
        utility::string_t processingResultId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize,
        boost::optional<std::vector<int32_t>> itemNumbers,
        boost::optional<std::shared_ptr<CatalogsItemValidationIssue>> itemValidationIssue
    ) const;
    /// <summary>
    /// Get catalogs items
    /// </summary>
    /// <remarks>
    /// Get the items of the catalog created by the \&quot;operating user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/features/catalog-management/#Using%20batch%20updates%20for%20catalog%20management\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt;
    /// </remarks>
    /// <param name="country">Country for the Catalogs Items</param>
    /// <param name="itemIds">Catalogs Item ids</param>
    /// <param name="language">Language for the Catalogs Items</param>
    pplx::task<std::shared_ptr<CatalogsItems>> items_get(
        utility::string_t country,
        std::vector<utility::string_t> itemIds,
        utility::string_t language
    ) const;
    /// <summary>
    /// List products that meet the criteria of the filter you provide.
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; List products Pins that meet the criteria specified in the Catalogs Product Group Filter given in the request. Note: This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent.
    /// </remarks>
    /// <param name="catalogsListProductsByFilterRequest">Object holding a group of filters for a catalog product group</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Products_by_product_group_filter_list_200_response>> productsByProductGroupFilter_list(
        std::shared_ptr<CatalogsListProductsByFilterRequest> catalogsListProductsByFilterRequest,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CatalogsApi_H_ */

