/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CampaignsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CampaignsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CampaignCreateRequest.h"
#include "CppRestOpenAPIClient/model/CampaignCreateResponse.h"
#include "CppRestOpenAPIClient/model/CampaignResponse.h"
#include "CppRestOpenAPIClient/model/CampaignUpdateRequest.h"
#include "CppRestOpenAPIClient/model/CampaignUpdateResponse.h"
#include "CppRestOpenAPIClient/model/Campaigns_list_200_response.h"
#include "CppRestOpenAPIClient/model/Error.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CampaignsApi 
{
public:

    explicit CampaignsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CampaignsApi();

    /// <summary>
    /// Create campaigns
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-up-your-campaign/\&quot;&gt;Set up your campaign&lt;/a&gt;. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; Microcurrency is used to track very small transactions, based on the currency field set in the advertiser&#39;s profile. A microcurrency unit is one one-millionth of the standard unit of currency selected in the advertiser&#39;s profile (e.g. a microdollar is $0.000001.)
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="campaignCreateRequest">Array of campaigns.</param>
    pplx::task<std::shared_ptr<CampaignCreateResponse>> campaigns_create(
        utility::string_t adAccountId,
        std::vector<std::shared_ptr<CampaignCreateRequest>> campaignCreateRequest
    ) const;
    /// <summary>
    /// Get campaign
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Get a specific campaign given the campaign ID.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="campaignId">Campaign ID, must be associated with the ad account ID provided in the path.</param>
    pplx::task<std::shared_ptr<CampaignResponse>> campaigns_get(
        utility::string_t adAccountId,
        utility::string_t campaignId
    ) const;
    /// <summary>
    /// List campaigns
    /// </summary>
    /// <remarks>
    /// Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="campaignIds">List of Campaign Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="entityStatuses">Entity status (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Campaigns_list_200_response>> campaigns_list(
        utility::string_t adAccountId,
        boost::optional<std::vector<utility::string_t>> campaignIds,
        boost::optional<std::vector<utility::string_t>> entityStatuses,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> bookmark
    ) const;
    /// <summary>
    /// Update campaigns
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Update multiple ad campaigns based on campaign_ids. &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; - The values for &#39;lifetime_spend_cap&#39; and &#39;daily_spend_cap&#39; are microcurrency amounts based on the currency field set in the advertiser&#39;s profile. (e.g. USD) &lt;p/&gt; Microcurrency is used to track very small transactions, based on the currency field set in the advertiser&#39;s profile. A microcurrency unit is one one-millionth of the standard unit of currency selected in the advertiser&#39;s profile (e.g. a microdollar is $0.000001.)
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="campaignUpdateRequest">Array of campaigns.</param>
    pplx::task<std::shared_ptr<CampaignUpdateResponse>> campaigns_update(
        utility::string_t adAccountId,
        std::vector<std::shared_ptr<CampaignUpdateRequest>> campaignUpdateRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CampaignsApi_H_ */

