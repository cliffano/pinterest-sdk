/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeadFormsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_LeadFormsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_LeadFormsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Error.h"
#include "CppRestOpenAPIClient/model/LeadFormResponse.h"
#include "CppRestOpenAPIClient/model/LeadFormTestRequest.h"
#include "CppRestOpenAPIClient/model/LeadFormTestResponse.h"
#include "CppRestOpenAPIClient/model/Lead_forms_list_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  LeadFormsApi 
{
public:

    explicit LeadFormsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~LeadFormsApi();

    /// <summary>
    /// Create lead form test data
    /// </summary>
    /// <remarks>
    /// Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/new/about-beta-access/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="leadFormId">Unique identifier of a lead form.</param>
    /// <param name="leadFormTestRequest">Subscription to create.</param>
    pplx::task<std::shared_ptr<LeadFormTestResponse>> leadFormTest_create(
        utility::string_t adAccountId,
        utility::string_t leadFormId,
        std::shared_ptr<LeadFormTestRequest> leadFormTestRequest
    ) const;
    /// <summary>
    /// Get lead form by id
    /// </summary>
    /// <remarks>
    /// Gets a lead form given it&#39;s ID. It must also be associated with the provided ad account ID. Retrieving an advertiser&#39;s lead form will only contain results if you&#39;re a part of the Lead ads beta. If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="leadFormId">Unique identifier of a lead form.</param>
    pplx::task<std::shared_ptr<LeadFormResponse>> leadForm_get(
        utility::string_t adAccountId,
        utility::string_t leadFormId
    ) const;
    /// <summary>
    /// Get lead forms
    /// </summary>
    /// <remarks>
    /// Gets all Lead Forms associated with an ad account ID. Retrieving an advertiser&#39;s list of lead forms will only contain results if you&#39;re a part of the Lead ads beta.  If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Lead_forms_list_200_response>> leadForms_list(
        utility::string_t adAccountId,
        boost::optional<int32_t> pageSize,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> bookmark
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_LeadFormsApi_H_ */

