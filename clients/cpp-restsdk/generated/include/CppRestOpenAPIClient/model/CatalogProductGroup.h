/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogProductGroup.h
 *
 * non-promoted catalog product group entity
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogProductGroup_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogProductGroup_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/EntityStatus.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Board.h"
#include "CppRestOpenAPIClient/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Board;

/// <summary>
/// non-promoted catalog product group entity
/// </summary>
class  CatalogProductGroup
    : public ModelBase
{
public:
    CatalogProductGroup();
    virtual ~CatalogProductGroup();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogProductGroup members

    /// <summary>
    /// ID of the catalog product group.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Merchant ID pertaining to the owner of the catalog product group.
    /// </summary>
    utility::string_t getMerchantId() const;
    bool merchantIdIsSet() const;
    void unsetMerchant_id();

    void setMerchantId(const utility::string_t& value);

    /// <summary>
    /// Name of catalog product group
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Object holding a list of filters
    /// </summary>
    std::shared_ptr<Object> getFilters() const;
    bool filtersIsSet() const;
    void unsetFilters();

    void setFilters(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Object holding a list of filters
    /// </summary>
    std::shared_ptr<Object> getFilterV2() const;
    bool filterV2IsSet() const;
    void unsetFilter_v2();

    void setFilterV2(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Board> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<Board>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityStatus> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<EntityStatus>& value);

    /// <summary>
    /// id of the feed profile belonging to this catalog product group
    /// </summary>
    utility::string_t getFeedProfileId() const;
    bool feedProfileIdIsSet() const;
    void unsetFeed_profile_id();

    void setFeedProfileId(const utility::string_t& value);

    /// <summary>
    /// Unix timestamp in seconds of when catalog product group was created.
    /// </summary>
    int32_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(int32_t value);

    /// <summary>
    /// Unix timestamp in seconds of last time catalog product group was updated.
    /// </summary>
    int32_t getLastUpdate() const;
    bool lastUpdateIsSet() const;
    void unsetLast_update();

    void setLastUpdate(int32_t value);

    /// <summary>
    /// Amount of products in the catalog product group
    /// </summary>
    int32_t getProductCount() const;
    bool productCountIsSet() const;
    void unsetProduct_count();

    void setProductCount(int32_t value);

    /// <summary>
    /// index of the featured position of the catalog product group
    /// </summary>
    int32_t getFeaturedPosition() const;
    bool featuredPositionIsSet() const;
    void unsetFeatured_position();

    void setFeaturedPosition(int32_t value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Merchant_id;
    bool m_Merchant_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<Object> m_Filters;
    bool m_FiltersIsSet;
    std::shared_ptr<Object> m_Filter_v2;
    bool m_Filter_v2IsSet;
    std::shared_ptr<Board> m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<EntityStatus> m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Feed_profile_id;
    bool m_Feed_profile_idIsSet;
    int32_t m_Created_at;
    bool m_Created_atIsSet;
    int32_t m_Last_update;
    bool m_Last_updateIsSet;
    int32_t m_Product_count;
    bool m_Product_countIsSet;
    int32_t m_Featured_position;
    bool m_Featured_positionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CatalogProductGroup_H_ */
