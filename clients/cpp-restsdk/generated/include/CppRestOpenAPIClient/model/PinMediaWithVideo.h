/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaWithVideo.h
 *
 * Pin with video.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaWithVideo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaWithVideo_H_


#include "CppRestOpenAPIClient/model/ImageDetails.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PinMedia.h"
#include <map>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ImageDetails;

/// <summary>
/// Pin with video.
/// </summary>
class  PinMediaWithVideo
    : public PinMedia
{
public:
    PinMediaWithVideo();
    virtual ~PinMediaWithVideo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PinMediaWithVideo members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<ImageDetails>>& getImages();
    bool imagesIsSet() const;
    void unsetImages();

    void setImages(const std::map<utility::string_t, std::shared_ptr<ImageDetails>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCoverImageUrl() const;
    bool coverImageUrlIsSet() const;
    void unsetCover_image_url();

    void setCoverImageUrl(const utility::string_t& value);

    /// <summary>
    /// Duration (in milliseconds)
    /// </summary>
    double getDuration() const;
    bool durationIsSet() const;
    void unsetDuration();

    void setDuration(double value);

    /// <summary>
    /// Height (in pixels)
    /// </summary>
    int32_t getHeight() const;
    bool heightIsSet() const;
    void unsetHeight();

    void setHeight(int32_t value);

    /// <summary>
    /// Width (in pixels)
    /// </summary>
    int32_t getWidth() const;
    bool widthIsSet() const;
    void unsetWidth();

    void setWidth(int32_t value);


protected:
    std::map<utility::string_t, std::shared_ptr<ImageDetails>> m_Images;
    bool m_ImagesIsSet;
    utility::string_t m_Cover_image_url;
    bool m_Cover_image_urlIsSet;
    double m_Duration;
    bool m_DurationIsSet;
    int32_t m_Height;
    bool m_HeightIsSet;
    int32_t m_Width;
    bool m_WidthIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaWithVideo_H_ */
