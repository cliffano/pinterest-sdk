/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner_custom_data_contents_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_contents_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_contents_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner_custom_data_contents_inner
    : public ModelBase
{
public:
    ConversionEvents_data_inner_custom_data_contents_inner();
    virtual ~ConversionEvents_data_inner_custom_data_contents_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConversionEvents_data_inner_custom_data_contents_inner members

    /// <summary>
    /// The price of a product. Accepted as a string in the request; it will be parsed into a double. For example, if there are two products in a checkout event, the value should be the total price
    /// </summary>
    utility::string_t getItemPrice() const;
    bool itemPriceIsSet() const;
    void unsetItem_price();

    void setItemPrice(const utility::string_t& value);

    /// <summary>
    /// The amount of a product.
    /// </summary>
    int64_t getQuantity() const;
    bool quantityIsSet() const;
    void unsetQuantity();

    void setQuantity(int64_t value);


protected:
    utility::string_t m_Item_price;
    bool m_Item_priceIsSet;
    int64_t m_Quantity;
    bool m_QuantityIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_custom_data_contents_inner_H_ */
