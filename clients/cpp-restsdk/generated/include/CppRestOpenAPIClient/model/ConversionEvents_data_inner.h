/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConversionEvents_data_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ConversionEventsUserData.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ConversionEvents_data_inner_custom_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ConversionEventsUserData;
class ConversionEvents_data_inner_custom_data;

/// <summary>
/// 
/// </summary>
class  ConversionEvents_data_inner
    : public ModelBase
{
public:
    ConversionEvents_data_inner();
    virtual ~ConversionEvents_data_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConversionEvents_data_inner members

    /// <summary>
    /// The type of the user event.
    /// </summary>
    utility::string_t getEventName() const;
    bool eventNameIsSet() const;
    void unsetEvent_name();

    void setEventName(const utility::string_t& value);

    /// <summary>
    /// The source indicating where the conversion event occurred.
    /// </summary>
    utility::string_t getActionSource() const;
    bool actionSourceIsSet() const;
    void unsetAction_source();

    void setActionSource(const utility::string_t& value);

    /// <summary>
    /// The time when the event happened. Unix timestamp in seconds.
    /// </summary>
    int64_t getEventTime() const;
    bool eventTimeIsSet() const;
    void unsetEvent_time();

    void setEventTime(int64_t value);

    /// <summary>
    /// A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking.
    /// </summary>
    utility::string_t getEventId() const;
    bool eventIdIsSet() const;
    void unsetEvent_id();

    void setEventId(const utility::string_t& value);

    /// <summary>
    /// URL of the web conversion event.
    /// </summary>
    utility::string_t getEventSourceUrl() const;
    bool eventSourceUrlIsSet() const;
    void unsetEvent_source_url();

    void setEventSourceUrl(const utility::string_t& value);

    /// <summary>
    /// When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
    /// </summary>
    bool isOptOut() const;
    bool optOutIsSet() const;
    void unsetOpt_out();

    void setOptOut(bool value);

    /// <summary>
    /// The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. Only send this field if Pinterest has worked directly with you to define a value for partner_name.
    /// </summary>
    utility::string_t getPartnerName() const;
    bool partnerNameIsSet() const;
    void unsetPartner_name();

    void setPartnerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConversionEventsUserData> getUserData() const;
    bool userDataIsSet() const;
    void unsetUser_data();

    void setUserData(const std::shared_ptr<ConversionEventsUserData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConversionEvents_data_inner_custom_data> getCustomData() const;
    bool customDataIsSet() const;
    void unsetCustom_data();

    void setCustomData(const std::shared_ptr<ConversionEvents_data_inner_custom_data>& value);

    /// <summary>
    /// The app store app ID.
    /// </summary>
    utility::string_t getAppId() const;
    bool appIdIsSet() const;
    void unsetApp_id();

    void setAppId(const utility::string_t& value);

    /// <summary>
    /// Name of the app.
    /// </summary>
    utility::string_t getAppName() const;
    bool appNameIsSet() const;
    void unsetApp_name();

    void setAppName(const utility::string_t& value);

    /// <summary>
    /// Version of the app.
    /// </summary>
    utility::string_t getAppVersion() const;
    bool appVersionIsSet() const;
    void unsetApp_version();

    void setAppVersion(const utility::string_t& value);

    /// <summary>
    /// Brand of the user device.
    /// </summary>
    utility::string_t getDeviceBrand() const;
    bool deviceBrandIsSet() const;
    void unsetDevice_brand();

    void setDeviceBrand(const utility::string_t& value);

    /// <summary>
    /// User device&#39;s mobile carrier.
    /// </summary>
    utility::string_t getDeviceCarrier() const;
    bool deviceCarrierIsSet() const;
    void unsetDevice_carrier();

    void setDeviceCarrier(const utility::string_t& value);

    /// <summary>
    /// Model of the user device.
    /// </summary>
    utility::string_t getDeviceModel() const;
    bool deviceModelIsSet() const;
    void unsetDevice_model();

    void setDeviceModel(const utility::string_t& value);

    /// <summary>
    /// Type of the user device.
    /// </summary>
    utility::string_t getDeviceType() const;
    bool deviceTypeIsSet() const;
    void unsetDevice_type();

    void setDeviceType(const utility::string_t& value);

    /// <summary>
    /// Version of the device operating system.
    /// </summary>
    utility::string_t getOsVersion() const;
    bool osVersionIsSet() const;
    void unsetOs_version();

    void setOsVersion(const utility::string_t& value);

    /// <summary>
    /// Whether the event occurred when the user device was connected to wifi.
    /// </summary>
    bool isWifi() const;
    bool wifiIsSet() const;
    void unsetWifi();

    void setWifi(bool value);

    /// <summary>
    /// Two-character ISO-639-1 language code indicating the user&#39;s language.
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const utility::string_t& value);


protected:
    utility::string_t m_Event_name;
    bool m_Event_nameIsSet;
    utility::string_t m_Action_source;
    bool m_Action_sourceIsSet;
    int64_t m_Event_time;
    bool m_Event_timeIsSet;
    utility::string_t m_Event_id;
    bool m_Event_idIsSet;
    utility::string_t m_Event_source_url;
    bool m_Event_source_urlIsSet;
    bool m_Opt_out;
    bool m_Opt_outIsSet;
    utility::string_t m_Partner_name;
    bool m_Partner_nameIsSet;
    std::shared_ptr<ConversionEventsUserData> m_User_data;
    bool m_User_dataIsSet;
    std::shared_ptr<ConversionEvents_data_inner_custom_data> m_Custom_data;
    bool m_Custom_dataIsSet;
    utility::string_t m_App_id;
    bool m_App_idIsSet;
    utility::string_t m_App_name;
    bool m_App_nameIsSet;
    utility::string_t m_App_version;
    bool m_App_versionIsSet;
    utility::string_t m_Device_brand;
    bool m_Device_brandIsSet;
    utility::string_t m_Device_carrier;
    bool m_Device_carrierIsSet;
    utility::string_t m_Device_model;
    bool m_Device_modelIsSet;
    utility::string_t m_Device_type;
    bool m_Device_typeIsSet;
    utility::string_t m_Os_version;
    bool m_Os_versionIsSet;
    bool m_Wifi;
    bool m_WifiIsSet;
    utility::string_t m_Language;
    bool m_LanguageIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConversionEvents_data_inner_H_ */
