/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaSource.h
 *
 * Pin media source.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaSource_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaSource_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/PinMediaSourceImageURL.h"
#include "CppRestOpenAPIClient/model/PinMediaSourceImagesURL_items_inner.h"
#include "CppRestOpenAPIClient/model/PinMediaSourceImagesURL.h"
#include "CppRestOpenAPIClient/model/PinMediaSourceImageBase64.h"
#include "CppRestOpenAPIClient/model/PinMediaSourceVideoID.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PinMediaSourcePinURL.h"
#include <vector>
#include "CppRestOpenAPIClient/model/PinMediaSourceImagesBase64.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PinMediaSourceImagesURL_items_inner;

/// <summary>
/// Pin media source.
/// </summary>
class  PinMediaSource
    : public ModelBase
{
public:
    PinMediaSource();
    virtual ~PinMediaSource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PinMediaSource members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceType() const;
    bool sourceTypeIsSet() const;
    void unsetSource_type();

    void setSourceType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContentType() const;
    bool contentTypeIsSet() const;
    void unsetContent_type();

    void setContentType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);

    /// <summary>
    /// Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
    /// </summary>
    bool isIsStandard() const;
    bool isStandardIsSet() const;
    void unsetIs_standard();

    void setIsStandard(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// Cover image url.
    /// </summary>
    utility::string_t getCoverImageUrl() const;
    bool coverImageUrlIsSet() const;
    void unsetCover_image_url();

    void setCoverImageUrl(const utility::string_t& value);

    /// <summary>
    /// Content type for cover image Base64.
    /// </summary>
    utility::string_t getCoverImageContentType() const;
    bool coverImageContentTypeIsSet() const;
    void unsetCover_image_content_type();

    void setCoverImageContentType(const utility::string_t& value);

    /// <summary>
    /// Cover image Base64.
    /// </summary>
    utility::string_t getCoverImageData() const;
    bool coverImageDataIsSet() const;
    void unsetCover_image_data();

    void setCoverImageData(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMediaId() const;
    bool mediaIdIsSet() const;
    void unsetMedia_id();

    void setMediaId(const utility::string_t& value);

    /// <summary>
    /// Array with image objects.
    /// </summary>
    std::vector<std::shared_ptr<PinMediaSourceImagesURL_items_inner>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<PinMediaSourceImagesURL_items_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getIndex() const;
    bool indexIsSet() const;
    void unsetIndex();

    void setIndex(int32_t value);

    /// <summary>
    /// This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
    /// </summary>
    bool isIsAffiliateLink() const;
    bool isAffiliateLinkIsSet() const;
    void unsetIs_affiliate_link();

    void setIsAffiliateLink(bool value);


protected:
    utility::string_t m_Source_type;
    bool m_Source_typeIsSet;
    utility::string_t m_Content_type;
    bool m_Content_typeIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
    bool m_Is_standard;
    bool m_Is_standardIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Cover_image_url;
    bool m_Cover_image_urlIsSet;
    utility::string_t m_Cover_image_content_type;
    bool m_Cover_image_content_typeIsSet;
    utility::string_t m_Cover_image_data;
    bool m_Cover_image_dataIsSet;
    utility::string_t m_Media_id;
    bool m_Media_idIsSet;
    std::vector<std::shared_ptr<PinMediaSourceImagesURL_items_inner>> m_Items;
    bool m_ItemsIsSet;
    int32_t m_Index;
    bool m_IndexIsSet;
    bool m_Is_affiliate_link;
    bool m_Is_affiliate_linkIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PinMediaSource_H_ */
