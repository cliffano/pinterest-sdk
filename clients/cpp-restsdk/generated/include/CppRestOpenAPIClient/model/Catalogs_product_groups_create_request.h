/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Catalogs_product_groups_create_request.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Catalogs_product_groups_create_request_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Catalogs_product_groups_create_request_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CatalogsVerticalProductGroupCreateRequest.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CatalogsProductGroupCreateRequest.h"
#include "CppRestOpenAPIClient/model/CatalogsHotelProductGroupFilters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CatalogsHotelProductGroupFilters;

/// <summary>
/// 
/// </summary>
class  Catalogs_product_groups_create_request
    : public ModelBase
{
public:
    Catalogs_product_groups_create_request();
    virtual ~Catalogs_product_groups_create_request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Catalogs_product_groups_create_request members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// boolean indicator of whether the product group is being featured or not
    /// </summary>
    bool isIsFeatured() const;
    bool isFeaturedIsSet() const;
    void unsetIs_featured();

    void setIsFeatured(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CatalogsHotelProductGroupFilters> getFilters() const;
    bool filtersIsSet() const;
    void unsetFilters();

    void setFilters(const std::shared_ptr<CatalogsHotelProductGroupFilters>& value);

    /// <summary>
    /// Catalog Feed id pertaining to the catalog product group.
    /// </summary>
    utility::string_t getFeedId() const;
    bool feedIdIsSet() const;
    void unsetFeed_id();

    void setFeedId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCatalogType() const;
    bool catalogTypeIsSet() const;
    void unsetCatalog_type();

    void setCatalogType(const utility::string_t& value);

    /// <summary>
    /// Catalog id pertaining to the hotel product group.
    /// </summary>
    utility::string_t getCatalogId() const;
    bool catalogIdIsSet() const;
    void unsetCatalog_id();

    void setCatalogId(const utility::string_t& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    bool m_Is_featured;
    bool m_Is_featuredIsSet;
    std::shared_ptr<CatalogsHotelProductGroupFilters> m_Filters;
    bool m_FiltersIsSet;
    utility::string_t m_Feed_id;
    bool m_Feed_idIsSet;
    utility::string_t m_Catalog_type;
    bool m_Catalog_typeIsSet;
    utility::string_t m_Catalog_id;
    bool m_Catalog_idIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Catalogs_product_groups_create_request_H_ */
