/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProductGroupPromotionCommon.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ProductGroupPromotionCommon::ProductGroupPromotionCommon()
{
    m_StatusIsSet = false;
    m_Tracking_url = utility::conversions::to_string_t("");
    m_Tracking_urlIsSet = false;
    m_Catalogs_product_group_id = utility::conversions::to_string_t("");
    m_Catalogs_product_group_idIsSet = false;
    m_Catalogs_product_group_name = utility::conversions::to_string_t("");
    m_Catalogs_product_group_nameIsSet = false;
    m_Creative_typeIsSet = false;
    m_Collections_hero_pin_id = utility::conversions::to_string_t("");
    m_Collections_hero_pin_idIsSet = false;
    m_Collections_hero_destination_url = utility::conversions::to_string_t("");
    m_Collections_hero_destination_urlIsSet = false;
    m_Slideshow_collections_title = utility::conversions::to_string_t("");
    m_Slideshow_collections_titleIsSet = false;
    m_Slideshow_collections_description = utility::conversions::to_string_t("");
    m_Slideshow_collections_descriptionIsSet = false;
    m_Is_mdl = false;
    m_Is_mdlIsSet = false;
}

ProductGroupPromotionCommon::~ProductGroupPromotionCommon()
{
}

void ProductGroupPromotionCommon::validate()
{
    // TODO: implement validation
}

web::json::value ProductGroupPromotionCommon::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Tracking_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("tracking_url"))] = ModelBase::toJson(m_Tracking_url);
    }
    if(m_Catalogs_product_group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("catalogs_product_group_id"))] = ModelBase::toJson(m_Catalogs_product_group_id);
    }
    if(m_Catalogs_product_group_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("catalogs_product_group_name"))] = ModelBase::toJson(m_Catalogs_product_group_name);
    }
    if(m_Creative_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("creative_type"))] = ModelBase::toJson(m_Creative_type);
    }
    if(m_Collections_hero_pin_idIsSet)
    {
        val[utility::conversions::to_string_t(U("collections_hero_pin_id"))] = ModelBase::toJson(m_Collections_hero_pin_id);
    }
    if(m_Collections_hero_destination_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("collections_hero_destination_url"))] = ModelBase::toJson(m_Collections_hero_destination_url);
    }
    if(m_Slideshow_collections_titleIsSet)
    {
        val[utility::conversions::to_string_t(U("slideshow_collections_title"))] = ModelBase::toJson(m_Slideshow_collections_title);
    }
    if(m_Slideshow_collections_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("slideshow_collections_description"))] = ModelBase::toJson(m_Slideshow_collections_description);
    }
    if(m_Is_mdlIsSet)
    {
        val[utility::conversions::to_string_t(U("is_mdl"))] = ModelBase::toJson(m_Is_mdl);
    }

    return val;
}

bool ProductGroupPromotionCommon::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EntityStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracking_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracking_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTrackingUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackingUrl);
            setTrackingUrl(refVal_setTrackingUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalogs_product_group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalogs_product_group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogsProductGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogsProductGroupId);
            setCatalogsProductGroupId(refVal_setCatalogsProductGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalogs_product_group_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalogs_product_group_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogsProductGroupName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogsProductGroupName);
            setCatalogsProductGroupName(refVal_setCatalogsProductGroupName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creative_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creative_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreativeType> refVal_setCreativeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreativeType);
            setCreativeType(refVal_setCreativeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collections_hero_pin_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collections_hero_pin_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectionsHeroPinId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectionsHeroPinId);
            setCollectionsHeroPinId(refVal_setCollectionsHeroPinId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collections_hero_destination_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collections_hero_destination_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectionsHeroDestinationUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectionsHeroDestinationUrl);
            setCollectionsHeroDestinationUrl(refVal_setCollectionsHeroDestinationUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slideshow_collections_title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slideshow_collections_title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSlideshowCollectionsTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlideshowCollectionsTitle);
            setSlideshowCollectionsTitle(refVal_setSlideshowCollectionsTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slideshow_collections_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slideshow_collections_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSlideshowCollectionsDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlideshowCollectionsDescription);
            setSlideshowCollectionsDescription(refVal_setSlideshowCollectionsDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_mdl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_mdl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsMdl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsMdl);
            setIsMdl(refVal_setIsMdl);
        }
    }
    return ok;
}

void ProductGroupPromotionCommon::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Tracking_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracking_url")), m_Tracking_url));
    }
    if(m_Catalogs_product_group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalogs_product_group_id")), m_Catalogs_product_group_id));
    }
    if(m_Catalogs_product_group_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalogs_product_group_name")), m_Catalogs_product_group_name));
    }
    if(m_Creative_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creative_type")), m_Creative_type));
    }
    if(m_Collections_hero_pin_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collections_hero_pin_id")), m_Collections_hero_pin_id));
    }
    if(m_Collections_hero_destination_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collections_hero_destination_url")), m_Collections_hero_destination_url));
    }
    if(m_Slideshow_collections_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slideshow_collections_title")), m_Slideshow_collections_title));
    }
    if(m_Slideshow_collections_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slideshow_collections_description")), m_Slideshow_collections_description));
    }
    if(m_Is_mdlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_mdl")), m_Is_mdl));
    }
}

bool ProductGroupPromotionCommon::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<EntityStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracking_url"))))
    {
        utility::string_t refVal_setTrackingUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracking_url"))), refVal_setTrackingUrl );
        setTrackingUrl(refVal_setTrackingUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalogs_product_group_id"))))
    {
        utility::string_t refVal_setCatalogsProductGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalogs_product_group_id"))), refVal_setCatalogsProductGroupId );
        setCatalogsProductGroupId(refVal_setCatalogsProductGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalogs_product_group_name"))))
    {
        utility::string_t refVal_setCatalogsProductGroupName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalogs_product_group_name"))), refVal_setCatalogsProductGroupName );
        setCatalogsProductGroupName(refVal_setCatalogsProductGroupName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creative_type"))))
    {
        std::shared_ptr<CreativeType> refVal_setCreativeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creative_type"))), refVal_setCreativeType );
        setCreativeType(refVal_setCreativeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collections_hero_pin_id"))))
    {
        utility::string_t refVal_setCollectionsHeroPinId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collections_hero_pin_id"))), refVal_setCollectionsHeroPinId );
        setCollectionsHeroPinId(refVal_setCollectionsHeroPinId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collections_hero_destination_url"))))
    {
        utility::string_t refVal_setCollectionsHeroDestinationUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collections_hero_destination_url"))), refVal_setCollectionsHeroDestinationUrl );
        setCollectionsHeroDestinationUrl(refVal_setCollectionsHeroDestinationUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slideshow_collections_title"))))
    {
        utility::string_t refVal_setSlideshowCollectionsTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slideshow_collections_title"))), refVal_setSlideshowCollectionsTitle );
        setSlideshowCollectionsTitle(refVal_setSlideshowCollectionsTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slideshow_collections_description"))))
    {
        utility::string_t refVal_setSlideshowCollectionsDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slideshow_collections_description"))), refVal_setSlideshowCollectionsDescription );
        setSlideshowCollectionsDescription(refVal_setSlideshowCollectionsDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_mdl"))))
    {
        bool refVal_setIsMdl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_mdl"))), refVal_setIsMdl );
        setIsMdl(refVal_setIsMdl);
    }
    return ok;
}

std::shared_ptr<EntityStatus> ProductGroupPromotionCommon::getStatus() const
{
    return m_Status;
}

void ProductGroupPromotionCommon::setStatus(const std::shared_ptr<EntityStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ProductGroupPromotionCommon::statusIsSet() const
{
    return m_StatusIsSet;
}

void ProductGroupPromotionCommon::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getTrackingUrl() const
{
    return m_Tracking_url;
}

void ProductGroupPromotionCommon::setTrackingUrl(const utility::string_t& value)
{
    m_Tracking_url = value;
    m_Tracking_urlIsSet = true;
}

bool ProductGroupPromotionCommon::trackingUrlIsSet() const
{
    return m_Tracking_urlIsSet;
}

void ProductGroupPromotionCommon::unsetTracking_url()
{
    m_Tracking_urlIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getCatalogsProductGroupId() const
{
    return m_Catalogs_product_group_id;
}

void ProductGroupPromotionCommon::setCatalogsProductGroupId(const utility::string_t& value)
{
    m_Catalogs_product_group_id = value;
    m_Catalogs_product_group_idIsSet = true;
}

bool ProductGroupPromotionCommon::catalogsProductGroupIdIsSet() const
{
    return m_Catalogs_product_group_idIsSet;
}

void ProductGroupPromotionCommon::unsetCatalogs_product_group_id()
{
    m_Catalogs_product_group_idIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getCatalogsProductGroupName() const
{
    return m_Catalogs_product_group_name;
}

void ProductGroupPromotionCommon::setCatalogsProductGroupName(const utility::string_t& value)
{
    m_Catalogs_product_group_name = value;
    m_Catalogs_product_group_nameIsSet = true;
}

bool ProductGroupPromotionCommon::catalogsProductGroupNameIsSet() const
{
    return m_Catalogs_product_group_nameIsSet;
}

void ProductGroupPromotionCommon::unsetCatalogs_product_group_name()
{
    m_Catalogs_product_group_nameIsSet = false;
}
std::shared_ptr<CreativeType> ProductGroupPromotionCommon::getCreativeType() const
{
    return m_Creative_type;
}

void ProductGroupPromotionCommon::setCreativeType(const std::shared_ptr<CreativeType>& value)
{
    m_Creative_type = value;
    m_Creative_typeIsSet = true;
}

bool ProductGroupPromotionCommon::creativeTypeIsSet() const
{
    return m_Creative_typeIsSet;
}

void ProductGroupPromotionCommon::unsetCreative_type()
{
    m_Creative_typeIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getCollectionsHeroPinId() const
{
    return m_Collections_hero_pin_id;
}

void ProductGroupPromotionCommon::setCollectionsHeroPinId(const utility::string_t& value)
{
    m_Collections_hero_pin_id = value;
    m_Collections_hero_pin_idIsSet = true;
}

bool ProductGroupPromotionCommon::collectionsHeroPinIdIsSet() const
{
    return m_Collections_hero_pin_idIsSet;
}

void ProductGroupPromotionCommon::unsetCollections_hero_pin_id()
{
    m_Collections_hero_pin_idIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getCollectionsHeroDestinationUrl() const
{
    return m_Collections_hero_destination_url;
}

void ProductGroupPromotionCommon::setCollectionsHeroDestinationUrl(const utility::string_t& value)
{
    m_Collections_hero_destination_url = value;
    m_Collections_hero_destination_urlIsSet = true;
}

bool ProductGroupPromotionCommon::collectionsHeroDestinationUrlIsSet() const
{
    return m_Collections_hero_destination_urlIsSet;
}

void ProductGroupPromotionCommon::unsetCollections_hero_destination_url()
{
    m_Collections_hero_destination_urlIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getSlideshowCollectionsTitle() const
{
    return m_Slideshow_collections_title;
}

void ProductGroupPromotionCommon::setSlideshowCollectionsTitle(const utility::string_t& value)
{
    m_Slideshow_collections_title = value;
    m_Slideshow_collections_titleIsSet = true;
}

bool ProductGroupPromotionCommon::slideshowCollectionsTitleIsSet() const
{
    return m_Slideshow_collections_titleIsSet;
}

void ProductGroupPromotionCommon::unsetSlideshow_collections_title()
{
    m_Slideshow_collections_titleIsSet = false;
}
utility::string_t ProductGroupPromotionCommon::getSlideshowCollectionsDescription() const
{
    return m_Slideshow_collections_description;
}

void ProductGroupPromotionCommon::setSlideshowCollectionsDescription(const utility::string_t& value)
{
    m_Slideshow_collections_description = value;
    m_Slideshow_collections_descriptionIsSet = true;
}

bool ProductGroupPromotionCommon::slideshowCollectionsDescriptionIsSet() const
{
    return m_Slideshow_collections_descriptionIsSet;
}

void ProductGroupPromotionCommon::unsetSlideshow_collections_description()
{
    m_Slideshow_collections_descriptionIsSet = false;
}
bool ProductGroupPromotionCommon::isIsMdl() const
{
    return m_Is_mdl;
}

void ProductGroupPromotionCommon::setIsMdl(bool value)
{
    m_Is_mdl = value;
    m_Is_mdlIsSet = true;
}

bool ProductGroupPromotionCommon::isMdlIsSet() const
{
    return m_Is_mdlIsSet;
}

void ProductGroupPromotionCommon::unsetIs_mdl()
{
    m_Is_mdlIsSet = false;
}
}
}
}
}


