/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PinMediaMetadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PinMediaMetadata::PinMediaMetadata()
{
    m_Item_type = utility::conversions::to_string_t("");
    m_Item_typeIsSet = false;
    m_ImagesIsSet = false;
    m_Cover_image_url = utility::conversions::to_string_t("");
    m_Cover_image_urlIsSet = false;
    m_Duration = 0.0;
    m_DurationIsSet = false;
    m_Height = 0;
    m_HeightIsSet = false;
    m_Width = 0;
    m_WidthIsSet = false;
}

PinMediaMetadata::~PinMediaMetadata()
{
}

void PinMediaMetadata::validate()
{
    // TODO: implement validation
}

web::json::value PinMediaMetadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Item_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("item_type"))] = ModelBase::toJson(m_Item_type);
    }
    if(m_ImagesIsSet)
    {
        val[utility::conversions::to_string_t(U("images"))] = ModelBase::toJson(m_Images);
    }
    if(m_Cover_image_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("cover_image_url"))] = ModelBase::toJson(m_Cover_image_url);
    }
    if(m_DurationIsSet)
    {
        val[utility::conversions::to_string_t(U("duration"))] = ModelBase::toJson(m_Duration);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t(U("height"))] = ModelBase::toJson(m_Height);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t(U("width"))] = ModelBase::toJson(m_Width);
    }

    return val;
}

bool PinMediaMetadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("item_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemType);
            setItemType(refVal_setItemType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("images"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("images")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<ImageDetails>> refVal_setImages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImages);
            setImages(refVal_setImages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cover_image_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cover_image_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCoverImageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoverImageUrl);
            setCoverImageUrl(refVal_setCoverImageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duration")));
        if(!fieldValue.is_null())
        {
            double refVal_setDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDuration);
            setDuration(refVal_setDuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("height"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("height")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeight);
            setHeight(refVal_setHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("width"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("width")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWidth);
            setWidth(refVal_setWidth);
        }
    }
    return ok;
}

void PinMediaMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Item_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_type")), m_Item_type));
    }
    if(m_ImagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("images")), m_Images));
    }
    if(m_Cover_image_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cover_image_url")), m_Cover_image_url));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duration")), m_Duration));
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("height")), m_Height));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("width")), m_Width));
    }
}

bool PinMediaMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("item_type"))))
    {
        utility::string_t refVal_setItemType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_type"))), refVal_setItemType );
        setItemType(refVal_setItemType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("images"))))
    {
        std::map<utility::string_t, std::shared_ptr<ImageDetails>> refVal_setImages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("images"))), refVal_setImages );
        setImages(refVal_setImages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cover_image_url"))))
    {
        utility::string_t refVal_setCoverImageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cover_image_url"))), refVal_setCoverImageUrl );
        setCoverImageUrl(refVal_setCoverImageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duration"))))
    {
        double refVal_setDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duration"))), refVal_setDuration );
        setDuration(refVal_setDuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("height"))))
    {
        int32_t refVal_setHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("height"))), refVal_setHeight );
        setHeight(refVal_setHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("width"))))
    {
        int32_t refVal_setWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("width"))), refVal_setWidth );
        setWidth(refVal_setWidth);
    }
    return ok;
}

utility::string_t PinMediaMetadata::getItemType() const
{
    return m_Item_type;
}

void PinMediaMetadata::setItemType(const utility::string_t& value)
{
    m_Item_type = value;
    m_Item_typeIsSet = true;
}

bool PinMediaMetadata::itemTypeIsSet() const
{
    return m_Item_typeIsSet;
}

void PinMediaMetadata::unsetItem_type()
{
    m_Item_typeIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<ImageDetails>>& PinMediaMetadata::getImages()
{
    return m_Images;
}

void PinMediaMetadata::setImages(const std::map<utility::string_t, std::shared_ptr<ImageDetails>>& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}

bool PinMediaMetadata::imagesIsSet() const
{
    return m_ImagesIsSet;
}

void PinMediaMetadata::unsetImages()
{
    m_ImagesIsSet = false;
}
utility::string_t PinMediaMetadata::getCoverImageUrl() const
{
    return m_Cover_image_url;
}

void PinMediaMetadata::setCoverImageUrl(const utility::string_t& value)
{
    m_Cover_image_url = value;
    m_Cover_image_urlIsSet = true;
}

bool PinMediaMetadata::coverImageUrlIsSet() const
{
    return m_Cover_image_urlIsSet;
}

void PinMediaMetadata::unsetCover_image_url()
{
    m_Cover_image_urlIsSet = false;
}
double PinMediaMetadata::getDuration() const
{
    return m_Duration;
}

void PinMediaMetadata::setDuration(double value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool PinMediaMetadata::durationIsSet() const
{
    return m_DurationIsSet;
}

void PinMediaMetadata::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t PinMediaMetadata::getHeight() const
{
    return m_Height;
}

void PinMediaMetadata::setHeight(int32_t value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool PinMediaMetadata::heightIsSet() const
{
    return m_HeightIsSet;
}

void PinMediaMetadata::unsetHeight()
{
    m_HeightIsSet = false;
}
int32_t PinMediaMetadata::getWidth() const
{
    return m_Width;
}

void PinMediaMetadata::setWidth(int32_t value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool PinMediaMetadata::widthIsSet() const
{
    return m_WidthIsSet;
}

void PinMediaMetadata::unsetWidth()
{
    m_WidthIsSet = false;
}
}
}
}
}


