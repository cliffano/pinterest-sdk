/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Catalogs_product_groups_list_200_response_allOf_items_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Catalogs_product_groups_list_200_response_allOf_items_inner::Catalogs_product_groups_list_200_response_allOf_items_inner()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_FiltersIsSet = false;
    m_Is_featured = false;
    m_Is_featuredIsSet = false;
    m_TypeIsSet = false;
    m_StatusIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Updated_at = 0;
    m_Updated_atIsSet = false;
    m_Feed_id = utility::conversions::to_string_t("");
    m_Feed_idIsSet = false;
    m_Catalog_type = utility::conversions::to_string_t("");
    m_Catalog_typeIsSet = false;
    m_Catalog_id = utility::conversions::to_string_t("");
    m_Catalog_idIsSet = false;
}

Catalogs_product_groups_list_200_response_allOf_items_inner::~Catalogs_product_groups_list_200_response_allOf_items_inner()
{
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::validate()
{
    // TODO: implement validation
}

web::json::value Catalogs_product_groups_list_200_response_allOf_items_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_FiltersIsSet)
    {
        val[utility::conversions::to_string_t(U("filters"))] = ModelBase::toJson(m_Filters);
    }
    if(m_Is_featuredIsSet)
    {
        val[utility::conversions::to_string_t(U("is_featured"))] = ModelBase::toJson(m_Is_featured);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_Feed_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_id"))] = ModelBase::toJson(m_Feed_id);
    }
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }
    if(m_Catalog_idIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_id"))] = ModelBase::toJson(m_Catalog_id);
    }

    return val;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filters")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupFilters> refVal_setFilters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilters);
            setFilters(refVal_setFilters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_featured"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_featured")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsFeatured;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsFeatured);
            setIsFeatured(refVal_setIsFeatured);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeedId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedId);
            setFeedId(refVal_setFeedId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catalog_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatalogId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogId);
            setCatalogId(refVal_setCatalogId);
        }
    }
    return ok;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_FiltersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filters")), m_Filters));
    }
    if(m_Is_featuredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_featured")), m_Is_featured));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at")), m_Updated_at));
    }
    if(m_Feed_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_id")), m_Feed_id));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
    if(m_Catalog_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_id")), m_Catalog_id));
    }
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filters"))))
    {
        std::shared_ptr<CatalogsProductGroupFilters> refVal_setFilters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filters"))), refVal_setFilters );
        setFilters(refVal_setFilters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_featured"))))
    {
        bool refVal_setIsFeatured;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_featured"))), refVal_setIsFeatured );
        setIsFeatured(refVal_setIsFeatured);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<CatalogsProductGroupType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<CatalogsProductGroupStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at"))))
    {
        int32_t refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_id"))))
    {
        utility::string_t refVal_setFeedId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_id"))), refVal_setFeedId );
        setFeedId(refVal_setFeedId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        utility::string_t refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_id"))))
    {
        utility::string_t refVal_setCatalogId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_id"))), refVal_setCatalogId );
        setCatalogId(refVal_setCatalogId);
    }
    return ok;
}

utility::string_t Catalogs_product_groups_list_200_response_allOf_items_inner::getId() const
{
    return m_Id;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::idIsSet() const
{
    return m_IdIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Catalogs_product_groups_list_200_response_allOf_items_inner::getName() const
{
    return m_Name;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Catalogs_product_groups_list_200_response_allOf_items_inner::getDescription() const
{
    return m_Description;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<CatalogsProductGroupFilters> Catalogs_product_groups_list_200_response_allOf_items_inner::getFilters() const
{
    return m_Filters;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setFilters(const std::shared_ptr<CatalogsProductGroupFilters>& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::filtersIsSet() const
{
    return m_FiltersIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetFilters()
{
    m_FiltersIsSet = false;
}
bool Catalogs_product_groups_list_200_response_allOf_items_inner::isIsFeatured() const
{
    return m_Is_featured;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setIsFeatured(bool value)
{
    m_Is_featured = value;
    m_Is_featuredIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::isFeaturedIsSet() const
{
    return m_Is_featuredIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetIs_featured()
{
    m_Is_featuredIsSet = false;
}
std::shared_ptr<CatalogsProductGroupType> Catalogs_product_groups_list_200_response_allOf_items_inner::getType() const
{
    return m_Type;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setType(const std::shared_ptr<CatalogsProductGroupType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::typeIsSet() const
{
    return m_TypeIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<CatalogsProductGroupStatus> Catalogs_product_groups_list_200_response_allOf_items_inner::getStatus() const
{
    return m_Status;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setStatus(const std::shared_ptr<CatalogsProductGroupStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::statusIsSet() const
{
    return m_StatusIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t Catalogs_product_groups_list_200_response_allOf_items_inner::getCreatedAt() const
{
    return m_Created_at;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int32_t Catalogs_product_groups_list_200_response_allOf_items_inner::getUpdatedAt() const
{
    return m_Updated_at;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setUpdatedAt(int32_t value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
utility::string_t Catalogs_product_groups_list_200_response_allOf_items_inner::getFeedId() const
{
    return m_Feed_id;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setFeedId(const utility::string_t& value)
{
    m_Feed_id = value;
    m_Feed_idIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::feedIdIsSet() const
{
    return m_Feed_idIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetFeed_id()
{
    m_Feed_idIsSet = false;
}
utility::string_t Catalogs_product_groups_list_200_response_allOf_items_inner::getCatalogType() const
{
    return m_Catalog_type;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setCatalogType(const utility::string_t& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
utility::string_t Catalogs_product_groups_list_200_response_allOf_items_inner::getCatalogId() const
{
    return m_Catalog_id;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::setCatalogId(const utility::string_t& value)
{
    m_Catalog_id = value;
    m_Catalog_idIsSet = true;
}

bool Catalogs_product_groups_list_200_response_allOf_items_inner::catalogIdIsSet() const
{
    return m_Catalog_idIsSet;
}

void Catalogs_product_groups_list_200_response_allOf_items_inner::unsetCatalog_id()
{
    m_Catalog_idIsSet = false;
}
}
}
}
}


