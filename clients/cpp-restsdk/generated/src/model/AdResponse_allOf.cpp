/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdResponse_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdResponse_allOf::AdResponse_allOf()
{
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Campaign_id = utility::conversions::to_string_t("");
    m_Campaign_idIsSet = false;
    m_Collection_items_destination_url_template = utility::conversions::to_string_t("");
    m_Collection_items_destination_url_templateIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Rejected_reasonsIsSet = false;
    m_Rejection_labelsIsSet = false;
    m_Review_status = utility::conversions::to_string_t("");
    m_Review_statusIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Summary_status = utility::conversions::to_string_t("");
    m_Summary_statusIsSet = false;
}

AdResponse_allOf::~AdResponse_allOf()
{
}

void AdResponse_allOf::validate()
{
    // TODO: implement validation
}

web::json::value AdResponse_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_Campaign_idIsSet)
    {
        val[utility::conversions::to_string_t(U("campaign_id"))] = ModelBase::toJson(m_Campaign_id);
    }
    if(m_Collection_items_destination_url_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("collection_items_destination_url_template"))] = ModelBase::toJson(m_Collection_items_destination_url_template);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Rejected_reasonsIsSet)
    {
        val[utility::conversions::to_string_t(U("rejected_reasons"))] = ModelBase::toJson(m_Rejected_reasons);
    }
    if(m_Rejection_labelsIsSet)
    {
        val[utility::conversions::to_string_t(U("rejection_labels"))] = ModelBase::toJson(m_Rejection_labels);
    }
    if(m_Review_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("review_status"))] = ModelBase::toJson(m_Review_status);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_Summary_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_status"))] = ModelBase::toJson(m_Summary_status);
    }

    return val;
}

bool AdResponse_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaign_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaign_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collection_items_destination_url_template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collection_items_destination_url_template")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectionItemsDestinationUrlTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectionItemsDestinationUrlTemplate);
            setCollectionItemsDestinationUrlTemplate(refVal_setCollectionItemsDestinationUrlTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejected_reasons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejected_reasons")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRejectedReasons;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRejectedReasons);
            setRejectedReasons(refVal_setRejectedReasons);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejection_labels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejection_labels")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRejectionLabels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRejectionLabels);
            setRejectionLabels(refVal_setRejectionLabels);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("review_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("review_status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReviewStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReviewStatus);
            setReviewStatus(refVal_setReviewStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_status")));
        if(!fieldValue.is_null())
        {
            PinPromotionSummaryStatus refVal_setSummaryStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSummaryStatus);
            setSummaryStatus(refVal_setSummaryStatus);
        }
    }
    return ok;
}

void AdResponse_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_Campaign_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaign_id")), m_Campaign_id));
    }
    if(m_Collection_items_destination_url_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collection_items_destination_url_template")), m_Collection_items_destination_url_template));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Rejected_reasonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejected_reasons")), m_Rejected_reasons));
    }
    if(m_Rejection_labelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejection_labels")), m_Rejection_labels));
    }
    if(m_Review_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("review_status")), m_Review_status));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_Summary_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_status")), m_Summary_status));
    }
}

bool AdResponse_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaign_id"))))
    {
        utility::string_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaign_id"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collection_items_destination_url_template"))))
    {
        utility::string_t refVal_setCollectionItemsDestinationUrlTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collection_items_destination_url_template"))), refVal_setCollectionItemsDestinationUrlTemplate );
        setCollectionItemsDestinationUrlTemplate(refVal_setCollectionItemsDestinationUrlTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejected_reasons"))))
    {
        std::vector<utility::string_t> refVal_setRejectedReasons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejected_reasons"))), refVal_setRejectedReasons );
        setRejectedReasons(refVal_setRejectedReasons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejection_labels"))))
    {
        std::vector<utility::string_t> refVal_setRejectionLabels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejection_labels"))), refVal_setRejectionLabels );
        setRejectionLabels(refVal_setRejectionLabels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("review_status"))))
    {
        utility::string_t refVal_setReviewStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("review_status"))), refVal_setReviewStatus );
        setReviewStatus(refVal_setReviewStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_status"))))
    {
        PinPromotionSummaryStatus refVal_setSummaryStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_status"))), refVal_setSummaryStatus );
        setSummaryStatus(refVal_setSummaryStatus);
    }
    return ok;
}

utility::string_t AdResponse_allOf::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdResponse_allOf::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool AdResponse_allOf::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void AdResponse_allOf::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
utility::string_t AdResponse_allOf::getCampaignId() const
{
    return m_Campaign_id;
}

void AdResponse_allOf::setCampaignId(const utility::string_t& value)
{
    m_Campaign_id = value;
    m_Campaign_idIsSet = true;
}

bool AdResponse_allOf::campaignIdIsSet() const
{
    return m_Campaign_idIsSet;
}

void AdResponse_allOf::unsetCampaign_id()
{
    m_Campaign_idIsSet = false;
}
utility::string_t AdResponse_allOf::getCollectionItemsDestinationUrlTemplate() const
{
    return m_Collection_items_destination_url_template;
}

void AdResponse_allOf::setCollectionItemsDestinationUrlTemplate(const utility::string_t& value)
{
    m_Collection_items_destination_url_template = value;
    m_Collection_items_destination_url_templateIsSet = true;
}

bool AdResponse_allOf::collectionItemsDestinationUrlTemplateIsSet() const
{
    return m_Collection_items_destination_url_templateIsSet;
}

void AdResponse_allOf::unsetCollection_items_destination_url_template()
{
    m_Collection_items_destination_url_templateIsSet = false;
}
int32_t AdResponse_allOf::getCreatedTime() const
{
    return m_Created_time;
}

void AdResponse_allOf::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool AdResponse_allOf::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void AdResponse_allOf::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
utility::string_t AdResponse_allOf::getId() const
{
    return m_Id;
}

void AdResponse_allOf::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AdResponse_allOf::idIsSet() const
{
    return m_IdIsSet;
}

void AdResponse_allOf::unsetId()
{
    m_IdIsSet = false;
}
std::vector<utility::string_t>& AdResponse_allOf::getRejectedReasons()
{
    return m_Rejected_reasons;
}

void AdResponse_allOf::setRejectedReasons(const std::vector<utility::string_t>& value)
{
    m_Rejected_reasons = value;
    m_Rejected_reasonsIsSet = true;
}

bool AdResponse_allOf::rejectedReasonsIsSet() const
{
    return m_Rejected_reasonsIsSet;
}

void AdResponse_allOf::unsetRejected_reasons()
{
    m_Rejected_reasonsIsSet = false;
}
std::vector<utility::string_t>& AdResponse_allOf::getRejectionLabels()
{
    return m_Rejection_labels;
}

void AdResponse_allOf::setRejectionLabels(const std::vector<utility::string_t>& value)
{
    m_Rejection_labels = value;
    m_Rejection_labelsIsSet = true;
}

bool AdResponse_allOf::rejectionLabelsIsSet() const
{
    return m_Rejection_labelsIsSet;
}

void AdResponse_allOf::unsetRejection_labels()
{
    m_Rejection_labelsIsSet = false;
}
utility::string_t AdResponse_allOf::getReviewStatus() const
{
    return m_Review_status;
}

void AdResponse_allOf::setReviewStatus(const utility::string_t& value)
{
    m_Review_status = value;
    m_Review_statusIsSet = true;
}

bool AdResponse_allOf::reviewStatusIsSet() const
{
    return m_Review_statusIsSet;
}

void AdResponse_allOf::unsetReview_status()
{
    m_Review_statusIsSet = false;
}
utility::string_t AdResponse_allOf::getType() const
{
    return m_Type;
}

void AdResponse_allOf::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool AdResponse_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}

void AdResponse_allOf::unsetType()
{
    m_TypeIsSet = false;
}
int32_t AdResponse_allOf::getUpdatedTime() const
{
    return m_Updated_time;
}

void AdResponse_allOf::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool AdResponse_allOf::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void AdResponse_allOf::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
PinPromotionSummaryStatus AdResponse_allOf::getSummaryStatus() const
{
    return m_Summary_status;
}

void AdResponse_allOf::setSummaryStatus(const PinPromotionSummaryStatus& value)
{
    m_Summary_status = value;
    m_Summary_statusIsSet = true;
}

bool AdResponse_allOf::summaryStatusIsSet() const
{
    return m_Summary_statusIsSet;
}

void AdResponse_allOf::unsetSummary_status()
{
    m_Summary_statusIsSet = false;
}
}
}
}
}


