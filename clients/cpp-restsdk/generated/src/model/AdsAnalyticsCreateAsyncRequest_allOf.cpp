/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdsAnalyticsCreateAsyncRequest_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdsAnalyticsCreateAsyncRequest_allOf::AdsAnalyticsCreateAsyncRequest_allOf()
{
    m_Start_date = utility::conversions::to_string_t("");
    m_Start_dateIsSet = false;
    m_End_date = utility::conversions::to_string_t("");
    m_End_dateIsSet = false;
    m_Granularity = utility::conversions::to_string_t("");
    m_GranularityIsSet = false;
    m_Click_window_daysIsSet = false;
    m_Engagement_window_daysIsSet = false;
    m_View_window_daysIsSet = false;
    m_Conversion_report_time = utility::conversions::to_string_t("");
    m_Conversion_report_timeIsSet = false;
    m_Attribution_typesIsSet = false;
}

AdsAnalyticsCreateAsyncRequest_allOf::~AdsAnalyticsCreateAsyncRequest_allOf()
{
}

void AdsAnalyticsCreateAsyncRequest_allOf::validate()
{
    // TODO: implement validation
}

web::json::value AdsAnalyticsCreateAsyncRequest_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Start_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("start_date"))] = ModelBase::toJson(m_Start_date);
    }
    if(m_End_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("end_date"))] = ModelBase::toJson(m_End_date);
    }
    if(m_GranularityIsSet)
    {
        val[utility::conversions::to_string_t(U("granularity"))] = ModelBase::toJson(m_Granularity);
    }
    if(m_Click_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("click_window_days"))] = ModelBase::toJson(m_Click_window_days);
    }
    if(m_Engagement_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("engagement_window_days"))] = ModelBase::toJson(m_Engagement_window_days);
    }
    if(m_View_window_daysIsSet)
    {
        val[utility::conversions::to_string_t(U("view_window_days"))] = ModelBase::toJson(m_View_window_days);
    }
    if(m_Conversion_report_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_report_time"))] = ModelBase::toJson(m_Conversion_report_time);
    }
    if(m_Attribution_typesIsSet)
    {
        val[utility::conversions::to_string_t(U("attribution_types"))] = ModelBase::toJson(m_Attribution_types);
    }

    return val;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("start_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartDate);
            setStartDate(refVal_setStartDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndDate);
            setEndDate(refVal_setEndDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("granularity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("granularity")));
        if(!fieldValue.is_null())
        {
            Granularity refVal_setGranularity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGranularity);
            setGranularity(refVal_setGranularity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("click_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("click_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_setClickWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClickWindowDays);
            setClickWindowDays(refVal_setClickWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engagement_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_setEngagementWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngagementWindowDays);
            setEngagementWindowDays(refVal_setEngagementWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("view_window_days"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("view_window_days")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConversionAttributionWindowDays> refVal_setViewWindowDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setViewWindowDays);
            setViewWindowDays(refVal_setViewWindowDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_report_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_report_time")));
        if(!fieldValue.is_null())
        {
            ConversionReportTimeType refVal_setConversionReportTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionReportTime);
            setConversionReportTime(refVal_setConversionReportTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attribution_types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attribution_types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConversionReportAttributionType>> refVal_setAttributionTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttributionTypes);
            setAttributionTypes(refVal_setAttributionTypes);
        }
    }
    return ok;
}

void AdsAnalyticsCreateAsyncRequest_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_date")), m_Start_date));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_date")), m_End_date));
    }
    if(m_GranularityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("granularity")), m_Granularity));
    }
    if(m_Click_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("click_window_days")), m_Click_window_days));
    }
    if(m_Engagement_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engagement_window_days")), m_Engagement_window_days));
    }
    if(m_View_window_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("view_window_days")), m_View_window_days));
    }
    if(m_Conversion_report_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_report_time")), m_Conversion_report_time));
    }
    if(m_Attribution_typesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attribution_types")), m_Attribution_types));
    }
}

bool AdsAnalyticsCreateAsyncRequest_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("start_date"))))
    {
        utility::string_t refVal_setStartDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_date"))), refVal_setStartDate );
        setStartDate(refVal_setStartDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_date"))))
    {
        utility::string_t refVal_setEndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_date"))), refVal_setEndDate );
        setEndDate(refVal_setEndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("granularity"))))
    {
        Granularity refVal_setGranularity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("granularity"))), refVal_setGranularity );
        setGranularity(refVal_setGranularity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("click_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_setClickWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("click_window_days"))), refVal_setClickWindowDays );
        setClickWindowDays(refVal_setClickWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engagement_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_setEngagementWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engagement_window_days"))), refVal_setEngagementWindowDays );
        setEngagementWindowDays(refVal_setEngagementWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("view_window_days"))))
    {
        std::shared_ptr<ConversionAttributionWindowDays> refVal_setViewWindowDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("view_window_days"))), refVal_setViewWindowDays );
        setViewWindowDays(refVal_setViewWindowDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_report_time"))))
    {
        ConversionReportTimeType refVal_setConversionReportTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_report_time"))), refVal_setConversionReportTime );
        setConversionReportTime(refVal_setConversionReportTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attribution_types"))))
    {
        std::vector<std::shared_ptr<ConversionReportAttributionType>> refVal_setAttributionTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attribution_types"))), refVal_setAttributionTypes );
        setAttributionTypes(refVal_setAttributionTypes);
    }
    return ok;
}

utility::string_t AdsAnalyticsCreateAsyncRequest_allOf::getStartDate() const
{
    return m_Start_date;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setStartDate(const utility::string_t& value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::startDateIsSet() const
{
    return m_Start_dateIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::string_t AdsAnalyticsCreateAsyncRequest_allOf::getEndDate() const
{
    return m_End_date;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setEndDate(const utility::string_t& value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::endDateIsSet() const
{
    return m_End_dateIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
Granularity AdsAnalyticsCreateAsyncRequest_allOf::getGranularity() const
{
    return m_Granularity;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setGranularity(const Granularity& value)
{
    m_Granularity = value;
    m_GranularityIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::granularityIsSet() const
{
    return m_GranularityIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetGranularity()
{
    m_GranularityIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest_allOf::getClickWindowDays() const
{
    return m_Click_window_days;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setClickWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_Click_window_days = value;
    m_Click_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::clickWindowDaysIsSet() const
{
    return m_Click_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetClick_window_days()
{
    m_Click_window_daysIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest_allOf::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setEngagementWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_Engagement_window_days = value;
    m_Engagement_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::engagementWindowDaysIsSet() const
{
    return m_Engagement_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetEngagement_window_days()
{
    m_Engagement_window_daysIsSet = false;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest_allOf::getViewWindowDays() const
{
    return m_View_window_days;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setViewWindowDays(const std::shared_ptr<ConversionAttributionWindowDays>& value)
{
    m_View_window_days = value;
    m_View_window_daysIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::viewWindowDaysIsSet() const
{
    return m_View_window_daysIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetView_window_days()
{
    m_View_window_daysIsSet = false;
}
ConversionReportTimeType AdsAnalyticsCreateAsyncRequest_allOf::getConversionReportTime() const
{
    return m_Conversion_report_time;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setConversionReportTime(const ConversionReportTimeType& value)
{
    m_Conversion_report_time = value;
    m_Conversion_report_timeIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::conversionReportTimeIsSet() const
{
    return m_Conversion_report_timeIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetConversion_report_time()
{
    m_Conversion_report_timeIsSet = false;
}
std::vector<std::shared_ptr<ConversionReportAttributionType>>& AdsAnalyticsCreateAsyncRequest_allOf::getAttributionTypes()
{
    return m_Attribution_types;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setAttributionTypes(const std::vector<std::shared_ptr<ConversionReportAttributionType>>& value)
{
    m_Attribution_types = value;
    m_Attribution_typesIsSet = true;
}

bool AdsAnalyticsCreateAsyncRequest_allOf::attributionTypesIsSet() const
{
    return m_Attribution_typesIsSet;
}

void AdsAnalyticsCreateAsyncRequest_allOf::unsetAttribution_types()
{
    m_Attribution_typesIsSet = false;
}
}
}
}
}


