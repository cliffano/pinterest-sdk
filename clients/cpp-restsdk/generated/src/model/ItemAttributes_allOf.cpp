/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ItemAttributes_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ItemAttributes_allOf::ItemAttributes_allOf()
{
    m_Additional_image_linkIsSet = false;
    m_Image_linkIsSet = false;
}

ItemAttributes_allOf::~ItemAttributes_allOf()
{
}

void ItemAttributes_allOf::validate()
{
    // TODO: implement validation
}

web::json::value ItemAttributes_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Additional_image_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("additional_image_link"))] = ModelBase::toJson(m_Additional_image_link);
    }
    if(m_Image_linkIsSet)
    {
        val[utility::conversions::to_string_t(U("image_link"))] = ModelBase::toJson(m_Image_link);
    }

    return val;
}

bool ItemAttributes_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("additional_image_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additional_image_link")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAdditionalImageLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdditionalImageLink);
            setAdditionalImageLink(refVal_setAdditionalImageLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image_link"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_link")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setImageLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImageLink);
            setImageLink(refVal_setImageLink);
        }
    }
    return ok;
}

void ItemAttributes_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Additional_image_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additional_image_link")), m_Additional_image_link));
    }
    if(m_Image_linkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_link")), m_Image_link));
    }
}

bool ItemAttributes_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("additional_image_link"))))
    {
        std::vector<utility::string_t> refVal_setAdditionalImageLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additional_image_link"))), refVal_setAdditionalImageLink );
        setAdditionalImageLink(refVal_setAdditionalImageLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image_link"))))
    {
        std::vector<utility::string_t> refVal_setImageLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_link"))), refVal_setImageLink );
        setImageLink(refVal_setImageLink);
    }
    return ok;
}

std::vector<utility::string_t>& ItemAttributes_allOf::getAdditionalImageLink()
{
    return m_Additional_image_link;
}

void ItemAttributes_allOf::setAdditionalImageLink(const std::vector<utility::string_t>& value)
{
    m_Additional_image_link = value;
    m_Additional_image_linkIsSet = true;
}

bool ItemAttributes_allOf::additionalImageLinkIsSet() const
{
    return m_Additional_image_linkIsSet;
}

void ItemAttributes_allOf::unsetAdditional_image_link()
{
    m_Additional_image_linkIsSet = false;
}
std::vector<utility::string_t>& ItemAttributes_allOf::getImageLink()
{
    return m_Image_link;
}

void ItemAttributes_allOf::setImageLink(const std::vector<utility::string_t>& value)
{
    m_Image_link = value;
    m_Image_linkIsSet = true;
}

bool ItemAttributes_allOf::imageLinkIsSet() const
{
    return m_Image_linkIsSet;
}

void ItemAttributes_allOf::unsetImage_link()
{
    m_Image_linkIsSet = false;
}
}
}
}
}


