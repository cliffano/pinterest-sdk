/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CampaignResponse_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CampaignResponse_allOf::CampaignResponse_allOf()
{
    m_Objective_typeIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Is_flexible_daily_budgets = false;
    m_Is_flexible_daily_budgetsIsSet = false;
    m_Is_campaign_budget_optimization = false;
    m_Is_campaign_budget_optimizationIsSet = false;
}

CampaignResponse_allOf::~CampaignResponse_allOf()
{
}

void CampaignResponse_allOf::validate()
{
    // TODO: implement validation
}

web::json::value CampaignResponse_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Objective_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("objective_type"))] = ModelBase::toJson(m_Objective_type);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Is_flexible_daily_budgetsIsSet)
    {
        val[utility::conversions::to_string_t(U("is_flexible_daily_budgets"))] = ModelBase::toJson(m_Is_flexible_daily_budgets);
    }
    if(m_Is_campaign_budget_optimizationIsSet)
    {
        val[utility::conversions::to_string_t(U("is_campaign_budget_optimization"))] = ModelBase::toJson(m_Is_campaign_budget_optimization);
    }

    return val;
}

bool CampaignResponse_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("objective_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("objective_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ObjectiveType> refVal_setObjectiveType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObjectiveType);
            setObjectiveType(refVal_setObjectiveType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_flexible_daily_budgets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_flexible_daily_budgets")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsFlexibleDailyBudgets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsFlexibleDailyBudgets);
            setIsFlexibleDailyBudgets(refVal_setIsFlexibleDailyBudgets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_campaign_budget_optimization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_campaign_budget_optimization")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsCampaignBudgetOptimization;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsCampaignBudgetOptimization);
            setIsCampaignBudgetOptimization(refVal_setIsCampaignBudgetOptimization);
        }
    }
    return ok;
}

void CampaignResponse_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Objective_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("objective_type")), m_Objective_type));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Is_flexible_daily_budgetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_flexible_daily_budgets")), m_Is_flexible_daily_budgets));
    }
    if(m_Is_campaign_budget_optimizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_campaign_budget_optimization")), m_Is_campaign_budget_optimization));
    }
}

bool CampaignResponse_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("objective_type"))))
    {
        std::shared_ptr<ObjectiveType> refVal_setObjectiveType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("objective_type"))), refVal_setObjectiveType );
        setObjectiveType(refVal_setObjectiveType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_flexible_daily_budgets"))))
    {
        bool refVal_setIsFlexibleDailyBudgets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_flexible_daily_budgets"))), refVal_setIsFlexibleDailyBudgets );
        setIsFlexibleDailyBudgets(refVal_setIsFlexibleDailyBudgets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_campaign_budget_optimization"))))
    {
        bool refVal_setIsCampaignBudgetOptimization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_campaign_budget_optimization"))), refVal_setIsCampaignBudgetOptimization );
        setIsCampaignBudgetOptimization(refVal_setIsCampaignBudgetOptimization);
    }
    return ok;
}

std::shared_ptr<ObjectiveType> CampaignResponse_allOf::getObjectiveType() const
{
    return m_Objective_type;
}

void CampaignResponse_allOf::setObjectiveType(const std::shared_ptr<ObjectiveType>& value)
{
    m_Objective_type = value;
    m_Objective_typeIsSet = true;
}

bool CampaignResponse_allOf::objectiveTypeIsSet() const
{
    return m_Objective_typeIsSet;
}

void CampaignResponse_allOf::unsetObjective_type()
{
    m_Objective_typeIsSet = false;
}
int32_t CampaignResponse_allOf::getCreatedTime() const
{
    return m_Created_time;
}

void CampaignResponse_allOf::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool CampaignResponse_allOf::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void CampaignResponse_allOf::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t CampaignResponse_allOf::getUpdatedTime() const
{
    return m_Updated_time;
}

void CampaignResponse_allOf::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool CampaignResponse_allOf::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void CampaignResponse_allOf::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
utility::string_t CampaignResponse_allOf::getType() const
{
    return m_Type;
}

void CampaignResponse_allOf::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool CampaignResponse_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}

void CampaignResponse_allOf::unsetType()
{
    m_TypeIsSet = false;
}
bool CampaignResponse_allOf::isIsFlexibleDailyBudgets() const
{
    return m_Is_flexible_daily_budgets;
}

void CampaignResponse_allOf::setIsFlexibleDailyBudgets(bool value)
{
    m_Is_flexible_daily_budgets = value;
    m_Is_flexible_daily_budgetsIsSet = true;
}

bool CampaignResponse_allOf::isFlexibleDailyBudgetsIsSet() const
{
    return m_Is_flexible_daily_budgetsIsSet;
}

void CampaignResponse_allOf::unsetIs_flexible_daily_budgets()
{
    m_Is_flexible_daily_budgetsIsSet = false;
}
bool CampaignResponse_allOf::isIsCampaignBudgetOptimization() const
{
    return m_Is_campaign_budget_optimization;
}

void CampaignResponse_allOf::setIsCampaignBudgetOptimization(bool value)
{
    m_Is_campaign_budget_optimization = value;
    m_Is_campaign_budget_optimizationIsSet = true;
}

bool CampaignResponse_allOf::isCampaignBudgetOptimizationIsSet() const
{
    return m_Is_campaign_budget_optimizationIsSet;
}

void CampaignResponse_allOf::unsetIs_campaign_budget_optimization()
{
    m_Is_campaign_budget_optimizationIsSet = false;
}
}
}
}
}


