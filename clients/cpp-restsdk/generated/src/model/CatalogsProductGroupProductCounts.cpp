/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsProductGroupProductCounts.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsProductGroupProductCounts::CatalogsProductGroupProductCounts()
{
    m_In_stock = 0.0;
    m_In_stockIsSet = false;
    m_Out_of_stock = 0.0;
    m_Out_of_stockIsSet = false;
    m_Preorder = 0.0;
    m_PreorderIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
}

CatalogsProductGroupProductCounts::~CatalogsProductGroupProductCounts()
{
}

void CatalogsProductGroupProductCounts::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsProductGroupProductCounts::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_In_stockIsSet)
    {
        val[utility::conversions::to_string_t(U("in_stock"))] = ModelBase::toJson(m_In_stock);
    }
    if(m_Out_of_stockIsSet)
    {
        val[utility::conversions::to_string_t(U("out_of_stock"))] = ModelBase::toJson(m_Out_of_stock);
    }
    if(m_PreorderIsSet)
    {
        val[utility::conversions::to_string_t(U("preorder"))] = ModelBase::toJson(m_Preorder);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }

    return val;
}

bool CatalogsProductGroupProductCounts::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("in_stock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("in_stock")));
        if(!fieldValue.is_null())
        {
            double refVal_setInStock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInStock);
            setInStock(refVal_setInStock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("out_of_stock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("out_of_stock")));
        if(!fieldValue.is_null())
        {
            double refVal_setOutOfStock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutOfStock);
            setOutOfStock(refVal_setOutOfStock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preorder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preorder")));
        if(!fieldValue.is_null())
        {
            double refVal_setPreorder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreorder);
            setPreorder(refVal_setPreorder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    return ok;
}

void CatalogsProductGroupProductCounts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_In_stockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("in_stock")), m_In_stock));
    }
    if(m_Out_of_stockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("out_of_stock")), m_Out_of_stock));
    }
    if(m_PreorderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preorder")), m_Preorder));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
}

bool CatalogsProductGroupProductCounts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("in_stock"))))
    {
        double refVal_setInStock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("in_stock"))), refVal_setInStock );
        setInStock(refVal_setInStock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("out_of_stock"))))
    {
        double refVal_setOutOfStock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("out_of_stock"))), refVal_setOutOfStock );
        setOutOfStock(refVal_setOutOfStock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preorder"))))
    {
        double refVal_setPreorder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preorder"))), refVal_setPreorder );
        setPreorder(refVal_setPreorder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        double refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    return ok;
}

double CatalogsProductGroupProductCounts::getInStock() const
{
    return m_In_stock;
}

void CatalogsProductGroupProductCounts::setInStock(double value)
{
    m_In_stock = value;
    m_In_stockIsSet = true;
}

bool CatalogsProductGroupProductCounts::inStockIsSet() const
{
    return m_In_stockIsSet;
}

void CatalogsProductGroupProductCounts::unsetIn_stock()
{
    m_In_stockIsSet = false;
}
double CatalogsProductGroupProductCounts::getOutOfStock() const
{
    return m_Out_of_stock;
}

void CatalogsProductGroupProductCounts::setOutOfStock(double value)
{
    m_Out_of_stock = value;
    m_Out_of_stockIsSet = true;
}

bool CatalogsProductGroupProductCounts::outOfStockIsSet() const
{
    return m_Out_of_stockIsSet;
}

void CatalogsProductGroupProductCounts::unsetOut_of_stock()
{
    m_Out_of_stockIsSet = false;
}
double CatalogsProductGroupProductCounts::getPreorder() const
{
    return m_Preorder;
}

void CatalogsProductGroupProductCounts::setPreorder(double value)
{
    m_Preorder = value;
    m_PreorderIsSet = true;
}

bool CatalogsProductGroupProductCounts::preorderIsSet() const
{
    return m_PreorderIsSet;
}

void CatalogsProductGroupProductCounts::unsetPreorder()
{
    m_PreorderIsSet = false;
}
double CatalogsProductGroupProductCounts::getTotal() const
{
    return m_Total;
}

void CatalogsProductGroupProductCounts::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool CatalogsProductGroupProductCounts::totalIsSet() const
{
    return m_TotalIsSet;
}

void CatalogsProductGroupProductCounts::unsetTotal()
{
    m_TotalIsSet = false;
}
}
}
}
}


