/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsListProductsByFilterRequest_oneOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsListProductsByFilterRequest_oneOf::CatalogsListProductsByFilterRequest_oneOf()
{
    m_Feed_id = utility::conversions::to_string_t("");
    m_Feed_idIsSet = false;
    m_FiltersIsSet = false;
}

CatalogsListProductsByFilterRequest_oneOf::~CatalogsListProductsByFilterRequest_oneOf()
{
}

void CatalogsListProductsByFilterRequest_oneOf::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsListProductsByFilterRequest_oneOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Feed_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_id"))] = ModelBase::toJson(m_Feed_id);
    }
    if(m_FiltersIsSet)
    {
        val[utility::conversions::to_string_t(U("filters"))] = ModelBase::toJson(m_Filters);
    }

    return val;
}

bool CatalogsListProductsByFilterRequest_oneOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("feed_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeedId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedId);
            setFeedId(refVal_setFeedId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filters")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsProductGroupFilters> refVal_setFilters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilters);
            setFilters(refVal_setFilters);
        }
    }
    return ok;
}

void CatalogsListProductsByFilterRequest_oneOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Feed_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_id")), m_Feed_id));
    }
    if(m_FiltersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filters")), m_Filters));
    }
}

bool CatalogsListProductsByFilterRequest_oneOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_id"))))
    {
        utility::string_t refVal_setFeedId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_id"))), refVal_setFeedId );
        setFeedId(refVal_setFeedId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filters"))))
    {
        std::shared_ptr<CatalogsProductGroupFilters> refVal_setFilters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filters"))), refVal_setFilters );
        setFilters(refVal_setFilters);
    }
    return ok;
}

utility::string_t CatalogsListProductsByFilterRequest_oneOf::getFeedId() const
{
    return m_Feed_id;
}

void CatalogsListProductsByFilterRequest_oneOf::setFeedId(const utility::string_t& value)
{
    m_Feed_id = value;
    m_Feed_idIsSet = true;
}

bool CatalogsListProductsByFilterRequest_oneOf::feedIdIsSet() const
{
    return m_Feed_idIsSet;
}

void CatalogsListProductsByFilterRequest_oneOf::unsetFeed_id()
{
    m_Feed_idIsSet = false;
}
std::shared_ptr<CatalogsProductGroupFilters> CatalogsListProductsByFilterRequest_oneOf::getFilters() const
{
    return m_Filters;
}

void CatalogsListProductsByFilterRequest_oneOf::setFilters(const std::shared_ptr<CatalogsProductGroupFilters>& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}

bool CatalogsListProductsByFilterRequest_oneOf::filtersIsSet() const
{
    return m_FiltersIsSet;
}

void CatalogsListProductsByFilterRequest_oneOf::unsetFilters()
{
    m_FiltersIsSet = false;
}
}
}
}
}


