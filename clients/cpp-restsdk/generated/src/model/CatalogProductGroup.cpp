/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogProductGroup.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogProductGroup::CatalogProductGroup()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Merchant_id = utility::conversions::to_string_t("");
    m_Merchant_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_FiltersIsSet = false;
    m_Filter_v2IsSet = false;
    m_TypeIsSet = false;
    m_StatusIsSet = false;
    m_Feed_profile_id = utility::conversions::to_string_t("");
    m_Feed_profile_idIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Last_update = 0;
    m_Last_updateIsSet = false;
    m_Product_count = 0;
    m_Product_countIsSet = false;
    m_Featured_position = 0;
    m_Featured_positionIsSet = false;
}

CatalogProductGroup::~CatalogProductGroup()
{
}

void CatalogProductGroup::validate()
{
    // TODO: implement validation
}

web::json::value CatalogProductGroup::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Merchant_idIsSet)
    {
        val[utility::conversions::to_string_t(U("merchant_id"))] = ModelBase::toJson(m_Merchant_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_FiltersIsSet)
    {
        val[utility::conversions::to_string_t(U("filters"))] = ModelBase::toJson(m_Filters);
    }
    if(m_Filter_v2IsSet)
    {
        val[utility::conversions::to_string_t(U("filter_v2"))] = ModelBase::toJson(m_Filter_v2);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Feed_profile_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_profile_id"))] = ModelBase::toJson(m_Feed_profile_id);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Last_updateIsSet)
    {
        val[utility::conversions::to_string_t(U("last_update"))] = ModelBase::toJson(m_Last_update);
    }
    if(m_Product_countIsSet)
    {
        val[utility::conversions::to_string_t(U("product_count"))] = ModelBase::toJson(m_Product_count);
    }
    if(m_Featured_positionIsSet)
    {
        val[utility::conversions::to_string_t(U("featured_position"))] = ModelBase::toJson(m_Featured_position);
    }

    return val;
}

bool CatalogProductGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("merchant_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("merchant_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMerchantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMerchantId);
            setMerchantId(refVal_setMerchantId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filters")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setFilters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilters);
            setFilters(refVal_setFilters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filter_v2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filter_v2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setFilterV2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilterV2);
            setFilterV2(refVal_setFilterV2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Board> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EntityStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_profile_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeedProfileId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedProfileId);
            setFeedProfileId(refVal_setFeedProfileId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_update"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_update")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLastUpdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastUpdate);
            setLastUpdate(refVal_setLastUpdate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("product_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("product_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setProductCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProductCount);
            setProductCount(refVal_setProductCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("featured_position"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("featured_position")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFeaturedPosition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeaturedPosition);
            setFeaturedPosition(refVal_setFeaturedPosition);
        }
    }
    return ok;
}

void CatalogProductGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Merchant_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("merchant_id")), m_Merchant_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_FiltersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filters")), m_Filters));
    }
    if(m_Filter_v2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filter_v2")), m_Filter_v2));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_Feed_profile_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_profile_id")), m_Feed_profile_id));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Last_updateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_update")), m_Last_update));
    }
    if(m_Product_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("product_count")), m_Product_count));
    }
    if(m_Featured_positionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("featured_position")), m_Featured_position));
    }
}

bool CatalogProductGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("merchant_id"))))
    {
        utility::string_t refVal_setMerchantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("merchant_id"))), refVal_setMerchantId );
        setMerchantId(refVal_setMerchantId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filters"))))
    {
        std::shared_ptr<Object> refVal_setFilters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filters"))), refVal_setFilters );
        setFilters(refVal_setFilters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filter_v2"))))
    {
        std::shared_ptr<Object> refVal_setFilterV2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filter_v2"))), refVal_setFilterV2 );
        setFilterV2(refVal_setFilterV2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<Board> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<EntityStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        utility::string_t refVal_setFeedProfileId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_profile_id"))), refVal_setFeedProfileId );
        setFeedProfileId(refVal_setFeedProfileId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        int32_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_update"))))
    {
        int32_t refVal_setLastUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_update"))), refVal_setLastUpdate );
        setLastUpdate(refVal_setLastUpdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("product_count"))))
    {
        int32_t refVal_setProductCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("product_count"))), refVal_setProductCount );
        setProductCount(refVal_setProductCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("featured_position"))))
    {
        int32_t refVal_setFeaturedPosition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("featured_position"))), refVal_setFeaturedPosition );
        setFeaturedPosition(refVal_setFeaturedPosition);
    }
    return ok;
}

utility::string_t CatalogProductGroup::getId() const
{
    return m_Id;
}

void CatalogProductGroup::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CatalogProductGroup::idIsSet() const
{
    return m_IdIsSet;
}

void CatalogProductGroup::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CatalogProductGroup::getMerchantId() const
{
    return m_Merchant_id;
}

void CatalogProductGroup::setMerchantId(const utility::string_t& value)
{
    m_Merchant_id = value;
    m_Merchant_idIsSet = true;
}

bool CatalogProductGroup::merchantIdIsSet() const
{
    return m_Merchant_idIsSet;
}

void CatalogProductGroup::unsetMerchant_id()
{
    m_Merchant_idIsSet = false;
}
utility::string_t CatalogProductGroup::getName() const
{
    return m_Name;
}

void CatalogProductGroup::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CatalogProductGroup::nameIsSet() const
{
    return m_NameIsSet;
}

void CatalogProductGroup::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<Object> CatalogProductGroup::getFilters() const
{
    return m_Filters;
}

void CatalogProductGroup::setFilters(const std::shared_ptr<Object>& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}

bool CatalogProductGroup::filtersIsSet() const
{
    return m_FiltersIsSet;
}

void CatalogProductGroup::unsetFilters()
{
    m_FiltersIsSet = false;
}
std::shared_ptr<Object> CatalogProductGroup::getFilterV2() const
{
    return m_Filter_v2;
}

void CatalogProductGroup::setFilterV2(const std::shared_ptr<Object>& value)
{
    m_Filter_v2 = value;
    m_Filter_v2IsSet = true;
}

bool CatalogProductGroup::filterV2IsSet() const
{
    return m_Filter_v2IsSet;
}

void CatalogProductGroup::unsetFilter_v2()
{
    m_Filter_v2IsSet = false;
}
std::shared_ptr<Board> CatalogProductGroup::getType() const
{
    return m_Type;
}

void CatalogProductGroup::setType(const std::shared_ptr<Board>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool CatalogProductGroup::typeIsSet() const
{
    return m_TypeIsSet;
}

void CatalogProductGroup::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<EntityStatus> CatalogProductGroup::getStatus() const
{
    return m_Status;
}

void CatalogProductGroup::setStatus(const std::shared_ptr<EntityStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool CatalogProductGroup::statusIsSet() const
{
    return m_StatusIsSet;
}

void CatalogProductGroup::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t CatalogProductGroup::getFeedProfileId() const
{
    return m_Feed_profile_id;
}

void CatalogProductGroup::setFeedProfileId(const utility::string_t& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}

bool CatalogProductGroup::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}

void CatalogProductGroup::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
int32_t CatalogProductGroup::getCreatedAt() const
{
    return m_Created_at;
}

void CatalogProductGroup::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool CatalogProductGroup::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void CatalogProductGroup::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int32_t CatalogProductGroup::getLastUpdate() const
{
    return m_Last_update;
}

void CatalogProductGroup::setLastUpdate(int32_t value)
{
    m_Last_update = value;
    m_Last_updateIsSet = true;
}

bool CatalogProductGroup::lastUpdateIsSet() const
{
    return m_Last_updateIsSet;
}

void CatalogProductGroup::unsetLast_update()
{
    m_Last_updateIsSet = false;
}
int32_t CatalogProductGroup::getProductCount() const
{
    return m_Product_count;
}

void CatalogProductGroup::setProductCount(int32_t value)
{
    m_Product_count = value;
    m_Product_countIsSet = true;
}

bool CatalogProductGroup::productCountIsSet() const
{
    return m_Product_countIsSet;
}

void CatalogProductGroup::unsetProduct_count()
{
    m_Product_countIsSet = false;
}
int32_t CatalogProductGroup::getFeaturedPosition() const
{
    return m_Featured_position;
}

void CatalogProductGroup::setFeaturedPosition(int32_t value)
{
    m_Featured_position = value;
    m_Featured_positionIsSet = true;
}

bool CatalogProductGroup::featuredPositionIsSet() const
{
    return m_Featured_positionIsSet;
}

void CatalogProductGroup::unsetFeatured_position()
{
    m_Featured_positionIsSet = false;
}
}
}
}
}


