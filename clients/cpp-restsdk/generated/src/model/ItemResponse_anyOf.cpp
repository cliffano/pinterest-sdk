/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ItemResponse_anyOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ItemResponse_anyOf::ItemResponse_anyOf()
{
    m_Catalog_typeIsSet = false;
    m_Item_id = utility::conversions::to_string_t("");
    m_Item_idIsSet = false;
    m_PinsIsSet = false;
    m_AttributesIsSet = false;
    m_Hotel_id = utility::conversions::to_string_t("");
    m_Hotel_idIsSet = false;
}

ItemResponse_anyOf::~ItemResponse_anyOf()
{
}

void ItemResponse_anyOf::validate()
{
    // TODO: implement validation
}

web::json::value ItemResponse_anyOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Catalog_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("catalog_type"))] = ModelBase::toJson(m_Catalog_type);
    }
    if(m_Item_idIsSet)
    {
        val[utility::conversions::to_string_t(U("item_id"))] = ModelBase::toJson(m_Item_id);
    }
    if(m_PinsIsSet)
    {
        val[utility::conversions::to_string_t(U("pins"))] = ModelBase::toJson(m_Pins);
    }
    if(m_AttributesIsSet)
    {
        val[utility::conversions::to_string_t(U("attributes"))] = ModelBase::toJson(m_Attributes);
    }
    if(m_Hotel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("hotel_id"))] = ModelBase::toJson(m_Hotel_id);
    }

    return val;
}

bool ItemResponse_anyOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("catalog_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catalog_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsType> refVal_setCatalogType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatalogType);
            setCatalogType(refVal_setCatalogType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemId);
            setItemId(refVal_setItemId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pins"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pins")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Pin>> refVal_setPins;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPins);
            setPins(refVal_setPins);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attributes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attributes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CatalogsHotelAttributes> refVal_setAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttributes);
            setAttributes(refVal_setAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hotel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hotel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHotelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHotelId);
            setHotelId(refVal_setHotelId);
        }
    }
    return ok;
}

void ItemResponse_anyOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Catalog_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catalog_type")), m_Catalog_type));
    }
    if(m_Item_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_id")), m_Item_id));
    }
    if(m_PinsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pins")), m_Pins));
    }
    if(m_AttributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attributes")), m_Attributes));
    }
    if(m_Hotel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hotel_id")), m_Hotel_id));
    }
}

bool ItemResponse_anyOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("catalog_type"))))
    {
        std::shared_ptr<CatalogsType> refVal_setCatalogType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catalog_type"))), refVal_setCatalogType );
        setCatalogType(refVal_setCatalogType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item_id"))))
    {
        utility::string_t refVal_setItemId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_id"))), refVal_setItemId );
        setItemId(refVal_setItemId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pins"))))
    {
        std::vector<std::shared_ptr<Pin>> refVal_setPins;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pins"))), refVal_setPins );
        setPins(refVal_setPins);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attributes"))))
    {
        std::shared_ptr<CatalogsHotelAttributes> refVal_setAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attributes"))), refVal_setAttributes );
        setAttributes(refVal_setAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hotel_id"))))
    {
        utility::string_t refVal_setHotelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hotel_id"))), refVal_setHotelId );
        setHotelId(refVal_setHotelId);
    }
    return ok;
}

std::shared_ptr<CatalogsType> ItemResponse_anyOf::getCatalogType() const
{
    return m_Catalog_type;
}

void ItemResponse_anyOf::setCatalogType(const std::shared_ptr<CatalogsType>& value)
{
    m_Catalog_type = value;
    m_Catalog_typeIsSet = true;
}

bool ItemResponse_anyOf::catalogTypeIsSet() const
{
    return m_Catalog_typeIsSet;
}

void ItemResponse_anyOf::unsetCatalog_type()
{
    m_Catalog_typeIsSet = false;
}
utility::string_t ItemResponse_anyOf::getItemId() const
{
    return m_Item_id;
}

void ItemResponse_anyOf::setItemId(const utility::string_t& value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}

bool ItemResponse_anyOf::itemIdIsSet() const
{
    return m_Item_idIsSet;
}

void ItemResponse_anyOf::unsetItem_id()
{
    m_Item_idIsSet = false;
}
std::vector<std::shared_ptr<Pin>>& ItemResponse_anyOf::getPins()
{
    return m_Pins;
}

void ItemResponse_anyOf::setPins(const std::vector<std::shared_ptr<Pin>>& value)
{
    m_Pins = value;
    m_PinsIsSet = true;
}

bool ItemResponse_anyOf::pinsIsSet() const
{
    return m_PinsIsSet;
}

void ItemResponse_anyOf::unsetPins()
{
    m_PinsIsSet = false;
}
std::shared_ptr<CatalogsHotelAttributes> ItemResponse_anyOf::getAttributes() const
{
    return m_Attributes;
}

void ItemResponse_anyOf::setAttributes(const std::shared_ptr<CatalogsHotelAttributes>& value)
{
    m_Attributes = value;
    m_AttributesIsSet = true;
}

bool ItemResponse_anyOf::attributesIsSet() const
{
    return m_AttributesIsSet;
}

void ItemResponse_anyOf::unsetAttributes()
{
    m_AttributesIsSet = false;
}
utility::string_t ItemResponse_anyOf::getHotelId() const
{
    return m_Hotel_id;
}

void ItemResponse_anyOf::setHotelId(const utility::string_t& value)
{
    m_Hotel_id = value;
    m_Hotel_idIsSet = true;
}

bool ItemResponse_anyOf::hotelIdIsSet() const
{
    return m_Hotel_idIsSet;
}

void ItemResponse_anyOf::unsetHotel_id()
{
    m_Hotel_idIsSet = false;
}
}
}
}
}


