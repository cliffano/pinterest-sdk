/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdCommon_quiz_pin_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdCommon_quiz_pin_data::AdCommon_quiz_pin_data()
{
    m_QuestionsIsSet = false;
    m_ResultsIsSet = false;
}

AdCommon_quiz_pin_data::~AdCommon_quiz_pin_data()
{
}

void AdCommon_quiz_pin_data::validate()
{
    // TODO: implement validation
}

web::json::value AdCommon_quiz_pin_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_QuestionsIsSet)
    {
        val[utility::conversions::to_string_t(U("questions"))] = ModelBase::toJson(m_Questions);
    }
    if(m_ResultsIsSet)
    {
        val[utility::conversions::to_string_t(U("results"))] = ModelBase::toJson(m_Results);
    }

    return val;
}

bool AdCommon_quiz_pin_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("questions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("questions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QuizPinQuestion>> refVal_setQuestions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestions);
            setQuestions(refVal_setQuestions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("results"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("results")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QuizPinResult>> refVal_setResults;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResults);
            setResults(refVal_setResults);
        }
    }
    return ok;
}

void AdCommon_quiz_pin_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_QuestionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("questions")), m_Questions));
    }
    if(m_ResultsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("results")), m_Results));
    }
}

bool AdCommon_quiz_pin_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("questions"))))
    {
        std::vector<std::shared_ptr<QuizPinQuestion>> refVal_setQuestions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("questions"))), refVal_setQuestions );
        setQuestions(refVal_setQuestions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("results"))))
    {
        std::vector<std::shared_ptr<QuizPinResult>> refVal_setResults;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("results"))), refVal_setResults );
        setResults(refVal_setResults);
    }
    return ok;
}

std::vector<std::shared_ptr<QuizPinQuestion>>& AdCommon_quiz_pin_data::getQuestions()
{
    return m_Questions;
}

void AdCommon_quiz_pin_data::setQuestions(const std::vector<std::shared_ptr<QuizPinQuestion>>& value)
{
    m_Questions = value;
    m_QuestionsIsSet = true;
}

bool AdCommon_quiz_pin_data::questionsIsSet() const
{
    return m_QuestionsIsSet;
}

void AdCommon_quiz_pin_data::unsetQuestions()
{
    m_QuestionsIsSet = false;
}
std::vector<std::shared_ptr<QuizPinResult>>& AdCommon_quiz_pin_data::getResults()
{
    return m_Results;
}

void AdCommon_quiz_pin_data::setResults(const std::vector<std::shared_ptr<QuizPinResult>>& value)
{
    m_Results = value;
    m_ResultsIsSet = true;
}

bool AdCommon_quiz_pin_data::resultsIsSet() const
{
    return m_ResultsIsSet;
}

void AdCommon_quiz_pin_data::unsetResults()
{
    m_ResultsIsSet = false;
}
}
}
}
}


