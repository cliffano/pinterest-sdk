/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OauthAccessTokenRequestRefresh_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OauthAccessTokenRequestRefresh_allOf::OauthAccessTokenRequestRefresh_allOf()
{
    m_Refresh_token = utility::conversions::to_string_t("");
    m_Refresh_tokenIsSet = false;
    m_Scope = utility::conversions::to_string_t("");
    m_ScopeIsSet = false;
}

OauthAccessTokenRequestRefresh_allOf::~OauthAccessTokenRequestRefresh_allOf()
{
}

void OauthAccessTokenRequestRefresh_allOf::validate()
{
    // TODO: implement validation
}

web::json::value OauthAccessTokenRequestRefresh_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Refresh_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("refresh_token"))] = ModelBase::toJson(m_Refresh_token);
    }
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }

    return val;
}

bool OauthAccessTokenRequestRefresh_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("refresh_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("refresh_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRefreshToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRefreshToken);
            setRefreshToken(refVal_setRefreshToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
        }
    }
    return ok;
}

void OauthAccessTokenRequestRefresh_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Refresh_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("refresh_token")), m_Refresh_token));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
}

bool OauthAccessTokenRequestRefresh_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("refresh_token"))))
    {
        utility::string_t refVal_setRefreshToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("refresh_token"))), refVal_setRefreshToken );
        setRefreshToken(refVal_setRefreshToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    return ok;
}

utility::string_t OauthAccessTokenRequestRefresh_allOf::getRefreshToken() const
{
    return m_Refresh_token;
}

void OauthAccessTokenRequestRefresh_allOf::setRefreshToken(const utility::string_t& value)
{
    m_Refresh_token = value;
    m_Refresh_tokenIsSet = true;
}

bool OauthAccessTokenRequestRefresh_allOf::refreshTokenIsSet() const
{
    return m_Refresh_tokenIsSet;
}

void OauthAccessTokenRequestRefresh_allOf::unsetRefresh_token()
{
    m_Refresh_tokenIsSet = false;
}
utility::string_t OauthAccessTokenRequestRefresh_allOf::getScope() const
{
    return m_Scope;
}

void OauthAccessTokenRequestRefresh_allOf::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool OauthAccessTokenRequestRefresh_allOf::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void OauthAccessTokenRequestRefresh_allOf::unsetScope()
{
    m_ScopeIsSet = false;
}
}
}
}
}


