/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionEventsUserData_anyOf_2.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionEventsUserData_anyOf_2::ConversionEventsUserData_anyOf_2()
{
    m_Client_ip_address = utility::conversions::to_string_t("");
    m_Client_ip_addressIsSet = false;
    m_Client_user_agent = utility::conversions::to_string_t("");
    m_Client_user_agentIsSet = false;
}

ConversionEventsUserData_anyOf_2::~ConversionEventsUserData_anyOf_2()
{
}

void ConversionEventsUserData_anyOf_2::validate()
{
    // TODO: implement validation
}

web::json::value ConversionEventsUserData_anyOf_2::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Client_ip_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("client_ip_address"))] = ModelBase::toJson(m_Client_ip_address);
    }
    if(m_Client_user_agentIsSet)
    {
        val[utility::conversions::to_string_t(U("client_user_agent"))] = ModelBase::toJson(m_Client_user_agent);
    }

    return val;
}

bool ConversionEventsUserData_anyOf_2::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("client_ip_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_ip_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientIpAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientIpAddress);
            setClientIpAddress(refVal_setClientIpAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_user_agent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_user_agent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientUserAgent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientUserAgent);
            setClientUserAgent(refVal_setClientUserAgent);
        }
    }
    return ok;
}

void ConversionEventsUserData_anyOf_2::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Client_ip_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_ip_address")), m_Client_ip_address));
    }
    if(m_Client_user_agentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_user_agent")), m_Client_user_agent));
    }
}

bool ConversionEventsUserData_anyOf_2::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("client_ip_address"))))
    {
        utility::string_t refVal_setClientIpAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_ip_address"))), refVal_setClientIpAddress );
        setClientIpAddress(refVal_setClientIpAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_user_agent"))))
    {
        utility::string_t refVal_setClientUserAgent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_user_agent"))), refVal_setClientUserAgent );
        setClientUserAgent(refVal_setClientUserAgent);
    }
    return ok;
}

utility::string_t ConversionEventsUserData_anyOf_2::getClientIpAddress() const
{
    return m_Client_ip_address;
}

void ConversionEventsUserData_anyOf_2::setClientIpAddress(const utility::string_t& value)
{
    m_Client_ip_address = value;
    m_Client_ip_addressIsSet = true;
}

bool ConversionEventsUserData_anyOf_2::clientIpAddressIsSet() const
{
    return m_Client_ip_addressIsSet;
}

void ConversionEventsUserData_anyOf_2::unsetClient_ip_address()
{
    m_Client_ip_addressIsSet = false;
}
utility::string_t ConversionEventsUserData_anyOf_2::getClientUserAgent() const
{
    return m_Client_user_agent;
}

void ConversionEventsUserData_anyOf_2::setClientUserAgent(const utility::string_t& value)
{
    m_Client_user_agent = value;
    m_Client_user_agentIsSet = true;
}

bool ConversionEventsUserData_anyOf_2::clientUserAgentIsSet() const
{
    return m_Client_user_agentIsSet;
}

void ConversionEventsUserData_anyOf_2::unsetClient_user_agent()
{
    m_Client_user_agentIsSet = false;
}
}
}
}
}


