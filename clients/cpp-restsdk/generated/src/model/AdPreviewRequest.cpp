/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdPreviewRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdPreviewRequest::AdPreviewRequest()
{
    m_Image_url = utility::conversions::to_string_t("");
    m_Image_urlIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Pin_id = utility::conversions::to_string_t("");
    m_Pin_idIsSet = false;
}

AdPreviewRequest::~AdPreviewRequest()
{
}

void AdPreviewRequest::validate()
{
    // TODO: implement validation
}

web::json::value AdPreviewRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Image_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("image_url"))] = ModelBase::toJson(m_Image_url);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t(U("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_Pin_idIsSet)
    {
        val[utility::conversions::to_string_t(U("pin_id"))] = ModelBase::toJson(m_Pin_id);
    }

    return val;
}

bool AdPreviewRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("image_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImageUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImageUrl);
            setImageUrl(refVal_setImageUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pin_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pin_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPinId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPinId);
            setPinId(refVal_setPinId);
        }
    }
    return ok;
}

void AdPreviewRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Image_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image_url")), m_Image_url));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("title")), m_Title));
    }
    if(m_Pin_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pin_id")), m_Pin_id));
    }
}

bool AdPreviewRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("image_url"))))
    {
        utility::string_t refVal_setImageUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image_url"))), refVal_setImageUrl );
        setImageUrl(refVal_setImageUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pin_id"))))
    {
        utility::string_t refVal_setPinId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pin_id"))), refVal_setPinId );
        setPinId(refVal_setPinId);
    }
    return ok;
}

utility::string_t AdPreviewRequest::getImageUrl() const
{
    return m_Image_url;
}

void AdPreviewRequest::setImageUrl(const utility::string_t& value)
{
    m_Image_url = value;
    m_Image_urlIsSet = true;
}

bool AdPreviewRequest::imageUrlIsSet() const
{
    return m_Image_urlIsSet;
}

void AdPreviewRequest::unsetImage_url()
{
    m_Image_urlIsSet = false;
}
utility::string_t AdPreviewRequest::getTitle() const
{
    return m_Title;
}

void AdPreviewRequest::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool AdPreviewRequest::titleIsSet() const
{
    return m_TitleIsSet;
}

void AdPreviewRequest::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t AdPreviewRequest::getPinId() const
{
    return m_Pin_id;
}

void AdPreviewRequest::setPinId(const utility::string_t& value)
{
    m_Pin_id = value;
    m_Pin_idIsSet = true;
}

bool AdPreviewRequest::pinIdIsSet() const
{
    return m_Pin_idIsSet;
}

void AdPreviewRequest::unsetPin_id()
{
    m_Pin_idIsSet = false;
}
}
}
}
}


