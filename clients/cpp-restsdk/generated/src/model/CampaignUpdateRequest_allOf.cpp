/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CampaignUpdateRequest_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CampaignUpdateRequest_allOf::CampaignUpdateRequest_allOf()
{
    m_Is_campaign_budget_optimization = false;
    m_Is_campaign_budget_optimizationIsSet = false;
    m_Is_flexible_daily_budgets = false;
    m_Is_flexible_daily_budgetsIsSet = false;
    m_Is_automated_campaign = false;
    m_Is_automated_campaignIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

CampaignUpdateRequest_allOf::~CampaignUpdateRequest_allOf()
{
}

void CampaignUpdateRequest_allOf::validate()
{
    // TODO: implement validation
}

web::json::value CampaignUpdateRequest_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Is_campaign_budget_optimizationIsSet)
    {
        val[utility::conversions::to_string_t(U("is_campaign_budget_optimization"))] = ModelBase::toJson(m_Is_campaign_budget_optimization);
    }
    if(m_Is_flexible_daily_budgetsIsSet)
    {
        val[utility::conversions::to_string_t(U("is_flexible_daily_budgets"))] = ModelBase::toJson(m_Is_flexible_daily_budgets);
    }
    if(m_Is_automated_campaignIsSet)
    {
        val[utility::conversions::to_string_t(U("is_automated_campaign"))] = ModelBase::toJson(m_Is_automated_campaign);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool CampaignUpdateRequest_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("is_campaign_budget_optimization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_campaign_budget_optimization")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsCampaignBudgetOptimization;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsCampaignBudgetOptimization);
            setIsCampaignBudgetOptimization(refVal_setIsCampaignBudgetOptimization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_flexible_daily_budgets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_flexible_daily_budgets")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsFlexibleDailyBudgets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsFlexibleDailyBudgets);
            setIsFlexibleDailyBudgets(refVal_setIsFlexibleDailyBudgets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_automated_campaign"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_automated_campaign")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAutomatedCampaign;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAutomatedCampaign);
            setIsAutomatedCampaign(refVal_setIsAutomatedCampaign);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            EntityStatus refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void CampaignUpdateRequest_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Is_campaign_budget_optimizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_campaign_budget_optimization")), m_Is_campaign_budget_optimization));
    }
    if(m_Is_flexible_daily_budgetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_flexible_daily_budgets")), m_Is_flexible_daily_budgets));
    }
    if(m_Is_automated_campaignIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_automated_campaign")), m_Is_automated_campaign));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool CampaignUpdateRequest_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("is_campaign_budget_optimization"))))
    {
        bool refVal_setIsCampaignBudgetOptimization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_campaign_budget_optimization"))), refVal_setIsCampaignBudgetOptimization );
        setIsCampaignBudgetOptimization(refVal_setIsCampaignBudgetOptimization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_flexible_daily_budgets"))))
    {
        bool refVal_setIsFlexibleDailyBudgets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_flexible_daily_budgets"))), refVal_setIsFlexibleDailyBudgets );
        setIsFlexibleDailyBudgets(refVal_setIsFlexibleDailyBudgets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_automated_campaign"))))
    {
        bool refVal_setIsAutomatedCampaign;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_automated_campaign"))), refVal_setIsAutomatedCampaign );
        setIsAutomatedCampaign(refVal_setIsAutomatedCampaign);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        EntityStatus refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

bool CampaignUpdateRequest_allOf::isIsCampaignBudgetOptimization() const
{
    return m_Is_campaign_budget_optimization;
}

void CampaignUpdateRequest_allOf::setIsCampaignBudgetOptimization(bool value)
{
    m_Is_campaign_budget_optimization = value;
    m_Is_campaign_budget_optimizationIsSet = true;
}

bool CampaignUpdateRequest_allOf::isCampaignBudgetOptimizationIsSet() const
{
    return m_Is_campaign_budget_optimizationIsSet;
}

void CampaignUpdateRequest_allOf::unsetIs_campaign_budget_optimization()
{
    m_Is_campaign_budget_optimizationIsSet = false;
}
bool CampaignUpdateRequest_allOf::isIsFlexibleDailyBudgets() const
{
    return m_Is_flexible_daily_budgets;
}

void CampaignUpdateRequest_allOf::setIsFlexibleDailyBudgets(bool value)
{
    m_Is_flexible_daily_budgets = value;
    m_Is_flexible_daily_budgetsIsSet = true;
}

bool CampaignUpdateRequest_allOf::isFlexibleDailyBudgetsIsSet() const
{
    return m_Is_flexible_daily_budgetsIsSet;
}

void CampaignUpdateRequest_allOf::unsetIs_flexible_daily_budgets()
{
    m_Is_flexible_daily_budgetsIsSet = false;
}
bool CampaignUpdateRequest_allOf::isIsAutomatedCampaign() const
{
    return m_Is_automated_campaign;
}

void CampaignUpdateRequest_allOf::setIsAutomatedCampaign(bool value)
{
    m_Is_automated_campaign = value;
    m_Is_automated_campaignIsSet = true;
}

bool CampaignUpdateRequest_allOf::isAutomatedCampaignIsSet() const
{
    return m_Is_automated_campaignIsSet;
}

void CampaignUpdateRequest_allOf::unsetIs_automated_campaign()
{
    m_Is_automated_campaignIsSet = false;
}
EntityStatus CampaignUpdateRequest_allOf::getStatus() const
{
    return m_Status;
}

void CampaignUpdateRequest_allOf::setStatus(const EntityStatus& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool CampaignUpdateRequest_allOf::statusIsSet() const
{
    return m_StatusIsSet;
}

void CampaignUpdateRequest_allOf::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


