/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CatalogsFeedIngestionErrors.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CatalogsFeedIngestionErrors::CatalogsFeedIngestionErrors()
{
    m_IMAGE_DOWNLOAD_ERROR = 0;
    m_IMAGE_DOWNLOAD_ERRORIsSet = false;
    m_LINE_LEVEL_INTERNAL_ERROR = 0;
    m_LINE_LEVEL_INTERNAL_ERRORIsSet = false;
    m_LARGE_PRODUCT_COUNT_DECREASE = 0;
    m_LARGE_PRODUCT_COUNT_DECREASEIsSet = false;
    m_ACCOUNT_FLAGGED = 0;
    m_ACCOUNT_FLAGGEDIsSet = false;
}

CatalogsFeedIngestionErrors::~CatalogsFeedIngestionErrors()
{
}

void CatalogsFeedIngestionErrors::validate()
{
    // TODO: implement validation
}

web::json::value CatalogsFeedIngestionErrors::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IMAGE_DOWNLOAD_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("IMAGE_DOWNLOAD_ERROR"))] = ModelBase::toJson(m_IMAGE_DOWNLOAD_ERROR);
    }
    if(m_LINE_LEVEL_INTERNAL_ERRORIsSet)
    {
        val[utility::conversions::to_string_t(U("LINE_LEVEL_INTERNAL_ERROR"))] = ModelBase::toJson(m_LINE_LEVEL_INTERNAL_ERROR);
    }
    if(m_LARGE_PRODUCT_COUNT_DECREASEIsSet)
    {
        val[utility::conversions::to_string_t(U("LARGE_PRODUCT_COUNT_DECREASE"))] = ModelBase::toJson(m_LARGE_PRODUCT_COUNT_DECREASE);
    }
    if(m_ACCOUNT_FLAGGEDIsSet)
    {
        val[utility::conversions::to_string_t(U("ACCOUNT_FLAGGED"))] = ModelBase::toJson(m_ACCOUNT_FLAGGED);
    }

    return val;
}

bool CatalogsFeedIngestionErrors::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("IMAGE_DOWNLOAD_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("IMAGE_DOWNLOAD_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIMAGEDOWNLOADERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIMAGEDOWNLOADERROR);
            setIMAGEDOWNLOADERROR(refVal_setIMAGEDOWNLOADERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LINE_LEVEL_INTERNAL_ERROR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LINE_LEVEL_INTERNAL_ERROR")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLINELEVELINTERNALERROR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLINELEVELINTERNALERROR);
            setLINELEVELINTERNALERROR(refVal_setLINELEVELINTERNALERROR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("LARGE_PRODUCT_COUNT_DECREASE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LARGE_PRODUCT_COUNT_DECREASE")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLARGEPRODUCTCOUNTDECREASE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLARGEPRODUCTCOUNTDECREASE);
            setLARGEPRODUCTCOUNTDECREASE(refVal_setLARGEPRODUCTCOUNTDECREASE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ACCOUNT_FLAGGED"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ACCOUNT_FLAGGED")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setACCOUNTFLAGGED;
            ok &= ModelBase::fromJson(fieldValue, refVal_setACCOUNTFLAGGED);
            setACCOUNTFLAGGED(refVal_setACCOUNTFLAGGED);
        }
    }
    return ok;
}

void CatalogsFeedIngestionErrors::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IMAGE_DOWNLOAD_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("IMAGE_DOWNLOAD_ERROR")), m_IMAGE_DOWNLOAD_ERROR));
    }
    if(m_LINE_LEVEL_INTERNAL_ERRORIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LINE_LEVEL_INTERNAL_ERROR")), m_LINE_LEVEL_INTERNAL_ERROR));
    }
    if(m_LARGE_PRODUCT_COUNT_DECREASEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LARGE_PRODUCT_COUNT_DECREASE")), m_LARGE_PRODUCT_COUNT_DECREASE));
    }
    if(m_ACCOUNT_FLAGGEDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ACCOUNT_FLAGGED")), m_ACCOUNT_FLAGGED));
    }
}

bool CatalogsFeedIngestionErrors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("IMAGE_DOWNLOAD_ERROR"))))
    {
        int32_t refVal_setIMAGEDOWNLOADERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("IMAGE_DOWNLOAD_ERROR"))), refVal_setIMAGEDOWNLOADERROR );
        setIMAGEDOWNLOADERROR(refVal_setIMAGEDOWNLOADERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LINE_LEVEL_INTERNAL_ERROR"))))
    {
        int32_t refVal_setLINELEVELINTERNALERROR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LINE_LEVEL_INTERNAL_ERROR"))), refVal_setLINELEVELINTERNALERROR );
        setLINELEVELINTERNALERROR(refVal_setLINELEVELINTERNALERROR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("LARGE_PRODUCT_COUNT_DECREASE"))))
    {
        int32_t refVal_setLARGEPRODUCTCOUNTDECREASE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LARGE_PRODUCT_COUNT_DECREASE"))), refVal_setLARGEPRODUCTCOUNTDECREASE );
        setLARGEPRODUCTCOUNTDECREASE(refVal_setLARGEPRODUCTCOUNTDECREASE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ACCOUNT_FLAGGED"))))
    {
        int32_t refVal_setACCOUNTFLAGGED;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ACCOUNT_FLAGGED"))), refVal_setACCOUNTFLAGGED );
        setACCOUNTFLAGGED(refVal_setACCOUNTFLAGGED);
    }
    return ok;
}

int32_t CatalogsFeedIngestionErrors::getIMAGEDOWNLOADERROR() const
{
    return m_IMAGE_DOWNLOAD_ERROR;
}

void CatalogsFeedIngestionErrors::setIMAGEDOWNLOADERROR(int32_t value)
{
    m_IMAGE_DOWNLOAD_ERROR = value;
    m_IMAGE_DOWNLOAD_ERRORIsSet = true;
}

bool CatalogsFeedIngestionErrors::iMAGEDOWNLOADERRORIsSet() const
{
    return m_IMAGE_DOWNLOAD_ERRORIsSet;
}

void CatalogsFeedIngestionErrors::unsetIMAGE_DOWNLOAD_ERROR()
{
    m_IMAGE_DOWNLOAD_ERRORIsSet = false;
}
int32_t CatalogsFeedIngestionErrors::getLINELEVELINTERNALERROR() const
{
    return m_LINE_LEVEL_INTERNAL_ERROR;
}

void CatalogsFeedIngestionErrors::setLINELEVELINTERNALERROR(int32_t value)
{
    m_LINE_LEVEL_INTERNAL_ERROR = value;
    m_LINE_LEVEL_INTERNAL_ERRORIsSet = true;
}

bool CatalogsFeedIngestionErrors::lINELEVELINTERNALERRORIsSet() const
{
    return m_LINE_LEVEL_INTERNAL_ERRORIsSet;
}

void CatalogsFeedIngestionErrors::unsetLINE_LEVEL_INTERNAL_ERROR()
{
    m_LINE_LEVEL_INTERNAL_ERRORIsSet = false;
}
int32_t CatalogsFeedIngestionErrors::getLARGEPRODUCTCOUNTDECREASE() const
{
    return m_LARGE_PRODUCT_COUNT_DECREASE;
}

void CatalogsFeedIngestionErrors::setLARGEPRODUCTCOUNTDECREASE(int32_t value)
{
    m_LARGE_PRODUCT_COUNT_DECREASE = value;
    m_LARGE_PRODUCT_COUNT_DECREASEIsSet = true;
}

bool CatalogsFeedIngestionErrors::lARGEPRODUCTCOUNTDECREASEIsSet() const
{
    return m_LARGE_PRODUCT_COUNT_DECREASEIsSet;
}

void CatalogsFeedIngestionErrors::unsetLARGE_PRODUCT_COUNT_DECREASE()
{
    m_LARGE_PRODUCT_COUNT_DECREASEIsSet = false;
}
int32_t CatalogsFeedIngestionErrors::getACCOUNTFLAGGED() const
{
    return m_ACCOUNT_FLAGGED;
}

void CatalogsFeedIngestionErrors::setACCOUNTFLAGGED(int32_t value)
{
    m_ACCOUNT_FLAGGED = value;
    m_ACCOUNT_FLAGGEDIsSet = true;
}

bool CatalogsFeedIngestionErrors::aCCOUNTFLAGGEDIsSet() const
{
    return m_ACCOUNT_FLAGGEDIsSet;
}

void CatalogsFeedIngestionErrors::unsetACCOUNT_FLAGGED()
{
    m_ACCOUNT_FLAGGEDIsSet = false;
}
}
}
}
}


