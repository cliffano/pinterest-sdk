/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdGroupResponse_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdGroupResponse_allOf::AdGroupResponse_allOf()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Ad_account_id = utility::conversions::to_string_t("");
    m_Ad_account_idIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Conversion_learning_mode_type = utility::conversions::to_string_t("");
    m_Conversion_learning_mode_typeIsSet = false;
    m_Summary_status = utility::conversions::to_string_t("");
    m_Summary_statusIsSet = false;
    m_Feed_profile_id = utility::conversions::to_string_t("");
    m_Feed_profile_idIsSet = false;
    m_Dca_assetsIsSet = false;
}

AdGroupResponse_allOf::~AdGroupResponse_allOf()
{
}

void AdGroupResponse_allOf::validate()
{
    // TODO: implement validation
}

web::json::value AdGroupResponse_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Ad_account_idIsSet)
    {
        val[utility::conversions::to_string_t(U("ad_account_id"))] = ModelBase::toJson(m_Ad_account_id);
    }
    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("created_time"))] = ModelBase::toJson(m_Created_time);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_time"))] = ModelBase::toJson(m_Updated_time);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Conversion_learning_mode_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("conversion_learning_mode_type"))] = ModelBase::toJson(m_Conversion_learning_mode_type);
    }
    if(m_Summary_statusIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_status"))] = ModelBase::toJson(m_Summary_status);
    }
    if(m_Feed_profile_idIsSet)
    {
        val[utility::conversions::to_string_t(U("feed_profile_id"))] = ModelBase::toJson(m_Feed_profile_id);
    }
    if(m_Dca_assetsIsSet)
    {
        val[utility::conversions::to_string_t(U("dca_assets"))] = ModelBase::toJson(m_Dca_assets);
    }

    return val;
}

bool AdGroupResponse_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ad_account_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdAccountId);
            setAdAccountId(refVal_setAdAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpdatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedTime);
            setUpdatedTime(refVal_setUpdatedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conversion_learning_mode_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conversion_learning_mode_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConversionLearningModeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConversionLearningModeType);
            setConversionLearningModeType(refVal_setConversionLearningModeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_status")));
        if(!fieldValue.is_null())
        {
            AdGroupSummaryStatus refVal_setSummaryStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSummaryStatus);
            setSummaryStatus(refVal_setSummaryStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feed_profile_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeedProfileId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedProfileId);
            setFeedProfileId(refVal_setFeedProfileId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dca_assets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dca_assets")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_setDcaAssets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDcaAssets);
            setDcaAssets(refVal_setDcaAssets);
        }
    }
    return ok;
}

void AdGroupResponse_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Ad_account_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ad_account_id")), m_Ad_account_id));
    }
    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_time")), m_Created_time));
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_time")), m_Updated_time));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Conversion_learning_mode_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conversion_learning_mode_type")), m_Conversion_learning_mode_type));
    }
    if(m_Summary_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_status")), m_Summary_status));
    }
    if(m_Feed_profile_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feed_profile_id")), m_Feed_profile_id));
    }
    if(m_Dca_assetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dca_assets")), m_Dca_assets));
    }
}

bool AdGroupResponse_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ad_account_id"))))
    {
        utility::string_t refVal_setAdAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ad_account_id"))), refVal_setAdAccountId );
        setAdAccountId(refVal_setAdAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_time"))))
    {
        int32_t refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_time"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_time"))))
    {
        int32_t refVal_setUpdatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_time"))), refVal_setUpdatedTime );
        setUpdatedTime(refVal_setUpdatedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conversion_learning_mode_type"))))
    {
        utility::string_t refVal_setConversionLearningModeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conversion_learning_mode_type"))), refVal_setConversionLearningModeType );
        setConversionLearningModeType(refVal_setConversionLearningModeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_status"))))
    {
        AdGroupSummaryStatus refVal_setSummaryStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_status"))), refVal_setSummaryStatus );
        setSummaryStatus(refVal_setSummaryStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feed_profile_id"))))
    {
        utility::string_t refVal_setFeedProfileId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feed_profile_id"))), refVal_setFeedProfileId );
        setFeedProfileId(refVal_setFeedProfileId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dca_assets"))))
    {
        std::shared_ptr<AnyType> refVal_setDcaAssets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dca_assets"))), refVal_setDcaAssets );
        setDcaAssets(refVal_setDcaAssets);
    }
    return ok;
}

utility::string_t AdGroupResponse_allOf::getId() const
{
    return m_Id;
}

void AdGroupResponse_allOf::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AdGroupResponse_allOf::idIsSet() const
{
    return m_IdIsSet;
}

void AdGroupResponse_allOf::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdGroupResponse_allOf::setAdAccountId(const utility::string_t& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}

bool AdGroupResponse_allOf::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}

void AdGroupResponse_allOf::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
int32_t AdGroupResponse_allOf::getCreatedTime() const
{
    return m_Created_time;
}

void AdGroupResponse_allOf::setCreatedTime(int32_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}

bool AdGroupResponse_allOf::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void AdGroupResponse_allOf::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t AdGroupResponse_allOf::getUpdatedTime() const
{
    return m_Updated_time;
}

void AdGroupResponse_allOf::setUpdatedTime(int32_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}

bool AdGroupResponse_allOf::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void AdGroupResponse_allOf::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getType() const
{
    return m_Type;
}

void AdGroupResponse_allOf::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool AdGroupResponse_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}

void AdGroupResponse_allOf::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getConversionLearningModeType() const
{
    return m_Conversion_learning_mode_type;
}

void AdGroupResponse_allOf::setConversionLearningModeType(const utility::string_t& value)
{
    m_Conversion_learning_mode_type = value;
    m_Conversion_learning_mode_typeIsSet = true;
}

bool AdGroupResponse_allOf::conversionLearningModeTypeIsSet() const
{
    return m_Conversion_learning_mode_typeIsSet;
}

void AdGroupResponse_allOf::unsetConversion_learning_mode_type()
{
    m_Conversion_learning_mode_typeIsSet = false;
}
AdGroupSummaryStatus AdGroupResponse_allOf::getSummaryStatus() const
{
    return m_Summary_status;
}

void AdGroupResponse_allOf::setSummaryStatus(const AdGroupSummaryStatus& value)
{
    m_Summary_status = value;
    m_Summary_statusIsSet = true;
}

bool AdGroupResponse_allOf::summaryStatusIsSet() const
{
    return m_Summary_statusIsSet;
}

void AdGroupResponse_allOf::unsetSummary_status()
{
    m_Summary_statusIsSet = false;
}
utility::string_t AdGroupResponse_allOf::getFeedProfileId() const
{
    return m_Feed_profile_id;
}

void AdGroupResponse_allOf::setFeedProfileId(const utility::string_t& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}

bool AdGroupResponse_allOf::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}

void AdGroupResponse_allOf::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
std::shared_ptr<AnyType> AdGroupResponse_allOf::getDcaAssets() const
{
    return m_Dca_assets;
}

void AdGroupResponse_allOf::setDcaAssets(const std::shared_ptr<AnyType>& value)
{
    m_Dca_assets = value;
    m_Dca_assetsIsSet = true;
}

bool AdGroupResponse_allOf::dcaAssetsIsSet() const
{
    return m_Dca_assetsIsSet;
}

void AdGroupResponse_allOf::unsetDca_assets()
{
    m_Dca_assetsIsSet = false;
}
}
}
}
}


