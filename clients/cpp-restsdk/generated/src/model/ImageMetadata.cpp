/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImageMetadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ImageMetadata::ImageMetadata()
{
    m_Item_type = utility::conversions::to_string_t("");
    m_Item_typeIsSet = false;
    m_ImagesIsSet = false;
}

ImageMetadata::~ImageMetadata()
{
}

void ImageMetadata::validate()
{
    // TODO: implement validation
}

web::json::value ImageMetadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Item_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("item_type"))] = ModelBase::toJson(m_Item_type);
    }
    if(m_ImagesIsSet)
    {
        val[utility::conversions::to_string_t(U("images"))] = ModelBase::toJson(m_Images);
    }

    return val;
}

bool ImageMetadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("item_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemType);
            setItemType(refVal_setItemType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("images"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("images")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<ImageDetails>> refVal_setImages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImages);
            setImages(refVal_setImages);
        }
    }
    return ok;
}

void ImageMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Item_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_type")), m_Item_type));
    }
    if(m_ImagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("images")), m_Images));
    }
}

bool ImageMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("item_type"))))
    {
        utility::string_t refVal_setItemType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_type"))), refVal_setItemType );
        setItemType(refVal_setItemType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("images"))))
    {
        std::map<utility::string_t, std::shared_ptr<ImageDetails>> refVal_setImages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("images"))), refVal_setImages );
        setImages(refVal_setImages);
    }
    return ok;
}

utility::string_t ImageMetadata::getItemType() const
{
    return m_Item_type;
}

void ImageMetadata::setItemType(const utility::string_t& value)
{
    m_Item_type = value;
    m_Item_typeIsSet = true;
}

bool ImageMetadata::itemTypeIsSet() const
{
    return m_Item_typeIsSet;
}

void ImageMetadata::unsetItem_type()
{
    m_Item_typeIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<ImageDetails>>& ImageMetadata::getImages()
{
    return m_Images;
}

void ImageMetadata::setImages(const std::map<utility::string_t, std::shared_ptr<ImageDetails>>& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}

bool ImageMetadata::imagesIsSet() const
{
    return m_ImagesIsSet;
}

void ImageMetadata::unsetImages()
{
    m_ImagesIsSet = false;
}
}
}
}
}


