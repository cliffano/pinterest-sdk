/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConversionEventsUserData_anyOf_1.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ConversionEventsUserData_anyOf_1::ConversionEventsUserData_anyOf_1()
{
    m_Hashed_maidsIsSet = false;
}

ConversionEventsUserData_anyOf_1::~ConversionEventsUserData_anyOf_1()
{
}

void ConversionEventsUserData_anyOf_1::validate()
{
    // TODO: implement validation
}

web::json::value ConversionEventsUserData_anyOf_1::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Hashed_maidsIsSet)
    {
        val[utility::conversions::to_string_t(U("hashed_maids"))] = ModelBase::toJson(m_Hashed_maids);
    }

    return val;
}

bool ConversionEventsUserData_anyOf_1::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hashed_maids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hashed_maids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setHashedMaids;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHashedMaids);
            setHashedMaids(refVal_setHashedMaids);
        }
    }
    return ok;
}

void ConversionEventsUserData_anyOf_1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Hashed_maidsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hashed_maids")), m_Hashed_maids));
    }
}

bool ConversionEventsUserData_anyOf_1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hashed_maids"))))
    {
        std::vector<utility::string_t> refVal_setHashedMaids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hashed_maids"))), refVal_setHashedMaids );
        setHashedMaids(refVal_setHashedMaids);
    }
    return ok;
}

std::vector<utility::string_t>& ConversionEventsUserData_anyOf_1::getHashedMaids()
{
    return m_Hashed_maids;
}

void ConversionEventsUserData_anyOf_1::setHashedMaids(const std::vector<utility::string_t>& value)
{
    m_Hashed_maids = value;
    m_Hashed_maidsIsSet = true;
}

bool ConversionEventsUserData_anyOf_1::hashedMaidsIsSet() const
{
    return m_Hashed_maidsIsSet;
}

void ConversionEventsUserData_anyOf_1::unsetHashed_maids()
{
    m_Hashed_maidsIsSet = false;
}
}
}
}
}


