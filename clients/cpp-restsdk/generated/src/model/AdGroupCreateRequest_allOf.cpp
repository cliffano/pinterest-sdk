/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdGroupCreateRequest_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AdGroupCreateRequest_allOf::AdGroupCreateRequest_allOf()
{
    m_Targeting_specIsSet = false;
}

AdGroupCreateRequest_allOf::~AdGroupCreateRequest_allOf()
{
}

void AdGroupCreateRequest_allOf::validate()
{
    // TODO: implement validation
}

web::json::value AdGroupCreateRequest_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Targeting_specIsSet)
    {
        val[utility::conversions::to_string_t(U("targeting_spec"))] = ModelBase::toJson(m_Targeting_spec);
    }

    return val;
}

bool AdGroupCreateRequest_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("targeting_spec")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TargetingSpec> refVal_setTargetingSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetingSpec);
            setTargetingSpec(refVal_setTargetingSpec);
        }
    }
    return ok;
}

void AdGroupCreateRequest_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Targeting_specIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("targeting_spec")), m_Targeting_spec));
    }
}

bool AdGroupCreateRequest_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("targeting_spec"))))
    {
        std::shared_ptr<TargetingSpec> refVal_setTargetingSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("targeting_spec"))), refVal_setTargetingSpec );
        setTargetingSpec(refVal_setTargetingSpec);
    }
    return ok;
}

std::shared_ptr<TargetingSpec> AdGroupCreateRequest_allOf::getTargetingSpec() const
{
    return m_Targeting_spec;
}

void AdGroupCreateRequest_allOf::setTargetingSpec(const std::shared_ptr<TargetingSpec>& value)
{
    m_Targeting_spec = value;
    m_Targeting_specIsSet = true;
}

bool AdGroupCreateRequest_allOf::targetingSpecIsSet() const
{
    return m_Targeting_specIsSet;
}

void AdGroupCreateRequest_allOf::unsetTargeting_spec()
{
    m_Targeting_specIsSet = false;
}
}
}
}
}


