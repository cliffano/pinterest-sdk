/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CatalogsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CatalogsApi_H_



#include "ApiClient.h"

#include "model/CatalogsFeed.h"
#include "model/CatalogsFeedsCreateRequest.h"
#include "model/CatalogsFeedsUpdateRequest.h"
#include "model/CatalogsItems.h"
#include "model/CatalogsItemsBatch.h"
#include "model/CatalogsItemsBatchRequest.h"
#include "model/CatalogsProductGroup.h"
#include "model/CatalogsProductGroupCreateRequest.h"
#include "model/CatalogsProductGroupUpdateRequest.h"
#include "model/Error.h"
#include "Object.h"
#include "model/Paginated.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CatalogsApi 
{
public:

    explicit CatalogsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CatalogsApi();

    /// <summary>
    /// Create product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
    /// </remarks>
    /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
    pplx::task<std::shared_ptr<Object>> catalogsProductGroups_create(
        std::shared_ptr<CatalogsProductGroupCreateRequest> catalogsProductGroupCreateRequest
    ) const;
    /// <summary>
    /// Delete product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    pplx::task<void> catalogsProductGroups_delete(
        utility::string_t productGroupId
    ) const;
    /// <summary>
    /// Get product groups list
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Paginated>> catalogsProductGroups_list(
        utility::string_t feedId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Update product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
    pplx::task<std::shared_ptr<CatalogsProductGroup>> catalogsProductGroups_update(
        utility::string_t productGroupId,
        std::shared_ptr<CatalogsProductGroupUpdateRequest> catalogsProductGroupUpdateRequest
    ) const;
    /// <summary>
    /// List processing results for a given feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Paginated>> feedProcessingResults_list(
        utility::string_t feedId,
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Create feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
    pplx::task<std::shared_ptr<CatalogsFeed>> feeds_create(
        std::shared_ptr<CatalogsFeedsCreateRequest> catalogsFeedsCreateRequest
    ) const;
    /// <summary>
    /// Delete feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    pplx::task<void> feeds_delete(
        utility::string_t feedId
    ) const;
    /// <summary>
    /// Get feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    pplx::task<std::shared_ptr<CatalogsFeed>> feeds_get(
        utility::string_t feedId
    ) const;
    /// <summary>
    /// List feeds
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Paginated>> feeds_list(
        boost::optional<utility::string_t> bookmark,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Update feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
    pplx::task<std::shared_ptr<CatalogsFeed>> feeds_update(
        utility::string_t feedId,
        std::shared_ptr<CatalogsFeedsUpdateRequest> catalogsFeedsUpdateRequest
    ) const;
    /// <summary>
    /// Get catalogs items batch
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="batchId">Id of a catalogs items batch to fetch</param>
    pplx::task<std::shared_ptr<CatalogsItemsBatch>> itemsBatch_get(
        utility::string_t batchId
    ) const;
    /// <summary>
    /// Perform an operation on an item batch
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
    /// </remarks>
    /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
    pplx::task<std::shared_ptr<CatalogsItemsBatch>> itemsBatch_post(
        std::shared_ptr<CatalogsItemsBatchRequest> catalogsItemsBatchRequest
    ) const;
    /// <summary>
    /// Get catalogs items
    /// </summary>
    /// <remarks>
    /// Get the items of the catalog created by the \&quot;operating user_account\&quot;
    /// </remarks>
    /// <param name="country">Country for the Catalogs Items</param>
    /// <param name="itemIds">Catalos Item ids</param>
    /// <param name="language">Language for the Catalogs Items</param>
    pplx::task<std::shared_ptr<CatalogsItems>> items_get(
        utility::string_t country,
        std::vector<utility::string_t> itemIds,
        utility::string_t language
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CatalogsApi_H_ */

