/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* CatalogsApiImpl.h
*
* 
*/

#ifndef CATALOGS_API_IMPL_H_
#define CATALOGS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <CatalogsApi.h>


#include "CatalogsFeed.h"
#include "CatalogsFeedsCreateRequest.h"
#include "CatalogsFeedsUpdateRequest.h"
#include "CatalogsItemValidationIssue.h"
#include "CatalogsItems.h"
#include "CatalogsItemsBatch.h"
#include "CatalogsItemsBatchRequest.h"
#include "CatalogsListProductsByFilterRequest.h"
#include "CatalogsProductGroup.h"
#include "CatalogsProductGroupCreateRequest.h"
#include "CatalogsProductGroupProductCounts.h"
#include "CatalogsProductGroupUpdateRequest.h"
#include "Catalogs_product_groups_list_200_response.h"
#include "Error.h"
#include "Feed_processing_results_list_200_response.h"
#include "Feeds_list_200_response.h"
#include "Items_issues_list_200_response.h"
#include "Products_by_product_group_filter_list_200_response.h"
#include <string>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class CatalogsApiImpl : public org::openapitools::server::api::CatalogsApi {
public:
    explicit CatalogsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~CatalogsApiImpl() override = default;

    void catalogs_product_group_pins_list(const std::string &productGroupId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_create(const CatalogsProductGroupCreateRequest &catalogsProductGroupCreateRequest, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_delete(const std::string &productGroupId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_get(const std::string &productGroupId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_list(const std::optional<std::string> &feedId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_product_counts_get(const std::string &productGroupId, Pistache::Http::ResponseWriter &response);
    void catalogs_product_groups_update(const std::string &productGroupId, const CatalogsProductGroupUpdateRequest &catalogsProductGroupUpdateRequest, Pistache::Http::ResponseWriter &response);
    void feed_processing_results_list(const std::string &feedId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response);
    void feeds_create(const CatalogsFeedsCreateRequest &catalogsFeedsCreateRequest, Pistache::Http::ResponseWriter &response);
    void feeds_delete(const std::string &feedId, Pistache::Http::ResponseWriter &response);
    void feeds_get(const std::string &feedId, Pistache::Http::ResponseWriter &response);
    void feeds_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response);
    void feeds_update(const std::string &feedId, const CatalogsFeedsUpdateRequest &catalogsFeedsUpdateRequest, Pistache::Http::ResponseWriter &response);
    void items_batch_get(const std::string &batchId, Pistache::Http::ResponseWriter &response);
    void items_batch_post(const CatalogsItemsBatchRequest &catalogsItemsBatchRequest, Pistache::Http::ResponseWriter &response);
    void items_issues_list(const std::string &processingResultId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::vector<int32_t>> &itemNumbers, const std::optional<CatalogsItemValidationIssue> &itemValidationIssue, Pistache::Http::ResponseWriter &response);
    void items_get(const std::optional<std::string> &country, const std::optional<std::vector<std::string>> &itemIds, const std::optional<std::string> &language, Pistache::Http::ResponseWriter &response);
    void products_by_product_group_filter_list(const CatalogsListProductsByFilterRequest &catalogsListProductsByFilterRequest, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
