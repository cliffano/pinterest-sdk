/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdGroupsApi.h
 *
 * 
 */

#ifndef AdGroupsApi_H_
#define AdGroupsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "AdGroupArrayResponse.h"
#include "AdGroupCreateRequest.h"
#include "AdGroupResponse.h"
#include "AdGroupUpdateRequest.h"
#include "Ad_groups_list_200_response.h"
#include "BidFloor.h"
#include "BidFloorRequest.h"
#include "Error.h"
#include <string>
#include <vector>

namespace org::openapitools::server::api
{

class  AdGroupsApi {
public:
    explicit AdGroupsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~AdGroupsApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void ad_groups_bid_floor_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_groups_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_groups_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_groups_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_groups_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ad_groups_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Get bid floors
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. &lt;p/&gt; Microcurrency is used to track very small transactions, based on the currency field set in the advertiser&#39;s profile. A microcurrency unit is one one-millionth of the standard unit of currency selected in the advertiser&#39;s profile (e.g. a microdollar is $0.000001.) &lt;p/&gt; For more on bid floors see &lt;a class&#x3D;\&quot;reference external\&quot; href&#x3D;\&quot;https://help.pinterest.com/en/business/article/set-your-bid\&quot;&gt; Set your bid&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="bidFloorRequest">Parameters to get bid_floor info</param>
    virtual void ad_groups_bid_floor_get(const std::string &adAccountId, const org::openapitools::server::model::BidFloorRequest &bidFloorRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create ad groups
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/campaign-structure\&quot; target&#x3D;\&quot;_blank\&quot;&gt; click here&lt;/a&gt;.&lt;/p&gt; &lt;strong&gt;Note:&lt;/strong&gt; - &#39;bid_in_micro_currency&#39; and &#39;budget_in_micro_currency&#39; should be expressed in microcurrency amounts based on the currency field set in the advertiser&#39;s profile. Microcurrency is used to track very small transactions, based on the currency field set in the advertiser&#39;s profile. A microcurrency unit is one one-millionth of the standard unit of currency selected in the advertiser&#39;s profile (e.g. a microdollar is $0.000001.) - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adGroupCreateRequest">List of ad groups to create, size limit [1, 30].</param>
    virtual void ad_groups_create(const std::string &adAccountId, const std::vector<org::openapitools::server::model::AdGroupCreateRequest> &adGroupCreateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get ad group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the &lt;a href&#x3D;\&quot;https://www.pinterest.com/_/_/policy/advertising-guidelines/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Pinterest advertising standards&lt;/a&gt;.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adGroupId">Unique identifier of an ad group.</param>
    virtual void ad_groups_get(const std::string &adAccountId, const std::string &adGroupId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List ad groups
    /// </summary>
    /// <remarks>
    /// List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). &lt;p/&gt; &lt;strong&gt;Note:&lt;/strong&gt;&lt;p/&gt; Provide only campaign_id or ad_group_id. Do not provide both.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="campaignIds">List of Campaign Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="adGroupIds">List of Ad group Ids to use to filter the results. (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="entityStatuses">Entity status (optional, default to std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="order">The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional, default to &quot;&quot;)</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="translateInterestsToNames">Return interests as text names (if value is true) rather than topic IDs. (optional, default to false)</param>
    virtual void ad_groups_list(const std::string &adAccountId, const std::optional<std::vector<std::string>> &campaignIds, const std::optional<std::vector<std::string>> &adGroupIds, const std::optional<std::vector<std::string>> &entityStatuses, const std::optional<int32_t> &pageSize, const std::optional<std::string> &order, const std::optional<std::string> &bookmark, const std::optional<bool> &translateInterestsToNames, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update ad groups
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/ads-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; &lt;p/&gt; Update multiple existing ad groups.
    /// </remarks>
    /// <param name="adAccountId">Unique identifier of an ad account.</param>
    /// <param name="adGroupUpdateRequest">List of ad groups to update, size limit [1, 30].</param>
    virtual void ad_groups_update(const std::string &adAccountId, const std::vector<org::openapitools::server::model::AdGroupUpdateRequest> &adGroupUpdateRequest, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* AdGroupsApi_H_ */

