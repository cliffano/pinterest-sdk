/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsApi.h
 *
 * 
 */

#ifndef CatalogsApi_H_
#define CatalogsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "CatalogsFeed.h"
#include "CatalogsFeedsCreateRequest.h"
#include "CatalogsFeedsUpdateRequest.h"
#include "CatalogsItemValidationIssue.h"
#include "CatalogsItems.h"
#include "CatalogsItemsBatch.h"
#include "CatalogsItemsBatchRequest.h"
#include "CatalogsListProductsByFilterRequest.h"
#include "CatalogsProductGroup.h"
#include "CatalogsProductGroupCreateRequest.h"
#include "CatalogsProductGroupProductCounts.h"
#include "CatalogsProductGroupUpdateRequest.h"
#include "Catalogs_product_groups_list_200_response.h"
#include "Error.h"
#include "Feed_processing_results_list_200_response.h"
#include "Feeds_list_200_response.h"
#include "Items_issues_list_200_response.h"
#include "Products_by_product_group_filter_list_200_response.h"
#include <string>

namespace org::openapitools::server::api
{

class  CatalogsApi {
public:
    explicit CatalogsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~CatalogsApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void catalogs_product_group_pins_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_product_groups_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_product_groups_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_product_groups_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_product_groups_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_product_groups_product_counts_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_product_groups_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void feed_processing_results_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void feeds_create_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void feeds_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void feeds_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void feeds_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void feeds_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void items_batch_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void items_batch_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void items_issues_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void items_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void products_by_product_group_filter_list_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void catalogs_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// List products for a given product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product pins for a given Catalogs Product Group Id.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void catalogs_product_group_pins_list(const std::string &productGroupId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
    /// </remarks>
    /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
    virtual void catalogs_product_groups_create(const org::openapitools::server::model::CatalogsProductGroupCreateRequest &catalogsProductGroupCreateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    virtual void catalogs_product_groups_delete(const std::string &productGroupId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get a product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a singe product group for a given Catalogs Product Group Id.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    virtual void catalogs_product_groups_get(const std::string &productGroupId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get product groups list
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void catalogs_product_groups_list(const std::optional<std::string> &feedId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get product counts for a given product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; Get a product counts for a given Catalogs Product Group.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    virtual void catalogs_product_groups_product_counts_get(const std::string &productGroupId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update product group
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
    /// </remarks>
    /// <param name="productGroupId">Unique identifier of a product group</param>
    /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
    virtual void catalogs_product_groups_update(const std::string &productGroupId, const org::openapitools::server::model::CatalogsProductGroupUpdateRequest &catalogsProductGroupUpdateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List processing results for a given feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account. Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void feed_processing_results_list(const std::string &feedId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
    virtual void feeds_create(const org::openapitools::server::model::CatalogsFeedsCreateRequest &catalogsFeedsCreateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    virtual void feeds_delete(const std::string &feedId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    virtual void feeds_get(const std::string &feedId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List feeds
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void feeds_list(const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Update feed
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
    /// </remarks>
    /// <param name="feedId">Unique identifier of a feed</param>
    /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
    virtual void feeds_update(const std::string &feedId, const org::openapitools::server::model::CatalogsFeedsUpdateRequest &catalogsFeedsUpdateRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get catalogs items batch
    /// </summary>
    /// <remarks>
    /// Get a single catalogs items batch created by the \&quot;operating user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/features/catalog-management/#Using%20batch%20updates%20for%20catalog%20management\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt;
    /// </remarks>
    /// <param name="batchId">Id of a catalogs items batch to fetch</param>
    virtual void items_batch_get(const std::string &batchId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Perform an operation on an item batch
    /// </summary>
    /// <remarks>
    /// This endpoint supports multiple operations on a set of one or more catalog items. &lt;a href&#x3D;\&quot;/docs/features/catalog-management/#Using%20batch%20updates%20for%20catalog%20management\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt;
    /// </remarks>
    /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
    virtual void items_batch_post(const org::openapitools::server::model::CatalogsItemsBatchRequest &catalogsItemsBatchRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List item issues for a given processing result
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  List item validation issues for a given feed processing result. Please note that for now query parameters &#39;item_numbers&#39; and &#39;item_validation_issue&#39; cannot be used simultaneously until it is implemented in some release in the future.
    /// </remarks>
    /// <param name="processingResultId">Unique identifier of a feed processing result</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    /// <param name="itemNumbers">Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation. (optional, default to std::vector&lt;int32_t&gt;())</param>
    /// <param name="itemValidationIssue">Filter item validation issues that have a given type of item validation issue. (optional, default to std::make_shared&lt;CatalogsItemValidationIssue&gt;())</param>
    virtual void items_issues_list(const std::string &processingResultId, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, const std::optional<std::vector<int32_t>> &itemNumbers, const std::optional<CatalogsItemValidationIssue> &itemValidationIssue, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get catalogs items
    /// </summary>
    /// <remarks>
    /// Get the items of the catalog created by the \&quot;operating user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/features/catalog-management/#Using%20batch%20updates%20for%20catalog%20management\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt;
    /// </remarks>
    /// <param name="country">Country for the Catalogs Items</param>
    /// <param name="itemIds">Catalogs Item ids</param>
    /// <param name="language">Language for the Catalogs Items</param>
    virtual void items_get(const std::optional<std::string> &country, const std::optional<std::vector<std::string>> &itemIds, const std::optional<std::string> &language, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List products that meet the criteria of the filter you provide.
    /// </summary>
    /// <remarks>
    /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/features/catalog-management/&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt; List products Pins that meet the criteria specified in the Catalogs Product Group Filter given in the request. Note: This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent.
    /// </remarks>
    /// <param name="catalogsListProductsByFilterRequest">Object holding a group of filters for a catalog product group</param>
    /// <param name="bookmark">Cursor used to fetch the next page of items (optional, default to &quot;&quot;)</param>
    /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
    virtual void products_by_product_group_filter_list(const org::openapitools::server::model::CatalogsListProductsByFilterRequest &catalogsListProductsByFilterRequest, const std::optional<std::string> &bookmark, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* CatalogsApi_H_ */

