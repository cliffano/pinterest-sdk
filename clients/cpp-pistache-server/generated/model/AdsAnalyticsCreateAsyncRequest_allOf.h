/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdsAnalyticsCreateAsyncRequest_allOf.h
 *
 * 
 */

#ifndef AdsAnalyticsCreateAsyncRequest_allOf_H_
#define AdsAnalyticsCreateAsyncRequest_allOf_H_


#include "Granularity.h"
#include "ConversionReportTimeType.h"
#include "ConversionReportAttributionType.h"
#include <string>
#include <vector>
#include "ConversionAttributionWindowDays.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdsAnalyticsCreateAsyncRequest_allOf
{
public:
    AdsAnalyticsCreateAsyncRequest_allOf();
    virtual ~AdsAnalyticsCreateAsyncRequest_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdsAnalyticsCreateAsyncRequest_allOf& rhs) const;
    bool operator!=(const AdsAnalyticsCreateAsyncRequest_allOf& rhs) const;

    /////////////////////////////////////////////
    /// AdsAnalyticsCreateAsyncRequest_allOf members

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string const& value);
    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string const& value);
    /// <summary>
    /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    /// </summary>
    Granularity getGranularity() const;
    void setGranularity(Granularity const& value);
    /// <summary>
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    ConversionAttributionWindowDays getClickWindowDays() const;
    void setClickWindowDays(ConversionAttributionWindowDays const& value);
    bool clickWindowDaysIsSet() const;
    void unsetClick_window_days();
    /// <summary>
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    ConversionAttributionWindowDays getEngagementWindowDays() const;
    void setEngagementWindowDays(ConversionAttributionWindowDays const& value);
    bool engagementWindowDaysIsSet() const;
    void unsetEngagement_window_days();
    /// <summary>
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
    /// </summary>
    ConversionAttributionWindowDays getViewWindowDays() const;
    void setViewWindowDays(ConversionAttributionWindowDays const& value);
    bool viewWindowDaysIsSet() const;
    void unsetView_window_days();
    /// <summary>
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    /// </summary>
    ConversionReportTimeType getConversionReportTime() const;
    void setConversionReportTime(ConversionReportTimeType const& value);
    bool conversionReportTimeIsSet() const;
    void unsetConversion_report_time();
    /// <summary>
    /// List of types of attribution for the conversion report
    /// </summary>
    std::vector<ConversionReportAttributionType> getAttributionTypes() const;
    void setAttributionTypes(std::vector<ConversionReportAttributionType> const& value);
    bool attributionTypesIsSet() const;
    void unsetAttribution_types();

    friend void to_json(nlohmann::json& j, const AdsAnalyticsCreateAsyncRequest_allOf& o);
    friend void from_json(const nlohmann::json& j, AdsAnalyticsCreateAsyncRequest_allOf& o);
protected:
    std::string m_Start_date;

    std::string m_End_date;

    Granularity m_Granularity;

    ConversionAttributionWindowDays m_Click_window_days;
    bool m_Click_window_daysIsSet;
    ConversionAttributionWindowDays m_Engagement_window_days;
    bool m_Engagement_window_daysIsSet;
    ConversionAttributionWindowDays m_View_window_days;
    bool m_View_window_daysIsSet;
    ConversionReportTimeType m_Conversion_report_time;
    bool m_Conversion_report_timeIsSet;
    std::vector<ConversionReportAttributionType> m_Attribution_types;
    bool m_Attribution_typesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdsAnalyticsCreateAsyncRequest_allOf_H_ */
