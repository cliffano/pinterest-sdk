/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogProductGroup.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogProductGroup::CatalogProductGroup()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Merchant_id = "";
    m_Merchant_idIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_FiltersIsSet = false;
    m_Filter_v2IsSet = false;
    m_TypeIsSet = false;
    m_StatusIsSet = false;
    m_Feed_profile_id = "";
    m_Feed_profile_idIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Last_update = 0;
    m_Last_updateIsSet = false;
    m_Product_count = 0;
    m_Product_countIsSet = false;
    m_Featured_position = 0;
    m_Featured_positionIsSet = false;
    
}

void CatalogProductGroup::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogProductGroup::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogProductGroup::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogProductGroup" : pathPrefix;

             
    if (merchantIdIsSet())
    {
        const std::string& value = m_Merchant_id;
        const std::string currentValuePath = _pathPrefix + ".merchantId";
                
        

    }
                             
    if (feedProfileIdIsSet())
    {
        const std::string& value = m_Feed_profile_id;
        const std::string currentValuePath = _pathPrefix + ".feedProfileId";
                
        

    }
                    
    return success;
}

bool CatalogProductGroup::operator==(const CatalogProductGroup& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!merchantIdIsSet() && !rhs.merchantIdIsSet()) || (merchantIdIsSet() && rhs.merchantIdIsSet() && getMerchantId() == rhs.getMerchantId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!filtersIsSet() && !rhs.filtersIsSet()) || (filtersIsSet() && rhs.filtersIsSet() && getFilters() == rhs.getFilters())) &&
    
    
    ((!filterV2IsSet() && !rhs.filterV2IsSet()) || (filterV2IsSet() && rhs.filterV2IsSet() && getFilterV2() == rhs.getFilterV2())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!feedProfileIdIsSet() && !rhs.feedProfileIdIsSet()) || (feedProfileIdIsSet() && rhs.feedProfileIdIsSet() && getFeedProfileId() == rhs.getFeedProfileId())) &&
    
    
    ((!createdAtIsSet() && !rhs.createdAtIsSet()) || (createdAtIsSet() && rhs.createdAtIsSet() && getCreatedAt() == rhs.getCreatedAt())) &&
    
    
    ((!lastUpdateIsSet() && !rhs.lastUpdateIsSet()) || (lastUpdateIsSet() && rhs.lastUpdateIsSet() && getLastUpdate() == rhs.getLastUpdate())) &&
    
    
    ((!productCountIsSet() && !rhs.productCountIsSet()) || (productCountIsSet() && rhs.productCountIsSet() && getProductCount() == rhs.getProductCount())) &&
    
    
    ((!featuredPositionIsSet() && !rhs.featuredPositionIsSet()) || (featuredPositionIsSet() && rhs.featuredPositionIsSet() && getFeaturedPosition() == rhs.getFeaturedPosition()))
    
    ;
}

bool CatalogProductGroup::operator!=(const CatalogProductGroup& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogProductGroup& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.merchantIdIsSet())
        j["merchant_id"] = o.m_Merchant_id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.filtersIsSet())
        j["filters"] = o.m_Filters;
    if(o.filterV2IsSet())
        j["filter_v2"] = o.m_Filter_v2;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.feedProfileIdIsSet())
        j["feed_profile_id"] = o.m_Feed_profile_id;
    if(o.createdAtIsSet())
        j["created_at"] = o.m_Created_at;
    if(o.lastUpdateIsSet())
        j["last_update"] = o.m_Last_update;
    if(o.productCountIsSet())
        j["product_count"] = o.m_Product_count;
    if(o.featuredPositionIsSet())
        j["featured_position"] = o.m_Featured_position;
    
}

void from_json(const nlohmann::json& j, CatalogProductGroup& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("merchant_id") != j.end())
    {
        j.at("merchant_id").get_to(o.m_Merchant_id);
        o.m_Merchant_idIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("filters") != j.end())
    {
        j.at("filters").get_to(o.m_Filters);
        o.m_FiltersIsSet = true;
    } 
    if(j.find("filter_v2") != j.end())
    {
        j.at("filter_v2").get_to(o.m_Filter_v2);
        o.m_Filter_v2IsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("feed_profile_id") != j.end())
    {
        j.at("feed_profile_id").get_to(o.m_Feed_profile_id);
        o.m_Feed_profile_idIsSet = true;
    } 
    if(j.find("created_at") != j.end())
    {
        j.at("created_at").get_to(o.m_Created_at);
        o.m_Created_atIsSet = true;
    } 
    if(j.find("last_update") != j.end())
    {
        j.at("last_update").get_to(o.m_Last_update);
        o.m_Last_updateIsSet = true;
    } 
    if(j.find("product_count") != j.end())
    {
        j.at("product_count").get_to(o.m_Product_count);
        o.m_Product_countIsSet = true;
    } 
    if(j.find("featured_position") != j.end())
    {
        j.at("featured_position").get_to(o.m_Featured_position);
        o.m_Featured_positionIsSet = true;
    } 
    
}

std::string CatalogProductGroup::getId() const
{
    return m_Id;
}
void CatalogProductGroup::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CatalogProductGroup::idIsSet() const
{
    return m_IdIsSet;
}
void CatalogProductGroup::unsetId()
{
    m_IdIsSet = false;
}
std::string CatalogProductGroup::getMerchantId() const
{
    return m_Merchant_id;
}
void CatalogProductGroup::setMerchantId(std::string const& value)
{
    m_Merchant_id = value;
    m_Merchant_idIsSet = true;
}
bool CatalogProductGroup::merchantIdIsSet() const
{
    return m_Merchant_idIsSet;
}
void CatalogProductGroup::unsetMerchant_id()
{
    m_Merchant_idIsSet = false;
}
std::string CatalogProductGroup::getName() const
{
    return m_Name;
}
void CatalogProductGroup::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool CatalogProductGroup::nameIsSet() const
{
    return m_NameIsSet;
}
void CatalogProductGroup::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::Object CatalogProductGroup::getFilters() const
{
    return m_Filters;
}
void CatalogProductGroup::setFilters(org::openapitools::server::model::Object const& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}
bool CatalogProductGroup::filtersIsSet() const
{
    return m_FiltersIsSet;
}
void CatalogProductGroup::unsetFilters()
{
    m_FiltersIsSet = false;
}
org::openapitools::server::model::Object CatalogProductGroup::getFilterV2() const
{
    return m_Filter_v2;
}
void CatalogProductGroup::setFilterV2(org::openapitools::server::model::Object const& value)
{
    m_Filter_v2 = value;
    m_Filter_v2IsSet = true;
}
bool CatalogProductGroup::filterV2IsSet() const
{
    return m_Filter_v2IsSet;
}
void CatalogProductGroup::unsetFilter_v2()
{
    m_Filter_v2IsSet = false;
}
org::openapitools::server::model::Board CatalogProductGroup::getType() const
{
    return m_Type;
}
void CatalogProductGroup::setType(org::openapitools::server::model::Board const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool CatalogProductGroup::typeIsSet() const
{
    return m_TypeIsSet;
}
void CatalogProductGroup::unsetType()
{
    m_TypeIsSet = false;
}
org::openapitools::server::model::EntityStatus CatalogProductGroup::getStatus() const
{
    return m_Status;
}
void CatalogProductGroup::setStatus(org::openapitools::server::model::EntityStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool CatalogProductGroup::statusIsSet() const
{
    return m_StatusIsSet;
}
void CatalogProductGroup::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string CatalogProductGroup::getFeedProfileId() const
{
    return m_Feed_profile_id;
}
void CatalogProductGroup::setFeedProfileId(std::string const& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}
bool CatalogProductGroup::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}
void CatalogProductGroup::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
int32_t CatalogProductGroup::getCreatedAt() const
{
    return m_Created_at;
}
void CatalogProductGroup::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool CatalogProductGroup::createdAtIsSet() const
{
    return m_Created_atIsSet;
}
void CatalogProductGroup::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int32_t CatalogProductGroup::getLastUpdate() const
{
    return m_Last_update;
}
void CatalogProductGroup::setLastUpdate(int32_t const value)
{
    m_Last_update = value;
    m_Last_updateIsSet = true;
}
bool CatalogProductGroup::lastUpdateIsSet() const
{
    return m_Last_updateIsSet;
}
void CatalogProductGroup::unsetLast_update()
{
    m_Last_updateIsSet = false;
}
int32_t CatalogProductGroup::getProductCount() const
{
    return m_Product_count;
}
void CatalogProductGroup::setProductCount(int32_t const value)
{
    m_Product_count = value;
    m_Product_countIsSet = true;
}
bool CatalogProductGroup::productCountIsSet() const
{
    return m_Product_countIsSet;
}
void CatalogProductGroup::unsetProduct_count()
{
    m_Product_countIsSet = false;
}
int32_t CatalogProductGroup::getFeaturedPosition() const
{
    return m_Featured_position;
}
void CatalogProductGroup::setFeaturedPosition(int32_t const value)
{
    m_Featured_position = value;
    m_Featured_positionIsSet = true;
}
bool CatalogProductGroup::featuredPositionIsSet() const
{
    return m_Featured_positionIsSet;
}
void CatalogProductGroup::unsetFeatured_position()
{
    m_Featured_positionIsSet = false;
}


} // namespace org::openapitools::server::model

