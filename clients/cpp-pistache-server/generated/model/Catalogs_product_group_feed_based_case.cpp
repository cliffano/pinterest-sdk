/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Catalogs_product_group_feed_based_case.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Catalogs_product_group_feed_based_case::Catalogs_product_group_feed_based_case()
{
    m_Id = "";
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Is_featured = false;
    m_Is_featuredIsSet = false;
    m_TypeIsSet = false;
    m_StatusIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
    m_Updated_at = 0;
    m_Updated_atIsSet = false;
    m_Feed_id = "";
    
}

void Catalogs_product_group_feed_based_case::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Catalogs_product_group_feed_based_case::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Catalogs_product_group_feed_based_case::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Catalogs_product_group_feed_based_case" : pathPrefix;

         
    
    /* Id */ {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
                
    if (!m_Filters.validate()) {
        msg << _pathPrefix << ": Filters is invalid;";
        success = false;
    }                         
    
    /* Feed_id */ {
        const std::string& value = m_Feed_id;
        const std::string currentValuePath = _pathPrefix + ".feedId";
                
        

    }
    
    return success;
}

bool Catalogs_product_group_feed_based_case::operator==(const Catalogs_product_group_feed_based_case& rhs) const
{
    return
    
    
    (getId() == rhs.getId())
     &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    (getFilters() == rhs.getFilters())
     &&
    
    
    ((!isFeaturedIsSet() && !rhs.isFeaturedIsSet()) || (isFeaturedIsSet() && rhs.isFeaturedIsSet() && isIsFeatured() == rhs.isIsFeatured())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!createdAtIsSet() && !rhs.createdAtIsSet()) || (createdAtIsSet() && rhs.createdAtIsSet() && getCreatedAt() == rhs.getCreatedAt())) &&
    
    
    ((!updatedAtIsSet() && !rhs.updatedAtIsSet()) || (updatedAtIsSet() && rhs.updatedAtIsSet() && getUpdatedAt() == rhs.getUpdatedAt())) &&
    
    (getFeedId() == rhs.getFeedId())
    
    
    ;
}

bool Catalogs_product_group_feed_based_case::operator!=(const Catalogs_product_group_feed_based_case& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Catalogs_product_group_feed_based_case& o)
{
    j = nlohmann::json::object();
    j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    j["filters"] = o.m_Filters;
    if(o.isFeaturedIsSet())
        j["is_featured"] = o.m_Is_featured;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.createdAtIsSet())
        j["created_at"] = o.m_Created_at;
    if(o.updatedAtIsSet())
        j["updated_at"] = o.m_Updated_at;
    j["feed_id"] = o.m_Feed_id;
    
}

void from_json(const nlohmann::json& j, Catalogs_product_group_feed_based_case& o)
{
    j.at("id").get_to(o.m_Id);
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    j.at("filters").get_to(o.m_Filters);
    if(j.find("is_featured") != j.end())
    {
        j.at("is_featured").get_to(o.m_Is_featured);
        o.m_Is_featuredIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("created_at") != j.end())
    {
        j.at("created_at").get_to(o.m_Created_at);
        o.m_Created_atIsSet = true;
    } 
    if(j.find("updated_at") != j.end())
    {
        j.at("updated_at").get_to(o.m_Updated_at);
        o.m_Updated_atIsSet = true;
    } 
    j.at("feed_id").get_to(o.m_Feed_id);
    
}

std::string Catalogs_product_group_feed_based_case::getId() const
{
    return m_Id;
}
void Catalogs_product_group_feed_based_case::setId(std::string const& value)
{
    m_Id = value;
}
std::string Catalogs_product_group_feed_based_case::getName() const
{
    return m_Name;
}
void Catalogs_product_group_feed_based_case::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Catalogs_product_group_feed_based_case::nameIsSet() const
{
    return m_NameIsSet;
}
void Catalogs_product_group_feed_based_case::unsetName()
{
    m_NameIsSet = false;
}
std::string Catalogs_product_group_feed_based_case::getDescription() const
{
    return m_Description;
}
void Catalogs_product_group_feed_based_case::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Catalogs_product_group_feed_based_case::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Catalogs_product_group_feed_based_case::unsetDescription()
{
    m_DescriptionIsSet = false;
}
org::openapitools::server::model::CatalogsProductGroupFilters Catalogs_product_group_feed_based_case::getFilters() const
{
    return m_Filters;
}
void Catalogs_product_group_feed_based_case::setFilters(org::openapitools::server::model::CatalogsProductGroupFilters const& value)
{
    m_Filters = value;
}
bool Catalogs_product_group_feed_based_case::isIsFeatured() const
{
    return m_Is_featured;
}
void Catalogs_product_group_feed_based_case::setIsFeatured(bool const value)
{
    m_Is_featured = value;
    m_Is_featuredIsSet = true;
}
bool Catalogs_product_group_feed_based_case::isFeaturedIsSet() const
{
    return m_Is_featuredIsSet;
}
void Catalogs_product_group_feed_based_case::unsetIs_featured()
{
    m_Is_featuredIsSet = false;
}
org::openapitools::server::model::CatalogsProductGroupType Catalogs_product_group_feed_based_case::getType() const
{
    return m_Type;
}
void Catalogs_product_group_feed_based_case::setType(org::openapitools::server::model::CatalogsProductGroupType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Catalogs_product_group_feed_based_case::typeIsSet() const
{
    return m_TypeIsSet;
}
void Catalogs_product_group_feed_based_case::unsetType()
{
    m_TypeIsSet = false;
}
org::openapitools::server::model::CatalogsProductGroupStatus Catalogs_product_group_feed_based_case::getStatus() const
{
    return m_Status;
}
void Catalogs_product_group_feed_based_case::setStatus(org::openapitools::server::model::CatalogsProductGroupStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Catalogs_product_group_feed_based_case::statusIsSet() const
{
    return m_StatusIsSet;
}
void Catalogs_product_group_feed_based_case::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t Catalogs_product_group_feed_based_case::getCreatedAt() const
{
    return m_Created_at;
}
void Catalogs_product_group_feed_based_case::setCreatedAt(int32_t const value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool Catalogs_product_group_feed_based_case::createdAtIsSet() const
{
    return m_Created_atIsSet;
}
void Catalogs_product_group_feed_based_case::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
int32_t Catalogs_product_group_feed_based_case::getUpdatedAt() const
{
    return m_Updated_at;
}
void Catalogs_product_group_feed_based_case::setUpdatedAt(int32_t const value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool Catalogs_product_group_feed_based_case::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}
void Catalogs_product_group_feed_based_case::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
std::string Catalogs_product_group_feed_based_case::getFeedId() const
{
    return m_Feed_id;
}
void Catalogs_product_group_feed_based_case::setFeedId(std::string const& value)
{
    m_Feed_id = value;
}


} // namespace org::openapitools::server::model

