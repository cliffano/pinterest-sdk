/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdResponse_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdResponse_allOf::AdResponse_allOf()
{
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Campaign_id = "";
    m_Campaign_idIsSet = false;
    m_Collection_items_destination_url_template = "";
    m_Collection_items_destination_url_templateIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Rejected_reasonsIsSet = false;
    m_Rejection_labelsIsSet = false;
    m_Review_status = "";
    m_Review_statusIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Summary_status = "";
    m_Summary_statusIsSet = false;
    
}

void AdResponse_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdResponse_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdResponse_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdResponse_allOf" : pathPrefix;

         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
         
    if (campaignIdIsSet())
    {
        const std::string& value = m_Campaign_id;
        const std::string currentValuePath = _pathPrefix + ".campaignId";
                
        

    }
                 
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
         
    if (rejectedReasonsIsSet())
    {
        const std::vector<std::string>& value = m_Rejected_reasons;
        const std::string currentValuePath = _pathPrefix + ".rejectedReasons";
                
        success = value.validate(msg, currentValuePath) && success;
        
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        if (
            value != "HASHTAGS" &&
            value != "PROMOTIONS_AND_PRICES" &&
            value != "TARGETING" &&
            value != "LANDING_PAGE" &&
            value != "CAPS_AND_SYMBOLS" &&
            value != "SHOCKING" &&
            value != "WEIGHT_LOSS" &&
            value != "PROHIBITED_PRODUCT" &&
            value != "AUTHENTICITY" &&
            value != "NUDITY" &&
            value != "CONFUSING_DESIGN" &&
            value != "URGENCY" &&
            value != "RATINGS" &&
            value != "APP" &&
            value != "ALCOHOL" &&
            value != "CONTESTS" &&
            value != "POLITICAL" &&
            value != "OTHER" &&
            value != "IMAGE" &&
            value != "NAR" &&
            value != "INCONSISTENT" &&
            value != "CLICKBAIT" &&
            value != "NO_DESCRIPTION" &&
            value != "LOW_QUALITY" &&
            value != "EXAGGERATED_CLAIMS" &&
            value != "PINTEREST_BRAND" &&
            value != "ALCOHOL_NO_SALE" &&
            value != "LANDING_PAGE_SPEED" &&
            value != "LANDING_PAGE_HARDWALL" &&
            value != "LANDING_PAGE_BROKEN" &&
            value != "LANDING_PAGE_QUALITY" &&
            value != "OUT_OF_STOCK" &&
            value != "IMAGE_LOW_QUALITY" &&
            value != "IMAGE_BUSY" &&
            value != "IMAGE_POORLY_EDITED" &&
            value != "IMAGE_BEFORE_AFTER" &&
            value != "UGC" &&
            value != "FAKE_BUTTONS" &&
            value != "WEAPONS" &&
            value != "SENSITIVE" &&
            value != "UNACCEPTABLE_BUSINESS" &&
            value != "SUSPICIOUS_CLAIMS" &&
            value != "PHARMA" &&
            value != "SUSPICIOUS_SUPPLEMENTS" &&
            value != "ILLEGAL_RECREATIONAL_DRUG" &&
            value != "LOW_QUALITY_LANDING_PAGE" &&
            value != "RESTRICTED_HEALTHCARE" &&
            value != "INCONSISTENT_LANG_FR"
        ) {
            success = false;
            msg << currentValuePath << ": has invalid value \"" << value << "\";";
        }
 
                i++;
            }
        }

    }
         
    if (rejectionLabelsIsSet())
    {
        const std::vector<std::string>& value = m_Rejection_labels;
        const std::string currentValuePath = _pathPrefix + ".rejectionLabels";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                    
    return success;
}

bool AdResponse_allOf::operator==(const AdResponse_allOf& rhs) const
{
    return
    
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!campaignIdIsSet() && !rhs.campaignIdIsSet()) || (campaignIdIsSet() && rhs.campaignIdIsSet() && getCampaignId() == rhs.getCampaignId())) &&
    
    
    ((!collectionItemsDestinationUrlTemplateIsSet() && !rhs.collectionItemsDestinationUrlTemplateIsSet()) || (collectionItemsDestinationUrlTemplateIsSet() && rhs.collectionItemsDestinationUrlTemplateIsSet() && getCollectionItemsDestinationUrlTemplate() == rhs.getCollectionItemsDestinationUrlTemplate())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!rejectedReasonsIsSet() && !rhs.rejectedReasonsIsSet()) || (rejectedReasonsIsSet() && rhs.rejectedReasonsIsSet() && getRejectedReasons() == rhs.getRejectedReasons())) &&
    
    
    ((!rejectionLabelsIsSet() && !rhs.rejectionLabelsIsSet()) || (rejectionLabelsIsSet() && rhs.rejectionLabelsIsSet() && getRejectionLabels() == rhs.getRejectionLabels())) &&
    
    
    ((!reviewStatusIsSet() && !rhs.reviewStatusIsSet()) || (reviewStatusIsSet() && rhs.reviewStatusIsSet() && getReviewStatus() == rhs.getReviewStatus())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!updatedTimeIsSet() && !rhs.updatedTimeIsSet()) || (updatedTimeIsSet() && rhs.updatedTimeIsSet() && getUpdatedTime() == rhs.getUpdatedTime())) &&
    
    
    ((!summaryStatusIsSet() && !rhs.summaryStatusIsSet()) || (summaryStatusIsSet() && rhs.summaryStatusIsSet() && getSummaryStatus() == rhs.getSummaryStatus()))
    
    ;
}

bool AdResponse_allOf::operator!=(const AdResponse_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdResponse_allOf& o)
{
    j = nlohmann::json();
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.campaignIdIsSet())
        j["campaign_id"] = o.m_Campaign_id;
    if(o.collectionItemsDestinationUrlTemplateIsSet())
        j["collection_items_destination_url_template"] = o.m_Collection_items_destination_url_template;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.rejectedReasonsIsSet() || !o.m_Rejected_reasons.empty())
        j["rejected_reasons"] = o.m_Rejected_reasons;
    if(o.rejectionLabelsIsSet() || !o.m_Rejection_labels.empty())
        j["rejection_labels"] = o.m_Rejection_labels;
    if(o.reviewStatusIsSet())
        j["review_status"] = o.m_Review_status;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.updatedTimeIsSet())
        j["updated_time"] = o.m_Updated_time;
    if(o.summaryStatusIsSet())
        j["summary_status"] = o.m_Summary_status;
    
}

void from_json(const nlohmann::json& j, AdResponse_allOf& o)
{
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("campaign_id") != j.end())
    {
        j.at("campaign_id").get_to(o.m_Campaign_id);
        o.m_Campaign_idIsSet = true;
    } 
    if(j.find("collection_items_destination_url_template") != j.end())
    {
        j.at("collection_items_destination_url_template").get_to(o.m_Collection_items_destination_url_template);
        o.m_Collection_items_destination_url_templateIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("rejected_reasons") != j.end())
    {
        j.at("rejected_reasons").get_to(o.m_Rejected_reasons);
        o.m_Rejected_reasonsIsSet = true;
    } 
    if(j.find("rejection_labels") != j.end())
    {
        j.at("rejection_labels").get_to(o.m_Rejection_labels);
        o.m_Rejection_labelsIsSet = true;
    } 
    if(j.find("review_status") != j.end())
    {
        j.at("review_status").get_to(o.m_Review_status);
        o.m_Review_statusIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("updated_time") != j.end())
    {
        j.at("updated_time").get_to(o.m_Updated_time);
        o.m_Updated_timeIsSet = true;
    } 
    if(j.find("summary_status") != j.end())
    {
        j.at("summary_status").get_to(o.m_Summary_status);
        o.m_Summary_statusIsSet = true;
    } 
    
}

std::string AdResponse_allOf::getAdAccountId() const
{
    return m_Ad_account_id;
}
void AdResponse_allOf::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool AdResponse_allOf::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void AdResponse_allOf::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
std::string AdResponse_allOf::getCampaignId() const
{
    return m_Campaign_id;
}
void AdResponse_allOf::setCampaignId(std::string const& value)
{
    m_Campaign_id = value;
    m_Campaign_idIsSet = true;
}
bool AdResponse_allOf::campaignIdIsSet() const
{
    return m_Campaign_idIsSet;
}
void AdResponse_allOf::unsetCampaign_id()
{
    m_Campaign_idIsSet = false;
}
std::string AdResponse_allOf::getCollectionItemsDestinationUrlTemplate() const
{
    return m_Collection_items_destination_url_template;
}
void AdResponse_allOf::setCollectionItemsDestinationUrlTemplate(std::string const& value)
{
    m_Collection_items_destination_url_template = value;
    m_Collection_items_destination_url_templateIsSet = true;
}
bool AdResponse_allOf::collectionItemsDestinationUrlTemplateIsSet() const
{
    return m_Collection_items_destination_url_templateIsSet;
}
void AdResponse_allOf::unsetCollection_items_destination_url_template()
{
    m_Collection_items_destination_url_templateIsSet = false;
}
int32_t AdResponse_allOf::getCreatedTime() const
{
    return m_Created_time;
}
void AdResponse_allOf::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool AdResponse_allOf::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void AdResponse_allOf::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
std::string AdResponse_allOf::getId() const
{
    return m_Id;
}
void AdResponse_allOf::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AdResponse_allOf::idIsSet() const
{
    return m_IdIsSet;
}
void AdResponse_allOf::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::string> AdResponse_allOf::getRejectedReasons() const
{
    return m_Rejected_reasons;
}
void AdResponse_allOf::setRejectedReasons(std::vector<std::string> const& value)
{
    m_Rejected_reasons = value;
    m_Rejected_reasonsIsSet = true;
}
bool AdResponse_allOf::rejectedReasonsIsSet() const
{
    return m_Rejected_reasonsIsSet;
}
void AdResponse_allOf::unsetRejected_reasons()
{
    m_Rejected_reasonsIsSet = false;
}
std::vector<std::string> AdResponse_allOf::getRejectionLabels() const
{
    return m_Rejection_labels;
}
void AdResponse_allOf::setRejectionLabels(std::vector<std::string> const& value)
{
    m_Rejection_labels = value;
    m_Rejection_labelsIsSet = true;
}
bool AdResponse_allOf::rejectionLabelsIsSet() const
{
    return m_Rejection_labelsIsSet;
}
void AdResponse_allOf::unsetRejection_labels()
{
    m_Rejection_labelsIsSet = false;
}
std::string AdResponse_allOf::getReviewStatus() const
{
    return m_Review_status;
}
void AdResponse_allOf::setReviewStatus(std::string const& value)
{
    m_Review_status = value;
    m_Review_statusIsSet = true;
}
bool AdResponse_allOf::reviewStatusIsSet() const
{
    return m_Review_statusIsSet;
}
void AdResponse_allOf::unsetReview_status()
{
    m_Review_statusIsSet = false;
}
std::string AdResponse_allOf::getType() const
{
    return m_Type;
}
void AdResponse_allOf::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool AdResponse_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}
void AdResponse_allOf::unsetType()
{
    m_TypeIsSet = false;
}
int32_t AdResponse_allOf::getUpdatedTime() const
{
    return m_Updated_time;
}
void AdResponse_allOf::setUpdatedTime(int32_t const value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}
bool AdResponse_allOf::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}
void AdResponse_allOf::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
PinPromotionSummaryStatus AdResponse_allOf::getSummaryStatus() const
{
    return m_Summary_status;
}
void AdResponse_allOf::setSummaryStatus(PinPromotionSummaryStatus const& value)
{
    m_Summary_status = value;
    m_Summary_statusIsSet = true;
}
bool AdResponse_allOf::summaryStatusIsSet() const
{
    return m_Summary_statusIsSet;
}
void AdResponse_allOf::unsetSummary_status()
{
    m_Summary_statusIsSet = false;
}


} // namespace org::openapitools::server::model

