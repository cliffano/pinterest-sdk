/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdCommon_quiz_pin_data.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdCommon_quiz_pin_data::AdCommon_quiz_pin_data()
{
    m_QuestionsIsSet = false;
    m_ResultsIsSet = false;
    
}

void AdCommon_quiz_pin_data::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdCommon_quiz_pin_data::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdCommon_quiz_pin_data::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdCommon_quiz_pin_data" : pathPrefix;

         
    if (questionsIsSet())
    {
        const std::vector<org::openapitools::server::model::QuizPinQuestion>& value = m_Questions;
        const std::string currentValuePath = _pathPrefix + ".questions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QuizPinQuestion& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".questions") && success;
 
                i++;
            }
        }

    }
         
    if (resultsIsSet())
    {
        const std::vector<org::openapitools::server::model::QuizPinResult>& value = m_Results;
        const std::string currentValuePath = _pathPrefix + ".results";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QuizPinResult& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".results") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool AdCommon_quiz_pin_data::operator==(const AdCommon_quiz_pin_data& rhs) const
{
    return
    
    
    
    ((!questionsIsSet() && !rhs.questionsIsSet()) || (questionsIsSet() && rhs.questionsIsSet() && getQuestions() == rhs.getQuestions())) &&
    
    
    ((!resultsIsSet() && !rhs.resultsIsSet()) || (resultsIsSet() && rhs.resultsIsSet() && getResults() == rhs.getResults()))
    
    ;
}

bool AdCommon_quiz_pin_data::operator!=(const AdCommon_quiz_pin_data& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdCommon_quiz_pin_data& o)
{
    j = nlohmann::json::object();
    if(o.questionsIsSet() || !o.m_Questions.empty())
        j["questions"] = o.m_Questions;
    if(o.resultsIsSet() || !o.m_Results.empty())
        j["results"] = o.m_Results;
    
}

void from_json(const nlohmann::json& j, AdCommon_quiz_pin_data& o)
{
    if(j.find("questions") != j.end())
    {
        j.at("questions").get_to(o.m_Questions);
        o.m_QuestionsIsSet = true;
    } 
    if(j.find("results") != j.end())
    {
        j.at("results").get_to(o.m_Results);
        o.m_ResultsIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::QuizPinQuestion> AdCommon_quiz_pin_data::getQuestions() const
{
    return m_Questions;
}
void AdCommon_quiz_pin_data::setQuestions(std::vector<org::openapitools::server::model::QuizPinQuestion> const& value)
{
    m_Questions = value;
    m_QuestionsIsSet = true;
}
bool AdCommon_quiz_pin_data::questionsIsSet() const
{
    return m_QuestionsIsSet;
}
void AdCommon_quiz_pin_data::unsetQuestions()
{
    m_QuestionsIsSet = false;
}
std::vector<org::openapitools::server::model::QuizPinResult> AdCommon_quiz_pin_data::getResults() const
{
    return m_Results;
}
void AdCommon_quiz_pin_data::setResults(std::vector<org::openapitools::server::model::QuizPinResult> const& value)
{
    m_Results = value;
    m_ResultsIsSet = true;
}
bool AdCommon_quiz_pin_data::resultsIsSet() const
{
    return m_ResultsIsSet;
}
void AdCommon_quiz_pin_data::unsetResults()
{
    m_ResultsIsSet = false;
}


} // namespace org::openapitools::server::model

