/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Catalogs_product_groups_create_request.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Catalogs_product_groups_create_request::Catalogs_product_groups_create_request()
{
    m_Name = "";
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Is_featured = false;
    m_Is_featuredIsSet = false;
    m_Feed_id = "";
    m_Catalog_type = "";
    m_Catalog_id = "";
    
}

void Catalogs_product_groups_create_request::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Catalogs_product_groups_create_request::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Catalogs_product_groups_create_request::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Catalogs_product_groups_create_request" : pathPrefix;

                    
    if (!m_Filters.validate()) {
        msg << _pathPrefix << ": Filters is invalid;";
        success = false;
    }     
    
    /* Feed_id */ {
        const std::string& value = m_Feed_id;
        const std::string currentValuePath = _pathPrefix + ".feedId";
                
        

    }
             
    
    /* Catalog_id */ {
        const std::string& value = m_Catalog_id;
        const std::string currentValuePath = _pathPrefix + ".catalogId";
                
        

    }
    
    return success;
}

bool Catalogs_product_groups_create_request::operator==(const Catalogs_product_groups_create_request& rhs) const
{
    return
    
    
    (getName() == rhs.getName())
     &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!isFeaturedIsSet() && !rhs.isFeaturedIsSet()) || (isFeaturedIsSet() && rhs.isFeaturedIsSet() && isIsFeatured() == rhs.isIsFeatured())) &&
    
    (getFilters() == rhs.getFilters())
     &&
    
    (getFeedId() == rhs.getFeedId())
     &&
    
    (getCatalogType() == rhs.getCatalogType())
     &&
    
    (getCatalogId() == rhs.getCatalogId())
    
    
    ;
}

bool Catalogs_product_groups_create_request::operator!=(const Catalogs_product_groups_create_request& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Catalogs_product_groups_create_request& o)
{
    j = nlohmann::json::object();
    j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.isFeaturedIsSet())
        j["is_featured"] = o.m_Is_featured;
    j["filters"] = o.m_Filters;
    j["feed_id"] = o.m_Feed_id;
    j["catalog_type"] = o.m_Catalog_type;
    j["catalog_id"] = o.m_Catalog_id;
    
}

void from_json(const nlohmann::json& j, Catalogs_product_groups_create_request& o)
{
    j.at("name").get_to(o.m_Name);
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("is_featured") != j.end())
    {
        j.at("is_featured").get_to(o.m_Is_featured);
        o.m_Is_featuredIsSet = true;
    } 
    j.at("filters").get_to(o.m_Filters);
    j.at("feed_id").get_to(o.m_Feed_id);
    j.at("catalog_type").get_to(o.m_Catalog_type);
    j.at("catalog_id").get_to(o.m_Catalog_id);
    
}

std::string Catalogs_product_groups_create_request::getName() const
{
    return m_Name;
}
void Catalogs_product_groups_create_request::setName(std::string const& value)
{
    m_Name = value;
}
std::string Catalogs_product_groups_create_request::getDescription() const
{
    return m_Description;
}
void Catalogs_product_groups_create_request::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Catalogs_product_groups_create_request::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Catalogs_product_groups_create_request::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool Catalogs_product_groups_create_request::isIsFeatured() const
{
    return m_Is_featured;
}
void Catalogs_product_groups_create_request::setIsFeatured(bool const value)
{
    m_Is_featured = value;
    m_Is_featuredIsSet = true;
}
bool Catalogs_product_groups_create_request::isFeaturedIsSet() const
{
    return m_Is_featuredIsSet;
}
void Catalogs_product_groups_create_request::unsetIs_featured()
{
    m_Is_featuredIsSet = false;
}
org::openapitools::server::model::CatalogsHotelProductGroupFilters Catalogs_product_groups_create_request::getFilters() const
{
    return m_Filters;
}
void Catalogs_product_groups_create_request::setFilters(org::openapitools::server::model::CatalogsHotelProductGroupFilters const& value)
{
    m_Filters = value;
}
std::string Catalogs_product_groups_create_request::getFeedId() const
{
    return m_Feed_id;
}
void Catalogs_product_groups_create_request::setFeedId(std::string const& value)
{
    m_Feed_id = value;
}
std::string Catalogs_product_groups_create_request::getCatalogType() const
{
    return m_Catalog_type;
}
void Catalogs_product_groups_create_request::setCatalogType(std::string const& value)
{
    m_Catalog_type = value;
}
std::string Catalogs_product_groups_create_request::getCatalogId() const
{
    return m_Catalog_id;
}
void Catalogs_product_groups_create_request::setCatalogId(std::string const& value)
{
    m_Catalog_id = value;
}


} // namespace org::openapitools::server::model

