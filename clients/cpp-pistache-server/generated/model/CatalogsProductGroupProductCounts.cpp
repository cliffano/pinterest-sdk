/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsProductGroupProductCounts.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsProductGroupProductCounts::CatalogsProductGroupProductCounts()
{
    m_In_stock = 0.0;
    m_Out_of_stock = 0.0;
    m_Preorder = 0.0;
    m_Total = 0.0;
    
}

void CatalogsProductGroupProductCounts::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsProductGroupProductCounts::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsProductGroupProductCounts::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsProductGroupProductCounts" : pathPrefix;

         
    
    /* In_stock */ {
        const double& value = m_In_stock;
        const std::string currentValuePath = _pathPrefix + ".inStock";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    
    /* Out_of_stock */ {
        const double& value = m_Out_of_stock;
        const std::string currentValuePath = _pathPrefix + ".outOfStock";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    
    /* Preorder */ {
        const double& value = m_Preorder;
        const std::string currentValuePath = _pathPrefix + ".preorder";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    
    /* Total */ {
        const double& value = m_Total;
        const std::string currentValuePath = _pathPrefix + ".total";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
    
    return success;
}

bool CatalogsProductGroupProductCounts::operator==(const CatalogsProductGroupProductCounts& rhs) const
{
    return
    
    
    (getInStock() == rhs.getInStock())
     &&
    
    (getOutOfStock() == rhs.getOutOfStock())
     &&
    
    (getPreorder() == rhs.getPreorder())
     &&
    
    (getTotal() == rhs.getTotal())
    
    
    ;
}

bool CatalogsProductGroupProductCounts::operator!=(const CatalogsProductGroupProductCounts& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsProductGroupProductCounts& o)
{
    j = nlohmann::json();
    j["in_stock"] = o.m_In_stock;
    j["out_of_stock"] = o.m_Out_of_stock;
    j["preorder"] = o.m_Preorder;
    j["total"] = o.m_Total;
    
}

void from_json(const nlohmann::json& j, CatalogsProductGroupProductCounts& o)
{
    j.at("in_stock").get_to(o.m_In_stock);
    j.at("out_of_stock").get_to(o.m_Out_of_stock);
    j.at("preorder").get_to(o.m_Preorder);
    j.at("total").get_to(o.m_Total);
    
}

double CatalogsProductGroupProductCounts::getInStock() const
{
    return m_In_stock;
}
void CatalogsProductGroupProductCounts::setInStock(double const value)
{
    m_In_stock = value;
}
double CatalogsProductGroupProductCounts::getOutOfStock() const
{
    return m_Out_of_stock;
}
void CatalogsProductGroupProductCounts::setOutOfStock(double const value)
{
    m_Out_of_stock = value;
}
double CatalogsProductGroupProductCounts::getPreorder() const
{
    return m_Preorder;
}
void CatalogsProductGroupProductCounts::setPreorder(double const value)
{
    m_Preorder = value;
}
double CatalogsProductGroupProductCounts::getTotal() const
{
    return m_Total;
}
void CatalogsProductGroupProductCounts::setTotal(double const value)
{
    m_Total = value;
}


} // namespace org::openapitools::server::model

