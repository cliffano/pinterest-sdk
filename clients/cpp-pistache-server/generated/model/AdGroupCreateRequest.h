/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdGroupCreateRequest.h
 *
 * 
 */

#ifndef AdGroupCreateRequest_H_
#define AdGroupCreateRequest_H_


#include "AdGroupCommon_tracking_urls.h"
#include "TargetingSpec.h"
#include "PlacementGroupType.h"
#include "EntityStatus.h"
#include "PacingDeliveryType.h"
#include <string>
#include "ActionType.h"
#include "BudgetType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdGroupCreateRequest
{
public:
    AdGroupCreateRequest();
    virtual ~AdGroupCreateRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdGroupCreateRequest& rhs) const;
    bool operator!=(const AdGroupCreateRequest& rhs) const;

    /////////////////////////////////////////////
    /// AdGroupCreateRequest members

    /// <summary>
    /// Ad group name.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// Ad group/entity status.
    /// </summary>
    org::openapitools::server::model::EntityStatus getStatus() const;
    void setStatus(org::openapitools::server::model::EntityStatus const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    /// </summary>
    int32_t getBudgetInMicroCurrency() const;
    void setBudgetInMicroCurrency(int32_t const value);
    bool budgetInMicroCurrencyIsSet() const;
    void unsetBudget_in_micro_currency();
    /// <summary>
    /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    /// </summary>
    int32_t getBidInMicroCurrency() const;
    void setBidInMicroCurrency(int32_t const value);
    bool bidInMicroCurrencyIsSet() const;
    void unsetBid_in_micro_currency();
    /// <summary>
    /// 
    /// </summary>
    std::string getBidStrategyType() const;
    void setBidStrategyType(std::string const& value);
    bool bidStrategyTypeIsSet() const;
    void unsetBid_strategy_type();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::BudgetType getBudgetType() const;
    void setBudgetType(org::openapitools::server::model::BudgetType const& value);
    bool budgetTypeIsSet() const;
    void unsetBudget_type();
    /// <summary>
    /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
    /// </summary>
    int32_t getStartTime() const;
    void setStartTime(int32_t const value);
    bool startTimeIsSet() const;
    void unsetStart_time();
    /// <summary>
    /// Ad group end time. Unix timestamp in seconds.
    /// </summary>
    int32_t getEndTime() const;
    void setEndTime(int32_t const value);
    bool endTimeIsSet() const;
    void unsetEnd_time();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TargetingSpec getTargetingSpec() const;
    void setTargetingSpec(org::openapitools::server::model::TargetingSpec const& value);
    bool targetingSpecIsSet() const;
    void unsetTargeting_spec();
    /// <summary>
    /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
    /// </summary>
    int32_t getLifetimeFrequencyCap() const;
    void setLifetimeFrequencyCap(int32_t const value);
    bool lifetimeFrequencyCapIsSet() const;
    void unsetLifetime_frequency_cap();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::AdGroupCommon_tracking_urls getTrackingUrls() const;
    void setTrackingUrls(org::openapitools::server::model::AdGroupCommon_tracking_urls const& value);
    bool trackingUrlsIsSet() const;
    void unsetTracking_urls();
    /// <summary>
    /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
    /// </summary>
    bool isAutoTargetingEnabled() const;
    void setAutoTargetingEnabled(bool const value);
    bool autoTargetingEnabledIsSet() const;
    void unsetAuto_targeting_enabled();
    /// <summary>
    /// &lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
    /// </summary>
    org::openapitools::server::model::PlacementGroupType getPlacementGroup() const;
    void setPlacementGroup(org::openapitools::server::model::PlacementGroupType const& value);
    bool placementGroupIsSet() const;
    void unsetPlacement_group();
    /// <summary>
    /// Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
    /// </summary>
    org::openapitools::server::model::PacingDeliveryType getPacingDeliveryType() const;
    void setPacingDeliveryType(org::openapitools::server::model::PacingDeliveryType const& value);
    bool pacingDeliveryTypeIsSet() const;
    void unsetPacing_delivery_type();
    /// <summary>
    /// Campaign ID of the ad group.
    /// </summary>
    std::string getCampaignId() const;
    void setCampaignId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ActionType getBillableEvent() const;
    void setBillableEvent(org::openapitools::server::model::ActionType const& value);

    friend  void to_json(nlohmann::json& j, const AdGroupCreateRequest& o);
    friend  void from_json(const nlohmann::json& j, AdGroupCreateRequest& o);
protected:
    std::string m_Name;

    org::openapitools::server::model::EntityStatus m_Status;
    bool m_StatusIsSet;
    int32_t m_Budget_in_micro_currency;
    bool m_Budget_in_micro_currencyIsSet;
    int32_t m_Bid_in_micro_currency;
    bool m_Bid_in_micro_currencyIsSet;
    std::string m_Bid_strategy_type;
    bool m_Bid_strategy_typeIsSet;
    org::openapitools::server::model::BudgetType m_Budget_type;
    bool m_Budget_typeIsSet;
    int32_t m_Start_time;
    bool m_Start_timeIsSet;
    int32_t m_End_time;
    bool m_End_timeIsSet;
    org::openapitools::server::model::TargetingSpec m_Targeting_spec;
    bool m_Targeting_specIsSet;
    int32_t m_Lifetime_frequency_cap;
    bool m_Lifetime_frequency_capIsSet;
    org::openapitools::server::model::AdGroupCommon_tracking_urls m_Tracking_urls;
    bool m_Tracking_urlsIsSet;
    bool m_Auto_targeting_enabled;
    bool m_Auto_targeting_enabledIsSet;
    org::openapitools::server::model::PlacementGroupType m_Placement_group;
    bool m_Placement_groupIsSet;
    org::openapitools::server::model::PacingDeliveryType m_Pacing_delivery_type;
    bool m_Pacing_delivery_typeIsSet;
    std::string m_Campaign_id;

    org::openapitools::server::model::ActionType m_Billable_event;

    
};

} // namespace org::openapitools::server::model

#endif /* AdGroupCreateRequest_H_ */
