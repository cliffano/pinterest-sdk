/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConversionEventsUserData_anyOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ConversionEventsUserData_anyOf::ConversionEventsUserData_anyOf()
{
    
}

void ConversionEventsUserData_anyOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConversionEventsUserData_anyOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConversionEventsUserData_anyOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConversionEventsUserData_anyOf" : pathPrefix;

         
    
    /* Em */ {
        const std::vector<std::string>& value = m_Em;
        const std::string currentValuePath = _pathPrefix + ".em";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool ConversionEventsUserData_anyOf::operator==(const ConversionEventsUserData_anyOf& rhs) const
{
    return
    
    
    (getEm() == rhs.getEm())
    
    
    ;
}

bool ConversionEventsUserData_anyOf::operator!=(const ConversionEventsUserData_anyOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConversionEventsUserData_anyOf& o)
{
    j = nlohmann::json();
    j["em"] = o.m_Em;
    
}

void from_json(const nlohmann::json& j, ConversionEventsUserData_anyOf& o)
{
    j.at("em").get_to(o.m_Em);
    
}

std::vector<std::string> ConversionEventsUserData_anyOf::getEm() const
{
    return m_Em;
}
void ConversionEventsUserData_anyOf::setEm(std::vector<std::string> const& value)
{
    m_Em = value;
}


} // namespace org::openapitools::server::model

