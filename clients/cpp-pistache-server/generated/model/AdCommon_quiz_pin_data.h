/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdCommon_quiz_pin_data.h
 *
 * Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
 */

#ifndef AdCommon_quiz_pin_data_H_
#define AdCommon_quiz_pin_data_H_


#include "QuizPinResult.h"
#include "QuizPinQuestion.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
/// </summary>
class  AdCommon_quiz_pin_data
{
public:
    AdCommon_quiz_pin_data();
    virtual ~AdCommon_quiz_pin_data() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdCommon_quiz_pin_data& rhs) const;
    bool operator!=(const AdCommon_quiz_pin_data& rhs) const;

    /////////////////////////////////////////////
    /// AdCommon_quiz_pin_data members

    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::QuizPinQuestion> getQuestions() const;
    void setQuestions(std::vector<org::openapitools::server::model::QuizPinQuestion> const& value);
    bool questionsIsSet() const;
    void unsetQuestions();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::QuizPinResult> getResults() const;
    void setResults(std::vector<org::openapitools::server::model::QuizPinResult> const& value);
    bool resultsIsSet() const;
    void unsetResults();

    friend  void to_json(nlohmann::json& j, const AdCommon_quiz_pin_data& o);
    friend  void from_json(const nlohmann::json& j, AdCommon_quiz_pin_data& o);
protected:
    std::vector<org::openapitools::server::model::QuizPinQuestion> m_Questions;
    bool m_QuestionsIsSet;
    std::vector<org::openapitools::server::model::QuizPinResult> m_Results;
    bool m_ResultsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdCommon_quiz_pin_data_H_ */
