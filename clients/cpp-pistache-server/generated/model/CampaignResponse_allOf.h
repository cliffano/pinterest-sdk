/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CampaignResponse_allOf.h
 *
 * 
 */

#ifndef CampaignResponse_allOf_H_
#define CampaignResponse_allOf_H_


#include "ObjectiveType.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CampaignResponse_allOf
{
public:
    CampaignResponse_allOf();
    virtual ~CampaignResponse_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CampaignResponse_allOf& rhs) const;
    bool operator!=(const CampaignResponse_allOf& rhs) const;

    /////////////////////////////////////////////
    /// CampaignResponse_allOf members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ObjectiveType getObjectiveType() const;
    void setObjectiveType(org::openapitools::server::model::ObjectiveType const& value);
    bool objectiveTypeIsSet() const;
    void unsetObjective_type();
    /// <summary>
    /// Campaign creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t const value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// UTC timestamp. Last update time.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t const value);
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();
    /// <summary>
    /// Always \&quot;campaign\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Determines if a campaign has flexible daily budgets setup.
    /// </summary>
    bool isIsFlexibleDailyBudgets() const;
    void setIsFlexibleDailyBudgets(bool const value);
    bool isFlexibleDailyBudgetsIsSet() const;
    void unsetIs_flexible_daily_budgets();
    /// <summary>
    /// Determines if a campaign automatically generate ad-group level budgets given a campaign budget to maximize campaign outcome. When transitioning from non-cbo to cbo, all previous child ad group budget will be cleared.
    /// </summary>
    bool isIsCampaignBudgetOptimization() const;
    void setIsCampaignBudgetOptimization(bool const value);
    bool isCampaignBudgetOptimizationIsSet() const;
    void unsetIs_campaign_budget_optimization();

    friend void to_json(nlohmann::json& j, const CampaignResponse_allOf& o);
    friend void from_json(const nlohmann::json& j, CampaignResponse_allOf& o);
protected:
    org::openapitools::server::model::ObjectiveType m_Objective_type;
    bool m_Objective_typeIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    bool m_Is_flexible_daily_budgets;
    bool m_Is_flexible_daily_budgetsIsSet;
    bool m_Is_campaign_budget_optimization;
    bool m_Is_campaign_budget_optimizationIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CampaignResponse_allOf_H_ */
