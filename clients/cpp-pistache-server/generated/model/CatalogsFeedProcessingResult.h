/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsFeedProcessingResult.h
 *
 * 
 */

#ifndef CatalogsFeedProcessingResult_H_
#define CatalogsFeedProcessingResult_H_


#include "CatalogsFeedValidationDetails.h"
#include "Catalogs_feed_processing_result_fields.h"
#include "CatalogsFeedProductCounts.h"
#include "CatalogsFeedProcessingStatus.h"
#include <string>
#include "CatalogsDbItem.h"
#include "CatalogsFeedIngestionDetails.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CatalogsFeedProcessingResult
{
public:
    CatalogsFeedProcessingResult();
    virtual ~CatalogsFeedProcessingResult() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsFeedProcessingResult& rhs) const;
    bool operator!=(const CatalogsFeedProcessingResult& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsFeedProcessingResult members

    /// <summary>
    /// 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);
    bool updatedAtIsSet() const;
    void unsetUpdated_at();
    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedIngestionDetails getIngestionDetails() const;
    void setIngestionDetails(CatalogsFeedIngestionDetails const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProcessingStatus getStatus() const;
    void setStatus(CatalogsFeedProcessingStatus const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProductCounts getProductCounts() const;
    void setProductCounts(CatalogsFeedProductCounts const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedValidationDetails getValidationDetails() const;
    void setValidationDetails(CatalogsFeedValidationDetails const& value);

    friend void to_json(nlohmann::json& j, const CatalogsFeedProcessingResult& o);
    friend void from_json(const nlohmann::json& j, CatalogsFeedProcessingResult& o);
protected:
    std::string m_Created_at;
    bool m_Created_atIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Updated_at;
    bool m_Updated_atIsSet;
    CatalogsFeedIngestionDetails m_Ingestion_details;

    CatalogsFeedProcessingStatus m_Status;

    CatalogsFeedProductCounts m_Product_counts;

    CatalogsFeedValidationDetails m_Validation_details;

    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsFeedProcessingResult_H_ */
