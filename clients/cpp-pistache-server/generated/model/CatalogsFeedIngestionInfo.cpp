/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsFeedIngestionInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsFeedIngestionInfo::CatalogsFeedIngestionInfo()
{
    m_In_stock = 0;
    m_In_stockIsSet = false;
    m_Out_of_stock = 0;
    m_Out_of_stockIsSet = false;
    m_Preorder = 0;
    m_PreorderIsSet = false;
    
}

void CatalogsFeedIngestionInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsFeedIngestionInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsFeedIngestionInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsFeedIngestionInfo" : pathPrefix;

                
    return success;
}

bool CatalogsFeedIngestionInfo::operator==(const CatalogsFeedIngestionInfo& rhs) const
{
    return
    
    
    
    ((!inStockIsSet() && !rhs.inStockIsSet()) || (inStockIsSet() && rhs.inStockIsSet() && getInStock() == rhs.getInStock())) &&
    
    
    ((!outOfStockIsSet() && !rhs.outOfStockIsSet()) || (outOfStockIsSet() && rhs.outOfStockIsSet() && getOutOfStock() == rhs.getOutOfStock())) &&
    
    
    ((!preorderIsSet() && !rhs.preorderIsSet()) || (preorderIsSet() && rhs.preorderIsSet() && getPreorder() == rhs.getPreorder()))
    
    ;
}

bool CatalogsFeedIngestionInfo::operator!=(const CatalogsFeedIngestionInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsFeedIngestionInfo& o)
{
    j = nlohmann::json();
    if(o.inStockIsSet())
        j["in_stock"] = o.m_In_stock;
    if(o.outOfStockIsSet())
        j["out_of_stock"] = o.m_Out_of_stock;
    if(o.preorderIsSet())
        j["preorder"] = o.m_Preorder;
    
}

void from_json(const nlohmann::json& j, CatalogsFeedIngestionInfo& o)
{
    if(j.find("in_stock") != j.end())
    {
        j.at("in_stock").get_to(o.m_In_stock);
        o.m_In_stockIsSet = true;
    } 
    if(j.find("out_of_stock") != j.end())
    {
        j.at("out_of_stock").get_to(o.m_Out_of_stock);
        o.m_Out_of_stockIsSet = true;
    } 
    if(j.find("preorder") != j.end())
    {
        j.at("preorder").get_to(o.m_Preorder);
        o.m_PreorderIsSet = true;
    } 
    
}

int32_t CatalogsFeedIngestionInfo::getInStock() const
{
    return m_In_stock;
}
void CatalogsFeedIngestionInfo::setInStock(int32_t const value)
{
    m_In_stock = value;
    m_In_stockIsSet = true;
}
bool CatalogsFeedIngestionInfo::inStockIsSet() const
{
    return m_In_stockIsSet;
}
void CatalogsFeedIngestionInfo::unsetIn_stock()
{
    m_In_stockIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getOutOfStock() const
{
    return m_Out_of_stock;
}
void CatalogsFeedIngestionInfo::setOutOfStock(int32_t const value)
{
    m_Out_of_stock = value;
    m_Out_of_stockIsSet = true;
}
bool CatalogsFeedIngestionInfo::outOfStockIsSet() const
{
    return m_Out_of_stockIsSet;
}
void CatalogsFeedIngestionInfo::unsetOut_of_stock()
{
    m_Out_of_stockIsSet = false;
}
int32_t CatalogsFeedIngestionInfo::getPreorder() const
{
    return m_Preorder;
}
void CatalogsFeedIngestionInfo::setPreorder(int32_t const value)
{
    m_Preorder = value;
    m_PreorderIsSet = true;
}
bool CatalogsFeedIngestionInfo::preorderIsSet() const
{
    return m_PreorderIsSet;
}
void CatalogsFeedIngestionInfo::unsetPreorder()
{
    m_PreorderIsSet = false;
}


} // namespace org::openapitools::server::model

