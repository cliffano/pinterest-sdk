/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdGroupResponse_allOf.h
 *
 * 
 */

#ifndef AdGroupResponse_allOf_H_
#define AdGroupResponse_allOf_H_


#include <string>
#include "AdGroupSummaryStatus.h"
#include "AnyType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdGroupResponse_allOf
{
public:
    AdGroupResponse_allOf();
    virtual ~AdGroupResponse_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdGroupResponse_allOf& rhs) const;
    bool operator!=(const AdGroupResponse_allOf& rhs) const;

    /////////////////////////////////////////////
    /// AdGroupResponse_allOf members

    /// <summary>
    /// Ad group ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Advertiser ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string const& value);
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();
    /// <summary>
    /// Ad group creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t const value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// Ad group last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t const value);
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();
    /// <summary>
    /// Always \&quot;adgroup\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// oCPM learn mode
    /// </summary>
    std::string getConversionLearningModeType() const;
    void setConversionLearningModeType(std::string const& value);
    bool conversionLearningModeTypeIsSet() const;
    void unsetConversion_learning_mode_type();
    /// <summary>
    /// Ad group summary status.
    /// </summary>
    AdGroupSummaryStatus getSummaryStatus() const;
    void setSummaryStatus(AdGroupSummaryStatus const& value);
    bool summaryStatusIsSet() const;
    void unsetSummary_status();
    /// <summary>
    /// Feed Profile ID associated to the adgroup.
    /// </summary>
    std::string getFeedProfileId() const;
    void setFeedProfileId(std::string const& value);
    bool feedProfileIdIsSet() const;
    void unsetFeed_profile_id();
    /// <summary>
    /// [DCA] The Dynamic creative assets to use for DCA. Dynamic Creative Assembly (DCA) accepts basic creative assets of an ad (image, video, title, call to action, logo etc). Then it automatically generates optimized ad combinations based on these assets.
    /// </summary>
    org::openapitools::server::model::AnyType getDcaAssets() const;
    void setDcaAssets(org::openapitools::server::model::AnyType const& value);
    bool dcaAssetsIsSet() const;
    void unsetDca_assets();

    friend void to_json(nlohmann::json& j, const AdGroupResponse_allOf& o);
    friend void from_json(const nlohmann::json& j, AdGroupResponse_allOf& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    std::string m_Conversion_learning_mode_type;
    bool m_Conversion_learning_mode_typeIsSet;
    AdGroupSummaryStatus m_Summary_status;
    bool m_Summary_statusIsSet;
    std::string m_Feed_profile_id;
    bool m_Feed_profile_idIsSet;
    org::openapitools::server::model::AnyType m_Dca_assets;
    bool m_Dca_assetsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdGroupResponse_allOf_H_ */
