/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsProductMetadata.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsProductMetadata::CatalogsProductMetadata()
{
    m_Item_id = "";
    m_Item_group_id = "";
    m_Price = 0.0;
    m_Sale_price = 0.0;
    
}

void CatalogsProductMetadata::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsProductMetadata::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsProductMetadata::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsProductMetadata" : pathPrefix;

                            
    return success;
}

bool CatalogsProductMetadata::operator==(const CatalogsProductMetadata& rhs) const
{
    return
    
    
    (getItemId() == rhs.getItemId())
     &&
    
    (getItemGroupId() == rhs.getItemGroupId())
     &&
    
    (getAvailability() == rhs.getAvailability())
     &&
    
    (getPrice() == rhs.getPrice())
     &&
    
    (getSalePrice() == rhs.getSalePrice())
     &&
    
    (getCurrency() == rhs.getCurrency())
    
    
    ;
}

bool CatalogsProductMetadata::operator!=(const CatalogsProductMetadata& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsProductMetadata& o)
{
    j = nlohmann::json::object();
    j["item_id"] = o.m_Item_id;
    j["item_group_id"] = o.m_Item_group_id;
    j["availability"] = o.m_Availability;
    j["price"] = o.m_Price;
    j["sale_price"] = o.m_Sale_price;
    j["currency"] = o.m_Currency;
    
}

void from_json(const nlohmann::json& j, CatalogsProductMetadata& o)
{
    j.at("item_id").get_to(o.m_Item_id);
    j.at("item_group_id").get_to(o.m_Item_group_id);
    j.at("availability").get_to(o.m_Availability);
    j.at("price").get_to(o.m_Price);
    j.at("sale_price").get_to(o.m_Sale_price);
    j.at("currency").get_to(o.m_Currency);
    
}

std::string CatalogsProductMetadata::getItemId() const
{
    return m_Item_id;
}
void CatalogsProductMetadata::setItemId(std::string const& value)
{
    m_Item_id = value;
}
std::string CatalogsProductMetadata::getItemGroupId() const
{
    return m_Item_group_id;
}
void CatalogsProductMetadata::setItemGroupId(std::string const& value)
{
    m_Item_group_id = value;
}
org::openapitools::server::model::NonNullableProductAvailabilityType CatalogsProductMetadata::getAvailability() const
{
    return m_Availability;
}
void CatalogsProductMetadata::setAvailability(org::openapitools::server::model::NonNullableProductAvailabilityType const& value)
{
    m_Availability = value;
}
double CatalogsProductMetadata::getPrice() const
{
    return m_Price;
}
void CatalogsProductMetadata::setPrice(double const value)
{
    m_Price = value;
}
double CatalogsProductMetadata::getSalePrice() const
{
    return m_Sale_price;
}
void CatalogsProductMetadata::setSalePrice(double const value)
{
    m_Sale_price = value;
}
org::openapitools::server::model::NonNullableCatalogsCurrency CatalogsProductMetadata::getCurrency() const
{
    return m_Currency;
}
void CatalogsProductMetadata::setCurrency(org::openapitools::server::model::NonNullableCatalogsCurrency const& value)
{
    m_Currency = value;
}


} // namespace org::openapitools::server::model

