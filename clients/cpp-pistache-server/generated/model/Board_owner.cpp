/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Board_owner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Board_owner::Board_owner()
{
    m_Username = "";
    m_UsernameIsSet = false;
    
}

void Board_owner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Board_owner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Board_owner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Board_owner" : pathPrefix;

        
    return success;
}

bool Board_owner::operator==(const Board_owner& rhs) const
{
    return
    
    
    
    ((!usernameIsSet() && !rhs.usernameIsSet()) || (usernameIsSet() && rhs.usernameIsSet() && getUsername() == rhs.getUsername()))
    
    ;
}

bool Board_owner::operator!=(const Board_owner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Board_owner& o)
{
    j = nlohmann::json::object();
    if(o.usernameIsSet())
        j["username"] = o.m_Username;
    
}

void from_json(const nlohmann::json& j, Board_owner& o)
{
    if(j.find("username") != j.end())
    {
        j.at("username").get_to(o.m_Username);
        o.m_UsernameIsSet = true;
    } 
    
}

std::string Board_owner::getUsername() const
{
    return m_Username;
}
void Board_owner::setUsername(std::string const& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool Board_owner::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void Board_owner::unsetUsername()
{
    m_UsernameIsSet = false;
}


} // namespace org::openapitools::server::model

