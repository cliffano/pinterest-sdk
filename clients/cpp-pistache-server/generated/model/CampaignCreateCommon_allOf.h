/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CampaignCreateCommon_allOf.h
 *
 * 
 */

#ifndef CampaignCreateCommon_allOf_H_
#define CampaignCreateCommon_allOf_H_


#include "EntityStatus.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  CampaignCreateCommon_allOf
{
public:
    CampaignCreateCommon_allOf();
    virtual ~CampaignCreateCommon_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CampaignCreateCommon_allOf& rhs) const;
    bool operator!=(const CampaignCreateCommon_allOf& rhs) const;

    /////////////////////////////////////////////
    /// CampaignCreateCommon_allOf members

    /// <summary>
    /// 
    /// </summary>
    EntityStatus getStatus() const;
    void setStatus(EntityStatus const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    bool isIsCampaignBudgetOptimization() const;
    void setIsCampaignBudgetOptimization(bool const value);
    bool isCampaignBudgetOptimizationIsSet() const;
    void unsetIs_campaign_budget_optimization();
    /// <summary>
    /// 
    /// </summary>
    bool isIsFlexibleDailyBudgets() const;
    void setIsFlexibleDailyBudgets(bool const value);
    bool isFlexibleDailyBudgetsIsSet() const;
    void unsetIs_flexible_daily_budgets();
    /// <summary>
    /// When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
    /// </summary>
    int32_t getDefaultAdGroupBudgetInMicroCurrency() const;
    void setDefaultAdGroupBudgetInMicroCurrency(int32_t const value);
    bool defaultAdGroupBudgetInMicroCurrencyIsSet() const;
    void unsetDefault_ad_group_budget_in_micro_currency();
    /// <summary>
    /// 
    /// </summary>
    bool isIsAutomatedCampaign() const;
    void setIsAutomatedCampaign(bool const value);
    bool isAutomatedCampaignIsSet() const;
    void unsetIs_automated_campaign();

    friend void to_json(nlohmann::json& j, const CampaignCreateCommon_allOf& o);
    friend void from_json(const nlohmann::json& j, CampaignCreateCommon_allOf& o);
protected:
    EntityStatus m_Status;
    bool m_StatusIsSet;
    bool m_Is_campaign_budget_optimization;
    bool m_Is_campaign_budget_optimizationIsSet;
    bool m_Is_flexible_daily_budgets;
    bool m_Is_flexible_daily_budgetsIsSet;
    int32_t m_Default_ad_group_budget_in_micro_currency;
    bool m_Default_ad_group_budget_in_micro_currencyIsSet;
    bool m_Is_automated_campaign;
    bool m_Is_automated_campaignIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* CampaignCreateCommon_allOf_H_ */
