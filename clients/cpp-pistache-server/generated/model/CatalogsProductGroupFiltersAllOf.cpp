/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsProductGroupFiltersAllOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsProductGroupFiltersAllOf::CatalogsProductGroupFiltersAllOf()
{
    m_All_ofIsSet = false;
    
}

void CatalogsProductGroupFiltersAllOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsProductGroupFiltersAllOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsProductGroupFiltersAllOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsProductGroupFiltersAllOf" : pathPrefix;

         
    if (allOfIsSet())
    {
        const std::vector<CatalogsProductGroupFilterKeys>& value = m_All_of;
        const std::string currentValuePath = _pathPrefix + ".allOf";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const CatalogsProductGroupFilterKeys& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CatalogsProductGroupFiltersAllOf::operator==(const CatalogsProductGroupFiltersAllOf& rhs) const
{
    return
    
    
    
    ((!allOfIsSet() && !rhs.allOfIsSet()) || (allOfIsSet() && rhs.allOfIsSet() && getAllOf() == rhs.getAllOf()))
    
    ;
}

bool CatalogsProductGroupFiltersAllOf::operator!=(const CatalogsProductGroupFiltersAllOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsProductGroupFiltersAllOf& o)
{
    j = nlohmann::json();
    if(o.allOfIsSet() || !o.m_All_of.empty())
        j["all_of"] = o.m_All_of;
    
}

void from_json(const nlohmann::json& j, CatalogsProductGroupFiltersAllOf& o)
{
    if(j.find("all_of") != j.end())
    {
        j.at("all_of").get_to(o.m_All_of);
        o.m_All_ofIsSet = true;
    } 
    
}

std::vector<CatalogsProductGroupFilterKeys> CatalogsProductGroupFiltersAllOf::getAllOf() const
{
    return m_All_of;
}
void CatalogsProductGroupFiltersAllOf::setAllOf(std::vector<CatalogsProductGroupFilterKeys> const& value)
{
    m_All_of = value;
    m_All_ofIsSet = true;
}
bool CatalogsProductGroupFiltersAllOf::allOfIsSet() const
{
    return m_All_ofIsSet;
}
void CatalogsProductGroupFiltersAllOf::unsetAll_of()
{
    m_All_ofIsSet = false;
}


} // namespace org::openapitools::server::model

