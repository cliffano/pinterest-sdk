/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CampaignResponse_allOf_1.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CampaignResponse_allOf_1::CampaignResponse_allOf_1()
{
    m_Objective_typeIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    
}

void CampaignResponse_allOf_1::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CampaignResponse_allOf_1::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CampaignResponse_allOf_1::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CampaignResponse_allOf_1" : pathPrefix;

                    
    return success;
}

bool CampaignResponse_allOf_1::operator==(const CampaignResponse_allOf_1& rhs) const
{
    return
    
    
    
    ((!objectiveTypeIsSet() && !rhs.objectiveTypeIsSet()) || (objectiveTypeIsSet() && rhs.objectiveTypeIsSet() && getObjectiveType() == rhs.getObjectiveType())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime())) &&
    
    
    ((!updatedTimeIsSet() && !rhs.updatedTimeIsSet()) || (updatedTimeIsSet() && rhs.updatedTimeIsSet() && getUpdatedTime() == rhs.getUpdatedTime())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType()))
    
    ;
}

bool CampaignResponse_allOf_1::operator!=(const CampaignResponse_allOf_1& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CampaignResponse_allOf_1& o)
{
    j = nlohmann::json();
    if(o.objectiveTypeIsSet())
        j["objective_type"] = o.m_Objective_type;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    if(o.updatedTimeIsSet())
        j["updated_time"] = o.m_Updated_time;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    
}

void from_json(const nlohmann::json& j, CampaignResponse_allOf_1& o)
{
    if(j.find("objective_type") != j.end())
    {
        j.at("objective_type").get_to(o.m_Objective_type);
        o.m_Objective_typeIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    if(j.find("updated_time") != j.end())
    {
        j.at("updated_time").get_to(o.m_Updated_time);
        o.m_Updated_timeIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    
}

ObjectiveType CampaignResponse_allOf_1::getObjectiveType() const
{
    return m_Objective_type;
}
void CampaignResponse_allOf_1::setObjectiveType(ObjectiveType const& value)
{
    m_Objective_type = value;
    m_Objective_typeIsSet = true;
}
bool CampaignResponse_allOf_1::objectiveTypeIsSet() const
{
    return m_Objective_typeIsSet;
}
void CampaignResponse_allOf_1::unsetObjective_type()
{
    m_Objective_typeIsSet = false;
}
int32_t CampaignResponse_allOf_1::getCreatedTime() const
{
    return m_Created_time;
}
void CampaignResponse_allOf_1::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool CampaignResponse_allOf_1::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void CampaignResponse_allOf_1::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t CampaignResponse_allOf_1::getUpdatedTime() const
{
    return m_Updated_time;
}
void CampaignResponse_allOf_1::setUpdatedTime(int32_t const value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}
bool CampaignResponse_allOf_1::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}
void CampaignResponse_allOf_1::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
std::string CampaignResponse_allOf_1::getType() const
{
    return m_Type;
}
void CampaignResponse_allOf_1::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool CampaignResponse_allOf_1::typeIsSet() const
{
    return m_TypeIsSet;
}
void CampaignResponse_allOf_1::unsetType()
{
    m_TypeIsSet = false;
}


} // namespace org::openapitools::server::model

