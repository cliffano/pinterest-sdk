/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ItemAttributes_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ItemAttributes_allOf::ItemAttributes_allOf()
{
    m_Additional_image_linkIsSet = false;
    m_Image_linkIsSet = false;
    
}

void ItemAttributes_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ItemAttributes_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ItemAttributes_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ItemAttributes_allOf" : pathPrefix;

         
    if (additionalImageLinkIsSet())
    {
        const std::vector<std::string>& value = m_Additional_image_link;
        const std::string currentValuePath = _pathPrefix + ".additionalImageLink";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (imageLinkIsSet())
    {
        const std::vector<std::string>& value = m_Image_link;
        const std::string currentValuePath = _pathPrefix + ".imageLink";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool ItemAttributes_allOf::operator==(const ItemAttributes_allOf& rhs) const
{
    return
    
    
    
    ((!additionalImageLinkIsSet() && !rhs.additionalImageLinkIsSet()) || (additionalImageLinkIsSet() && rhs.additionalImageLinkIsSet() && getAdditionalImageLink() == rhs.getAdditionalImageLink())) &&
    
    
    ((!imageLinkIsSet() && !rhs.imageLinkIsSet()) || (imageLinkIsSet() && rhs.imageLinkIsSet() && getImageLink() == rhs.getImageLink()))
    
    ;
}

bool ItemAttributes_allOf::operator!=(const ItemAttributes_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ItemAttributes_allOf& o)
{
    j = nlohmann::json();
    if(o.additionalImageLinkIsSet() || !o.m_Additional_image_link.empty())
        j["additional_image_link"] = o.m_Additional_image_link;
    if(o.imageLinkIsSet() || !o.m_Image_link.empty())
        j["image_link"] = o.m_Image_link;
    
}

void from_json(const nlohmann::json& j, ItemAttributes_allOf& o)
{
    if(j.find("additional_image_link") != j.end())
    {
        j.at("additional_image_link").get_to(o.m_Additional_image_link);
        o.m_Additional_image_linkIsSet = true;
    } 
    if(j.find("image_link") != j.end())
    {
        j.at("image_link").get_to(o.m_Image_link);
        o.m_Image_linkIsSet = true;
    } 
    
}

std::vector<std::string> ItemAttributes_allOf::getAdditionalImageLink() const
{
    return m_Additional_image_link;
}
void ItemAttributes_allOf::setAdditionalImageLink(std::vector<std::string> const& value)
{
    m_Additional_image_link = value;
    m_Additional_image_linkIsSet = true;
}
bool ItemAttributes_allOf::additionalImageLinkIsSet() const
{
    return m_Additional_image_linkIsSet;
}
void ItemAttributes_allOf::unsetAdditional_image_link()
{
    m_Additional_image_linkIsSet = false;
}
std::vector<std::string> ItemAttributes_allOf::getImageLink() const
{
    return m_Image_link;
}
void ItemAttributes_allOf::setImageLink(std::vector<std::string> const& value)
{
    m_Image_link = value;
    m_Image_linkIsSet = true;
}
bool ItemAttributes_allOf::imageLinkIsSet() const
{
    return m_Image_linkIsSet;
}
void ItemAttributes_allOf::unsetImage_link()
{
    m_Image_linkIsSet = false;
}


} // namespace org::openapitools::server::model

