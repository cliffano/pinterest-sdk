/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CatalogsFeedValidationErrors.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CatalogsFeedValidationErrors::CatalogsFeedValidationErrors()
{
    m_Fetch_error = 0;
    m_Fetch_errorIsSet = false;
    m_Fetch_inactive_feed_error = 0;
    m_Fetch_inactive_feed_errorIsSet = false;
    m_Encoding_error = 0;
    m_Encoding_errorIsSet = false;
    m_Delimiter_error = 0;
    m_Delimiter_errorIsSet = false;
    m_Required_columns_missing = 0;
    m_Required_columns_missingIsSet = false;
    m_Image_link_invalid = 0;
    m_Image_link_invalidIsSet = false;
    m_Itemid_missing = 0;
    m_Itemid_missingIsSet = false;
    m_Title_missing = 0;
    m_Title_missingIsSet = false;
    m_Description_missing = 0;
    m_Description_missingIsSet = false;
    m_Product_category_invalid = 0;
    m_Product_category_invalidIsSet = false;
    m_Product_link_missing = 0;
    m_Product_link_missingIsSet = false;
    m_Image_link_missing = 0;
    m_Image_link_missingIsSet = false;
    m_Availability_invalid = 0;
    m_Availability_invalidIsSet = false;
    m_Product_price_invalid = 0;
    m_Product_price_invalidIsSet = false;
    m_Link_format_invalid = 0;
    m_Link_format_invalidIsSet = false;
    m_Parse_line_error = 0;
    m_Parse_line_errorIsSet = false;
    m_Adwords_format_invalid = 0;
    m_Adwords_format_invalidIsSet = false;
    m_Product_category_missing = 0;
    m_Product_category_missingIsSet = false;
    m_Internal_service_error = 0;
    m_Internal_service_errorIsSet = false;
    m_No_verified_domain = 0;
    m_No_verified_domainIsSet = false;
    m_Adult_invalid = 0;
    m_Adult_invalidIsSet = false;
    m_Invalid_domain = 0;
    m_Invalid_domainIsSet = false;
    m_Feed_length_too_long = 0;
    m_Feed_length_too_longIsSet = false;
    m_Link_length_too_long = 0;
    m_Link_length_too_longIsSet = false;
    m_Malformed_xml = 0;
    m_Malformed_xmlIsSet = false;
    m_Redirect_invalid = 0;
    m_Redirect_invalidIsSet = false;
    m_Price_missing = 0;
    m_Price_missingIsSet = false;
    m_Feed_too_small = 0;
    m_Feed_too_smallIsSet = false;
    m_Condition_invalid = 0;
    m_Condition_invalidIsSet = false;
    m_Shopify_no_products = 0;
    m_Shopify_no_productsIsSet = false;
    m_Max_items_per_item_group_exceeded = 0;
    m_Max_items_per_item_group_exceededIsSet = false;
    m_Item_main_image_download_failure = 0;
    m_Item_main_image_download_failureIsSet = false;
    m_Pinjoin_content_unsafe = 0;
    m_Pinjoin_content_unsafeIsSet = false;
    m_Blocklisted_image_signature = 0;
    m_Blocklisted_image_signatureIsSet = false;
    
}

void CatalogsFeedValidationErrors::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CatalogsFeedValidationErrors::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CatalogsFeedValidationErrors::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CatalogsFeedValidationErrors" : pathPrefix;

                                                                                                                                            
    return success;
}

bool CatalogsFeedValidationErrors::operator==(const CatalogsFeedValidationErrors& rhs) const
{
    return
    
    
    
    ((!fetchErrorIsSet() && !rhs.fetchErrorIsSet()) || (fetchErrorIsSet() && rhs.fetchErrorIsSet() && getFetchError() == rhs.getFetchError())) &&
    
    
    ((!fetchInactiveFeedErrorIsSet() && !rhs.fetchInactiveFeedErrorIsSet()) || (fetchInactiveFeedErrorIsSet() && rhs.fetchInactiveFeedErrorIsSet() && getFetchInactiveFeedError() == rhs.getFetchInactiveFeedError())) &&
    
    
    ((!encodingErrorIsSet() && !rhs.encodingErrorIsSet()) || (encodingErrorIsSet() && rhs.encodingErrorIsSet() && getEncodingError() == rhs.getEncodingError())) &&
    
    
    ((!delimiterErrorIsSet() && !rhs.delimiterErrorIsSet()) || (delimiterErrorIsSet() && rhs.delimiterErrorIsSet() && getDelimiterError() == rhs.getDelimiterError())) &&
    
    
    ((!requiredColumnsMissingIsSet() && !rhs.requiredColumnsMissingIsSet()) || (requiredColumnsMissingIsSet() && rhs.requiredColumnsMissingIsSet() && getRequiredColumnsMissing() == rhs.getRequiredColumnsMissing())) &&
    
    
    ((!imageLinkInvalidIsSet() && !rhs.imageLinkInvalidIsSet()) || (imageLinkInvalidIsSet() && rhs.imageLinkInvalidIsSet() && getImageLinkInvalid() == rhs.getImageLinkInvalid())) &&
    
    
    ((!itemidMissingIsSet() && !rhs.itemidMissingIsSet()) || (itemidMissingIsSet() && rhs.itemidMissingIsSet() && getItemidMissing() == rhs.getItemidMissing())) &&
    
    
    ((!titleMissingIsSet() && !rhs.titleMissingIsSet()) || (titleMissingIsSet() && rhs.titleMissingIsSet() && getTitleMissing() == rhs.getTitleMissing())) &&
    
    
    ((!descriptionMissingIsSet() && !rhs.descriptionMissingIsSet()) || (descriptionMissingIsSet() && rhs.descriptionMissingIsSet() && getDescriptionMissing() == rhs.getDescriptionMissing())) &&
    
    
    ((!productCategoryInvalidIsSet() && !rhs.productCategoryInvalidIsSet()) || (productCategoryInvalidIsSet() && rhs.productCategoryInvalidIsSet() && getProductCategoryInvalid() == rhs.getProductCategoryInvalid())) &&
    
    
    ((!productLinkMissingIsSet() && !rhs.productLinkMissingIsSet()) || (productLinkMissingIsSet() && rhs.productLinkMissingIsSet() && getProductLinkMissing() == rhs.getProductLinkMissing())) &&
    
    
    ((!imageLinkMissingIsSet() && !rhs.imageLinkMissingIsSet()) || (imageLinkMissingIsSet() && rhs.imageLinkMissingIsSet() && getImageLinkMissing() == rhs.getImageLinkMissing())) &&
    
    
    ((!availabilityInvalidIsSet() && !rhs.availabilityInvalidIsSet()) || (availabilityInvalidIsSet() && rhs.availabilityInvalidIsSet() && getAvailabilityInvalid() == rhs.getAvailabilityInvalid())) &&
    
    
    ((!productPriceInvalidIsSet() && !rhs.productPriceInvalidIsSet()) || (productPriceInvalidIsSet() && rhs.productPriceInvalidIsSet() && getProductPriceInvalid() == rhs.getProductPriceInvalid())) &&
    
    
    ((!linkFormatInvalidIsSet() && !rhs.linkFormatInvalidIsSet()) || (linkFormatInvalidIsSet() && rhs.linkFormatInvalidIsSet() && getLinkFormatInvalid() == rhs.getLinkFormatInvalid())) &&
    
    
    ((!parseLineErrorIsSet() && !rhs.parseLineErrorIsSet()) || (parseLineErrorIsSet() && rhs.parseLineErrorIsSet() && getParseLineError() == rhs.getParseLineError())) &&
    
    
    ((!adwordsFormatInvalidIsSet() && !rhs.adwordsFormatInvalidIsSet()) || (adwordsFormatInvalidIsSet() && rhs.adwordsFormatInvalidIsSet() && getAdwordsFormatInvalid() == rhs.getAdwordsFormatInvalid())) &&
    
    
    ((!productCategoryMissingIsSet() && !rhs.productCategoryMissingIsSet()) || (productCategoryMissingIsSet() && rhs.productCategoryMissingIsSet() && getProductCategoryMissing() == rhs.getProductCategoryMissing())) &&
    
    
    ((!internalServiceErrorIsSet() && !rhs.internalServiceErrorIsSet()) || (internalServiceErrorIsSet() && rhs.internalServiceErrorIsSet() && getInternalServiceError() == rhs.getInternalServiceError())) &&
    
    
    ((!noVerifiedDomainIsSet() && !rhs.noVerifiedDomainIsSet()) || (noVerifiedDomainIsSet() && rhs.noVerifiedDomainIsSet() && getNoVerifiedDomain() == rhs.getNoVerifiedDomain())) &&
    
    
    ((!adultInvalidIsSet() && !rhs.adultInvalidIsSet()) || (adultInvalidIsSet() && rhs.adultInvalidIsSet() && getAdultInvalid() == rhs.getAdultInvalid())) &&
    
    
    ((!invalidDomainIsSet() && !rhs.invalidDomainIsSet()) || (invalidDomainIsSet() && rhs.invalidDomainIsSet() && getInvalidDomain() == rhs.getInvalidDomain())) &&
    
    
    ((!feedLengthTooLongIsSet() && !rhs.feedLengthTooLongIsSet()) || (feedLengthTooLongIsSet() && rhs.feedLengthTooLongIsSet() && getFeedLengthTooLong() == rhs.getFeedLengthTooLong())) &&
    
    
    ((!linkLengthTooLongIsSet() && !rhs.linkLengthTooLongIsSet()) || (linkLengthTooLongIsSet() && rhs.linkLengthTooLongIsSet() && getLinkLengthTooLong() == rhs.getLinkLengthTooLong())) &&
    
    
    ((!malformedXmlIsSet() && !rhs.malformedXmlIsSet()) || (malformedXmlIsSet() && rhs.malformedXmlIsSet() && getMalformedXml() == rhs.getMalformedXml())) &&
    
    
    ((!redirectInvalidIsSet() && !rhs.redirectInvalidIsSet()) || (redirectInvalidIsSet() && rhs.redirectInvalidIsSet() && getRedirectInvalid() == rhs.getRedirectInvalid())) &&
    
    
    ((!priceMissingIsSet() && !rhs.priceMissingIsSet()) || (priceMissingIsSet() && rhs.priceMissingIsSet() && getPriceMissing() == rhs.getPriceMissing())) &&
    
    
    ((!feedTooSmallIsSet() && !rhs.feedTooSmallIsSet()) || (feedTooSmallIsSet() && rhs.feedTooSmallIsSet() && getFeedTooSmall() == rhs.getFeedTooSmall())) &&
    
    
    ((!conditionInvalidIsSet() && !rhs.conditionInvalidIsSet()) || (conditionInvalidIsSet() && rhs.conditionInvalidIsSet() && getConditionInvalid() == rhs.getConditionInvalid())) &&
    
    
    ((!shopifyNoProductsIsSet() && !rhs.shopifyNoProductsIsSet()) || (shopifyNoProductsIsSet() && rhs.shopifyNoProductsIsSet() && getShopifyNoProducts() == rhs.getShopifyNoProducts())) &&
    
    
    ((!maxItemsPerItemGroupExceededIsSet() && !rhs.maxItemsPerItemGroupExceededIsSet()) || (maxItemsPerItemGroupExceededIsSet() && rhs.maxItemsPerItemGroupExceededIsSet() && getMaxItemsPerItemGroupExceeded() == rhs.getMaxItemsPerItemGroupExceeded())) &&
    
    
    ((!itemMainImageDownloadFailureIsSet() && !rhs.itemMainImageDownloadFailureIsSet()) || (itemMainImageDownloadFailureIsSet() && rhs.itemMainImageDownloadFailureIsSet() && getItemMainImageDownloadFailure() == rhs.getItemMainImageDownloadFailure())) &&
    
    
    ((!pinjoinContentUnsafeIsSet() && !rhs.pinjoinContentUnsafeIsSet()) || (pinjoinContentUnsafeIsSet() && rhs.pinjoinContentUnsafeIsSet() && getPinjoinContentUnsafe() == rhs.getPinjoinContentUnsafe())) &&
    
    
    ((!blocklistedImageSignatureIsSet() && !rhs.blocklistedImageSignatureIsSet()) || (blocklistedImageSignatureIsSet() && rhs.blocklistedImageSignatureIsSet() && getBlocklistedImageSignature() == rhs.getBlocklistedImageSignature()))
    
    ;
}

bool CatalogsFeedValidationErrors::operator!=(const CatalogsFeedValidationErrors& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CatalogsFeedValidationErrors& o)
{
    j = nlohmann::json();
    if(o.fetchErrorIsSet())
        j["fetch_error"] = o.m_Fetch_error;
    if(o.fetchInactiveFeedErrorIsSet())
        j["fetch_inactive_feed_error"] = o.m_Fetch_inactive_feed_error;
    if(o.encodingErrorIsSet())
        j["encoding_error"] = o.m_Encoding_error;
    if(o.delimiterErrorIsSet())
        j["delimiter_error"] = o.m_Delimiter_error;
    if(o.requiredColumnsMissingIsSet())
        j["required_columns_missing"] = o.m_Required_columns_missing;
    if(o.imageLinkInvalidIsSet())
        j["image_link_invalid"] = o.m_Image_link_invalid;
    if(o.itemidMissingIsSet())
        j["itemid_missing"] = o.m_Itemid_missing;
    if(o.titleMissingIsSet())
        j["title_missing"] = o.m_Title_missing;
    if(o.descriptionMissingIsSet())
        j["description_missing"] = o.m_Description_missing;
    if(o.productCategoryInvalidIsSet())
        j["product_category_invalid"] = o.m_Product_category_invalid;
    if(o.productLinkMissingIsSet())
        j["product_link_missing"] = o.m_Product_link_missing;
    if(o.imageLinkMissingIsSet())
        j["image_link_missing"] = o.m_Image_link_missing;
    if(o.availabilityInvalidIsSet())
        j["availability_invalid"] = o.m_Availability_invalid;
    if(o.productPriceInvalidIsSet())
        j["product_price_invalid"] = o.m_Product_price_invalid;
    if(o.linkFormatInvalidIsSet())
        j["link_format_invalid"] = o.m_Link_format_invalid;
    if(o.parseLineErrorIsSet())
        j["parse_line_error"] = o.m_Parse_line_error;
    if(o.adwordsFormatInvalidIsSet())
        j["adwords_format_invalid"] = o.m_Adwords_format_invalid;
    if(o.productCategoryMissingIsSet())
        j["product_category_missing"] = o.m_Product_category_missing;
    if(o.internalServiceErrorIsSet())
        j["internal_service_error"] = o.m_Internal_service_error;
    if(o.noVerifiedDomainIsSet())
        j["no_verified_domain"] = o.m_No_verified_domain;
    if(o.adultInvalidIsSet())
        j["adult_invalid"] = o.m_Adult_invalid;
    if(o.invalidDomainIsSet())
        j["invalid_domain"] = o.m_Invalid_domain;
    if(o.feedLengthTooLongIsSet())
        j["feed_length_too_long"] = o.m_Feed_length_too_long;
    if(o.linkLengthTooLongIsSet())
        j["link_length_too_long"] = o.m_Link_length_too_long;
    if(o.malformedXmlIsSet())
        j["malformed_xml"] = o.m_Malformed_xml;
    if(o.redirectInvalidIsSet())
        j["redirect_invalid"] = o.m_Redirect_invalid;
    if(o.priceMissingIsSet())
        j["price_missing"] = o.m_Price_missing;
    if(o.feedTooSmallIsSet())
        j["feed_too_small"] = o.m_Feed_too_small;
    if(o.conditionInvalidIsSet())
        j["condition_invalid"] = o.m_Condition_invalid;
    if(o.shopifyNoProductsIsSet())
        j["shopify_no_products"] = o.m_Shopify_no_products;
    if(o.maxItemsPerItemGroupExceededIsSet())
        j["max_items_per_item_group_exceeded"] = o.m_Max_items_per_item_group_exceeded;
    if(o.itemMainImageDownloadFailureIsSet())
        j["item_main_image_download_failure"] = o.m_Item_main_image_download_failure;
    if(o.pinjoinContentUnsafeIsSet())
        j["pinjoin_content_unsafe"] = o.m_Pinjoin_content_unsafe;
    if(o.blocklistedImageSignatureIsSet())
        j["blocklisted_image_signature"] = o.m_Blocklisted_image_signature;
    
}

void from_json(const nlohmann::json& j, CatalogsFeedValidationErrors& o)
{
    if(j.find("fetch_error") != j.end())
    {
        j.at("fetch_error").get_to(o.m_Fetch_error);
        o.m_Fetch_errorIsSet = true;
    } 
    if(j.find("fetch_inactive_feed_error") != j.end())
    {
        j.at("fetch_inactive_feed_error").get_to(o.m_Fetch_inactive_feed_error);
        o.m_Fetch_inactive_feed_errorIsSet = true;
    } 
    if(j.find("encoding_error") != j.end())
    {
        j.at("encoding_error").get_to(o.m_Encoding_error);
        o.m_Encoding_errorIsSet = true;
    } 
    if(j.find("delimiter_error") != j.end())
    {
        j.at("delimiter_error").get_to(o.m_Delimiter_error);
        o.m_Delimiter_errorIsSet = true;
    } 
    if(j.find("required_columns_missing") != j.end())
    {
        j.at("required_columns_missing").get_to(o.m_Required_columns_missing);
        o.m_Required_columns_missingIsSet = true;
    } 
    if(j.find("image_link_invalid") != j.end())
    {
        j.at("image_link_invalid").get_to(o.m_Image_link_invalid);
        o.m_Image_link_invalidIsSet = true;
    } 
    if(j.find("itemid_missing") != j.end())
    {
        j.at("itemid_missing").get_to(o.m_Itemid_missing);
        o.m_Itemid_missingIsSet = true;
    } 
    if(j.find("title_missing") != j.end())
    {
        j.at("title_missing").get_to(o.m_Title_missing);
        o.m_Title_missingIsSet = true;
    } 
    if(j.find("description_missing") != j.end())
    {
        j.at("description_missing").get_to(o.m_Description_missing);
        o.m_Description_missingIsSet = true;
    } 
    if(j.find("product_category_invalid") != j.end())
    {
        j.at("product_category_invalid").get_to(o.m_Product_category_invalid);
        o.m_Product_category_invalidIsSet = true;
    } 
    if(j.find("product_link_missing") != j.end())
    {
        j.at("product_link_missing").get_to(o.m_Product_link_missing);
        o.m_Product_link_missingIsSet = true;
    } 
    if(j.find("image_link_missing") != j.end())
    {
        j.at("image_link_missing").get_to(o.m_Image_link_missing);
        o.m_Image_link_missingIsSet = true;
    } 
    if(j.find("availability_invalid") != j.end())
    {
        j.at("availability_invalid").get_to(o.m_Availability_invalid);
        o.m_Availability_invalidIsSet = true;
    } 
    if(j.find("product_price_invalid") != j.end())
    {
        j.at("product_price_invalid").get_to(o.m_Product_price_invalid);
        o.m_Product_price_invalidIsSet = true;
    } 
    if(j.find("link_format_invalid") != j.end())
    {
        j.at("link_format_invalid").get_to(o.m_Link_format_invalid);
        o.m_Link_format_invalidIsSet = true;
    } 
    if(j.find("parse_line_error") != j.end())
    {
        j.at("parse_line_error").get_to(o.m_Parse_line_error);
        o.m_Parse_line_errorIsSet = true;
    } 
    if(j.find("adwords_format_invalid") != j.end())
    {
        j.at("adwords_format_invalid").get_to(o.m_Adwords_format_invalid);
        o.m_Adwords_format_invalidIsSet = true;
    } 
    if(j.find("product_category_missing") != j.end())
    {
        j.at("product_category_missing").get_to(o.m_Product_category_missing);
        o.m_Product_category_missingIsSet = true;
    } 
    if(j.find("internal_service_error") != j.end())
    {
        j.at("internal_service_error").get_to(o.m_Internal_service_error);
        o.m_Internal_service_errorIsSet = true;
    } 
    if(j.find("no_verified_domain") != j.end())
    {
        j.at("no_verified_domain").get_to(o.m_No_verified_domain);
        o.m_No_verified_domainIsSet = true;
    } 
    if(j.find("adult_invalid") != j.end())
    {
        j.at("adult_invalid").get_to(o.m_Adult_invalid);
        o.m_Adult_invalidIsSet = true;
    } 
    if(j.find("invalid_domain") != j.end())
    {
        j.at("invalid_domain").get_to(o.m_Invalid_domain);
        o.m_Invalid_domainIsSet = true;
    } 
    if(j.find("feed_length_too_long") != j.end())
    {
        j.at("feed_length_too_long").get_to(o.m_Feed_length_too_long);
        o.m_Feed_length_too_longIsSet = true;
    } 
    if(j.find("link_length_too_long") != j.end())
    {
        j.at("link_length_too_long").get_to(o.m_Link_length_too_long);
        o.m_Link_length_too_longIsSet = true;
    } 
    if(j.find("malformed_xml") != j.end())
    {
        j.at("malformed_xml").get_to(o.m_Malformed_xml);
        o.m_Malformed_xmlIsSet = true;
    } 
    if(j.find("redirect_invalid") != j.end())
    {
        j.at("redirect_invalid").get_to(o.m_Redirect_invalid);
        o.m_Redirect_invalidIsSet = true;
    } 
    if(j.find("price_missing") != j.end())
    {
        j.at("price_missing").get_to(o.m_Price_missing);
        o.m_Price_missingIsSet = true;
    } 
    if(j.find("feed_too_small") != j.end())
    {
        j.at("feed_too_small").get_to(o.m_Feed_too_small);
        o.m_Feed_too_smallIsSet = true;
    } 
    if(j.find("condition_invalid") != j.end())
    {
        j.at("condition_invalid").get_to(o.m_Condition_invalid);
        o.m_Condition_invalidIsSet = true;
    } 
    if(j.find("shopify_no_products") != j.end())
    {
        j.at("shopify_no_products").get_to(o.m_Shopify_no_products);
        o.m_Shopify_no_productsIsSet = true;
    } 
    if(j.find("max_items_per_item_group_exceeded") != j.end())
    {
        j.at("max_items_per_item_group_exceeded").get_to(o.m_Max_items_per_item_group_exceeded);
        o.m_Max_items_per_item_group_exceededIsSet = true;
    } 
    if(j.find("item_main_image_download_failure") != j.end())
    {
        j.at("item_main_image_download_failure").get_to(o.m_Item_main_image_download_failure);
        o.m_Item_main_image_download_failureIsSet = true;
    } 
    if(j.find("pinjoin_content_unsafe") != j.end())
    {
        j.at("pinjoin_content_unsafe").get_to(o.m_Pinjoin_content_unsafe);
        o.m_Pinjoin_content_unsafeIsSet = true;
    } 
    if(j.find("blocklisted_image_signature") != j.end())
    {
        j.at("blocklisted_image_signature").get_to(o.m_Blocklisted_image_signature);
        o.m_Blocklisted_image_signatureIsSet = true;
    } 
    
}

int32_t CatalogsFeedValidationErrors::getFetchError() const
{
    return m_Fetch_error;
}
void CatalogsFeedValidationErrors::setFetchError(int32_t const value)
{
    m_Fetch_error = value;
    m_Fetch_errorIsSet = true;
}
bool CatalogsFeedValidationErrors::fetchErrorIsSet() const
{
    return m_Fetch_errorIsSet;
}
void CatalogsFeedValidationErrors::unsetFetch_error()
{
    m_Fetch_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFetchInactiveFeedError() const
{
    return m_Fetch_inactive_feed_error;
}
void CatalogsFeedValidationErrors::setFetchInactiveFeedError(int32_t const value)
{
    m_Fetch_inactive_feed_error = value;
    m_Fetch_inactive_feed_errorIsSet = true;
}
bool CatalogsFeedValidationErrors::fetchInactiveFeedErrorIsSet() const
{
    return m_Fetch_inactive_feed_errorIsSet;
}
void CatalogsFeedValidationErrors::unsetFetch_inactive_feed_error()
{
    m_Fetch_inactive_feed_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getEncodingError() const
{
    return m_Encoding_error;
}
void CatalogsFeedValidationErrors::setEncodingError(int32_t const value)
{
    m_Encoding_error = value;
    m_Encoding_errorIsSet = true;
}
bool CatalogsFeedValidationErrors::encodingErrorIsSet() const
{
    return m_Encoding_errorIsSet;
}
void CatalogsFeedValidationErrors::unsetEncoding_error()
{
    m_Encoding_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDelimiterError() const
{
    return m_Delimiter_error;
}
void CatalogsFeedValidationErrors::setDelimiterError(int32_t const value)
{
    m_Delimiter_error = value;
    m_Delimiter_errorIsSet = true;
}
bool CatalogsFeedValidationErrors::delimiterErrorIsSet() const
{
    return m_Delimiter_errorIsSet;
}
void CatalogsFeedValidationErrors::unsetDelimiter_error()
{
    m_Delimiter_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getRequiredColumnsMissing() const
{
    return m_Required_columns_missing;
}
void CatalogsFeedValidationErrors::setRequiredColumnsMissing(int32_t const value)
{
    m_Required_columns_missing = value;
    m_Required_columns_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::requiredColumnsMissingIsSet() const
{
    return m_Required_columns_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetRequired_columns_missing()
{
    m_Required_columns_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getImageLinkInvalid() const
{
    return m_Image_link_invalid;
}
void CatalogsFeedValidationErrors::setImageLinkInvalid(int32_t const value)
{
    m_Image_link_invalid = value;
    m_Image_link_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::imageLinkInvalidIsSet() const
{
    return m_Image_link_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetImage_link_invalid()
{
    m_Image_link_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getItemidMissing() const
{
    return m_Itemid_missing;
}
void CatalogsFeedValidationErrors::setItemidMissing(int32_t const value)
{
    m_Itemid_missing = value;
    m_Itemid_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::itemidMissingIsSet() const
{
    return m_Itemid_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetItemid_missing()
{
    m_Itemid_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getTitleMissing() const
{
    return m_Title_missing;
}
void CatalogsFeedValidationErrors::setTitleMissing(int32_t const value)
{
    m_Title_missing = value;
    m_Title_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::titleMissingIsSet() const
{
    return m_Title_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetTitle_missing()
{
    m_Title_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getDescriptionMissing() const
{
    return m_Description_missing;
}
void CatalogsFeedValidationErrors::setDescriptionMissing(int32_t const value)
{
    m_Description_missing = value;
    m_Description_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::descriptionMissingIsSet() const
{
    return m_Description_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetDescription_missing()
{
    m_Description_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductCategoryInvalid() const
{
    return m_Product_category_invalid;
}
void CatalogsFeedValidationErrors::setProductCategoryInvalid(int32_t const value)
{
    m_Product_category_invalid = value;
    m_Product_category_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::productCategoryInvalidIsSet() const
{
    return m_Product_category_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetProduct_category_invalid()
{
    m_Product_category_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductLinkMissing() const
{
    return m_Product_link_missing;
}
void CatalogsFeedValidationErrors::setProductLinkMissing(int32_t const value)
{
    m_Product_link_missing = value;
    m_Product_link_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::productLinkMissingIsSet() const
{
    return m_Product_link_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetProduct_link_missing()
{
    m_Product_link_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getImageLinkMissing() const
{
    return m_Image_link_missing;
}
void CatalogsFeedValidationErrors::setImageLinkMissing(int32_t const value)
{
    m_Image_link_missing = value;
    m_Image_link_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::imageLinkMissingIsSet() const
{
    return m_Image_link_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetImage_link_missing()
{
    m_Image_link_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAvailabilityInvalid() const
{
    return m_Availability_invalid;
}
void CatalogsFeedValidationErrors::setAvailabilityInvalid(int32_t const value)
{
    m_Availability_invalid = value;
    m_Availability_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::availabilityInvalidIsSet() const
{
    return m_Availability_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetAvailability_invalid()
{
    m_Availability_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductPriceInvalid() const
{
    return m_Product_price_invalid;
}
void CatalogsFeedValidationErrors::setProductPriceInvalid(int32_t const value)
{
    m_Product_price_invalid = value;
    m_Product_price_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::productPriceInvalidIsSet() const
{
    return m_Product_price_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetProduct_price_invalid()
{
    m_Product_price_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLinkFormatInvalid() const
{
    return m_Link_format_invalid;
}
void CatalogsFeedValidationErrors::setLinkFormatInvalid(int32_t const value)
{
    m_Link_format_invalid = value;
    m_Link_format_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::linkFormatInvalidIsSet() const
{
    return m_Link_format_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetLink_format_invalid()
{
    m_Link_format_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getParseLineError() const
{
    return m_Parse_line_error;
}
void CatalogsFeedValidationErrors::setParseLineError(int32_t const value)
{
    m_Parse_line_error = value;
    m_Parse_line_errorIsSet = true;
}
bool CatalogsFeedValidationErrors::parseLineErrorIsSet() const
{
    return m_Parse_line_errorIsSet;
}
void CatalogsFeedValidationErrors::unsetParse_line_error()
{
    m_Parse_line_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAdwordsFormatInvalid() const
{
    return m_Adwords_format_invalid;
}
void CatalogsFeedValidationErrors::setAdwordsFormatInvalid(int32_t const value)
{
    m_Adwords_format_invalid = value;
    m_Adwords_format_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::adwordsFormatInvalidIsSet() const
{
    return m_Adwords_format_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetAdwords_format_invalid()
{
    m_Adwords_format_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getProductCategoryMissing() const
{
    return m_Product_category_missing;
}
void CatalogsFeedValidationErrors::setProductCategoryMissing(int32_t const value)
{
    m_Product_category_missing = value;
    m_Product_category_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::productCategoryMissingIsSet() const
{
    return m_Product_category_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetProduct_category_missing()
{
    m_Product_category_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getInternalServiceError() const
{
    return m_Internal_service_error;
}
void CatalogsFeedValidationErrors::setInternalServiceError(int32_t const value)
{
    m_Internal_service_error = value;
    m_Internal_service_errorIsSet = true;
}
bool CatalogsFeedValidationErrors::internalServiceErrorIsSet() const
{
    return m_Internal_service_errorIsSet;
}
void CatalogsFeedValidationErrors::unsetInternal_service_error()
{
    m_Internal_service_errorIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getNoVerifiedDomain() const
{
    return m_No_verified_domain;
}
void CatalogsFeedValidationErrors::setNoVerifiedDomain(int32_t const value)
{
    m_No_verified_domain = value;
    m_No_verified_domainIsSet = true;
}
bool CatalogsFeedValidationErrors::noVerifiedDomainIsSet() const
{
    return m_No_verified_domainIsSet;
}
void CatalogsFeedValidationErrors::unsetNo_verified_domain()
{
    m_No_verified_domainIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getAdultInvalid() const
{
    return m_Adult_invalid;
}
void CatalogsFeedValidationErrors::setAdultInvalid(int32_t const value)
{
    m_Adult_invalid = value;
    m_Adult_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::adultInvalidIsSet() const
{
    return m_Adult_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetAdult_invalid()
{
    m_Adult_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getInvalidDomain() const
{
    return m_Invalid_domain;
}
void CatalogsFeedValidationErrors::setInvalidDomain(int32_t const value)
{
    m_Invalid_domain = value;
    m_Invalid_domainIsSet = true;
}
bool CatalogsFeedValidationErrors::invalidDomainIsSet() const
{
    return m_Invalid_domainIsSet;
}
void CatalogsFeedValidationErrors::unsetInvalid_domain()
{
    m_Invalid_domainIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFeedLengthTooLong() const
{
    return m_Feed_length_too_long;
}
void CatalogsFeedValidationErrors::setFeedLengthTooLong(int32_t const value)
{
    m_Feed_length_too_long = value;
    m_Feed_length_too_longIsSet = true;
}
bool CatalogsFeedValidationErrors::feedLengthTooLongIsSet() const
{
    return m_Feed_length_too_longIsSet;
}
void CatalogsFeedValidationErrors::unsetFeed_length_too_long()
{
    m_Feed_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getLinkLengthTooLong() const
{
    return m_Link_length_too_long;
}
void CatalogsFeedValidationErrors::setLinkLengthTooLong(int32_t const value)
{
    m_Link_length_too_long = value;
    m_Link_length_too_longIsSet = true;
}
bool CatalogsFeedValidationErrors::linkLengthTooLongIsSet() const
{
    return m_Link_length_too_longIsSet;
}
void CatalogsFeedValidationErrors::unsetLink_length_too_long()
{
    m_Link_length_too_longIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getMalformedXml() const
{
    return m_Malformed_xml;
}
void CatalogsFeedValidationErrors::setMalformedXml(int32_t const value)
{
    m_Malformed_xml = value;
    m_Malformed_xmlIsSet = true;
}
bool CatalogsFeedValidationErrors::malformedXmlIsSet() const
{
    return m_Malformed_xmlIsSet;
}
void CatalogsFeedValidationErrors::unsetMalformed_xml()
{
    m_Malformed_xmlIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getRedirectInvalid() const
{
    return m_Redirect_invalid;
}
void CatalogsFeedValidationErrors::setRedirectInvalid(int32_t const value)
{
    m_Redirect_invalid = value;
    m_Redirect_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::redirectInvalidIsSet() const
{
    return m_Redirect_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetRedirect_invalid()
{
    m_Redirect_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPriceMissing() const
{
    return m_Price_missing;
}
void CatalogsFeedValidationErrors::setPriceMissing(int32_t const value)
{
    m_Price_missing = value;
    m_Price_missingIsSet = true;
}
bool CatalogsFeedValidationErrors::priceMissingIsSet() const
{
    return m_Price_missingIsSet;
}
void CatalogsFeedValidationErrors::unsetPrice_missing()
{
    m_Price_missingIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getFeedTooSmall() const
{
    return m_Feed_too_small;
}
void CatalogsFeedValidationErrors::setFeedTooSmall(int32_t const value)
{
    m_Feed_too_small = value;
    m_Feed_too_smallIsSet = true;
}
bool CatalogsFeedValidationErrors::feedTooSmallIsSet() const
{
    return m_Feed_too_smallIsSet;
}
void CatalogsFeedValidationErrors::unsetFeed_too_small()
{
    m_Feed_too_smallIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getConditionInvalid() const
{
    return m_Condition_invalid;
}
void CatalogsFeedValidationErrors::setConditionInvalid(int32_t const value)
{
    m_Condition_invalid = value;
    m_Condition_invalidIsSet = true;
}
bool CatalogsFeedValidationErrors::conditionInvalidIsSet() const
{
    return m_Condition_invalidIsSet;
}
void CatalogsFeedValidationErrors::unsetCondition_invalid()
{
    m_Condition_invalidIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getShopifyNoProducts() const
{
    return m_Shopify_no_products;
}
void CatalogsFeedValidationErrors::setShopifyNoProducts(int32_t const value)
{
    m_Shopify_no_products = value;
    m_Shopify_no_productsIsSet = true;
}
bool CatalogsFeedValidationErrors::shopifyNoProductsIsSet() const
{
    return m_Shopify_no_productsIsSet;
}
void CatalogsFeedValidationErrors::unsetShopify_no_products()
{
    m_Shopify_no_productsIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getMaxItemsPerItemGroupExceeded() const
{
    return m_Max_items_per_item_group_exceeded;
}
void CatalogsFeedValidationErrors::setMaxItemsPerItemGroupExceeded(int32_t const value)
{
    m_Max_items_per_item_group_exceeded = value;
    m_Max_items_per_item_group_exceededIsSet = true;
}
bool CatalogsFeedValidationErrors::maxItemsPerItemGroupExceededIsSet() const
{
    return m_Max_items_per_item_group_exceededIsSet;
}
void CatalogsFeedValidationErrors::unsetMax_items_per_item_group_exceeded()
{
    m_Max_items_per_item_group_exceededIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getItemMainImageDownloadFailure() const
{
    return m_Item_main_image_download_failure;
}
void CatalogsFeedValidationErrors::setItemMainImageDownloadFailure(int32_t const value)
{
    m_Item_main_image_download_failure = value;
    m_Item_main_image_download_failureIsSet = true;
}
bool CatalogsFeedValidationErrors::itemMainImageDownloadFailureIsSet() const
{
    return m_Item_main_image_download_failureIsSet;
}
void CatalogsFeedValidationErrors::unsetItem_main_image_download_failure()
{
    m_Item_main_image_download_failureIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getPinjoinContentUnsafe() const
{
    return m_Pinjoin_content_unsafe;
}
void CatalogsFeedValidationErrors::setPinjoinContentUnsafe(int32_t const value)
{
    m_Pinjoin_content_unsafe = value;
    m_Pinjoin_content_unsafeIsSet = true;
}
bool CatalogsFeedValidationErrors::pinjoinContentUnsafeIsSet() const
{
    return m_Pinjoin_content_unsafeIsSet;
}
void CatalogsFeedValidationErrors::unsetPinjoin_content_unsafe()
{
    m_Pinjoin_content_unsafeIsSet = false;
}
int32_t CatalogsFeedValidationErrors::getBlocklistedImageSignature() const
{
    return m_Blocklisted_image_signature;
}
void CatalogsFeedValidationErrors::setBlocklistedImageSignature(int32_t const value)
{
    m_Blocklisted_image_signature = value;
    m_Blocklisted_image_signatureIsSet = true;
}
bool CatalogsFeedValidationErrors::blocklistedImageSignatureIsSet() const
{
    return m_Blocklisted_image_signatureIsSet;
}
void CatalogsFeedValidationErrors::unsetBlocklisted_image_signature()
{
    m_Blocklisted_image_signatureIsSet = false;
}


} // namespace org::openapitools::server::model

