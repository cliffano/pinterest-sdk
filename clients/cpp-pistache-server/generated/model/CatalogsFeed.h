/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CatalogsFeed.h
 *
 * Catalogs Catalogs Feed object
 */

#ifndef CatalogsFeed_H_
#define CatalogsFeed_H_


#include "Country.h"
#include "ProductAvailabilityType.h"
#include "CatalogsFeedProcessingSchedule.h"
#include "CatalogsFeedCredentials.h"
#include <string>
#include "CatalogsDbItem.h"
#include "CatalogsStatus.h"
#include "Feed_fields.h"
#include "CatalogsFormat.h"
#include "NullableCurrency.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Catalogs Catalogs Feed object
/// </summary>
class  CatalogsFeed
{
public:
    CatalogsFeed();
    virtual ~CatalogsFeed() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CatalogsFeed& rhs) const;
    bool operator!=(const CatalogsFeed& rhs) const;

    /////////////////////////////////////////////
    /// CatalogsFeed members

    /// <summary>
    /// 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);
    bool updatedAtIsSet() const;
    void unsetUpdated_at();
    /// <summary>
    /// 
    /// </summary>
    Country getDefaultCountry() const;
    void setDefaultCountry(Country const& value);
    /// <summary>
    /// 
    /// </summary>
    ProductAvailabilityType getDefaultAvailability() const;
    void setDefaultAvailability(ProductAvailabilityType const& value);
    /// <summary>
    /// 
    /// </summary>
    NullableCurrency getDefaultCurrency() const;
    void setDefaultCurrency(NullableCurrency const& value);
    /// <summary>
    /// A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsFormat getFormat() const;
    void setFormat(CatalogsFormat const& value);
    /// <summary>
    /// The locale used within a feed for product descriptions.
    /// </summary>
    std::string getDefaultLocale() const;
    void setDefaultLocale(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedCredentials getCredentials() const;
    void setCredentials(CatalogsFeedCredentials const& value);
    /// <summary>
    /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
    /// </summary>
    std::string getLocation() const;
    void setLocation(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsFeedProcessingSchedule getPreferredProcessingSchedule() const;
    void setPreferredProcessingSchedule(CatalogsFeedProcessingSchedule const& value);
    /// <summary>
    /// 
    /// </summary>
    CatalogsStatus getStatus() const;
    void setStatus(CatalogsStatus const& value);

    friend void to_json(nlohmann::json& j, const CatalogsFeed& o);
    friend void from_json(const nlohmann::json& j, CatalogsFeed& o);
protected:
    std::string m_Created_at;
    bool m_Created_atIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Updated_at;
    bool m_Updated_atIsSet;
    Country m_Default_country;

    ProductAvailabilityType m_Default_availability;

    NullableCurrency m_Default_currency;

    std::string m_Name;

    CatalogsFormat m_Format;

    std::string m_Default_locale;

    CatalogsFeedCredentials m_Credentials;

    std::string m_Location;

    CatalogsFeedProcessingSchedule m_Preferred_processing_schedule;

    CatalogsStatus m_Status;

    
};

} // namespace org::openapitools::server::model

#endif /* CatalogsFeed_H_ */
