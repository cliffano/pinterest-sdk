/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdUpdateRequest_inner.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdUpdateRequest_inner::AdUpdateRequest_inner()
{
    m_Ad_group_id = "";
    m_Ad_group_idIsSet = false;
    m_Android_deep_link = "";
    m_Android_deep_linkIsSet = false;
    m_Carousel_android_deep_linksIsSet = false;
    m_Carousel_destination_urlsIsSet = false;
    m_Carousel_ios_deep_linksIsSet = false;
    m_Click_tracking_url = "";
    m_Click_tracking_urlIsSet = false;
    m_Creative_typeIsSet = false;
    m_Destination_url = "";
    m_Destination_urlIsSet = false;
    m_Ios_deep_link = "";
    m_Ios_deep_linkIsSet = false;
    m_Is_pin_deleted = false;
    m_Is_pin_deletedIsSet = false;
    m_Is_removable = false;
    m_Is_removableIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Pin_id = "";
    m_Pin_idIsSet = false;
    m_StatusIsSet = false;
    m_Tracking_urlsIsSet = false;
    m_View_tracking_url = "";
    m_View_tracking_urlIsSet = false;
    m_Id = "";
    
}

void AdUpdateRequest_inner::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdUpdateRequest_inner::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdUpdateRequest_inner::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdUpdateRequest_inner" : pathPrefix;

         
    if (adGroupIdIsSet())
    {
        const std::string& value = m_Ad_group_id;
        const std::string currentValuePath = _pathPrefix + ".adGroupId";
                
        

    }
             
    if (carouselAndroidDeepLinksIsSet())
    {
        const std::vector<std::string>& value = m_Carousel_android_deep_links;
        const std::string currentValuePath = _pathPrefix + ".carouselAndroidDeepLinks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (carouselDestinationUrlsIsSet())
    {
        const std::vector<std::string>& value = m_Carousel_destination_urls;
        const std::string currentValuePath = _pathPrefix + ".carouselDestinationUrls";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (carouselIosDeepLinksIsSet())
    {
        const std::vector<std::string>& value = m_Carousel_ios_deep_links;
        const std::string currentValuePath = _pathPrefix + ".carouselIosDeepLinks";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                                     
    if (pinIdIsSet())
    {
        const std::string& value = m_Pin_id;
        const std::string currentValuePath = _pathPrefix + ".pinId";
                
        

    }
                     
    
    /* Id */ {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
    
    return success;
}

bool AdUpdateRequest_inner::operator==(const AdUpdateRequest_inner& rhs) const
{
    return
    
    
    
    ((!adGroupIdIsSet() && !rhs.adGroupIdIsSet()) || (adGroupIdIsSet() && rhs.adGroupIdIsSet() && getAdGroupId() == rhs.getAdGroupId())) &&
    
    
    ((!androidDeepLinkIsSet() && !rhs.androidDeepLinkIsSet()) || (androidDeepLinkIsSet() && rhs.androidDeepLinkIsSet() && getAndroidDeepLink() == rhs.getAndroidDeepLink())) &&
    
    
    ((!carouselAndroidDeepLinksIsSet() && !rhs.carouselAndroidDeepLinksIsSet()) || (carouselAndroidDeepLinksIsSet() && rhs.carouselAndroidDeepLinksIsSet() && getCarouselAndroidDeepLinks() == rhs.getCarouselAndroidDeepLinks())) &&
    
    
    ((!carouselDestinationUrlsIsSet() && !rhs.carouselDestinationUrlsIsSet()) || (carouselDestinationUrlsIsSet() && rhs.carouselDestinationUrlsIsSet() && getCarouselDestinationUrls() == rhs.getCarouselDestinationUrls())) &&
    
    
    ((!carouselIosDeepLinksIsSet() && !rhs.carouselIosDeepLinksIsSet()) || (carouselIosDeepLinksIsSet() && rhs.carouselIosDeepLinksIsSet() && getCarouselIosDeepLinks() == rhs.getCarouselIosDeepLinks())) &&
    
    
    ((!clickTrackingUrlIsSet() && !rhs.clickTrackingUrlIsSet()) || (clickTrackingUrlIsSet() && rhs.clickTrackingUrlIsSet() && getClickTrackingUrl() == rhs.getClickTrackingUrl())) &&
    
    
    ((!creativeTypeIsSet() && !rhs.creativeTypeIsSet()) || (creativeTypeIsSet() && rhs.creativeTypeIsSet() && getCreativeType() == rhs.getCreativeType())) &&
    
    
    ((!destinationUrlIsSet() && !rhs.destinationUrlIsSet()) || (destinationUrlIsSet() && rhs.destinationUrlIsSet() && getDestinationUrl() == rhs.getDestinationUrl())) &&
    
    
    ((!iosDeepLinkIsSet() && !rhs.iosDeepLinkIsSet()) || (iosDeepLinkIsSet() && rhs.iosDeepLinkIsSet() && getIosDeepLink() == rhs.getIosDeepLink())) &&
    
    
    ((!isPinDeletedIsSet() && !rhs.isPinDeletedIsSet()) || (isPinDeletedIsSet() && rhs.isPinDeletedIsSet() && isIsPinDeleted() == rhs.isIsPinDeleted())) &&
    
    
    ((!isRemovableIsSet() && !rhs.isRemovableIsSet()) || (isRemovableIsSet() && rhs.isRemovableIsSet() && isIsRemovable() == rhs.isIsRemovable())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!pinIdIsSet() && !rhs.pinIdIsSet()) || (pinIdIsSet() && rhs.pinIdIsSet() && getPinId() == rhs.getPinId())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!trackingUrlsIsSet() && !rhs.trackingUrlsIsSet()) || (trackingUrlsIsSet() && rhs.trackingUrlsIsSet() && getTrackingUrls() == rhs.getTrackingUrls())) &&
    
    
    ((!viewTrackingUrlIsSet() && !rhs.viewTrackingUrlIsSet()) || (viewTrackingUrlIsSet() && rhs.viewTrackingUrlIsSet() && getViewTrackingUrl() == rhs.getViewTrackingUrl())) &&
    
    (getId() == rhs.getId())
    
    
    ;
}

bool AdUpdateRequest_inner::operator!=(const AdUpdateRequest_inner& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdUpdateRequest_inner& o)
{
    j = nlohmann::json();
    if(o.adGroupIdIsSet())
        j["ad_group_id"] = o.m_Ad_group_id;
    if(o.androidDeepLinkIsSet())
        j["android_deep_link"] = o.m_Android_deep_link;
    if(o.carouselAndroidDeepLinksIsSet() || !o.m_Carousel_android_deep_links.empty())
        j["carousel_android_deep_links"] = o.m_Carousel_android_deep_links;
    if(o.carouselDestinationUrlsIsSet() || !o.m_Carousel_destination_urls.empty())
        j["carousel_destination_urls"] = o.m_Carousel_destination_urls;
    if(o.carouselIosDeepLinksIsSet() || !o.m_Carousel_ios_deep_links.empty())
        j["carousel_ios_deep_links"] = o.m_Carousel_ios_deep_links;
    if(o.clickTrackingUrlIsSet())
        j["click_tracking_url"] = o.m_Click_tracking_url;
    if(o.creativeTypeIsSet())
        j["creative_type"] = o.m_Creative_type;
    if(o.destinationUrlIsSet())
        j["destination_url"] = o.m_Destination_url;
    if(o.iosDeepLinkIsSet())
        j["ios_deep_link"] = o.m_Ios_deep_link;
    if(o.isPinDeletedIsSet())
        j["is_pin_deleted"] = o.m_Is_pin_deleted;
    if(o.isRemovableIsSet())
        j["is_removable"] = o.m_Is_removable;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.pinIdIsSet())
        j["pin_id"] = o.m_Pin_id;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.trackingUrlsIsSet())
        j["tracking_urls"] = o.m_Tracking_urls;
    if(o.viewTrackingUrlIsSet())
        j["view_tracking_url"] = o.m_View_tracking_url;
    j["id"] = o.m_Id;
    
}

void from_json(const nlohmann::json& j, AdUpdateRequest_inner& o)
{
    if(j.find("ad_group_id") != j.end())
    {
        j.at("ad_group_id").get_to(o.m_Ad_group_id);
        o.m_Ad_group_idIsSet = true;
    } 
    if(j.find("android_deep_link") != j.end())
    {
        j.at("android_deep_link").get_to(o.m_Android_deep_link);
        o.m_Android_deep_linkIsSet = true;
    } 
    if(j.find("carousel_android_deep_links") != j.end())
    {
        j.at("carousel_android_deep_links").get_to(o.m_Carousel_android_deep_links);
        o.m_Carousel_android_deep_linksIsSet = true;
    } 
    if(j.find("carousel_destination_urls") != j.end())
    {
        j.at("carousel_destination_urls").get_to(o.m_Carousel_destination_urls);
        o.m_Carousel_destination_urlsIsSet = true;
    } 
    if(j.find("carousel_ios_deep_links") != j.end())
    {
        j.at("carousel_ios_deep_links").get_to(o.m_Carousel_ios_deep_links);
        o.m_Carousel_ios_deep_linksIsSet = true;
    } 
    if(j.find("click_tracking_url") != j.end())
    {
        j.at("click_tracking_url").get_to(o.m_Click_tracking_url);
        o.m_Click_tracking_urlIsSet = true;
    } 
    if(j.find("creative_type") != j.end())
    {
        j.at("creative_type").get_to(o.m_Creative_type);
        o.m_Creative_typeIsSet = true;
    } 
    if(j.find("destination_url") != j.end())
    {
        j.at("destination_url").get_to(o.m_Destination_url);
        o.m_Destination_urlIsSet = true;
    } 
    if(j.find("ios_deep_link") != j.end())
    {
        j.at("ios_deep_link").get_to(o.m_Ios_deep_link);
        o.m_Ios_deep_linkIsSet = true;
    } 
    if(j.find("is_pin_deleted") != j.end())
    {
        j.at("is_pin_deleted").get_to(o.m_Is_pin_deleted);
        o.m_Is_pin_deletedIsSet = true;
    } 
    if(j.find("is_removable") != j.end())
    {
        j.at("is_removable").get_to(o.m_Is_removable);
        o.m_Is_removableIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("pin_id") != j.end())
    {
        j.at("pin_id").get_to(o.m_Pin_id);
        o.m_Pin_idIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("tracking_urls") != j.end())
    {
        j.at("tracking_urls").get_to(o.m_Tracking_urls);
        o.m_Tracking_urlsIsSet = true;
    } 
    if(j.find("view_tracking_url") != j.end())
    {
        j.at("view_tracking_url").get_to(o.m_View_tracking_url);
        o.m_View_tracking_urlIsSet = true;
    } 
    j.at("id").get_to(o.m_Id);
    
}

std::string AdUpdateRequest_inner::getAdGroupId() const
{
    return m_Ad_group_id;
}
void AdUpdateRequest_inner::setAdGroupId(std::string const& value)
{
    m_Ad_group_id = value;
    m_Ad_group_idIsSet = true;
}
bool AdUpdateRequest_inner::adGroupIdIsSet() const
{
    return m_Ad_group_idIsSet;
}
void AdUpdateRequest_inner::unsetAd_group_id()
{
    m_Ad_group_idIsSet = false;
}
std::string AdUpdateRequest_inner::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}
void AdUpdateRequest_inner::setAndroidDeepLink(std::string const& value)
{
    m_Android_deep_link = value;
    m_Android_deep_linkIsSet = true;
}
bool AdUpdateRequest_inner::androidDeepLinkIsSet() const
{
    return m_Android_deep_linkIsSet;
}
void AdUpdateRequest_inner::unsetAndroid_deep_link()
{
    m_Android_deep_linkIsSet = false;
}
std::vector<std::string> AdUpdateRequest_inner::getCarouselAndroidDeepLinks() const
{
    return m_Carousel_android_deep_links;
}
void AdUpdateRequest_inner::setCarouselAndroidDeepLinks(std::vector<std::string> const& value)
{
    m_Carousel_android_deep_links = value;
    m_Carousel_android_deep_linksIsSet = true;
}
bool AdUpdateRequest_inner::carouselAndroidDeepLinksIsSet() const
{
    return m_Carousel_android_deep_linksIsSet;
}
void AdUpdateRequest_inner::unsetCarousel_android_deep_links()
{
    m_Carousel_android_deep_linksIsSet = false;
}
std::vector<std::string> AdUpdateRequest_inner::getCarouselDestinationUrls() const
{
    return m_Carousel_destination_urls;
}
void AdUpdateRequest_inner::setCarouselDestinationUrls(std::vector<std::string> const& value)
{
    m_Carousel_destination_urls = value;
    m_Carousel_destination_urlsIsSet = true;
}
bool AdUpdateRequest_inner::carouselDestinationUrlsIsSet() const
{
    return m_Carousel_destination_urlsIsSet;
}
void AdUpdateRequest_inner::unsetCarousel_destination_urls()
{
    m_Carousel_destination_urlsIsSet = false;
}
std::vector<std::string> AdUpdateRequest_inner::getCarouselIosDeepLinks() const
{
    return m_Carousel_ios_deep_links;
}
void AdUpdateRequest_inner::setCarouselIosDeepLinks(std::vector<std::string> const& value)
{
    m_Carousel_ios_deep_links = value;
    m_Carousel_ios_deep_linksIsSet = true;
}
bool AdUpdateRequest_inner::carouselIosDeepLinksIsSet() const
{
    return m_Carousel_ios_deep_linksIsSet;
}
void AdUpdateRequest_inner::unsetCarousel_ios_deep_links()
{
    m_Carousel_ios_deep_linksIsSet = false;
}
std::string AdUpdateRequest_inner::getClickTrackingUrl() const
{
    return m_Click_tracking_url;
}
void AdUpdateRequest_inner::setClickTrackingUrl(std::string const& value)
{
    m_Click_tracking_url = value;
    m_Click_tracking_urlIsSet = true;
}
bool AdUpdateRequest_inner::clickTrackingUrlIsSet() const
{
    return m_Click_tracking_urlIsSet;
}
void AdUpdateRequest_inner::unsetClick_tracking_url()
{
    m_Click_tracking_urlIsSet = false;
}
org::openapitools::server::model::CreativeType AdUpdateRequest_inner::getCreativeType() const
{
    return m_Creative_type;
}
void AdUpdateRequest_inner::setCreativeType(org::openapitools::server::model::CreativeType const& value)
{
    m_Creative_type = value;
    m_Creative_typeIsSet = true;
}
bool AdUpdateRequest_inner::creativeTypeIsSet() const
{
    return m_Creative_typeIsSet;
}
void AdUpdateRequest_inner::unsetCreative_type()
{
    m_Creative_typeIsSet = false;
}
std::string AdUpdateRequest_inner::getDestinationUrl() const
{
    return m_Destination_url;
}
void AdUpdateRequest_inner::setDestinationUrl(std::string const& value)
{
    m_Destination_url = value;
    m_Destination_urlIsSet = true;
}
bool AdUpdateRequest_inner::destinationUrlIsSet() const
{
    return m_Destination_urlIsSet;
}
void AdUpdateRequest_inner::unsetDestination_url()
{
    m_Destination_urlIsSet = false;
}
std::string AdUpdateRequest_inner::getIosDeepLink() const
{
    return m_Ios_deep_link;
}
void AdUpdateRequest_inner::setIosDeepLink(std::string const& value)
{
    m_Ios_deep_link = value;
    m_Ios_deep_linkIsSet = true;
}
bool AdUpdateRequest_inner::iosDeepLinkIsSet() const
{
    return m_Ios_deep_linkIsSet;
}
void AdUpdateRequest_inner::unsetIos_deep_link()
{
    m_Ios_deep_linkIsSet = false;
}
bool AdUpdateRequest_inner::isIsPinDeleted() const
{
    return m_Is_pin_deleted;
}
void AdUpdateRequest_inner::setIsPinDeleted(bool const value)
{
    m_Is_pin_deleted = value;
    m_Is_pin_deletedIsSet = true;
}
bool AdUpdateRequest_inner::isPinDeletedIsSet() const
{
    return m_Is_pin_deletedIsSet;
}
void AdUpdateRequest_inner::unsetIs_pin_deleted()
{
    m_Is_pin_deletedIsSet = false;
}
bool AdUpdateRequest_inner::isIsRemovable() const
{
    return m_Is_removable;
}
void AdUpdateRequest_inner::setIsRemovable(bool const value)
{
    m_Is_removable = value;
    m_Is_removableIsSet = true;
}
bool AdUpdateRequest_inner::isRemovableIsSet() const
{
    return m_Is_removableIsSet;
}
void AdUpdateRequest_inner::unsetIs_removable()
{
    m_Is_removableIsSet = false;
}
std::string AdUpdateRequest_inner::getName() const
{
    return m_Name;
}
void AdUpdateRequest_inner::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool AdUpdateRequest_inner::nameIsSet() const
{
    return m_NameIsSet;
}
void AdUpdateRequest_inner::unsetName()
{
    m_NameIsSet = false;
}
std::string AdUpdateRequest_inner::getPinId() const
{
    return m_Pin_id;
}
void AdUpdateRequest_inner::setPinId(std::string const& value)
{
    m_Pin_id = value;
    m_Pin_idIsSet = true;
}
bool AdUpdateRequest_inner::pinIdIsSet() const
{
    return m_Pin_idIsSet;
}
void AdUpdateRequest_inner::unsetPin_id()
{
    m_Pin_idIsSet = false;
}
org::openapitools::server::model::EntityStatus AdUpdateRequest_inner::getStatus() const
{
    return m_Status;
}
void AdUpdateRequest_inner::setStatus(org::openapitools::server::model::EntityStatus const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool AdUpdateRequest_inner::statusIsSet() const
{
    return m_StatusIsSet;
}
void AdUpdateRequest_inner::unsetStatus()
{
    m_StatusIsSet = false;
}
org::openapitools::server::model::AdCommon_tracking_urls AdUpdateRequest_inner::getTrackingUrls() const
{
    return m_Tracking_urls;
}
void AdUpdateRequest_inner::setTrackingUrls(org::openapitools::server::model::AdCommon_tracking_urls const& value)
{
    m_Tracking_urls = value;
    m_Tracking_urlsIsSet = true;
}
bool AdUpdateRequest_inner::trackingUrlsIsSet() const
{
    return m_Tracking_urlsIsSet;
}
void AdUpdateRequest_inner::unsetTracking_urls()
{
    m_Tracking_urlsIsSet = false;
}
std::string AdUpdateRequest_inner::getViewTrackingUrl() const
{
    return m_View_tracking_url;
}
void AdUpdateRequest_inner::setViewTrackingUrl(std::string const& value)
{
    m_View_tracking_url = value;
    m_View_tracking_urlIsSet = true;
}
bool AdUpdateRequest_inner::viewTrackingUrlIsSet() const
{
    return m_View_tracking_urlIsSet;
}
void AdUpdateRequest_inner::unsetView_tracking_url()
{
    m_View_tracking_urlIsSet = false;
}
std::string AdUpdateRequest_inner::getId() const
{
    return m_Id;
}
void AdUpdateRequest_inner::setId(std::string const& value)
{
    m_Id = value;
}


} // namespace org::openapitools::server::model

