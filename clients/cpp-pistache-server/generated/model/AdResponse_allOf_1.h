/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AdResponse_allOf_1.h
 *
 * 
 */

#ifndef AdResponse_allOf_1_H_
#define AdResponse_allOf_1_H_


#include <string>
#include "PinPromotionSummaryStatus.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  AdResponse_allOf_1
{
public:
    AdResponse_allOf_1();
    virtual ~AdResponse_allOf_1() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const AdResponse_allOf_1& rhs) const;
    bool operator!=(const AdResponse_allOf_1& rhs) const;

    /////////////////////////////////////////////
    /// AdResponse_allOf_1 members

    /// <summary>
    /// The ID of the advertiser that this ad belongs to.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string const& value);
    bool adAccountIdIsSet() const;
    void unsetAd_account_id();
    /// <summary>
    /// ID of the ad campaign that contains this ad.
    /// </summary>
    std::string getCampaignId() const;
    void setCampaignId(std::string const& value);
    bool campaignIdIsSet() const;
    void unsetCampaign_id();
    /// <summary>
    /// Destination URL template for all items within a collections drawer.
    /// </summary>
    std::string getCollectionItemsDestinationUrlTemplate() const;
    void setCollectionItemsDestinationUrlTemplate(std::string const& value);
    bool collectionItemsDestinationUrlTemplateIsSet() const;
    void unsetCollection_items_destination_url_template();
    /// <summary>
    /// Pin creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t const value);
    bool createdTimeIsSet() const;
    void unsetCreated_time();
    /// <summary>
    /// The ID of this ad.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
    /// </summary>
    std::vector<std::string> getRejectedReasons() const;
    void setRejectedReasons(std::vector<std::string> const& value);
    bool rejectedReasonsIsSet() const;
    void unsetRejected_reasons();
    /// <summary>
    /// Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
    /// </summary>
    std::vector<std::string> getRejectionLabels() const;
    void setRejectionLabels(std::vector<std::string> const& value);
    bool rejectionLabelsIsSet() const;
    void unsetRejection_labels();
    /// <summary>
    /// Ad review status
    /// </summary>
    std::string getReviewStatus() const;
    void setReviewStatus(std::string const& value);
    bool reviewStatusIsSet() const;
    void unsetReview_status();
    /// <summary>
    /// Always \&quot;ad\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t const value);
    bool updatedTimeIsSet() const;
    void unsetUpdated_time();
    /// <summary>
    /// Ad summary status
    /// </summary>
    PinPromotionSummaryStatus getSummaryStatus() const;
    void setSummaryStatus(PinPromotionSummaryStatus const& value);
    bool summaryStatusIsSet() const;
    void unsetSummary_status();

    friend void to_json(nlohmann::json& j, const AdResponse_allOf_1& o);
    friend void from_json(const nlohmann::json& j, AdResponse_allOf_1& o);
protected:
    std::string m_Ad_account_id;
    bool m_Ad_account_idIsSet;
    std::string m_Campaign_id;
    bool m_Campaign_idIsSet;
    std::string m_Collection_items_destination_url_template;
    bool m_Collection_items_destination_url_templateIsSet;
    int32_t m_Created_time;
    bool m_Created_timeIsSet;
    std::string m_Id;
    bool m_IdIsSet;
    std::vector<std::string> m_Rejected_reasons;
    bool m_Rejected_reasonsIsSet;
    std::vector<std::string> m_Rejection_labels;
    bool m_Rejection_labelsIsSet;
    std::string m_Review_status;
    bool m_Review_statusIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    int32_t m_Updated_time;
    bool m_Updated_timeIsSet;
    PinPromotionSummaryStatus m_Summary_status;
    bool m_Summary_statusIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* AdResponse_allOf_1_H_ */
