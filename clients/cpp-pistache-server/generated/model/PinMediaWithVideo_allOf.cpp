/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.4.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PinMediaWithVideo_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PinMediaWithVideo_allOf::PinMediaWithVideo_allOf()
{
    m_ImagesIsSet = false;
    m_Cover_image_url = "";
    m_Cover_image_urlIsSet = false;
    m_Duration = 0.0;
    m_DurationIsSet = false;
    m_Height = 0;
    m_HeightIsSet = false;
    m_Width = 0;
    m_WidthIsSet = false;
    
}

void PinMediaWithVideo_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PinMediaWithVideo_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PinMediaWithVideo_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PinMediaWithVideo_allOf" : pathPrefix;

                        
    return success;
}

bool PinMediaWithVideo_allOf::operator==(const PinMediaWithVideo_allOf& rhs) const
{
    return
    
    
    
    ((!imagesIsSet() && !rhs.imagesIsSet()) || (imagesIsSet() && rhs.imagesIsSet() && getImages() == rhs.getImages())) &&
    
    
    ((!coverImageUrlIsSet() && !rhs.coverImageUrlIsSet()) || (coverImageUrlIsSet() && rhs.coverImageUrlIsSet() && getCoverImageUrl() == rhs.getCoverImageUrl())) &&
    
    
    ((!durationIsSet() && !rhs.durationIsSet()) || (durationIsSet() && rhs.durationIsSet() && getDuration() == rhs.getDuration())) &&
    
    
    ((!heightIsSet() && !rhs.heightIsSet()) || (heightIsSet() && rhs.heightIsSet() && getHeight() == rhs.getHeight())) &&
    
    
    ((!widthIsSet() && !rhs.widthIsSet()) || (widthIsSet() && rhs.widthIsSet() && getWidth() == rhs.getWidth()))
    
    ;
}

bool PinMediaWithVideo_allOf::operator!=(const PinMediaWithVideo_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PinMediaWithVideo_allOf& o)
{
    j = nlohmann::json();
    if(o.imagesIsSet() || !o.m_Images.empty())
        j["images"] = o.m_Images;
    if(o.coverImageUrlIsSet())
        j["cover_image_url"] = o.m_Cover_image_url;
    if(o.durationIsSet())
        j["duration"] = o.m_Duration;
    if(o.heightIsSet())
        j["height"] = o.m_Height;
    if(o.widthIsSet())
        j["width"] = o.m_Width;
    
}

void from_json(const nlohmann::json& j, PinMediaWithVideo_allOf& o)
{
    if(j.find("images") != j.end())
    {
        j.at("images").get_to(o.m_Images);
        o.m_ImagesIsSet = true;
    } 
    if(j.find("cover_image_url") != j.end())
    {
        j.at("cover_image_url").get_to(o.m_Cover_image_url);
        o.m_Cover_image_urlIsSet = true;
    } 
    if(j.find("duration") != j.end())
    {
        j.at("duration").get_to(o.m_Duration);
        o.m_DurationIsSet = true;
    } 
    if(j.find("height") != j.end())
    {
        j.at("height").get_to(o.m_Height);
        o.m_HeightIsSet = true;
    } 
    if(j.find("width") != j.end())
    {
        j.at("width").get_to(o.m_Width);
        o.m_WidthIsSet = true;
    } 
    
}

std::map<std::string, org::openapitools::server::model::ImageDetails> PinMediaWithVideo_allOf::getImages() const
{
    return m_Images;
}
void PinMediaWithVideo_allOf::setImages(std::map<std::string, org::openapitools::server::model::ImageDetails> const& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}
bool PinMediaWithVideo_allOf::imagesIsSet() const
{
    return m_ImagesIsSet;
}
void PinMediaWithVideo_allOf::unsetImages()
{
    m_ImagesIsSet = false;
}
std::string PinMediaWithVideo_allOf::getCoverImageUrl() const
{
    return m_Cover_image_url;
}
void PinMediaWithVideo_allOf::setCoverImageUrl(std::string const& value)
{
    m_Cover_image_url = value;
    m_Cover_image_urlIsSet = true;
}
bool PinMediaWithVideo_allOf::coverImageUrlIsSet() const
{
    return m_Cover_image_urlIsSet;
}
void PinMediaWithVideo_allOf::unsetCover_image_url()
{
    m_Cover_image_urlIsSet = false;
}
double PinMediaWithVideo_allOf::getDuration() const
{
    return m_Duration;
}
void PinMediaWithVideo_allOf::setDuration(double const value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}
bool PinMediaWithVideo_allOf::durationIsSet() const
{
    return m_DurationIsSet;
}
void PinMediaWithVideo_allOf::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t PinMediaWithVideo_allOf::getHeight() const
{
    return m_Height;
}
void PinMediaWithVideo_allOf::setHeight(int32_t const value)
{
    m_Height = value;
    m_HeightIsSet = true;
}
bool PinMediaWithVideo_allOf::heightIsSet() const
{
    return m_HeightIsSet;
}
void PinMediaWithVideo_allOf::unsetHeight()
{
    m_HeightIsSet = false;
}
int32_t PinMediaWithVideo_allOf::getWidth() const
{
    return m_Width;
}
void PinMediaWithVideo_allOf::setWidth(int32_t const value)
{
    m_Width = value;
    m_WidthIsSet = true;
}
bool PinMediaWithVideo_allOf::widthIsSet() const
{
    return m_WidthIsSet;
}
void PinMediaWithVideo_allOf::unsetWidth()
{
    m_WidthIsSet = false;
}


} // namespace org::openapitools::server::model

