/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AdGroupResponse_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AdGroupResponse_allOf::AdGroupResponse_allOf()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Ad_account_id = "";
    m_Ad_account_idIsSet = false;
    m_Created_time = 0;
    m_Created_timeIsSet = false;
    m_Updated_time = 0;
    m_Updated_timeIsSet = false;
    m_Type = "adgroup";
    m_TypeIsSet = false;
    m_Conversion_learning_mode_type = "";
    m_Conversion_learning_mode_typeIsSet = false;
    m_Summary_status = "";
    m_Summary_statusIsSet = false;
    m_Feed_profile_id = "";
    m_Feed_profile_idIsSet = false;
    m_Dca_assetsIsSet = false;
    
}

void AdGroupResponse_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AdGroupResponse_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AdGroupResponse_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AdGroupResponse_allOf" : pathPrefix;

         
    if (idIsSet())
    {
        const std::string& value = m_Id;
        const std::string currentValuePath = _pathPrefix + ".id";
                
        

    }
         
    if (adAccountIdIsSet())
    {
        const std::string& value = m_Ad_account_id;
        const std::string currentValuePath = _pathPrefix + ".adAccountId";
                
        

    }
                                
    return success;
}

bool AdGroupResponse_allOf::operator==(const AdGroupResponse_allOf& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!adAccountIdIsSet() && !rhs.adAccountIdIsSet()) || (adAccountIdIsSet() && rhs.adAccountIdIsSet() && getAdAccountId() == rhs.getAdAccountId())) &&
    
    
    ((!createdTimeIsSet() && !rhs.createdTimeIsSet()) || (createdTimeIsSet() && rhs.createdTimeIsSet() && getCreatedTime() == rhs.getCreatedTime())) &&
    
    
    ((!updatedTimeIsSet() && !rhs.updatedTimeIsSet()) || (updatedTimeIsSet() && rhs.updatedTimeIsSet() && getUpdatedTime() == rhs.getUpdatedTime())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!conversionLearningModeTypeIsSet() && !rhs.conversionLearningModeTypeIsSet()) || (conversionLearningModeTypeIsSet() && rhs.conversionLearningModeTypeIsSet() && getConversionLearningModeType() == rhs.getConversionLearningModeType())) &&
    
    
    ((!summaryStatusIsSet() && !rhs.summaryStatusIsSet()) || (summaryStatusIsSet() && rhs.summaryStatusIsSet() && getSummaryStatus() == rhs.getSummaryStatus())) &&
    
    
    ((!feedProfileIdIsSet() && !rhs.feedProfileIdIsSet()) || (feedProfileIdIsSet() && rhs.feedProfileIdIsSet() && getFeedProfileId() == rhs.getFeedProfileId())) &&
    
    
    ((!dcaAssetsIsSet() && !rhs.dcaAssetsIsSet()) || (dcaAssetsIsSet() && rhs.dcaAssetsIsSet() && getDcaAssets() == rhs.getDcaAssets()))
    
    ;
}

bool AdGroupResponse_allOf::operator!=(const AdGroupResponse_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdGroupResponse_allOf& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.adAccountIdIsSet())
        j["ad_account_id"] = o.m_Ad_account_id;
    if(o.createdTimeIsSet())
        j["created_time"] = o.m_Created_time;
    if(o.updatedTimeIsSet())
        j["updated_time"] = o.m_Updated_time;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.conversionLearningModeTypeIsSet())
        j["conversion_learning_mode_type"] = o.m_Conversion_learning_mode_type;
    if(o.summaryStatusIsSet())
        j["summary_status"] = o.m_Summary_status;
    if(o.feedProfileIdIsSet())
        j["feed_profile_id"] = o.m_Feed_profile_id;
    if(o.dcaAssetsIsSet())
        j["dca_assets"] = o.m_Dca_assets;
    
}

void from_json(const nlohmann::json& j, AdGroupResponse_allOf& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("ad_account_id") != j.end())
    {
        j.at("ad_account_id").get_to(o.m_Ad_account_id);
        o.m_Ad_account_idIsSet = true;
    } 
    if(j.find("created_time") != j.end())
    {
        j.at("created_time").get_to(o.m_Created_time);
        o.m_Created_timeIsSet = true;
    } 
    if(j.find("updated_time") != j.end())
    {
        j.at("updated_time").get_to(o.m_Updated_time);
        o.m_Updated_timeIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("conversion_learning_mode_type") != j.end())
    {
        j.at("conversion_learning_mode_type").get_to(o.m_Conversion_learning_mode_type);
        o.m_Conversion_learning_mode_typeIsSet = true;
    } 
    if(j.find("summary_status") != j.end())
    {
        j.at("summary_status").get_to(o.m_Summary_status);
        o.m_Summary_statusIsSet = true;
    } 
    if(j.find("feed_profile_id") != j.end())
    {
        j.at("feed_profile_id").get_to(o.m_Feed_profile_id);
        o.m_Feed_profile_idIsSet = true;
    } 
    if(j.find("dca_assets") != j.end())
    {
        j.at("dca_assets").get_to(o.m_Dca_assets);
        o.m_Dca_assetsIsSet = true;
    } 
    
}

std::string AdGroupResponse_allOf::getId() const
{
    return m_Id;
}
void AdGroupResponse_allOf::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AdGroupResponse_allOf::idIsSet() const
{
    return m_IdIsSet;
}
void AdGroupResponse_allOf::unsetId()
{
    m_IdIsSet = false;
}
std::string AdGroupResponse_allOf::getAdAccountId() const
{
    return m_Ad_account_id;
}
void AdGroupResponse_allOf::setAdAccountId(std::string const& value)
{
    m_Ad_account_id = value;
    m_Ad_account_idIsSet = true;
}
bool AdGroupResponse_allOf::adAccountIdIsSet() const
{
    return m_Ad_account_idIsSet;
}
void AdGroupResponse_allOf::unsetAd_account_id()
{
    m_Ad_account_idIsSet = false;
}
int32_t AdGroupResponse_allOf::getCreatedTime() const
{
    return m_Created_time;
}
void AdGroupResponse_allOf::setCreatedTime(int32_t const value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool AdGroupResponse_allOf::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}
void AdGroupResponse_allOf::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}
int32_t AdGroupResponse_allOf::getUpdatedTime() const
{
    return m_Updated_time;
}
void AdGroupResponse_allOf::setUpdatedTime(int32_t const value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}
bool AdGroupResponse_allOf::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}
void AdGroupResponse_allOf::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}
std::string AdGroupResponse_allOf::getType() const
{
    return m_Type;
}
void AdGroupResponse_allOf::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool AdGroupResponse_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}
void AdGroupResponse_allOf::unsetType()
{
    m_TypeIsSet = false;
}
std::string AdGroupResponse_allOf::getConversionLearningModeType() const
{
    return m_Conversion_learning_mode_type;
}
void AdGroupResponse_allOf::setConversionLearningModeType(std::string const& value)
{
    m_Conversion_learning_mode_type = value;
    m_Conversion_learning_mode_typeIsSet = true;
}
bool AdGroupResponse_allOf::conversionLearningModeTypeIsSet() const
{
    return m_Conversion_learning_mode_typeIsSet;
}
void AdGroupResponse_allOf::unsetConversion_learning_mode_type()
{
    m_Conversion_learning_mode_typeIsSet = false;
}
AdGroupSummaryStatus AdGroupResponse_allOf::getSummaryStatus() const
{
    return m_Summary_status;
}
void AdGroupResponse_allOf::setSummaryStatus(AdGroupSummaryStatus const& value)
{
    m_Summary_status = value;
    m_Summary_statusIsSet = true;
}
bool AdGroupResponse_allOf::summaryStatusIsSet() const
{
    return m_Summary_statusIsSet;
}
void AdGroupResponse_allOf::unsetSummary_status()
{
    m_Summary_statusIsSet = false;
}
std::string AdGroupResponse_allOf::getFeedProfileId() const
{
    return m_Feed_profile_id;
}
void AdGroupResponse_allOf::setFeedProfileId(std::string const& value)
{
    m_Feed_profile_id = value;
    m_Feed_profile_idIsSet = true;
}
bool AdGroupResponse_allOf::feedProfileIdIsSet() const
{
    return m_Feed_profile_idIsSet;
}
void AdGroupResponse_allOf::unsetFeed_profile_id()
{
    m_Feed_profile_idIsSet = false;
}
org::openapitools::server::model::nlohmann::json AdGroupResponse_allOf::getDcaAssets() const
{
    return m_Dca_assets;
}
void AdGroupResponse_allOf::setDcaAssets(org::openapitools::server::model::nlohmann::json const& value)
{
    m_Dca_assets = value;
    m_Dca_assetsIsSet = true;
}
bool AdGroupResponse_allOf::dcaAssetsIsSet() const
{
    return m_Dca_assetsIsSet;
}
void AdGroupResponse_allOf::unsetDca_assets()
{
    m_Dca_assetsIsSet = false;
}


} // namespace org::openapitools::server::model

