/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ConversionEventsUserData_anyOf_2.h
 *
 * 
 */

#ifndef ConversionEventsUserData_anyOf_2_H_
#define ConversionEventsUserData_anyOf_2_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ConversionEventsUserData_anyOf_2
{
public:
    ConversionEventsUserData_anyOf_2();
    virtual ~ConversionEventsUserData_anyOf_2() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ConversionEventsUserData_anyOf_2& rhs) const;
    bool operator!=(const ConversionEventsUserData_anyOf_2& rhs) const;

    /////////////////////////////////////////////
    /// ConversionEventsUserData_anyOf_2 members

    /// <summary>
    /// The user&#39;s IP address, which can be either in IPv4 or IPv6 format. Used for matching.
    /// </summary>
    std::string getClientIpAddress() const;
    void setClientIpAddress(std::string const& value);
    /// <summary>
    /// The user agent string of the user&#39;s web browser.
    /// </summary>
    std::string getClientUserAgent() const;
    void setClientUserAgent(std::string const& value);

    friend void to_json(nlohmann::json& j, const ConversionEventsUserData_anyOf_2& o);
    friend void from_json(const nlohmann::json& j, ConversionEventsUserData_anyOf_2& o);
protected:
    std::string m_Client_ip_address;

    std::string m_Client_user_agent;

    
};

} // namespace org::openapitools::server::model

#endif /* ConversionEventsUserData_anyOf_2_H_ */
