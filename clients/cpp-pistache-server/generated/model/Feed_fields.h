/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.6.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Feed_fields.h
 *
 * 
 */

#ifndef Feed_fields_H_
#define Feed_fields_H_


#include "Country.h"
#include "ProductAvailabilityType.h"
#include "CatalogsFeedProcessingSchedule.h"
#include "CatalogsFeedCredentials.h"
#include <string>
#include "CatalogsStatus.h"
#include "CatalogsFormat.h"
#include "NullableCurrency.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Feed_fields
{
public:
    Feed_fields();
    virtual ~Feed_fields() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Feed_fields& rhs) const;
    bool operator!=(const Feed_fields& rhs) const;

    /////////////////////////////////////////////
    /// Feed_fields members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Country getDefaultCountry() const;
    void setDefaultCountry(org::openapitools::server::model::Country const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ProductAvailabilityType getDefaultAvailability() const;
    void setDefaultAvailability(org::openapitools::server::model::ProductAvailabilityType const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::NullableCurrency getDefaultCurrency() const;
    void setDefaultCurrency(org::openapitools::server::model::NullableCurrency const& value);
    /// <summary>
    /// A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsFormat getFormat() const;
    void setFormat(org::openapitools::server::model::CatalogsFormat const& value);
    /// <summary>
    /// The locale used within a feed for product descriptions.
    /// </summary>
    std::string getDefaultLocale() const;
    void setDefaultLocale(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsFeedCredentials getCredentials() const;
    void setCredentials(org::openapitools::server::model::CatalogsFeedCredentials const& value);
    /// <summary>
    /// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
    /// </summary>
    std::string getLocation() const;
    void setLocation(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsFeedProcessingSchedule getPreferredProcessingSchedule() const;
    void setPreferredProcessingSchedule(org::openapitools::server::model::CatalogsFeedProcessingSchedule const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::CatalogsStatus getStatus() const;
    void setStatus(org::openapitools::server::model::CatalogsStatus const& value);

    friend void to_json(nlohmann::json& j, const Feed_fields& o);
    friend void from_json(const nlohmann::json& j, Feed_fields& o);
protected:
    org::openapitools::server::model::Country m_Default_country;

    org::openapitools::server::model::ProductAvailabilityType m_Default_availability;

    org::openapitools::server::model::NullableCurrency m_Default_currency;

    std::string m_Name;

    org::openapitools::server::model::CatalogsFormat m_Format;

    std::string m_Default_locale;

    org::openapitools::server::model::CatalogsFeedCredentials m_Credentials;

    std::string m_Location;

    org::openapitools::server::model::CatalogsFeedProcessingSchedule m_Preferred_processing_schedule;

    org::openapitools::server::model::CatalogsStatus m_Status;

    
};

} // namespace org::openapitools::server::model

#endif /* Feed_fields_H_ */
