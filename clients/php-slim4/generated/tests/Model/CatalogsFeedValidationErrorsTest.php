<?php

/**
 * Pinterest REST API
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest's REST API
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\CatalogsFeedValidationErrors;

/**
 * CatalogsFeedValidationErrorsTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\CatalogsFeedValidationErrors
 */
class CatalogsFeedValidationErrorsTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CatalogsFeedValidationErrors"
     */
    public function testCatalogsFeedValidationErrors()
    {
        $testCatalogsFeedValidationErrors = new CatalogsFeedValidationErrors();
        $namespacedClassname = CatalogsFeedValidationErrors::getModelsNamespace() . '\\CatalogsFeedValidationErrors';
        $this->assertSame('\\' . CatalogsFeedValidationErrors::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        $this->markTestIncomplete(
            'Test of "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "fetchError"
     */
    public function testPropertyFetchError()
    {
        $this->markTestIncomplete(
            'Test of "fetchError" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "fetchInactiveFeedError"
     */
    public function testPropertyFetchInactiveFeedError()
    {
        $this->markTestIncomplete(
            'Test of "fetchInactiveFeedError" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "encodingError"
     */
    public function testPropertyEncodingError()
    {
        $this->markTestIncomplete(
            'Test of "encodingError" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "delimiterError"
     */
    public function testPropertyDelimiterError()
    {
        $this->markTestIncomplete(
            'Test of "delimiterError" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "requiredColumnsMissing"
     */
    public function testPropertyRequiredColumnsMissing()
    {
        $this->markTestIncomplete(
            'Test of "requiredColumnsMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "imageLinkInvalid"
     */
    public function testPropertyImageLinkInvalid()
    {
        $this->markTestIncomplete(
            'Test of "imageLinkInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "itemidMissing"
     */
    public function testPropertyItemidMissing()
    {
        $this->markTestIncomplete(
            'Test of "itemidMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "titleMissing"
     */
    public function testPropertyTitleMissing()
    {
        $this->markTestIncomplete(
            'Test of "titleMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "descriptionMissing"
     */
    public function testPropertyDescriptionMissing()
    {
        $this->markTestIncomplete(
            'Test of "descriptionMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "productCategoryInvalid"
     */
    public function testPropertyProductCategoryInvalid()
    {
        $this->markTestIncomplete(
            'Test of "productCategoryInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "productLinkMissing"
     */
    public function testPropertyProductLinkMissing()
    {
        $this->markTestIncomplete(
            'Test of "productLinkMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "imageLinkMissing"
     */
    public function testPropertyImageLinkMissing()
    {
        $this->markTestIncomplete(
            'Test of "imageLinkMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "availabilityInvalid"
     */
    public function testPropertyAvailabilityInvalid()
    {
        $this->markTestIncomplete(
            'Test of "availabilityInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "productPriceInvalid"
     */
    public function testPropertyProductPriceInvalid()
    {
        $this->markTestIncomplete(
            'Test of "productPriceInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "linkFormatInvalid"
     */
    public function testPropertyLinkFormatInvalid()
    {
        $this->markTestIncomplete(
            'Test of "linkFormatInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "parseLineError"
     */
    public function testPropertyParseLineError()
    {
        $this->markTestIncomplete(
            'Test of "parseLineError" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "adwordsFormatInvalid"
     */
    public function testPropertyAdwordsFormatInvalid()
    {
        $this->markTestIncomplete(
            'Test of "adwordsFormatInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "productCategoryMissing"
     */
    public function testPropertyProductCategoryMissing()
    {
        $this->markTestIncomplete(
            'Test of "productCategoryMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "internalServiceError"
     */
    public function testPropertyInternalServiceError()
    {
        $this->markTestIncomplete(
            'Test of "internalServiceError" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "noVerifiedDomain"
     */
    public function testPropertyNoVerifiedDomain()
    {
        $this->markTestIncomplete(
            'Test of "noVerifiedDomain" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "adultInvalid"
     */
    public function testPropertyAdultInvalid()
    {
        $this->markTestIncomplete(
            'Test of "adultInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "invalidDomain"
     */
    public function testPropertyInvalidDomain()
    {
        $this->markTestIncomplete(
            'Test of "invalidDomain" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "feedLengthTooLong"
     */
    public function testPropertyFeedLengthTooLong()
    {
        $this->markTestIncomplete(
            'Test of "feedLengthTooLong" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "linkLengthTooLong"
     */
    public function testPropertyLinkLengthTooLong()
    {
        $this->markTestIncomplete(
            'Test of "linkLengthTooLong" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "malformedXml"
     */
    public function testPropertyMalformedXml()
    {
        $this->markTestIncomplete(
            'Test of "malformedXml" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "redirectInvalid"
     */
    public function testPropertyRedirectInvalid()
    {
        $this->markTestIncomplete(
            'Test of "redirectInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "priceMissing"
     */
    public function testPropertyPriceMissing()
    {
        $this->markTestIncomplete(
            'Test of "priceMissing" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "feedTooSmall"
     */
    public function testPropertyFeedTooSmall()
    {
        $this->markTestIncomplete(
            'Test of "feedTooSmall" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "conditionInvalid"
     */
    public function testPropertyConditionInvalid()
    {
        $this->markTestIncomplete(
            'Test of "conditionInvalid" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "shopifyNoProducts"
     */
    public function testPropertyShopifyNoProducts()
    {
        $this->markTestIncomplete(
            'Test of "shopifyNoProducts" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "maxItemsPerItemGroupExceeded"
     */
    public function testPropertyMaxItemsPerItemGroupExceeded()
    {
        $this->markTestIncomplete(
            'Test of "maxItemsPerItemGroupExceeded" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "itemMainImageDownloadFailure"
     */
    public function testPropertyItemMainImageDownloadFailure()
    {
        $this->markTestIncomplete(
            'Test of "itemMainImageDownloadFailure" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "pinjoinContentUnsafe"
     */
    public function testPropertyPinjoinContentUnsafe()
    {
        $this->markTestIncomplete(
            'Test of "pinjoinContentUnsafe" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "blocklistedImageSignature"
     */
    public function testPropertyBlocklistedImageSignature()
    {
        $this->markTestIncomplete(
            'Test of "blocklistedImageSignature" property in "CatalogsFeedValidationErrors" model has not been implemented yet.'
        );
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = CatalogsFeedValidationErrors::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}
