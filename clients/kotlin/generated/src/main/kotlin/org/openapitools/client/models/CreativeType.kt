/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Ad creative type enum. For update, only draft ads may update creative type. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
 *
 * Values: REGULAR,VIDEO,SHOPPING,CAROUSEL,MAX_VIDEO,SHOP_THE_PIN,COLLECTION,IDEA,SHOWCASE,QUIZ
 */

@JsonClass(generateAdapter = false)
enum class CreativeType(val value: kotlin.String) {

    @Json(name = "REGULAR")
    REGULAR("REGULAR"),

    @Json(name = "VIDEO")
    VIDEO("VIDEO"),

    @Json(name = "SHOPPING")
    SHOPPING("SHOPPING"),

    @Json(name = "CAROUSEL")
    CAROUSEL("CAROUSEL"),

    @Json(name = "MAX_VIDEO")
    MAX_VIDEO("MAX_VIDEO"),

    @Json(name = "SHOP_THE_PIN")
    SHOP_THE_PIN("SHOP_THE_PIN"),

    @Json(name = "COLLECTION")
    COLLECTION("COLLECTION"),

    @Json(name = "IDEA")
    IDEA("IDEA"),

    @Json(name = "SHOWCASE")
    SHOWCASE("SHOWCASE"),

    @Json(name = "QUIZ")
    QUIZ("QUIZ");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is CreativeType) "$data" else null

        /**
         * Returns a valid [CreativeType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): CreativeType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

