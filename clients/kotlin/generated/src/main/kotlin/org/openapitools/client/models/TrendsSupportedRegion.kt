/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: US,CA,DE,FR,ES,IT,DEPlusATPlusCH,GBPlusIE,ITPlusESPlusPTPlusGRPlusMT,PLPlusROPlusHUPlusSKPlusCZ,SEPlusDKPlusFIPlusNO,NLPlusBEPlusLU,AR,BR,CO,MX,MXPlusARPlusCOPlusCL,AUPlusNZ
 */

@JsonClass(generateAdapter = false)
enum class TrendsSupportedRegion(val value: kotlin.String) {

    @Json(name = "US")
    US("US"),

    @Json(name = "CA")
    CA("CA"),

    @Json(name = "DE")
    DE("DE"),

    @Json(name = "FR")
    FR("FR"),

    @Json(name = "ES")
    ES("ES"),

    @Json(name = "IT")
    IT("IT"),

    @Json(name = "DE+AT+CH")
    DEPlusATPlusCH("DE+AT+CH"),

    @Json(name = "GB+IE")
    GBPlusIE("GB+IE"),

    @Json(name = "IT+ES+PT+GR+MT")
    ITPlusESPlusPTPlusGRPlusMT("IT+ES+PT+GR+MT"),

    @Json(name = "PL+RO+HU+SK+CZ")
    PLPlusROPlusHUPlusSKPlusCZ("PL+RO+HU+SK+CZ"),

    @Json(name = "SE+DK+FI+NO")
    SEPlusDKPlusFIPlusNO("SE+DK+FI+NO"),

    @Json(name = "NL+BE+LU")
    NLPlusBEPlusLU("NL+BE+LU"),

    @Json(name = "AR")
    AR("AR"),

    @Json(name = "BR")
    BR("BR"),

    @Json(name = "CO")
    CO("CO"),

    @Json(name = "MX")
    MX("MX"),

    @Json(name = "MX+AR+CO+CL")
    MXPlusARPlusCOPlusCL("MX+AR+CO+CL"),

    @Json(name = "AU+NZ")
    AUPlusNZ("AU+NZ");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TrendsSupportedRegion) "$data" else null

        /**
         * Returns a valid [TrendsSupportedRegion] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TrendsSupportedRegion? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

