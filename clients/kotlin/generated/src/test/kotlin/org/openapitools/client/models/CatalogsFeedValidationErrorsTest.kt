/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CatalogsFeedValidationErrors

class CatalogsFeedValidationErrorsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CatalogsFeedValidationErrors
        //val modelInstance = CatalogsFeedValidationErrors()

        // to test the property `FETCH_ERROR` - Pinterest couldn't download your feed.
        should("test FETCH_ERROR") {
            // uncomment below to test the property
            //modelInstance.FETCH_ERROR shouldBe ("TODO")
        }

        // to test the property `FETCH_INACTIVE_FEED_ERROR` - Your feed wasn't ingested because it hasnâ€™t changed in the previous 90 days.
        should("test FETCH_INACTIVE_FEED_ERROR") {
            // uncomment below to test the property
            //modelInstance.FETCH_INACTIVE_FEED_ERROR shouldBe ("TODO")
        }

        // to test the property `ENCODING_ERROR` - Your feed includes data with an unsupported encoding format.
        should("test ENCODING_ERROR") {
            // uncomment below to test the property
            //modelInstance.ENCODING_ERROR shouldBe ("TODO")
        }

        // to test the property `DELIMITER_ERROR` - Your feed includes data with formatting errors.
        should("test DELIMITER_ERROR") {
            // uncomment below to test the property
            //modelInstance.DELIMITER_ERROR shouldBe ("TODO")
        }

        // to test the property `REQUIRED_COLUMNS_MISSING` - Your feed is missing some required column headers.
        should("test REQUIRED_COLUMNS_MISSING") {
            // uncomment below to test the property
            //modelInstance.REQUIRED_COLUMNS_MISSING shouldBe ("TODO")
        }

        // to test the property `DUPLICATE_PRODUCTS` - Some products are duplicated.
        should("test DUPLICATE_PRODUCTS") {
            // uncomment below to test the property
            //modelInstance.DUPLICATE_PRODUCTS shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_INVALID` - Some image links are formatted incorrectly.
        should("test IMAGE_LINK_INVALID") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_INVALID shouldBe ("TODO")
        }

        // to test the property `ITEMID_MISSING` - Some items are missing an item id in their product metadata, those items will not be published.
        should("test ITEMID_MISSING") {
            // uncomment below to test the property
            //modelInstance.ITEMID_MISSING shouldBe ("TODO")
        }

        // to test the property `TITLE_MISSING` - Some items are missing a title in their product metadata, those items will not be published.
        should("test TITLE_MISSING") {
            // uncomment below to test the property
            //modelInstance.TITLE_MISSING shouldBe ("TODO")
        }

        // to test the property `DESCRIPTION_MISSING` - Some items are missing a description in their product metadata, those items will not be published.
        should("test DESCRIPTION_MISSING") {
            // uncomment below to test the property
            //modelInstance.DESCRIPTION_MISSING shouldBe ("TODO")
        }

        // to test the property `PRODUCT_LINK_MISSING` - Some items are missing a link URL in their product metadata, those items will not be published.
        should("test PRODUCT_LINK_MISSING") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_LINK_MISSING shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_MISSING` - Some items are missing an image link URL in their product metadata, those items will not be published.
        should("test IMAGE_LINK_MISSING") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_MISSING shouldBe ("TODO")
        }

        // to test the property `AVAILABILITY_INVALID` - Some items are missing an availability value in their product metadata, those items will not be published.
        should("test AVAILABILITY_INVALID") {
            // uncomment below to test the property
            //modelInstance.AVAILABILITY_INVALID shouldBe ("TODO")
        }

        // to test the property `PRODUCT_PRICE_INVALID` - Some items have price formatting errors in their product metadata, those items will not be published.
        should("test PRODUCT_PRICE_INVALID") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_PRICE_INVALID shouldBe ("TODO")
        }

        // to test the property `LINK_FORMAT_INVALID` - Some link values are formatted incorrectly.
        should("test LINK_FORMAT_INVALID") {
            // uncomment below to test the property
            //modelInstance.LINK_FORMAT_INVALID shouldBe ("TODO")
        }

        // to test the property `PARSE_LINE_ERROR` - Your feed contains formatting errors for some items.
        should("test PARSE_LINE_ERROR") {
            // uncomment below to test the property
            //modelInstance.PARSE_LINE_ERROR shouldBe ("TODO")
        }

        // to test the property `ADWORDS_FORMAT_INVALID` - Some adwords links contain too many characters.
        should("test ADWORDS_FORMAT_INVALID") {
            // uncomment below to test the property
            //modelInstance.ADWORDS_FORMAT_INVALID shouldBe ("TODO")
        }

        // to test the property `INTERNAL_SERVICE_ERROR` - We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.
        should("test INTERNAL_SERVICE_ERROR") {
            // uncomment below to test the property
            //modelInstance.INTERNAL_SERVICE_ERROR shouldBe ("TODO")
        }

        // to test the property `NO_VERIFIED_DOMAIN` - Your merchant domain needs to be claimed.
        should("test NO_VERIFIED_DOMAIN") {
            // uncomment below to test the property
            //modelInstance.NO_VERIFIED_DOMAIN shouldBe ("TODO")
        }

        // to test the property `ADULT_INVALID` - Some items have invalid adult values.
        should("test ADULT_INVALID") {
            // uncomment below to test the property
            //modelInstance.ADULT_INVALID shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_LENGTH_TOO_LONG` - Some items have image_link URLs that contain too many characters, so those items will not be published.
        should("test IMAGE_LINK_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `INVALID_DOMAIN` - Some of your product link values don't match the verified domain associated with this account.
        should("test INVALID_DOMAIN") {
            // uncomment below to test the property
            //modelInstance.INVALID_DOMAIN shouldBe ("TODO")
        }

        // to test the property `FEED_LENGTH_TOO_LONG` - Your feed contains too many items, some items will not be published.
        should("test FEED_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.FEED_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `LINK_LENGTH_TOO_LONG` - Some product links contain too many characters, those items will not be published.
        should("test LINK_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.LINK_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `MALFORMED_XML` - Your feed couldn't be validated because the xml file is formatted incorrectly.
        should("test MALFORMED_XML") {
            // uncomment below to test the property
            //modelInstance.MALFORMED_XML shouldBe ("TODO")
        }

        // to test the property `PRICE_MISSING` - Some products are missing a price, those items will not be published.
        should("test PRICE_MISSING") {
            // uncomment below to test the property
            //modelInstance.PRICE_MISSING shouldBe ("TODO")
        }

        // to test the property `FEED_TOO_SMALL` - Your feed couldn't be validated because the file doesn't contain the minimum number of lines required.
        should("test FEED_TOO_SMALL") {
            // uncomment below to test the property
            //modelInstance.FEED_TOO_SMALL shouldBe ("TODO")
        }

        // to test the property `MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED` - Some items exceed the maximum number of items per item group, those items will not be published.
        should("test MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED") {
            // uncomment below to test the property
            //modelInstance.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED shouldBe ("TODO")
        }

        // to test the property `ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE` - Some items' main images can't be found.
        should("test ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE") {
            // uncomment below to test the property
            //modelInstance.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE shouldBe ("TODO")
        }

        // to test the property `PINJOIN_CONTENT_UNSAFE` - Some items were not published because they don't meet Pinterest's Merchant Guidelines.
        should("test PINJOIN_CONTENT_UNSAFE") {
            // uncomment below to test the property
            //modelInstance.PINJOIN_CONTENT_UNSAFE shouldBe ("TODO")
        }

        // to test the property `BLOCKLISTED_IMAGE_SIGNATURE` - Some items were not published because they don't meet Pinterest's Merchant Guidelines.
        should("test BLOCKLISTED_IMAGE_SIGNATURE") {
            // uncomment below to test the property
            //modelInstance.BLOCKLISTED_IMAGE_SIGNATURE shouldBe ("TODO")
        }

        // to test the property `LIST_PRICE_INVALID` - Some items have list price formatting errors in their product metadata, those items will not be published.
        should("test LIST_PRICE_INVALID") {
            // uncomment below to test the property
            //modelInstance.LIST_PRICE_INVALID shouldBe ("TODO")
        }

        // to test the property `PRICE_CANNOT_BE_DETERMINED` - Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.
        should("test PRICE_CANNOT_BE_DETERMINED") {
            // uncomment below to test the property
            //modelInstance.PRICE_CANNOT_BE_DETERMINED shouldBe ("TODO")
        }

    }
}
