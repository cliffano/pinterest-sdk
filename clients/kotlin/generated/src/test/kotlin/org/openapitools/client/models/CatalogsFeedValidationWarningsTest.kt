/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CatalogsFeedValidationWarnings

class CatalogsFeedValidationWarningsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CatalogsFeedValidationWarnings
        //val modelInstance = CatalogsFeedValidationWarnings()

        // to test the property `AD_LINK_FORMAT_WARNING` - Some items have ad links that are formatted incorrectly.
        should("test AD_LINK_FORMAT_WARNING") {
            // uncomment below to test the property
            //modelInstance.AD_LINK_FORMAT_WARNING shouldBe ("TODO")
        }

        // to test the property `AD_LINK_SAME_AS_LINK` - Some items have ad link URLs that are duplicates of the link URLs for those items.
        should("test AD_LINK_SAME_AS_LINK") {
            // uncomment below to test the property
            //modelInstance.AD_LINK_SAME_AS_LINK shouldBe ("TODO")
        }

        // to test the property `TITLE_LENGTH_TOO_LONG` - The title for some items were truncated because they contain too many characters.
        should("test TITLE_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.TITLE_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `DESCRIPTION_LENGTH_TOO_LONG` - The description for some items were truncated because they contain too many characters.
        should("test DESCRIPTION_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.DESCRIPTION_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `GENDER_INVALID` - Some items have gender values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
        should("test GENDER_INVALID") {
            // uncomment below to test the property
            //modelInstance.GENDER_INVALID shouldBe ("TODO")
        }

        // to test the property `AGE_GROUP_INVALID` - Some items have age group values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
        should("test AGE_GROUP_INVALID") {
            // uncomment below to test the property
            //modelInstance.AGE_GROUP_INVALID shouldBe ("TODO")
        }

        // to test the property `SIZE_TYPE_INVALID` - Some items have size type values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
        should("test SIZE_TYPE_INVALID") {
            // uncomment below to test the property
            //modelInstance.SIZE_TYPE_INVALID shouldBe ("TODO")
        }

        // to test the property `SIZE_SYSTEM_INVALID` - Some items have size system values which are not one of the supported size systems.
        should("test SIZE_SYSTEM_INVALID") {
            // uncomment below to test the property
            //modelInstance.SIZE_SYSTEM_INVALID shouldBe ("TODO")
        }

        // to test the property `LINK_FORMAT_WARNING` - Some items have an invalid product link which contains invalid UTM tracking paramaters.
        should("test LINK_FORMAT_WARNING") {
            // uncomment below to test the property
            //modelInstance.LINK_FORMAT_WARNING shouldBe ("TODO")
        }

        // to test the property `SALES_PRICE_INVALID` - Some items have sale price values that are higher than the original price of the item.
        should("test SALES_PRICE_INVALID") {
            // uncomment below to test the property
            //modelInstance.SALES_PRICE_INVALID shouldBe ("TODO")
        }

        // to test the property `PRODUCT_CATEGORY_DEPTH_WARNING` - Some items only have 1 or 2 levels of google_product_category values, which may limit visibility in recommendations, search results and shopping experiences.
        should("test PRODUCT_CATEGORY_DEPTH_WARNING") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_CATEGORY_DEPTH_WARNING shouldBe ("TODO")
        }

        // to test the property `ADWORDS_FORMAT_WARNING` - Some items have adwords_redirect links that are formatted incorrectly.
        should("test ADWORDS_FORMAT_WARNING") {
            // uncomment below to test the property
            //modelInstance.ADWORDS_FORMAT_WARNING shouldBe ("TODO")
        }

        // to test the property `ADWORDS_SAME_AS_LINK` - Some items have adwords_redirect URLs that are duplicates of the link URLs for those items.
        should("test ADWORDS_SAME_AS_LINK") {
            // uncomment below to test the property
            //modelInstance.ADWORDS_SAME_AS_LINK shouldBe ("TODO")
        }

        // to test the property `DUPLICATE_HEADERS` - Your feed contains duplicate headers.
        should("test DUPLICATE_HEADERS") {
            // uncomment below to test the property
            //modelInstance.DUPLICATE_HEADERS shouldBe ("TODO")
        }

        // to test the property `FETCH_SAME_SIGNATURE` - Ingestion completed early because there are no changes to your feed since the last successful update.
        should("test FETCH_SAME_SIGNATURE") {
            // uncomment below to test the property
            //modelInstance.FETCH_SAME_SIGNATURE shouldBe ("TODO")
        }

        // to test the property `ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG` - Some items have additional_image_link URLs that contain too many characters, so those items will not be published.
        should("test ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `ADDITIONAL_IMAGE_LINK_WARNING` - Some items have additional_image_link URLs that are formatted incorrectly and will not be published with your items.
        should("test ADDITIONAL_IMAGE_LINK_WARNING") {
            // uncomment below to test the property
            //modelInstance.ADDITIONAL_IMAGE_LINK_WARNING shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_WARNING` - Some items have image_link URLs that are formatted incorrectly and will not be published with those items.
        should("test IMAGE_LINK_WARNING") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_WARNING shouldBe ("TODO")
        }

        // to test the property `SHIPPING_INVALID` - Some items have shipping values that are formatted incorrectly.
        should("test SHIPPING_INVALID") {
            // uncomment below to test the property
            //modelInstance.SHIPPING_INVALID shouldBe ("TODO")
        }

        // to test the property `TAX_INVALID` - Some items have tax values that are formatted incorrectly.
        should("test TAX_INVALID") {
            // uncomment below to test the property
            //modelInstance.TAX_INVALID shouldBe ("TODO")
        }

        // to test the property `SHIPPING_WEIGHT_INVALID` - Some items have invalid shipping_weight values.
        should("test SHIPPING_WEIGHT_INVALID") {
            // uncomment below to test the property
            //modelInstance.SHIPPING_WEIGHT_INVALID shouldBe ("TODO")
        }

        // to test the property `EXPIRATION_DATE_INVALID` - Some items have expiration_date values that are formatted incorrectly, those items will be published without an expiration date.
        should("test EXPIRATION_DATE_INVALID") {
            // uncomment below to test the property
            //modelInstance.EXPIRATION_DATE_INVALID shouldBe ("TODO")
        }

        // to test the property `AVAILABILITY_DATE_INVALID` - Some items have availability_date values that are formatted incorrectly, those items will be published without an availability date.
        should("test AVAILABILITY_DATE_INVALID") {
            // uncomment below to test the property
            //modelInstance.AVAILABILITY_DATE_INVALID shouldBe ("TODO")
        }

        // to test the property `SALE_DATE_INVALID` - Some items have sale_price_effective_date values that are formatted incorrectly, those items will be published without a sale date.
        should("test SALE_DATE_INVALID") {
            // uncomment below to test the property
            //modelInstance.SALE_DATE_INVALID shouldBe ("TODO")
        }

        // to test the property `WEIGHT_UNIT_INVALID` - Some items have weight_unit values that are formatted incorrectly, those items will be published without a weight unit.
        should("test WEIGHT_UNIT_INVALID") {
            // uncomment below to test the property
            //modelInstance.WEIGHT_UNIT_INVALID shouldBe ("TODO")
        }

        // to test the property `IS_BUNDLE_INVALID` - Some items have is_bundle values that are formatted incorrectly, those items will be published without being bundled with other products.
        should("test IS_BUNDLE_INVALID") {
            // uncomment below to test the property
            //modelInstance.IS_BUNDLE_INVALID shouldBe ("TODO")
        }

        // to test the property `UPDATED_TIME_INVALID` - Some items have updated_time values thate are formatted incorrectly, those items will be published without an updated time.
        should("test UPDATED_TIME_INVALID") {
            // uncomment below to test the property
            //modelInstance.UPDATED_TIME_INVALID shouldBe ("TODO")
        }

        // to test the property `CUSTOM_LABEL_LENGTH_TOO_LONG` - Some items have custom_label values that are too long, those items will be published without that custom label.
        should("test CUSTOM_LABEL_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.CUSTOM_LABEL_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `PRODUCT_TYPE_LENGTH_TOO_LONG` - Some items have product_type values that are too long, those items will be published without that product type.
        should("test PRODUCT_TYPE_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_TYPE_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `TOO_MANY_ADDITIONAL_IMAGE_LINKS` - Some items have additional_image_link values that exceed the limit for additional images, those items will be published without some of your images.
        should("test TOO_MANY_ADDITIONAL_IMAGE_LINKS") {
            // uncomment below to test the property
            //modelInstance.TOO_MANY_ADDITIONAL_IMAGE_LINKS shouldBe ("TODO")
        }

        // to test the property `MULTIPACK_INVALID` - Some items have invalid multipack values.
        should("test MULTIPACK_INVALID") {
            // uncomment below to test the property
            //modelInstance.MULTIPACK_INVALID shouldBe ("TODO")
        }

        // to test the property `INDEXED_PRODUCT_COUNT_LARGE_DELTA` - The product count has increased or decreased significantly compared to the last successful ingestion.
        should("test INDEXED_PRODUCT_COUNT_LARGE_DELTA") {
            // uncomment below to test the property
            //modelInstance.INDEXED_PRODUCT_COUNT_LARGE_DELTA shouldBe ("TODO")
        }

        // to test the property `ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE` - Some items include additional_image_links that can't be found.
        should("test ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE") {
            // uncomment below to test the property
            //modelInstance.ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE shouldBe ("TODO")
        }

        // to test the property `OPTIONAL_PRODUCT_CATEGORY_MISSING` - Some items are missing a google_product_category.
        should("test OPTIONAL_PRODUCT_CATEGORY_MISSING") {
            // uncomment below to test the property
            //modelInstance.OPTIONAL_PRODUCT_CATEGORY_MISSING shouldBe ("TODO")
        }

        // to test the property `OPTIONAL_PRODUCT_CATEGORY_INVALID` - Some items include google_product_category values that are not formatted correctly according to the GPC taxonomy.
        should("test OPTIONAL_PRODUCT_CATEGORY_INVALID") {
            // uncomment below to test the property
            //modelInstance.OPTIONAL_PRODUCT_CATEGORY_INVALID shouldBe ("TODO")
        }

        // to test the property `OPTIONAL_CONDITION_MISSING` - Some items are missing a condition value, which may limit visibility in recommendations, search results and shopping experiences.
        should("test OPTIONAL_CONDITION_MISSING") {
            // uncomment below to test the property
            //modelInstance.OPTIONAL_CONDITION_MISSING shouldBe ("TODO")
        }

        // to test the property `OPTIONAL_CONDITION_INVALID` - Some items include condition values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
        should("test OPTIONAL_CONDITION_INVALID") {
            // uncomment below to test the property
            //modelInstance.OPTIONAL_CONDITION_INVALID shouldBe ("TODO")
        }

        // to test the property `IOS_DEEP_LINK_INVALID` - Some items include invalid ios_deep_link values.
        should("test IOS_DEEP_LINK_INVALID") {
            // uncomment below to test the property
            //modelInstance.IOS_DEEP_LINK_INVALID shouldBe ("TODO")
        }

        // to test the property `ANDROID_DEEP_LINK_INVALID` - Some items include invalid android_deep_link.
        should("test ANDROID_DEEP_LINK_INVALID") {
            // uncomment below to test the property
            //modelInstance.ANDROID_DEEP_LINK_INVALID shouldBe ("TODO")
        }

        // to test the property `UTM_SOURCE_AUTO_CORRECTED` - Some items include utm_source values that are formatted incorrectly and have been automatically corrected.
        should("test UTM_SOURCE_AUTO_CORRECTED") {
            // uncomment below to test the property
            //modelInstance.UTM_SOURCE_AUTO_CORRECTED shouldBe ("TODO")
        }

        // to test the property `COUNTRY_DOES_NOT_MAP_TO_CURRENCY` - Some items include a currency that doesn't match the usual currency for the location where that product is sold or shipped.
        should("test COUNTRY_DOES_NOT_MAP_TO_CURRENCY") {
            // uncomment below to test the property
            //modelInstance.COUNTRY_DOES_NOT_MAP_TO_CURRENCY shouldBe ("TODO")
        }

        // to test the property `MIN_AD_PRICE_INVALID` - Some items include min_ad_price values that are formatted incorrectly.
        should("test MIN_AD_PRICE_INVALID") {
            // uncomment below to test the property
            //modelInstance.MIN_AD_PRICE_INVALID shouldBe ("TODO")
        }

        // to test the property `GTIN_INVALID` - Some items include incorrectly formatted GTINs.
        should("test GTIN_INVALID") {
            // uncomment below to test the property
            //modelInstance.GTIN_INVALID shouldBe ("TODO")
        }

        // to test the property `INCONSISTENT_CURRENCY_VALUES` - Some items include inconsistent currencies in price fields.
        should("test INCONSISTENT_CURRENCY_VALUES") {
            // uncomment below to test the property
            //modelInstance.INCONSISTENT_CURRENCY_VALUES shouldBe ("TODO")
        }

        // to test the property `SALES_PRICE_TOO_LOW` - Some items include sales price that is much lower than the list price.
        should("test SALES_PRICE_TOO_LOW") {
            // uncomment below to test the property
            //modelInstance.SALES_PRICE_TOO_LOW shouldBe ("TODO")
        }

        // to test the property `SHIPPING_WIDTH_INVALID` - Some items include incorrectly formatted shipping_width.
        should("test SHIPPING_WIDTH_INVALID") {
            // uncomment below to test the property
            //modelInstance.SHIPPING_WIDTH_INVALID shouldBe ("TODO")
        }

        // to test the property `SHIPPING_HEIGHT_INVALID` - Some items include incorrectly formatted shipping_height.
        should("test SHIPPING_HEIGHT_INVALID") {
            // uncomment below to test the property
            //modelInstance.SHIPPING_HEIGHT_INVALID shouldBe ("TODO")
        }

        // to test the property `SALES_PRICE_TOO_HIGH` - Some items include a sales price that is higher than the list price. The sales price has been defaulted to the list price.
        should("test SALES_PRICE_TOO_HIGH") {
            // uncomment below to test the property
            //modelInstance.SALES_PRICE_TOO_HIGH shouldBe ("TODO")
        }

        // to test the property `MPN_INVALID` - Some items include incorrectly formatted MPNs.
        should("test MPN_INVALID") {
            // uncomment below to test the property
            //modelInstance.MPN_INVALID shouldBe ("TODO")
        }

    }
}
