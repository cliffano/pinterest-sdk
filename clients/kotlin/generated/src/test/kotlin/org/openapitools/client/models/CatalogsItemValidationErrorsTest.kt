/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CatalogsItemValidationErrors
import org.openapitools.client.models.CatalogsItemValidationDetails

class CatalogsItemValidationErrorsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CatalogsItemValidationErrors
        //val modelInstance = CatalogsItemValidationErrors()

        // to test the property `ADULT_INVALID`
        should("test ADULT_INVALID") {
            // uncomment below to test the property
            //modelInstance.ADULT_INVALID shouldBe ("TODO")
        }

        // to test the property `ADWORDS_FORMAT_INVALID`
        should("test ADWORDS_FORMAT_INVALID") {
            // uncomment below to test the property
            //modelInstance.ADWORDS_FORMAT_INVALID shouldBe ("TODO")
        }

        // to test the property `AVAILABILITY_INVALID`
        should("test AVAILABILITY_INVALID") {
            // uncomment below to test the property
            //modelInstance.AVAILABILITY_INVALID shouldBe ("TODO")
        }

        // to test the property `BLOCKLISTED_IMAGE_SIGNATURE`
        should("test BLOCKLISTED_IMAGE_SIGNATURE") {
            // uncomment below to test the property
            //modelInstance.BLOCKLISTED_IMAGE_SIGNATURE shouldBe ("TODO")
        }

        // to test the property `DESCRIPTION_MISSING`
        should("test DESCRIPTION_MISSING") {
            // uncomment below to test the property
            //modelInstance.DESCRIPTION_MISSING shouldBe ("TODO")
        }

        // to test the property `DUPLICATE_PRODUCTS`
        should("test DUPLICATE_PRODUCTS") {
            // uncomment below to test the property
            //modelInstance.DUPLICATE_PRODUCTS shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_INVALID`
        should("test IMAGE_LINK_INVALID") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_INVALID shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_LENGTH_TOO_LONG`
        should("test IMAGE_LINK_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `IMAGE_LINK_MISSING`
        should("test IMAGE_LINK_MISSING") {
            // uncomment below to test the property
            //modelInstance.IMAGE_LINK_MISSING shouldBe ("TODO")
        }

        // to test the property `INVALID_DOMAIN`
        should("test INVALID_DOMAIN") {
            // uncomment below to test the property
            //modelInstance.INVALID_DOMAIN shouldBe ("TODO")
        }

        // to test the property `ITEMID_MISSING`
        should("test ITEMID_MISSING") {
            // uncomment below to test the property
            //modelInstance.ITEMID_MISSING shouldBe ("TODO")
        }

        // to test the property `ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE`
        should("test ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE") {
            // uncomment below to test the property
            //modelInstance.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE shouldBe ("TODO")
        }

        // to test the property `LINK_FORMAT_INVALID`
        should("test LINK_FORMAT_INVALID") {
            // uncomment below to test the property
            //modelInstance.LINK_FORMAT_INVALID shouldBe ("TODO")
        }

        // to test the property `LINK_LENGTH_TOO_LONG`
        should("test LINK_LENGTH_TOO_LONG") {
            // uncomment below to test the property
            //modelInstance.LINK_LENGTH_TOO_LONG shouldBe ("TODO")
        }

        // to test the property `LIST_PRICE_INVALID`
        should("test LIST_PRICE_INVALID") {
            // uncomment below to test the property
            //modelInstance.LIST_PRICE_INVALID shouldBe ("TODO")
        }

        // to test the property `MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED`
        should("test MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED") {
            // uncomment below to test the property
            //modelInstance.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED shouldBe ("TODO")
        }

        // to test the property `PARSE_LINE_ERROR`
        should("test PARSE_LINE_ERROR") {
            // uncomment below to test the property
            //modelInstance.PARSE_LINE_ERROR shouldBe ("TODO")
        }

        // to test the property `PINJOIN_CONTENT_UNSAFE`
        should("test PINJOIN_CONTENT_UNSAFE") {
            // uncomment below to test the property
            //modelInstance.PINJOIN_CONTENT_UNSAFE shouldBe ("TODO")
        }

        // to test the property `PRICE_CANNOT_BE_DETERMINED`
        should("test PRICE_CANNOT_BE_DETERMINED") {
            // uncomment below to test the property
            //modelInstance.PRICE_CANNOT_BE_DETERMINED shouldBe ("TODO")
        }

        // to test the property `PRICE_MISSING`
        should("test PRICE_MISSING") {
            // uncomment below to test the property
            //modelInstance.PRICE_MISSING shouldBe ("TODO")
        }

        // to test the property `PRODUCT_LINK_MISSING`
        should("test PRODUCT_LINK_MISSING") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_LINK_MISSING shouldBe ("TODO")
        }

        // to test the property `PRODUCT_PRICE_INVALID`
        should("test PRODUCT_PRICE_INVALID") {
            // uncomment below to test the property
            //modelInstance.PRODUCT_PRICE_INVALID shouldBe ("TODO")
        }

        // to test the property `TITLE_MISSING`
        should("test TITLE_MISSING") {
            // uncomment below to test the property
            //modelInstance.TITLE_MISSING shouldBe ("TODO")
        }

    }
}
