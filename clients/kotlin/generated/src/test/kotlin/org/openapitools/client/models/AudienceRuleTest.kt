/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AudienceRule
import org.openapitools.client.models.ObjectiveType
import org.openapitools.client.models.PinterestTagEventData

class AudienceRuleTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AudienceRule
        //val modelInstance = AudienceRule()

        // to test the property `country` - Valid countries include: \"US\", \"CA\", and \"GB\".
        should("test country") {
            // uncomment below to test the property
            //modelInstance.country shouldBe ("TODO")
        }

        // to test the property `customerListId` - Customer list ID. For CUSTOMER_LIST `audience_type`.
        should("test customerListId") {
            // uncomment below to test the property
            //modelInstance.customerListId shouldBe ("TODO")
        }

        // to test the property `engagementDomain` - The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
        should("test engagementDomain") {
            // uncomment below to test the property
            //modelInstance.engagementDomain shouldBe ("TODO")
        }

        // to test the property `engagementType` - Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
        should("test engagementType") {
            // uncomment below to test the property
            //modelInstance.engagementType shouldBe ("TODO")
        }

        // to test the property `event` - A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
        should("test event") {
            // uncomment below to test the property
            //modelInstance.event shouldBe ("TODO")
        }

        // to test the property `eventData`
        should("test eventData") {
            // uncomment below to test the property
            //modelInstance.eventData shouldBe ("TODO")
        }

        // to test the property `percentage` - Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
        should("test percentage") {
            // uncomment below to test the property
            //modelInstance.percentage shouldBe ("TODO")
        }

        // to test the property `pinId` - IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
        should("test pinId") {
            // uncomment below to test the property
            //modelInstance.pinId shouldBe ("TODO")
        }

        // to test the property `prefill` - Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
        should("test prefill") {
            // uncomment below to test the property
            //modelInstance.prefill shouldBe ("TODO")
        }

        // to test the property `retentionDays` - Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
        should("test retentionDays") {
            // uncomment below to test the property
            //modelInstance.retentionDays shouldBe ("TODO")
        }

        // to test the property `seedId` - Audience ID(s). For ACTALIKE `audience_type`. 
        should("test seedId") {
            // uncomment below to test the property
            //modelInstance.seedId shouldBe ("TODO")
        }

        // to test the property `url` - Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
        should("test url") {
            // uncomment below to test the property
            //modelInstance.url shouldBe ("TODO")
        }

        // to test the property `visitorSourceId` - The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
        should("test visitorSourceId") {
            // uncomment below to test the property
            //modelInstance.visitorSourceId shouldBe ("TODO")
        }

        // to test the property `eventSource` - Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
        should("test eventSource") {
            // uncomment below to test the property
            //modelInstance.eventSource shouldBe ("TODO")
        }

        // to test the property `ingestionSource` - Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
        should("test ingestionSource") {
            // uncomment below to test the property
            //modelInstance.ingestionSource shouldBe ("TODO")
        }

        // to test the property `engagerType` - Optional for ENGAGEMENT. Engager type value should be 1-2.
        should("test engagerType") {
            // uncomment below to test the property
            //modelInstance.engagerType shouldBe ("TODO")
        }

        // to test the property `campaignId` - Campaign ID for engagement audience filter.
        should("test campaignId") {
            // uncomment below to test the property
            //modelInstance.campaignId shouldBe ("TODO")
        }

        // to test the property `adId` - Ad ID for engagement audience filter.
        should("test adId") {
            // uncomment below to test the property
            //modelInstance.adId shouldBe ("TODO")
        }

        // to test the property `objectiveType` - Objective for engagement audience filter.
        should("test objectiveType") {
            // uncomment below to test the property
            //modelInstance.objectiveType shouldBe ("TODO")
        }

        // to test the property `adAccountId` - Ad account ID.
        should("test adAccountId") {
            // uncomment below to test the property
            //modelInstance.adAccountId shouldBe ("TODO")
        }

    }
}
