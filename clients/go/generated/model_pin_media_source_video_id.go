/*
Pinterest REST API

Pinterest's REST API

API version: 5.3.0
Contact: blah@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PinMediaSourceVideoID Video ID-based media source
type PinMediaSourceVideoID struct {
	SourceType string `json:"source_type"`
	CoverImageUrl string `json:"cover_image_url"`
	MediaId string `json:"media_id"`
}

// NewPinMediaSourceVideoID instantiates a new PinMediaSourceVideoID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinMediaSourceVideoID(sourceType string, coverImageUrl string, mediaId string) *PinMediaSourceVideoID {
	this := PinMediaSourceVideoID{}
	this.SourceType = sourceType
	this.CoverImageUrl = coverImageUrl
	this.MediaId = mediaId
	return &this
}

// NewPinMediaSourceVideoIDWithDefaults instantiates a new PinMediaSourceVideoID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinMediaSourceVideoIDWithDefaults() *PinMediaSourceVideoID {
	this := PinMediaSourceVideoID{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *PinMediaSourceVideoID) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetSourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *PinMediaSourceVideoID) SetSourceType(v string) {
	o.SourceType = v
}

// GetCoverImageUrl returns the CoverImageUrl field value
func (o *PinMediaSourceVideoID) GetCoverImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CoverImageUrl
}

// GetCoverImageUrlOk returns a tuple with the CoverImageUrl field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetCoverImageUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CoverImageUrl, true
}

// SetCoverImageUrl sets field value
func (o *PinMediaSourceVideoID) SetCoverImageUrl(v string) {
	o.CoverImageUrl = v
}

// GetMediaId returns the MediaId field value
func (o *PinMediaSourceVideoID) GetMediaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaId
}

// GetMediaIdOk returns a tuple with the MediaId field value
// and a boolean to check if the value has been set.
func (o *PinMediaSourceVideoID) GetMediaIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MediaId, true
}

// SetMediaId sets field value
func (o *PinMediaSourceVideoID) SetMediaId(v string) {
	o.MediaId = v
}

func (o PinMediaSourceVideoID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source_type"] = o.SourceType
	}
	if true {
		toSerialize["cover_image_url"] = o.CoverImageUrl
	}
	if true {
		toSerialize["media_id"] = o.MediaId
	}
	return json.Marshal(toSerialize)
}

type NullablePinMediaSourceVideoID struct {
	value *PinMediaSourceVideoID
	isSet bool
}

func (v NullablePinMediaSourceVideoID) Get() *PinMediaSourceVideoID {
	return v.value
}

func (v *NullablePinMediaSourceVideoID) Set(val *PinMediaSourceVideoID) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMediaSourceVideoID) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMediaSourceVideoID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMediaSourceVideoID(val *PinMediaSourceVideoID) *NullablePinMediaSourceVideoID {
	return &NullablePinMediaSourceVideoID{value: val, isSet: true}
}

func (v NullablePinMediaSourceVideoID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMediaSourceVideoID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


