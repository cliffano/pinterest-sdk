/*
Pinterest REST API

Testing BoardsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/oapicf/pinterest-sdk"
)

func Test_openapi_BoardsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BoardsAPIService BoardSectionsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardSectionsCreate(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardSectionsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string
		var sectionId string

		httpRes, err := apiClient.BoardsAPI.BoardSectionsDelete(context.Background(), boardId, sectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardSectionsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardSectionsList(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardSectionsListPins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string
		var sectionId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardSectionsListPins(context.Background(), boardId, sectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardSectionsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string
		var sectionId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardSectionsUpdate(context.Background(), boardId, sectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BoardsAPI.BoardsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		httpRes, err := apiClient.BoardsAPI.BoardsDelete(context.Background(), boardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardsGet(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BoardsAPI.BoardsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardsListPins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardsListPins(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BoardsAPIService BoardsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.BoardsAPI.BoardsUpdate(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
