/*
Pinterest REST API

Pinterest's REST API

API version: 5.3.0
Contact: pinterest-api@pinterest.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ context.Context
)

// AdAccountsApiService AdAccountsApi service
type AdAccountsApiService service

type ApiAdAccountAnalyticsRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	startDate *string
	endDate *string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD
func (r ApiAdAccountAnalyticsRequest) StartDate(startDate string) ApiAdAccountAnalyticsRequest {
	r.startDate = &startDate
	return r
}
// Metric report end date (UTC). Format: YYYY-MM-DD
func (r ApiAdAccountAnalyticsRequest) EndDate(endDate string) ApiAdAccountAnalyticsRequest {
	r.endDate = &endDate
	return r
}
// Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiAdAccountAnalyticsRequest) Columns(columns []string) ApiAdAccountAnalyticsRequest {
	r.columns = &columns
	return r
}
// Granularity
func (r ApiAdAccountAnalyticsRequest) Granularity(granularity Granularity) ApiAdAccountAnalyticsRequest {
	r.granularity = &granularity
	return r
}
// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdAccountAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiAdAccountAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}
// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdAccountAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiAdAccountAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}
// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiAdAccountAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiAdAccountAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}
// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiAdAccountAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiAdAccountAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiAdAccountAnalyticsRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.AdAccountAnalyticsExecute(r)
}

/*
AdAccountAnalytics Get ad account analytics

Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdAccountAnalyticsRequest
*/
func (a *AdAccountsApiService) AdAccountAnalytics(ctx context.Context, adAccountId string) ApiAdAccountAnalyticsRequest {
	return ApiAdAccountAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *AdAccountsApiService) AdAccountAnalyticsExecute(r ApiAdAccountAnalyticsRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AdAccountAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	localVarQueryParams.Add("columns", parameterToString(*r.columns, "csv"))
	localVarQueryParams.Add("granularity", parameterToString(*r.granularity, ""))
	if r.clickWindowDays != nil {
		localVarQueryParams.Add("click_window_days", parameterToString(*r.clickWindowDays, ""))
	}
	if r.engagementWindowDays != nil {
		localVarQueryParams.Add("engagement_window_days", parameterToString(*r.engagementWindowDays, ""))
	}
	if r.viewWindowDays != nil {
		localVarQueryParams.Add("view_window_days", parameterToString(*r.viewWindowDays, ""))
	}
	if r.conversionReportTime != nil {
		localVarQueryParams.Add("conversion_report_time", parameterToString(*r.conversionReportTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdAccountsListRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	bookmark *string
	pageSize *int32
	includeSharedAccounts *bool
}

// Cursor used to fetch the next page of items
func (r ApiAdAccountsListRequest) Bookmark(bookmark string) ApiAdAccountsListRequest {
	r.bookmark = &bookmark
	return r
}
// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiAdAccountsListRequest) PageSize(pageSize int32) ApiAdAccountsListRequest {
	r.pageSize = &pageSize
	return r
}
// Include shared ad accounts
func (r ApiAdAccountsListRequest) IncludeSharedAccounts(includeSharedAccounts bool) ApiAdAccountsListRequest {
	r.includeSharedAccounts = &includeSharedAccounts
	return r
}

func (r ApiAdAccountsListRequest) Execute() (*Paginated, *http.Response, error) {
	return r.ApiService.AdAccountsListExecute(r)
}

/*
AdAccountsList List ad accounts

Get a list of the ad_accounts that the "operation user_account" has access to.
- This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdAccountsListRequest
*/
func (a *AdAccountsApiService) AdAccountsList(ctx context.Context) ApiAdAccountsListRequest {
	return ApiAdAccountsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Paginated
func (a *AdAccountsApiService) AdAccountsListExecute(r ApiAdAccountsListRequest) (*Paginated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Paginated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AdAccountsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bookmark != nil {
		localVarQueryParams.Add("bookmark", parameterToString(*r.bookmark, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.includeSharedAccounts != nil {
		localVarQueryParams.Add("include_shared_accounts", parameterToString(*r.includeSharedAccounts, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsAnalyticsRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	startDate *string
	endDate *string
	adGroupIds *[]string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD
func (r ApiAdGroupsAnalyticsRequest) StartDate(startDate string) ApiAdGroupsAnalyticsRequest {
	r.startDate = &startDate
	return r
}
// Metric report end date (UTC). Format: YYYY-MM-DD
func (r ApiAdGroupsAnalyticsRequest) EndDate(endDate string) ApiAdGroupsAnalyticsRequest {
	r.endDate = &endDate
	return r
}
// List of Ad group Ids to use to filter the results.
func (r ApiAdGroupsAnalyticsRequest) AdGroupIds(adGroupIds []string) ApiAdGroupsAnalyticsRequest {
	r.adGroupIds = &adGroupIds
	return r
}
// Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiAdGroupsAnalyticsRequest) Columns(columns []string) ApiAdGroupsAnalyticsRequest {
	r.columns = &columns
	return r
}
// Granularity
func (r ApiAdGroupsAnalyticsRequest) Granularity(granularity Granularity) ApiAdGroupsAnalyticsRequest {
	r.granularity = &granularity
	return r
}
// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdGroupsAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiAdGroupsAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}
// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdGroupsAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiAdGroupsAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}
// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiAdGroupsAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiAdGroupsAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}
// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiAdGroupsAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiAdGroupsAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiAdGroupsAnalyticsRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.AdGroupsAnalyticsExecute(r)
}

/*
AdGroupsAnalytics Get ad group analytics

Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsAnalyticsRequest
*/
func (a *AdAccountsApiService) AdGroupsAnalytics(ctx context.Context, adAccountId string) ApiAdGroupsAnalyticsRequest {
	return ApiAdGroupsAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *AdAccountsApiService) AdGroupsAnalyticsExecute(r ApiAdGroupsAnalyticsRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AdGroupsAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.adGroupIds == nil {
		return localVarReturnValue, nil, reportError("adGroupIds is required and must be specified")
	}
	if len(*r.adGroupIds) < 1 {
		return localVarReturnValue, nil, reportError("adGroupIds must have at least 1 elements")
	}
	if len(*r.adGroupIds) > 100 {
		return localVarReturnValue, nil, reportError("adGroupIds must have less than 100 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	{
		t := *r.adGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ad_group_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ad_group_ids", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("columns", parameterToString(*r.columns, "csv"))
	localVarQueryParams.Add("granularity", parameterToString(*r.granularity, ""))
	if r.clickWindowDays != nil {
		localVarQueryParams.Add("click_window_days", parameterToString(*r.clickWindowDays, ""))
	}
	if r.engagementWindowDays != nil {
		localVarQueryParams.Add("engagement_window_days", parameterToString(*r.engagementWindowDays, ""))
	}
	if r.viewWindowDays != nil {
		localVarQueryParams.Add("view_window_days", parameterToString(*r.viewWindowDays, ""))
	}
	if r.conversionReportTime != nil {
		localVarQueryParams.Add("conversion_report_time", parameterToString(*r.conversionReportTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdGroupsListRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	campaignIds *[]string
	adGroupIds *[]string
	entityStatuses *[]string
	pageSize *int32
	order *string
	bookmark *string
	translateInterestsToNames *bool
}

// List of Campaign Ids to use to filter the results.
func (r ApiAdGroupsListRequest) CampaignIds(campaignIds []string) ApiAdGroupsListRequest {
	r.campaignIds = &campaignIds
	return r
}
// List of Ad group Ids to use to filter the results.
func (r ApiAdGroupsListRequest) AdGroupIds(adGroupIds []string) ApiAdGroupsListRequest {
	r.adGroupIds = &adGroupIds
	return r
}
// Entity status
func (r ApiAdGroupsListRequest) EntityStatuses(entityStatuses []string) ApiAdGroupsListRequest {
	r.entityStatuses = &entityStatuses
	return r
}
// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiAdGroupsListRequest) PageSize(pageSize int32) ApiAdGroupsListRequest {
	r.pageSize = &pageSize
	return r
}
// The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
func (r ApiAdGroupsListRequest) Order(order string) ApiAdGroupsListRequest {
	r.order = &order
	return r
}
// Cursor used to fetch the next page of items
func (r ApiAdGroupsListRequest) Bookmark(bookmark string) ApiAdGroupsListRequest {
	r.bookmark = &bookmark
	return r
}
// Return interests as text names (if value is true) rather than topic IDs.
func (r ApiAdGroupsListRequest) TranslateInterestsToNames(translateInterestsToNames bool) ApiAdGroupsListRequest {
	r.translateInterestsToNames = &translateInterestsToNames
	return r
}

func (r ApiAdGroupsListRequest) Execute() (*Paginated, *http.Response, error) {
	return r.ApiService.AdGroupsListExecute(r)
}

/*
AdGroupsList List ad groups

Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdGroupsListRequest
*/
func (a *AdAccountsApiService) AdGroupsList(ctx context.Context, adAccountId string) ApiAdGroupsListRequest {
	return ApiAdGroupsListRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return Paginated
func (a *AdAccountsApiService) AdGroupsListExecute(r ApiAdGroupsListRequest) (*Paginated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Paginated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AdGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ad_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.campaignIds != nil {
		t := *r.campaignIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("campaign_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("campaign_ids", parameterToString(t, "multi"))
		}
	}
	if r.adGroupIds != nil {
		t := *r.adGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ad_group_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ad_group_ids", parameterToString(t, "multi"))
		}
	}
	if r.entityStatuses != nil {
		t := *r.entityStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entity_statuses", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entity_statuses", parameterToString(t, "multi"))
		}
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.order, ""))
	}
	if r.bookmark != nil {
		localVarQueryParams.Add("bookmark", parameterToString(*r.bookmark, ""))
	}
	if r.translateInterestsToNames != nil {
		localVarQueryParams.Add("translate_interests_to_names", parameterToString(*r.translateInterestsToNames, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdsAnalyticsRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	startDate *string
	endDate *string
	adIds *[]string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD
func (r ApiAdsAnalyticsRequest) StartDate(startDate string) ApiAdsAnalyticsRequest {
	r.startDate = &startDate
	return r
}
// Metric report end date (UTC). Format: YYYY-MM-DD
func (r ApiAdsAnalyticsRequest) EndDate(endDate string) ApiAdsAnalyticsRequest {
	r.endDate = &endDate
	return r
}
// List of Ad Ids to use to filter the results.
func (r ApiAdsAnalyticsRequest) AdIds(adIds []string) ApiAdsAnalyticsRequest {
	r.adIds = &adIds
	return r
}
// Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiAdsAnalyticsRequest) Columns(columns []string) ApiAdsAnalyticsRequest {
	r.columns = &columns
	return r
}
// Granularity
func (r ApiAdsAnalyticsRequest) Granularity(granularity Granularity) ApiAdsAnalyticsRequest {
	r.granularity = &granularity
	return r
}
// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdsAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiAdsAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}
// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiAdsAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiAdsAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}
// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiAdsAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiAdsAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}
// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiAdsAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiAdsAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiAdsAnalyticsRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.AdsAnalyticsExecute(r)
}

/*
AdsAnalytics Get ad analytics

Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdsAnalyticsRequest
*/
func (a *AdAccountsApiService) AdsAnalytics(ctx context.Context, adAccountId string) ApiAdsAnalyticsRequest {
	return ApiAdsAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *AdAccountsApiService) AdsAnalyticsExecute(r ApiAdsAnalyticsRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AdsAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ads/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.adIds == nil {
		return localVarReturnValue, nil, reportError("adIds is required and must be specified")
	}
	if len(*r.adIds) < 1 {
		return localVarReturnValue, nil, reportError("adIds must have at least 1 elements")
	}
	if len(*r.adIds) > 100 {
		return localVarReturnValue, nil, reportError("adIds must have less than 100 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	{
		t := *r.adIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ad_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ad_ids", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("columns", parameterToString(*r.columns, "csv"))
	localVarQueryParams.Add("granularity", parameterToString(*r.granularity, ""))
	if r.clickWindowDays != nil {
		localVarQueryParams.Add("click_window_days", parameterToString(*r.clickWindowDays, ""))
	}
	if r.engagementWindowDays != nil {
		localVarQueryParams.Add("engagement_window_days", parameterToString(*r.engagementWindowDays, ""))
	}
	if r.viewWindowDays != nil {
		localVarQueryParams.Add("view_window_days", parameterToString(*r.viewWindowDays, ""))
	}
	if r.conversionReportTime != nil {
		localVarQueryParams.Add("conversion_report_time", parameterToString(*r.conversionReportTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdsListRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	campaignIds *[]string
	adGroupIds *[]string
	adIds *[]string
	entityStatuses *[]string
	pageSize *int32
	order *string
	bookmark *string
}

// List of Campaign Ids to use to filter the results.
func (r ApiAdsListRequest) CampaignIds(campaignIds []string) ApiAdsListRequest {
	r.campaignIds = &campaignIds
	return r
}
// List of Ad group Ids to use to filter the results.
func (r ApiAdsListRequest) AdGroupIds(adGroupIds []string) ApiAdsListRequest {
	r.adGroupIds = &adGroupIds
	return r
}
// List of Ad Ids to use to filter the results.
func (r ApiAdsListRequest) AdIds(adIds []string) ApiAdsListRequest {
	r.adIds = &adIds
	return r
}
// Entity status
func (r ApiAdsListRequest) EntityStatuses(entityStatuses []string) ApiAdsListRequest {
	r.entityStatuses = &entityStatuses
	return r
}
// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiAdsListRequest) PageSize(pageSize int32) ApiAdsListRequest {
	r.pageSize = &pageSize
	return r
}
// The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
func (r ApiAdsListRequest) Order(order string) ApiAdsListRequest {
	r.order = &order
	return r
}
// Cursor used to fetch the next page of items
func (r ApiAdsListRequest) Bookmark(bookmark string) ApiAdsListRequest {
	r.bookmark = &bookmark
	return r
}

func (r ApiAdsListRequest) Execute() (*Paginated, *http.Response, error) {
	return r.ApiService.AdsListExecute(r)
}

/*
AdsList List ads

Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAdsListRequest
*/
func (a *AdAccountsApiService) AdsList(ctx context.Context, adAccountId string) ApiAdsListRequest {
	return ApiAdsListRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return Paginated
func (a *AdAccountsApiService) AdsListExecute(r ApiAdsListRequest) (*Paginated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Paginated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AdsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/ads"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.campaignIds != nil {
		t := *r.campaignIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("campaign_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("campaign_ids", parameterToString(t, "multi"))
		}
	}
	if r.adGroupIds != nil {
		t := *r.adGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ad_group_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ad_group_ids", parameterToString(t, "multi"))
		}
	}
	if r.adIds != nil {
		t := *r.adIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ad_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ad_ids", parameterToString(t, "multi"))
		}
	}
	if r.entityStatuses != nil {
		t := *r.entityStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entity_statuses", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entity_statuses", parameterToString(t, "multi"))
		}
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.order, ""))
	}
	if r.bookmark != nil {
		localVarQueryParams.Add("bookmark", parameterToString(*r.bookmark, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsCreateReportRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	adsAnalyticsCreateAsyncRequest *AdsAnalyticsCreateAsyncRequest
}

func (r ApiAnalyticsCreateReportRequest) AdsAnalyticsCreateAsyncRequest(adsAnalyticsCreateAsyncRequest AdsAnalyticsCreateAsyncRequest) ApiAnalyticsCreateReportRequest {
	r.adsAnalyticsCreateAsyncRequest = &adsAnalyticsCreateAsyncRequest
	return r
}

func (r ApiAnalyticsCreateReportRequest) Execute() (*AdsAnalyticsCreateAsyncResponse, *http.Response, error) {
	return r.ApiService.AnalyticsCreateReportExecute(r)
}

/*
AnalyticsCreateReport Create async request for an account analytics report

This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAnalyticsCreateReportRequest
*/
func (a *AdAccountsApiService) AnalyticsCreateReport(ctx context.Context, adAccountId string) ApiAnalyticsCreateReportRequest {
	return ApiAnalyticsCreateReportRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return AdsAnalyticsCreateAsyncResponse
func (a *AdAccountsApiService) AnalyticsCreateReportExecute(r ApiAnalyticsCreateReportRequest) (*AdsAnalyticsCreateAsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdsAnalyticsCreateAsyncResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AnalyticsCreateReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/reports"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adsAnalyticsCreateAsyncRequest == nil {
		return localVarReturnValue, nil, reportError("adsAnalyticsCreateAsyncRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adsAnalyticsCreateAsyncRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyticsGetReportRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	token *string
}

// Token returned from the post request creation call
func (r ApiAnalyticsGetReportRequest) Token(token string) ApiAnalyticsGetReportRequest {
	r.token = &token
	return r
}

func (r ApiAnalyticsGetReportRequest) Execute() (*AdsAnalyticsGetAsyncResponse, *http.Response, error) {
	return r.ApiService.AnalyticsGetReportExecute(r)
}

/*
AnalyticsGetReport Get the account analytics report created by the async call

This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it's valid for an hour.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiAnalyticsGetReportRequest
*/
func (a *AdAccountsApiService) AnalyticsGetReport(ctx context.Context, adAccountId string) ApiAnalyticsGetReportRequest {
	return ApiAnalyticsGetReportRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return AdsAnalyticsGetAsyncResponse
func (a *AdAccountsApiService) AnalyticsGetReportExecute(r ApiAnalyticsGetReportRequest) (*AdsAnalyticsGetAsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdsAnalyticsGetAsyncResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.AnalyticsGetReport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/reports"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCampaignsAnalyticsRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	startDate *string
	endDate *string
	campaignIds *[]string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD
func (r ApiCampaignsAnalyticsRequest) StartDate(startDate string) ApiCampaignsAnalyticsRequest {
	r.startDate = &startDate
	return r
}
// Metric report end date (UTC). Format: YYYY-MM-DD
func (r ApiCampaignsAnalyticsRequest) EndDate(endDate string) ApiCampaignsAnalyticsRequest {
	r.endDate = &endDate
	return r
}
// List of Campaign Ids to use to filter the results.
func (r ApiCampaignsAnalyticsRequest) CampaignIds(campaignIds []string) ApiCampaignsAnalyticsRequest {
	r.campaignIds = &campaignIds
	return r
}
// Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiCampaignsAnalyticsRequest) Columns(columns []string) ApiCampaignsAnalyticsRequest {
	r.columns = &columns
	return r
}
// Granularity
func (r ApiCampaignsAnalyticsRequest) Granularity(granularity Granularity) ApiCampaignsAnalyticsRequest {
	r.granularity = &granularity
	return r
}
// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiCampaignsAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiCampaignsAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}
// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiCampaignsAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiCampaignsAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}
// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiCampaignsAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiCampaignsAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}
// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiCampaignsAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiCampaignsAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiCampaignsAnalyticsRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.CampaignsAnalyticsExecute(r)
}

/*
CampaignsAnalytics Get campaign analytics

Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiCampaignsAnalyticsRequest
*/
func (a *AdAccountsApiService) CampaignsAnalytics(ctx context.Context, adAccountId string) ApiCampaignsAnalyticsRequest {
	return ApiCampaignsAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *AdAccountsApiService) CampaignsAnalyticsExecute(r ApiCampaignsAnalyticsRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.CampaignsAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/campaigns/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.campaignIds == nil {
		return localVarReturnValue, nil, reportError("campaignIds is required and must be specified")
	}
	if len(*r.campaignIds) < 1 {
		return localVarReturnValue, nil, reportError("campaignIds must have at least 1 elements")
	}
	if len(*r.campaignIds) > 100 {
		return localVarReturnValue, nil, reportError("campaignIds must have less than 100 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	{
		t := *r.campaignIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("campaign_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("campaign_ids", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("columns", parameterToString(*r.columns, "csv"))
	localVarQueryParams.Add("granularity", parameterToString(*r.granularity, ""))
	if r.clickWindowDays != nil {
		localVarQueryParams.Add("click_window_days", parameterToString(*r.clickWindowDays, ""))
	}
	if r.engagementWindowDays != nil {
		localVarQueryParams.Add("engagement_window_days", parameterToString(*r.engagementWindowDays, ""))
	}
	if r.viewWindowDays != nil {
		localVarQueryParams.Add("view_window_days", parameterToString(*r.viewWindowDays, ""))
	}
	if r.conversionReportTime != nil {
		localVarQueryParams.Add("conversion_report_time", parameterToString(*r.conversionReportTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCampaignsListRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	campaignIds *[]string
	entityStatuses *[]string
	pageSize *int32
	order *string
	bookmark *string
}

// List of Campaign Ids to use to filter the results.
func (r ApiCampaignsListRequest) CampaignIds(campaignIds []string) ApiCampaignsListRequest {
	r.campaignIds = &campaignIds
	return r
}
// Entity status
func (r ApiCampaignsListRequest) EntityStatuses(entityStatuses []string) ApiCampaignsListRequest {
	r.entityStatuses = &entityStatuses
	return r
}
// Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.
func (r ApiCampaignsListRequest) PageSize(pageSize int32) ApiCampaignsListRequest {
	r.pageSize = &pageSize
	return r
}
// The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
func (r ApiCampaignsListRequest) Order(order string) ApiCampaignsListRequest {
	r.order = &order
	return r
}
// Cursor used to fetch the next page of items
func (r ApiCampaignsListRequest) Bookmark(bookmark string) ApiCampaignsListRequest {
	r.bookmark = &bookmark
	return r
}

func (r ApiCampaignsListRequest) Execute() (*Paginated, *http.Response, error) {
	return r.ApiService.CampaignsListExecute(r)
}

/*
CampaignsList List campaigns

Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiCampaignsListRequest
*/
func (a *AdAccountsApiService) CampaignsList(ctx context.Context, adAccountId string) ApiCampaignsListRequest {
	return ApiCampaignsListRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return Paginated
func (a *AdAccountsApiService) CampaignsListExecute(r ApiCampaignsListRequest) (*Paginated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Paginated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.CampaignsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/campaigns"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.campaignIds != nil {
		t := *r.campaignIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("campaign_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("campaign_ids", parameterToString(t, "multi"))
		}
	}
	if r.entityStatuses != nil {
		t := *r.entityStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entity_statuses", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entity_statuses", parameterToString(t, "multi"))
		}
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.order, ""))
	}
	if r.bookmark != nil {
		localVarQueryParams.Add("bookmark", parameterToString(*r.bookmark, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductGroupsAnalyticsRequest struct {
	ctx context.Context
	ApiService *AdAccountsApiService
	adAccountId string
	startDate *string
	endDate *string
	productGroupIds *[]string
	columns *[]string
	granularity *Granularity
	clickWindowDays *int32
	engagementWindowDays *int32
	viewWindowDays *int32
	conversionReportTime *string
}

// Metric report start date (UTC). Format: YYYY-MM-DD
func (r ApiProductGroupsAnalyticsRequest) StartDate(startDate string) ApiProductGroupsAnalyticsRequest {
	r.startDate = &startDate
	return r
}
// Metric report end date (UTC). Format: YYYY-MM-DD
func (r ApiProductGroupsAnalyticsRequest) EndDate(endDate string) ApiProductGroupsAnalyticsRequest {
	r.endDate = &endDate
	return r
}
// List of Product group Ids to use to filter the results.
func (r ApiProductGroupsAnalyticsRequest) ProductGroupIds(productGroupIds []string) ApiProductGroupsAnalyticsRequest {
	r.productGroupIds = &productGroupIds
	return r
}
// Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
func (r ApiProductGroupsAnalyticsRequest) Columns(columns []string) ApiProductGroupsAnalyticsRequest {
	r.columns = &columns
	return r
}
// Granularity
func (r ApiProductGroupsAnalyticsRequest) Granularity(granularity Granularity) ApiProductGroupsAnalyticsRequest {
	r.granularity = &granularity
	return r
}
// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiProductGroupsAnalyticsRequest) ClickWindowDays(clickWindowDays int32) ApiProductGroupsAnalyticsRequest {
	r.clickWindowDays = &clickWindowDays
	return r
}
// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
func (r ApiProductGroupsAnalyticsRequest) EngagementWindowDays(engagementWindowDays int32) ApiProductGroupsAnalyticsRequest {
	r.engagementWindowDays = &engagementWindowDays
	return r
}
// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
func (r ApiProductGroupsAnalyticsRequest) ViewWindowDays(viewWindowDays int32) ApiProductGroupsAnalyticsRequest {
	r.viewWindowDays = &viewWindowDays
	return r
}
// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
func (r ApiProductGroupsAnalyticsRequest) ConversionReportTime(conversionReportTime string) ApiProductGroupsAnalyticsRequest {
	r.conversionReportTime = &conversionReportTime
	return r
}

func (r ApiProductGroupsAnalyticsRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.ProductGroupsAnalyticsExecute(r)
}

/*
ProductGroupsAnalytics Get product group analytics

Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options.
- The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href="https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts">Business Access</a>: Admin, Analyst, Campaign Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adAccountId Unique identifier of an ad account.
 @return ApiProductGroupsAnalyticsRequest
*/
func (a *AdAccountsApiService) ProductGroupsAnalytics(ctx context.Context, adAccountId string) ApiProductGroupsAnalyticsRequest {
	return ApiProductGroupsAnalyticsRequest{
		ApiService: a,
		ctx: ctx,
		adAccountId: adAccountId,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *AdAccountsApiService) ProductGroupsAnalyticsExecute(r ApiProductGroupsAnalyticsRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdAccountsApiService.ProductGroupsAnalytics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ad_accounts/{ad_account_id}/product_groups/analytics"
	localVarPath = strings.Replace(localVarPath, "{"+"ad_account_id"+"}", url.PathEscape(parameterToString(r.adAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.productGroupIds == nil {
		return localVarReturnValue, nil, reportError("productGroupIds is required and must be specified")
	}
	if len(*r.productGroupIds) < 1 {
		return localVarReturnValue, nil, reportError("productGroupIds must have at least 1 elements")
	}
	if len(*r.productGroupIds) > 100 {
		return localVarReturnValue, nil, reportError("productGroupIds must have less than 100 elements")
	}
	if r.columns == nil {
		return localVarReturnValue, nil, reportError("columns is required and must be specified")
	}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	{
		t := *r.productGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("product_group_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("product_group_ids", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("columns", parameterToString(*r.columns, "csv"))
	localVarQueryParams.Add("granularity", parameterToString(*r.granularity, ""))
	if r.clickWindowDays != nil {
		localVarQueryParams.Add("click_window_days", parameterToString(*r.clickWindowDays, ""))
	}
	if r.engagementWindowDays != nil {
		localVarQueryParams.Add("engagement_window_days", parameterToString(*r.engagementWindowDays, ""))
	}
	if r.viewWindowDays != nil {
		localVarQueryParams.Add("view_window_days", parameterToString(*r.viewWindowDays, ""))
	}
	if r.conversionReportTime != nil {
		localVarQueryParams.Add("conversion_report_time", parameterToString(*r.conversionReportTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
