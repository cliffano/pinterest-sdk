/*
Pinterest REST API

Pinterest's REST API

API version: 5.3.0
Contact: pinterest-api@pinterest.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PinMediaWithImage Pin with image.
type PinMediaWithImage struct {
	PinMedia
	Images *map[string]ImageDetails `json:"images,omitempty"`
}

// NewPinMediaWithImage instantiates a new PinMediaWithImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinMediaWithImage() *PinMediaWithImage {
	this := PinMediaWithImage{}
	return &this
}

// NewPinMediaWithImageWithDefaults instantiates a new PinMediaWithImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinMediaWithImageWithDefaults() *PinMediaWithImage {
	this := PinMediaWithImage{}
	return &this
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *PinMediaWithImage) GetImages() map[string]ImageDetails {
	if o == nil || o.Images == nil {
		var ret map[string]ImageDetails
		return ret
	}
	return *o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMediaWithImage) GetImagesOk() (*map[string]ImageDetails, bool) {
	if o == nil || o.Images == nil {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *PinMediaWithImage) HasImages() bool {
	if o != nil && o.Images != nil {
		return true
	}

	return false
}

// SetImages gets a reference to the given map[string]ImageDetails and assigns it to the Images field.
func (o *PinMediaWithImage) SetImages(v map[string]ImageDetails) {
	o.Images = &v
}

func (o PinMediaWithImage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedPinMedia, errPinMedia := json.Marshal(o.PinMedia)
	if errPinMedia != nil {
		return []byte{}, errPinMedia
	}
	errPinMedia = json.Unmarshal([]byte(serializedPinMedia), &toSerialize)
	if errPinMedia != nil {
		return []byte{}, errPinMedia
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	return json.Marshal(toSerialize)
}

type NullablePinMediaWithImage struct {
	value *PinMediaWithImage
	isSet bool
}

func (v NullablePinMediaWithImage) Get() *PinMediaWithImage {
	return v.value
}

func (v *NullablePinMediaWithImage) Set(val *PinMediaWithImage) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMediaWithImage) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMediaWithImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMediaWithImage(val *PinMediaWithImage) *NullablePinMediaWithImage {
	return &NullablePinMediaWithImage{value: val, isSet: true}
}

func (v NullablePinMediaWithImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMediaWithImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


