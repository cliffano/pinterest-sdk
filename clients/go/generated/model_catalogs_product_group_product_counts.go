/*
Pinterest REST API

Pinterest's REST API

API version: 5.12.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsProductGroupProductCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsProductGroupProductCounts{}

// CatalogsProductGroupProductCounts Product counts for a CatalogsProductGroup
type CatalogsProductGroupProductCounts struct {
	InStock float32 `json:"in_stock"`
	OutOfStock float32 `json:"out_of_stock"`
	Preorder float32 `json:"preorder"`
	Total float32 `json:"total"`
}

type _CatalogsProductGroupProductCounts CatalogsProductGroupProductCounts

// NewCatalogsProductGroupProductCounts instantiates a new CatalogsProductGroupProductCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsProductGroupProductCounts(inStock float32, outOfStock float32, preorder float32, total float32) *CatalogsProductGroupProductCounts {
	this := CatalogsProductGroupProductCounts{}
	this.InStock = inStock
	this.OutOfStock = outOfStock
	this.Preorder = preorder
	this.Total = total
	return &this
}

// NewCatalogsProductGroupProductCountsWithDefaults instantiates a new CatalogsProductGroupProductCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsProductGroupProductCountsWithDefaults() *CatalogsProductGroupProductCounts {
	this := CatalogsProductGroupProductCounts{}
	return &this
}

// GetInStock returns the InStock field value
func (o *CatalogsProductGroupProductCounts) GetInStock() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InStock
}

// GetInStockOk returns a tuple with the InStock field value
// and a boolean to check if the value has been set.
func (o *CatalogsProductGroupProductCounts) GetInStockOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InStock, true
}

// SetInStock sets field value
func (o *CatalogsProductGroupProductCounts) SetInStock(v float32) {
	o.InStock = v
}

// GetOutOfStock returns the OutOfStock field value
func (o *CatalogsProductGroupProductCounts) GetOutOfStock() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OutOfStock
}

// GetOutOfStockOk returns a tuple with the OutOfStock field value
// and a boolean to check if the value has been set.
func (o *CatalogsProductGroupProductCounts) GetOutOfStockOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutOfStock, true
}

// SetOutOfStock sets field value
func (o *CatalogsProductGroupProductCounts) SetOutOfStock(v float32) {
	o.OutOfStock = v
}

// GetPreorder returns the Preorder field value
func (o *CatalogsProductGroupProductCounts) GetPreorder() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Preorder
}

// GetPreorderOk returns a tuple with the Preorder field value
// and a boolean to check if the value has been set.
func (o *CatalogsProductGroupProductCounts) GetPreorderOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preorder, true
}

// SetPreorder sets field value
func (o *CatalogsProductGroupProductCounts) SetPreorder(v float32) {
	o.Preorder = v
}

// GetTotal returns the Total field value
func (o *CatalogsProductGroupProductCounts) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CatalogsProductGroupProductCounts) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CatalogsProductGroupProductCounts) SetTotal(v float32) {
	o.Total = v
}

func (o CatalogsProductGroupProductCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsProductGroupProductCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["in_stock"] = o.InStock
	toSerialize["out_of_stock"] = o.OutOfStock
	toSerialize["preorder"] = o.Preorder
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *CatalogsProductGroupProductCounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"in_stock",
		"out_of_stock",
		"preorder",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsProductGroupProductCounts := _CatalogsProductGroupProductCounts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsProductGroupProductCounts)

	if err != nil {
		return err
	}

	*o = CatalogsProductGroupProductCounts(varCatalogsProductGroupProductCounts)

	return err
}

type NullableCatalogsProductGroupProductCounts struct {
	value *CatalogsProductGroupProductCounts
	isSet bool
}

func (v NullableCatalogsProductGroupProductCounts) Get() *CatalogsProductGroupProductCounts {
	return v.value
}

func (v *NullableCatalogsProductGroupProductCounts) Set(val *CatalogsProductGroupProductCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsProductGroupProductCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsProductGroupProductCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsProductGroupProductCounts(val *CatalogsProductGroupProductCounts) *NullableCatalogsProductGroupProductCounts {
	return &NullableCatalogsProductGroupProductCounts{value: val, isSet: true}
}

func (v NullableCatalogsProductGroupProductCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsProductGroupProductCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


