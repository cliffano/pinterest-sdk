/*
Pinterest REST API

Pinterest's REST API

API version: 5.3.0
Contact: pinterest-api@pinterest.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OauthAccessTokenRequestRefresh A request to exchange a refresh token for a new access token.
type OauthAccessTokenRequestRefresh struct {
	RefreshToken string `json:"refresh_token"`
	Scope *string `json:"scope,omitempty"`
}

// NewOauthAccessTokenRequestRefresh instantiates a new OauthAccessTokenRequestRefresh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauthAccessTokenRequestRefresh(refreshToken string, grantType string) *OauthAccessTokenRequestRefresh {
	this := OauthAccessTokenRequestRefresh{}
	this.GrantType = grantType
	this.RefreshToken = refreshToken
	return &this
}

// NewOauthAccessTokenRequestRefreshWithDefaults instantiates a new OauthAccessTokenRequestRefresh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauthAccessTokenRequestRefreshWithDefaults() *OauthAccessTokenRequestRefresh {
	this := OauthAccessTokenRequestRefresh{}
	return &this
}

// GetRefreshToken returns the RefreshToken field value
func (o *OauthAccessTokenRequestRefresh) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *OauthAccessTokenRequestRefresh) GetRefreshTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *OauthAccessTokenRequestRefresh) SetRefreshToken(v string) {
	o.RefreshToken = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *OauthAccessTokenRequestRefresh) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthAccessTokenRequestRefresh) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *OauthAccessTokenRequestRefresh) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *OauthAccessTokenRequestRefresh) SetScope(v string) {
	o.Scope = &v
}

func (o OauthAccessTokenRequestRefresh) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableOauthAccessTokenRequestRefresh struct {
	value *OauthAccessTokenRequestRefresh
	isSet bool
}

func (v NullableOauthAccessTokenRequestRefresh) Get() *OauthAccessTokenRequestRefresh {
	return v.value
}

func (v *NullableOauthAccessTokenRequestRefresh) Set(val *OauthAccessTokenRequestRefresh) {
	v.value = val
	v.isSet = true
}

func (v NullableOauthAccessTokenRequestRefresh) IsSet() bool {
	return v.isSet
}

func (v *NullableOauthAccessTokenRequestRefresh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauthAccessTokenRequestRefresh(val *OauthAccessTokenRequestRefresh) *NullableOauthAccessTokenRequestRefresh {
	return &NullableOauthAccessTokenRequestRefresh{value: val, isSet: true}
}

func (v NullableOauthAccessTokenRequestRefresh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauthAccessTokenRequestRefresh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


