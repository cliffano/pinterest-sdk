/*
Pinterest REST API

Pinterest's REST API

API version: 5.3.0
Contact: pinterest-api@pinterest.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CatalogsFeedIngestionInfo struct for CatalogsFeedIngestionInfo
type CatalogsFeedIngestionInfo struct {
	InStock *int32 `json:"in_stock,omitempty"`
	OutOfStock *int32 `json:"out_of_stock,omitempty"`
	Preorder *int32 `json:"preorder,omitempty"`
}

// NewCatalogsFeedIngestionInfo instantiates a new CatalogsFeedIngestionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsFeedIngestionInfo() *CatalogsFeedIngestionInfo {
	this := CatalogsFeedIngestionInfo{}
	return &this
}

// NewCatalogsFeedIngestionInfoWithDefaults instantiates a new CatalogsFeedIngestionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsFeedIngestionInfoWithDefaults() *CatalogsFeedIngestionInfo {
	this := CatalogsFeedIngestionInfo{}
	return &this
}

// GetInStock returns the InStock field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionInfo) GetInStock() int32 {
	if o == nil || o.InStock == nil {
		var ret int32
		return ret
	}
	return *o.InStock
}

// GetInStockOk returns a tuple with the InStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionInfo) GetInStockOk() (*int32, bool) {
	if o == nil || o.InStock == nil {
		return nil, false
	}
	return o.InStock, true
}

// HasInStock returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionInfo) HasInStock() bool {
	if o != nil && o.InStock != nil {
		return true
	}

	return false
}

// SetInStock gets a reference to the given int32 and assigns it to the InStock field.
func (o *CatalogsFeedIngestionInfo) SetInStock(v int32) {
	o.InStock = &v
}

// GetOutOfStock returns the OutOfStock field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionInfo) GetOutOfStock() int32 {
	if o == nil || o.OutOfStock == nil {
		var ret int32
		return ret
	}
	return *o.OutOfStock
}

// GetOutOfStockOk returns a tuple with the OutOfStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionInfo) GetOutOfStockOk() (*int32, bool) {
	if o == nil || o.OutOfStock == nil {
		return nil, false
	}
	return o.OutOfStock, true
}

// HasOutOfStock returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionInfo) HasOutOfStock() bool {
	if o != nil && o.OutOfStock != nil {
		return true
	}

	return false
}

// SetOutOfStock gets a reference to the given int32 and assigns it to the OutOfStock field.
func (o *CatalogsFeedIngestionInfo) SetOutOfStock(v int32) {
	o.OutOfStock = &v
}

// GetPreorder returns the Preorder field value if set, zero value otherwise.
func (o *CatalogsFeedIngestionInfo) GetPreorder() int32 {
	if o == nil || o.Preorder == nil {
		var ret int32
		return ret
	}
	return *o.Preorder
}

// GetPreorderOk returns a tuple with the Preorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsFeedIngestionInfo) GetPreorderOk() (*int32, bool) {
	if o == nil || o.Preorder == nil {
		return nil, false
	}
	return o.Preorder, true
}

// HasPreorder returns a boolean if a field has been set.
func (o *CatalogsFeedIngestionInfo) HasPreorder() bool {
	if o != nil && o.Preorder != nil {
		return true
	}

	return false
}

// SetPreorder gets a reference to the given int32 and assigns it to the Preorder field.
func (o *CatalogsFeedIngestionInfo) SetPreorder(v int32) {
	o.Preorder = &v
}

func (o CatalogsFeedIngestionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InStock != nil {
		toSerialize["in_stock"] = o.InStock
	}
	if o.OutOfStock != nil {
		toSerialize["out_of_stock"] = o.OutOfStock
	}
	if o.Preorder != nil {
		toSerialize["preorder"] = o.Preorder
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogsFeedIngestionInfo struct {
	value *CatalogsFeedIngestionInfo
	isSet bool
}

func (v NullableCatalogsFeedIngestionInfo) Get() *CatalogsFeedIngestionInfo {
	return v.value
}

func (v *NullableCatalogsFeedIngestionInfo) Set(val *CatalogsFeedIngestionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsFeedIngestionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsFeedIngestionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsFeedIngestionInfo(val *CatalogsFeedIngestionInfo) *NullableCatalogsFeedIngestionInfo {
	return &NullableCatalogsFeedIngestionInfo{value: val, isSet: true}
}

func (v NullableCatalogsFeedIngestionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsFeedIngestionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


