/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class AdAccountsApi {
    protected basePath = 'https://api.pinterest.com/v5';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get ad account analytics
     * @param adAccountId Unique identifier of an ad account.
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param granularity Granularity
     * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     */
    public adAccountAnalytics(adAccountId: string, startDate: string, endDate: string, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: models.Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/analytics'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling adAccountAnalytics.');
        }

        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling adAccountAnalytics.');
        }

        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling adAccountAnalytics.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling adAccountAnalytics.');
        }

        // verify required parameter 'granularity' is not null or undefined
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling adAccountAnalytics.');
        }

        if (startDate !== null && startDate !== undefined) {
            queryParameters['start_date'] = startDate.toISOString();
        }
        if (endDate !== null && endDate !== undefined) {
            queryParameters['end_date'] = endDate.toISOString();
        }
        if (columns) {
            queryParameters['columns'] = columns.join(COLLECTION_FORMATS['csv']);
        }
        if (granularity !== null && granularity !== undefined) {
            queryParameters['granularity'] = <string><any>granularity;
        }
        if (clickWindowDays !== null && clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = <string><any>clickWindowDays;
        }
        if (engagementWindowDays !== null && engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = <string><any>engagementWindowDays;
        }
        if (viewWindowDays !== null && viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = <string><any>viewWindowDays;
        }
        if (conversionReportTime !== null && conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = <string><any>conversionReportTime;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: Array<{ [key: string]: object; }>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * @summary List ad accounts
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param includeSharedAccounts Include shared ad accounts
     */
    public adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.models.Paginated & object;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts';

        let queryParameters: any = {};
        let headerParams: any = {};
        if (bookmark !== null && bookmark !== undefined) {
            queryParameters['bookmark'] = <string><any>bookmark;
        }
        if (pageSize !== null && pageSize !== undefined) {
            queryParameters['page_size'] = <string><any>pageSize;
        }
        if (includeSharedAccounts !== null && includeSharedAccounts !== undefined) {
            queryParameters['include_shared_accounts'] = <string><any>includeSharedAccounts;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.models.Paginated & object;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.models.Paginated & object, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get ad group analytics
     * @param adAccountId Unique identifier of an ad account.
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param adGroupIds List of Ad group Ids to use to filter the results.
     * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param granularity Granularity
     * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     */
    public adGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: models.Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/ad_groups/analytics'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling adGroupsAnalytics.');
        }

        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling adGroupsAnalytics.');
        }

        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling adGroupsAnalytics.');
        }

        // verify required parameter 'adGroupIds' is not null or undefined
        if (adGroupIds === null || adGroupIds === undefined) {
            throw new Error('Required parameter adGroupIds was null or undefined when calling adGroupsAnalytics.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling adGroupsAnalytics.');
        }

        // verify required parameter 'granularity' is not null or undefined
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling adGroupsAnalytics.');
        }

        if (startDate !== null && startDate !== undefined) {
            queryParameters['start_date'] = startDate.toISOString();
        }
        if (endDate !== null && endDate !== undefined) {
            queryParameters['end_date'] = endDate.toISOString();
        }
        if (adGroupIds) {
            queryParameters['ad_group_ids'] = [];
            adGroupIds.forEach((element: any) => {
                queryParameters['ad_group_ids'].push(element);
            });
        }
        if (columns) {
            queryParameters['columns'] = columns.join(COLLECTION_FORMATS['csv']);
        }
        if (granularity !== null && granularity !== undefined) {
            queryParameters['granularity'] = <string><any>granularity;
        }
        if (clickWindowDays !== null && clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = <string><any>clickWindowDays;
        }
        if (engagementWindowDays !== null && engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = <string><any>engagementWindowDays;
        }
        if (viewWindowDays !== null && viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = <string><any>viewWindowDays;
        }
        if (conversionReportTime !== null && conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = <string><any>conversionReportTime;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: Array<{ [key: string]: object; }>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary List ad groups
     * @param adAccountId Unique identifier of an ad account.
     * @param campaignIds List of Campaign Ids to use to filter the results.
     * @param adGroupIds List of Ad group Ids to use to filter the results.
     * @param entityStatuses Entity status
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param bookmark Cursor used to fetch the next page of items
     * @param translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs.
     */
    public adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.models.Paginated & object;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/ad_groups'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling adGroupsList.');
        }

        if (campaignIds) {
            queryParameters['campaign_ids'] = [];
            campaignIds.forEach((element: any) => {
                queryParameters['campaign_ids'].push(element);
            });
        }
        if (adGroupIds) {
            queryParameters['ad_group_ids'] = [];
            adGroupIds.forEach((element: any) => {
                queryParameters['ad_group_ids'].push(element);
            });
        }
        if (entityStatuses) {
            queryParameters['entity_statuses'] = [];
            entityStatuses.forEach((element: any) => {
                queryParameters['entity_statuses'].push(element);
            });
        }
        if (pageSize !== null && pageSize !== undefined) {
            queryParameters['page_size'] = <string><any>pageSize;
        }
        if (order !== null && order !== undefined) {
            queryParameters['order'] = <string><any>order;
        }
        if (bookmark !== null && bookmark !== undefined) {
            queryParameters['bookmark'] = <string><any>bookmark;
        }
        if (translateInterestsToNames !== null && translateInterestsToNames !== undefined) {
            queryParameters['translate_interests_to_names'] = <string><any>translateInterestsToNames;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.models.Paginated & object;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.models.Paginated & object, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get ad analytics
     * @param adAccountId Unique identifier of an ad account.
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param adIds List of Ad Ids to use to filter the results.
     * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param granularity Granularity
     * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     */
    public adsAnalytics(adAccountId: string, startDate: string, endDate: string, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: models.Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/ads/analytics'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling adsAnalytics.');
        }

        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling adsAnalytics.');
        }

        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling adsAnalytics.');
        }

        // verify required parameter 'adIds' is not null or undefined
        if (adIds === null || adIds === undefined) {
            throw new Error('Required parameter adIds was null or undefined when calling adsAnalytics.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling adsAnalytics.');
        }

        // verify required parameter 'granularity' is not null or undefined
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling adsAnalytics.');
        }

        if (startDate !== null && startDate !== undefined) {
            queryParameters['start_date'] = startDate.toISOString();
        }
        if (endDate !== null && endDate !== undefined) {
            queryParameters['end_date'] = endDate.toISOString();
        }
        if (adIds) {
            queryParameters['ad_ids'] = [];
            adIds.forEach((element: any) => {
                queryParameters['ad_ids'].push(element);
            });
        }
        if (columns) {
            queryParameters['columns'] = columns.join(COLLECTION_FORMATS['csv']);
        }
        if (granularity !== null && granularity !== undefined) {
            queryParameters['granularity'] = <string><any>granularity;
        }
        if (clickWindowDays !== null && clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = <string><any>clickWindowDays;
        }
        if (engagementWindowDays !== null && engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = <string><any>engagementWindowDays;
        }
        if (viewWindowDays !== null && viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = <string><any>viewWindowDays;
        }
        if (conversionReportTime !== null && conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = <string><any>conversionReportTime;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: Array<{ [key: string]: object; }>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary List ads
     * @param adAccountId Unique identifier of an ad account.
     * @param campaignIds List of Campaign Ids to use to filter the results.
     * @param adGroupIds List of Ad group Ids to use to filter the results.
     * @param adIds List of Ad Ids to use to filter the results.
     * @param entityStatuses Entity status
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param bookmark Cursor used to fetch the next page of items
     */
    public adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.models.Paginated & object;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/ads'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling adsList.');
        }

        if (campaignIds) {
            queryParameters['campaign_ids'] = [];
            campaignIds.forEach((element: any) => {
                queryParameters['campaign_ids'].push(element);
            });
        }
        if (adGroupIds) {
            queryParameters['ad_group_ids'] = [];
            adGroupIds.forEach((element: any) => {
                queryParameters['ad_group_ids'].push(element);
            });
        }
        if (adIds) {
            queryParameters['ad_ids'] = [];
            adIds.forEach((element: any) => {
                queryParameters['ad_ids'].push(element);
            });
        }
        if (entityStatuses) {
            queryParameters['entity_statuses'] = [];
            entityStatuses.forEach((element: any) => {
                queryParameters['entity_statuses'].push(element);
            });
        }
        if (pageSize !== null && pageSize !== undefined) {
            queryParameters['page_size'] = <string><any>pageSize;
        }
        if (order !== null && order !== undefined) {
            queryParameters['order'] = <string><any>order;
        }
        if (bookmark !== null && bookmark !== undefined) {
            queryParameters['bookmark'] = <string><any>bookmark;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.models.Paginated & object;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.models.Paginated & object, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Create async request for an account analytics report
     * @param adAccountId Unique identifier of an ad account.
     * @param adsAnalyticsCreateAsyncRequest 
     */
    public analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: models.AdsAnalyticsCreateAsyncRequest, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.AdsAnalyticsCreateAsyncResponse;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/reports'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling analyticsCreateReport.');
        }

        // verify required parameter 'adsAnalyticsCreateAsyncRequest' is not null or undefined
        if (adsAnalyticsCreateAsyncRequest === null || adsAnalyticsCreateAsyncRequest === undefined) {
            throw new Error('Required parameter adsAnalyticsCreateAsyncRequest was null or undefined when calling analyticsCreateReport.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(adsAnalyticsCreateAsyncRequest);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.AdsAnalyticsCreateAsyncResponse;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.AdsAnalyticsCreateAsyncResponse, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get the account analytics report created by the async call
     * @param adAccountId Unique identifier of an ad account.
     * @param token Token returned from the post request creation call
     */
    public analyticsGetReport(adAccountId: string, token: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.AdsAnalyticsGetAsyncResponse;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/reports'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling analyticsGetReport.');
        }

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling analyticsGetReport.');
        }

        if (token !== null && token !== undefined) {
            queryParameters['token'] = <string><any>token;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.AdsAnalyticsGetAsyncResponse;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.AdsAnalyticsGetAsyncResponse, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get campaign analytics
     * @param adAccountId Unique identifier of an ad account.
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param campaignIds List of Campaign Ids to use to filter the results.
     * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param granularity Granularity
     * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     */
    public campaignsAnalytics(adAccountId: string, startDate: string, endDate: string, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: models.Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/campaigns/analytics'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling campaignsAnalytics.');
        }

        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling campaignsAnalytics.');
        }

        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling campaignsAnalytics.');
        }

        // verify required parameter 'campaignIds' is not null or undefined
        if (campaignIds === null || campaignIds === undefined) {
            throw new Error('Required parameter campaignIds was null or undefined when calling campaignsAnalytics.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling campaignsAnalytics.');
        }

        // verify required parameter 'granularity' is not null or undefined
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling campaignsAnalytics.');
        }

        if (startDate !== null && startDate !== undefined) {
            queryParameters['start_date'] = startDate.toISOString();
        }
        if (endDate !== null && endDate !== undefined) {
            queryParameters['end_date'] = endDate.toISOString();
        }
        if (campaignIds) {
            queryParameters['campaign_ids'] = [];
            campaignIds.forEach((element: any) => {
                queryParameters['campaign_ids'].push(element);
            });
        }
        if (columns) {
            queryParameters['columns'] = columns.join(COLLECTION_FORMATS['csv']);
        }
        if (granularity !== null && granularity !== undefined) {
            queryParameters['granularity'] = <string><any>granularity;
        }
        if (clickWindowDays !== null && clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = <string><any>clickWindowDays;
        }
        if (engagementWindowDays !== null && engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = <string><any>engagementWindowDays;
        }
        if (viewWindowDays !== null && viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = <string><any>viewWindowDays;
        }
        if (conversionReportTime !== null && conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = <string><any>conversionReportTime;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: Array<{ [key: string]: object; }>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary List campaigns
     * @param adAccountId Unique identifier of an ad account.
     * @param campaignIds List of Campaign Ids to use to filter the results.
     * @param entityStatuses Entity status
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param bookmark Cursor used to fetch the next page of items
     */
    public campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.models.Paginated & object;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/campaigns'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling campaignsList.');
        }

        if (campaignIds) {
            queryParameters['campaign_ids'] = [];
            campaignIds.forEach((element: any) => {
                queryParameters['campaign_ids'].push(element);
            });
        }
        if (entityStatuses) {
            queryParameters['entity_statuses'] = [];
            entityStatuses.forEach((element: any) => {
                queryParameters['entity_statuses'].push(element);
            });
        }
        if (pageSize !== null && pageSize !== undefined) {
            queryParameters['page_size'] = <string><any>pageSize;
        }
        if (order !== null && order !== undefined) {
            queryParameters['order'] = <string><any>order;
        }
        if (bookmark !== null && bookmark !== undefined) {
            queryParameters['bookmark'] = <string><any>bookmark;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.models.Paginated & object;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.models.Paginated & object, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @summary Get product group analytics
     * @param adAccountId Unique identifier of an ad account.
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param productGroupIds List of Product group Ids to use to filter the results.
     * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
     * @param granularity Granularity
     * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     */
    public productGroupsAnalytics(adAccountId: string, startDate: string, endDate: string, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: models.Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/ad_accounts/{ad_account_id}/product_groups/analytics'.replace('{' + 'ad_account_id' + '}', encodeURIComponent(String(adAccountId)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'adAccountId' is not null or undefined
        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling productGroupsAnalytics.');
        }

        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling productGroupsAnalytics.');
        }

        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling productGroupsAnalytics.');
        }

        // verify required parameter 'productGroupIds' is not null or undefined
        if (productGroupIds === null || productGroupIds === undefined) {
            throw new Error('Required parameter productGroupIds was null or undefined when calling productGroupsAnalytics.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling productGroupsAnalytics.');
        }

        // verify required parameter 'granularity' is not null or undefined
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling productGroupsAnalytics.');
        }

        if (startDate !== null && startDate !== undefined) {
            queryParameters['start_date'] = startDate.toISOString();
        }
        if (endDate !== null && endDate !== undefined) {
            queryParameters['end_date'] = endDate.toISOString();
        }
        if (productGroupIds) {
            queryParameters['product_group_ids'] = [];
            productGroupIds.forEach((element: any) => {
                queryParameters['product_group_ids'].push(element);
            });
        }
        if (columns) {
            queryParameters['columns'] = columns.join(COLLECTION_FORMATS['csv']);
        }
        if (granularity !== null && granularity !== undefined) {
            queryParameters['granularity'] = <string><any>granularity;
        }
        if (clickWindowDays !== null && clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = <string><any>clickWindowDays;
        }
        if (engagementWindowDays !== null && engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = <string><any>engagementWindowDays;
        }
        if (viewWindowDays !== null && viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = <string><any>viewWindowDays;
        }
        if (conversionReportTime !== null && conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = <string><any>conversionReportTime;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (pinterest_oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: Array<{ [key: string]: object; }>;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: Array<{ [key: string]: object; }>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

}
