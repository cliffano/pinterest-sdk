/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MediaApiController binds http requests to an api service and writes the service results to the http response
type MediaApiController struct {
	service MediaApiServicer
	errorHandler ErrorHandler
}

// MediaApiOption for how the controller is set up.
type MediaApiOption func(*MediaApiController)

// WithMediaApiErrorHandler inject ErrorHandler into controller
func WithMediaApiErrorHandler(h ErrorHandler) MediaApiOption {
	return func(c *MediaApiController) {
		c.errorHandler = h
	}
}

// NewMediaApiController creates a default api controller
func NewMediaApiController(s MediaApiServicer, opts ...MediaApiOption) Router {
	controller := &MediaApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the MediaApiController
func (c *MediaApiController) Routes() Routes {
	return Routes{ 
		{
			"MediaCreate",
			strings.ToUpper("Post"),
			"/v5/media",
			c.MediaCreate,
		},
		{
			"MediaGet",
			strings.ToUpper("Get"),
			"/v5/media/{media_id}",
			c.MediaGet,
		},
		{
			"MediaList",
			strings.ToUpper("Get"),
			"/v5/media",
			c.MediaList,
		},
	}
}

// MediaCreate - Register media upload
func (c *MediaApiController) MediaCreate(w http.ResponseWriter, r *http.Request) {
	mediaUploadRequestParam := MediaUploadRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaUploadRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaUploadRequestRequired(mediaUploadRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MediaCreate(r.Context(), mediaUploadRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MediaGet - Get media upload details
func (c *MediaApiController) MediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media_id"]
	
	result, err := c.service.MediaGet(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MediaList - List media uploads
func (c *MediaApiController) MediaList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	bookmarkParam := query.Get("bookmark")
	pageSizeParam, err := parseInt32Parameter(query.Get("page_size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.MediaList(r.Context(), bookmarkParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
