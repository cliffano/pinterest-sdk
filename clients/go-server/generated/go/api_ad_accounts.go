/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AdAccountsApiController binds http requests to an api service and writes the service results to the http response
type AdAccountsApiController struct {
	service AdAccountsApiServicer
	errorHandler ErrorHandler
}

// AdAccountsApiOption for how the controller is set up.
type AdAccountsApiOption func(*AdAccountsApiController)

// WithAdAccountsApiErrorHandler inject ErrorHandler into controller
func WithAdAccountsApiErrorHandler(h ErrorHandler) AdAccountsApiOption {
	return func(c *AdAccountsApiController) {
		c.errorHandler = h
	}
}

// NewAdAccountsApiController creates a default api controller
func NewAdAccountsApiController(s AdAccountsApiServicer, opts ...AdAccountsApiOption) Router {
	controller := &AdAccountsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the AdAccountsApiController
func (c *AdAccountsApiController) Routes() Routes {
	return Routes{ 
		{
			"AdAccountAnalytics",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/analytics",
			c.AdAccountAnalytics,
		},
		{
			"AdAccountsList",
			strings.ToUpper("Get"),
			"/v5/ad_accounts",
			c.AdAccountsList,
		},
		{
			"AdGroupsAnalytics",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups/analytics",
			c.AdGroupsAnalytics,
		},
		{
			"AdGroupsList",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ad_groups",
			c.AdGroupsList,
		},
		{
			"AdsAnalytics",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads/analytics",
			c.AdsAnalytics,
		},
		{
			"AdsList",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/ads",
			c.AdsList,
		},
		{
			"AnalyticsCreateReport",
			strings.ToUpper("Post"),
			"/v5/ad_accounts/{ad_account_id}/reports",
			c.AnalyticsCreateReport,
		},
		{
			"AnalyticsGetReport",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/reports",
			c.AnalyticsGetReport,
		},
		{
			"CampaignsAnalytics",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/campaigns/analytics",
			c.CampaignsAnalytics,
		},
		{
			"CampaignsList",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/campaigns",
			c.CampaignsList,
		},
		{
			"ProductGroupsAnalytics",
			strings.ToUpper("Get"),
			"/v5/ad_accounts/{ad_account_id}/product_groups/analytics",
			c.ProductGroupsAnalytics,
		},
	}
}

// AdAccountAnalytics - Get ad account analytics
func (c *AdAccountsApiController) AdAccountAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	startDateParam := query.Get("start_date")
	endDateParam := query.Get("end_date")
	columnsParam := strings.Split(query.Get("columns"), ",")
	granularityParam := query.Get("granularity")
	clickWindowDaysParam, err := parseInt32Parameter(query.Get("click_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	engagementWindowDaysParam, err := parseInt32Parameter(query.Get("engagement_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	viewWindowDaysParam, err := parseInt32Parameter(query.Get("view_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	conversionReportTimeParam := query.Get("conversion_report_time")
	result, err := c.service.AdAccountAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AdAccountsList - List ad accounts
func (c *AdAccountsApiController) AdAccountsList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	bookmarkParam := query.Get("bookmark")
	pageSizeParam, err := parseInt32Parameter(query.Get("page_size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	includeSharedAccountsParam, err := parseBoolParameter(query.Get("include_shared_accounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.AdAccountsList(r.Context(), bookmarkParam, pageSizeParam, includeSharedAccountsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AdGroupsAnalytics - Get ad group analytics
func (c *AdAccountsApiController) AdGroupsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	startDateParam := query.Get("start_date")
	endDateParam := query.Get("end_date")
	adGroupIdsParam := strings.Split(query.Get("ad_group_ids"), ",")
	columnsParam := strings.Split(query.Get("columns"), ",")
	granularityParam := query.Get("granularity")
	clickWindowDaysParam, err := parseInt32Parameter(query.Get("click_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	engagementWindowDaysParam, err := parseInt32Parameter(query.Get("engagement_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	viewWindowDaysParam, err := parseInt32Parameter(query.Get("view_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	conversionReportTimeParam := query.Get("conversion_report_time")
	result, err := c.service.AdGroupsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, adGroupIdsParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AdGroupsList - List ad groups
func (c *AdAccountsApiController) AdGroupsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	campaignIdsParam := strings.Split(query.Get("campaign_ids"), ",")
	adGroupIdsParam := strings.Split(query.Get("ad_group_ids"), ",")
	entityStatusesParam := strings.Split(query.Get("entity_statuses"), ",")
	pageSizeParam, err := parseInt32Parameter(query.Get("page_size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	orderParam := query.Get("order")
	bookmarkParam := query.Get("bookmark")
	translateInterestsToNamesParam, err := parseBoolParameter(query.Get("translate_interests_to_names"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.AdGroupsList(r.Context(), adAccountIdParam, campaignIdsParam, adGroupIdsParam, entityStatusesParam, pageSizeParam, orderParam, bookmarkParam, translateInterestsToNamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AdsAnalytics - Get ad analytics
func (c *AdAccountsApiController) AdsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	startDateParam := query.Get("start_date")
	endDateParam := query.Get("end_date")
	adIdsParam := strings.Split(query.Get("ad_ids"), ",")
	columnsParam := strings.Split(query.Get("columns"), ",")
	granularityParam := query.Get("granularity")
	clickWindowDaysParam, err := parseInt32Parameter(query.Get("click_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	engagementWindowDaysParam, err := parseInt32Parameter(query.Get("engagement_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	viewWindowDaysParam, err := parseInt32Parameter(query.Get("view_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	conversionReportTimeParam := query.Get("conversion_report_time")
	result, err := c.service.AdsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, adIdsParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AdsList - List ads
func (c *AdAccountsApiController) AdsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	campaignIdsParam := strings.Split(query.Get("campaign_ids"), ",")
	adGroupIdsParam := strings.Split(query.Get("ad_group_ids"), ",")
	adIdsParam := strings.Split(query.Get("ad_ids"), ",")
	entityStatusesParam := strings.Split(query.Get("entity_statuses"), ",")
	pageSizeParam, err := parseInt32Parameter(query.Get("page_size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	orderParam := query.Get("order")
	bookmarkParam := query.Get("bookmark")
	result, err := c.service.AdsList(r.Context(), adAccountIdParam, campaignIdsParam, adGroupIdsParam, adIdsParam, entityStatusesParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AnalyticsCreateReport - Create async request for an account analytics report
func (c *AdAccountsApiController) AnalyticsCreateReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adAccountIdParam := params["ad_account_id"]
	
	adsAnalyticsCreateAsyncRequestParam := AdsAnalyticsCreateAsyncRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adsAnalyticsCreateAsyncRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdsAnalyticsCreateAsyncRequestRequired(adsAnalyticsCreateAsyncRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AnalyticsCreateReport(r.Context(), adAccountIdParam, adsAnalyticsCreateAsyncRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AnalyticsGetReport - Get the account analytics report created by the async call
func (c *AdAccountsApiController) AnalyticsGetReport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	tokenParam := query.Get("token")
	result, err := c.service.AnalyticsGetReport(r.Context(), adAccountIdParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CampaignsAnalytics - Get campaign analytics
func (c *AdAccountsApiController) CampaignsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	startDateParam := query.Get("start_date")
	endDateParam := query.Get("end_date")
	campaignIdsParam := strings.Split(query.Get("campaign_ids"), ",")
	columnsParam := strings.Split(query.Get("columns"), ",")
	granularityParam := query.Get("granularity")
	clickWindowDaysParam, err := parseInt32Parameter(query.Get("click_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	engagementWindowDaysParam, err := parseInt32Parameter(query.Get("engagement_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	viewWindowDaysParam, err := parseInt32Parameter(query.Get("view_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	conversionReportTimeParam := query.Get("conversion_report_time")
	result, err := c.service.CampaignsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, campaignIdsParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CampaignsList - List campaigns
func (c *AdAccountsApiController) CampaignsList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	campaignIdsParam := strings.Split(query.Get("campaign_ids"), ",")
	entityStatusesParam := strings.Split(query.Get("entity_statuses"), ",")
	pageSizeParam, err := parseInt32Parameter(query.Get("page_size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	orderParam := query.Get("order")
	bookmarkParam := query.Get("bookmark")
	result, err := c.service.CampaignsList(r.Context(), adAccountIdParam, campaignIdsParam, entityStatusesParam, pageSizeParam, orderParam, bookmarkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ProductGroupsAnalytics - Get product group analytics
func (c *AdAccountsApiController) ProductGroupsAnalytics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	adAccountIdParam := params["ad_account_id"]
	
	startDateParam := query.Get("start_date")
	endDateParam := query.Get("end_date")
	productGroupIdsParam := strings.Split(query.Get("product_group_ids"), ",")
	columnsParam := strings.Split(query.Get("columns"), ",")
	granularityParam := query.Get("granularity")
	clickWindowDaysParam, err := parseInt32Parameter(query.Get("click_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	engagementWindowDaysParam, err := parseInt32Parameter(query.Get("engagement_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	viewWindowDaysParam, err := parseInt32Parameter(query.Get("view_window_days"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	conversionReportTimeParam := query.Get("conversion_report_time")
	result, err := c.service.ProductGroupsAnalytics(r.Context(), adAccountIdParam, startDateParam, endDateParam, productGroupIdsParam, columnsParam, granularityParam, clickWindowDaysParam, engagementWindowDaysParam, viewWindowDaysParam, conversionReportTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
