/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// CatalogsFeed - Catalogs Catalogs Feed object
type CatalogsFeed struct {

	CreatedAt time.Time `json:"created_at,omitempty"`

	Id string `json:"id,omitempty"`

	UpdatedAt time.Time `json:"updated_at,omitempty"`

	DefaultCountry Country `json:"default_country"`

	DefaultAvailability *ProductAvailabilityType `json:"default_availability"`

	DefaultCurrency *NullableCurrency `json:"default_currency"`

	// A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
	Name *string `json:"name"`

	Format CatalogsFormat `json:"format"`

	// The locale used within a feed for product descriptions.
	DefaultLocale string `json:"default_locale"`

	Credentials *CatalogsFeedCredentials `json:"credentials"`

	// The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
	Location string `json:"location"`

	PreferredProcessingSchedule *CatalogsFeedProcessingSchedule `json:"preferred_processing_schedule"`

	Status CatalogsStatus `json:"status"`
}

// AssertCatalogsFeedRequired checks if the required fields are not zero-ed
func AssertCatalogsFeedRequired(obj CatalogsFeed) error {
	elements := map[string]interface{}{
		"default_country": obj.DefaultCountry,
		"default_availability": obj.DefaultAvailability,
		"default_currency": obj.DefaultCurrency,
		"name": obj.Name,
		"format": obj.Format,
		"default_locale": obj.DefaultLocale,
		"credentials": obj.Credentials,
		"location": obj.Location,
		"preferred_processing_schedule": obj.PreferredProcessingSchedule,
		"status": obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.Credentials != nil {
		if err := AssertCatalogsFeedCredentialsRequired(*obj.Credentials); err != nil {
			return err
		}
	}
	if obj.PreferredProcessingSchedule != nil {
		if err := AssertCatalogsFeedProcessingScheduleRequired(*obj.PreferredProcessingSchedule); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseCatalogsFeedRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CatalogsFeed (e.g. [][]CatalogsFeed), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCatalogsFeedRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCatalogsFeed, ok := obj.(CatalogsFeed)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCatalogsFeedRequired(aCatalogsFeed)
	})
}
