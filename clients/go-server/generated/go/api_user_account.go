/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserAccountApiController binds http requests to an api service and writes the service results to the http response
type UserAccountApiController struct {
	service UserAccountApiServicer
	errorHandler ErrorHandler
}

// UserAccountApiOption for how the controller is set up.
type UserAccountApiOption func(*UserAccountApiController)

// WithUserAccountApiErrorHandler inject ErrorHandler into controller
func WithUserAccountApiErrorHandler(h ErrorHandler) UserAccountApiOption {
	return func(c *UserAccountApiController) {
		c.errorHandler = h
	}
}

// NewUserAccountApiController creates a default api controller
func NewUserAccountApiController(s UserAccountApiServicer, opts ...UserAccountApiOption) Router {
	controller := &UserAccountApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the UserAccountApiController
func (c *UserAccountApiController) Routes() Routes {
	return Routes{ 
		{
			"UserAccountAnalytics",
			strings.ToUpper("Get"),
			"/v5/user_account/analytics",
			c.UserAccountAnalytics,
		},
		{
			"UserAccountGet",
			strings.ToUpper("Get"),
			"/v5/user_account",
			c.UserAccountGet,
		},
	}
}

// UserAccountAnalytics - Get user account analytics
func (c *UserAccountApiController) UserAccountAnalytics(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	startDateParam := query.Get("start_date")
	endDateParam := query.Get("end_date")
	fromClaimedContentParam := query.Get("from_claimed_content")
	pinFormatParam := query.Get("pin_format")
	appTypesParam := query.Get("app_types")
	metricTypesParam := strings.Split(query.Get("metric_types"), ",")
	splitFieldParam := query.Get("split_field")
	adAccountIdParam := query.Get("ad_account_id")
	result, err := c.service.UserAccountAnalytics(r.Context(), startDateParam, endDateParam, fromClaimedContentParam, pinFormatParam, appTypesParam, metricTypesParam, splitFieldParam, adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UserAccountGet - Get user account
func (c *UserAccountApiController) UserAccountGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	adAccountIdParam := query.Get("ad_account_id")
	result, err := c.service.UserAccountGet(r.Context(), adAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
