/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * API version: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// CatalogsProductGroup - catalog product group entity
type CatalogsProductGroup struct {

	// ID of the catalog product group.
	Id string `json:"id"`

	// Name of catalog product group
	Name string `json:"name,omitempty"`

	Description *string `json:"description,omitempty"`

	Filters CatalogsProductGroupFilters `json:"filters"`

	Type CatalogsProductGroupType `json:"type,omitempty"`

	Status CatalogsProductGroupStatus `json:"status,omitempty"`

	// id of the catalogs feed belonging to this catalog product group
	FeedId string `json:"feed_id,omitempty"`

	// Unix timestamp in seconds of when catalog product group was created.
	CreatedAt int32 `json:"created_at,omitempty"`

	// Unix timestamp in seconds of last time catalog product group was updated.
	UpdatedAt int32 `json:"updated_at,omitempty"`
}

// AssertCatalogsProductGroupRequired checks if the required fields are not zero-ed
func AssertCatalogsProductGroupRequired(obj CatalogsProductGroup) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"filters": obj.Filters,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCatalogsProductGroupFiltersRequired(obj.Filters); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCatalogsProductGroupRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CatalogsProductGroup (e.g. [][]CatalogsProductGroup), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCatalogsProductGroupRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCatalogsProductGroup, ok := obj.(CatalogsProductGroup)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCatalogsProductGroupRequired(aCatalogsProductGroup)
	})
}
