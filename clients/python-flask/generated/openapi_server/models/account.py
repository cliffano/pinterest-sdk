# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type=None, profile_image=None, website_url=None, username=None):  # noqa: E501
        """Account - a model defined in OpenAPI

        :param account_type: The account_type of this Account.  # noqa: E501
        :type account_type: str
        :param profile_image: The profile_image of this Account.  # noqa: E501
        :type profile_image: str
        :param website_url: The website_url of this Account.  # noqa: E501
        :type website_url: str
        :param username: The username of this Account.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'account_type': str,
            'profile_image': str,
            'website_url': str,
            'username': str
        }

        self.attribute_map = {
            'account_type': 'account_type',
            'profile_image': 'profile_image',
            'website_url': 'website_url',
            'username': 'username'
        }

        self._account_type = account_type
        self._profile_image = profile_image
        self._website_url = website_url
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this Account.

        Type of account  # noqa: E501

        :return: The account_type of this Account.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Account.

        Type of account  # noqa: E501

        :param account_type: The account_type of this Account.
        :type account_type: str
        """
        allowed_values = ["PINNER", "BUSINESS"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def profile_image(self):
        """Gets the profile_image of this Account.


        :return: The profile_image of this Account.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this Account.


        :param profile_image: The profile_image of this Account.
        :type profile_image: str
        """

        self._profile_image = profile_image

    @property
    def website_url(self):
        """Gets the website_url of this Account.


        :return: The website_url of this Account.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Account.


        :param website_url: The website_url of this Account.
        :type website_url: str
        """

        self._website_url = website_url

    @property
    def username(self):
        """Gets the username of this Account.


        :return: The username of this Account.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Account.


        :param username: The username of this Account.
        :type username: str
        """

        self._username = username
