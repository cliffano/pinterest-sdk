/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASAdGroupCommon
 */
public class OASAdGroupCommon implements OAS.MappedProperties {
    /**
     * Ad group name.
     * @return name
     */
    public String name { get; set; }

    /**
     * Ad group/entity status.
     * @return status
     */
    public OASEntityStatus status { get; set; }

    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @return budgetInMicroCurrency
     */
    public Integer budgetInMicroCurrency { get; set; }

    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @return bidInMicroCurrency
     */
    public Integer bidInMicroCurrency { get; set; }

    /**
     * Get optimizationGoalMetadata
     * @return optimizationGoalMetadata
     */
    public OASAdGroupCommonOptimizationGoalMeta optimizationGoalMetadata { get; set; }

    /**
     * Get budgetType
     * @return budgetType
     */
    public OASBudgetType budgetType { get; set; }

    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @return startTime
     */
    public Integer startTime { get; set; }

    /**
     * Ad group end time. Unix timestamp in seconds.
     * @return endTime
     */
    public Integer endTime { get; set; }

    /**
     * Get targetingSpec
     * @return targetingSpec
     */
    public OASTargetingSpec targetingSpec { get; set; }

    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href="https://developers.pinterest.com/docs/redoc/#section/Billable-event">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @return lifetimeFrequencyCap
     */
    public Integer lifetimeFrequencyCap { get; set; }

    /**
     * Get trackingUrls
     * @return trackingUrls
     */
    public OASAdGroupCommonTrackingUrls trackingUrls { get; set; }

    /**
     * Enable auto-targeting for ad group. Also known as <a href="https://help.pinterest.com/en/business/article/expanded-targeting" target="_blank">"expanded targeting"</a>.
     * @return autoTargetingEnabled
     */
    public Boolean autoTargetingEnabled { get; set; }

    /**
     * <a href="https://developers.pinterest.com/docs/redoc/#section/Placement-group">Placement group</a>.
     * @return placementGroup
     */
    public OASPlacementGroupType placementGroup { get; set; }

    /**
     * Get pacingDeliveryType
     * @return pacingDeliveryType
     */
    public OASPacingDeliveryType pacingDeliveryType { get; set; }

    /**
     * Campaign ID of the ad group.
     * @return campaignId
     */
    public String campaignId { get; set; }

    /**
     * Get billableEvent
     * @return billableEvent
     */
    public OASActionType billableEvent { get; set; }

    /**
     * Bid strategy type
     */
    public enum BidStrategyTypeEnum {
        AUTOMATIC_BID,
        MAX_BID,
        TARGET_AVG,
        NULL
    }

    /**
     * Bid strategy type
     * @return bidStrategyType
     */
    public BidStrategyTypeEnum bidStrategyType { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'optimization_goal_metadata' => 'optimizationGoalMetadata',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'bid_strategy_type' => 'bidStrategyType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASAdGroupCommon getExample() {
        OASAdGroupCommon adGroupCommon = new OASAdGroupCommon();
          adGroupCommon.name = 'Ad Group For Pin: 687195905986';
          adGroupCommon.status = OASEntityStatus.getExample();
          adGroupCommon.budgetInMicroCurrency = 5000000;
          adGroupCommon.bidInMicroCurrency = 5000000;
          adGroupCommon.optimizationGoalMetadata = OASAdGroupCommonOptimizationGoalMeta.getExample();
          adGroupCommon.budgetType = OASBudgetType.getExample();
          adGroupCommon.startTime = 5686848000;
          adGroupCommon.endTime = 5705424000;
          adGroupCommon.targetingSpec = OASTargetingSpec.getExample();
          adGroupCommon.lifetimeFrequencyCap = 100;
          adGroupCommon.trackingUrls = OASAdGroupCommonTrackingUrls.getExample();
          adGroupCommon.autoTargetingEnabled = true;
          adGroupCommon.placementGroup = OASPlacementGroupType.getExample();
          adGroupCommon.pacingDeliveryType = OASPacingDeliveryType.getExample();
          adGroupCommon.campaignId = '626736533506';
          adGroupCommon.billableEvent = OASActionType.getExample();
          adGroupCommon.bidStrategyType = BidStrategyTypeEnum.MAX_BID;
        return adGroupCommon;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAdGroupCommon) {           
            OASAdGroupCommon adGroupCommon = (OASAdGroupCommon) obj;
            return this.name == adGroupCommon.name
                && this.status == adGroupCommon.status
                && this.budgetInMicroCurrency == adGroupCommon.budgetInMicroCurrency
                && this.bidInMicroCurrency == adGroupCommon.bidInMicroCurrency
                && this.optimizationGoalMetadata == adGroupCommon.optimizationGoalMetadata
                && this.budgetType == adGroupCommon.budgetType
                && this.startTime == adGroupCommon.startTime
                && this.endTime == adGroupCommon.endTime
                && this.targetingSpec == adGroupCommon.targetingSpec
                && this.lifetimeFrequencyCap == adGroupCommon.lifetimeFrequencyCap
                && this.trackingUrls == adGroupCommon.trackingUrls
                && this.autoTargetingEnabled == adGroupCommon.autoTargetingEnabled
                && this.placementGroup == adGroupCommon.placementGroup
                && this.pacingDeliveryType == adGroupCommon.pacingDeliveryType
                && this.campaignId == adGroupCommon.campaignId
                && this.billableEvent == adGroupCommon.billableEvent
                && this.bidStrategyType == adGroupCommon.bidStrategyType;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (budgetInMicroCurrency == null ? 0 : System.hashCode(budgetInMicroCurrency));
        hashCode = (17 * hashCode) + (bidInMicroCurrency == null ? 0 : System.hashCode(bidInMicroCurrency));
        hashCode = (17 * hashCode) + (optimizationGoalMetadata == null ? 0 : System.hashCode(optimizationGoalMetadata));
        hashCode = (17 * hashCode) + (budgetType == null ? 0 : System.hashCode(budgetType));
        hashCode = (17 * hashCode) + (startTime == null ? 0 : System.hashCode(startTime));
        hashCode = (17 * hashCode) + (endTime == null ? 0 : System.hashCode(endTime));
        hashCode = (17 * hashCode) + (targetingSpec == null ? 0 : System.hashCode(targetingSpec));
        hashCode = (17 * hashCode) + (lifetimeFrequencyCap == null ? 0 : System.hashCode(lifetimeFrequencyCap));
        hashCode = (17 * hashCode) + (trackingUrls == null ? 0 : System.hashCode(trackingUrls));
        hashCode = (17 * hashCode) + (autoTargetingEnabled == null ? 0 : System.hashCode(autoTargetingEnabled));
        hashCode = (17 * hashCode) + (placementGroup == null ? 0 : System.hashCode(placementGroup));
        hashCode = (17 * hashCode) + (pacingDeliveryType == null ? 0 : System.hashCode(pacingDeliveryType));
        hashCode = (17 * hashCode) + (campaignId == null ? 0 : System.hashCode(campaignId));
        hashCode = (17 * hashCode) + (billableEvent == null ? 0 : System.hashCode(billableEvent));
        hashCode = (17 * hashCode) + (bidStrategyType == null ? 0 : System.hashCode(bidStrategyType));
        return hashCode;
    }
}

