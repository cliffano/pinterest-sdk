/*
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASAdGroupResponse
 */
public class OASAdGroupResponse implements OASAdGroupResponseAllOf, OASAdGroupResponseAllOf1, OAS.MappedProperties {
    /**
     * Ad group name.
     * @return name
     */
    public String name { get; set; }

    /**
     * Ad group/entity status.
     * @return status
     */
    public OASEntityStatus status { get; set; }

    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @return budgetInMicroCurrency
     */
    public Integer budgetInMicroCurrency { get; set; }

    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @return bidInMicroCurrency
     */
    public Integer bidInMicroCurrency { get; set; }

    /**
     * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     */
    public enum BudgetTypeEnum {
        DAILY,
        LIFETIME,
        CBO_ADGROUP
    }

    /**
     * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     * @return budgetType
     */
    public BudgetTypeEnum budgetType { get; set; }

    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @return startTime
     */
    public Integer startTime { get; set; }

    /**
     * Ad group end time. Unix timestamp in seconds.
     * @return endTime
     */
    public Integer endTime { get; set; }

    /**
     * Ad group targeting specification defining the ad group target audience. For example, \'{"APPTYPE":["iphone"], "GENDER":["male"], "LOCALE":["en-US"], "LOCATION":["501"], "AGE_BUCKET":["25-34"]}\'
     * @return targetingSpec
     */
    public Map<String, List<String>> targetingSpec { get; set; }

    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @return lifetimeFrequencyCap
     */
    public Integer lifetimeFrequencyCap { get; set; }

    /**
     * Third-party tracking URLs.<br> JSON object with the format: {"<a href="https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event">Tracking event enum</a>":[URL string array],...}<br> For example: {"impression": ["URL1", "URL2"], "click": ["URL1", "URL2", "URL3"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href="https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking" target="_blank">Third-party and dynamic tracking</a>.
     * @return trackingUrls
     */
    public OASTrackingUrls trackingUrls { get; set; }

    /**
     * Enable auto-targeting for ad group. Also known as <a href="https://help.pinterest.com/en/business/article/expanded-targeting" target="_blank">"expanded targeting"</a>.
     * @return autoTargetingEnabled
     */
    public Boolean autoTargetingEnabled { get; set; }

    /**
     * <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @return placementGroup
     */
    public OASPlacementGroupType placementGroup { get; set; }

    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     * @return pacingDeliveryType
     */
    public OASPacingDeliveryType pacingDeliveryType { get; set; }

    /**
     * oCPM learn mode
     */
    public enum ConversionLearningModeTypeEnum {
        NOT_ACTIVE,
        ACTIVE,
        NULL
    }

    /**
     * oCPM learn mode
     * @return conversionLearningModeType
     */
    public ConversionLearningModeTypeEnum conversionLearningModeType { get; set; }

    /**
     * Ad group summary status.
     * @return summaryStatus
     */
    public OASAdGroupSummaryStatus summaryStatus { get; set; }

    /**
     * Feed Profile ID associated to the adgroup.
     * @return feedProfileId
     */
    public String feedProfileId { get; set; }

    /**
     * Campaign ID of the ad group.
     * @return campaignId
     */
    public String campaignId { get; set; }

    /**
     * Get billableEvent
     * @return billableEvent
     */
    public OASActionType billableEvent { get; set; }

    /**
     * Ad group ID.
     * @return id
     */
    public String id { get; set; }

    /**
     * Always "adgroup".
     * @return type
     */
    public String type { get; set; }

    /**
     * Advertiser ID.
     * @return adAccountId
     */
    public String adAccountId { get; set; }

    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @return createdTime
     */
    public Integer createdTime { get; set; }

    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @return updatedTime
     */
    public Integer updatedTime { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'budget_in_micro_currency' => 'budgetInMicroCurrency',
        'bid_in_micro_currency' => 'bidInMicroCurrency',
        'budget_type' => 'budgetType',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'targeting_spec' => 'targetingSpec',
        'lifetime_frequency_cap' => 'lifetimeFrequencyCap',
        'tracking_urls' => 'trackingUrls',
        'auto_targeting_enabled' => 'autoTargetingEnabled',
        'placement_group' => 'placementGroup',
        'pacing_delivery_type' => 'pacingDeliveryType',
        'conversion_learning_mode_type' => 'conversionLearningModeType',
        'summary_status' => 'summaryStatus',
        'feed_profile_id' => 'feedProfileId',
        'campaign_id' => 'campaignId',
        'billable_event' => 'billableEvent',
        'ad_account_id' => 'adAccountId',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASAdGroupResponse() {
        targetingSpec = new Map<String, List<String>>();
    }

    public static OASAdGroupResponse getExample() {
        OASAdGroupResponse adGroupResponse = new OASAdGroupResponse();
          adGroupResponse.name = 'Ad Group For Pin: 687195905986';
          adGroupResponse.status = '';
          adGroupResponse.budgetInMicroCurrency = 5000000;
          adGroupResponse.bidInMicroCurrency = 5000000;
          adGroupResponse.budgetType = BudgetTypeEnum.DAILY;
          adGroupResponse.startTime = 5686848000;
          adGroupResponse.endTime = 5705424000;
          adGroupResponse.targetingSpec = new Map<String, List<String>>{'key'=>new List<String>{''}};
          adGroupResponse.lifetimeFrequencyCap = 100;
          adGroupResponse.trackingUrls = null;
          adGroupResponse.autoTargetingEnabled = true;
          adGroupResponse.placementGroup = '';
          adGroupResponse.pacingDeliveryType = '';
          adGroupResponse.conversionLearningModeType = ConversionLearningModeTypeEnum.ACTIVE;
          adGroupResponse.summaryStatus = '';
          adGroupResponse.feedProfileId = '626736533506';
          adGroupResponse.campaignId = '626736533506';
          adGroupResponse.billableEvent = OASActionType.getExample();
          adGroupResponse.id = '2680060704746';
          adGroupResponse.type = '';
          adGroupResponse.adAccountId = '549755885175';
          adGroupResponse.createdTime = 1476477189;
          adGroupResponse.updatedTime = 1476477189;
        return adGroupResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAdGroupResponse) {           
            OASAdGroupResponse adGroupResponse = (OASAdGroupResponse) obj;
            return this.name == adGroupResponse.name
                && this.status == adGroupResponse.status
                && this.budgetInMicroCurrency == adGroupResponse.budgetInMicroCurrency
                && this.bidInMicroCurrency == adGroupResponse.bidInMicroCurrency
                && this.budgetType == adGroupResponse.budgetType
                && this.startTime == adGroupResponse.startTime
                && this.endTime == adGroupResponse.endTime
                && this.targetingSpec == adGroupResponse.targetingSpec
                && this.lifetimeFrequencyCap == adGroupResponse.lifetimeFrequencyCap
                && this.trackingUrls == adGroupResponse.trackingUrls
                && this.autoTargetingEnabled == adGroupResponse.autoTargetingEnabled
                && this.placementGroup == adGroupResponse.placementGroup
                && this.pacingDeliveryType == adGroupResponse.pacingDeliveryType
                && this.conversionLearningModeType == adGroupResponse.conversionLearningModeType
                && this.summaryStatus == adGroupResponse.summaryStatus
                && this.feedProfileId == adGroupResponse.feedProfileId
                && this.campaignId == adGroupResponse.campaignId
                && this.billableEvent == adGroupResponse.billableEvent
                && this.id == adGroupResponse.id
                && this.type == adGroupResponse.type
                && this.adAccountId == adGroupResponse.adAccountId
                && this.createdTime == adGroupResponse.createdTime
                && this.updatedTime == adGroupResponse.updatedTime;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (budgetInMicroCurrency == null ? 0 : System.hashCode(budgetInMicroCurrency));
        hashCode = (17 * hashCode) + (bidInMicroCurrency == null ? 0 : System.hashCode(bidInMicroCurrency));
        hashCode = (17 * hashCode) + (budgetType == null ? 0 : System.hashCode(budgetType));
        hashCode = (17 * hashCode) + (startTime == null ? 0 : System.hashCode(startTime));
        hashCode = (17 * hashCode) + (endTime == null ? 0 : System.hashCode(endTime));
        hashCode = (17 * hashCode) + (targetingSpec == null ? 0 : System.hashCode(targetingSpec));
        hashCode = (17 * hashCode) + (lifetimeFrequencyCap == null ? 0 : System.hashCode(lifetimeFrequencyCap));
        hashCode = (17 * hashCode) + (trackingUrls == null ? 0 : System.hashCode(trackingUrls));
        hashCode = (17 * hashCode) + (autoTargetingEnabled == null ? 0 : System.hashCode(autoTargetingEnabled));
        hashCode = (17 * hashCode) + (placementGroup == null ? 0 : System.hashCode(placementGroup));
        hashCode = (17 * hashCode) + (pacingDeliveryType == null ? 0 : System.hashCode(pacingDeliveryType));
        hashCode = (17 * hashCode) + (conversionLearningModeType == null ? 0 : System.hashCode(conversionLearningModeType));
        hashCode = (17 * hashCode) + (summaryStatus == null ? 0 : System.hashCode(summaryStatus));
        hashCode = (17 * hashCode) + (feedProfileId == null ? 0 : System.hashCode(feedProfileId));
        hashCode = (17 * hashCode) + (campaignId == null ? 0 : System.hashCode(campaignId));
        hashCode = (17 * hashCode) + (billableEvent == null ? 0 : System.hashCode(billableEvent));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (adAccountId == null ? 0 : System.hashCode(adAccountId));
        hashCode = (17 * hashCode) + (createdTime == null ? 0 : System.hashCode(createdTime));
        hashCode = (17 * hashCode) + (updatedTime == null ? 0 : System.hashCode(updatedTime));
        return hashCode;
    }
}

