/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoardOwner from './BoardOwner';

/**
 * The Board model module.
 * @module model/Board
 * @version 5.3.0
 */
class Board {
    /**
     * @member {String} id
     * @type {String}
     */
    id;
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {String} description
     * @type {String}
     */
    description;
    /**
     * @member {BoardOwner} owner
     * @type {BoardOwner}
     */
    owner;
    /**
     * @member {Board.PrivacyEnum} privacy
     * @type {Board.PrivacyEnum}
     * @default 'PUBLIC'
     */
    privacy = 'PUBLIC';

    

    /**
     * Constructs a new <code>Board</code>.
     * Board
     * @alias module:model/Board
     * @param name {String} 
     */
    constructor(name) { 
        
        Board.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Board</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Board} obj Optional instance to populate.
     * @return {module:model/Board} The populated <code>Board</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Board();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], BoardOwner);
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = ApiClient.convertToType(data['privacy'], 'String');
            }
        }
        return obj;
    }
}


/**
 * Allowed values for the <code>privacy</code> property.
 * @enum {String}
 * @readonly
 */
Board['PrivacyEnum'] = {

    /**
     * value: "PUBLIC"
     * @const
     */
    "PUBLIC": "PUBLIC",

    /**
     * value: "PROTECTED"
     * @const
     */
    "PROTECTED": "PROTECTED",

    /**
     * value: "SECRET"
     * @const
     */
    "SECRET": "SECRET"
};



export default Board;

