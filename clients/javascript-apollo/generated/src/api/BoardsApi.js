/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import Board from '../model/Board';
import BoardSection from '../model/BoardSection';
import BoardUpdate from '../model/BoardUpdate';
import Error from '../model/Error';
import Paginated from '../model/Paginated';

/**
* Boards service.
* @module api/BoardsApi
* @version 5.3.0
*/
export default class BoardsApi extends ApiClient {

    /**
    * Constructs a new BoardsApi. 
    * @alias module:api/BoardsApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Create board section
     * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {BoardSection} boardSection Create a board section.
     * @return {Promise<BoardSection>}
     */
    async boardSectionsCreate(boardId, boardSection) {
      let postBody = boardSection;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsCreate");
      }
      // verify the required parameter 'boardSection' is set
      if (boardSection === undefined || boardSection === null) {
        throw new Error("Missing the required parameter 'boardSection' when calling boardSectionsCreate");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardSection;

      return this.callApi(
        '/boards/{board_id}/sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete board section
     * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {String} sectionId Unique identifier of a board section.
     * @return {Promise}
     */
    async boardSectionsDelete(boardId, sectionId) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsDelete");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling boardSectionsDelete");
      }

      let pathParams = {
        'board_id': boardId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/boards/{board_id}/sections/{section_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @return {Promise<Paginated>}
     */
    async boardSectionsList(boardId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsList");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/boards/{board_id}/sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {String} sectionId Unique identifier of a board section.
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @return {Promise<Paginated>}
     */
    async boardSectionsListPins(boardId, sectionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsListPins");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling boardSectionsListPins");
      }

      let pathParams = {
        'board_id': boardId,
        'section_id': sectionId
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/boards/{board_id}/sections/{section_id}/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update board section
     * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {String} sectionId Unique identifier of a board section.
     * @param {BoardSection} boardSection Update a board section.
     * @return {Promise<BoardSection>}
     */
    async boardSectionsUpdate(boardId, sectionId, boardSection) {
      let postBody = boardSection;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardSectionsUpdate");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling boardSectionsUpdate");
      }
      // verify the required parameter 'boardSection' is set
      if (boardSection === undefined || boardSection === null) {
        throw new Error("Missing the required parameter 'boardSection' when calling boardSectionsUpdate");
      }

      let pathParams = {
        'board_id': boardId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardSection;

      return this.callApi(
        '/boards/{board_id}/sections/{section_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create board
     * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {Board} board Create a board using a single board json object.
     * @return {Promise<Board>}
     */
    async boardsCreate(board) {
      let postBody = board;
      // verify the required parameter 'board' is set
      if (board === undefined || board === null) {
        throw new Error("Missing the required parameter 'board' when calling boardsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Board;

      return this.callApi(
        '/boards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete board
     * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @return {Promise}
     */
    async boardsDelete(boardId) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsDelete");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/boards/{board_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @return {Promise<Board>}
     */
    async boardsGet(boardId) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsGet");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Board;

      return this.callApi(
        '/boards/{board_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List boards
     * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @param {String} opts.privacy Privacy setting for a board.
     * @return {Promise<Paginated>}
     */
    async boardsList(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize'],
        'privacy': opts['privacy']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/boards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * @param {String} boardId Unique identifier of a board.
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @return {Promise<Paginated>}
     */
    async boardsListPins(boardId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsListPins");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/boards/{board_id}/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update board
     * Update a board owned by the \"operating user_account\".
     * @param {String} boardId Unique identifier of a board.
     * @param {BoardUpdate} boardUpdate Update a board.
     * @return {Promise<Board>}
     */
    async boardsUpdate(boardId, boardUpdate) {
      let postBody = boardUpdate;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling boardsUpdate");
      }
      // verify the required parameter 'boardUpdate' is set
      if (boardUpdate === undefined || boardUpdate === null) {
        throw new Error("Missing the required parameter 'boardUpdate' when calling boardsUpdate");
      }

      let pathParams = {
        'board_id': boardId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Board;

      return this.callApi(
        '/boards/{board_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
