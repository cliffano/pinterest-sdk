/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import CatalogsFeed from '../model/CatalogsFeed';
import CatalogsFeedsCreateRequest from '../model/CatalogsFeedsCreateRequest';
import CatalogsFeedsUpdateRequest from '../model/CatalogsFeedsUpdateRequest';
import CatalogsItems from '../model/CatalogsItems';
import CatalogsItemsBatch from '../model/CatalogsItemsBatch';
import CatalogsItemsBatchRequest from '../model/CatalogsItemsBatchRequest';
import CatalogsProductGroup from '../model/CatalogsProductGroup';
import CatalogsProductGroupCreateRequest from '../model/CatalogsProductGroupCreateRequest';
import CatalogsProductGroupUpdateRequest from '../model/CatalogsProductGroupUpdateRequest';
import Error from '../model/Error';
import Paginated from '../model/Paginated';

/**
* Catalogs service.
* @module api/CatalogsApi
* @version 5.3.0
*/
export default class CatalogsApi extends ApiClient {

    /**
    * Constructs a new CatalogsApi. 
    * @alias module:api/CatalogsApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Create product group
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create product group to use in Catalogs.
     * @param {CatalogsProductGroupCreateRequest} catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
     * @return {Promise<Object>}
     */
    async catalogsProductGroupsCreate(catalogsProductGroupCreateRequest) {
      let postBody = catalogsProductGroupCreateRequest;
      // verify the required parameter 'catalogsProductGroupCreateRequest' is set
      if (catalogsProductGroupCreateRequest === undefined || catalogsProductGroupCreateRequest === null) {
        throw new Error("Missing the required parameter 'catalogsProductGroupCreateRequest' when calling catalogsProductGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.callApi(
        '/catalogs/product_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete product group
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
     * @param {String} productGroupId Unique identifier of a product group
     * @return {Promise}
     */
    async catalogsProductGroupsDelete(productGroupId) {
      let postBody = null;
      // verify the required parameter 'productGroupId' is set
      if (productGroupId === undefined || productGroupId === null) {
        throw new Error("Missing the required parameter 'productGroupId' when calling catalogsProductGroupsDelete");
      }

      let pathParams = {
        'product_group_id': productGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/catalogs/product_groups/{product_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get product groups list
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
     * @param {String} feedId Unique identifier of a feed
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @return {Promise<Paginated>}
     */
    async catalogsProductGroupsList(feedId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling catalogsProductGroupsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'feed_id': feedId,
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/catalogs/product_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update product group
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update product group to use in Catalogs.
     * @param {String} productGroupId Unique identifier of a product group
     * @param {CatalogsProductGroupUpdateRequest} catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
     * @return {Promise<CatalogsProductGroup>}
     */
    async catalogsProductGroupsUpdate(productGroupId, catalogsProductGroupUpdateRequest) {
      let postBody = catalogsProductGroupUpdateRequest;
      // verify the required parameter 'productGroupId' is set
      if (productGroupId === undefined || productGroupId === null) {
        throw new Error("Missing the required parameter 'productGroupId' when calling catalogsProductGroupsUpdate");
      }
      // verify the required parameter 'catalogsProductGroupUpdateRequest' is set
      if (catalogsProductGroupUpdateRequest === undefined || catalogsProductGroupUpdateRequest === null) {
        throw new Error("Missing the required parameter 'catalogsProductGroupUpdateRequest' when calling catalogsProductGroupsUpdate");
      }

      let pathParams = {
        'product_group_id': productGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogsProductGroup;

      return this.callApi(
        '/catalogs/product_groups/{product_group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List processing results for a given feed
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
     * @param {String} feedId Unique identifier of a feed
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @return {Promise<Paginated>}
     */
    async feedProcessingResultsList(feedId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling feedProcessingResultsList");
      }

      let pathParams = {
        'feed_id': feedId
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/catalogs/feeds/{feed_id}/processing_results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create feed
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
     * @param {CatalogsFeedsCreateRequest} catalogsFeedsCreateRequest Request object used to created a feed.
     * @return {Promise<CatalogsFeed>}
     */
    async feedsCreate(catalogsFeedsCreateRequest) {
      let postBody = catalogsFeedsCreateRequest;
      // verify the required parameter 'catalogsFeedsCreateRequest' is set
      if (catalogsFeedsCreateRequest === undefined || catalogsFeedsCreateRequest === null) {
        throw new Error("Missing the required parameter 'catalogsFeedsCreateRequest' when calling feedsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogsFeed;

      return this.callApi(
        '/catalogs/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete feed
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
     * @param {String} feedId Unique identifier of a feed
     * @return {Promise}
     */
    async feedsDelete(feedId) {
      let postBody = null;
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling feedsDelete");
      }

      let pathParams = {
        'feed_id': feedId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.callApi(
        '/catalogs/feeds/{feed_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get feed
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
     * @param {String} feedId Unique identifier of a feed
     * @return {Promise<CatalogsFeed>}
     */
    async feedsGet(feedId) {
      let postBody = null;
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling feedsGet");
      }

      let pathParams = {
        'feed_id': feedId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogsFeed;

      return this.callApi(
        '/catalogs/feeds/{feed_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List feeds
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @return {Promise<Paginated>}
     */
    async feedsList(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/catalogs/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update feed
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
     * @param {String} feedId Unique identifier of a feed
     * @param {CatalogsFeedsUpdateRequest} catalogsFeedsUpdateRequest Request object used to update a feed.
     * @return {Promise<CatalogsFeed>}
     */
    async feedsUpdate(feedId, catalogsFeedsUpdateRequest) {
      let postBody = catalogsFeedsUpdateRequest;
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling feedsUpdate");
      }
      // verify the required parameter 'catalogsFeedsUpdateRequest' is set
      if (catalogsFeedsUpdateRequest === undefined || catalogsFeedsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'catalogsFeedsUpdateRequest' when calling feedsUpdate");
      }

      let pathParams = {
        'feed_id': feedId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogsFeed;

      return this.callApi(
        '/catalogs/feeds/{feed_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get catalogs items batch
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
     * @param {String} batchId Id of a catalogs items batch to fetch
     * @return {Promise<CatalogsItemsBatch>}
     */
    async itemsBatchGet(batchId) {
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling itemsBatchGet");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogsItemsBatch;

      return this.callApi(
        '/catalogs/items/batch/{batch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform an operation on an item batch
     * <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
     * @param {CatalogsItemsBatchRequest} catalogsItemsBatchRequest Request object used to create catalogs items in a batch
     * @return {Promise<CatalogsItemsBatch>}
     */
    async itemsBatchPost(catalogsItemsBatchRequest) {
      let postBody = catalogsItemsBatchRequest;
      // verify the required parameter 'catalogsItemsBatchRequest' is set
      if (catalogsItemsBatchRequest === undefined || catalogsItemsBatchRequest === null) {
        throw new Error("Missing the required parameter 'catalogsItemsBatchRequest' when calling itemsBatchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogsItemsBatch;

      return this.callApi(
        '/catalogs/items/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get catalogs items
     * Get the items of the catalog created by the \"operating user_account\"
     * @param {String} country Country for the Catalogs Items
     * @param {Array.<String>} itemIds Catalos Item ids
     * @param {String} language Language for the Catalogs Items
     * @return {Promise<CatalogsItems>}
     */
    async itemsGet(country, itemIds, language) {
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling itemsGet");
      }
      // verify the required parameter 'itemIds' is set
      if (itemIds === undefined || itemIds === null) {
        throw new Error("Missing the required parameter 'itemIds' when calling itemsGet");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling itemsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'country': country,
        'item_ids': this.buildCollectionParam(itemIds, 'multi'),
        'language': language
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogsItems;

      return this.callApi(
        '/catalogs/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
