/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import AdsAnalyticsCreateAsyncRequest from '../model/AdsAnalyticsCreateAsyncRequest';
import AdsAnalyticsCreateAsyncResponse from '../model/AdsAnalyticsCreateAsyncResponse';
import AdsAnalyticsGetAsyncResponse from '../model/AdsAnalyticsGetAsyncResponse';
import AnyType from '../model/AnyType';
import Error from '../model/Error';
import Granularity from '../model/Granularity';
import Paginated from '../model/Paginated';

/**
* AdAccounts service.
* @module api/AdAccountsApi
* @version 5.3.0
*/
export default class AdAccountsApi extends ApiClient {

    /**
    * Constructs a new AdAccountsApi. 
    * @alias module:api/AdAccountsApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * Get ad account analytics
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array.<String>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. (default to 1)
     * @param {String} opts.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to 'TIME_OF_AD_ACTION')
     * @return {Promise<Array.<{String: Object}>>}
     */
    async adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adAccountAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adAccountAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adAccountAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling adAccountAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling adAccountAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'columns': this.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];

      return this.callApi(
        '/ad_accounts/{ad_account_id}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ad accounts
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * @param {Object} opts Optional parameters
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @param {Boolean} opts.includeSharedAccounts Include shared ad accounts (default to true)
     * @return {Promise<Paginated>}
     */
    async adAccountsList(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bookmark': opts['bookmark'],
        'page_size': opts['pageSize'],
        'include_shared_accounts': opts['includeSharedAccounts']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/ad_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get ad group analytics
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array.<String>} adGroupIds List of Ad group Ids to use to filter the results.
     * @param {Array.<String>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. (default to 1)
     * @param {String} opts.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to 'TIME_OF_AD_ACTION')
     * @return {Promise<Array.<{String: Object}>>}
     */
    async adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'adGroupIds' is set
      if (adGroupIds === undefined || adGroupIds === null) {
        throw new Error("Missing the required parameter 'adGroupIds' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling adGroupsAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling adGroupsAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'ad_group_ids': this.buildCollectionParam(adGroupIds, 'multi'),
        'columns': this.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];

      return this.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ad groups
     * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.campaignIds List of Campaign Ids to use to filter the results.
     * @param {Array.<String>} opts.adGroupIds List of Ad group Ids to use to filter the results.
     * @param {Array.<String>} opts.entityStatuses Entity status
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @param {String} opts.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @param {Boolean} opts.translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs. (default to false)
     * @return {Promise<Paginated>}
     */
    async adGroupsList(adAccountId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adGroupsList");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'campaign_ids': this.buildCollectionParam(opts['campaignIds'], 'multi'),
        'ad_group_ids': this.buildCollectionParam(opts['adGroupIds'], 'multi'),
        'entity_statuses': this.buildCollectionParam(opts['entityStatuses'], 'multi'),
        'page_size': opts['pageSize'],
        'order': opts['order'],
        'bookmark': opts['bookmark'],
        'translate_interests_to_names': opts['translateInterestsToNames']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/ad_accounts/{ad_account_id}/ad_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get ad analytics
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array.<String>} adIds List of Ad Ids to use to filter the results.
     * @param {Array.<String>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. (default to 1)
     * @param {String} opts.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to 'TIME_OF_AD_ACTION')
     * @return {Promise<Array.<{String: Object}>>}
     */
    async adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adsAnalytics");
      }
      // verify the required parameter 'adIds' is set
      if (adIds === undefined || adIds === null) {
        throw new Error("Missing the required parameter 'adIds' when calling adsAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling adsAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling adsAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'ad_ids': this.buildCollectionParam(adIds, 'multi'),
        'columns': this.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];

      return this.callApi(
        '/ad_accounts/{ad_account_id}/ads/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ads
     * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.campaignIds List of Campaign Ids to use to filter the results.
     * @param {Array.<String>} opts.adGroupIds List of Ad group Ids to use to filter the results.
     * @param {Array.<String>} opts.adIds List of Ad Ids to use to filter the results.
     * @param {Array.<String>} opts.entityStatuses Entity status
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @param {String} opts.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @return {Promise<Paginated>}
     */
    async adsList(adAccountId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling adsList");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'campaign_ids': this.buildCollectionParam(opts['campaignIds'], 'multi'),
        'ad_group_ids': this.buildCollectionParam(opts['adGroupIds'], 'multi'),
        'ad_ids': this.buildCollectionParam(opts['adIds'], 'multi'),
        'entity_statuses': this.buildCollectionParam(opts['entityStatuses'], 'multi'),
        'page_size': opts['pageSize'],
        'order': opts['order'],
        'bookmark': opts['bookmark']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/ad_accounts/{ad_account_id}/ads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create async request for an account analytics report
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {AdsAnalyticsCreateAsyncRequest} adsAnalyticsCreateAsyncRequest 
     * @return {Promise<AdsAnalyticsCreateAsyncResponse>}
     */
    async analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest) {
      let postBody = adsAnalyticsCreateAsyncRequest;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling analyticsCreateReport");
      }
      // verify the required parameter 'adsAnalyticsCreateAsyncRequest' is set
      if (adsAnalyticsCreateAsyncRequest === undefined || adsAnalyticsCreateAsyncRequest === null) {
        throw new Error("Missing the required parameter 'adsAnalyticsCreateAsyncRequest' when calling analyticsCreateReport");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdsAnalyticsCreateAsyncResponse;

      return this.callApi(
        '/ad_accounts/{ad_account_id}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the account analytics report created by the async call
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it's valid for an hour. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {String} token Token returned from the post request creation call
     * @return {Promise<AdsAnalyticsGetAsyncResponse>}
     */
    async analyticsGetReport(adAccountId, token) {
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling analyticsGetReport");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling analyticsGetReport");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdsAnalyticsGetAsyncResponse;

      return this.callApi(
        '/ad_accounts/{ad_account_id}/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get campaign analytics
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array.<String>} campaignIds List of Campaign Ids to use to filter the results.
     * @param {Array.<String>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. (default to 1)
     * @param {String} opts.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to 'TIME_OF_AD_ACTION')
     * @return {Promise<Array.<{String: Object}>>}
     */
    async campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling campaignsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling campaignsAnalytics");
      }
      // verify the required parameter 'campaignIds' is set
      if (campaignIds === undefined || campaignIds === null) {
        throw new Error("Missing the required parameter 'campaignIds' when calling campaignsAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling campaignsAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling campaignsAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'campaign_ids': this.buildCollectionParam(campaignIds, 'multi'),
        'columns': this.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];

      return this.callApi(
        '/ad_accounts/{ad_account_id}/campaigns/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List campaigns
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.campaignIds List of Campaign Ids to use to filter the results.
     * @param {Array.<String>} opts.entityStatuses Entity status
     * @param {Number} opts.pageSize Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information. (default to 25)
     * @param {String} opts.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
     * @param {String} opts.bookmark Cursor used to fetch the next page of items
     * @return {Promise<Paginated>}
     */
    async campaignsList(adAccountId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling campaignsList");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'campaign_ids': this.buildCollectionParam(opts['campaignIds'], 'multi'),
        'entity_statuses': this.buildCollectionParam(opts['entityStatuses'], 'multi'),
        'page_size': opts['pageSize'],
        'order': opts['order'],
        'bookmark': opts['bookmark']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Paginated;

      return this.callApi(
        '/ad_accounts/{ad_account_id}/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get product group analytics
     * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * @param {String} adAccountId Unique identifier of an ad account.
     * @param {Date} startDate Metric report start date (UTC). Format: YYYY-MM-DD
     * @param {Date} endDate Metric report end date (UTC). Format: YYYY-MM-DD
     * @param {Array.<String>} productGroupIds List of Product group Ids to use to filter the results.
     * @param {Array.<String>} columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
     * @param {Granularity} granularity Granularity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. (default to 30)
     * @param {Number} opts.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. (default to 1)
     * @param {String} opts.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to 'TIME_OF_AD_ACTION')
     * @return {Promise<Array.<{String: Object}>>}
     */
    async productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adAccountId' is set
      if (adAccountId === undefined || adAccountId === null) {
        throw new Error("Missing the required parameter 'adAccountId' when calling productGroupsAnalytics");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling productGroupsAnalytics");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling productGroupsAnalytics");
      }
      // verify the required parameter 'productGroupIds' is set
      if (productGroupIds === undefined || productGroupIds === null) {
        throw new Error("Missing the required parameter 'productGroupIds' when calling productGroupsAnalytics");
      }
      // verify the required parameter 'columns' is set
      if (columns === undefined || columns === null) {
        throw new Error("Missing the required parameter 'columns' when calling productGroupsAnalytics");
      }
      // verify the required parameter 'granularity' is set
      if (granularity === undefined || granularity === null) {
        throw new Error("Missing the required parameter 'granularity' when calling productGroupsAnalytics");
      }

      let pathParams = {
        'ad_account_id': adAccountId
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate,
        'product_group_ids': this.buildCollectionParam(productGroupIds, 'multi'),
        'columns': this.buildCollectionParam(columns, 'csv'),
        'granularity': granularity,
        'click_window_days': opts['clickWindowDays'],
        'engagement_window_days': opts['engagementWindowDays'],
        'view_window_days': opts['viewWindowDays'],
        'conversion_report_time': opts['conversionReportTime']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/5.3.0/Javascript',
      };
      let formParams = {
      };

      let authNames = ['pinterest_oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': Object}];

      return this.callApi(
        '/ad_accounts/{ad_account_id}/product_groups/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
