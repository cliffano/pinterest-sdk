# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from pinterestsdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401

from pinterestsdk.model.analytics_response import AnalyticsResponse
from pinterestsdk.model.error import Error

from . import path

# Query params
StartDateSchema = schemas.DateSchema
EndDateSchema = schemas.DateSchema


class FromClaimedContentSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "OTHER": "OTHER",
            "CLAIMED": "CLAIMED",
            "BOTH": "BOTH",
        }
    
    @schemas.classproperty
    def OTHER(cls):
        return cls("OTHER")
    
    @schemas.classproperty
    def CLAIMED(cls):
        return cls("CLAIMED")
    
    @schemas.classproperty
    def BOTH(cls):
        return cls("BOTH")


class PinFormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "ALL": "ALL",
            "PRODUCT": "PRODUCT",
            "REGULAR": "REGULAR",
            "VIDEO": "VIDEO",
        }
    
    @schemas.classproperty
    def ALL(cls):
        return cls("ALL")
    
    @schemas.classproperty
    def PRODUCT(cls):
        return cls("PRODUCT")
    
    @schemas.classproperty
    def REGULAR(cls):
        return cls("REGULAR")
    
    @schemas.classproperty
    def VIDEO(cls):
        return cls("VIDEO")


class AppTypesSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "ALL": "ALL",
            "MOBILE": "MOBILE",
            "TABLET": "TABLET",
            "WEB": "WEB",
        }
    
    @schemas.classproperty
    def ALL(cls):
        return cls("ALL")
    
    @schemas.classproperty
    def MOBILE(cls):
        return cls("MOBILE")
    
    @schemas.classproperty
    def TABLET(cls):
        return cls("TABLET")
    
    @schemas.classproperty
    def WEB(cls):
        return cls("WEB")


class MetricTypesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "ENGAGEMENT": "ENGAGEMENT",
                    "ENGAGEMENT_RATE": "ENGAGEMENT_RATE",
                    "IMPRESSION": "IMPRESSION",
                    "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                    "OUTBOUND_CLICK_RATE": "OUTBOUND_CLICK_RATE",
                    "PIN_CLICK": "PIN_CLICK",
                    "PIN_CLICK_RATE": "PIN_CLICK_RATE",
                    "SAVE": "SAVE",
                    "SAVE_RATE": "SAVE_RATE",
                }
            
            @schemas.classproperty
            def ENGAGEMENT(cls):
                return cls("ENGAGEMENT")
            
            @schemas.classproperty
            def ENGAGEMENT_RATE(cls):
                return cls("ENGAGEMENT_RATE")
            
            @schemas.classproperty
            def IMPRESSION(cls):
                return cls("IMPRESSION")
            
            @schemas.classproperty
            def OUTBOUND_CLICK(cls):
                return cls("OUTBOUND_CLICK")
            
            @schemas.classproperty
            def OUTBOUND_CLICK_RATE(cls):
                return cls("OUTBOUND_CLICK_RATE")
            
            @schemas.classproperty
            def PIN_CLICK(cls):
                return cls("PIN_CLICK")
            
            @schemas.classproperty
            def PIN_CLICK_RATE(cls):
                return cls("PIN_CLICK_RATE")
            
            @schemas.classproperty
            def SAVE(cls):
                return cls("SAVE")
            
            @schemas.classproperty
            def SAVE_RATE(cls):
                return cls("SAVE_RATE")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MetricTypesSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class SplitFieldSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "NO_SPLIT": "NO_SPLIT",
            "APP_TYPE": "APP_TYPE",
            "OWNED_CONTENT": "OWNED_CONTENT",
            "PIN_FORMAT": "PIN_FORMAT",
        }
    
    @schemas.classproperty
    def NO_SPLIT(cls):
        return cls("NO_SPLIT")
    
    @schemas.classproperty
    def APP_TYPE(cls):
        return cls("APP_TYPE")
    
    @schemas.classproperty
    def OWNED_CONTENT(cls):
        return cls("OWNED_CONTENT")
    
    @schemas.classproperty
    def PIN_FORMAT(cls):
        return cls("PIN_FORMAT")


class AdAccountIdSchema(
    schemas.StrSchema
):


    class MetaOapg:
        max_length = 18
        regex=[{
            'pattern': r'^\d+$',  # noqa: E501
        }]
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'start_date': typing.Union[StartDateSchema, str, date, ],
        'end_date': typing.Union[EndDateSchema, str, date, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'from_claimed_content': typing.Union[FromClaimedContentSchema, str, ],
        'pin_format': typing.Union[PinFormatSchema, str, ],
        'app_types': typing.Union[AppTypesSchema, str, ],
        'metric_types': typing.Union[MetricTypesSchema, list, tuple, ],
        'split_field': typing.Union[SplitFieldSchema, str, ],
        'ad_account_id': typing.Union[AdAccountIdSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_start_date = api_client.QueryParameter(
    name="start_date",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    required=True,
    explode=True,
)
request_query_end_date = api_client.QueryParameter(
    name="end_date",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateSchema,
    required=True,
    explode=True,
)
request_query_from_claimed_content = api_client.QueryParameter(
    name="from_claimed_content",
    style=api_client.ParameterStyle.FORM,
    schema=FromClaimedContentSchema,
    explode=True,
)
request_query_pin_format = api_client.QueryParameter(
    name="pin_format",
    style=api_client.ParameterStyle.FORM,
    schema=PinFormatSchema,
    explode=True,
)
request_query_app_types = api_client.QueryParameter(
    name="app_types",
    style=api_client.ParameterStyle.FORM,
    schema=AppTypesSchema,
    explode=True,
)
request_query_metric_types = api_client.QueryParameter(
    name="metric_types",
    style=api_client.ParameterStyle.FORM,
    schema=MetricTypesSchema,
)
request_query_split_field = api_client.QueryParameter(
    name="split_field",
    style=api_client.ParameterStyle.FORM,
    schema=SplitFieldSchema,
)
request_query_ad_account_id = api_client.QueryParameter(
    name="ad_account_id",
    style=api_client.ParameterStyle.FORM,
    schema=AdAccountIdSchema,
    explode=True,
)
_auth = [
    'pinterest_oauth2',
]
SchemaFor200ResponseBodyApplicationJson = AnalyticsResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '403': _response_for_403,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _user_account_analytics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _user_account_analytics_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _user_account_analytics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _user_account_analytics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get user account analytics
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_start_date,
            request_query_end_date,
            request_query_from_claimed_content,
            request_query_pin_format,
            request_query_app_types,
            request_query_metric_types,
            request_query_split_field,
            request_query_ad_account_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class UserAccountAnalytics(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def user_account_analytics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def user_account_analytics(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def user_account_analytics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def user_account_analytics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._user_account_analytics_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._user_account_analytics_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


