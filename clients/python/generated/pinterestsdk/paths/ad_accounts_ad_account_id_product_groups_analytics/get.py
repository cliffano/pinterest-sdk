# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from pinterestsdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401

from pinterestsdk.model.granularity import Granularity
from pinterestsdk.model.product_group_analytics_response import ProductGroupAnalyticsResponse
from pinterestsdk.model.error import Error

from . import path

# Query params
StartDateSchema = schemas.DateSchema
EndDateSchema = schemas.DateSchema


class ProductGroupIdsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        max_items = 100
        min_items = 1
        
        
        class items(
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                regex=[{
                    'pattern': r'^\d+$',  # noqa: E501
                }]

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ProductGroupIdsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ColumnsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "ADVERTISER_ID": "ADVERTISER_ID",
                    "PIN_PROMOTION_ID": "PIN_PROMOTION_ID",
                    "AD_ACCOUNT_ID": "AD_ACCOUNT_ID",
                    "AD_GROUP_ENTITY_STATUS": "AD_GROUP_ENTITY_STATUS",
                    "AD_GROUP_ID": "AD_GROUP_ID",
                    "AD_ID": "AD_ID",
                    "CAMPAIGN_DAILY_SPEND_CAP": "CAMPAIGN_DAILY_SPEND_CAP",
                    "CAMPAIGN_ENTITY_STATUS": "CAMPAIGN_ENTITY_STATUS",
                    "CAMPAIGN_ID": "CAMPAIGN_ID",
                    "CAMPAIGN_LIFETIME_SPEND_CAP": "CAMPAIGN_LIFETIME_SPEND_CAP",
                    "CAMPAIGN_NAME": "CAMPAIGN_NAME",
                    "CHECKOUT_ROAS": "CHECKOUT_ROAS",
                    "CLICKTHROUGH_1": "CLICKTHROUGH_1",
                    "CLICKTHROUGH_1_GROSS": "CLICKTHROUGH_1_GROSS",
                    "CLICKTHROUGH_2": "CLICKTHROUGH_2",
                    "CPC_IN_MICRO_DOLLAR": "CPC_IN_MICRO_DOLLAR",
                    "CPM_IN_DOLLAR": "CPM_IN_DOLLAR",
                    "CPM_IN_MICRO_DOLLAR": "CPM_IN_MICRO_DOLLAR",
                    "CTR": "CTR",
                    "CTR_2": "CTR_2",
                    "ECPCV_IN_DOLLAR": "ECPCV_IN_DOLLAR",
                    "ECPCV_P95_IN_DOLLAR": "ECPCV_P95_IN_DOLLAR",
                    "ECPC_IN_DOLLAR": "ECPC_IN_DOLLAR",
                    "ECPC_IN_MICRO_DOLLAR": "ECPC_IN_MICRO_DOLLAR",
                    "ECPE_IN_DOLLAR": "ECPE_IN_DOLLAR",
                    "ECPM_IN_MICRO_DOLLAR": "ECPM_IN_MICRO_DOLLAR",
                    "ECPV_IN_DOLLAR": "ECPV_IN_DOLLAR",
                    "ECTR": "ECTR",
                    "EENGAGEMENT_RATE": "EENGAGEMENT_RATE",
                    "ENGAGEMENT_1": "ENGAGEMENT_1",
                    "ENGAGEMENT_2": "ENGAGEMENT_2",
                    "ENGAGEMENT_RATE": "ENGAGEMENT_RATE",
                    "IDEA_PIN_PRODUCT_TAG_VISIT_1": "IDEA_PIN_PRODUCT_TAG_VISIT_1",
                    "IDEA_PIN_PRODUCT_TAG_VISIT_2": "IDEA_PIN_PRODUCT_TAG_VISIT_2",
                    "IMPRESSION_1": "IMPRESSION_1",
                    "IMPRESSION_1_GROSS": "IMPRESSION_1_GROSS",
                    "IMPRESSION_2": "IMPRESSION_2",
                    "INAPP_CHECKOUT_COST_PER_ACTION": "INAPP_CHECKOUT_COST_PER_ACTION",
                    "OUTBOUND_CLICK_1": "OUTBOUND_CLICK_1",
                    "OUTBOUND_CLICK_2": "OUTBOUND_CLICK_2",
                    "PAGE_VISIT_COST_PER_ACTION": "PAGE_VISIT_COST_PER_ACTION",
                    "PAGE_VISIT_ROAS": "PAGE_VISIT_ROAS",
                    "PAID_IMPRESSION": "PAID_IMPRESSION",
                    "PIN_ID": "PIN_ID",
                    "REPIN_1": "REPIN_1",
                    "REPIN_2": "REPIN_2",
                    "REPIN_RATE": "REPIN_RATE",
                    "SPEND_IN_DOLLAR": "SPEND_IN_DOLLAR",
                    "SPEND_IN_MICRO_DOLLAR": "SPEND_IN_MICRO_DOLLAR",
                    "TOTAL_CHECKOUT": "TOTAL_CHECKOUT",
                    "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_CLICKTHROUGH": "TOTAL_CLICKTHROUGH",
                    "TOTAL_CLICK_ADD_TO_CART": "TOTAL_CLICK_ADD_TO_CART",
                    "TOTAL_CLICK_CHECKOUT": "TOTAL_CLICK_CHECKOUT",
                    "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_CLICK_LEAD": "TOTAL_CLICK_LEAD",
                    "TOTAL_CLICK_SIGNUP": "TOTAL_CLICK_SIGNUP",
                    "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR": "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_CONVERSIONS": "TOTAL_CONVERSIONS",
                    "TOTAL_CUSTOM": "TOTAL_CUSTOM",
                    "TOTAL_ENGAGEMENT": "TOTAL_ENGAGEMENT",
                    "TOTAL_ENGAGEMENT_CHECKOUT": "TOTAL_ENGAGEMENT_CHECKOUT",
                    "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_ENGAGEMENT_LEAD": "TOTAL_ENGAGEMENT_LEAD",
                    "TOTAL_ENGAGEMENT_SIGNUP": "TOTAL_ENGAGEMENT_SIGNUP",
                    "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR": "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT": "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT",
                    "TOTAL_IMPRESSION_FREQUENCY": "TOTAL_IMPRESSION_FREQUENCY",
                    "TOTAL_IMPRESSION_USER": "TOTAL_IMPRESSION_USER",
                    "TOTAL_LEAD": "TOTAL_LEAD",
                    "TOTAL_OFFLINE_CHECKOUT": "TOTAL_OFFLINE_CHECKOUT",
                    "TOTAL_PAGE_VISIT": "TOTAL_PAGE_VISIT",
                    "TOTAL_REPIN_RATE": "TOTAL_REPIN_RATE",
                    "TOTAL_SIGNUP": "TOTAL_SIGNUP",
                    "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR": "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_VIDEO_3SEC_VIEWS": "TOTAL_VIDEO_3SEC_VIEWS",
                    "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND": "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND",
                    "TOTAL_VIDEO_MRC_VIEWS": "TOTAL_VIDEO_MRC_VIEWS",
                    "TOTAL_VIDEO_P0_COMBINED": "TOTAL_VIDEO_P0_COMBINED",
                    "TOTAL_VIDEO_P100_COMPLETE": "TOTAL_VIDEO_P100_COMPLETE",
                    "TOTAL_VIDEO_P25_COMBINED": "TOTAL_VIDEO_P25_COMBINED",
                    "TOTAL_VIDEO_P50_COMBINED": "TOTAL_VIDEO_P50_COMBINED",
                    "TOTAL_VIDEO_P75_COMBINED": "TOTAL_VIDEO_P75_COMBINED",
                    "TOTAL_VIDEO_P95_COMBINED": "TOTAL_VIDEO_P95_COMBINED",
                    "TOTAL_VIEW_ADD_TO_CART": "TOTAL_VIEW_ADD_TO_CART",
                    "TOTAL_VIEW_CHECKOUT": "TOTAL_VIEW_CHECKOUT",
                    "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_VIEW_LEAD": "TOTAL_VIEW_LEAD",
                    "TOTAL_VIEW_SIGNUP": "TOTAL_VIEW_SIGNUP",
                    "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR": "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_WEB_CHECKOUT": "TOTAL_WEB_CHECKOUT",
                    "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_WEB_CLICK_CHECKOUT": "TOTAL_WEB_CLICK_CHECKOUT",
                    "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_WEB_ENGAGEMENT_CHECKOUT": "TOTAL_WEB_ENGAGEMENT_CHECKOUT",
                    "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "TOTAL_WEB_SESSIONS": "TOTAL_WEB_SESSIONS",
                    "TOTAL_WEB_VIEW_CHECKOUT": "TOTAL_WEB_VIEW_CHECKOUT",
                    "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR": "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR",
                    "VIDEO_3SEC_VIEWS_2": "VIDEO_3SEC_VIEWS_2",
                    "VIDEO_LENGTH": "VIDEO_LENGTH",
                    "VIDEO_MRC_VIEWS_2": "VIDEO_MRC_VIEWS_2",
                    "VIDEO_P0_COMBINED_2": "VIDEO_P0_COMBINED_2",
                    "VIDEO_P100_COMPLETE_2": "VIDEO_P100_COMPLETE_2",
                    "VIDEO_P25_COMBINED_2": "VIDEO_P25_COMBINED_2",
                    "VIDEO_P50_COMBINED_2": "VIDEO_P50_COMBINED_2",
                    "VIDEO_P75_COMBINED_2": "VIDEO_P75_COMBINED_2",
                    "VIDEO_P95_COMBINED_2": "VIDEO_P95_COMBINED_2",
                    "WEB_CHECKOUT_COST_PER_ACTION": "WEB_CHECKOUT_COST_PER_ACTION",
                    "WEB_CHECKOUT_ROAS": "WEB_CHECKOUT_ROAS",
                    "WEB_SESSIONS_1": "WEB_SESSIONS_1",
                    "WEB_SESSIONS_2": "WEB_SESSIONS_2",
                }
            
            @schemas.classproperty
            def ADVERTISER_ID(cls):
                return cls("ADVERTISER_ID")
            
            @schemas.classproperty
            def PIN_PROMOTION_ID(cls):
                return cls("PIN_PROMOTION_ID")
            
            @schemas.classproperty
            def AD_ACCOUNT_ID(cls):
                return cls("AD_ACCOUNT_ID")
            
            @schemas.classproperty
            def AD_GROUP_ENTITY_STATUS(cls):
                return cls("AD_GROUP_ENTITY_STATUS")
            
            @schemas.classproperty
            def AD_GROUP_ID(cls):
                return cls("AD_GROUP_ID")
            
            @schemas.classproperty
            def AD_ID(cls):
                return cls("AD_ID")
            
            @schemas.classproperty
            def CAMPAIGN_DAILY_SPEND_CAP(cls):
                return cls("CAMPAIGN_DAILY_SPEND_CAP")
            
            @schemas.classproperty
            def CAMPAIGN_ENTITY_STATUS(cls):
                return cls("CAMPAIGN_ENTITY_STATUS")
            
            @schemas.classproperty
            def CAMPAIGN_ID(cls):
                return cls("CAMPAIGN_ID")
            
            @schemas.classproperty
            def CAMPAIGN_LIFETIME_SPEND_CAP(cls):
                return cls("CAMPAIGN_LIFETIME_SPEND_CAP")
            
            @schemas.classproperty
            def CAMPAIGN_NAME(cls):
                return cls("CAMPAIGN_NAME")
            
            @schemas.classproperty
            def CHECKOUT_ROAS(cls):
                return cls("CHECKOUT_ROAS")
            
            @schemas.classproperty
            def CLICKTHROUGH_1(cls):
                return cls("CLICKTHROUGH_1")
            
            @schemas.classproperty
            def CLICKTHROUGH_1_GROSS(cls):
                return cls("CLICKTHROUGH_1_GROSS")
            
            @schemas.classproperty
            def CLICKTHROUGH_2(cls):
                return cls("CLICKTHROUGH_2")
            
            @schemas.classproperty
            def CPC_IN_MICRO_DOLLAR(cls):
                return cls("CPC_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def CPM_IN_DOLLAR(cls):
                return cls("CPM_IN_DOLLAR")
            
            @schemas.classproperty
            def CPM_IN_MICRO_DOLLAR(cls):
                return cls("CPM_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def CTR(cls):
                return cls("CTR")
            
            @schemas.classproperty
            def CTR_2(cls):
                return cls("CTR_2")
            
            @schemas.classproperty
            def ECPCV_IN_DOLLAR(cls):
                return cls("ECPCV_IN_DOLLAR")
            
            @schemas.classproperty
            def ECPCV_P95_IN_DOLLAR(cls):
                return cls("ECPCV_P95_IN_DOLLAR")
            
            @schemas.classproperty
            def ECPC_IN_DOLLAR(cls):
                return cls("ECPC_IN_DOLLAR")
            
            @schemas.classproperty
            def ECPC_IN_MICRO_DOLLAR(cls):
                return cls("ECPC_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def ECPE_IN_DOLLAR(cls):
                return cls("ECPE_IN_DOLLAR")
            
            @schemas.classproperty
            def ECPM_IN_MICRO_DOLLAR(cls):
                return cls("ECPM_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def ECPV_IN_DOLLAR(cls):
                return cls("ECPV_IN_DOLLAR")
            
            @schemas.classproperty
            def ECTR(cls):
                return cls("ECTR")
            
            @schemas.classproperty
            def EENGAGEMENT_RATE(cls):
                return cls("EENGAGEMENT_RATE")
            
            @schemas.classproperty
            def ENGAGEMENT_1(cls):
                return cls("ENGAGEMENT_1")
            
            @schemas.classproperty
            def ENGAGEMENT_2(cls):
                return cls("ENGAGEMENT_2")
            
            @schemas.classproperty
            def ENGAGEMENT_RATE(cls):
                return cls("ENGAGEMENT_RATE")
            
            @schemas.classproperty
            def IDEA_PIN_PRODUCT_TAG_VISIT_1(cls):
                return cls("IDEA_PIN_PRODUCT_TAG_VISIT_1")
            
            @schemas.classproperty
            def IDEA_PIN_PRODUCT_TAG_VISIT_2(cls):
                return cls("IDEA_PIN_PRODUCT_TAG_VISIT_2")
            
            @schemas.classproperty
            def IMPRESSION_1(cls):
                return cls("IMPRESSION_1")
            
            @schemas.classproperty
            def IMPRESSION_1_GROSS(cls):
                return cls("IMPRESSION_1_GROSS")
            
            @schemas.classproperty
            def IMPRESSION_2(cls):
                return cls("IMPRESSION_2")
            
            @schemas.classproperty
            def INAPP_CHECKOUT_COST_PER_ACTION(cls):
                return cls("INAPP_CHECKOUT_COST_PER_ACTION")
            
            @schemas.classproperty
            def OUTBOUND_CLICK_1(cls):
                return cls("OUTBOUND_CLICK_1")
            
            @schemas.classproperty
            def OUTBOUND_CLICK_2(cls):
                return cls("OUTBOUND_CLICK_2")
            
            @schemas.classproperty
            def PAGE_VISIT_COST_PER_ACTION(cls):
                return cls("PAGE_VISIT_COST_PER_ACTION")
            
            @schemas.classproperty
            def PAGE_VISIT_ROAS(cls):
                return cls("PAGE_VISIT_ROAS")
            
            @schemas.classproperty
            def PAID_IMPRESSION(cls):
                return cls("PAID_IMPRESSION")
            
            @schemas.classproperty
            def PIN_ID(cls):
                return cls("PIN_ID")
            
            @schemas.classproperty
            def REPIN_1(cls):
                return cls("REPIN_1")
            
            @schemas.classproperty
            def REPIN_2(cls):
                return cls("REPIN_2")
            
            @schemas.classproperty
            def REPIN_RATE(cls):
                return cls("REPIN_RATE")
            
            @schemas.classproperty
            def SPEND_IN_DOLLAR(cls):
                return cls("SPEND_IN_DOLLAR")
            
            @schemas.classproperty
            def SPEND_IN_MICRO_DOLLAR(cls):
                return cls("SPEND_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_CHECKOUT(cls):
                return cls("TOTAL_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_CLICKTHROUGH(cls):
                return cls("TOTAL_CLICKTHROUGH")
            
            @schemas.classproperty
            def TOTAL_CLICK_ADD_TO_CART(cls):
                return cls("TOTAL_CLICK_ADD_TO_CART")
            
            @schemas.classproperty
            def TOTAL_CLICK_CHECKOUT(cls):
                return cls("TOTAL_CLICK_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_CLICK_LEAD(cls):
                return cls("TOTAL_CLICK_LEAD")
            
            @schemas.classproperty
            def TOTAL_CLICK_SIGNUP(cls):
                return cls("TOTAL_CLICK_SIGNUP")
            
            @schemas.classproperty
            def TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_CONVERSIONS(cls):
                return cls("TOTAL_CONVERSIONS")
            
            @schemas.classproperty
            def TOTAL_CUSTOM(cls):
                return cls("TOTAL_CUSTOM")
            
            @schemas.classproperty
            def TOTAL_ENGAGEMENT(cls):
                return cls("TOTAL_ENGAGEMENT")
            
            @schemas.classproperty
            def TOTAL_ENGAGEMENT_CHECKOUT(cls):
                return cls("TOTAL_ENGAGEMENT_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_ENGAGEMENT_LEAD(cls):
                return cls("TOTAL_ENGAGEMENT_LEAD")
            
            @schemas.classproperty
            def TOTAL_ENGAGEMENT_SIGNUP(cls):
                return cls("TOTAL_ENGAGEMENT_SIGNUP")
            
            @schemas.classproperty
            def TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT(cls):
                return cls("TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT")
            
            @schemas.classproperty
            def TOTAL_IMPRESSION_FREQUENCY(cls):
                return cls("TOTAL_IMPRESSION_FREQUENCY")
            
            @schemas.classproperty
            def TOTAL_IMPRESSION_USER(cls):
                return cls("TOTAL_IMPRESSION_USER")
            
            @schemas.classproperty
            def TOTAL_LEAD(cls):
                return cls("TOTAL_LEAD")
            
            @schemas.classproperty
            def TOTAL_OFFLINE_CHECKOUT(cls):
                return cls("TOTAL_OFFLINE_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_PAGE_VISIT(cls):
                return cls("TOTAL_PAGE_VISIT")
            
            @schemas.classproperty
            def TOTAL_REPIN_RATE(cls):
                return cls("TOTAL_REPIN_RATE")
            
            @schemas.classproperty
            def TOTAL_SIGNUP(cls):
                return cls("TOTAL_SIGNUP")
            
            @schemas.classproperty
            def TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_VIDEO_3SEC_VIEWS(cls):
                return cls("TOTAL_VIDEO_3SEC_VIEWS")
            
            @schemas.classproperty
            def TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND(cls):
                return cls("TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND")
            
            @schemas.classproperty
            def TOTAL_VIDEO_MRC_VIEWS(cls):
                return cls("TOTAL_VIDEO_MRC_VIEWS")
            
            @schemas.classproperty
            def TOTAL_VIDEO_P0_COMBINED(cls):
                return cls("TOTAL_VIDEO_P0_COMBINED")
            
            @schemas.classproperty
            def TOTAL_VIDEO_P100_COMPLETE(cls):
                return cls("TOTAL_VIDEO_P100_COMPLETE")
            
            @schemas.classproperty
            def TOTAL_VIDEO_P25_COMBINED(cls):
                return cls("TOTAL_VIDEO_P25_COMBINED")
            
            @schemas.classproperty
            def TOTAL_VIDEO_P50_COMBINED(cls):
                return cls("TOTAL_VIDEO_P50_COMBINED")
            
            @schemas.classproperty
            def TOTAL_VIDEO_P75_COMBINED(cls):
                return cls("TOTAL_VIDEO_P75_COMBINED")
            
            @schemas.classproperty
            def TOTAL_VIDEO_P95_COMBINED(cls):
                return cls("TOTAL_VIDEO_P95_COMBINED")
            
            @schemas.classproperty
            def TOTAL_VIEW_ADD_TO_CART(cls):
                return cls("TOTAL_VIEW_ADD_TO_CART")
            
            @schemas.classproperty
            def TOTAL_VIEW_CHECKOUT(cls):
                return cls("TOTAL_VIEW_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_VIEW_LEAD(cls):
                return cls("TOTAL_VIEW_LEAD")
            
            @schemas.classproperty
            def TOTAL_VIEW_SIGNUP(cls):
                return cls("TOTAL_VIEW_SIGNUP")
            
            @schemas.classproperty
            def TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_WEB_CHECKOUT(cls):
                return cls("TOTAL_WEB_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_WEB_CLICK_CHECKOUT(cls):
                return cls("TOTAL_WEB_CLICK_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_WEB_ENGAGEMENT_CHECKOUT(cls):
                return cls("TOTAL_WEB_ENGAGEMENT_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def TOTAL_WEB_SESSIONS(cls):
                return cls("TOTAL_WEB_SESSIONS")
            
            @schemas.classproperty
            def TOTAL_WEB_VIEW_CHECKOUT(cls):
                return cls("TOTAL_WEB_VIEW_CHECKOUT")
            
            @schemas.classproperty
            def TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR(cls):
                return cls("TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR")
            
            @schemas.classproperty
            def VIDEO_3SEC_VIEWS_2(cls):
                return cls("VIDEO_3SEC_VIEWS_2")
            
            @schemas.classproperty
            def VIDEO_LENGTH(cls):
                return cls("VIDEO_LENGTH")
            
            @schemas.classproperty
            def VIDEO_MRC_VIEWS_2(cls):
                return cls("VIDEO_MRC_VIEWS_2")
            
            @schemas.classproperty
            def VIDEO_P0_COMBINED_2(cls):
                return cls("VIDEO_P0_COMBINED_2")
            
            @schemas.classproperty
            def VIDEO_P100_COMPLETE_2(cls):
                return cls("VIDEO_P100_COMPLETE_2")
            
            @schemas.classproperty
            def VIDEO_P25_COMBINED_2(cls):
                return cls("VIDEO_P25_COMBINED_2")
            
            @schemas.classproperty
            def VIDEO_P50_COMBINED_2(cls):
                return cls("VIDEO_P50_COMBINED_2")
            
            @schemas.classproperty
            def VIDEO_P75_COMBINED_2(cls):
                return cls("VIDEO_P75_COMBINED_2")
            
            @schemas.classproperty
            def VIDEO_P95_COMBINED_2(cls):
                return cls("VIDEO_P95_COMBINED_2")
            
            @schemas.classproperty
            def WEB_CHECKOUT_COST_PER_ACTION(cls):
                return cls("WEB_CHECKOUT_COST_PER_ACTION")
            
            @schemas.classproperty
            def WEB_CHECKOUT_ROAS(cls):
                return cls("WEB_CHECKOUT_ROAS")
            
            @schemas.classproperty
            def WEB_SESSIONS_1(cls):
                return cls("WEB_SESSIONS_1")
            
            @schemas.classproperty
            def WEB_SESSIONS_2(cls):
                return cls("WEB_SESSIONS_2")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ColumnsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
GranularitySchema = Granularity


class ClickWindowDaysSchema(
    schemas.EnumBase,
    schemas.IntSchema
):


    class MetaOapg:
        enum_value_to_name = {
            1: "POSITIVE_1",
            7: "POSITIVE_7",
            30: "POSITIVE_30",
            60: "POSITIVE_60",
        }
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_7(cls):
        return cls(7)
    
    @schemas.classproperty
    def POSITIVE_30(cls):
        return cls(30)
    
    @schemas.classproperty
    def POSITIVE_60(cls):
        return cls(60)


class EngagementWindowDaysSchema(
    schemas.EnumBase,
    schemas.IntSchema
):


    class MetaOapg:
        enum_value_to_name = {
            1: "POSITIVE_1",
            7: "POSITIVE_7",
            30: "POSITIVE_30",
            60: "POSITIVE_60",
        }
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_7(cls):
        return cls(7)
    
    @schemas.classproperty
    def POSITIVE_30(cls):
        return cls(30)
    
    @schemas.classproperty
    def POSITIVE_60(cls):
        return cls(60)


class ViewWindowDaysSchema(
    schemas.EnumBase,
    schemas.IntSchema
):


    class MetaOapg:
        enum_value_to_name = {
            1: "POSITIVE_1",
            7: "POSITIVE_7",
            30: "POSITIVE_30",
            60: "POSITIVE_60",
        }
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_7(cls):
        return cls(7)
    
    @schemas.classproperty
    def POSITIVE_30(cls):
        return cls(30)
    
    @schemas.classproperty
    def POSITIVE_60(cls):
        return cls(60)


class ConversionReportTimeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "TIME_OF_AD_ACTION": "AD_ACTION",
            "TIME_OF_CONVERSION": "CONVERSION",
        }
    
    @schemas.classproperty
    def AD_ACTION(cls):
        return cls("TIME_OF_AD_ACTION")
    
    @schemas.classproperty
    def CONVERSION(cls):
        return cls("TIME_OF_CONVERSION")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'start_date': typing.Union[StartDateSchema, str, date, ],
        'end_date': typing.Union[EndDateSchema, str, date, ],
        'product_group_ids': typing.Union[ProductGroupIdsSchema, list, tuple, ],
        'columns': typing.Union[ColumnsSchema, list, tuple, ],
        'granularity': typing.Union[GranularitySchema, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'click_window_days': typing.Union[ClickWindowDaysSchema, decimal.Decimal, int, ],
        'engagement_window_days': typing.Union[EngagementWindowDaysSchema, decimal.Decimal, int, ],
        'view_window_days': typing.Union[ViewWindowDaysSchema, decimal.Decimal, int, ],
        'conversion_report_time': typing.Union[ConversionReportTimeSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_start_date = api_client.QueryParameter(
    name="start_date",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    required=True,
    explode=True,
)
request_query_end_date = api_client.QueryParameter(
    name="end_date",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateSchema,
    required=True,
    explode=True,
)
request_query_product_group_ids = api_client.QueryParameter(
    name="product_group_ids",
    style=api_client.ParameterStyle.FORM,
    schema=ProductGroupIdsSchema,
    required=True,
    explode=True,
)
request_query_columns = api_client.QueryParameter(
    name="columns",
    style=api_client.ParameterStyle.FORM,
    schema=ColumnsSchema,
    required=True,
)
request_query_granularity = api_client.QueryParameter(
    name="granularity",
    style=api_client.ParameterStyle.FORM,
    schema=GranularitySchema,
    required=True,
    explode=True,
)
request_query_click_window_days = api_client.QueryParameter(
    name="click_window_days",
    style=api_client.ParameterStyle.FORM,
    schema=ClickWindowDaysSchema,
    explode=True,
)
request_query_engagement_window_days = api_client.QueryParameter(
    name="engagement_window_days",
    style=api_client.ParameterStyle.FORM,
    schema=EngagementWindowDaysSchema,
    explode=True,
)
request_query_view_window_days = api_client.QueryParameter(
    name="view_window_days",
    style=api_client.ParameterStyle.FORM,
    schema=ViewWindowDaysSchema,
    explode=True,
)
request_query_conversion_report_time = api_client.QueryParameter(
    name="conversion_report_time",
    style=api_client.ParameterStyle.FORM,
    schema=ConversionReportTimeSchema,
    explode=True,
)
# Path params


class AdAccountIdSchema(
    schemas.StrSchema
):


    class MetaOapg:
        max_length = 18
        regex=[{
            'pattern': r'^\d+$',  # noqa: E501
        }]
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'ad_account_id': typing.Union[AdAccountIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_ad_account_id = api_client.PathParameter(
    name="ad_account_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AdAccountIdSchema,
    required=True,
)
_auth = [
    'pinterest_oauth2',
]
SchemaFor200ResponseBodyApplicationJson = ProductGroupAnalyticsResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _product_groups_analytics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _product_groups_analytics_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _product_groups_analytics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _product_groups_analytics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get product group analytics
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_ad_account_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_start_date,
            request_query_end_date,
            request_query_product_group_ids,
            request_query_columns,
            request_query_granularity,
            request_query_click_window_days,
            request_query_engagement_window_days,
            request_query_view_window_days,
            request_query_conversion_report_time,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class ProductGroupsAnalytics(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def product_groups_analytics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def product_groups_analytics(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def product_groups_analytics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def product_groups_analytics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._product_groups_analytics_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._product_groups_analytics_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


