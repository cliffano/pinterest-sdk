# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AdGroupCommon(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class status(
                schemas.ComposedBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            EntityStatus,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class budget_in_micro_currency(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'budget_in_micro_currency':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bid_in_micro_currency(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bid_in_micro_currency':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bid_strategy_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUTOMATIC_BID(cls):
                    return cls("AUTOMATIC_BID")
                
                @schemas.classproperty
                def MAX_BID(cls):
                    return cls("MAX_BID")
                
                @schemas.classproperty
                def TARGET_AVG(cls):
                    return cls("TARGET_AVG")
        
            @staticmethod
            def budget_type() -> typing.Type['BudgetType']:
                return BudgetType
            
            
            class start_time(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'start_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class end_time(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class targeting_spec(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class additional_properties(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'additional_properties':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, list, tuple, ],
                ) -> 'targeting_spec':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            lifetime_frequency_cap = schemas.IntSchema
            
            
            class tracking_urls(
                schemas.ComposedBase,
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TrackingUrls,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tracking_urls':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class auto_targeting_enabled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_targeting_enabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class placement_group(
                schemas.ComposedBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PlacementGroupType,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'placement_group':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pacing_delivery_type(
                schemas.ComposedBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PacingDeliveryType,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pacing_delivery_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class campaign_id(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def billable_event() -> typing.Type['ActionType']:
                return ActionType
            __annotations__ = {
                "name": name,
                "status": status,
                "budget_in_micro_currency": budget_in_micro_currency,
                "bid_in_micro_currency": bid_in_micro_currency,
                "bid_strategy_type": bid_strategy_type,
                "budget_type": budget_type,
                "start_time": start_time,
                "end_time": end_time,
                "targeting_spec": targeting_spec,
                "lifetime_frequency_cap": lifetime_frequency_cap,
                "tracking_urls": tracking_urls,
                "auto_targeting_enabled": auto_targeting_enabled,
                "placement_group": placement_group,
                "pacing_delivery_type": pacing_delivery_type,
                "campaign_id": campaign_id,
                "billable_event": billable_event,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget_in_micro_currency"]) -> MetaOapg.properties.budget_in_micro_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bid_in_micro_currency"]) -> MetaOapg.properties.bid_in_micro_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bid_strategy_type"]) -> MetaOapg.properties.bid_strategy_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget_type"]) -> 'BudgetType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targeting_spec"]) -> MetaOapg.properties.targeting_spec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lifetime_frequency_cap"]) -> MetaOapg.properties.lifetime_frequency_cap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_urls"]) -> MetaOapg.properties.tracking_urls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_targeting_enabled"]) -> MetaOapg.properties.auto_targeting_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placement_group"]) -> MetaOapg.properties.placement_group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pacing_delivery_type"]) -> MetaOapg.properties.pacing_delivery_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["campaign_id"]) -> MetaOapg.properties.campaign_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billable_event"]) -> 'ActionType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "status", "budget_in_micro_currency", "bid_in_micro_currency", "bid_strategy_type", "budget_type", "start_time", "end_time", "targeting_spec", "lifetime_frequency_cap", "tracking_urls", "auto_targeting_enabled", "placement_group", "pacing_delivery_type", "campaign_id", "billable_event", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget_in_micro_currency"]) -> typing.Union[MetaOapg.properties.budget_in_micro_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bid_in_micro_currency"]) -> typing.Union[MetaOapg.properties.bid_in_micro_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bid_strategy_type"]) -> typing.Union[MetaOapg.properties.bid_strategy_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget_type"]) -> typing.Union['BudgetType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targeting_spec"]) -> typing.Union[MetaOapg.properties.targeting_spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lifetime_frequency_cap"]) -> typing.Union[MetaOapg.properties.lifetime_frequency_cap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_urls"]) -> typing.Union[MetaOapg.properties.tracking_urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_targeting_enabled"]) -> typing.Union[MetaOapg.properties.auto_targeting_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placement_group"]) -> typing.Union[MetaOapg.properties.placement_group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pacing_delivery_type"]) -> typing.Union[MetaOapg.properties.pacing_delivery_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["campaign_id"]) -> typing.Union[MetaOapg.properties.campaign_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billable_event"]) -> typing.Union['ActionType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "status", "budget_in_micro_currency", "bid_in_micro_currency", "bid_strategy_type", "budget_type", "start_time", "end_time", "targeting_spec", "lifetime_frequency_cap", "tracking_urls", "auto_targeting_enabled", "placement_group", "pacing_delivery_type", "campaign_id", "billable_event", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        budget_in_micro_currency: typing.Union[MetaOapg.properties.budget_in_micro_currency, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bid_in_micro_currency: typing.Union[MetaOapg.properties.bid_in_micro_currency, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bid_strategy_type: typing.Union[MetaOapg.properties.bid_strategy_type, str, schemas.Unset] = schemas.unset,
        budget_type: typing.Union['BudgetType', schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        targeting_spec: typing.Union[MetaOapg.properties.targeting_spec, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        lifetime_frequency_cap: typing.Union[MetaOapg.properties.lifetime_frequency_cap, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tracking_urls: typing.Union[MetaOapg.properties.tracking_urls, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        auto_targeting_enabled: typing.Union[MetaOapg.properties.auto_targeting_enabled, None, bool, schemas.Unset] = schemas.unset,
        placement_group: typing.Union[MetaOapg.properties.placement_group, str, schemas.Unset] = schemas.unset,
        pacing_delivery_type: typing.Union[MetaOapg.properties.pacing_delivery_type, str, schemas.Unset] = schemas.unset,
        campaign_id: typing.Union[MetaOapg.properties.campaign_id, str, schemas.Unset] = schemas.unset,
        billable_event: typing.Union['ActionType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdGroupCommon':
        return super().__new__(
            cls,
            *args,
            name=name,
            status=status,
            budget_in_micro_currency=budget_in_micro_currency,
            bid_in_micro_currency=bid_in_micro_currency,
            bid_strategy_type=bid_strategy_type,
            budget_type=budget_type,
            start_time=start_time,
            end_time=end_time,
            targeting_spec=targeting_spec,
            lifetime_frequency_cap=lifetime_frequency_cap,
            tracking_urls=tracking_urls,
            auto_targeting_enabled=auto_targeting_enabled,
            placement_group=placement_group,
            pacing_delivery_type=pacing_delivery_type,
            campaign_id=campaign_id,
            billable_event=billable_event,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.action_type import ActionType
from pinterestsdk.model.budget_type import BudgetType
from pinterestsdk.model.entity_status import EntityStatus
from pinterestsdk.model.pacing_delivery_type import PacingDeliveryType
from pinterestsdk.model.placement_group_type import PlacementGroupType
from pinterestsdk.model.tracking_urls import TrackingUrls
