# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class MediaUpload(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Media upload that has been registered but not uploaded/processed yet.
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    media_id = schemas.StrSchema
                    
                    
                    class media_type(
                        schemas.ComposedBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    MediaUploadType,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'media_type':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    upload_url = schemas.StrSchema
                    
                    
                    class upload_parameters(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                x_amz_date = schemas.StrSchema
                                x_amz_signature = schemas.StrSchema
                                x_amz_security_token = schemas.StrSchema
                                x_amz_algorithm = schemas.StrSchema
                                key = schemas.StrSchema
                                policy = schemas.StrSchema
                                x_amz_credential = schemas.StrSchema
                                content_type = schemas.StrSchema
                                __annotations__ = {
                                    "x-amz-date": x_amz_date,
                                    "x-amz-signature": x_amz_signature,
                                    "x-amz-security-token": x_amz_security_token,
                                    "x-amz-algorithm": x_amz_algorithm,
                                    "key": key,
                                    "policy": policy,
                                    "x-amz-credential": x_amz_credential,
                                    "Content-Type": content_type,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["x-amz-date"]) -> MetaOapg.properties.x_amz_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["x-amz-signature"]) -> MetaOapg.properties.x_amz_signature: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["x-amz-security-token"]) -> MetaOapg.properties.x_amz_security_token: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["x-amz-algorithm"]) -> MetaOapg.properties.x_amz_algorithm: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["policy"]) -> MetaOapg.properties.policy: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["x-amz-credential"]) -> MetaOapg.properties.x_amz_credential: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Content-Type"]) -> MetaOapg.properties.content_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["x-amz-date", "x-amz-signature", "x-amz-security-token", "x-amz-algorithm", "key", "policy", "x-amz-credential", "Content-Type", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["x-amz-date"]) -> typing.Union[MetaOapg.properties.x_amz_date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["x-amz-signature"]) -> typing.Union[MetaOapg.properties.x_amz_signature, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["x-amz-security-token"]) -> typing.Union[MetaOapg.properties.x_amz_security_token, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["x-amz-algorithm"]) -> typing.Union[MetaOapg.properties.x_amz_algorithm, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["policy"]) -> typing.Union[MetaOapg.properties.policy, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["x-amz-credential"]) -> typing.Union[MetaOapg.properties.x_amz_credential, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Content-Type"]) -> typing.Union[MetaOapg.properties.content_type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["x-amz-date", "x-amz-signature", "x-amz-security-token", "x-amz-algorithm", "key", "policy", "x-amz-credential", "Content-Type", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
                            policy: typing.Union[MetaOapg.properties.policy, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'upload_parameters':
                            return super().__new__(
                                cls,
                                *args,
                                key=key,
                                policy=policy,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "media_id": media_id,
                        "media_type": media_type,
                        "upload_url": upload_url,
                        "upload_parameters": upload_parameters,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["media_id"]) -> MetaOapg.properties.media_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["upload_url"]) -> MetaOapg.properties.upload_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["upload_parameters"]) -> MetaOapg.properties.upload_parameters: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["media_id", "media_type", "upload_url", "upload_parameters", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["media_id"]) -> typing.Union[MetaOapg.properties.media_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> typing.Union[MetaOapg.properties.media_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["upload_url"]) -> typing.Union[MetaOapg.properties.upload_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["upload_parameters"]) -> typing.Union[MetaOapg.properties.upload_parameters, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["media_id", "media_type", "upload_url", "upload_parameters", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                media_id: typing.Union[MetaOapg.properties.media_id, str, schemas.Unset] = schemas.unset,
                media_type: typing.Union[MetaOapg.properties.media_type, str, schemas.Unset] = schemas.unset,
                upload_url: typing.Union[MetaOapg.properties.upload_url, str, schemas.Unset] = schemas.unset,
                upload_parameters: typing.Union[MetaOapg.properties.upload_parameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    media_id=media_id,
                    media_type=media_type,
                    upload_url=upload_url,
                    upload_parameters=upload_parameters,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MediaUpload':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.media_upload_type import MediaUploadType
