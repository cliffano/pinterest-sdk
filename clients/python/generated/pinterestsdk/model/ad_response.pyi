# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AdResponse(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class ad_account_id(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class campaign_id(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class collection_items_destination_url_template(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'collection_items_destination_url_template':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    created_time = schemas.IntSchema
                    
                    
                    class id(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class rejected_reasons(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                                
                                @schemas.classproperty
                                def HASHTAGS(cls):
                                    return cls("HASHTAGS")
                                
                                @schemas.classproperty
                                def PROMOTIONS_AND_PRICES(cls):
                                    return cls("PROMOTIONS_AND_PRICES")
                                
                                @schemas.classproperty
                                def TARGETING(cls):
                                    return cls("TARGETING")
                                
                                @schemas.classproperty
                                def LANDING_PAGE(cls):
                                    return cls("LANDING_PAGE")
                                
                                @schemas.classproperty
                                def CAPS_AND_SYMBOLS(cls):
                                    return cls("CAPS_AND_SYMBOLS")
                                
                                @schemas.classproperty
                                def SHOCKING(cls):
                                    return cls("SHOCKING")
                                
                                @schemas.classproperty
                                def WEIGHT_LOSS(cls):
                                    return cls("WEIGHT_LOSS")
                                
                                @schemas.classproperty
                                def PROHIBITED_PRODUCT(cls):
                                    return cls("PROHIBITED_PRODUCT")
                                
                                @schemas.classproperty
                                def AUTHENTICITY(cls):
                                    return cls("AUTHENTICITY")
                                
                                @schemas.classproperty
                                def NUDITY(cls):
                                    return cls("NUDITY")
                                
                                @schemas.classproperty
                                def CONFUSING_DESIGN(cls):
                                    return cls("CONFUSING_DESIGN")
                                
                                @schemas.classproperty
                                def URGENCY(cls):
                                    return cls("URGENCY")
                                
                                @schemas.classproperty
                                def RATINGS(cls):
                                    return cls("RATINGS")
                                
                                @schemas.classproperty
                                def APP(cls):
                                    return cls("APP")
                                
                                @schemas.classproperty
                                def ALCOHOL(cls):
                                    return cls("ALCOHOL")
                                
                                @schemas.classproperty
                                def CONTESTS(cls):
                                    return cls("CONTESTS")
                                
                                @schemas.classproperty
                                def POLITICAL(cls):
                                    return cls("POLITICAL")
                                
                                @schemas.classproperty
                                def OTHER(cls):
                                    return cls("OTHER")
                                
                                @schemas.classproperty
                                def IMAGE(cls):
                                    return cls("IMAGE")
                                
                                @schemas.classproperty
                                def NAR(cls):
                                    return cls("NAR")
                                
                                @schemas.classproperty
                                def INCONSISTENT(cls):
                                    return cls("INCONSISTENT")
                                
                                @schemas.classproperty
                                def CLICKBAIT(cls):
                                    return cls("CLICKBAIT")
                                
                                @schemas.classproperty
                                def NO_DESCRIPTION(cls):
                                    return cls("NO_DESCRIPTION")
                                
                                @schemas.classproperty
                                def LOW_QUALITY(cls):
                                    return cls("LOW_QUALITY")
                                
                                @schemas.classproperty
                                def EXAGGERATED_CLAIMS(cls):
                                    return cls("EXAGGERATED_CLAIMS")
                                
                                @schemas.classproperty
                                def PINTEREST_BRAND(cls):
                                    return cls("PINTEREST_BRAND")
                                
                                @schemas.classproperty
                                def ALCOHOL_NO_SALE(cls):
                                    return cls("ALCOHOL_NO_SALE")
                                
                                @schemas.classproperty
                                def LANDING_PAGE_SPEED(cls):
                                    return cls("LANDING_PAGE_SPEED")
                                
                                @schemas.classproperty
                                def LANDING_PAGE_HARDWALL(cls):
                                    return cls("LANDING_PAGE_HARDWALL")
                                
                                @schemas.classproperty
                                def LANDING_PAGE_BROKEN(cls):
                                    return cls("LANDING_PAGE_BROKEN")
                                
                                @schemas.classproperty
                                def LANDING_PAGE_QUALITY(cls):
                                    return cls("LANDING_PAGE_QUALITY")
                                
                                @schemas.classproperty
                                def OUT_OF_STOCK(cls):
                                    return cls("OUT_OF_STOCK")
                                
                                @schemas.classproperty
                                def IMAGE_LOW_QUALITY(cls):
                                    return cls("IMAGE_LOW_QUALITY")
                                
                                @schemas.classproperty
                                def IMAGE_BUSY(cls):
                                    return cls("IMAGE_BUSY")
                                
                                @schemas.classproperty
                                def IMAGE_POORLY_EDITED(cls):
                                    return cls("IMAGE_POORLY_EDITED")
                                
                                @schemas.classproperty
                                def IMAGE_BEFORE_AFTER(cls):
                                    return cls("IMAGE_BEFORE_AFTER")
                                
                                @schemas.classproperty
                                def UGC(cls):
                                    return cls("UGC")
                                
                                @schemas.classproperty
                                def FAKE_BUTTONS(cls):
                                    return cls("FAKE_BUTTONS")
                                
                                @schemas.classproperty
                                def WEAPONS(cls):
                                    return cls("WEAPONS")
                                
                                @schemas.classproperty
                                def SENSITIVE(cls):
                                    return cls("SENSITIVE")
                                
                                @schemas.classproperty
                                def UNACCEPTABLE_BUSINESS(cls):
                                    return cls("UNACCEPTABLE_BUSINESS")
                                
                                @schemas.classproperty
                                def SUSPICIOUS_CLAIMS(cls):
                                    return cls("SUSPICIOUS_CLAIMS")
                                
                                @schemas.classproperty
                                def PHARMA(cls):
                                    return cls("PHARMA")
                                
                                @schemas.classproperty
                                def SUSPICIOUS_SUPPLEMENTS(cls):
                                    return cls("SUSPICIOUS_SUPPLEMENTS")
                                
                                @schemas.classproperty
                                def ILLEGAL_RECREATIONAL_DRUG(cls):
                                    return cls("ILLEGAL_RECREATIONAL_DRUG")
                                
                                @schemas.classproperty
                                def LOW_QUALITY_LANDING_PAGE(cls):
                                    return cls("LOW_QUALITY_LANDING_PAGE")
                                
                                @schemas.classproperty
                                def RESTRICTED_HEALTHCARE(cls):
                                    return cls("RESTRICTED_HEALTHCARE")
                                
                                @schemas.classproperty
                                def INCONSISTENT_LANG_FR(cls):
                                    return cls("INCONSISTENT_LANG_FR")
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'rejected_reasons':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class rejection_labels(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'rejection_labels':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class review_status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def OTHER(cls):
                            return cls("OTHER")
                        
                        @schemas.classproperty
                        def PENDING(cls):
                            return cls("PENDING")
                        
                        @schemas.classproperty
                        def REJECTED(cls):
                            return cls("REJECTED")
                        
                        @schemas.classproperty
                        def APPROVED(cls):
                            return cls("APPROVED")
                    type = schemas.StrSchema
                    updated_time = schemas.IntSchema
                    
                    
                    class summary_status(
                        schemas.ComposedBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    PinPromotionSummaryStatus,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'summary_status':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "ad_account_id": ad_account_id,
                        "campaign_id": campaign_id,
                        "collection_items_destination_url_template": collection_items_destination_url_template,
                        "created_time": created_time,
                        "id": id,
                        "rejected_reasons": rejected_reasons,
                        "rejection_labels": rejection_labels,
                        "review_status": review_status,
                        "type": type,
                        "updated_time": updated_time,
                        "summary_status": summary_status,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ad_account_id"]) -> MetaOapg.properties.ad_account_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["campaign_id"]) -> MetaOapg.properties.campaign_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["collection_items_destination_url_template"]) -> MetaOapg.properties.collection_items_destination_url_template: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rejected_reasons"]) -> MetaOapg.properties.rejected_reasons: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rejection_labels"]) -> MetaOapg.properties.rejection_labels: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["review_status"]) -> MetaOapg.properties.review_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["summary_status"]) -> MetaOapg.properties.summary_status: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ad_account_id", "campaign_id", "collection_items_destination_url_template", "created_time", "id", "rejected_reasons", "rejection_labels", "review_status", "type", "updated_time", "summary_status", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ad_account_id"]) -> typing.Union[MetaOapg.properties.ad_account_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["campaign_id"]) -> typing.Union[MetaOapg.properties.campaign_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["collection_items_destination_url_template"]) -> typing.Union[MetaOapg.properties.collection_items_destination_url_template, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> typing.Union[MetaOapg.properties.created_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rejected_reasons"]) -> typing.Union[MetaOapg.properties.rejected_reasons, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rejection_labels"]) -> typing.Union[MetaOapg.properties.rejection_labels, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["review_status"]) -> typing.Union[MetaOapg.properties.review_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> typing.Union[MetaOapg.properties.updated_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["summary_status"]) -> typing.Union[MetaOapg.properties.summary_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ad_account_id", "campaign_id", "collection_items_destination_url_template", "created_time", "id", "rejected_reasons", "rejection_labels", "review_status", "type", "updated_time", "summary_status", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                ad_account_id: typing.Union[MetaOapg.properties.ad_account_id, str, schemas.Unset] = schemas.unset,
                campaign_id: typing.Union[MetaOapg.properties.campaign_id, str, schemas.Unset] = schemas.unset,
                collection_items_destination_url_template: typing.Union[MetaOapg.properties.collection_items_destination_url_template, None, str, schemas.Unset] = schemas.unset,
                created_time: typing.Union[MetaOapg.properties.created_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                rejected_reasons: typing.Union[MetaOapg.properties.rejected_reasons, list, tuple, schemas.Unset] = schemas.unset,
                rejection_labels: typing.Union[MetaOapg.properties.rejection_labels, list, tuple, schemas.Unset] = schemas.unset,
                review_status: typing.Union[MetaOapg.properties.review_status, str, schemas.Unset] = schemas.unset,
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                updated_time: typing.Union[MetaOapg.properties.updated_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                summary_status: typing.Union[MetaOapg.properties.summary_status, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    ad_account_id=ad_account_id,
                    campaign_id=campaign_id,
                    collection_items_destination_url_template=collection_items_destination_url_template,
                    created_time=created_time,
                    id=id,
                    rejected_reasons=rejected_reasons,
                    rejection_labels=rejection_labels,
                    review_status=review_status,
                    type=type,
                    updated_time=updated_time,
                    summary_status=summary_status,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AdCommon,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.ad_common import AdCommon
from pinterestsdk.model.pin_promotion_summary_status import PinPromotionSummaryStatus
