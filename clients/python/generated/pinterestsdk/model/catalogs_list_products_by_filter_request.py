# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsListProductsByFilterRequest(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request object to list products for a given product group filter.
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "filters",
                    "feed_id",
                }
                
                class properties:
                    
                    
                    class feed_id(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            regex=[{
                                'pattern': r'^\d+$',  # noqa: E501
                            }]
                
                    @staticmethod
                    def filters() -> typing.Type['CatalogsProductGroupFilters']:
                        return CatalogsProductGroupFilters
                    __annotations__ = {
                        "feed_id": feed_id,
                        "filters": filters,
                    }
                additional_properties = schemas.NotAnyTypeSchema
            
            filters: 'CatalogsProductGroupFilters'
            feed_id: MetaOapg.properties.feed_id
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'CatalogsProductGroupFilters': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feed_id"]) -> MetaOapg.properties.feed_id: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["filters"], typing_extensions.Literal["feed_id"], ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> 'CatalogsProductGroupFilters': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feed_id"]) -> MetaOapg.properties.feed_id: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filters"], typing_extensions.Literal["feed_id"], ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                filters: 'CatalogsProductGroupFilters',
                feed_id: typing.Union[MetaOapg.properties.feed_id, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    filters=filters,
                    feed_id=feed_id,
                    _configuration=_configuration,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsListProductsByFilterRequest':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.catalogs_product_group_filters import CatalogsProductGroupFilters
