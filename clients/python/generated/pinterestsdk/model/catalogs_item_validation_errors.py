# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsItemValidationErrors(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def ADULT_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def ADWORDS_FORMAT_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def AVAILABILITY_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def BLOCKLISTED_IMAGE_SIGNATURE() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def DESCRIPTION_MISSING() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def IMAGE_LINK_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def IMAGE_LINK_LENGTH_TOO_LONG() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def IMAGE_LINK_MISSING() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def INVALID_DOMAIN() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def ITEMID_MISSING() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def LINK_FORMAT_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def LINK_LENGTH_TOO_LONG() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def LIST_PRICE_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def PARSE_LINE_ERROR() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def PINJOIN_CONTENT_UNSAFE() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def PRICE_CANNOT_BE_DETERMINED() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def PRICE_MISSING() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def PRODUCT_LINK_MISSING() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def PRODUCT_PRICE_INVALID() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
        
            @staticmethod
            def TITLE_MISSING() -> typing.Type['CatalogsItemValidationDetails']:
                return CatalogsItemValidationDetails
            __annotations__ = {
                "ADULT_INVALID": ADULT_INVALID,
                "ADWORDS_FORMAT_INVALID": ADWORDS_FORMAT_INVALID,
                "AVAILABILITY_INVALID": AVAILABILITY_INVALID,
                "BLOCKLISTED_IMAGE_SIGNATURE": BLOCKLISTED_IMAGE_SIGNATURE,
                "DESCRIPTION_MISSING": DESCRIPTION_MISSING,
                "IMAGE_LINK_INVALID": IMAGE_LINK_INVALID,
                "IMAGE_LINK_LENGTH_TOO_LONG": IMAGE_LINK_LENGTH_TOO_LONG,
                "IMAGE_LINK_MISSING": IMAGE_LINK_MISSING,
                "INVALID_DOMAIN": INVALID_DOMAIN,
                "ITEMID_MISSING": ITEMID_MISSING,
                "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE": ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE,
                "LINK_FORMAT_INVALID": LINK_FORMAT_INVALID,
                "LINK_LENGTH_TOO_LONG": LINK_LENGTH_TOO_LONG,
                "LIST_PRICE_INVALID": LIST_PRICE_INVALID,
                "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED": MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED,
                "PARSE_LINE_ERROR": PARSE_LINE_ERROR,
                "PINJOIN_CONTENT_UNSAFE": PINJOIN_CONTENT_UNSAFE,
                "PRICE_CANNOT_BE_DETERMINED": PRICE_CANNOT_BE_DETERMINED,
                "PRICE_MISSING": PRICE_MISSING,
                "PRODUCT_LINK_MISSING": PRODUCT_LINK_MISSING,
                "PRODUCT_PRICE_INVALID": PRODUCT_PRICE_INVALID,
                "TITLE_MISSING": TITLE_MISSING,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ADULT_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ADWORDS_FORMAT_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AVAILABILITY_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BLOCKLISTED_IMAGE_SIGNATURE"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DESCRIPTION_MISSING"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IMAGE_LINK_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IMAGE_LINK_LENGTH_TOO_LONG"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IMAGE_LINK_MISSING"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["INVALID_DOMAIN"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ITEMID_MISSING"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LINK_FORMAT_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LINK_LENGTH_TOO_LONG"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LIST_PRICE_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PARSE_LINE_ERROR"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PINJOIN_CONTENT_UNSAFE"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PRICE_CANNOT_BE_DETERMINED"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PRICE_MISSING"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PRODUCT_LINK_MISSING"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PRODUCT_PRICE_INVALID"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TITLE_MISSING"]) -> 'CatalogsItemValidationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ADULT_INVALID", "ADWORDS_FORMAT_INVALID", "AVAILABILITY_INVALID", "BLOCKLISTED_IMAGE_SIGNATURE", "DESCRIPTION_MISSING", "IMAGE_LINK_INVALID", "IMAGE_LINK_LENGTH_TOO_LONG", "IMAGE_LINK_MISSING", "INVALID_DOMAIN", "ITEMID_MISSING", "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", "LINK_FORMAT_INVALID", "LINK_LENGTH_TOO_LONG", "LIST_PRICE_INVALID", "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", "PARSE_LINE_ERROR", "PINJOIN_CONTENT_UNSAFE", "PRICE_CANNOT_BE_DETERMINED", "PRICE_MISSING", "PRODUCT_LINK_MISSING", "PRODUCT_PRICE_INVALID", "TITLE_MISSING", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ADULT_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ADWORDS_FORMAT_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AVAILABILITY_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BLOCKLISTED_IMAGE_SIGNATURE"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DESCRIPTION_MISSING"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IMAGE_LINK_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IMAGE_LINK_LENGTH_TOO_LONG"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IMAGE_LINK_MISSING"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["INVALID_DOMAIN"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ITEMID_MISSING"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LINK_FORMAT_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LINK_LENGTH_TOO_LONG"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LIST_PRICE_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PARSE_LINE_ERROR"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PINJOIN_CONTENT_UNSAFE"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PRICE_CANNOT_BE_DETERMINED"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PRICE_MISSING"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PRODUCT_LINK_MISSING"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PRODUCT_PRICE_INVALID"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TITLE_MISSING"]) -> typing.Union['CatalogsItemValidationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ADULT_INVALID", "ADWORDS_FORMAT_INVALID", "AVAILABILITY_INVALID", "BLOCKLISTED_IMAGE_SIGNATURE", "DESCRIPTION_MISSING", "IMAGE_LINK_INVALID", "IMAGE_LINK_LENGTH_TOO_LONG", "IMAGE_LINK_MISSING", "INVALID_DOMAIN", "ITEMID_MISSING", "ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE", "LINK_FORMAT_INVALID", "LINK_LENGTH_TOO_LONG", "LIST_PRICE_INVALID", "MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED", "PARSE_LINE_ERROR", "PINJOIN_CONTENT_UNSAFE", "PRICE_CANNOT_BE_DETERMINED", "PRICE_MISSING", "PRODUCT_LINK_MISSING", "PRODUCT_PRICE_INVALID", "TITLE_MISSING", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ADULT_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        ADWORDS_FORMAT_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        AVAILABILITY_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        BLOCKLISTED_IMAGE_SIGNATURE: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        DESCRIPTION_MISSING: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        IMAGE_LINK_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        IMAGE_LINK_LENGTH_TOO_LONG: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        IMAGE_LINK_MISSING: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        INVALID_DOMAIN: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        ITEMID_MISSING: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        LINK_FORMAT_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        LINK_LENGTH_TOO_LONG: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        LIST_PRICE_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        PARSE_LINE_ERROR: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        PINJOIN_CONTENT_UNSAFE: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        PRICE_CANNOT_BE_DETERMINED: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        PRICE_MISSING: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        PRODUCT_LINK_MISSING: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        PRODUCT_PRICE_INVALID: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        TITLE_MISSING: typing.Union['CatalogsItemValidationDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsItemValidationErrors':
        return super().__new__(
            cls,
            *args,
            ADULT_INVALID=ADULT_INVALID,
            ADWORDS_FORMAT_INVALID=ADWORDS_FORMAT_INVALID,
            AVAILABILITY_INVALID=AVAILABILITY_INVALID,
            BLOCKLISTED_IMAGE_SIGNATURE=BLOCKLISTED_IMAGE_SIGNATURE,
            DESCRIPTION_MISSING=DESCRIPTION_MISSING,
            IMAGE_LINK_INVALID=IMAGE_LINK_INVALID,
            IMAGE_LINK_LENGTH_TOO_LONG=IMAGE_LINK_LENGTH_TOO_LONG,
            IMAGE_LINK_MISSING=IMAGE_LINK_MISSING,
            INVALID_DOMAIN=INVALID_DOMAIN,
            ITEMID_MISSING=ITEMID_MISSING,
            ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE=ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE,
            LINK_FORMAT_INVALID=LINK_FORMAT_INVALID,
            LINK_LENGTH_TOO_LONG=LINK_LENGTH_TOO_LONG,
            LIST_PRICE_INVALID=LIST_PRICE_INVALID,
            MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED=MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED,
            PARSE_LINE_ERROR=PARSE_LINE_ERROR,
            PINJOIN_CONTENT_UNSAFE=PINJOIN_CONTENT_UNSAFE,
            PRICE_CANNOT_BE_DETERMINED=PRICE_CANNOT_BE_DETERMINED,
            PRICE_MISSING=PRICE_MISSING,
            PRODUCT_LINK_MISSING=PRODUCT_LINK_MISSING,
            PRODUCT_PRICE_INVALID=PRODUCT_PRICE_INVALID,
            TITLE_MISSING=TITLE_MISSING,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.catalogs_item_validation_details import CatalogsItemValidationDetails
