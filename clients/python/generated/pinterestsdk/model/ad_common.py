# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AdCommon(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Creation fields
    """


    class MetaOapg:
        
        class properties:
            
            
            class ad_group_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(AG)?\d+$',  # noqa: E501
                    }]
            
            
            class android_deep_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_deep_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class carousel_android_deep_links(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'carousel_android_deep_links':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class carousel_destination_urls(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'carousel_destination_urls':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class carousel_ios_deep_links(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'carousel_ios_deep_links':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class click_tracking_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'click_tracking_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def creative_type() -> typing.Type['CreativeType']:
                return CreativeType
            
            
            class destination_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'destination_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ios_deep_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_deep_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_pin_deleted = schemas.BoolSchema
            is_removable = schemas.BoolSchema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pin_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }]
        
            @staticmethod
            def status() -> typing.Type['EntityStatus']:
                return EntityStatus
            
            
            class tracking_urls(
                schemas.ComposedBase,
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TrackingUrls,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tracking_urls':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class view_tracking_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'view_tracking_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "ad_group_id": ad_group_id,
                "android_deep_link": android_deep_link,
                "carousel_android_deep_links": carousel_android_deep_links,
                "carousel_destination_urls": carousel_destination_urls,
                "carousel_ios_deep_links": carousel_ios_deep_links,
                "click_tracking_url": click_tracking_url,
                "creative_type": creative_type,
                "destination_url": destination_url,
                "ios_deep_link": ios_deep_link,
                "is_pin_deleted": is_pin_deleted,
                "is_removable": is_removable,
                "name": name,
                "pin_id": pin_id,
                "status": status,
                "tracking_urls": tracking_urls,
                "view_tracking_url": view_tracking_url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_group_id"]) -> MetaOapg.properties.ad_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_deep_link"]) -> MetaOapg.properties.android_deep_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carousel_android_deep_links"]) -> MetaOapg.properties.carousel_android_deep_links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carousel_destination_urls"]) -> MetaOapg.properties.carousel_destination_urls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carousel_ios_deep_links"]) -> MetaOapg.properties.carousel_ios_deep_links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["click_tracking_url"]) -> MetaOapg.properties.click_tracking_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creative_type"]) -> 'CreativeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_url"]) -> MetaOapg.properties.destination_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_deep_link"]) -> MetaOapg.properties.ios_deep_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_pin_deleted"]) -> MetaOapg.properties.is_pin_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_removable"]) -> MetaOapg.properties.is_removable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pin_id"]) -> MetaOapg.properties.pin_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'EntityStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_urls"]) -> MetaOapg.properties.tracking_urls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_tracking_url"]) -> MetaOapg.properties.view_tracking_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ad_group_id", "android_deep_link", "carousel_android_deep_links", "carousel_destination_urls", "carousel_ios_deep_links", "click_tracking_url", "creative_type", "destination_url", "ios_deep_link", "is_pin_deleted", "is_removable", "name", "pin_id", "status", "tracking_urls", "view_tracking_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_group_id"]) -> typing.Union[MetaOapg.properties.ad_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_deep_link"]) -> typing.Union[MetaOapg.properties.android_deep_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carousel_android_deep_links"]) -> typing.Union[MetaOapg.properties.carousel_android_deep_links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carousel_destination_urls"]) -> typing.Union[MetaOapg.properties.carousel_destination_urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carousel_ios_deep_links"]) -> typing.Union[MetaOapg.properties.carousel_ios_deep_links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["click_tracking_url"]) -> typing.Union[MetaOapg.properties.click_tracking_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creative_type"]) -> typing.Union['CreativeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_url"]) -> typing.Union[MetaOapg.properties.destination_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_deep_link"]) -> typing.Union[MetaOapg.properties.ios_deep_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_pin_deleted"]) -> typing.Union[MetaOapg.properties.is_pin_deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_removable"]) -> typing.Union[MetaOapg.properties.is_removable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pin_id"]) -> typing.Union[MetaOapg.properties.pin_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['EntityStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_urls"]) -> typing.Union[MetaOapg.properties.tracking_urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_tracking_url"]) -> typing.Union[MetaOapg.properties.view_tracking_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ad_group_id", "android_deep_link", "carousel_android_deep_links", "carousel_destination_urls", "carousel_ios_deep_links", "click_tracking_url", "creative_type", "destination_url", "ios_deep_link", "is_pin_deleted", "is_removable", "name", "pin_id", "status", "tracking_urls", "view_tracking_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ad_group_id: typing.Union[MetaOapg.properties.ad_group_id, str, schemas.Unset] = schemas.unset,
        android_deep_link: typing.Union[MetaOapg.properties.android_deep_link, None, str, schemas.Unset] = schemas.unset,
        carousel_android_deep_links: typing.Union[MetaOapg.properties.carousel_android_deep_links, list, tuple, None, schemas.Unset] = schemas.unset,
        carousel_destination_urls: typing.Union[MetaOapg.properties.carousel_destination_urls, list, tuple, None, schemas.Unset] = schemas.unset,
        carousel_ios_deep_links: typing.Union[MetaOapg.properties.carousel_ios_deep_links, list, tuple, None, schemas.Unset] = schemas.unset,
        click_tracking_url: typing.Union[MetaOapg.properties.click_tracking_url, None, str, schemas.Unset] = schemas.unset,
        creative_type: typing.Union['CreativeType', schemas.Unset] = schemas.unset,
        destination_url: typing.Union[MetaOapg.properties.destination_url, None, str, schemas.Unset] = schemas.unset,
        ios_deep_link: typing.Union[MetaOapg.properties.ios_deep_link, None, str, schemas.Unset] = schemas.unset,
        is_pin_deleted: typing.Union[MetaOapg.properties.is_pin_deleted, bool, schemas.Unset] = schemas.unset,
        is_removable: typing.Union[MetaOapg.properties.is_removable, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        pin_id: typing.Union[MetaOapg.properties.pin_id, str, schemas.Unset] = schemas.unset,
        status: typing.Union['EntityStatus', schemas.Unset] = schemas.unset,
        tracking_urls: typing.Union[MetaOapg.properties.tracking_urls, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        view_tracking_url: typing.Union[MetaOapg.properties.view_tracking_url, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdCommon':
        return super().__new__(
            cls,
            *args,
            ad_group_id=ad_group_id,
            android_deep_link=android_deep_link,
            carousel_android_deep_links=carousel_android_deep_links,
            carousel_destination_urls=carousel_destination_urls,
            carousel_ios_deep_links=carousel_ios_deep_links,
            click_tracking_url=click_tracking_url,
            creative_type=creative_type,
            destination_url=destination_url,
            ios_deep_link=ios_deep_link,
            is_pin_deleted=is_pin_deleted,
            is_removable=is_removable,
            name=name,
            pin_id=pin_id,
            status=status,
            tracking_urls=tracking_urls,
            view_tracking_url=view_tracking_url,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.creative_type import CreativeType
from pinterestsdk.model.entity_status import EntityStatus
from pinterestsdk.model.tracking_urls import TrackingUrls
