# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CustomerList(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ad_account_id = schemas.StrSchema
            created_time = schemas.NumberSchema
            id = schemas.StrSchema
            name = schemas.StrSchema
            num_batches = schemas.NumberSchema
            num_removed_user_records = schemas.NumberSchema
            num_uploaded_user_records = schemas.NumberSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PROCESSING": "PROCESSING",
                        "READY": "READY",
                        "TOO_SMALL": "TOO_SMALL",
                        "UPLOADING": "UPLOADING",
                    }
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("PROCESSING")
                
                @schemas.classproperty
                def READY(cls):
                    return cls("READY")
                
                @schemas.classproperty
                def TOO_SMALL(cls):
                    return cls("TOO_SMALL")
                
                @schemas.classproperty
                def UPLOADING(cls):
                    return cls("UPLOADING")
            type = schemas.StrSchema
            updated_time = schemas.NumberSchema
            exceptions = schemas.DictSchema
            __annotations__ = {
                "ad_account_id": ad_account_id,
                "created_time": created_time,
                "id": id,
                "name": name,
                "num_batches": num_batches,
                "num_removed_user_records": num_removed_user_records,
                "num_uploaded_user_records": num_uploaded_user_records,
                "status": status,
                "type": type,
                "updated_time": updated_time,
                "exceptions": exceptions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_account_id"]) -> MetaOapg.properties.ad_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_batches"]) -> MetaOapg.properties.num_batches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_removed_user_records"]) -> MetaOapg.properties.num_removed_user_records: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_uploaded_user_records"]) -> MetaOapg.properties.num_uploaded_user_records: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exceptions"]) -> MetaOapg.properties.exceptions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ad_account_id", "created_time", "id", "name", "num_batches", "num_removed_user_records", "num_uploaded_user_records", "status", "type", "updated_time", "exceptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_account_id"]) -> typing.Union[MetaOapg.properties.ad_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> typing.Union[MetaOapg.properties.created_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_batches"]) -> typing.Union[MetaOapg.properties.num_batches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_removed_user_records"]) -> typing.Union[MetaOapg.properties.num_removed_user_records, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_uploaded_user_records"]) -> typing.Union[MetaOapg.properties.num_uploaded_user_records, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> typing.Union[MetaOapg.properties.updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exceptions"]) -> typing.Union[MetaOapg.properties.exceptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ad_account_id", "created_time", "id", "name", "num_batches", "num_removed_user_records", "num_uploaded_user_records", "status", "type", "updated_time", "exceptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ad_account_id: typing.Union[MetaOapg.properties.ad_account_id, str, schemas.Unset] = schemas.unset,
        created_time: typing.Union[MetaOapg.properties.created_time, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        num_batches: typing.Union[MetaOapg.properties.num_batches, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        num_removed_user_records: typing.Union[MetaOapg.properties.num_removed_user_records, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        num_uploaded_user_records: typing.Union[MetaOapg.properties.num_uploaded_user_records, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        updated_time: typing.Union[MetaOapg.properties.updated_time, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exceptions: typing.Union[MetaOapg.properties.exceptions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerList':
        return super().__new__(
            cls,
            *args,
            ad_account_id=ad_account_id,
            created_time=created_time,
            id=id,
            name=name,
            num_batches=num_batches,
            num_removed_user_records=num_removed_user_records,
            num_uploaded_user_records=num_uploaded_user_records,
            status=status,
            type=type,
            updated_time=updated_time,
            exceptions=exceptions,
            _configuration=_configuration,
            **kwargs,
        )
