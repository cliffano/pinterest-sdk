# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class BulkUpsertRequestUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request for creation of entities in bulk.
    """


    class MetaOapg:
        
        class properties:
            
            
            class campaigns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CampaignUpdateRequest']:
                        return CampaignUpdateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CampaignUpdateRequest'], typing.List['CampaignUpdateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'campaigns':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CampaignUpdateRequest':
                    return super().__getitem__(i)
            
            
            class ad_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AdGroupUpdateRequest']:
                        return AdGroupUpdateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AdGroupUpdateRequest'], typing.List['AdGroupUpdateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ad_groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AdGroupUpdateRequest':
                    return super().__getitem__(i)
            
            
            class ads(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AdUpdateRequest']:
                        return AdUpdateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AdUpdateRequest'], typing.List['AdUpdateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ads':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AdUpdateRequest':
                    return super().__getitem__(i)
            
            
            class product_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductGroupPromotionUpdateRequest']:
                        return ProductGroupPromotionUpdateRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProductGroupPromotionUpdateRequest'], typing.List['ProductGroupPromotionUpdateRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'product_groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductGroupPromotionUpdateRequest':
                    return super().__getitem__(i)
            
            
            class keywords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['KeywordUpdate']:
                        return KeywordUpdate
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['KeywordUpdate'], typing.List['KeywordUpdate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'keywords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'KeywordUpdate':
                    return super().__getitem__(i)
            __annotations__ = {
                "campaigns": campaigns,
                "ad_groups": ad_groups,
                "ads": ads,
                "product_groups": product_groups,
                "keywords": keywords,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["campaigns"]) -> MetaOapg.properties.campaigns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_groups"]) -> MetaOapg.properties.ad_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ads"]) -> MetaOapg.properties.ads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_groups"]) -> MetaOapg.properties.product_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keywords"]) -> MetaOapg.properties.keywords: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["campaigns", "ad_groups", "ads", "product_groups", "keywords", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["campaigns"]) -> typing.Union[MetaOapg.properties.campaigns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_groups"]) -> typing.Union[MetaOapg.properties.ad_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ads"]) -> typing.Union[MetaOapg.properties.ads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_groups"]) -> typing.Union[MetaOapg.properties.product_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keywords"]) -> typing.Union[MetaOapg.properties.keywords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["campaigns", "ad_groups", "ads", "product_groups", "keywords", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        campaigns: typing.Union[MetaOapg.properties.campaigns, list, tuple, schemas.Unset] = schemas.unset,
        ad_groups: typing.Union[MetaOapg.properties.ad_groups, list, tuple, schemas.Unset] = schemas.unset,
        ads: typing.Union[MetaOapg.properties.ads, list, tuple, schemas.Unset] = schemas.unset,
        product_groups: typing.Union[MetaOapg.properties.product_groups, list, tuple, schemas.Unset] = schemas.unset,
        keywords: typing.Union[MetaOapg.properties.keywords, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BulkUpsertRequestUpdate':
        return super().__new__(
            cls,
            *args,
            campaigns=campaigns,
            ad_groups=ad_groups,
            ads=ads,
            product_groups=product_groups,
            keywords=keywords,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.ad_group_update_request import AdGroupUpdateRequest
from pinterestsdk.model.ad_update_request import AdUpdateRequest
from pinterestsdk.model.campaign_update_request import CampaignUpdateRequest
from pinterestsdk.model.keyword_update import KeywordUpdate
from pinterestsdk.model.product_group_promotion_update_request import ProductGroupPromotionUpdateRequest
