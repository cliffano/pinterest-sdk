# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CampaignResponse(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def items() -> typing.Type['ObjectiveType']:
                        return ObjectiveType
                    created_time = schemas.IntSchema
                    updated_time = schemas.IntSchema
                    type = schemas.StrSchema
                    
                    
                    class is_flexible_daily_budgets(
                        schemas.BoolBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneBoolMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, bool, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'is_flexible_daily_budgets':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class is_campaign_budget_optimization(
                        schemas.BoolBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneBoolMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, bool, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'is_campaign_budget_optimization':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "items": items,
                        "created_time": created_time,
                        "updated_time": updated_time,
                        "type": type,
                        "is_flexible_daily_budgets": is_flexible_daily_budgets,
                        "is_campaign_budget_optimization": is_campaign_budget_optimization,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'ObjectiveType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_flexible_daily_budgets"]) -> MetaOapg.properties.is_flexible_daily_budgets: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_campaign_budget_optimization"]) -> MetaOapg.properties.is_campaign_budget_optimization: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["items", "created_time", "updated_time", "type", "is_flexible_daily_budgets", "is_campaign_budget_optimization", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union['ObjectiveType', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> typing.Union[MetaOapg.properties.created_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> typing.Union[MetaOapg.properties.updated_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_flexible_daily_budgets"]) -> typing.Union[MetaOapg.properties.is_flexible_daily_budgets, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_campaign_budget_optimization"]) -> typing.Union[MetaOapg.properties.is_campaign_budget_optimization, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["items", "created_time", "updated_time", "type", "is_flexible_daily_budgets", "is_campaign_budget_optimization", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                items: typing.Union['ObjectiveType', schemas.Unset] = schemas.unset,
                created_time: typing.Union[MetaOapg.properties.created_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                updated_time: typing.Union[MetaOapg.properties.updated_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                is_flexible_daily_budgets: typing.Union[MetaOapg.properties.is_flexible_daily_budgets, None, bool, schemas.Unset] = schemas.unset,
                is_campaign_budget_optimization: typing.Union[MetaOapg.properties.is_campaign_budget_optimization, None, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    items=items,
                    created_time=created_time,
                    updated_time=updated_time,
                    type=type,
                    is_flexible_daily_budgets=is_flexible_daily_budgets,
                    is_campaign_budget_optimization=is_campaign_budget_optimization,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CampaignId,
                CampaignCommon,
                cls.all_of_2,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CampaignResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.campaign_common import CampaignCommon
from pinterestsdk.model.campaign_id import CampaignId
from pinterestsdk.model.objective_type import ObjectiveType
