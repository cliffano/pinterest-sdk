# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class ProductGroupPromotion(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class ad_group_id(
                schemas.StrSchema
            ):
                pass
            
            
            class type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            bid_in_micro_currency = schemas.IntSchema
            
            
            class included(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'included':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class definition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'definition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class relative_definition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relative_definition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class parent_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parent_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class slideshow_collections_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slideshow_collections_title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class slideshow_collections_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slideshow_collections_description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "ad_group_id": ad_group_id,
                "type": type,
                "bid_in_micro_currency": bid_in_micro_currency,
                "included": included,
                "definition": definition,
                "relative_definition": relative_definition,
                "parent_id": parent_id,
                "slideshow_collections_title": slideshow_collections_title,
                "slideshow_collections_description": slideshow_collections_description,
            }
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                ProductGroupPromotionCommon,
            ]

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_group_id"]) -> MetaOapg.properties.ad_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bid_in_micro_currency"]) -> MetaOapg.properties.bid_in_micro_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["included"]) -> MetaOapg.properties.included: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relative_definition"]) -> MetaOapg.properties.relative_definition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_id"]) -> MetaOapg.properties.parent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slideshow_collections_title"]) -> MetaOapg.properties.slideshow_collections_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slideshow_collections_description"]) -> MetaOapg.properties.slideshow_collections_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "ad_group_id", "type", "bid_in_micro_currency", "included", "definition", "relative_definition", "parent_id", "slideshow_collections_title", "slideshow_collections_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_group_id"]) -> typing.Union[MetaOapg.properties.ad_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bid_in_micro_currency"]) -> typing.Union[MetaOapg.properties.bid_in_micro_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["included"]) -> typing.Union[MetaOapg.properties.included, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> typing.Union[MetaOapg.properties.definition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relative_definition"]) -> typing.Union[MetaOapg.properties.relative_definition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_id"]) -> typing.Union[MetaOapg.properties.parent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slideshow_collections_title"]) -> typing.Union[MetaOapg.properties.slideshow_collections_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slideshow_collections_description"]) -> typing.Union[MetaOapg.properties.slideshow_collections_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "ad_group_id", "type", "bid_in_micro_currency", "included", "definition", "relative_definition", "parent_id", "slideshow_collections_title", "slideshow_collections_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        ad_group_id: typing.Union[MetaOapg.properties.ad_group_id, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, None, str, schemas.Unset] = schemas.unset,
        bid_in_micro_currency: typing.Union[MetaOapg.properties.bid_in_micro_currency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        included: typing.Union[MetaOapg.properties.included, None, bool, schemas.Unset] = schemas.unset,
        definition: typing.Union[MetaOapg.properties.definition, None, str, schemas.Unset] = schemas.unset,
        relative_definition: typing.Union[MetaOapg.properties.relative_definition, None, str, schemas.Unset] = schemas.unset,
        parent_id: typing.Union[MetaOapg.properties.parent_id, None, str, schemas.Unset] = schemas.unset,
        slideshow_collections_title: typing.Union[MetaOapg.properties.slideshow_collections_title, None, str, schemas.Unset] = schemas.unset,
        slideshow_collections_description: typing.Union[MetaOapg.properties.slideshow_collections_description, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductGroupPromotion':
        return super().__new__(
            cls,
            *args,
            id=id,
            ad_group_id=ad_group_id,
            type=type,
            bid_in_micro_currency=bid_in_micro_currency,
            included=included,
            definition=definition,
            relative_definition=relative_definition,
            parent_id=parent_id,
            slideshow_collections_title=slideshow_collections_title,
            slideshow_collections_description=slideshow_collections_description,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.product_group_promotion_common import ProductGroupPromotionCommon
