# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class PinMediaSourceVideoID(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Video ID-based media source
    """


    class MetaOapg:
        required = {
            "cover_image_url",
            "media_id",
            "source_type",
        }
        
        class properties:
            
            
            class source_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "video_id": "VIDEO_ID",
                    }
                
                @schemas.classproperty
                def VIDEO_ID(cls):
                    return cls("video_id")
            cover_image_url = schemas.StrSchema
            
            
            class media_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }]
            __annotations__ = {
                "source_type": source_type,
                "cover_image_url": cover_image_url,
                "media_id": media_id,
            }
    
    cover_image_url: MetaOapg.properties.cover_image_url
    media_id: MetaOapg.properties.media_id
    source_type: MetaOapg.properties.source_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_type"]) -> MetaOapg.properties.source_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cover_image_url"]) -> MetaOapg.properties.cover_image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_id"]) -> MetaOapg.properties.media_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source_type", "cover_image_url", "media_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_type"]) -> MetaOapg.properties.source_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cover_image_url"]) -> MetaOapg.properties.cover_image_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_id"]) -> MetaOapg.properties.media_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source_type", "cover_image_url", "media_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cover_image_url: typing.Union[MetaOapg.properties.cover_image_url, str, ],
        media_id: typing.Union[MetaOapg.properties.media_id, str, ],
        source_type: typing.Union[MetaOapg.properties.source_type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PinMediaSourceVideoID':
        return super().__new__(
            cls,
            *args,
            cover_image_url=cover_image_url,
            media_id=media_id,
            source_type=source_type,
            _configuration=_configuration,
            **kwargs,
        )
