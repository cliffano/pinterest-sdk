# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AnalyticsMetricsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class daily_metrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                            
                                @staticmethod
                                def data_status() -> typing.Type['DataStatus']:
                                    return DataStatus
                                date = schemas.StrSchema
                            
                                @staticmethod
                                def metrics() -> typing.Type['Metrics']:
                                    return Metrics
                                __annotations__ = {
                                    "data_status": data_status,
                                    "date": date,
                                    "metrics": metrics,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["data_status"]) -> 'DataStatus': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> 'Metrics': ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["data_status", "date", "metrics", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["data_status"]) -> typing.Union['DataStatus', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> typing.Union['Metrics', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data_status", "date", "metrics", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            data_status: typing.Union['DataStatus', schemas.Unset] = schemas.unset,
                            date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                            metrics: typing.Union['Metrics', schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                data_status=data_status,
                                date=date,
                                metrics=metrics,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_metrics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class summary_metrics(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.NumberSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, float, ],
                ) -> 'summary_metrics':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "daily_metrics": daily_metrics,
                "summary_metrics": summary_metrics,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_metrics"]) -> MetaOapg.properties.daily_metrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary_metrics"]) -> MetaOapg.properties.summary_metrics: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["daily_metrics", "summary_metrics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_metrics"]) -> typing.Union[MetaOapg.properties.daily_metrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary_metrics"]) -> typing.Union[MetaOapg.properties.summary_metrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["daily_metrics", "summary_metrics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        daily_metrics: typing.Union[MetaOapg.properties.daily_metrics, list, tuple, schemas.Unset] = schemas.unset,
        summary_metrics: typing.Union[MetaOapg.properties.summary_metrics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnalyticsMetricsResponse':
        return super().__new__(
            cls,
            *args,
            daily_metrics=daily_metrics,
            summary_metrics=summary_metrics,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.data_status import DataStatus
from pinterestsdk.model.metrics import Metrics
