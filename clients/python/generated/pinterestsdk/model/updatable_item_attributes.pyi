# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class UpdatableItemAttributes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class ad_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ad_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class adult(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'adult':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class age_group(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'age_group':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            availability = schemas.StrSchema
            
            
            class average_review_rating(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'average_review_rating':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class brand(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brand':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class checkout_enabled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'checkout_enabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class color(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'color':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class condition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'condition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_label_0(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_label_0':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_label_1(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_label_1':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_label_2(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_label_2':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_label_3(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_label_3':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class custom_label_4(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_label_4':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            description = schemas.StrSchema
            
            
            class free_shipping_label(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'free_shipping_label':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class free_shipping_limit(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'free_shipping_limit':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gender(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class google_product_category(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'google_product_category':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gtin(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gtin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            id = schemas.StrSchema
            
            
            class item_group_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_group_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class last_updated_time(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_updated_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            link = schemas.StrSchema
            
            
            class material(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'material':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class min_ad_price(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'min_ad_price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mobile_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobile_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mpn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mpn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class number_of_ratings(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_of_ratings':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class number_of_reviews(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_of_reviews':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pattern(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pattern':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            price = schemas.StrSchema
            
            
            class product_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'product_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sale_price(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sale_price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipping(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipping_height(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping_height':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipping_weight(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping_weight':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class shipping_width(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shipping_width':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class size(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'size':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class size_system(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'size_system':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class size_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'size_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tax(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tax':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            title = schemas.StrSchema
            
            
            class variant_names(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variant_names':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class variant_values(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variant_values':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "ad_link": ad_link,
                "adult": adult,
                "age_group": age_group,
                "availability": availability,
                "average_review_rating": average_review_rating,
                "brand": brand,
                "checkout_enabled": checkout_enabled,
                "color": color,
                "condition": condition,
                "custom_label_0": custom_label_0,
                "custom_label_1": custom_label_1,
                "custom_label_2": custom_label_2,
                "custom_label_3": custom_label_3,
                "custom_label_4": custom_label_4,
                "description": description,
                "free_shipping_label": free_shipping_label,
                "free_shipping_limit": free_shipping_limit,
                "gender": gender,
                "google_product_category": google_product_category,
                "gtin": gtin,
                "id": id,
                "item_group_id": item_group_id,
                "last_updated_time": last_updated_time,
                "link": link,
                "material": material,
                "min_ad_price": min_ad_price,
                "mobile_link": mobile_link,
                "mpn": mpn,
                "number_of_ratings": number_of_ratings,
                "number_of_reviews": number_of_reviews,
                "pattern": pattern,
                "price": price,
                "product_type": product_type,
                "sale_price": sale_price,
                "shipping": shipping,
                "shipping_height": shipping_height,
                "shipping_weight": shipping_weight,
                "shipping_width": shipping_width,
                "size": size,
                "size_system": size_system,
                "size_type": size_type,
                "tax": tax,
                "title": title,
                "variant_names": variant_names,
                "variant_values": variant_values,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_link"]) -> MetaOapg.properties.ad_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adult"]) -> MetaOapg.properties.adult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["age_group"]) -> MetaOapg.properties.age_group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> MetaOapg.properties.availability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_review_rating"]) -> MetaOapg.properties.average_review_rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> MetaOapg.properties.brand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkout_enabled"]) -> MetaOapg.properties.checkout_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_label_0"]) -> MetaOapg.properties.custom_label_0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_label_1"]) -> MetaOapg.properties.custom_label_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_label_2"]) -> MetaOapg.properties.custom_label_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_label_3"]) -> MetaOapg.properties.custom_label_3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_label_4"]) -> MetaOapg.properties.custom_label_4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["free_shipping_label"]) -> MetaOapg.properties.free_shipping_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["free_shipping_limit"]) -> MetaOapg.properties.free_shipping_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["google_product_category"]) -> MetaOapg.properties.google_product_category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gtin"]) -> MetaOapg.properties.gtin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_group_id"]) -> MetaOapg.properties.item_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_ad_price"]) -> MetaOapg.properties.min_ad_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobile_link"]) -> MetaOapg.properties.mobile_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mpn"]) -> MetaOapg.properties.mpn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_ratings"]) -> MetaOapg.properties.number_of_ratings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_reviews"]) -> MetaOapg.properties.number_of_reviews: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pattern"]) -> MetaOapg.properties.pattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sale_price"]) -> MetaOapg.properties.sale_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping"]) -> MetaOapg.properties.shipping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_height"]) -> MetaOapg.properties.shipping_height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_weight"]) -> MetaOapg.properties.shipping_weight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_width"]) -> MetaOapg.properties.shipping_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_system"]) -> MetaOapg.properties.size_system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_type"]) -> MetaOapg.properties.size_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> MetaOapg.properties.tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_names"]) -> MetaOapg.properties.variant_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_values"]) -> MetaOapg.properties.variant_values: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ad_link", "adult", "age_group", "availability", "average_review_rating", "brand", "checkout_enabled", "color", "condition", "custom_label_0", "custom_label_1", "custom_label_2", "custom_label_3", "custom_label_4", "description", "free_shipping_label", "free_shipping_limit", "gender", "google_product_category", "gtin", "id", "item_group_id", "last_updated_time", "link", "material", "min_ad_price", "mobile_link", "mpn", "number_of_ratings", "number_of_reviews", "pattern", "price", "product_type", "sale_price", "shipping", "shipping_height", "shipping_weight", "shipping_width", "size", "size_system", "size_type", "tax", "title", "variant_names", "variant_values", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_link"]) -> typing.Union[MetaOapg.properties.ad_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adult"]) -> typing.Union[MetaOapg.properties.adult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["age_group"]) -> typing.Union[MetaOapg.properties.age_group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> typing.Union[MetaOapg.properties.availability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_review_rating"]) -> typing.Union[MetaOapg.properties.average_review_rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union[MetaOapg.properties.brand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkout_enabled"]) -> typing.Union[MetaOapg.properties.checkout_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condition"]) -> typing.Union[MetaOapg.properties.condition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_label_0"]) -> typing.Union[MetaOapg.properties.custom_label_0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_label_1"]) -> typing.Union[MetaOapg.properties.custom_label_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_label_2"]) -> typing.Union[MetaOapg.properties.custom_label_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_label_3"]) -> typing.Union[MetaOapg.properties.custom_label_3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_label_4"]) -> typing.Union[MetaOapg.properties.custom_label_4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["free_shipping_label"]) -> typing.Union[MetaOapg.properties.free_shipping_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["free_shipping_limit"]) -> typing.Union[MetaOapg.properties.free_shipping_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["google_product_category"]) -> typing.Union[MetaOapg.properties.google_product_category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gtin"]) -> typing.Union[MetaOapg.properties.gtin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_group_id"]) -> typing.Union[MetaOapg.properties.item_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> typing.Union[MetaOapg.properties.last_updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_ad_price"]) -> typing.Union[MetaOapg.properties.min_ad_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobile_link"]) -> typing.Union[MetaOapg.properties.mobile_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mpn"]) -> typing.Union[MetaOapg.properties.mpn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_ratings"]) -> typing.Union[MetaOapg.properties.number_of_ratings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_reviews"]) -> typing.Union[MetaOapg.properties.number_of_reviews, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pattern"]) -> typing.Union[MetaOapg.properties.pattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sale_price"]) -> typing.Union[MetaOapg.properties.sale_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping"]) -> typing.Union[MetaOapg.properties.shipping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_height"]) -> typing.Union[MetaOapg.properties.shipping_height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_weight"]) -> typing.Union[MetaOapg.properties.shipping_weight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_width"]) -> typing.Union[MetaOapg.properties.shipping_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_system"]) -> typing.Union[MetaOapg.properties.size_system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_type"]) -> typing.Union[MetaOapg.properties.size_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union[MetaOapg.properties.tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_names"]) -> typing.Union[MetaOapg.properties.variant_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_values"]) -> typing.Union[MetaOapg.properties.variant_values, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ad_link", "adult", "age_group", "availability", "average_review_rating", "brand", "checkout_enabled", "color", "condition", "custom_label_0", "custom_label_1", "custom_label_2", "custom_label_3", "custom_label_4", "description", "free_shipping_label", "free_shipping_limit", "gender", "google_product_category", "gtin", "id", "item_group_id", "last_updated_time", "link", "material", "min_ad_price", "mobile_link", "mpn", "number_of_ratings", "number_of_reviews", "pattern", "price", "product_type", "sale_price", "shipping", "shipping_height", "shipping_weight", "shipping_width", "size", "size_system", "size_type", "tax", "title", "variant_names", "variant_values", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ad_link: typing.Union[MetaOapg.properties.ad_link, None, str, schemas.Unset] = schemas.unset,
        adult: typing.Union[MetaOapg.properties.adult, None, bool, schemas.Unset] = schemas.unset,
        age_group: typing.Union[MetaOapg.properties.age_group, None, str, schemas.Unset] = schemas.unset,
        availability: typing.Union[MetaOapg.properties.availability, str, schemas.Unset] = schemas.unset,
        average_review_rating: typing.Union[MetaOapg.properties.average_review_rating, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        brand: typing.Union[MetaOapg.properties.brand, None, str, schemas.Unset] = schemas.unset,
        checkout_enabled: typing.Union[MetaOapg.properties.checkout_enabled, None, bool, schemas.Unset] = schemas.unset,
        color: typing.Union[MetaOapg.properties.color, None, str, schemas.Unset] = schemas.unset,
        condition: typing.Union[MetaOapg.properties.condition, None, str, schemas.Unset] = schemas.unset,
        custom_label_0: typing.Union[MetaOapg.properties.custom_label_0, None, str, schemas.Unset] = schemas.unset,
        custom_label_1: typing.Union[MetaOapg.properties.custom_label_1, None, str, schemas.Unset] = schemas.unset,
        custom_label_2: typing.Union[MetaOapg.properties.custom_label_2, None, str, schemas.Unset] = schemas.unset,
        custom_label_3: typing.Union[MetaOapg.properties.custom_label_3, None, str, schemas.Unset] = schemas.unset,
        custom_label_4: typing.Union[MetaOapg.properties.custom_label_4, None, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        free_shipping_label: typing.Union[MetaOapg.properties.free_shipping_label, None, bool, schemas.Unset] = schemas.unset,
        free_shipping_limit: typing.Union[MetaOapg.properties.free_shipping_limit, None, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, None, str, schemas.Unset] = schemas.unset,
        google_product_category: typing.Union[MetaOapg.properties.google_product_category, None, str, schemas.Unset] = schemas.unset,
        gtin: typing.Union[MetaOapg.properties.gtin, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        item_group_id: typing.Union[MetaOapg.properties.item_group_id, None, str, schemas.Unset] = schemas.unset,
        last_updated_time: typing.Union[MetaOapg.properties.last_updated_time, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        material: typing.Union[MetaOapg.properties.material, None, str, schemas.Unset] = schemas.unset,
        min_ad_price: typing.Union[MetaOapg.properties.min_ad_price, None, str, schemas.Unset] = schemas.unset,
        mobile_link: typing.Union[MetaOapg.properties.mobile_link, None, str, schemas.Unset] = schemas.unset,
        mpn: typing.Union[MetaOapg.properties.mpn, None, str, schemas.Unset] = schemas.unset,
        number_of_ratings: typing.Union[MetaOapg.properties.number_of_ratings, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        number_of_reviews: typing.Union[MetaOapg.properties.number_of_reviews, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pattern: typing.Union[MetaOapg.properties.pattern, None, str, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, str, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, None, str, schemas.Unset] = schemas.unset,
        sale_price: typing.Union[MetaOapg.properties.sale_price, None, str, schemas.Unset] = schemas.unset,
        shipping: typing.Union[MetaOapg.properties.shipping, None, str, schemas.Unset] = schemas.unset,
        shipping_height: typing.Union[MetaOapg.properties.shipping_height, None, str, schemas.Unset] = schemas.unset,
        shipping_weight: typing.Union[MetaOapg.properties.shipping_weight, None, str, schemas.Unset] = schemas.unset,
        shipping_width: typing.Union[MetaOapg.properties.shipping_width, None, str, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, None, str, schemas.Unset] = schemas.unset,
        size_system: typing.Union[MetaOapg.properties.size_system, None, str, schemas.Unset] = schemas.unset,
        size_type: typing.Union[MetaOapg.properties.size_type, None, str, schemas.Unset] = schemas.unset,
        tax: typing.Union[MetaOapg.properties.tax, None, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        variant_names: typing.Union[MetaOapg.properties.variant_names, list, tuple, None, schemas.Unset] = schemas.unset,
        variant_values: typing.Union[MetaOapg.properties.variant_values, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdatableItemAttributes':
        return super().__new__(
            cls,
            *args,
            ad_link=ad_link,
            adult=adult,
            age_group=age_group,
            availability=availability,
            average_review_rating=average_review_rating,
            brand=brand,
            checkout_enabled=checkout_enabled,
            color=color,
            condition=condition,
            custom_label_0=custom_label_0,
            custom_label_1=custom_label_1,
            custom_label_2=custom_label_2,
            custom_label_3=custom_label_3,
            custom_label_4=custom_label_4,
            description=description,
            free_shipping_label=free_shipping_label,
            free_shipping_limit=free_shipping_limit,
            gender=gender,
            google_product_category=google_product_category,
            gtin=gtin,
            id=id,
            item_group_id=item_group_id,
            last_updated_time=last_updated_time,
            link=link,
            material=material,
            min_ad_price=min_ad_price,
            mobile_link=mobile_link,
            mpn=mpn,
            number_of_ratings=number_of_ratings,
            number_of_reviews=number_of_reviews,
            pattern=pattern,
            price=price,
            product_type=product_type,
            sale_price=sale_price,
            shipping=shipping,
            shipping_height=shipping_height,
            shipping_weight=shipping_weight,
            shipping_width=shipping_width,
            size=size,
            size_system=size_system,
            size_type=size_type,
            tax=tax,
            title=title,
            variant_names=variant_names,
            variant_values=variant_values,
            _configuration=_configuration,
            **kwargs,
        )
