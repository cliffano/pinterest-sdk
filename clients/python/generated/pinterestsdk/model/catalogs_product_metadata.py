# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsProductMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Product metadata entity
    """


    class MetaOapg:
        required = {
            "item_id",
            "price",
            "item_group_id",
            "currency",
            "availability",
            "sale_price",
        }
        
        class properties:
            item_id = schemas.StrSchema
            
            
            class item_group_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_group_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def availability() -> typing.Type['NonNullableProductAvailabilityType']:
                return NonNullableProductAvailabilityType
            price = schemas.NumberSchema
            
            
            class sale_price(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sale_price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def currency() -> typing.Type['NonNullableCatalogsCurrency']:
                return NonNullableCatalogsCurrency
            __annotations__ = {
                "item_id": item_id,
                "item_group_id": item_group_id,
                "availability": availability,
                "price": price,
                "sale_price": sale_price,
                "currency": currency,
            }
    
    item_id: MetaOapg.properties.item_id
    price: MetaOapg.properties.price
    item_group_id: MetaOapg.properties.item_group_id
    currency: 'NonNullableCatalogsCurrency'
    availability: 'NonNullableProductAvailabilityType'
    sale_price: MetaOapg.properties.sale_price
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_group_id"]) -> MetaOapg.properties.item_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> 'NonNullableProductAvailabilityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sale_price"]) -> MetaOapg.properties.sale_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'NonNullableCatalogsCurrency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_id", "item_group_id", "availability", "price", "sale_price", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_group_id"]) -> MetaOapg.properties.item_group_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> 'NonNullableProductAvailabilityType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sale_price"]) -> MetaOapg.properties.sale_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'NonNullableCatalogsCurrency': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_id", "item_group_id", "availability", "price", "sale_price", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        item_id: typing.Union[MetaOapg.properties.item_id, str, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        item_group_id: typing.Union[MetaOapg.properties.item_group_id, None, str, ],
        currency: 'NonNullableCatalogsCurrency',
        availability: 'NonNullableProductAvailabilityType',
        sale_price: typing.Union[MetaOapg.properties.sale_price, None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsProductMetadata':
        return super().__new__(
            cls,
            *args,
            item_id=item_id,
            price=price,
            item_group_id=item_group_id,
            currency=currency,
            availability=availability,
            sale_price=sale_price,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.non_nullable_catalogs_currency import NonNullableCatalogsCurrency
from pinterestsdk.model.non_nullable_product_availability_type import NonNullableProductAvailabilityType
