# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class BidFloorRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "bid_floor_specs",
        }
        
        class properties:
            
            
            class bid_floor_specs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "billable_event",
                                "currency",
                            }
                            
                            class properties:
                                
                                
                                class countries(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        @staticmethod
                                        def items() -> typing.Type['Country']:
                                            return Country
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple['Country'], typing.List['Country']],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'countries':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> 'Country':
                                        return super().__getitem__(i)
                            
                                @staticmethod
                                def currency() -> typing.Type['Currency']:
                                    return Currency
                            
                                @staticmethod
                                def items() -> typing.Type['ObjectiveType']:
                                    return ObjectiveType
                            
                                @staticmethod
                                def billable_event() -> typing.Type['ActionType']:
                                    return ActionType
                                optimization_goal_metadata = schemas.DictSchema
                            
                                @staticmethod
                                def creative_type() -> typing.Type['CreativeType']:
                                    return CreativeType
                                __annotations__ = {
                                    "countries": countries,
                                    "currency": currency,
                                    "items": items,
                                    "billable_event": billable_event,
                                    "optimization_goal_metadata": optimization_goal_metadata,
                                    "creative_type": creative_type,
                                }
                        
                        billable_event: 'ActionType'
                        currency: 'Currency'
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["countries"]) -> MetaOapg.properties.countries: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'ObjectiveType': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["billable_event"]) -> 'ActionType': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["optimization_goal_metadata"]) -> MetaOapg.properties.optimization_goal_metadata: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["creative_type"]) -> 'CreativeType': ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["countries", "currency", "items", "billable_event", "optimization_goal_metadata", "creative_type", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["countries"]) -> typing.Union[MetaOapg.properties.countries, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union['ObjectiveType', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["billable_event"]) -> 'ActionType': ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["optimization_goal_metadata"]) -> typing.Union[MetaOapg.properties.optimization_goal_metadata, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["creative_type"]) -> typing.Union['CreativeType', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["countries", "currency", "items", "billable_event", "optimization_goal_metadata", "creative_type", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            billable_event: 'ActionType',
                            currency: 'Currency',
                            countries: typing.Union[MetaOapg.properties.countries, list, tuple, schemas.Unset] = schemas.unset,
                            items: typing.Union['ObjectiveType', schemas.Unset] = schemas.unset,
                            optimization_goal_metadata: typing.Union[MetaOapg.properties.optimization_goal_metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            creative_type: typing.Union['CreativeType', schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                billable_event=billable_event,
                                currency=currency,
                                countries=countries,
                                items=items,
                                optimization_goal_metadata=optimization_goal_metadata,
                                creative_type=creative_type,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bid_floor_specs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class targeting_spec(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class AGE_BUCKET(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'AGE_BUCKET':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class APPTYPE(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'APPTYPE':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class AUDIENCE_EXCLUDE(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'AUDIENCE_EXCLUDE':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class AUDIENCE_INCLUDE(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'AUDIENCE_INCLUDE':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class GENDER(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'GENDER':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class GEO(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'GEO':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class INTEREST(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'INTEREST':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class LOCALE(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'LOCALE':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class LOCATION(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'LOCATION':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class SHOPPING_RETARGETING(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            lookback_window = schemas.IntSchema
                                            
                                            
                                            class tag_types(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.IntSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'tag_types':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            exclusion_window = schemas.IntSchema
                                            __annotations__ = {
                                                "lookback_window": lookback_window,
                                                "tag_types": tag_types,
                                                "exclusion_window": exclusion_window,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["lookback_window"]) -> MetaOapg.properties.lookback_window: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["tag_types"]) -> MetaOapg.properties.tag_types: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["exclusion_window"]) -> MetaOapg.properties.exclusion_window: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lookback_window", "tag_types", "exclusion_window", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["lookback_window"]) -> typing.Union[MetaOapg.properties.lookback_window, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["tag_types"]) -> typing.Union[MetaOapg.properties.tag_types, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["exclusion_window"]) -> typing.Union[MetaOapg.properties.exclusion_window, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lookback_window", "tag_types", "exclusion_window", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        lookback_window: typing.Union[MetaOapg.properties.lookback_window, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        tag_types: typing.Union[MetaOapg.properties.tag_types, list, tuple, schemas.Unset] = schemas.unset,
                                        exclusion_window: typing.Union[MetaOapg.properties.exclusion_window, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            lookback_window=lookback_window,
                                            tag_types=tag_types,
                                            exclusion_window=exclusion_window,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'SHOPPING_RETARGETING':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class TARGETING_STRATEGY(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'TARGETING_STRATEGY':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "AGE_BUCKET": AGE_BUCKET,
                            "APPTYPE": APPTYPE,
                            "AUDIENCE_EXCLUDE": AUDIENCE_EXCLUDE,
                            "AUDIENCE_INCLUDE": AUDIENCE_INCLUDE,
                            "GENDER": GENDER,
                            "GEO": GEO,
                            "INTEREST": INTEREST,
                            "LOCALE": LOCALE,
                            "LOCATION": LOCATION,
                            "SHOPPING_RETARGETING": SHOPPING_RETARGETING,
                            "TARGETING_STRATEGY": TARGETING_STRATEGY,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AGE_BUCKET"]) -> MetaOapg.properties.AGE_BUCKET: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["APPTYPE"]) -> MetaOapg.properties.APPTYPE: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AUDIENCE_EXCLUDE"]) -> MetaOapg.properties.AUDIENCE_EXCLUDE: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AUDIENCE_INCLUDE"]) -> MetaOapg.properties.AUDIENCE_INCLUDE: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["GENDER"]) -> MetaOapg.properties.GENDER: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["GEO"]) -> MetaOapg.properties.GEO: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["INTEREST"]) -> MetaOapg.properties.INTEREST: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["LOCALE"]) -> MetaOapg.properties.LOCALE: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["LOCATION"]) -> MetaOapg.properties.LOCATION: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["SHOPPING_RETARGETING"]) -> MetaOapg.properties.SHOPPING_RETARGETING: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TARGETING_STRATEGY"]) -> MetaOapg.properties.TARGETING_STRATEGY: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["AGE_BUCKET", "APPTYPE", "AUDIENCE_EXCLUDE", "AUDIENCE_INCLUDE", "GENDER", "GEO", "INTEREST", "LOCALE", "LOCATION", "SHOPPING_RETARGETING", "TARGETING_STRATEGY", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AGE_BUCKET"]) -> typing.Union[MetaOapg.properties.AGE_BUCKET, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["APPTYPE"]) -> typing.Union[MetaOapg.properties.APPTYPE, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AUDIENCE_EXCLUDE"]) -> typing.Union[MetaOapg.properties.AUDIENCE_EXCLUDE, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AUDIENCE_INCLUDE"]) -> typing.Union[MetaOapg.properties.AUDIENCE_INCLUDE, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["GENDER"]) -> typing.Union[MetaOapg.properties.GENDER, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["GEO"]) -> typing.Union[MetaOapg.properties.GEO, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["INTEREST"]) -> typing.Union[MetaOapg.properties.INTEREST, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["LOCALE"]) -> typing.Union[MetaOapg.properties.LOCALE, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["LOCATION"]) -> typing.Union[MetaOapg.properties.LOCATION, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["SHOPPING_RETARGETING"]) -> typing.Union[MetaOapg.properties.SHOPPING_RETARGETING, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TARGETING_STRATEGY"]) -> typing.Union[MetaOapg.properties.TARGETING_STRATEGY, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AGE_BUCKET", "APPTYPE", "AUDIENCE_EXCLUDE", "AUDIENCE_INCLUDE", "GENDER", "GEO", "INTEREST", "LOCALE", "LOCATION", "SHOPPING_RETARGETING", "TARGETING_STRATEGY", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    AGE_BUCKET: typing.Union[MetaOapg.properties.AGE_BUCKET, list, tuple, schemas.Unset] = schemas.unset,
                    APPTYPE: typing.Union[MetaOapg.properties.APPTYPE, list, tuple, schemas.Unset] = schemas.unset,
                    AUDIENCE_EXCLUDE: typing.Union[MetaOapg.properties.AUDIENCE_EXCLUDE, list, tuple, schemas.Unset] = schemas.unset,
                    AUDIENCE_INCLUDE: typing.Union[MetaOapg.properties.AUDIENCE_INCLUDE, list, tuple, schemas.Unset] = schemas.unset,
                    GENDER: typing.Union[MetaOapg.properties.GENDER, list, tuple, schemas.Unset] = schemas.unset,
                    GEO: typing.Union[MetaOapg.properties.GEO, list, tuple, schemas.Unset] = schemas.unset,
                    INTEREST: typing.Union[MetaOapg.properties.INTEREST, list, tuple, schemas.Unset] = schemas.unset,
                    LOCALE: typing.Union[MetaOapg.properties.LOCALE, list, tuple, schemas.Unset] = schemas.unset,
                    LOCATION: typing.Union[MetaOapg.properties.LOCATION, list, tuple, schemas.Unset] = schemas.unset,
                    SHOPPING_RETARGETING: typing.Union[MetaOapg.properties.SHOPPING_RETARGETING, list, tuple, schemas.Unset] = schemas.unset,
                    TARGETING_STRATEGY: typing.Union[MetaOapg.properties.TARGETING_STRATEGY, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'targeting_spec':
                    return super().__new__(
                        cls,
                        *args,
                        AGE_BUCKET=AGE_BUCKET,
                        APPTYPE=APPTYPE,
                        AUDIENCE_EXCLUDE=AUDIENCE_EXCLUDE,
                        AUDIENCE_INCLUDE=AUDIENCE_INCLUDE,
                        GENDER=GENDER,
                        GEO=GEO,
                        INTEREST=INTEREST,
                        LOCALE=LOCALE,
                        LOCATION=LOCATION,
                        SHOPPING_RETARGETING=SHOPPING_RETARGETING,
                        TARGETING_STRATEGY=TARGETING_STRATEGY,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "bid_floor_specs": bid_floor_specs,
                "targeting_spec": targeting_spec,
            }
    
    bid_floor_specs: MetaOapg.properties.bid_floor_specs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bid_floor_specs"]) -> MetaOapg.properties.bid_floor_specs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targeting_spec"]) -> MetaOapg.properties.targeting_spec: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bid_floor_specs", "targeting_spec", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bid_floor_specs"]) -> MetaOapg.properties.bid_floor_specs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targeting_spec"]) -> typing.Union[MetaOapg.properties.targeting_spec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bid_floor_specs", "targeting_spec", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bid_floor_specs: typing.Union[MetaOapg.properties.bid_floor_specs, list, tuple, ],
        targeting_spec: typing.Union[MetaOapg.properties.targeting_spec, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BidFloorRequest':
        return super().__new__(
            cls,
            *args,
            bid_floor_specs=bid_floor_specs,
            targeting_spec=targeting_spec,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.action_type import ActionType
from pinterestsdk.model.country import Country
from pinterestsdk.model.creative_type import CreativeType
from pinterestsdk.model.currency import Currency
from pinterestsdk.model.objective_type import ObjectiveType
