# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AudienceRule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSON object defining targeted audience users. Example rule formats per audience type:<br>CUSTOMER_LIST: { "customer_list_id": "&lt;customer list ID&gt;"}<br>ACTALIKE: { "seed_id": ["&lt;audience ID&gt;"], "country": "US", "percentage": "10" }<br>(Valid countries include: "US", "CA", and "GB". Percentage should be 1-10.<br>The targeted audience should be this % size across Pinterest.)<br>VISITOR: { "visitor_source_id": ["&lt;conversion tag ID&gt;"], "retention_days": "180", "event_source": {"=": ["web", "mobile"]}, "ingestion_source": {"=": ["tag"]}}<br>(Retention days should be 1-540. Retention applies to specific customers.)<br>ENGAGEMENT: {"engagement_domain": ["www.entomi.com"], "engager_type": 1}<br>For more details on engagement audiences, see <a href="https://developers.pinterest.com/docs/redoc/adtech_ads_v4/#section/November-2021" target="_blank">November 2021 changelog</a>.
    """


    class MetaOapg:
        
        class properties:
            country = schemas.StrSchema
            
            
            class customer_list_id(
                schemas.StrSchema
            ):
                pass
            
            
            class engagement_domain(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'engagement_domain':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            engagement_type = schemas.StrSchema
            event = schemas.StrSchema
            
            
            class event_data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def currency() -> typing.Type['Currency']:
                            return Currency
                        lead_type = schemas.StrSchema
                        
                        
                        class line_items(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    product_brand = schemas.StrSchema
                                    product_category = schemas.StrSchema
                                    product_id = schemas.IntSchema
                                    product_name = schemas.StrSchema
                                    product_price = schemas.StrSchema
                                    product_quantity = schemas.IntSchema
                                    product_variant = schemas.StrSchema
                                    product_variant_id = schemas.StrSchema
                                    __annotations__ = {
                                        "product_brand": product_brand,
                                        "product_category": product_category,
                                        "product_id": product_id,
                                        "product_name": product_name,
                                        "product_price": product_price,
                                        "product_quantity": product_quantity,
                                        "product_variant": product_variant,
                                        "product_variant_id": product_variant_id,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_brand"]) -> MetaOapg.properties.product_brand: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_category"]) -> MetaOapg.properties.product_category: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_name"]) -> MetaOapg.properties.product_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_price"]) -> MetaOapg.properties.product_price: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_quantity"]) -> MetaOapg.properties.product_quantity: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_variant"]) -> MetaOapg.properties.product_variant: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["product_variant_id"]) -> MetaOapg.properties.product_variant_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["product_brand", "product_category", "product_id", "product_name", "product_price", "product_quantity", "product_variant", "product_variant_id", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_brand"]) -> typing.Union[MetaOapg.properties.product_brand, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_category"]) -> typing.Union[MetaOapg.properties.product_category, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_id"]) -> typing.Union[MetaOapg.properties.product_id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_name"]) -> typing.Union[MetaOapg.properties.product_name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_price"]) -> typing.Union[MetaOapg.properties.product_price, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_quantity"]) -> typing.Union[MetaOapg.properties.product_quantity, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_variant"]) -> typing.Union[MetaOapg.properties.product_variant, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["product_variant_id"]) -> typing.Union[MetaOapg.properties.product_variant_id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["product_brand", "product_category", "product_id", "product_name", "product_price", "product_quantity", "product_variant", "product_variant_id", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                product_brand: typing.Union[MetaOapg.properties.product_brand, str, schemas.Unset] = schemas.unset,
                                product_category: typing.Union[MetaOapg.properties.product_category, str, schemas.Unset] = schemas.unset,
                                product_id: typing.Union[MetaOapg.properties.product_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                product_name: typing.Union[MetaOapg.properties.product_name, str, schemas.Unset] = schemas.unset,
                                product_price: typing.Union[MetaOapg.properties.product_price, str, schemas.Unset] = schemas.unset,
                                product_quantity: typing.Union[MetaOapg.properties.product_quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                product_variant: typing.Union[MetaOapg.properties.product_variant, str, schemas.Unset] = schemas.unset,
                                product_variant_id: typing.Union[MetaOapg.properties.product_variant_id, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'line_items':
                                return super().__new__(
                                    cls,
                                    *args,
                                    product_brand=product_brand,
                                    product_category=product_category,
                                    product_id=product_id,
                                    product_name=product_name,
                                    product_price=product_price,
                                    product_quantity=product_quantity,
                                    product_variant=product_variant,
                                    product_variant_id=product_variant_id,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        order_id = schemas.StrSchema
                        order_quantity = schemas.IntSchema
                        page_name = schemas.StrSchema
                        promo_code = schemas.StrSchema
                        _property = schemas.StrSchema
                        search_query = schemas.StrSchema
                        value = schemas.StrSchema
                        video_title = schemas.StrSchema
                        __annotations__ = {
                            "currency": currency,
                            "lead_type": lead_type,
                            "line_items": line_items,
                            "order_id": order_id,
                            "order_quantity": order_quantity,
                            "page_name": page_name,
                            "promo_code": promo_code,
                            "property": _property,
                            "search_query": search_query,
                            "value": value,
                            "video_title": video_title,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lead_type"]) -> MetaOapg.properties.lead_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["line_items"]) -> MetaOapg.properties.line_items: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["order_quantity"]) -> MetaOapg.properties.order_quantity: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["page_name"]) -> MetaOapg.properties.page_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["promo_code"]) -> MetaOapg.properties.promo_code: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["property"]) -> MetaOapg.properties._property: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["search_query"]) -> MetaOapg.properties.search_query: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["video_title"]) -> MetaOapg.properties.video_title: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency", "lead_type", "line_items", "order_id", "order_quantity", "page_name", "promo_code", "property", "search_query", "value", "video_title", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lead_type"]) -> typing.Union[MetaOapg.properties.lead_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["line_items"]) -> typing.Union[MetaOapg.properties.line_items, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> typing.Union[MetaOapg.properties.order_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["order_quantity"]) -> typing.Union[MetaOapg.properties.order_quantity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["page_name"]) -> typing.Union[MetaOapg.properties.page_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["promo_code"]) -> typing.Union[MetaOapg.properties.promo_code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["property"]) -> typing.Union[MetaOapg.properties._property, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["search_query"]) -> typing.Union[MetaOapg.properties.search_query, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["video_title"]) -> typing.Union[MetaOapg.properties.video_title, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency", "lead_type", "line_items", "order_id", "order_quantity", "page_name", "promo_code", "property", "search_query", "value", "video_title", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
                    lead_type: typing.Union[MetaOapg.properties.lead_type, str, schemas.Unset] = schemas.unset,
                    line_items: typing.Union[MetaOapg.properties.line_items, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    order_id: typing.Union[MetaOapg.properties.order_id, str, schemas.Unset] = schemas.unset,
                    order_quantity: typing.Union[MetaOapg.properties.order_quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    page_name: typing.Union[MetaOapg.properties.page_name, str, schemas.Unset] = schemas.unset,
                    promo_code: typing.Union[MetaOapg.properties.promo_code, str, schemas.Unset] = schemas.unset,
                    search_query: typing.Union[MetaOapg.properties.search_query, str, schemas.Unset] = schemas.unset,
                    value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                    video_title: typing.Union[MetaOapg.properties.video_title, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'event_data':
                    return super().__new__(
                        cls,
                        *args,
                        currency=currency,
                        lead_type=lead_type,
                        line_items=line_items,
                        order_id=order_id,
                        order_quantity=order_quantity,
                        page_name=page_name,
                        promo_code=promo_code,
                        search_query=search_query,
                        value=value,
                        video_title=video_title,
                        _configuration=_configuration,
                        **kwargs,
                    )
            percentage = schemas.IntSchema
            
            
            class pin_id(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                        pass
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pin_id':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            prefill = schemas.BoolSchema
            retention_days = schemas.IntSchema
            
            
            class seed_id(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                        pass
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'seed_id':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class url(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class visitor_source_id(
                schemas.StrSchema
            ):
                pass
            event_source = schemas.DictSchema
            ingestion_source = schemas.DictSchema
            engager_type = schemas.IntSchema
            
            
            class campaign_id(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                        pass
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'campaign_id':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ad_id(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                        pass
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ad_id':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class objective_type(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObjectiveType']:
                        return ObjectiveType
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObjectiveType'], typing.List['ObjectiveType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'objective_type':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObjectiveType':
                    return super().__getitem__(i)
            
            
            class ad_account_id(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "country": country,
                "customer_list_id": customer_list_id,
                "engagement_domain": engagement_domain,
                "engagement_type": engagement_type,
                "event": event,
                "event_data": event_data,
                "percentage": percentage,
                "pin_id": pin_id,
                "prefill": prefill,
                "retention_days": retention_days,
                "seed_id": seed_id,
                "url": url,
                "visitor_source_id": visitor_source_id,
                "event_source": event_source,
                "ingestion_source": ingestion_source,
                "engager_type": engager_type,
                "campaign_id": campaign_id,
                "ad_id": ad_id,
                "objective_type": objective_type,
                "ad_account_id": ad_account_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_list_id"]) -> MetaOapg.properties.customer_list_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagement_domain"]) -> MetaOapg.properties.engagement_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engagement_type"]) -> MetaOapg.properties.engagement_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_data"]) -> MetaOapg.properties.event_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pin_id"]) -> MetaOapg.properties.pin_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefill"]) -> MetaOapg.properties.prefill: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retention_days"]) -> MetaOapg.properties.retention_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seed_id"]) -> MetaOapg.properties.seed_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visitor_source_id"]) -> MetaOapg.properties.visitor_source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_source"]) -> MetaOapg.properties.event_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ingestion_source"]) -> MetaOapg.properties.ingestion_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["engager_type"]) -> MetaOapg.properties.engager_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["campaign_id"]) -> MetaOapg.properties.campaign_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_id"]) -> MetaOapg.properties.ad_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objective_type"]) -> MetaOapg.properties.objective_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ad_account_id"]) -> MetaOapg.properties.ad_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country", "customer_list_id", "engagement_domain", "engagement_type", "event", "event_data", "percentage", "pin_id", "prefill", "retention_days", "seed_id", "url", "visitor_source_id", "event_source", "ingestion_source", "engager_type", "campaign_id", "ad_id", "objective_type", "ad_account_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_list_id"]) -> typing.Union[MetaOapg.properties.customer_list_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagement_domain"]) -> typing.Union[MetaOapg.properties.engagement_domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engagement_type"]) -> typing.Union[MetaOapg.properties.engagement_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> typing.Union[MetaOapg.properties.event, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_data"]) -> typing.Union[MetaOapg.properties.event_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentage"]) -> typing.Union[MetaOapg.properties.percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pin_id"]) -> typing.Union[MetaOapg.properties.pin_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefill"]) -> typing.Union[MetaOapg.properties.prefill, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retention_days"]) -> typing.Union[MetaOapg.properties.retention_days, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seed_id"]) -> typing.Union[MetaOapg.properties.seed_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visitor_source_id"]) -> typing.Union[MetaOapg.properties.visitor_source_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_source"]) -> typing.Union[MetaOapg.properties.event_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ingestion_source"]) -> typing.Union[MetaOapg.properties.ingestion_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["engager_type"]) -> typing.Union[MetaOapg.properties.engager_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["campaign_id"]) -> typing.Union[MetaOapg.properties.campaign_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_id"]) -> typing.Union[MetaOapg.properties.ad_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objective_type"]) -> typing.Union[MetaOapg.properties.objective_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ad_account_id"]) -> typing.Union[MetaOapg.properties.ad_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country", "customer_list_id", "engagement_domain", "engagement_type", "event", "event_data", "percentage", "pin_id", "prefill", "retention_days", "seed_id", "url", "visitor_source_id", "event_source", "ingestion_source", "engager_type", "campaign_id", "ad_id", "objective_type", "ad_account_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        customer_list_id: typing.Union[MetaOapg.properties.customer_list_id, str, schemas.Unset] = schemas.unset,
        engagement_domain: typing.Union[MetaOapg.properties.engagement_domain, list, tuple, schemas.Unset] = schemas.unset,
        engagement_type: typing.Union[MetaOapg.properties.engagement_type, str, schemas.Unset] = schemas.unset,
        event: typing.Union[MetaOapg.properties.event, str, schemas.Unset] = schemas.unset,
        event_data: typing.Union[MetaOapg.properties.event_data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        percentage: typing.Union[MetaOapg.properties.percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pin_id: typing.Union[MetaOapg.properties.pin_id, list, tuple, schemas.Unset] = schemas.unset,
        prefill: typing.Union[MetaOapg.properties.prefill, bool, schemas.Unset] = schemas.unset,
        retention_days: typing.Union[MetaOapg.properties.retention_days, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        seed_id: typing.Union[MetaOapg.properties.seed_id, list, tuple, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, list, tuple, schemas.Unset] = schemas.unset,
        visitor_source_id: typing.Union[MetaOapg.properties.visitor_source_id, str, schemas.Unset] = schemas.unset,
        event_source: typing.Union[MetaOapg.properties.event_source, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ingestion_source: typing.Union[MetaOapg.properties.ingestion_source, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        engager_type: typing.Union[MetaOapg.properties.engager_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        campaign_id: typing.Union[MetaOapg.properties.campaign_id, list, tuple, schemas.Unset] = schemas.unset,
        ad_id: typing.Union[MetaOapg.properties.ad_id, list, tuple, schemas.Unset] = schemas.unset,
        objective_type: typing.Union[MetaOapg.properties.objective_type, list, tuple, schemas.Unset] = schemas.unset,
        ad_account_id: typing.Union[MetaOapg.properties.ad_account_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AudienceRule':
        return super().__new__(
            cls,
            *args,
            country=country,
            customer_list_id=customer_list_id,
            engagement_domain=engagement_domain,
            engagement_type=engagement_type,
            event=event,
            event_data=event_data,
            percentage=percentage,
            pin_id=pin_id,
            prefill=prefill,
            retention_days=retention_days,
            seed_id=seed_id,
            url=url,
            visitor_source_id=visitor_source_id,
            event_source=event_source,
            ingestion_source=ingestion_source,
            engager_type=engager_type,
            campaign_id=campaign_id,
            ad_id=ad_id,
            objective_type=objective_type,
            ad_account_id=ad_account_id,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.currency import Currency
from pinterestsdk.model.objective_type import ObjectiveType
