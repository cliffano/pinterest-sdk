# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class TopVideoPinsAnalyticsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class date_availability(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        latest_available_timestamp = schemas.NumberSchema
                        is_realtime = schemas.BoolSchema
                        __annotations__ = {
                            "latest_available_timestamp": latest_available_timestamp,
                            "is_realtime": is_realtime,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["latest_available_timestamp"]) -> MetaOapg.properties.latest_available_timestamp: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["is_realtime"]) -> MetaOapg.properties.is_realtime: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["latest_available_timestamp", "is_realtime", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["latest_available_timestamp"]) -> typing.Union[MetaOapg.properties.latest_available_timestamp, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["is_realtime"]) -> typing.Union[MetaOapg.properties.is_realtime, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latest_available_timestamp", "is_realtime", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    latest_available_timestamp: typing.Union[MetaOapg.properties.latest_available_timestamp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    is_realtime: typing.Union[MetaOapg.properties.is_realtime, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'date_availability':
                    return super().__new__(
                        cls,
                        *args,
                        latest_available_timestamp=latest_available_timestamp,
                        is_realtime=is_realtime,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class pins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class metrics(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        additional_properties = schemas.NumberSchema
                                    
                                    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, float, ],
                                    ) -> 'metrics':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class data_status(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        @staticmethod
                                        def additional_properties() -> typing.Type['DataStatus']:
                                            return DataStatus
                                    
                                    def __getitem__(self, name: typing.Union[str, ]) -> 'DataStatus':
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    def get_item_oapg(self, name: typing.Union[str, ]) -> 'DataStatus':
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: 'DataStatus',
                                    ) -> 'data_status':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                pin_id = schemas.StrSchema
                                __annotations__ = {
                                    "metrics": metrics,
                                    "data_status": data_status,
                                    "pin_id": pin_id,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["data_status"]) -> MetaOapg.properties.data_status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["pin_id"]) -> MetaOapg.properties.pin_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["metrics", "data_status", "pin_id", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> typing.Union[MetaOapg.properties.metrics, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["data_status"]) -> typing.Union[MetaOapg.properties.data_status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["pin_id"]) -> typing.Union[MetaOapg.properties.pin_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metrics", "data_status", "pin_id", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            metrics: typing.Union[MetaOapg.properties.metrics, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            data_status: typing.Union[MetaOapg.properties.data_status, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            pin_id: typing.Union[MetaOapg.properties.pin_id, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                metrics=metrics,
                                data_status=data_status,
                                pin_id=pin_id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pins':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class sort_by(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SAVE": "SAVE",
                        "IMPRESSION": "IMPRESSION",
                        "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                        "VIDEO_MRC_VIEW": "VIDEO_MRC_VIEW",
                        "VIDEO_AVG_WATCH_TIME": "VIDEO_AVG_WATCH_TIME",
                        "VIDEO_V50_WATCH_TIME": "VIDEO_V50_WATCH_TIME",
                        "QUARTILE_95_PERCENT_VIEW": "QUARTILE_95_PERCENT_VIEW",
                        "VIDEO_10S_VIEW": "VIDEO_10S_VIEW",
                        "VIDEO_START": "VIDEO_START",
                    }
                
                @schemas.classproperty
                def SAVE(cls):
                    return cls("SAVE")
                
                @schemas.classproperty
                def IMPRESSION(cls):
                    return cls("IMPRESSION")
                
                @schemas.classproperty
                def OUTBOUND_CLICK(cls):
                    return cls("OUTBOUND_CLICK")
                
                @schemas.classproperty
                def VIDEO_MRC_VIEW(cls):
                    return cls("VIDEO_MRC_VIEW")
                
                @schemas.classproperty
                def VIDEO_AVG_WATCH_TIME(cls):
                    return cls("VIDEO_AVG_WATCH_TIME")
                
                @schemas.classproperty
                def VIDEO_V50_WATCH_TIME(cls):
                    return cls("VIDEO_V50_WATCH_TIME")
                
                @schemas.classproperty
                def QUARTILE_95_PERCENT_VIEW(cls):
                    return cls("QUARTILE_95_PERCENT_VIEW")
                
                @schemas.classproperty
                def VIDEO_10S_VIEW(cls):
                    return cls("VIDEO_10S_VIEW")
                
                @schemas.classproperty
                def VIDEO_START(cls):
                    return cls("VIDEO_START")
            __annotations__ = {
                "date_availability": date_availability,
                "pins": pins,
                "sort_by": sort_by,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_availability"]) -> MetaOapg.properties.date_availability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pins"]) -> MetaOapg.properties.pins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort_by"]) -> MetaOapg.properties.sort_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_availability", "pins", "sort_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_availability"]) -> typing.Union[MetaOapg.properties.date_availability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pins"]) -> typing.Union[MetaOapg.properties.pins, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort_by"]) -> typing.Union[MetaOapg.properties.sort_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_availability", "pins", "sort_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_availability: typing.Union[MetaOapg.properties.date_availability, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pins: typing.Union[MetaOapg.properties.pins, list, tuple, schemas.Unset] = schemas.unset,
        sort_by: typing.Union[MetaOapg.properties.sort_by, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TopVideoPinsAnalyticsResponse':
        return super().__new__(
            cls,
            *args,
            date_availability=date_availability,
            pins=pins,
            sort_by=sort_by,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.data_status import DataStatus
