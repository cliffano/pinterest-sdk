# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsFeedIngestionInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            IN_STOCK = schemas.IntSchema
            OUT_OF_STOCK = schemas.IntSchema
            PREORDER = schemas.IntSchema
            __annotations__ = {
                "IN_STOCK": IN_STOCK,
                "OUT_OF_STOCK": OUT_OF_STOCK,
                "PREORDER": PREORDER,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IN_STOCK"]) -> MetaOapg.properties.IN_STOCK: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OUT_OF_STOCK"]) -> MetaOapg.properties.OUT_OF_STOCK: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PREORDER"]) -> MetaOapg.properties.PREORDER: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["IN_STOCK", "OUT_OF_STOCK", "PREORDER", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IN_STOCK"]) -> typing.Union[MetaOapg.properties.IN_STOCK, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OUT_OF_STOCK"]) -> typing.Union[MetaOapg.properties.OUT_OF_STOCK, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PREORDER"]) -> typing.Union[MetaOapg.properties.PREORDER, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["IN_STOCK", "OUT_OF_STOCK", "PREORDER", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        IN_STOCK: typing.Union[MetaOapg.properties.IN_STOCK, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OUT_OF_STOCK: typing.Union[MetaOapg.properties.OUT_OF_STOCK, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PREORDER: typing.Union[MetaOapg.properties.PREORDER, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsFeedIngestionInfo':
        return super().__new__(
            cls,
            *args,
            IN_STOCK=IN_STOCK,
            OUT_OF_STOCK=OUT_OF_STOCK,
            PREORDER=PREORDER,
            _configuration=_configuration,
            **kwargs,
        )
