# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsProductGroupPricingCriteria(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "values",
        }
        
        class properties:
            
            
            class values(
                schemas.NumberSchema
            ):
                pass
            inclusion = schemas.BoolSchema
            negated = schemas.BoolSchema
            __annotations__ = {
                "values": values,
                "inclusion": inclusion,
                "negated": negated,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    values: MetaOapg.properties.values
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inclusion"]) -> MetaOapg.properties.inclusion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["negated"]) -> MetaOapg.properties.negated: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["values"], typing_extensions.Literal["inclusion"], typing_extensions.Literal["negated"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inclusion"]) -> typing.Union[MetaOapg.properties.inclusion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["negated"]) -> typing.Union[MetaOapg.properties.negated, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["values"], typing_extensions.Literal["inclusion"], typing_extensions.Literal["negated"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        values: typing.Union[MetaOapg.properties.values, decimal.Decimal, int, float, ],
        inclusion: typing.Union[MetaOapg.properties.inclusion, bool, schemas.Unset] = schemas.unset,
        negated: typing.Union[MetaOapg.properties.negated, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CatalogsProductGroupPricingCriteria':
        return super().__new__(
            cls,
            *args,
            values=values,
            inclusion=inclusion,
            negated=negated,
            _configuration=_configuration,
        )
