# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class PinMedia(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Pin media objects.
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'media_type': {
                    'PinMediaWithImage': PinMediaWithImage,
                    'PinMediaWithImageAndVideo': PinMediaWithImageAndVideo,
                    'PinMediaWithImages': PinMediaWithImages,
                    'PinMediaWithVideo': PinMediaWithVideo,
                    'PinMediaWithVideos': PinMediaWithVideos,
                    'image': PinMediaWithImage,
                    'multiple_images': PinMediaWithImages,
                    'multiple_mixed': PinMediaWithImageAndVideo,
                    'multiple_videos': PinMediaWithVideos,
                    'video': PinMediaWithVideo,
                }
            }
        
        class properties:
            media_type = schemas.StrSchema
            __annotations__ = {
                "media_type": media_type,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["media_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> typing.Union[MetaOapg.properties.media_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["media_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        media_type: typing.Union[MetaOapg.properties.media_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PinMedia':
        return super().__new__(
            cls,
            *args,
            media_type=media_type,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.pin_media_with_image import PinMediaWithImage
from pinterestsdk.model.pin_media_with_image_and_video import PinMediaWithImageAndVideo
from pinterestsdk.model.pin_media_with_images import PinMediaWithImages
from pinterestsdk.model.pin_media_with_video import PinMediaWithVideo
from pinterestsdk.model.pin_media_with_videos import PinMediaWithVideos
