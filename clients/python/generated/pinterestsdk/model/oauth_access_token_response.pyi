# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class OauthAccessTokenResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A successful OAuth access token response.
    """


    class MetaOapg:
        required = {
            "access_token",
            "scope",
            "token_type",
            "expires_in",
        }
        
        @staticmethod
        def discriminator():
            return {
                'response_type': {
                    'OauthAccessTokenResponseCode': OauthAccessTokenResponseCode,
                    'OauthAccessTokenResponseRefresh': OauthAccessTokenResponseRefresh,
                    'authorization_code': OauthAccessTokenResponseCode,
                    'refresh_token': OauthAccessTokenResponseRefresh,
                }
            }
        
        class properties:
            access_token = schemas.StrSchema
            token_type = schemas.StrSchema
            expires_in = schemas.IntSchema
            scope = schemas.StrSchema
            
            
            class response_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUTHORIZATION_CODE(cls):
                    return cls("authorization_code")
                
                @schemas.classproperty
                def REFRESH_TOKEN(cls):
                    return cls("refresh_token")
            __annotations__ = {
                "access_token": access_token,
                "token_type": token_type,
                "expires_in": expires_in,
                "scope": scope,
                "response_type": response_type,
            }
    
    access_token: MetaOapg.properties.access_token
    scope: MetaOapg.properties.scope
    token_type: MetaOapg.properties.token_type
    expires_in: MetaOapg.properties.expires_in
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_type"]) -> MetaOapg.properties.token_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires_in"]) -> MetaOapg.properties.expires_in: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response_type"]) -> MetaOapg.properties.response_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_token", "token_type", "expires_in", "scope", "response_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token"]) -> MetaOapg.properties.access_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_type"]) -> MetaOapg.properties.token_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires_in"]) -> MetaOapg.properties.expires_in: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response_type"]) -> typing.Union[MetaOapg.properties.response_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_token", "token_type", "expires_in", "scope", "response_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        access_token: typing.Union[MetaOapg.properties.access_token, str, ],
        scope: typing.Union[MetaOapg.properties.scope, str, ],
        token_type: typing.Union[MetaOapg.properties.token_type, str, ],
        expires_in: typing.Union[MetaOapg.properties.expires_in, decimal.Decimal, int, ],
        response_type: typing.Union[MetaOapg.properties.response_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OauthAccessTokenResponse':
        return super().__new__(
            cls,
            *args,
            access_token=access_token,
            scope=scope,
            token_type=token_type,
            expires_in=expires_in,
            response_type=response_type,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.oauth_access_token_response_code import OauthAccessTokenResponseCode
from pinterestsdk.model.oauth_access_token_response_refresh import OauthAccessTokenResponseRefresh
