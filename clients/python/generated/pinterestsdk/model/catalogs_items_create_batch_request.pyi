# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsItemsCreateBatchRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request object to create catalogs items
    """


    class MetaOapg:
        required = {
            "country",
            "language",
            "items",
            "operation",
        }
        
        class properties:
        
            @staticmethod
            def country() -> typing.Type['Country']:
                return Country
        
            @staticmethod
            def language() -> typing.Type['Language']:
                return Language
        
            @staticmethod
            def operation() -> typing.Type['BatchOperation']:
                return BatchOperation
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ItemCreateBatchRecord']:
                        return ItemCreateBatchRecord
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ItemCreateBatchRecord'], typing.List['ItemCreateBatchRecord']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ItemCreateBatchRecord':
                    return super().__getitem__(i)
            __annotations__ = {
                "country": country,
                "language": language,
                "operation": operation,
                "items": items,
            }
    
    country: 'Country'
    language: 'Language'
    items: MetaOapg.properties.items
    operation: 'BatchOperation'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'Country': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> 'Language': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> 'BatchOperation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country", "language", "operation", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> 'Country': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> 'Language': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> 'BatchOperation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country", "language", "operation", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: 'Country',
        language: 'Language',
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        operation: 'BatchOperation',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsItemsCreateBatchRequest':
        return super().__new__(
            cls,
            *args,
            country=country,
            language=language,
            items=items,
            operation=operation,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.batch_operation import BatchOperation
from pinterestsdk.model.country import Country
from pinterestsdk.model.item_create_batch_record import ItemCreateBatchRecord
from pinterestsdk.model.language import Language
