# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsProductGroupProductCounts(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Product counts for a CatalogsProductGroup
    """


    class MetaOapg:
        required = {
            "out_of_stock",
            "total",
            "in_stock",
            "preorder",
        }
        
        class properties:
            
            
            class in_stock(
                schemas.NumberSchema
            ):
                pass
            
            
            class out_of_stock(
                schemas.NumberSchema
            ):
                pass
            
            
            class preorder(
                schemas.NumberSchema
            ):
                pass
            
            
            class total(
                schemas.NumberSchema
            ):
                pass
            __annotations__ = {
                "in_stock": in_stock,
                "out_of_stock": out_of_stock,
                "preorder": preorder,
                "total": total,
            }
    
    out_of_stock: MetaOapg.properties.out_of_stock
    total: MetaOapg.properties.total
    in_stock: MetaOapg.properties.in_stock
    preorder: MetaOapg.properties.preorder
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["in_stock"]) -> MetaOapg.properties.in_stock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["out_of_stock"]) -> MetaOapg.properties.out_of_stock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preorder"]) -> MetaOapg.properties.preorder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["in_stock", "out_of_stock", "preorder", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["in_stock"]) -> MetaOapg.properties.in_stock: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["out_of_stock"]) -> MetaOapg.properties.out_of_stock: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preorder"]) -> MetaOapg.properties.preorder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["in_stock", "out_of_stock", "preorder", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        out_of_stock: typing.Union[MetaOapg.properties.out_of_stock, decimal.Decimal, int, float, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, ],
        in_stock: typing.Union[MetaOapg.properties.in_stock, decimal.Decimal, int, float, ],
        preorder: typing.Union[MetaOapg.properties.preorder, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsProductGroupProductCounts':
        return super().__new__(
            cls,
            *args,
            out_of_stock=out_of_stock,
            total=total,
            in_stock=in_stock,
            preorder=preorder,
            _configuration=_configuration,
            **kwargs,
        )
