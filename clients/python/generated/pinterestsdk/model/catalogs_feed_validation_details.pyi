# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsFeedValidationDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "warnings",
            "errors",
        }
        
        class properties:
        
            @staticmethod
            def errors() -> typing.Type['CatalogsFeedValidationErrors']:
                return CatalogsFeedValidationErrors
        
            @staticmethod
            def warnings() -> typing.Type['CatalogsFeedValidationWarnings']:
                return CatalogsFeedValidationWarnings
            __annotations__ = {
                "errors": errors,
                "warnings": warnings,
            }
    
    warnings: 'CatalogsFeedValidationWarnings'
    errors: 'CatalogsFeedValidationErrors'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> 'CatalogsFeedValidationErrors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warnings"]) -> 'CatalogsFeedValidationWarnings': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errors", "warnings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> 'CatalogsFeedValidationErrors': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warnings"]) -> 'CatalogsFeedValidationWarnings': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errors", "warnings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        warnings: 'CatalogsFeedValidationWarnings',
        errors: 'CatalogsFeedValidationErrors',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsFeedValidationDetails':
        return super().__new__(
            cls,
            *args,
            warnings=warnings,
            errors=errors,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.catalogs_feed_validation_errors import CatalogsFeedValidationErrors
from pinterestsdk.model.catalogs_feed_validation_warnings import CatalogsFeedValidationWarnings
