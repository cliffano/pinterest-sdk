# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AdsAnalyticsMetricsFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "field",
            "values",
            "operator",
        }
        
        class properties:
        
            @staticmethod
            def field() -> typing.Type['AdsAnalyticsFilterColumn']:
                return AdsAnalyticsFilterColumn
        
            @staticmethod
            def operator() -> typing.Type['AdsAnalyticsFilterOperator']:
                return AdsAnalyticsFilterOperator
            
            
            class values(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'values':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "field": field,
                "operator": operator,
                "values": values,
            }
    
    field: 'AdsAnalyticsFilterColumn'
    values: MetaOapg.properties.values
    operator: 'AdsAnalyticsFilterOperator'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> 'AdsAnalyticsFilterColumn': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> 'AdsAnalyticsFilterOperator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["field", "operator", "values", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> 'AdsAnalyticsFilterColumn': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> 'AdsAnalyticsFilterOperator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["field", "operator", "values", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        field: 'AdsAnalyticsFilterColumn',
        values: typing.Union[MetaOapg.properties.values, list, tuple, ],
        operator: 'AdsAnalyticsFilterOperator',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdsAnalyticsMetricsFilter':
        return super().__new__(
            cls,
            *args,
            field=field,
            values=values,
            operator=operator,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.ads_analytics_filter_column import AdsAnalyticsFilterColumn
from pinterestsdk.model.ads_analytics_filter_operator import AdsAnalyticsFilterOperator
