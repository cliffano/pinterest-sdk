# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class AdGroupResponse(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class id(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class ad_account_id(
                        schemas.StrSchema
                    ):
                        pass
                    created_time = schemas.IntSchema
                    updated_time = schemas.IntSchema
                    type = schemas.StrSchema
                    
                    
                    class conversion_learning_mode_type(
                        schemas.EnumBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "NOT_ACTIVE": "NOT_ACTIVE",
                                "ACTIVE": "ACTIVE",
                                schemas.NoneClass.NONE: "NONE",
                            }
                        
                        @schemas.classproperty
                        def NOT_ACTIVE(cls):
                            return cls("NOT_ACTIVE")
                        
                        @schemas.classproperty
                        def ACTIVE(cls):
                            return cls("ACTIVE")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls(None)
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'conversion_learning_mode_type':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class summary_status(
                        schemas.ComposedBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    AdGroupSummaryStatus,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'summary_status':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    feed_profile_id = schemas.StrSchema
                    dca_assets = schemas.AnyTypeSchema
                    __annotations__ = {
                        "id": id,
                        "ad_account_id": ad_account_id,
                        "created_time": created_time,
                        "updated_time": updated_time,
                        "type": type,
                        "conversion_learning_mode_type": conversion_learning_mode_type,
                        "summary_status": summary_status,
                        "feed_profile_id": feed_profile_id,
                        "dca_assets": dca_assets,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ad_account_id"]) -> MetaOapg.properties.ad_account_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["conversion_learning_mode_type"]) -> MetaOapg.properties.conversion_learning_mode_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["summary_status"]) -> MetaOapg.properties.summary_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["feed_profile_id"]) -> MetaOapg.properties.feed_profile_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dca_assets"]) -> MetaOapg.properties.dca_assets: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "ad_account_id", "created_time", "updated_time", "type", "conversion_learning_mode_type", "summary_status", "feed_profile_id", "dca_assets", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ad_account_id"]) -> typing.Union[MetaOapg.properties.ad_account_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> typing.Union[MetaOapg.properties.created_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> typing.Union[MetaOapg.properties.updated_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["conversion_learning_mode_type"]) -> typing.Union[MetaOapg.properties.conversion_learning_mode_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["summary_status"]) -> typing.Union[MetaOapg.properties.summary_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["feed_profile_id"]) -> typing.Union[MetaOapg.properties.feed_profile_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dca_assets"]) -> typing.Union[MetaOapg.properties.dca_assets, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "ad_account_id", "created_time", "updated_time", "type", "conversion_learning_mode_type", "summary_status", "feed_profile_id", "dca_assets", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                ad_account_id: typing.Union[MetaOapg.properties.ad_account_id, str, schemas.Unset] = schemas.unset,
                created_time: typing.Union[MetaOapg.properties.created_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                updated_time: typing.Union[MetaOapg.properties.updated_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                conversion_learning_mode_type: typing.Union[MetaOapg.properties.conversion_learning_mode_type, None, str, schemas.Unset] = schemas.unset,
                summary_status: typing.Union[MetaOapg.properties.summary_status, str, schemas.Unset] = schemas.unset,
                feed_profile_id: typing.Union[MetaOapg.properties.feed_profile_id, str, schemas.Unset] = schemas.unset,
                dca_assets: typing.Union[MetaOapg.properties.dca_assets, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    id=id,
                    ad_account_id=ad_account_id,
                    created_time=created_time,
                    updated_time=updated_time,
                    type=type,
                    conversion_learning_mode_type=conversion_learning_mode_type,
                    summary_status=summary_status,
                    feed_profile_id=feed_profile_id,
                    dca_assets=dca_assets,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AdGroupCommon,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdGroupResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.ad_group_common import AdGroupCommon
from pinterestsdk.model.ad_group_summary_status import AdGroupSummaryStatus
