# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsItemValidationDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "attribute_name",
            "provided_value",
        }
        
        class properties:
        
            @staticmethod
            def attribute_name() -> typing.Type['NullableCatalogsItemFieldType']:
                return NullableCatalogsItemFieldType
            
            
            class provided_value(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'provided_value':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "attribute_name": attribute_name,
                "provided_value": provided_value,
            }
    
    attribute_name: 'NullableCatalogsItemFieldType'
    provided_value: MetaOapg.properties.provided_value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_name"]) -> 'NullableCatalogsItemFieldType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provided_value"]) -> MetaOapg.properties.provided_value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attribute_name", "provided_value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_name"]) -> 'NullableCatalogsItemFieldType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provided_value"]) -> MetaOapg.properties.provided_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attribute_name", "provided_value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        attribute_name: 'NullableCatalogsItemFieldType',
        provided_value: typing.Union[MetaOapg.properties.provided_value, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsItemValidationDetails':
        return super().__new__(
            cls,
            *args,
            attribute_name=attribute_name,
            provided_value=provided_value,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.nullable_catalogs_item_field_type import NullableCatalogsItemFieldType
