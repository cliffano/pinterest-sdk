# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsFeed(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Catalogs Feed object
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "credentials",
                    "format",
                    "name",
                    "preferred_processing_schedule",
                    "default_locale",
                    "location",
                    "default_currency",
                    "default_country",
                    "default_availability",
                    "status",
                }
                
                class properties:
                
                    @staticmethod
                    def default_country() -> typing.Type['Country']:
                        return Country
                
                    @staticmethod
                    def default_availability() -> typing.Type['ProductAvailabilityType']:
                        return ProductAvailabilityType
                
                    @staticmethod
                    def default_currency() -> typing.Type['NullableCurrency']:
                        return NullableCurrency
                    
                    
                    class name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def format() -> typing.Type['CatalogsFormat']:
                        return CatalogsFormat
                    default_locale = schemas.StrSchema
                
                    @staticmethod
                    def credentials() -> typing.Type['CatalogsFeedCredentials']:
                        return CatalogsFeedCredentials
                    location = schemas.StrSchema
                
                    @staticmethod
                    def preferred_processing_schedule() -> typing.Type['CatalogsFeedProcessingSchedule']:
                        return CatalogsFeedProcessingSchedule
                
                    @staticmethod
                    def status() -> typing.Type['CatalogsStatus']:
                        return CatalogsStatus
                    __annotations__ = {
                        "default_country": default_country,
                        "default_availability": default_availability,
                        "default_currency": default_currency,
                        "name": name,
                        "format": format,
                        "default_locale": default_locale,
                        "credentials": credentials,
                        "location": location,
                        "preferred_processing_schedule": preferred_processing_schedule,
                        "status": status,
                    }
            
            credentials: 'CatalogsFeedCredentials'
            format: 'CatalogsFormat'
            name: MetaOapg.properties.name
            preferred_processing_schedule: 'CatalogsFeedProcessingSchedule'
            default_locale: MetaOapg.properties.default_locale
            location: MetaOapg.properties.location
            default_currency: 'NullableCurrency'
            default_country: 'Country'
            default_availability: 'ProductAvailabilityType'
            status: 'CatalogsStatus'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["default_country"]) -> 'Country': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["default_availability"]) -> 'ProductAvailabilityType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["default_currency"]) -> 'NullableCurrency': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["format"]) -> 'CatalogsFormat': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["default_locale"]) -> MetaOapg.properties.default_locale: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["credentials"]) -> 'CatalogsFeedCredentials': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["preferred_processing_schedule"]) -> 'CatalogsFeedProcessingSchedule': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'CatalogsStatus': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["default_country", "default_availability", "default_currency", "name", "format", "default_locale", "credentials", "location", "preferred_processing_schedule", "status", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["default_country"]) -> 'Country': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["default_availability"]) -> 'ProductAvailabilityType': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["default_currency"]) -> 'NullableCurrency': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> 'CatalogsFormat': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["default_locale"]) -> MetaOapg.properties.default_locale: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["credentials"]) -> 'CatalogsFeedCredentials': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["preferred_processing_schedule"]) -> 'CatalogsFeedProcessingSchedule': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'CatalogsStatus': ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["default_country", "default_availability", "default_currency", "name", "format", "default_locale", "credentials", "location", "preferred_processing_schedule", "status", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                credentials: 'CatalogsFeedCredentials',
                format: 'CatalogsFormat',
                name: typing.Union[MetaOapg.properties.name, None, str, ],
                preferred_processing_schedule: 'CatalogsFeedProcessingSchedule',
                default_locale: typing.Union[MetaOapg.properties.default_locale, str, ],
                location: typing.Union[MetaOapg.properties.location, str, ],
                default_currency: 'NullableCurrency',
                default_country: 'Country',
                default_availability: 'ProductAvailabilityType',
                status: 'CatalogsStatus',
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    credentials=credentials,
                    format=format,
                    name=name,
                    preferred_processing_schedule=preferred_processing_schedule,
                    default_locale=default_locale,
                    location=location,
                    default_currency=default_currency,
                    default_country=default_country,
                    default_availability=default_availability,
                    status=status,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CatalogsDbItem,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsFeed':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.catalogs_db_item import CatalogsDbItem
from pinterestsdk.model.catalogs_feed_credentials import CatalogsFeedCredentials
from pinterestsdk.model.catalogs_feed_processing_schedule import CatalogsFeedProcessingSchedule
from pinterestsdk.model.catalogs_format import CatalogsFormat
from pinterestsdk.model.catalogs_status import CatalogsStatus
from pinterestsdk.model.country import Country
from pinterestsdk.model.nullable_currency import NullableCurrency
from pinterestsdk.model.product_availability_type import ProductAvailabilityType
