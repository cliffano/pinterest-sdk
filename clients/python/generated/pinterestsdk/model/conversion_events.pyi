# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class ConversionEvents(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A list of events (one or more) encapsulated by a data object.
    """


    class MetaOapg:
        required = {
            "data",
        }
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "action_source",
                                "event_id",
                                "event_name",
                                "user_data",
                                "event_time",
                            }
                            
                            class properties:
                                
                                
                                class event_name(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def ADD_TO_CART(cls):
                                        return cls("add_to_cart")
                                    
                                    @schemas.classproperty
                                    def CHECKOUT(cls):
                                        return cls("checkout")
                                    
                                    @schemas.classproperty
                                    def CUSTOM(cls):
                                        return cls("custom")
                                    
                                    @schemas.classproperty
                                    def LEAD(cls):
                                        return cls("lead")
                                    
                                    @schemas.classproperty
                                    def PAGE_VISIT(cls):
                                        return cls("page_visit")
                                    
                                    @schemas.classproperty
                                    def SEARCH(cls):
                                        return cls("search")
                                    
                                    @schemas.classproperty
                                    def SIGNUP(cls):
                                        return cls("signup")
                                    
                                    @schemas.classproperty
                                    def VIEW_CATEGORY(cls):
                                        return cls("view_category")
                                    
                                    @schemas.classproperty
                                    def WATCH_VIDEO(cls):
                                        return cls("watch_video")
                                
                                
                                class action_source(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def APP_ANDROID(cls):
                                        return cls("app_android")
                                    
                                    @schemas.classproperty
                                    def APP_IOS(cls):
                                        return cls("app_ios")
                                    
                                    @schemas.classproperty
                                    def WEB(cls):
                                        return cls("web")
                                    
                                    @schemas.classproperty
                                    def OFFLINE(cls):
                                        return cls("offline")
                                event_time = schemas.Int64Schema
                                event_id = schemas.StrSchema
                                
                                
                                class event_source_url(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'event_source_url':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                opt_out = schemas.BoolSchema
                                
                                
                                class partner_name(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'partner_name':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                            
                                @staticmethod
                                def user_data() -> typing.Type['ConversionEventsUserData']:
                                    return ConversionEventsUserData
                                
                                
                                class custom_data(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class currency(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'currency':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class value(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'value':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class content_ids(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'content_ids':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class contents(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                item_price = schemas.StrSchema
                                                                quantity = schemas.Int64Schema
                                                                __annotations__ = {
                                                                    "item_price": item_price,
                                                                    "quantity": quantity,
                                                                }
                                                            additional_properties = schemas.NotAnyTypeSchema
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["item_price"]) -> MetaOapg.properties.item_price: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_price"], typing_extensions.Literal["quantity"], ]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["item_price"]) -> typing.Union[MetaOapg.properties.item_price, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_price"], typing_extensions.Literal["quantity"], ]):
                                                            return super().get_item_oapg(name)
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            item_price: typing.Union[MetaOapg.properties.item_price, str, schemas.Unset] = schemas.unset,
                                                            quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                item_price=item_price,
                                                                quantity=quantity,
                                                                _configuration=_configuration,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'contents':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            num_items = schemas.Int64Schema
                                            
                                            
                                            class order_id(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'order_id':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class search_string(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'search_string':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class opt_out_type(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'opt_out_type':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class np(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'np':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            __annotations__ = {
                                                "currency": currency,
                                                "value": value,
                                                "content_ids": content_ids,
                                                "contents": contents,
                                                "num_items": num_items,
                                                "order_id": order_id,
                                                "search_string": search_string,
                                                "opt_out_type": opt_out_type,
                                                "np": np,
                                            }
                                        additional_properties = schemas.NotAnyTypeSchema
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["content_ids"]) -> MetaOapg.properties.content_ids: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["contents"]) -> MetaOapg.properties.contents: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["num_items"]) -> MetaOapg.properties.num_items: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["search_string"]) -> MetaOapg.properties.search_string: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["opt_out_type"]) -> MetaOapg.properties.opt_out_type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["np"]) -> MetaOapg.properties.np: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency"], typing_extensions.Literal["value"], typing_extensions.Literal["content_ids"], typing_extensions.Literal["contents"], typing_extensions.Literal["num_items"], typing_extensions.Literal["order_id"], typing_extensions.Literal["search_string"], typing_extensions.Literal["opt_out_type"], typing_extensions.Literal["np"], ]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["content_ids"]) -> typing.Union[MetaOapg.properties.content_ids, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["contents"]) -> typing.Union[MetaOapg.properties.contents, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["num_items"]) -> typing.Union[MetaOapg.properties.num_items, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> typing.Union[MetaOapg.properties.order_id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["search_string"]) -> typing.Union[MetaOapg.properties.search_string, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["opt_out_type"]) -> typing.Union[MetaOapg.properties.opt_out_type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["np"]) -> typing.Union[MetaOapg.properties.np, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency"], typing_extensions.Literal["value"], typing_extensions.Literal["content_ids"], typing_extensions.Literal["contents"], typing_extensions.Literal["num_items"], typing_extensions.Literal["order_id"], typing_extensions.Literal["search_string"], typing_extensions.Literal["opt_out_type"], typing_extensions.Literal["np"], ]):
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        currency: typing.Union[MetaOapg.properties.currency, None, str, schemas.Unset] = schemas.unset,
                                        value: typing.Union[MetaOapg.properties.value, None, str, schemas.Unset] = schemas.unset,
                                        content_ids: typing.Union[MetaOapg.properties.content_ids, list, tuple, schemas.Unset] = schemas.unset,
                                        contents: typing.Union[MetaOapg.properties.contents, list, tuple, schemas.Unset] = schemas.unset,
                                        num_items: typing.Union[MetaOapg.properties.num_items, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        order_id: typing.Union[MetaOapg.properties.order_id, None, str, schemas.Unset] = schemas.unset,
                                        search_string: typing.Union[MetaOapg.properties.search_string, None, str, schemas.Unset] = schemas.unset,
                                        opt_out_type: typing.Union[MetaOapg.properties.opt_out_type, None, str, schemas.Unset] = schemas.unset,
                                        np: typing.Union[MetaOapg.properties.np, None, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'custom_data':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            currency=currency,
                                            value=value,
                                            content_ids=content_ids,
                                            contents=contents,
                                            num_items=num_items,
                                            order_id=order_id,
                                            search_string=search_string,
                                            opt_out_type=opt_out_type,
                                            np=np,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class app_id(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'app_id':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class app_name(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'app_name':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class app_version(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'app_version':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class device_brand(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'device_brand':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class device_carrier(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'device_carrier':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class device_model(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'device_model':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class device_type(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'device_type':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class os_version(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'os_version':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                wifi = schemas.BoolSchema
                                
                                
                                class language(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'language':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "event_name": event_name,
                                    "action_source": action_source,
                                    "event_time": event_time,
                                    "event_id": event_id,
                                    "event_source_url": event_source_url,
                                    "opt_out": opt_out,
                                    "partner_name": partner_name,
                                    "user_data": user_data,
                                    "custom_data": custom_data,
                                    "app_id": app_id,
                                    "app_name": app_name,
                                    "app_version": app_version,
                                    "device_brand": device_brand,
                                    "device_carrier": device_carrier,
                                    "device_model": device_model,
                                    "device_type": device_type,
                                    "os_version": os_version,
                                    "wifi": wifi,
                                    "language": language,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        action_source: MetaOapg.properties.action_source
                        event_id: MetaOapg.properties.event_id
                        event_name: MetaOapg.properties.event_name
                        user_data: 'ConversionEventsUserData'
                        event_time: MetaOapg.properties.event_time
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["action_source"]) -> MetaOapg.properties.action_source: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["event_name"]) -> MetaOapg.properties.event_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user_data"]) -> 'ConversionEventsUserData': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["event_time"]) -> MetaOapg.properties.event_time: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["event_source_url"]) -> MetaOapg.properties.event_source_url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["opt_out"]) -> MetaOapg.properties.opt_out: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["partner_name"]) -> MetaOapg.properties.partner_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["custom_data"]) -> MetaOapg.properties.custom_data: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["app_name"]) -> MetaOapg.properties.app_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["app_version"]) -> MetaOapg.properties.app_version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_brand"]) -> MetaOapg.properties.device_brand: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_carrier"]) -> MetaOapg.properties.device_carrier: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_model"]) -> MetaOapg.properties.device_model: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["os_version"]) -> MetaOapg.properties.os_version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["wifi"]) -> MetaOapg.properties.wifi: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["action_source"], typing_extensions.Literal["event_id"], typing_extensions.Literal["event_name"], typing_extensions.Literal["user_data"], typing_extensions.Literal["event_time"], typing_extensions.Literal["event_source_url"], typing_extensions.Literal["opt_out"], typing_extensions.Literal["partner_name"], typing_extensions.Literal["custom_data"], typing_extensions.Literal["app_id"], typing_extensions.Literal["app_name"], typing_extensions.Literal["app_version"], typing_extensions.Literal["device_brand"], typing_extensions.Literal["device_carrier"], typing_extensions.Literal["device_model"], typing_extensions.Literal["device_type"], typing_extensions.Literal["os_version"], typing_extensions.Literal["wifi"], typing_extensions.Literal["language"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["action_source"]) -> MetaOapg.properties.action_source: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["event_name"]) -> MetaOapg.properties.event_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user_data"]) -> 'ConversionEventsUserData': ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["event_time"]) -> MetaOapg.properties.event_time: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["event_source_url"]) -> typing.Union[MetaOapg.properties.event_source_url, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["opt_out"]) -> typing.Union[MetaOapg.properties.opt_out, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["partner_name"]) -> typing.Union[MetaOapg.properties.partner_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["custom_data"]) -> typing.Union[MetaOapg.properties.custom_data, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> typing.Union[MetaOapg.properties.app_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["app_name"]) -> typing.Union[MetaOapg.properties.app_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["app_version"]) -> typing.Union[MetaOapg.properties.app_version, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_brand"]) -> typing.Union[MetaOapg.properties.device_brand, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_carrier"]) -> typing.Union[MetaOapg.properties.device_carrier, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_model"]) -> typing.Union[MetaOapg.properties.device_model, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> typing.Union[MetaOapg.properties.device_type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["os_version"]) -> typing.Union[MetaOapg.properties.os_version, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["wifi"]) -> typing.Union[MetaOapg.properties.wifi, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action_source"], typing_extensions.Literal["event_id"], typing_extensions.Literal["event_name"], typing_extensions.Literal["user_data"], typing_extensions.Literal["event_time"], typing_extensions.Literal["event_source_url"], typing_extensions.Literal["opt_out"], typing_extensions.Literal["partner_name"], typing_extensions.Literal["custom_data"], typing_extensions.Literal["app_id"], typing_extensions.Literal["app_name"], typing_extensions.Literal["app_version"], typing_extensions.Literal["device_brand"], typing_extensions.Literal["device_carrier"], typing_extensions.Literal["device_model"], typing_extensions.Literal["device_type"], typing_extensions.Literal["os_version"], typing_extensions.Literal["wifi"], typing_extensions.Literal["language"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            action_source: typing.Union[MetaOapg.properties.action_source, str, ],
                            event_id: typing.Union[MetaOapg.properties.event_id, str, ],
                            event_name: typing.Union[MetaOapg.properties.event_name, str, ],
                            user_data: 'ConversionEventsUserData',
                            event_time: typing.Union[MetaOapg.properties.event_time, decimal.Decimal, int, ],
                            event_source_url: typing.Union[MetaOapg.properties.event_source_url, None, str, schemas.Unset] = schemas.unset,
                            opt_out: typing.Union[MetaOapg.properties.opt_out, bool, schemas.Unset] = schemas.unset,
                            partner_name: typing.Union[MetaOapg.properties.partner_name, None, str, schemas.Unset] = schemas.unset,
                            custom_data: typing.Union[MetaOapg.properties.custom_data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            app_id: typing.Union[MetaOapg.properties.app_id, None, str, schemas.Unset] = schemas.unset,
                            app_name: typing.Union[MetaOapg.properties.app_name, None, str, schemas.Unset] = schemas.unset,
                            app_version: typing.Union[MetaOapg.properties.app_version, None, str, schemas.Unset] = schemas.unset,
                            device_brand: typing.Union[MetaOapg.properties.device_brand, None, str, schemas.Unset] = schemas.unset,
                            device_carrier: typing.Union[MetaOapg.properties.device_carrier, None, str, schemas.Unset] = schemas.unset,
                            device_model: typing.Union[MetaOapg.properties.device_model, None, str, schemas.Unset] = schemas.unset,
                            device_type: typing.Union[MetaOapg.properties.device_type, None, str, schemas.Unset] = schemas.unset,
                            os_version: typing.Union[MetaOapg.properties.os_version, None, str, schemas.Unset] = schemas.unset,
                            wifi: typing.Union[MetaOapg.properties.wifi, bool, schemas.Unset] = schemas.unset,
                            language: typing.Union[MetaOapg.properties.language, None, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                action_source=action_source,
                                event_id=event_id,
                                event_name=event_name,
                                user_data=user_data,
                                event_time=event_time,
                                event_source_url=event_source_url,
                                opt_out=opt_out,
                                partner_name=partner_name,
                                custom_data=custom_data,
                                app_id=app_id,
                                app_name=app_name,
                                app_version=app_version,
                                device_brand=device_brand,
                                device_carrier=device_carrier,
                                device_model=device_model,
                                device_type=device_type,
                                os_version=os_version,
                                wifi=wifi,
                                language=language,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "data": data,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    data: MetaOapg.properties.data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ConversionEvents':
        return super().__new__(
            cls,
            *args,
            data=data,
            _configuration=_configuration,
        )

from pinterestsdk.model.conversion_events_user_data import ConversionEventsUserData
