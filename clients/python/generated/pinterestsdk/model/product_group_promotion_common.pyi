# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class ProductGroupPromotionCommon(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['EntityStatus']:
                return EntityStatus
            
            
            class tracking_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tracking_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class catalogs_product_group_id(
                schemas.StrSchema
            ):
                pass
            catalogs_product_group_name = schemas.StrSchema
        
            @staticmethod
            def creative_type() -> typing.Type['CreativeType']:
                return CreativeType
            
            
            class collections_hero_pin_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collections_hero_pin_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class collections_hero_destination_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collections_hero_destination_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class slideshow_collections_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slideshow_collections_title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class slideshow_collections_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'slideshow_collections_description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_mdl(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_mdl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "status": status,
                "tracking_url": tracking_url,
                "catalogs_product_group_id": catalogs_product_group_id,
                "catalogs_product_group_name": catalogs_product_group_name,
                "creative_type": creative_type,
                "collections_hero_pin_id": collections_hero_pin_id,
                "collections_hero_destination_url": collections_hero_destination_url,
                "slideshow_collections_title": slideshow_collections_title,
                "slideshow_collections_description": slideshow_collections_description,
                "is_mdl": is_mdl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'EntityStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_url"]) -> MetaOapg.properties.tracking_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalogs_product_group_id"]) -> MetaOapg.properties.catalogs_product_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalogs_product_group_name"]) -> MetaOapg.properties.catalogs_product_group_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creative_type"]) -> 'CreativeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collections_hero_pin_id"]) -> MetaOapg.properties.collections_hero_pin_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collections_hero_destination_url"]) -> MetaOapg.properties.collections_hero_destination_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slideshow_collections_title"]) -> MetaOapg.properties.slideshow_collections_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slideshow_collections_description"]) -> MetaOapg.properties.slideshow_collections_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_mdl"]) -> MetaOapg.properties.is_mdl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "tracking_url", "catalogs_product_group_id", "catalogs_product_group_name", "creative_type", "collections_hero_pin_id", "collections_hero_destination_url", "slideshow_collections_title", "slideshow_collections_description", "is_mdl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['EntityStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_url"]) -> typing.Union[MetaOapg.properties.tracking_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalogs_product_group_id"]) -> typing.Union[MetaOapg.properties.catalogs_product_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalogs_product_group_name"]) -> typing.Union[MetaOapg.properties.catalogs_product_group_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creative_type"]) -> typing.Union['CreativeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collections_hero_pin_id"]) -> typing.Union[MetaOapg.properties.collections_hero_pin_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collections_hero_destination_url"]) -> typing.Union[MetaOapg.properties.collections_hero_destination_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slideshow_collections_title"]) -> typing.Union[MetaOapg.properties.slideshow_collections_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slideshow_collections_description"]) -> typing.Union[MetaOapg.properties.slideshow_collections_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_mdl"]) -> typing.Union[MetaOapg.properties.is_mdl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "tracking_url", "catalogs_product_group_id", "catalogs_product_group_name", "creative_type", "collections_hero_pin_id", "collections_hero_destination_url", "slideshow_collections_title", "slideshow_collections_description", "is_mdl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union['EntityStatus', schemas.Unset] = schemas.unset,
        tracking_url: typing.Union[MetaOapg.properties.tracking_url, None, str, schemas.Unset] = schemas.unset,
        catalogs_product_group_id: typing.Union[MetaOapg.properties.catalogs_product_group_id, str, schemas.Unset] = schemas.unset,
        catalogs_product_group_name: typing.Union[MetaOapg.properties.catalogs_product_group_name, str, schemas.Unset] = schemas.unset,
        creative_type: typing.Union['CreativeType', schemas.Unset] = schemas.unset,
        collections_hero_pin_id: typing.Union[MetaOapg.properties.collections_hero_pin_id, None, str, schemas.Unset] = schemas.unset,
        collections_hero_destination_url: typing.Union[MetaOapg.properties.collections_hero_destination_url, None, str, schemas.Unset] = schemas.unset,
        slideshow_collections_title: typing.Union[MetaOapg.properties.slideshow_collections_title, None, str, schemas.Unset] = schemas.unset,
        slideshow_collections_description: typing.Union[MetaOapg.properties.slideshow_collections_description, None, str, schemas.Unset] = schemas.unset,
        is_mdl: typing.Union[MetaOapg.properties.is_mdl, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductGroupPromotionCommon':
        return super().__new__(
            cls,
            *args,
            status=status,
            tracking_url=tracking_url,
            catalogs_product_group_id=catalogs_product_group_id,
            catalogs_product_group_name=catalogs_product_group_name,
            creative_type=creative_type,
            collections_hero_pin_id=collections_hero_pin_id,
            collections_hero_destination_url=collections_hero_destination_url,
            slideshow_collections_title=slideshow_collections_title,
            slideshow_collections_description=slideshow_collections_description,
            is_mdl=is_mdl,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.creative_type import CreativeType
from pinterestsdk.model.entity_status import EntityStatus
