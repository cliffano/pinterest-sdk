# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.6.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pinterestsdk import schemas  # noqa: F401


class CatalogsItemValidationIssues(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "item_id",
            "warnings",
            "item_number",
            "errors",
        }
        
        class properties:
            item_number = schemas.IntSchema
            
            
            class item_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'item_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def errors() -> typing.Type['CatalogsItemValidationErrors']:
                return CatalogsItemValidationErrors
        
            @staticmethod
            def warnings() -> typing.Type['CatalogsItemValidationWarnings']:
                return CatalogsItemValidationWarnings
            __annotations__ = {
                "item_number": item_number,
                "item_id": item_id,
                "errors": errors,
                "warnings": warnings,
            }
    
    item_id: MetaOapg.properties.item_id
    warnings: 'CatalogsItemValidationWarnings'
    item_number: MetaOapg.properties.item_number
    errors: 'CatalogsItemValidationErrors'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_number"]) -> MetaOapg.properties.item_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> 'CatalogsItemValidationErrors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warnings"]) -> 'CatalogsItemValidationWarnings': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["item_number", "item_id", "errors", "warnings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_number"]) -> MetaOapg.properties.item_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_id"]) -> MetaOapg.properties.item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> 'CatalogsItemValidationErrors': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warnings"]) -> 'CatalogsItemValidationWarnings': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["item_number", "item_id", "errors", "warnings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        item_id: typing.Union[MetaOapg.properties.item_id, None, str, ],
        warnings: 'CatalogsItemValidationWarnings',
        item_number: typing.Union[MetaOapg.properties.item_number, decimal.Decimal, int, ],
        errors: 'CatalogsItemValidationErrors',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogsItemValidationIssues':
        return super().__new__(
            cls,
            *args,
            item_id=item_id,
            warnings=warnings,
            item_number=item_number,
            errors=errors,
            _configuration=_configuration,
            **kwargs,
        )

from pinterestsdk.model.catalogs_item_validation_errors import CatalogsItemValidationErrors
from pinterestsdk.model.catalogs_item_validation_warnings import CatalogsItemValidationWarnings
