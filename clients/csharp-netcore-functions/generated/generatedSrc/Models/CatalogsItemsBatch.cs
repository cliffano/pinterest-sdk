/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// Object describing the catalogs items batch
    /// </summary>
    [DataContract(Name = "CatalogsItemsBatch")]
    public partial class CatalogsItemsBatch : IEquatable<CatalogsItemsBatch>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public BatchOperationStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsItemsBatch" /> class.
        /// </summary>
        /// <param name="items">Array with the catalogs items processing records part of the catalogs items batch.</param>
        /// <param name="batchId">Id of the catalogs items batch.</param>
        /// <param name="status">status.</param>
        public CatalogsItemsBatch(List<ItemProcessingRecord> items = default(List<ItemProcessingRecord>), string batchId = default(string), BatchOperationStatus? status = default(BatchOperationStatus?))
        {
            this.Items = items;
            this.BatchId = batchId;
            this.Status = status;
        }

        /// <summary>
        /// Array with the catalogs items processing records part of the catalogs items batch
        /// </summary>
        /// <value>Array with the catalogs items processing records part of the catalogs items batch</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<ItemProcessingRecord> Items { get; set; }

        /// <summary>
        /// Id of the catalogs items batch
        /// </summary>
        /// <value>Id of the catalogs items batch</value>
        [DataMember(Name = "batch_id", EmitDefaultValue = false)]
        public string BatchId { get; set; }

        /// <summary>
        /// Time of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ssTZD
        /// </summary>
        /// <value>Time of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ssTZD</value>
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public DateTime CreatedTime { get; private set; }

        /// <summary>
        /// Returns false as CreatedTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedTime()
        {
            return false;
        }
        /// <summary>
        /// Time of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ssTZD
        /// </summary>
        /// <value>Time of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ssTZD</value>
        [DataMember(Name = "completed_time", EmitDefaultValue = true)]
        public DateTime? CompletedTime { get; private set; }

        /// <summary>
        /// Returns false as CompletedTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompletedTime()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsItemsBatch {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CompletedTime: ").Append(CompletedTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogsItemsBatch);
        }

        /// <summary>
        /// Returns true if CatalogsItemsBatch instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogsItemsBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsItemsBatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.CompletedTime == input.CompletedTime ||
                    (this.CompletedTime != null &&
                    this.CompletedTime.Equals(input.CompletedTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.CompletedTime != null)
                    hashCode = hashCode * 59 + this.CompletedTime.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
