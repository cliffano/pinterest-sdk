/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// CustomLabel1Filter
    /// </summary>
    [DataContract(Name = "CustomLabel1Filter")]
    public partial class CustomLabel1Filter : IEquatable<CustomLabel1Filter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomLabel1Filter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomLabel1Filter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomLabel1Filter" /> class.
        /// </summary>
        /// <param name="cUSTOMLABEL1">cUSTOMLABEL1 (required).</param>
        public CustomLabel1Filter(CatalogsProductGroupMultipleStringCriteria cUSTOMLABEL1 = default(CatalogsProductGroupMultipleStringCriteria))
        {
            // to ensure "cUSTOMLABEL1" is required (not null)
            this.CUSTOMLABEL1 = cUSTOMLABEL1 ?? throw new ArgumentNullException("cUSTOMLABEL1 is a required property for CustomLabel1Filter and cannot be null");
        }

        /// <summary>
        /// Gets or Sets CUSTOMLABEL1
        /// </summary>
        [DataMember(Name = "CUSTOM_LABEL_1", IsRequired = true, EmitDefaultValue = false)]
        public CatalogsProductGroupMultipleStringCriteria CUSTOMLABEL1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomLabel1Filter {\n");
            sb.Append("  CUSTOMLABEL1: ").Append(CUSTOMLABEL1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomLabel1Filter);
        }

        /// <summary>
        /// Returns true if CustomLabel1Filter instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomLabel1Filter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomLabel1Filter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CUSTOMLABEL1 == input.CUSTOMLABEL1 ||
                    (this.CUSTOMLABEL1 != null &&
                    this.CUSTOMLABEL1.Equals(input.CUSTOMLABEL1))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CUSTOMLABEL1 != null)
                    hashCode = hashCode * 59 + this.CUSTOMLABEL1.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
