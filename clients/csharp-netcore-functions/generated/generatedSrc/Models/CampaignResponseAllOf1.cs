/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// CampaignResponseAllOf1
    /// </summary>
    [DataContract(Name = "CampaignResponse_allOf_1")]
    public partial class CampaignResponseAllOf1 : IEquatable<CampaignResponseAllOf1>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ObjectiveType
        /// </summary>
        [DataMember(Name = "objective_type", EmitDefaultValue = false)]
        public ObjectiveType? ObjectiveType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignResponseAllOf1" /> class.
        /// </summary>
        /// <param name="objectiveType">objectiveType.</param>
        /// <param name="createdTime">Campaign creation time. Unix timestamp in seconds..</param>
        /// <param name="updatedTime">UTC timestamp. Last update time..</param>
        /// <param name="type">Always \&quot;campaign\&quot;..</param>
        public CampaignResponseAllOf1(ObjectiveType? objectiveType = default(ObjectiveType?), int createdTime = default(int), int updatedTime = default(int), string type = default(string))
        {
            this.ObjectiveType = objectiveType;
            this.CreatedTime = createdTime;
            this.UpdatedTime = updatedTime;
            this.Type = type;
        }

        /// <summary>
        /// Campaign creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Campaign creation time. Unix timestamp in seconds.</value>
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// UTC timestamp. Last update time.
        /// </summary>
        /// <value>UTC timestamp. Last update time.</value>
        [DataMember(Name = "updated_time", EmitDefaultValue = false)]
        public int UpdatedTime { get; set; }

        /// <summary>
        /// Always \&quot;campaign\&quot;.
        /// </summary>
        /// <value>Always \&quot;campaign\&quot;.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignResponseAllOf1 {\n");
            sb.Append("  ObjectiveType: ").Append(ObjectiveType).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignResponseAllOf1);
        }

        /// <summary>
        /// Returns true if CampaignResponseAllOf1 instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignResponseAllOf1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignResponseAllOf1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectiveType == input.ObjectiveType ||
                    this.ObjectiveType.Equals(input.ObjectiveType)
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    this.CreatedTime.Equals(input.CreatedTime)
                ) && 
                (
                    this.UpdatedTime == input.UpdatedTime ||
                    this.UpdatedTime.Equals(input.UpdatedTime)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ObjectiveType.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                hashCode = hashCode * 59 + this.UpdatedTime.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
