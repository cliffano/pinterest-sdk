/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// AdGroupResponse
    /// </summary>
    [DataContract(Name = "AdGroupResponse")]
    public partial class AdGroupResponse : IEquatable<AdGroupResponse>, IValidatableObject
    {

        /// <summary>
        /// Ad group/entity status.
        /// </summary>
        /// <value>Ad group/entity status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public EntityStatus? Status { get; set; }
        /// <summary>
        /// Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
        /// </summary>
        /// <value>Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BudgetTypeEnum
        {
            /// <summary>
            /// Enum DAILY for value: DAILY
            /// </summary>
            [EnumMember(Value = "DAILY")]
            DAILY = 1,

            /// <summary>
            /// Enum LIFETIME for value: LIFETIME
            /// </summary>
            [EnumMember(Value = "LIFETIME")]
            LIFETIME = 2,

            /// <summary>
            /// Enum CBOADGROUP for value: CBO_ADGROUP
            /// </summary>
            [EnumMember(Value = "CBO_ADGROUP")]
            CBOADGROUP = 3

        }


        /// <summary>
        /// Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
        /// </summary>
        /// <value>Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.</value>
        [DataMember(Name = "budget_type", EmitDefaultValue = false)]
        public BudgetTypeEnum? BudgetType { get; set; }

        /// <summary>
        /// &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Placement-group\\\&quot;&gt;Placement group&lt;/a&gt;.
        /// </summary>
        /// <value>&lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Placement-group\\\&quot;&gt;Placement group&lt;/a&gt;.</value>
        [DataMember(Name = "placement_group", EmitDefaultValue = false)]
        public PlacementGroupType? PlacementGroup { get; set; }

        /// <summary>
        /// Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
        /// </summary>
        /// <value>Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.</value>
        [DataMember(Name = "pacing_delivery_type", EmitDefaultValue = false)]
        public PacingDeliveryType? PacingDeliveryType { get; set; }
        /// <summary>
        /// oCPM learn mode
        /// </summary>
        /// <value>oCPM learn mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConversionLearningModeTypeEnum
        {
            /// <summary>
            /// Enum NOTACTIVE for value: NOT_ACTIVE
            /// </summary>
            [EnumMember(Value = "NOT_ACTIVE")]
            NOTACTIVE = 1,

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// oCPM learn mode
        /// </summary>
        /// <value>oCPM learn mode</value>
        [DataMember(Name = "conversion_learning_mode_type", EmitDefaultValue = true)]
        public ConversionLearningModeTypeEnum? ConversionLearningModeType { get; set; }

        /// <summary>
        /// Ad group summary status.
        /// </summary>
        /// <value>Ad group summary status.</value>
        [DataMember(Name = "summary_status", EmitDefaultValue = false)]
        public AdGroupSummaryStatus? SummaryStatus { get; set; }

        /// <summary>
        /// Gets or Sets BillableEvent
        /// </summary>
        [DataMember(Name = "billable_event", EmitDefaultValue = false)]
        public ActionType? BillableEvent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdGroupResponse" /> class.
        /// </summary>
        /// <param name="name">Ad group name..</param>
        /// <param name="status">Ad group/entity status..</param>
        /// <param name="budgetInMicroCurrency">Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups..</param>
        /// <param name="bidInMicroCurrency">Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC..</param>
        /// <param name="budgetType">Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome..</param>
        /// <param name="startTime">Ad group start time. Unix timestamp in seconds. Defaults to current time..</param>
        /// <param name="endTime">Ad group end time. Unix timestamp in seconds..</param>
        /// <param name="targetingSpec">Ad group targeting specification defining the ad group target audience. For example, &#39;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#39;.</param>
        /// <param name="lifetimeFrequencyCap">Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Billable-event\\\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field..</param>
        /// <param name="trackingUrls">Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;..</param>
        /// <param name="autoTargetingEnabled">Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;..</param>
        /// <param name="placementGroup">&lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Placement-group\\\&quot;&gt;Placement group&lt;/a&gt;..</param>
        /// <param name="pacingDeliveryType">Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day..</param>
        /// <param name="conversionLearningModeType">oCPM learn mode.</param>
        /// <param name="summaryStatus">Ad group summary status..</param>
        /// <param name="feedProfileId">Feed Profile ID associated to the adgroup..</param>
        /// <param name="campaignId">Campaign ID of the ad group..</param>
        /// <param name="billableEvent">billableEvent.</param>
        /// <param name="id">Ad group ID..</param>
        /// <param name="type">Always \&quot;adgroup\&quot;..</param>
        /// <param name="adAccountId">Advertiser ID..</param>
        /// <param name="createdTime">Ad group creation time. Unix timestamp in seconds..</param>
        /// <param name="updatedTime">Ad group last update time. Unix timestamp in seconds..</param>
        public AdGroupResponse(string name = default(string), EntityStatus? status = default(EntityStatus?), int? budgetInMicroCurrency = default(int?), int? bidInMicroCurrency = default(int?), BudgetTypeEnum? budgetType = default(BudgetTypeEnum?), int? startTime = default(int?), int? endTime = default(int?), Dictionary<string, List<string>> targetingSpec = default(Dictionary<string, List<string>>), int lifetimeFrequencyCap = default(int), TrackingUrls trackingUrls = default(TrackingUrls), bool? autoTargetingEnabled = default(bool?), PlacementGroupType? placementGroup = default(PlacementGroupType?), PacingDeliveryType? pacingDeliveryType = default(PacingDeliveryType?), ConversionLearningModeTypeEnum? conversionLearningModeType = default(ConversionLearningModeTypeEnum?), AdGroupSummaryStatus? summaryStatus = default(AdGroupSummaryStatus?), string feedProfileId = default(string), string campaignId = default(string), ActionType? billableEvent = default(ActionType?), string id = default(string), string type = default(string), string adAccountId = default(string), int createdTime = default(int), int updatedTime = default(int))
        {
            this.Name = name;
            this.Status = status;
            this.BudgetInMicroCurrency = budgetInMicroCurrency;
            this.BidInMicroCurrency = bidInMicroCurrency;
            this.BudgetType = budgetType;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.TargetingSpec = targetingSpec;
            this.LifetimeFrequencyCap = lifetimeFrequencyCap;
            this.TrackingUrls = trackingUrls;
            this.AutoTargetingEnabled = autoTargetingEnabled;
            this.PlacementGroup = placementGroup;
            this.PacingDeliveryType = pacingDeliveryType;
            this.ConversionLearningModeType = conversionLearningModeType;
            this.SummaryStatus = summaryStatus;
            this.FeedProfileId = feedProfileId;
            this.CampaignId = campaignId;
            this.BillableEvent = billableEvent;
            this.Id = id;
            this.Type = type;
            this.AdAccountId = adAccountId;
            this.CreatedTime = createdTime;
            this.UpdatedTime = updatedTime;
        }

        /// <summary>
        /// Ad group name.
        /// </summary>
        /// <value>Ad group name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
        /// </summary>
        /// <value>Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.</value>
        [DataMember(Name = "budget_in_micro_currency", EmitDefaultValue = true)]
        public int? BudgetInMicroCurrency { get; set; }

        /// <summary>
        /// Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
        /// </summary>
        /// <value>Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.</value>
        [DataMember(Name = "bid_in_micro_currency", EmitDefaultValue = true)]
        public int? BidInMicroCurrency { get; set; }

        /// <summary>
        /// Ad group start time. Unix timestamp in seconds. Defaults to current time.
        /// </summary>
        /// <value>Ad group start time. Unix timestamp in seconds. Defaults to current time.</value>
        [DataMember(Name = "start_time", EmitDefaultValue = true)]
        public int? StartTime { get; set; }

        /// <summary>
        /// Ad group end time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Ad group end time. Unix timestamp in seconds.</value>
        [DataMember(Name = "end_time", EmitDefaultValue = true)]
        public int? EndTime { get; set; }

        /// <summary>
        /// Ad group targeting specification defining the ad group target audience. For example, &#39;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#39;
        /// </summary>
        /// <value>Ad group targeting specification defining the ad group target audience. For example, &#39;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#39;</value>
        [DataMember(Name = "targeting_spec", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> TargetingSpec { get; set; }

        /// <summary>
        /// Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Billable-event\\\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
        /// </summary>
        /// <value>Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Billable-event\\\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.</value>
        [DataMember(Name = "lifetime_frequency_cap", EmitDefaultValue = false)]
        public int LifetimeFrequencyCap { get; set; }

        /// <summary>
        /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
        /// </summary>
        /// <value>Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.</value>
        [DataMember(Name = "tracking_urls", EmitDefaultValue = true)]
        public TrackingUrls TrackingUrls { get; set; }

        /// <summary>
        /// Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
        /// </summary>
        /// <value>Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.</value>
        [DataMember(Name = "auto_targeting_enabled", EmitDefaultValue = true)]
        public bool? AutoTargetingEnabled { get; set; }

        /// <summary>
        /// Feed Profile ID associated to the adgroup.
        /// </summary>
        /// <value>Feed Profile ID associated to the adgroup.</value>
        [DataMember(Name = "feed_profile_id", EmitDefaultValue = false)]
        public string FeedProfileId { get; set; }

        /// <summary>
        /// Campaign ID of the ad group.
        /// </summary>
        /// <value>Campaign ID of the ad group.</value>
        [DataMember(Name = "campaign_id", EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Ad group ID.
        /// </summary>
        /// <value>Ad group ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Always \&quot;adgroup\&quot;.
        /// </summary>
        /// <value>Always \&quot;adgroup\&quot;.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Advertiser ID.
        /// </summary>
        /// <value>Advertiser ID.</value>
        [DataMember(Name = "ad_account_id", EmitDefaultValue = false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// Ad group creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Ad group creation time. Unix timestamp in seconds.</value>
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// Ad group last update time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Ad group last update time. Unix timestamp in seconds.</value>
        [DataMember(Name = "updated_time", EmitDefaultValue = false)]
        public int UpdatedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdGroupResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BudgetInMicroCurrency: ").Append(BudgetInMicroCurrency).Append("\n");
            sb.Append("  BidInMicroCurrency: ").Append(BidInMicroCurrency).Append("\n");
            sb.Append("  BudgetType: ").Append(BudgetType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TargetingSpec: ").Append(TargetingSpec).Append("\n");
            sb.Append("  LifetimeFrequencyCap: ").Append(LifetimeFrequencyCap).Append("\n");
            sb.Append("  TrackingUrls: ").Append(TrackingUrls).Append("\n");
            sb.Append("  AutoTargetingEnabled: ").Append(AutoTargetingEnabled).Append("\n");
            sb.Append("  PlacementGroup: ").Append(PlacementGroup).Append("\n");
            sb.Append("  PacingDeliveryType: ").Append(PacingDeliveryType).Append("\n");
            sb.Append("  ConversionLearningModeType: ").Append(ConversionLearningModeType).Append("\n");
            sb.Append("  SummaryStatus: ").Append(SummaryStatus).Append("\n");
            sb.Append("  FeedProfileId: ").Append(FeedProfileId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  BillableEvent: ").Append(BillableEvent).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdGroupResponse);
        }

        /// <summary>
        /// Returns true if AdGroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AdGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdGroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.BudgetInMicroCurrency == input.BudgetInMicroCurrency ||
                    (this.BudgetInMicroCurrency != null &&
                    this.BudgetInMicroCurrency.Equals(input.BudgetInMicroCurrency))
                ) && 
                (
                    this.BidInMicroCurrency == input.BidInMicroCurrency ||
                    (this.BidInMicroCurrency != null &&
                    this.BidInMicroCurrency.Equals(input.BidInMicroCurrency))
                ) && 
                (
                    this.BudgetType == input.BudgetType ||
                    this.BudgetType.Equals(input.BudgetType)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.TargetingSpec == input.TargetingSpec ||
                    this.TargetingSpec != null &&
                    input.TargetingSpec != null &&
                    this.TargetingSpec.SequenceEqual(input.TargetingSpec)
                ) && 
                (
                    this.LifetimeFrequencyCap == input.LifetimeFrequencyCap ||
                    this.LifetimeFrequencyCap.Equals(input.LifetimeFrequencyCap)
                ) && 
                (
                    this.TrackingUrls == input.TrackingUrls ||
                    (this.TrackingUrls != null &&
                    this.TrackingUrls.Equals(input.TrackingUrls))
                ) && 
                (
                    this.AutoTargetingEnabled == input.AutoTargetingEnabled ||
                    (this.AutoTargetingEnabled != null &&
                    this.AutoTargetingEnabled.Equals(input.AutoTargetingEnabled))
                ) && 
                (
                    this.PlacementGroup == input.PlacementGroup ||
                    this.PlacementGroup.Equals(input.PlacementGroup)
                ) && 
                (
                    this.PacingDeliveryType == input.PacingDeliveryType ||
                    this.PacingDeliveryType.Equals(input.PacingDeliveryType)
                ) && 
                (
                    this.ConversionLearningModeType == input.ConversionLearningModeType ||
                    this.ConversionLearningModeType.Equals(input.ConversionLearningModeType)
                ) && 
                (
                    this.SummaryStatus == input.SummaryStatus ||
                    this.SummaryStatus.Equals(input.SummaryStatus)
                ) && 
                (
                    this.FeedProfileId == input.FeedProfileId ||
                    (this.FeedProfileId != null &&
                    this.FeedProfileId.Equals(input.FeedProfileId))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.BillableEvent == input.BillableEvent ||
                    this.BillableEvent.Equals(input.BillableEvent)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AdAccountId == input.AdAccountId ||
                    (this.AdAccountId != null &&
                    this.AdAccountId.Equals(input.AdAccountId))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    this.CreatedTime.Equals(input.CreatedTime)
                ) && 
                (
                    this.UpdatedTime == input.UpdatedTime ||
                    this.UpdatedTime.Equals(input.UpdatedTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.BudgetInMicroCurrency != null)
                    hashCode = hashCode * 59 + this.BudgetInMicroCurrency.GetHashCode();
                if (this.BidInMicroCurrency != null)
                    hashCode = hashCode * 59 + this.BidInMicroCurrency.GetHashCode();
                hashCode = hashCode * 59 + this.BudgetType.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.TargetingSpec != null)
                    hashCode = hashCode * 59 + this.TargetingSpec.GetHashCode();
                hashCode = hashCode * 59 + this.LifetimeFrequencyCap.GetHashCode();
                if (this.TrackingUrls != null)
                    hashCode = hashCode * 59 + this.TrackingUrls.GetHashCode();
                if (this.AutoTargetingEnabled != null)
                    hashCode = hashCode * 59 + this.AutoTargetingEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.PlacementGroup.GetHashCode();
                hashCode = hashCode * 59 + this.PacingDeliveryType.GetHashCode();
                hashCode = hashCode * 59 + this.ConversionLearningModeType.GetHashCode();
                hashCode = hashCode * 59 + this.SummaryStatus.GetHashCode();
                if (this.FeedProfileId != null)
                    hashCode = hashCode * 59 + this.FeedProfileId.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                hashCode = hashCode * 59 + this.BillableEvent.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AdAccountId != null)
                    hashCode = hashCode * 59 + this.AdAccountId.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                hashCode = hashCode * 59 + this.UpdatedTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CampaignId (string) pattern
            Regex regexCampaignId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexCampaignId.Match(this.CampaignId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CampaignId, must match a pattern of " + regexCampaignId, new [] { "CampaignId" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // AdAccountId (string) pattern
            Regex regexAdAccountId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexAdAccountId.Match(this.AdAccountId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdAccountId, must match a pattern of " + regexAdAccountId, new [] { "AdAccountId" });
            }

            yield break;
        }
    }

}
