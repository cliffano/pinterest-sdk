/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;

namespace Org.OpenAPITools.Apis
{ 
    public partial class CatalogsApi
    { 
        [FunctionName("CatalogsApi_CatalogsProductGroupsCreate")]
        public async Task<IActionResult> _CatalogsProductGroupsCreate([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/catalogs/product_groups")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("CatalogsProductGroupsCreate");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_CatalogsProductGroupsDelete")]
        public async Task<IActionResult> _CatalogsProductGroupsDelete([HttpTrigger(AuthorizationLevel.Anonymous, "DELETE", Route = "/catalogs/product_groups/{product_group_id}")]HttpRequest req, ExecutionContext context, [RegularExpression("/^\\d+$/")]string productGroupId)
        {
            var method = this.GetType().GetMethod("CatalogsProductGroupsDelete");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_CatalogsProductGroupsList")]
        public async Task<IActionResult> _CatalogsProductGroupsList([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/catalogs/product_groups")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("CatalogsProductGroupsList");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_CatalogsProductGroupsUpdate")]
        public async Task<IActionResult> _CatalogsProductGroupsUpdate([HttpTrigger(AuthorizationLevel.Anonymous, "PATCH", Route = "/catalogs/product_groups/{product_group_id}")]HttpRequest req, ExecutionContext context, [RegularExpression("/^\\d+$/")]string productGroupId)
        {
            var method = this.GetType().GetMethod("CatalogsProductGroupsUpdate");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_FeedProcessingResultsList")]
        public async Task<IActionResult> _FeedProcessingResultsList([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/catalogs/feeds/{feed_id}/processing_results")]HttpRequest req, ExecutionContext context, [RegularExpression("/^\\d+$/")]string feedId)
        {
            var method = this.GetType().GetMethod("FeedProcessingResultsList");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_FeedsCreate")]
        public async Task<IActionResult> _FeedsCreate([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/catalogs/feeds")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("FeedsCreate");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_FeedsDelete")]
        public async Task<IActionResult> _FeedsDelete([HttpTrigger(AuthorizationLevel.Anonymous, "DELETE", Route = "/catalogs/feeds/{feed_id}")]HttpRequest req, ExecutionContext context, [RegularExpression("/^\\d+$/")]string feedId)
        {
            var method = this.GetType().GetMethod("FeedsDelete");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_FeedsGet")]
        public async Task<IActionResult> _FeedsGet([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/catalogs/feeds/{feed_id}")]HttpRequest req, ExecutionContext context, [RegularExpression("/^\\d+$/")]string feedId)
        {
            var method = this.GetType().GetMethod("FeedsGet");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_FeedsList")]
        public async Task<IActionResult> _FeedsList([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/catalogs/feeds")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("FeedsList");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_FeedsUpdate")]
        public async Task<IActionResult> _FeedsUpdate([HttpTrigger(AuthorizationLevel.Anonymous, "PATCH", Route = "/catalogs/feeds/{feed_id}")]HttpRequest req, ExecutionContext context, [RegularExpression("/^\\d+$/")]string feedId)
        {
            var method = this.GetType().GetMethod("FeedsUpdate");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_ItemsBatchGet")]
        public async Task<IActionResult> _ItemsBatchGet([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/catalogs/items/batch/{batch_id}")]HttpRequest req, ExecutionContext context, string batchId)
        {
            var method = this.GetType().GetMethod("ItemsBatchGet");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context,  })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_ItemsBatchPost")]
        public async Task<IActionResult> _ItemsBatchPost([HttpTrigger(AuthorizationLevel.Anonymous, "POST", Route = "/catalogs/items/batch")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ItemsBatchPost");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }

        [FunctionName("CatalogsApi_ItemsGet")]
        public async Task<IActionResult> _ItemsGet([HttpTrigger(AuthorizationLevel.Anonymous, "GET", Route = "/catalogs/items")]HttpRequest req, ExecutionContext context)
        {
            var method = this.GetType().GetMethod("ItemsGet");

            return method != null 
                ? (await ((Task<IActionResult>)method.Invoke(this, new object[] { req, context })).ConfigureAwait(false))
                : new StatusCodeResult((int)HttpStatusCode.NotImplemented);
        }
    }
}

