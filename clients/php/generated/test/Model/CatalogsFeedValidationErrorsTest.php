<?php
/**
 * CatalogsFeedValidationErrorsTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CatalogsFeedValidationErrorsTest Class Doc Comment
 *
 * @category    Class
 * @description CatalogsFeedValidationErrors
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CatalogsFeedValidationErrorsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CatalogsFeedValidationErrors"
     */
    public function testCatalogsFeedValidationErrors()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "fetch_error"
     */
    public function testPropertyFetchError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "fetch_inactive_feed_error"
     */
    public function testPropertyFetchInactiveFeedError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encoding_error"
     */
    public function testPropertyEncodingError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "delimiter_error"
     */
    public function testPropertyDelimiterError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "required_columns_missing"
     */
    public function testPropertyRequiredColumnsMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "image_link_invalid"
     */
    public function testPropertyImageLinkInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "itemid_missing"
     */
    public function testPropertyItemidMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "title_missing"
     */
    public function testPropertyTitleMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "description_missing"
     */
    public function testPropertyDescriptionMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_category_invalid"
     */
    public function testPropertyProductCategoryInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_link_missing"
     */
    public function testPropertyProductLinkMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "image_link_missing"
     */
    public function testPropertyImageLinkMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "availability_invalid"
     */
    public function testPropertyAvailabilityInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_price_invalid"
     */
    public function testPropertyProductPriceInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "link_format_invalid"
     */
    public function testPropertyLinkFormatInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "parse_line_error"
     */
    public function testPropertyParseLineError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "adwords_format_invalid"
     */
    public function testPropertyAdwordsFormatInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_category_missing"
     */
    public function testPropertyProductCategoryMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "internal_service_error"
     */
    public function testPropertyInternalServiceError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "no_verified_domain"
     */
    public function testPropertyNoVerifiedDomain()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "adult_invalid"
     */
    public function testPropertyAdultInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "invalid_domain"
     */
    public function testPropertyInvalidDomain()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "feed_length_too_long"
     */
    public function testPropertyFeedLengthTooLong()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "link_length_too_long"
     */
    public function testPropertyLinkLengthTooLong()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "malformed_xml"
     */
    public function testPropertyMalformedXml()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "redirect_invalid"
     */
    public function testPropertyRedirectInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "price_missing"
     */
    public function testPropertyPriceMissing()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "feed_too_small"
     */
    public function testPropertyFeedTooSmall()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_invalid"
     */
    public function testPropertyConditionInvalid()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shopify_no_products"
     */
    public function testPropertyShopifyNoProducts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_items_per_item_group_exceeded"
     */
    public function testPropertyMaxItemsPerItemGroupExceeded()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "item_main_image_download_failure"
     */
    public function testPropertyItemMainImageDownloadFailure()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pinjoin_content_unsafe"
     */
    public function testPropertyPinjoinContentUnsafe()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "blocklisted_image_signature"
     */
    public function testPropertyBlocklistedImageSignature()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
