/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinsApi.h
 *
 * 
 */

#ifndef PinsApi_H_
#define PinsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AnalyticsMetricsResponse.h"
#include "Error.h"
#include "Pin.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  PinsApiException: public std::exception
{
public:
    PinsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Get Pin analytics
/// </summary>
/// <remarks>
/// Get analytics for a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
/// </remarks>
class  PinsApiPinsPin_idAnalyticsResource: public restbed::Resource
{
public:
    PinsApiPinsPin_idAnalyticsResource(const std::string& context = "/v5");
    virtual ~PinsApiPinsPin_idAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::map<std::string, std::shared_ptr<AnalyticsMetricsResponse>>> handler_GET(
        std::string const & pinId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & metricTypes, std::string const & appTypes, std::string const & splitField, std::string const & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_pinId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pinId", "");
    }

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual std::string getQueryParam_appTypes(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("appTypes", "ALL");
    }

    virtual std::string getQueryParam_splitField(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("splitField", "NO_SPLIT");
    }

    virtual std::string getQueryParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("adAccountId", "");
    }



    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Create Pin
/// </summary>
/// <remarks>
/// Create a Pin on a board or board section owned by the \&quot;operation user_account\&quot;.  Note: If the current \&quot;operation user_account\&quot; (defined by the access token) has access to another user&#39;s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account&#39;s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id&#x3D;12345&amp;...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called &#39;curated content&#39;, please use our &lt;a href&#x3D;&#39;/docs/add-ons/save-button&#39;&gt;Save button&lt;/a&gt; instead. For more tips on creating fresh content for Pinterest, review our &lt;a href&#x3D;&#39;/docs/solutions/content-apps&#39;&gt;Content App Solutions Guide&lt;/a&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/solutions/content-apps/#creatingvideopins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
/// </remarks>
class  PinsApiPinsResource: public restbed::Resource
{
public:
    PinsApiPinsResource(const std::string& context = "/v5");
    virtual ~PinsApiPinsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Pin>> handler_POST(
        std::shared_ptr<Pin> const & pin);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Delete Pin
/// </summary>
/// <remarks>
/// Delete a Pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  PinsApiPinsPin_idResource: public restbed::Resource
{
public:
    PinsApiPinsPin_idResource(const std::string& context = "/v5");
    virtual ~PinsApiPinsPin_idResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & pinId);

    virtual std::pair<int, std::shared_ptr<Pin>> handler_GET(
        std::string const & pinId, std::string const & adAccountId);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_pinId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pinId", "");
    }


    virtual std::string getPathParam_pinId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("pinId", "");
    }
    virtual std::string getQueryParam_adAccountId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("adAccountId", "");
    }

    virtual std::pair<int, std::string> handlePinsApiException(const PinsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  PinsApi
{
public:
    explicit PinsApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~PinsApi();

    virtual void setPinsApiPinsPin_idAnalyticsResource(std::shared_ptr<PinsApiPinsPin_idAnalyticsResource> spPinsApiPinsPin_idAnalyticsResource);
    virtual void setPinsApiPinsResource(std::shared_ptr<PinsApiPinsResource> spPinsApiPinsResource);
    virtual void setPinsApiPinsPin_idResource(std::shared_ptr<PinsApiPinsPin_idResource> spPinsApiPinsPin_idResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<PinsApiPinsPin_idAnalyticsResource> m_spPinsApiPinsPin_idAnalyticsResource;
	std::shared_ptr<PinsApiPinsResource> m_spPinsApiPinsResource;
	std::shared_ptr<PinsApiPinsPin_idResource> m_spPinsApiPinsPin_idResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* PinsApi_H_ */

