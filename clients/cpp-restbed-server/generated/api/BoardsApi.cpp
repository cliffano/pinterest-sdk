/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BoardsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BoardsApiException::BoardsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BoardsApiException::getStatus() const
{
    return m_status;
}
const char* BoardsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

BoardsApiBoardsBoard_idSectionsResource::BoardsApiBoardsBoard_idSectionsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/sections/");
	this->set_method_handler("POST",
		std::bind(&BoardsApiBoardsBoard_idSectionsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BoardsApiBoardsBoard_idSectionsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BoardsApiBoardsBoard_idSectionsResource::~BoardsApiBoardsBoard_idSectionsResource()
{
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsApiBoardsBoard_idSectionsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsApiBoardsBoard_idSectionsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BoardsApiBoardsBoard_idSectionsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsApiBoardsBoard_idSectionsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto boardSection = extractJsonModelBodyParam<BoardSection>(bodyContent);

    // Getting the path params
    const std::string boardId = getPathParam_boardId(request);



    int status_code = 500;
    std::shared_ptr<BoardSection> resultObject = std::make_shared<BoardSection>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(boardId, boardSection);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 201) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 201, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid board section parameters." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to create board sections." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Could not get exclusive access to the board to create a new section." : result, contentType);
        return;
    }
    if (status_code == 500) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 500, result.empty() ? "Could not create a new board section." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void BoardsApiBoardsBoard_idSectionsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const std::string boardId = getPathParam_boardId_x_extension(request);

    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(boardId, bookmark, pageSize);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<BoardSection>> BoardsApiBoardsBoard_idSectionsResource::handler_POST(
        std::string const & boardId, std::shared_ptr<BoardSection> const & boardSection)
{
    throw BoardsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<Paginated>> BoardsApiBoardsBoard_idSectionsResource::handler_GET(
    std::string const & boardId, std::string const & bookmark, int32_t const & pageSize)
{
    throw BoardsApiException(501, "Not implemented");
}

std::string BoardsApiBoardsBoard_idSectionsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BoardsApiBoardsBoard_idSectionsSection_idResource::BoardsApiBoardsBoard_idSectionsSection_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/sections/{section_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&BoardsApiBoardsBoard_idSectionsSection_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BoardsApiBoardsBoard_idSectionsSection_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

BoardsApiBoardsBoard_idSectionsSection_idResource::~BoardsApiBoardsBoard_idSectionsSection_idResource()
{
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsSection_idResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsSection_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsSection_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsApiBoardsBoard_idSectionsSection_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsApiBoardsBoard_idSectionsSection_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BoardsApiBoardsBoard_idSectionsSection_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsApiBoardsBoard_idSectionsSection_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string boardId = getPathParam_boardId(request);
    const std::string sectionId = getPathParam_sectionId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_DELETE(boardId, sectionId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 204) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 204, result.empty() ? "Board section deleted successfully" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to delete board section." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Board section not found." : result, contentType);
        return;
    }
    if (status_code == 409) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Board section conflict." : result, contentType);
        return;
    }
    if (status_code == 0) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void BoardsApiBoardsBoard_idSectionsSection_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto boardId = std::make_shared<>(bodyContent);
    auto sectionId = std::make_shared<>(bodyContent);
    auto boardSection = extractJsonModelBodyParam<BoardSection>(bodyContent);

    // Getting the path params
    const std::string boardId = getPathParam_boardId_x_extension(request);

    const std::string sectionId = getPathParam_sectionId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<BoardSection> resultObject = std::make_shared<BoardSection>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(boardId, sectionId, boardSection);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid board section parameters." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to update board section." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Board section conflict." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

int BoardsApiBoardsBoard_idSectionsSection_idResource::handler_DELETE(
        std::string const & boardId, std::string const & sectionId)
{
    throw BoardsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<BoardSection>> BoardsApiBoardsBoard_idSectionsSection_idResource::handler_PATCH(
    std::string const & boardId, std::string const & sectionId, std::shared_ptr<BoardSection> const & boardSection)
{
    throw BoardsApiException(501, "Not implemented");
}

std::string BoardsApiBoardsBoard_idSectionsSection_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BoardsApiBoardsBoard_idSectionsSection_idPinsResource::BoardsApiBoardsBoard_idSectionsSection_idPinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/sections/{section_id: .*}/pins/");
	this->set_method_handler("GET",
		std::bind(&BoardsApiBoardsBoard_idSectionsSection_idPinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BoardsApiBoardsBoard_idSectionsSection_idPinsResource::~BoardsApiBoardsBoard_idSectionsSection_idPinsResource()
{
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsSection_idPinsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsSection_idPinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idSectionsSection_idPinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsApiBoardsBoard_idSectionsSection_idPinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsApiBoardsBoard_idSectionsSection_idPinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BoardsApiBoardsBoard_idSectionsSection_idPinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsApiBoardsBoard_idSectionsSection_idPinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string boardId = getPathParam_boardId(request);
    const std::string sectionId = getPathParam_sectionId(request);

    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(boardId, sectionId, bookmark, pageSize);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to access Pins on board section." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Board or section not found." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Board section conflict." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> BoardsApiBoardsBoard_idSectionsSection_idPinsResource::handler_GET(
        std::string const & boardId, std::string const & sectionId, std::string const & bookmark, int32_t const & pageSize)
{
    throw BoardsApiException(501, "Not implemented");
}


std::string BoardsApiBoardsBoard_idSectionsSection_idPinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BoardsApiBoardsResource::BoardsApiBoardsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/");
	this->set_method_handler("POST",
		std::bind(&BoardsApiBoardsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BoardsApiBoardsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BoardsApiBoardsResource::~BoardsApiBoardsResource()
{
}

std::pair<int, std::string> BoardsApiBoardsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsApiBoardsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsApiBoardsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsApiBoardsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsApiBoardsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BoardsApiBoardsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsApiBoardsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto board = extractJsonModelBodyParam<Board>(bodyContent);




    int status_code = 500;
    std::shared_ptr<Board> resultObject = std::make_shared<Board>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(board);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 201) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 201, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "The board name is invalid or duplicated." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void BoardsApiBoardsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);

    const std::string privacy = getQueryParam_privacy_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize, privacy);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<Board>> BoardsApiBoardsResource::handler_POST(
        std::shared_ptr<Board> const & board)
{
    throw BoardsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<Paginated>> BoardsApiBoardsResource::handler_GET(
    std::string const & bookmark, int32_t const & pageSize, std::string const & privacy)
{
    throw BoardsApiException(501, "Not implemented");
}

std::string BoardsApiBoardsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BoardsApiBoardsBoard_idResource::BoardsApiBoardsBoard_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&BoardsApiBoardsBoard_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&BoardsApiBoardsBoard_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&BoardsApiBoardsBoard_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

BoardsApiBoardsBoard_idResource::~BoardsApiBoardsBoard_idResource()
{
}

std::pair<int, std::string> BoardsApiBoardsBoard_idResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsApiBoardsBoard_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsApiBoardsBoard_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BoardsApiBoardsBoard_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsApiBoardsBoard_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string boardId = getPathParam_boardId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_DELETE(boardId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 204) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 204, result.empty() ? "Board deleted successfully" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to delete the board." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Board not found." : result, contentType);
        return;
    }
    if (status_code == 409) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Could not get exclusive access to delete the board." : result, contentType);
        return;
    }
    if (status_code == 429) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 429, result.empty() ? "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window." : result, contentType);
        return;
    }
    if (status_code == 0) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void BoardsApiBoardsBoard_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const std::string boardId = getPathParam_boardId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Board> resultObject = std::make_shared<Board>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(boardId);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Board not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}
// x-extension
void BoardsApiBoardsBoard_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto boardId = std::make_shared<>(bodyContent);
    auto boardUpdate = extractJsonModelBodyParam<BoardUpdate>(bodyContent);

    // Getting the path params
    const std::string boardId = getPathParam_boardId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Board> resultObject = std::make_shared<Board>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(boardId, boardUpdate);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid board parameters." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to update the board." : result, contentType);
        return;
    }
    if (status_code == 429) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 429, result.empty() ? "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

int BoardsApiBoardsBoard_idResource::handler_DELETE(
        std::string const & boardId)
{
    throw BoardsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<Board>> BoardsApiBoardsBoard_idResource::handler_GET(
    std::string const & boardId)
{
    throw BoardsApiException(501, "Not implemented");
}
std::pair<int, std::shared_ptr<Board>> BoardsApiBoardsBoard_idResource::handler_PATCH(
    std::string const & boardId, std::shared_ptr<BoardUpdate> const & boardUpdate)
{
    throw BoardsApiException(501, "Not implemented");
}

std::string BoardsApiBoardsBoard_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
BoardsApiBoardsBoard_idPinsResource::BoardsApiBoardsBoard_idPinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/boards/{board_id: .*}/pins/");
	this->set_method_handler("GET",
		std::bind(&BoardsApiBoardsBoard_idPinsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

BoardsApiBoardsBoard_idPinsResource::~BoardsApiBoardsBoard_idPinsResource()
{
}

std::pair<int, std::string> BoardsApiBoardsBoard_idPinsResource::handleBoardsApiException(const BoardsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idPinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BoardsApiBoardsBoard_idPinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BoardsApiBoardsBoard_idPinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BoardsApiBoardsBoard_idPinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void BoardsApiBoardsBoard_idPinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BoardsApiBoardsBoard_idPinsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string boardId = getPathParam_boardId(request);

    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(boardId, bookmark, pageSize);
    }
    catch(const BoardsApiException& e) {
        std::tie(status_code, result) = handleBoardsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Board not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> BoardsApiBoardsBoard_idPinsResource::handler_GET(
        std::string const & boardId, std::string const & bookmark, int32_t const & pageSize)
{
    throw BoardsApiException(501, "Not implemented");
}


std::string BoardsApiBoardsBoard_idPinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

BoardsApi::BoardsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BoardsApi::~BoardsApi() {}

void BoardsApi::setBoardsApiBoardsBoard_idSectionsResource(std::shared_ptr<BoardsApiBoardsBoard_idSectionsResource> spBoardsApiBoardsBoard_idSectionsResource) {
    m_spBoardsApiBoardsBoard_idSectionsResource = spBoardsApiBoardsBoard_idSectionsResource;
    m_service->publish(m_spBoardsApiBoardsBoard_idSectionsResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idSectionsSection_idResource(std::shared_ptr<BoardsApiBoardsBoard_idSectionsSection_idResource> spBoardsApiBoardsBoard_idSectionsSection_idResource) {
    m_spBoardsApiBoardsBoard_idSectionsSection_idResource = spBoardsApiBoardsBoard_idSectionsSection_idResource;
    m_service->publish(m_spBoardsApiBoardsBoard_idSectionsSection_idResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idSectionsSection_idPinsResource(std::shared_ptr<BoardsApiBoardsBoard_idSectionsSection_idPinsResource> spBoardsApiBoardsBoard_idSectionsSection_idPinsResource) {
    m_spBoardsApiBoardsBoard_idSectionsSection_idPinsResource = spBoardsApiBoardsBoard_idSectionsSection_idPinsResource;
    m_service->publish(m_spBoardsApiBoardsBoard_idSectionsSection_idPinsResource);
}
void BoardsApi::setBoardsApiBoardsResource(std::shared_ptr<BoardsApiBoardsResource> spBoardsApiBoardsResource) {
    m_spBoardsApiBoardsResource = spBoardsApiBoardsResource;
    m_service->publish(m_spBoardsApiBoardsResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idResource(std::shared_ptr<BoardsApiBoardsBoard_idResource> spBoardsApiBoardsBoard_idResource) {
    m_spBoardsApiBoardsBoard_idResource = spBoardsApiBoardsBoard_idResource;
    m_service->publish(m_spBoardsApiBoardsBoard_idResource);
}
void BoardsApi::setBoardsApiBoardsBoard_idPinsResource(std::shared_ptr<BoardsApiBoardsBoard_idPinsResource> spBoardsApiBoardsBoard_idPinsResource) {
    m_spBoardsApiBoardsBoard_idPinsResource = spBoardsApiBoardsBoard_idPinsResource;
    m_service->publish(m_spBoardsApiBoardsBoard_idPinsResource);
}


void BoardsApi::publishDefaultResources() {
    if (!m_spBoardsApiBoardsBoard_idSectionsResource) {
        setBoardsApiBoardsBoard_idSectionsResource(std::make_shared<BoardsApiBoardsBoard_idSectionsResource>());
    }
    if (!m_spBoardsApiBoardsBoard_idSectionsSection_idResource) {
        setBoardsApiBoardsBoard_idSectionsSection_idResource(std::make_shared<BoardsApiBoardsBoard_idSectionsSection_idResource>());
    }
    if (!m_spBoardsApiBoardsBoard_idSectionsSection_idPinsResource) {
        setBoardsApiBoardsBoard_idSectionsSection_idPinsResource(std::make_shared<BoardsApiBoardsBoard_idSectionsSection_idPinsResource>());
    }
    if (!m_spBoardsApiBoardsResource) {
        setBoardsApiBoardsResource(std::make_shared<BoardsApiBoardsResource>());
    }
    if (!m_spBoardsApiBoardsBoard_idResource) {
        setBoardsApiBoardsBoard_idResource(std::make_shared<BoardsApiBoardsBoard_idResource>());
    }
    if (!m_spBoardsApiBoardsBoard_idPinsResource) {
        setBoardsApiBoardsBoard_idPinsResource(std::make_shared<BoardsApiBoardsBoard_idPinsResource>());
    }
}

std::shared_ptr<restbed::Service> BoardsApi::service() {
    return m_service;
}


}
}
}
}

