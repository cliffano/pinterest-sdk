/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "PinsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

PinsApiException::PinsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int PinsApiException::getStatus() const
{
    return m_status;
}
const char* PinsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

PinsApiPinsPin_idAnalyticsResource::PinsApiPinsPin_idAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/{pin_id: .*}/analytics/");
	this->set_method_handler("GET",
		std::bind(&PinsApiPinsPin_idAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

PinsApiPinsPin_idAnalyticsResource::~PinsApiPinsPin_idAnalyticsResource()
{
}

std::pair<int, std::string> PinsApiPinsPin_idAnalyticsResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsApiPinsPin_idAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsApiPinsPin_idAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsApiPinsPin_idAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsApiPinsPin_idAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void PinsApiPinsPin_idAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsApiPinsPin_idAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string pinId = getPathParam_pinId(request);

    // Getting the query params
    const std::string startDate = getQueryParam_startDate(request);
    const std::string endDate = getQueryParam_endDate(request);
    const std::string appTypes = getQueryParam_appTypes(request);
    const std::string splitField = getQueryParam_splitField(request);
    const std::string adAccountId = getQueryParam_adAccountId(request);


    int status_code = 500;
    std::map<std::string, std::shared_ptr<AnalyticsMetricsResponse>> resultObject = std::map<std::string, AnalyticsMetricsResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();
        result = convertMapResponse(resultObject);

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to access board or Pin." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Pin not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::map<std::string, std::shared_ptr<AnalyticsMetricsResponse>>> PinsApiPinsPin_idAnalyticsResource::handler_GET(
        std::string const & pinId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & metricTypes, std::string const & appTypes, std::string const & splitField, std::string const & adAccountId)
{
    throw PinsApiException(501, "Not implemented");
}


std::string PinsApiPinsPin_idAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
PinsApiPinsResource::PinsApiPinsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/");
	this->set_method_handler("POST",
		std::bind(&PinsApiPinsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

PinsApiPinsResource::~PinsApiPinsResource()
{
}

std::pair<int, std::string> PinsApiPinsResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsApiPinsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsApiPinsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsApiPinsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsApiPinsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void PinsApiPinsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsApiPinsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto pin = extractJsonModelBodyParam<Pin>(bodyContent);




    int status_code = 500;
    std::shared_ptr<Pin> resultObject = std::make_shared<Pin>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(pin);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 201) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 201, result.empty() ? "Successful pin creation." : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid Pin parameters response" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "The Pin&#39;s image is too small, too large or is broken" : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Board or section not found" : result, contentType);
        return;
    }
    if (status_code == 429) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 429, result.empty() ? "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Pin>> PinsApiPinsResource::handler_POST(
        std::shared_ptr<Pin> const & pin)
{
    throw PinsApiException(501, "Not implemented");
}


std::string PinsApiPinsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
PinsApiPinsPin_idResource::PinsApiPinsPin_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/pins/{pin_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&PinsApiPinsPin_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&PinsApiPinsPin_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

PinsApiPinsPin_idResource::~PinsApiPinsPin_idResource()
{
}

std::pair<int, std::string> PinsApiPinsPin_idResource::handlePinsApiException(const PinsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> PinsApiPinsPin_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> PinsApiPinsPin_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void PinsApiPinsPin_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void PinsApiPinsPin_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void PinsApiPinsPin_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void PinsApiPinsPin_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string pinId = getPathParam_pinId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_DELETE(pinId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 204) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 204, result.empty() ? "Successfully deleted Pin" : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to access board or Pin." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Pin not found." : result, contentType);
        return;
    }
    if (status_code == 0) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void PinsApiPinsPin_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const std::string pinId = getPathParam_pinId_x_extension(request);

    // Getting the query params
    const std::string adAccountId = getQueryParam_adAccountId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Pin> resultObject = std::make_shared<Pin>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(pinId, adAccountId);
    }
    catch(const PinsApiException& e) {
        std::tie(status_code, result) = handlePinsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to access board or Pin." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Pin not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

int PinsApiPinsPin_idResource::handler_DELETE(
        std::string const & pinId)
{
    throw PinsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<Pin>> PinsApiPinsPin_idResource::handler_GET(
    std::string const & pinId, std::string const & adAccountId)
{
    throw PinsApiException(501, "Not implemented");
}

std::string PinsApiPinsPin_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

PinsApi::PinsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

PinsApi::~PinsApi() {}

void PinsApi::setPinsApiPinsPin_idAnalyticsResource(std::shared_ptr<PinsApiPinsPin_idAnalyticsResource> spPinsApiPinsPin_idAnalyticsResource) {
    m_spPinsApiPinsPin_idAnalyticsResource = spPinsApiPinsPin_idAnalyticsResource;
    m_service->publish(m_spPinsApiPinsPin_idAnalyticsResource);
}
void PinsApi::setPinsApiPinsResource(std::shared_ptr<PinsApiPinsResource> spPinsApiPinsResource) {
    m_spPinsApiPinsResource = spPinsApiPinsResource;
    m_service->publish(m_spPinsApiPinsResource);
}
void PinsApi::setPinsApiPinsPin_idResource(std::shared_ptr<PinsApiPinsPin_idResource> spPinsApiPinsPin_idResource) {
    m_spPinsApiPinsPin_idResource = spPinsApiPinsPin_idResource;
    m_service->publish(m_spPinsApiPinsPin_idResource);
}


void PinsApi::publishDefaultResources() {
    if (!m_spPinsApiPinsPin_idAnalyticsResource) {
        setPinsApiPinsPin_idAnalyticsResource(std::make_shared<PinsApiPinsPin_idAnalyticsResource>());
    }
    if (!m_spPinsApiPinsResource) {
        setPinsApiPinsResource(std::make_shared<PinsApiPinsResource>());
    }
    if (!m_spPinsApiPinsPin_idResource) {
        setPinsApiPinsPin_idResource(std::make_shared<PinsApiPinsPin_idResource>());
    }
}

std::shared_ptr<restbed::Service> PinsApi::service() {
    return m_service;
}


}
}
}
}

