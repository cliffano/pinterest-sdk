/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "AdAccountsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

AdAccountsApiException::AdAccountsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int AdAccountsApiException::getStatus() const
{
    return m_status;
}
const char* AdAccountsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

AdAccountsApiAd_accountsAd_account_idAnalyticsResource::AdAccountsApiAd_accountsAd_account_idAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/analytics/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idAnalyticsResource::~AdAccountsApiAd_accountsAd_account_idAnalyticsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAnalyticsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const std::string startDate = getQueryParam_startDate(request);
    const std::string endDate = getQueryParam_endDate(request);
    const int32_t clickWindowDays = getQueryParam_clickWindowDays(request);
    const int32_t engagementWindowDays = getQueryParam_engagementWindowDays(request);
    const int32_t viewWindowDays = getQueryParam_viewWindowDays(request);
    const std::string conversionReportTime = getQueryParam_conversionReportTime(request);


    int status_code = 500;
    std::vector<std::map<std::string, std::shared_ptr<Object>>> resultObject = std::vector<std::shared_ptr<std::map>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> AdAccountsApiAd_accountsAd_account_idAnalyticsResource::handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsResource::AdAccountsApiAd_accountsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsResource::~AdAccountsApiAd_accountsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark(request);
    const int32_t pageSize = getQueryParam_pageSize(request);
    const bool includeSharedAccounts = getQueryParam_includeSharedAccounts(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(bookmark, pageSize, includeSharedAccounts);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "response" : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> AdAccountsApiAd_accountsResource::handler_GET(
        std::string const & bookmark, int32_t const & pageSize, bool const & includeSharedAccounts)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups/analytics/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::~AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const std::string startDate = getQueryParam_startDate(request);
    const std::string endDate = getQueryParam_endDate(request);
    const int32_t clickWindowDays = getQueryParam_clickWindowDays(request);
    const int32_t engagementWindowDays = getQueryParam_engagementWindowDays(request);
    const int32_t viewWindowDays = getQueryParam_viewWindowDays(request);
    const std::string conversionReportTime = getQueryParam_conversionReportTime(request);


    int status_code = 500;
    std::vector<std::map<std::string, std::shared_ptr<Object>>> resultObject = std::vector<std::shared_ptr<std::map>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account group analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & adGroupIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idAd_groupsResource::AdAccountsApiAd_accountsAd_account_idAd_groupsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ad_groups/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idAd_groupsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idAd_groupsResource::~AdAccountsApiAd_accountsAd_account_idAd_groupsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAd_groupsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAd_groupsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAd_groupsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idAd_groupsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const int32_t pageSize = getQueryParam_pageSize(request);
    const std::string order = getQueryParam_order(request);
    const std::string bookmark = getQueryParam_bookmark(request);
    const bool translateInterestsToNames = getQueryParam_translateInterestsToNames(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account group parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> AdAccountsApiAd_accountsAd_account_idAd_groupsResource::handler_GET(
        std::string const & adAccountId, std::vector<std::string> const & campaignIds, std::vector<std::string> const & adGroupIds, std::vector<std::string> const & entityStatuses, int32_t const & pageSize, std::string const & order, std::string const & bookmark, bool const & translateInterestsToNames)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idAd_groupsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ads/analytics/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::~AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const std::string startDate = getQueryParam_startDate(request);
    const std::string endDate = getQueryParam_endDate(request);
    const int32_t clickWindowDays = getQueryParam_clickWindowDays(request);
    const int32_t engagementWindowDays = getQueryParam_engagementWindowDays(request);
    const int32_t viewWindowDays = getQueryParam_viewWindowDays(request);
    const std::string conversionReportTime = getQueryParam_conversionReportTime(request);


    int status_code = 500;
    std::vector<std::map<std::string, std::shared_ptr<Object>>> resultObject = std::vector<std::shared_ptr<std::map>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account ads analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & adIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idAdsResource::AdAccountsApiAd_accountsAd_account_idAdsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/ads/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idAdsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idAdsResource::~AdAccountsApiAd_accountsAd_account_idAdsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAdsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAdsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idAdsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idAdsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idAdsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idAdsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idAdsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const int32_t pageSize = getQueryParam_pageSize(request);
    const std::string order = getQueryParam_order(request);
    const std::string bookmark = getQueryParam_bookmark(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account ads parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> AdAccountsApiAd_accountsAd_account_idAdsResource::handler_GET(
        std::string const & adAccountId, std::vector<std::string> const & campaignIds, std::vector<std::string> const & adGroupIds, std::vector<std::string> const & adIds, std::vector<std::string> const & entityStatuses, int32_t const & pageSize, std::string const & order, std::string const & bookmark)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idAdsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idReportsResource::AdAccountsApiAd_accountsAd_account_idReportsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/reports/");
	this->set_method_handler("POST",
		std::bind(&AdAccountsApiAd_accountsAd_account_idReportsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idReportsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idReportsResource::~AdAccountsApiAd_accountsAd_account_idReportsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idReportsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idReportsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idReportsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idReportsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idReportsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idReportsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idReportsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto adsAnalyticsCreateAsyncRequest = extractJsonModelBodyParam<AdsAnalyticsCreateAsyncRequest>(bodyContent);

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);



    int status_code = 500;
    std::shared_ptr<AdsAnalyticsCreateAsyncResponse> resultObject = std::make_shared<AdsAnalyticsCreateAsyncResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(adAccountId, adsAnalyticsCreateAsyncRequest);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account ads analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void AdAccountsApiAd_accountsAd_account_idReportsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId_x_extension(request);

    // Getting the query params
    const std::string token = getQueryParam_token_x_extension(request);


    int status_code = 500;
    std::shared_ptr<AdsAnalyticsGetAsyncResponse> resultObject = std::make_shared<AdsAnalyticsGetAsyncResponse>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(adAccountId, token);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account ads analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<AdsAnalyticsCreateAsyncResponse>> AdAccountsApiAd_accountsAd_account_idReportsResource::handler_POST(
        std::string const & adAccountId, std::shared_ptr<AdsAnalyticsCreateAsyncRequest> const & adsAnalyticsCreateAsyncRequest)
{
    throw AdAccountsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<AdsAnalyticsGetAsyncResponse>> AdAccountsApiAd_accountsAd_account_idReportsResource::handler_GET(
    std::string const & adAccountId, std::string const & token)
{
    throw AdAccountsApiException(501, "Not implemented");
}

std::string AdAccountsApiAd_accountsAd_account_idReportsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/campaigns/analytics/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::~AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const std::string startDate = getQueryParam_startDate(request);
    const std::string endDate = getQueryParam_endDate(request);
    const int32_t clickWindowDays = getQueryParam_clickWindowDays(request);
    const int32_t engagementWindowDays = getQueryParam_engagementWindowDays(request);
    const int32_t viewWindowDays = getQueryParam_viewWindowDays(request);
    const std::string conversionReportTime = getQueryParam_conversionReportTime(request);


    int status_code = 500;
    std::vector<std::map<std::string, std::shared_ptr<Object>>> resultObject = std::vector<std::shared_ptr<std::map>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account campaign analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & campaignIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idCampaignsResource::AdAccountsApiAd_accountsAd_account_idCampaignsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/campaigns/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idCampaignsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idCampaignsResource::~AdAccountsApiAd_accountsAd_account_idCampaignsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idCampaignsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idCampaignsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idCampaignsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idCampaignsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idCampaignsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idCampaignsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idCampaignsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const int32_t pageSize = getQueryParam_pageSize(request);
    const std::string order = getQueryParam_order(request);
    const std::string bookmark = getQueryParam_bookmark(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account campaign parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> AdAccountsApiAd_accountsAd_account_idCampaignsResource::handler_GET(
        std::string const & adAccountId, std::vector<std::string> const & campaignIds, std::vector<std::string> const & entityStatuses, int32_t const & pageSize, std::string const & order, std::string const & bookmark)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idCampaignsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/ad_accounts/{ad_account_id: .*}/product_groups/analytics/");
	this->set_method_handler("GET",
		std::bind(&AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::~AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource()
{
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::handleAdAccountsApiException(const AdAccountsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string adAccountId = getPathParam_adAccountId(request);

    // Getting the query params
    const std::string startDate = getQueryParam_startDate(request);
    const std::string endDate = getQueryParam_endDate(request);
    const int32_t clickWindowDays = getQueryParam_clickWindowDays(request);
    const int32_t engagementWindowDays = getQueryParam_engagementWindowDays(request);
    const int32_t viewWindowDays = getQueryParam_viewWindowDays(request);
    const std::string conversionReportTime = getQueryParam_conversionReportTime(request);


    int status_code = 500;
    std::vector<std::map<std::string, std::shared_ptr<Object>>> resultObject = std::vector<std::shared_ptr<std::map>>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime);
    }
    catch(const AdAccountsApiException& e) {
        std::tie(status_code, result) = handleAdAccountsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid ad account ads analytics parameters." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & productGroupIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime)
{
    throw AdAccountsApiException(501, "Not implemented");
}


std::string AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

AdAccountsApi::AdAccountsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

AdAccountsApi::~AdAccountsApi() {}

void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAnalyticsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idAnalyticsResource = spAdAccountsApiAd_accountsAd_account_idAnalyticsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idAnalyticsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsResource(std::shared_ptr<AdAccountsApiAd_accountsResource> spAdAccountsApiAd_accountsResource) {
    m_spAdAccountsApiAd_accountsResource = spAdAccountsApiAd_accountsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource = spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idAd_groupsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAd_groupsResource> spAdAccountsApiAd_accountsAd_account_idAd_groupsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idAd_groupsResource = spAdAccountsApiAd_accountsAd_account_idAd_groupsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idAd_groupsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource = spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idAdsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAdsResource> spAdAccountsApiAd_accountsAd_account_idAdsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idAdsResource = spAdAccountsApiAd_accountsAd_account_idAdsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idAdsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idReportsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idReportsResource> spAdAccountsApiAd_accountsAd_account_idReportsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idReportsResource = spAdAccountsApiAd_accountsAd_account_idReportsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idReportsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource = spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idCampaignsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idCampaignsResource> spAdAccountsApiAd_accountsAd_account_idCampaignsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idCampaignsResource = spAdAccountsApiAd_accountsAd_account_idCampaignsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idCampaignsResource);
}
void AdAccountsApi::setAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource) {
    m_spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource = spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource;
    m_service->publish(m_spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource);
}


void AdAccountsApi::publishDefaultResources() {
    if (!m_spAdAccountsApiAd_accountsAd_account_idAnalyticsResource) {
        setAdAccountsApiAd_accountsAd_account_idAnalyticsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idAnalyticsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsResource) {
        setAdAccountsApiAd_accountsResource(std::make_shared<AdAccountsApiAd_accountsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource) {
        setAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idAd_groupsResource) {
        setAdAccountsApiAd_accountsAd_account_idAd_groupsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idAd_groupsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource) {
        setAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idAdsResource) {
        setAdAccountsApiAd_accountsAd_account_idAdsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idAdsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idReportsResource) {
        setAdAccountsApiAd_accountsAd_account_idReportsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idReportsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource) {
        setAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idCampaignsResource) {
        setAdAccountsApiAd_accountsAd_account_idCampaignsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idCampaignsResource>());
    }
    if (!m_spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource) {
        setAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource(std::make_shared<AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource>());
    }
}

std::shared_ptr<restbed::Service> AdAccountsApi::service() {
    return m_service;
}


}
}
}
}

