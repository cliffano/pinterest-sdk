/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BoardsApi.h
 *
 * 
 */

#ifndef BoardsApi_H_
#define BoardsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Board.h"
#include "BoardSection.h"
#include "BoardUpdate.h"
#include "Error.h"
#include "Object.h"
#include "Paginated.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BoardsApiException: public std::exception
{
public:
    BoardsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Create board section
/// </summary>
/// <remarks>
/// Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsApiBoardsBoard_idSectionsResource: public restbed::Resource
{
public:
    BoardsApiBoardsBoard_idSectionsResource(const std::string& context = "/v5");
    virtual ~BoardsApiBoardsBoard_idSectionsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<BoardSection>> handler_POST(
        std::string const & boardId, std::shared_ptr<BoardSection> const & boardSection);

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & boardId, std::string const & bookmark, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_boardId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }


    virtual std::string getPathParam_boardId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }
    virtual std::string getQueryParam_bookmark_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Delete board section
/// </summary>
/// <remarks>
/// Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsApiBoardsBoard_idSectionsSection_idResource: public restbed::Resource
{
public:
    BoardsApiBoardsBoard_idSectionsSection_idResource(const std::string& context = "/v5");
    virtual ~BoardsApiBoardsBoard_idSectionsSection_idResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & boardId, std::string const & sectionId);

    virtual std::pair<int, std::shared_ptr<BoardSection>> handler_PATCH(
        std::string const & boardId, std::string const & sectionId, std::shared_ptr<BoardSection> const & boardSection);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_boardId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }

    virtual std::string getPathParam_sectionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("sectionId", "");
    }


    virtual std::string getPathParam_boardId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }
    virtual std::string getPathParam_sectionId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("sectionId", "");
    }

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List Pins on board section
/// </summary>
/// <remarks>
/// Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsApiBoardsBoard_idSectionsSection_idPinsResource: public restbed::Resource
{
public:
    BoardsApiBoardsBoard_idSectionsSection_idPinsResource(const std::string& context = "/v5");
    virtual ~BoardsApiBoardsBoard_idSectionsSection_idPinsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & boardId, std::string const & sectionId, std::string const & bookmark, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_boardId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }

    virtual std::string getPathParam_sectionId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("sectionId", "");
    }

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }



    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Create board
/// </summary>
/// <remarks>
/// Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsApiBoardsResource: public restbed::Resource
{
public:
    BoardsApiBoardsResource(const std::string& context = "/v5");
    virtual ~BoardsApiBoardsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Board>> handler_POST(
        std::shared_ptr<Board> const & board);

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & bookmark, int32_t const & pageSize, std::string const & privacy);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);


    virtual std::string getQueryParam_bookmark_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }
    virtual std::string getQueryParam_privacy_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("privacy", "");
    }

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Delete board
/// </summary>
/// <remarks>
/// Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsApiBoardsBoard_idResource: public restbed::Resource
{
public:
    BoardsApiBoardsBoard_idResource(const std::string& context = "/v5");
    virtual ~BoardsApiBoardsBoard_idResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & boardId);

    virtual std::pair<int, std::shared_ptr<Board>> handler_GET(
        std::string const & boardId);
    virtual std::pair<int, std::shared_ptr<Board>> handler_PATCH(
        std::string const & boardId, std::shared_ptr<BoardUpdate> const & boardUpdate);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_boardId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }


    virtual std::string getPathParam_boardId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }
    virtual std::string getPathParam_boardId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }

    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List Pins on board
/// </summary>
/// <remarks>
/// Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
/// </remarks>
class  BoardsApiBoardsBoard_idPinsResource: public restbed::Resource
{
public:
    BoardsApiBoardsBoard_idPinsResource(const std::string& context = "/v5");
    virtual ~BoardsApiBoardsBoard_idPinsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & boardId, std::string const & bookmark, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_boardId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("boardId", "");
    }

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }



    virtual std::pair<int, std::string> handleBoardsApiException(const BoardsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  BoardsApi
{
public:
    explicit BoardsApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~BoardsApi();

    virtual void setBoardsApiBoardsBoard_idSectionsResource(std::shared_ptr<BoardsApiBoardsBoard_idSectionsResource> spBoardsApiBoardsBoard_idSectionsResource);
    virtual void setBoardsApiBoardsBoard_idSectionsSection_idResource(std::shared_ptr<BoardsApiBoardsBoard_idSectionsSection_idResource> spBoardsApiBoardsBoard_idSectionsSection_idResource);
    virtual void setBoardsApiBoardsBoard_idSectionsSection_idPinsResource(std::shared_ptr<BoardsApiBoardsBoard_idSectionsSection_idPinsResource> spBoardsApiBoardsBoard_idSectionsSection_idPinsResource);
    virtual void setBoardsApiBoardsResource(std::shared_ptr<BoardsApiBoardsResource> spBoardsApiBoardsResource);
    virtual void setBoardsApiBoardsBoard_idResource(std::shared_ptr<BoardsApiBoardsBoard_idResource> spBoardsApiBoardsBoard_idResource);
    virtual void setBoardsApiBoardsBoard_idPinsResource(std::shared_ptr<BoardsApiBoardsBoard_idPinsResource> spBoardsApiBoardsBoard_idPinsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<BoardsApiBoardsBoard_idSectionsResource> m_spBoardsApiBoardsBoard_idSectionsResource;
	std::shared_ptr<BoardsApiBoardsBoard_idSectionsSection_idResource> m_spBoardsApiBoardsBoard_idSectionsSection_idResource;
	std::shared_ptr<BoardsApiBoardsBoard_idSectionsSection_idPinsResource> m_spBoardsApiBoardsBoard_idSectionsSection_idPinsResource;
	std::shared_ptr<BoardsApiBoardsResource> m_spBoardsApiBoardsResource;
	std::shared_ptr<BoardsApiBoardsBoard_idResource> m_spBoardsApiBoardsBoard_idResource;
	std::shared_ptr<BoardsApiBoardsBoard_idPinsResource> m_spBoardsApiBoardsBoard_idPinsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BoardsApi_H_ */

