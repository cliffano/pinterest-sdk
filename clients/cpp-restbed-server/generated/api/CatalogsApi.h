/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsApi.h
 *
 * 
 */

#ifndef CatalogsApi_H_
#define CatalogsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "CatalogsFeed.h"
#include "CatalogsFeedsCreateRequest.h"
#include "CatalogsFeedsUpdateRequest.h"
#include "CatalogsItems.h"
#include "CatalogsItemsBatch.h"
#include "CatalogsItemsBatchRequest.h"
#include "CatalogsProductGroup.h"
#include "CatalogsProductGroupCreateRequest.h"
#include "CatalogsProductGroupUpdateRequest.h"
#include "Error.h"
#include "Object.h"
#include "Paginated.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  CatalogsApiException: public std::exception
{
public:
    CatalogsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Create product group
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
/// </remarks>
class  CatalogsApiCatalogsProduct_groupsResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsProduct_groupsResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsProduct_groupsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Object>> handler_POST(
        std::shared_ptr<CatalogsProductGroupCreateRequest> const & catalogsProductGroupCreateRequest);

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & feedId, std::string const & bookmark, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);


    virtual std::string getQueryParam_feedId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("feedId", "");
    }
    virtual std::string getQueryParam_bookmark_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Delete product group
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
/// </remarks>
class  CatalogsApiCatalogsProduct_groupsProduct_group_idResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsProduct_groupsProduct_group_idResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsProduct_groupsProduct_group_idResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & productGroupId);

    virtual std::pair<int, std::shared_ptr<CatalogsProductGroup>> handler_PATCH(
        std::string const & productGroupId, std::shared_ptr<CatalogsProductGroupUpdateRequest> const & catalogsProductGroupUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_productGroupId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("productGroupId", "");
    }


    virtual std::string getPathParam_productGroupId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("productGroupId", "");
    }

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List processing results for a given feed
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
/// </remarks>
class  CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & feedId, std::string const & bookmark, int32_t const & pageSize);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", "");
    }

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }



    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Create feed
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
/// </remarks>
class  CatalogsApiCatalogsFeedsResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsFeedsResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsFeedsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CatalogsFeed>> handler_POST(
        std::shared_ptr<CatalogsFeedsCreateRequest> const & catalogsFeedsCreateRequest);

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & bookmark, int32_t const & pageSize);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);


    virtual std::string getQueryParam_bookmark_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }
    virtual int32_t getQueryParam_pageSize_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Delete feed
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
/// </remarks>
class  CatalogsApiCatalogsFeedsFeed_idResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsFeedsFeed_idResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsFeedsFeed_idResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string const & feedId);

    virtual std::pair<int, std::shared_ptr<CatalogsFeed>> handler_GET(
        std::string const & feedId);
    virtual std::pair<int, std::shared_ptr<CatalogsFeed>> handler_PATCH(
        std::string const & feedId, std::shared_ptr<CatalogsFeedsUpdateRequest> const & catalogsFeedsUpdateRequest);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_feedId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", "");
    }


    virtual std::string getPathParam_feedId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", "");
    }
    virtual std::string getPathParam_feedId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("feedId", "");
    }

    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_PATCH_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get catalogs items batch
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
/// </remarks>
class  CatalogsApiCatalogsItemsBatchBatch_idResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsItemsBatchBatch_idResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsItemsBatchBatch_idResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CatalogsItemsBatch>> handler_GET(
        std::string const & batchId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_batchId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("batchId", "");
    }



    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Perform an operation on an item batch
/// </summary>
/// <remarks>
/// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
/// </remarks>
class  CatalogsApiCatalogsItemsBatchResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsItemsBatchResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsItemsBatchResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CatalogsItemsBatch>> handler_POST(
        std::shared_ptr<CatalogsItemsBatchRequest> const & catalogsItemsBatchRequest);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);



    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get catalogs items
/// </summary>
/// <remarks>
/// Get the items of the catalog created by the \&quot;operating user_account\&quot;
/// </remarks>
class  CatalogsApiCatalogsItemsResource: public restbed::Resource
{
public:
    CatalogsApiCatalogsItemsResource(const std::string& context = "/v5");
    virtual ~CatalogsApiCatalogsItemsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<CatalogsItems>> handler_GET(
        std::string const & country, std::vector<std::string> const & itemIds, std::string const & language);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_country(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("country", "");
    }

    virtual std::string getQueryParam_language(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("language", "");
    }



    virtual std::pair<int, std::string> handleCatalogsApiException(const CatalogsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  CatalogsApi
{
public:
    explicit CatalogsApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~CatalogsApi();

    virtual void setCatalogsApiCatalogsProduct_groupsResource(std::shared_ptr<CatalogsApiCatalogsProduct_groupsResource> spCatalogsApiCatalogsProduct_groupsResource);
    virtual void setCatalogsApiCatalogsProduct_groupsProduct_group_idResource(std::shared_ptr<CatalogsApiCatalogsProduct_groupsProduct_group_idResource> spCatalogsApiCatalogsProduct_groupsProduct_group_idResource);
    virtual void setCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(std::shared_ptr<CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource> spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource);
    virtual void setCatalogsApiCatalogsFeedsResource(std::shared_ptr<CatalogsApiCatalogsFeedsResource> spCatalogsApiCatalogsFeedsResource);
    virtual void setCatalogsApiCatalogsFeedsFeed_idResource(std::shared_ptr<CatalogsApiCatalogsFeedsFeed_idResource> spCatalogsApiCatalogsFeedsFeed_idResource);
    virtual void setCatalogsApiCatalogsItemsBatchBatch_idResource(std::shared_ptr<CatalogsApiCatalogsItemsBatchBatch_idResource> spCatalogsApiCatalogsItemsBatchBatch_idResource);
    virtual void setCatalogsApiCatalogsItemsBatchResource(std::shared_ptr<CatalogsApiCatalogsItemsBatchResource> spCatalogsApiCatalogsItemsBatchResource);
    virtual void setCatalogsApiCatalogsItemsResource(std::shared_ptr<CatalogsApiCatalogsItemsResource> spCatalogsApiCatalogsItemsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<CatalogsApiCatalogsProduct_groupsResource> m_spCatalogsApiCatalogsProduct_groupsResource;
	std::shared_ptr<CatalogsApiCatalogsProduct_groupsProduct_group_idResource> m_spCatalogsApiCatalogsProduct_groupsProduct_group_idResource;
	std::shared_ptr<CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource> m_spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource;
	std::shared_ptr<CatalogsApiCatalogsFeedsResource> m_spCatalogsApiCatalogsFeedsResource;
	std::shared_ptr<CatalogsApiCatalogsFeedsFeed_idResource> m_spCatalogsApiCatalogsFeedsFeed_idResource;
	std::shared_ptr<CatalogsApiCatalogsItemsBatchBatch_idResource> m_spCatalogsApiCatalogsItemsBatchBatch_idResource;
	std::shared_ptr<CatalogsApiCatalogsItemsBatchResource> m_spCatalogsApiCatalogsItemsBatchResource;
	std::shared_ptr<CatalogsApiCatalogsItemsResource> m_spCatalogsApiCatalogsItemsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* CatalogsApi_H_ */

