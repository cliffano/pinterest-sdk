/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserAccountApi.h
 *
 * 
 */

#ifndef UserAccountApi_H_
#define UserAccountApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "Account.h"
#include "AnalyticsMetricsResponse.h"
#include "Error.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  UserAccountApiException: public std::exception
{
public:
    UserAccountApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Get user account analytics
/// </summary>
/// <remarks>
/// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
/// </remarks>
class  UserAccountApiUser_accountAnalyticsResource: public restbed::Resource
{
public:
    UserAccountApiUser_accountAnalyticsResource(const std::string& context = "/v5");
    virtual ~UserAccountApiUser_accountAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::map<std::string, std::shared_ptr<AnalyticsMetricsResponse>>> handler_GET(
        std::string const & startDate, std::string const & endDate, std::string const & fromClaimedContent, std::string const & pinFormat, std::string const & appTypes, std::vector<std::string> const & metricTypes, std::string const & splitField, std::string const & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual std::string getQueryParam_fromClaimedContent(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("fromClaimedContent", "BOTH");
    }

    virtual std::string getQueryParam_pinFormat(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pinFormat", "ALL");
    }

    virtual std::string getQueryParam_appTypes(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("appTypes", "ALL");
    }

    virtual std::string getQueryParam_splitField(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("splitField", "NO_SPLIT");
    }

    virtual std::string getQueryParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("adAccountId", "");
    }



    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get user account
/// </summary>
/// <remarks>
/// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
/// </remarks>
class  UserAccountApiUser_accountResource: public restbed::Resource
{
public:
    UserAccountApiUser_accountResource(const std::string& context = "/v5");
    virtual ~UserAccountApiUser_accountResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Account>> handler_GET(
        std::string const & adAccountId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("adAccountId", "");
    }



    virtual std::pair<int, std::string> handleUserAccountApiException(const UserAccountApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  UserAccountApi
{
public:
    explicit UserAccountApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~UserAccountApi();

    virtual void setUserAccountApiUser_accountAnalyticsResource(std::shared_ptr<UserAccountApiUser_accountAnalyticsResource> spUserAccountApiUser_accountAnalyticsResource);
    virtual void setUserAccountApiUser_accountResource(std::shared_ptr<UserAccountApiUser_accountResource> spUserAccountApiUser_accountResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<UserAccountApiUser_accountAnalyticsResource> m_spUserAccountApiUser_accountAnalyticsResource;
	std::shared_ptr<UserAccountApiUser_accountResource> m_spUserAccountApiUser_accountResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* UserAccountApi_H_ */

