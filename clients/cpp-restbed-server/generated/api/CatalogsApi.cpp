/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "CatalogsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CatalogsApiException::CatalogsApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int CatalogsApiException::getStatus() const
{
    return m_status;
}
const char* CatalogsApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
std::shared_ptr<MODEL_T> extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = std::make_shared<MODEL_T>(pt);
    return model;
}

template<class MODEL_T>
std::vector<std::shared_ptr<MODEL_T>> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<std::shared_ptr<MODEL_T>>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(std::make_shared<MODEL_T>(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

CatalogsApiCatalogsProduct_groupsResource::CatalogsApiCatalogsProduct_groupsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups/");
	this->set_method_handler("POST",
		std::bind(&CatalogsApiCatalogsProduct_groupsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsApiCatalogsProduct_groupsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsProduct_groupsResource::~CatalogsApiCatalogsProduct_groupsResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsProduct_groupsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsProduct_groupsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsProduct_groupsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsProduct_groupsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsProduct_groupsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsProduct_groupsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsProduct_groupsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto catalogsProductGroupCreateRequest = extractJsonModelBodyParam<CatalogsProductGroupCreateRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<Object> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(catalogsProductGroupCreateRequest);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 201) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 201, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid body." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Forbidden. Account not approved for feed mutations yet." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Conflict. Can&#39;t create this catalogs product group with this value." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void CatalogsApiCatalogsProduct_groupsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the query params
    const std::string feedId = getQueryParam_feedId_x_extension(request);

    const std::string bookmark = getQueryParam_bookmark_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(feedId, bookmark, pageSize);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid feed parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Forbidden. Account not approved for feed mutations yet." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Data feed not found." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Conflict. Can&#39;t create this catalogs product group with this value." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<Object>> CatalogsApiCatalogsProduct_groupsResource::handler_POST(
        std::shared_ptr<CatalogsProductGroupCreateRequest> const & catalogsProductGroupCreateRequest)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<Paginated>> CatalogsApiCatalogsProduct_groupsResource::handler_GET(
    std::string const & feedId, std::string const & bookmark, int32_t const & pageSize)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::string CatalogsApiCatalogsProduct_groupsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsProduct_groupsProduct_group_idResource::CatalogsApiCatalogsProduct_groupsProduct_group_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/product_groups/{product_group_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsProduct_groupsProduct_group_idResource::~CatalogsApiCatalogsProduct_groupsProduct_group_idResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsProduct_groupsProduct_group_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsProduct_groupsProduct_group_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsProduct_groupsProduct_group_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string productGroupId = getPathParam_productGroupId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_DELETE(productGroupId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 204) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 204, result.empty() ? "Catalogs Product Group deleted successfully." : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid catalogs product group id parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Forbidden. Account not approved for feed mutations yet." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Catalogs product group not found." : result, contentType);
        return;
    }
    if (status_code == 409) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Conflict. Can&#39;t delete this catalogs product group." : result, contentType);
        return;
    }
    if (status_code == 0) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto productGroupId = std::make_shared<>(bodyContent);
    auto catalogsProductGroupUpdateRequest = extractJsonModelBodyParam<CatalogsProductGroupUpdateRequest>(bodyContent);

    // Getting the path params
    const std::string productGroupId = getPathParam_productGroupId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<CatalogsProductGroup> resultObject = std::make_shared<CatalogsProductGroup>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(productGroupId, catalogsProductGroupUpdateRequest);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Catalogs product group not found." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Conflict. Can&#39;t update this catalogs product group to this value." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

int CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handler_DELETE(
        std::string const & productGroupId)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<CatalogsProductGroup>> CatalogsApiCatalogsProduct_groupsProduct_group_idResource::handler_PATCH(
    std::string const & productGroupId, std::shared_ptr<CatalogsProductGroupUpdateRequest> const & catalogsProductGroupUpdateRequest)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::string CatalogsApiCatalogsProduct_groupsProduct_group_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds/{feed_id: .*}/processing_results/");
	this->set_method_handler("GET",
		std::bind(&CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::~CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string feedId = getPathParam_feedId(request);

    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark(request);
    const int32_t pageSize = getQueryParam_pageSize(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(feedId, bookmark, pageSize);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Feed not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<Paginated>> CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::handler_GET(
        std::string const & feedId, std::string const & bookmark, int32_t const & pageSize)
{
    throw CatalogsApiException(501, "Not implemented");
}


std::string CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsFeedsResource::CatalogsApiCatalogsFeedsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds/");
	this->set_method_handler("POST",
		std::bind(&CatalogsApiCatalogsFeedsResource::handler_POST_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsApiCatalogsFeedsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsFeedsResource::~CatalogsApiCatalogsFeedsResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsFeedsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsFeedsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsFeedsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsFeedsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto catalogsFeedsCreateRequest = extractJsonModelBodyParam<CatalogsFeedsCreateRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<CatalogsFeed> resultObject = std::make_shared<CatalogsFeed>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(catalogsFeedsCreateRequest);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 201) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 201, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid feed parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Business account required." : result, contentType);
        return;
    }
    if (status_code == 409) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "User website required." : result, contentType);
        return;
    }
    if (status_code == 422) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 422, result.empty() ? "Unique feed name is required." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void CatalogsApiCatalogsFeedsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the query params
    const std::string bookmark = getQueryParam_bookmark_x_extension(request);

    const int32_t pageSize = getQueryParam_pageSize_x_extension(request);


    int status_code = 500;
    std::shared_ptr<Paginated> resultObject = nullptr;
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(bookmark, pageSize);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

std::pair<int, std::shared_ptr<CatalogsFeed>> CatalogsApiCatalogsFeedsResource::handler_POST(
        std::shared_ptr<CatalogsFeedsCreateRequest> const & catalogsFeedsCreateRequest)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<Paginated>> CatalogsApiCatalogsFeedsResource::handler_GET(
    std::string const & bookmark, int32_t const & pageSize)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::string CatalogsApiCatalogsFeedsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsFeedsFeed_idResource::CatalogsApiCatalogsFeedsFeed_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/feeds/{feed_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&CatalogsApiCatalogsFeedsFeed_idResource::handler_DELETE_internal, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&CatalogsApiCatalogsFeedsFeed_idResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&CatalogsApiCatalogsFeedsFeed_idResource::handler_PATCH_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsFeedsFeed_idResource::~CatalogsApiCatalogsFeedsFeed_idResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsFeed_idResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsFeed_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsFeedsFeed_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsFeedsFeed_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsFeedsFeed_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsFeedsFeed_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsFeedsFeed_idResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string feedId = getPathParam_feedId(request);



    int status_code = 500;
    std::string result = "";

    try {
         status_code =
             handler_DELETE(feedId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 204) {

        const constexpr auto contentType = "text/plain";
        returnResponse(session, 204, result.empty() ? "Feed deleted successfully." : result, contentType);
        return;
    }
    if (status_code == 400) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid feed parameters." : result, contentType);
        return;
    }
    if (status_code == 403) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Forbidden. Account not approved for feed mutations yet." : result, contentType);
        return;
    }
    if (status_code == 404) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Data feed not found." : result, contentType);
        return;
    }
    if (status_code == 409) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 409, result.empty() ? "Conflict. Can&#39;t delete a feed with active promotions." : result, contentType);
        return;
    }
    if (status_code == 0) {

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

// x-extension
void CatalogsApiCatalogsFeedsFeed_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();

    // Getting the path params
    const std::string feedId = getPathParam_feedId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<CatalogsFeed> resultObject = std::make_shared<CatalogsFeed>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_GET(feedId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid feed parameters." : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Unauthorized access." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Data feed not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error." : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}
// x-extension
void CatalogsApiCatalogsFeedsFeed_idResource::handler_PATCH_internal(const std::shared_ptr<restbed::Session> session) {

    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // body params or form params here from the body content string
    auto feedId = std::make_shared<>(bodyContent);
    auto catalogsFeedsUpdateRequest = extractJsonModelBodyParam<CatalogsFeedsUpdateRequest>(bodyContent);

    // Getting the path params
    const std::string feedId = getPathParam_feedId_x_extension(request);


    int status_code = 500;
    std::shared_ptr<CatalogsFeed> resultObject = std::make_shared<CatalogsFeed>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
            handler_PATCH(feedId, catalogsFeedsUpdateRequest);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Success" : result, contentType);
        return;
    }
    if (status_code == 400) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 400, result.empty() ? "Invalid feed parameters." : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Forbidden. Account not approved for feed mutations yet." : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Data feed not found." : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}

int CatalogsApiCatalogsFeedsFeed_idResource::handler_DELETE(
        std::string const & feedId)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::pair<int, std::shared_ptr<CatalogsFeed>> CatalogsApiCatalogsFeedsFeed_idResource::handler_GET(
    std::string const & feedId)
{
    throw CatalogsApiException(501, "Not implemented");
}
std::pair<int, std::shared_ptr<CatalogsFeed>> CatalogsApiCatalogsFeedsFeed_idResource::handler_PATCH(
    std::string const & feedId, std::shared_ptr<CatalogsFeedsUpdateRequest> const & catalogsFeedsUpdateRequest)
{
    throw CatalogsApiException(501, "Not implemented");
}

std::string CatalogsApiCatalogsFeedsFeed_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsItemsBatchBatch_idResource::CatalogsApiCatalogsItemsBatchBatch_idResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/items/batch/{batch_id: .*}/");
	this->set_method_handler("GET",
		std::bind(&CatalogsApiCatalogsItemsBatchBatch_idResource::handler_GET_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsItemsBatchBatch_idResource::~CatalogsApiCatalogsItemsBatchBatch_idResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsItemsBatchBatch_idResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsItemsBatchBatch_idResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsItemsBatchBatch_idResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsItemsBatchBatch_idResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsItemsBatchBatch_idResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsItemsBatchBatch_idResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsItemsBatchBatch_idResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();

    // Getting the path params
    const std::string batchId = getPathParam_batchId(request);



    int status_code = 500;
    std::shared_ptr<CatalogsItemsBatch> resultObject = std::make_shared<CatalogsItemsBatch>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(batchId);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Response containing the requested catalogs items batch" : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Not authorized to access catalogs items batch" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to access catalogs items batch" : result, contentType);
        return;
    }
    if (status_code == 404) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 404, result.empty() ? "Catalogs items batch not found" : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CatalogsItemsBatch>> CatalogsApiCatalogsItemsBatchBatch_idResource::handler_GET(
        std::string const & batchId)
{
    throw CatalogsApiException(501, "Not implemented");
}


std::string CatalogsApiCatalogsItemsBatchBatch_idResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsItemsBatchResource::CatalogsApiCatalogsItemsBatchResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/items/batch/");
	this->set_method_handler("POST",
		std::bind(&CatalogsApiCatalogsItemsBatchResource::handler_POST_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsItemsBatchResource::~CatalogsApiCatalogsItemsBatchResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsItemsBatchResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsItemsBatchResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsItemsBatchResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsItemsBatchResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsItemsBatchResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsItemsBatchResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsItemsBatchResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    std::string bodyContent = extractBodyContent(session);

    // Get body params or form params here from the body content string
    auto catalogsItemsBatchRequest = extractJsonModelBodyParam<CatalogsItemsBatchRequest>(bodyContent);




    int status_code = 500;
    std::shared_ptr<CatalogsItemsBatch> resultObject = std::make_shared<CatalogsItemsBatch>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_POST(catalogsItemsBatchRequest);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Response containing the requested catalogs items batch" : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Not authorized to post catalogs items" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to post catalogs items" : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CatalogsItemsBatch>> CatalogsApiCatalogsItemsBatchResource::handler_POST(
        std::shared_ptr<CatalogsItemsBatchRequest> const & catalogsItemsBatchRequest)
{
    throw CatalogsApiException(501, "Not implemented");
}


std::string CatalogsApiCatalogsItemsBatchResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}
CatalogsApiCatalogsItemsResource::CatalogsApiCatalogsItemsResource(const std::string& context /* = "/v5" */)
{
	this->set_path(context + "/catalogs/items/");
	this->set_method_handler("GET",
		std::bind(&CatalogsApiCatalogsItemsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

CatalogsApiCatalogsItemsResource::~CatalogsApiCatalogsItemsResource()
{
}

std::pair<int, std::string> CatalogsApiCatalogsItemsResource::handleCatalogsApiException(const CatalogsApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsItemsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CatalogsApiCatalogsItemsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CatalogsApiCatalogsItemsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CatalogsApiCatalogsItemsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, const std::string& contentType)
{
    session->close(status, result, { {"Connection", "close"}, {"Content-Type", contentType} });
}

void CatalogsApiCatalogsItemsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CatalogsApiCatalogsItemsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();


    // Getting the query params
    const std::string country = getQueryParam_country(request);
    const std::string language = getQueryParam_language(request);


    int status_code = 500;
    std::shared_ptr<CatalogsItems> resultObject = std::make_shared<CatalogsItems>();
    std::string result = "";

    try {
        std::tie(status_code, resultObject) =
             handler_GET(country, itemIds, language);
    }
    catch(const CatalogsApiException& e) {
        std::tie(status_code, result) = handleCatalogsApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }

    if (status_code == 200) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 200, result.empty() ? "Response containing the requested catalogs items" : result, contentType);
        return;
    }
    if (status_code == 401) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 401, result.empty() ? "Not authorized to access catalogs items" : result, contentType);
        return;
    }
    if (status_code == 403) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 403, result.empty() ? "Not authorized to access catalogs items" : result, contentType);
        return;
    }
    if (status_code == 0) {
        result = resultObject->toJsonString();

        const constexpr auto contentType = "application/json";
        returnResponse(session, 0, result.empty() ? "Unexpected error" : result, contentType);
        return;
    }
    defaultSessionClose(session, status_code, result);
}


std::pair<int, std::shared_ptr<CatalogsItems>> CatalogsApiCatalogsItemsResource::handler_GET(
        std::string const & country, std::vector<std::string> const & itemIds, std::string const & language)
{
    throw CatalogsApiException(501, "Not implemented");
}


std::string CatalogsApiCatalogsItemsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

CatalogsApi::CatalogsApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

CatalogsApi::~CatalogsApi() {}

void CatalogsApi::setCatalogsApiCatalogsProduct_groupsResource(std::shared_ptr<CatalogsApiCatalogsProduct_groupsResource> spCatalogsApiCatalogsProduct_groupsResource) {
    m_spCatalogsApiCatalogsProduct_groupsResource = spCatalogsApiCatalogsProduct_groupsResource;
    m_service->publish(m_spCatalogsApiCatalogsProduct_groupsResource);
}
void CatalogsApi::setCatalogsApiCatalogsProduct_groupsProduct_group_idResource(std::shared_ptr<CatalogsApiCatalogsProduct_groupsProduct_group_idResource> spCatalogsApiCatalogsProduct_groupsProduct_group_idResource) {
    m_spCatalogsApiCatalogsProduct_groupsProduct_group_idResource = spCatalogsApiCatalogsProduct_groupsProduct_group_idResource;
    m_service->publish(m_spCatalogsApiCatalogsProduct_groupsProduct_group_idResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(std::shared_ptr<CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource> spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource) {
    m_spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource = spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource;
    m_service->publish(m_spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsResource(std::shared_ptr<CatalogsApiCatalogsFeedsResource> spCatalogsApiCatalogsFeedsResource) {
    m_spCatalogsApiCatalogsFeedsResource = spCatalogsApiCatalogsFeedsResource;
    m_service->publish(m_spCatalogsApiCatalogsFeedsResource);
}
void CatalogsApi::setCatalogsApiCatalogsFeedsFeed_idResource(std::shared_ptr<CatalogsApiCatalogsFeedsFeed_idResource> spCatalogsApiCatalogsFeedsFeed_idResource) {
    m_spCatalogsApiCatalogsFeedsFeed_idResource = spCatalogsApiCatalogsFeedsFeed_idResource;
    m_service->publish(m_spCatalogsApiCatalogsFeedsFeed_idResource);
}
void CatalogsApi::setCatalogsApiCatalogsItemsBatchBatch_idResource(std::shared_ptr<CatalogsApiCatalogsItemsBatchBatch_idResource> spCatalogsApiCatalogsItemsBatchBatch_idResource) {
    m_spCatalogsApiCatalogsItemsBatchBatch_idResource = spCatalogsApiCatalogsItemsBatchBatch_idResource;
    m_service->publish(m_spCatalogsApiCatalogsItemsBatchBatch_idResource);
}
void CatalogsApi::setCatalogsApiCatalogsItemsBatchResource(std::shared_ptr<CatalogsApiCatalogsItemsBatchResource> spCatalogsApiCatalogsItemsBatchResource) {
    m_spCatalogsApiCatalogsItemsBatchResource = spCatalogsApiCatalogsItemsBatchResource;
    m_service->publish(m_spCatalogsApiCatalogsItemsBatchResource);
}
void CatalogsApi::setCatalogsApiCatalogsItemsResource(std::shared_ptr<CatalogsApiCatalogsItemsResource> spCatalogsApiCatalogsItemsResource) {
    m_spCatalogsApiCatalogsItemsResource = spCatalogsApiCatalogsItemsResource;
    m_service->publish(m_spCatalogsApiCatalogsItemsResource);
}


void CatalogsApi::publishDefaultResources() {
    if (!m_spCatalogsApiCatalogsProduct_groupsResource) {
        setCatalogsApiCatalogsProduct_groupsResource(std::make_shared<CatalogsApiCatalogsProduct_groupsResource>());
    }
    if (!m_spCatalogsApiCatalogsProduct_groupsProduct_group_idResource) {
        setCatalogsApiCatalogsProduct_groupsProduct_group_idResource(std::make_shared<CatalogsApiCatalogsProduct_groupsProduct_group_idResource>());
    }
    if (!m_spCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource) {
        setCatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource(std::make_shared<CatalogsApiCatalogsFeedsFeed_idProcessing_resultsResource>());
    }
    if (!m_spCatalogsApiCatalogsFeedsResource) {
        setCatalogsApiCatalogsFeedsResource(std::make_shared<CatalogsApiCatalogsFeedsResource>());
    }
    if (!m_spCatalogsApiCatalogsFeedsFeed_idResource) {
        setCatalogsApiCatalogsFeedsFeed_idResource(std::make_shared<CatalogsApiCatalogsFeedsFeed_idResource>());
    }
    if (!m_spCatalogsApiCatalogsItemsBatchBatch_idResource) {
        setCatalogsApiCatalogsItemsBatchBatch_idResource(std::make_shared<CatalogsApiCatalogsItemsBatchBatch_idResource>());
    }
    if (!m_spCatalogsApiCatalogsItemsBatchResource) {
        setCatalogsApiCatalogsItemsBatchResource(std::make_shared<CatalogsApiCatalogsItemsBatchResource>());
    }
    if (!m_spCatalogsApiCatalogsItemsResource) {
        setCatalogsApiCatalogsItemsResource(std::make_shared<CatalogsApiCatalogsItemsResource>());
    }
}

std::shared_ptr<restbed::Service> CatalogsApi::service() {
    return m_service;
}


}
}
}
}

