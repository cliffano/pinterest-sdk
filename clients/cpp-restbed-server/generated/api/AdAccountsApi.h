/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdAccountsApi.h
 *
 * 
 */

#ifndef AdAccountsApi_H_
#define AdAccountsApi_H_


#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "AdsAnalyticsCreateAsyncRequest.h"
#include "AdsAnalyticsCreateAsyncResponse.h"
#include "AdsAnalyticsGetAsyncResponse.h"
#include "AnyType.h"
#include "Error.h"
#include "Granularity.h"
#include "Object.h"
#include "Paginated.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  AdAccountsApiException: public std::exception
{
public:
    AdAccountsApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

/// <summary>
/// Get ad account analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idAnalyticsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idAnalyticsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual int32_t getQueryParam_clickWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("clickWindowDays", 30);
    }

    virtual int32_t getQueryParam_engagementWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("engagementWindowDays", 30);
    }

    virtual int32_t getQueryParam_viewWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("viewWindowDays", 1);
    }

    virtual std::string getQueryParam_conversionReportTime(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List ad accounts
/// </summary>
/// <remarks>
/// Get a list of the ad_accounts that the \&quot;operation user_account\&quot; has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;.
/// </remarks>
class  AdAccountsApiAd_accountsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & bookmark, int32_t const & pageSize, bool const & includeSharedAccounts);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual bool getQueryParam_includeSharedAccounts(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("includeSharedAccounts", true);
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get ad group analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & adGroupIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual int32_t getQueryParam_clickWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("clickWindowDays", 30);
    }

    virtual int32_t getQueryParam_engagementWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("engagementWindowDays", 30);
    }

    virtual int32_t getQueryParam_viewWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("viewWindowDays", 1);
    }

    virtual std::string getQueryParam_conversionReportTime(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List ad groups
/// </summary>
/// <remarks>
/// Get a list of the ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idAd_groupsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idAd_groupsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idAd_groupsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & adAccountId, std::vector<std::string> const & campaignIds, std::vector<std::string> const & adGroupIds, std::vector<std::string> const & entityStatuses, int32_t const & pageSize, std::string const & order, std::string const & bookmark, bool const & translateInterestsToNames);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual std::string getQueryParam_order(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("order", "");
    }

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }

    virtual bool getQueryParam_translateInterestsToNames(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("translateInterestsToNames", false);
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get ad analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & adIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual int32_t getQueryParam_clickWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("clickWindowDays", 30);
    }

    virtual int32_t getQueryParam_engagementWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("engagementWindowDays", 30);
    }

    virtual int32_t getQueryParam_viewWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("viewWindowDays", 1);
    }

    virtual std::string getQueryParam_conversionReportTime(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List ads
/// </summary>
/// <remarks>
/// Get a list of the ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idAdsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idAdsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idAdsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & adAccountId, std::vector<std::string> const & campaignIds, std::vector<std::string> const & adGroupIds, std::vector<std::string> const & adIds, std::vector<std::string> const & entityStatuses, int32_t const & pageSize, std::string const & order, std::string const & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual std::string getQueryParam_order(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("order", "");
    }

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Create async request for an account analytics report
/// </summary>
/// <remarks>
/// This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idReportsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idReportsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idReportsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<AdsAnalyticsCreateAsyncResponse>> handler_POST(
        std::string const & adAccountId, std::shared_ptr<AdsAnalyticsCreateAsyncRequest> const & adsAnalyticsCreateAsyncRequest);

    virtual std::pair<int, std::shared_ptr<AdsAnalyticsGetAsyncResponse>> handler_GET(
        std::string const & adAccountId, std::string const & token);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }


    virtual std::string getPathParam_adAccountId_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }
    virtual std::string getQueryParam_token_x_extension(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("token", "");
    }

    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get campaign analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & campaignIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual int32_t getQueryParam_clickWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("clickWindowDays", 30);
    }

    virtual int32_t getQueryParam_engagementWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("engagementWindowDays", 30);
    }

    virtual int32_t getQueryParam_viewWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("viewWindowDays", 1);
    }

    virtual std::string getQueryParam_conversionReportTime(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// List campaigns
/// </summary>
/// <remarks>
/// Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idCampaignsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idCampaignsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idCampaignsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::shared_ptr<Paginated>> handler_GET(
        std::string const & adAccountId, std::vector<std::string> const & campaignIds, std::vector<std::string> const & entityStatuses, int32_t const & pageSize, std::string const & order, std::string const & bookmark);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual int32_t getQueryParam_pageSize(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("pageSize", 25);
    }

    virtual std::string getQueryParam_order(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("order", "");
    }

    virtual std::string getQueryParam_bookmark(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("bookmark", "");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};


/// <summary>
/// Get product group analytics
/// </summary>
/// <remarks>
/// Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
/// </remarks>
class  AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource: public restbed::Resource
{
public:
    AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource(const std::string& context = "/v5");
    virtual ~AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource();

protected:
    //////////////////////////////////////////////////////////
    // Override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<std::map<std::string, std::shared_ptr<Object>>>> handler_GET(
        std::string const & adAccountId, std::string const & startDate, std::string const & endDate, std::vector<std::string> const & productGroupIds, std::vector<std::string> const & columns, std::shared_ptr<Granularity> const & granularity, int32_t const & clickWindowDays, int32_t const & engagementWindowDays, int32_t const & viewWindowDays, std::string const & conversionReportTime);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);

    virtual std::string getPathParam_adAccountId(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_path_parameter("adAccountId", "");
    }

    virtual std::string getQueryParam_startDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("startDate", "");
    }

    virtual std::string getQueryParam_endDate(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("endDate", "");
    }

    virtual int32_t getQueryParam_clickWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("clickWindowDays", 30);
    }

    virtual int32_t getQueryParam_engagementWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("engagementWindowDays", 30);
    }

    virtual int32_t getQueryParam_viewWindowDays(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("viewWindowDays", 1);
    }

    virtual std::string getQueryParam_conversionReportTime(const std::shared_ptr<const restbed::Request>& request)
    {
        return request->get_query_parameter("conversionReportTime", "TIME_OF_AD_ACTION");
    }



    virtual std::pair<int, std::string> handleAdAccountsApiException(const AdAccountsApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);


    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, const std::string& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};



//
// The restbed service to actually implement the REST server
//
class  AdAccountsApi
{
public:
    explicit AdAccountsApi(std::shared_ptr<restbed::Service> const& restbedService);
	virtual ~AdAccountsApi();

    virtual void setAdAccountsApiAd_accountsAd_account_idAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAnalyticsResource);
    virtual void setAdAccountsApiAd_accountsResource(std::shared_ptr<AdAccountsApiAd_accountsResource> spAdAccountsApiAd_accountsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idAd_groupsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAd_groupsResource> spAdAccountsApiAd_accountsAd_account_idAd_groupsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idAdsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAdsResource> spAdAccountsApiAd_accountsAd_account_idAdsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idReportsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idReportsResource> spAdAccountsApiAd_accountsAd_account_idReportsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idCampaignsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idCampaignsResource> spAdAccountsApiAd_accountsAd_account_idCampaignsResource);
    virtual void setAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource(std::shared_ptr<AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource> spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAnalyticsResource> m_spAdAccountsApiAd_accountsAd_account_idAnalyticsResource;
	std::shared_ptr<AdAccountsApiAd_accountsResource> m_spAdAccountsApiAd_accountsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource> m_spAdAccountsApiAd_accountsAd_account_idAd_groupsAnalyticsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAd_groupsResource> m_spAdAccountsApiAd_accountsAd_account_idAd_groupsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource> m_spAdAccountsApiAd_accountsAd_account_idAdsAnalyticsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idAdsResource> m_spAdAccountsApiAd_accountsAd_account_idAdsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idReportsResource> m_spAdAccountsApiAd_accountsAd_account_idReportsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource> m_spAdAccountsApiAd_accountsAd_account_idCampaignsAnalyticsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idCampaignsResource> m_spAdAccountsApiAd_accountsAd_account_idCampaignsResource;
	std::shared_ptr<AdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource> m_spAdAccountsApiAd_accountsAd_account_idProduct_groupsAnalyticsResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* AdAccountsApi_H_ */

