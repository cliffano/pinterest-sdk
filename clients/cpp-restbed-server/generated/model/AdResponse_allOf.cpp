/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdResponse_allOf.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdResponse_allOf::AdResponse_allOf(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string AdResponse_allOf::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void AdResponse_allOf::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree AdResponse_allOf::toPropertyTree()
{
    return toPropertyTree_internal();
}

void AdResponse_allOf::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string AdResponse_allOf::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AdResponse_allOf::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdResponse_allOf::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_group_id", m_Ad_group_id);
	pt.put("android_deep_link", m_Android_deep_link);
	// generate tree for Carousel_android_deep_links
	if (!m_Carousel_android_deep_links.empty()) {
		for (const auto &childEntry : m_Carousel_android_deep_links) {
            ptree Carousel_android_deep_links_node;
            Carousel_android_deep_links_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Carousel_android_deep_links_node));
		}
		pt.add_child("carousel_android_deep_links", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Carousel_destination_urls
	if (!m_Carousel_destination_urls.empty()) {
		for (const auto &childEntry : m_Carousel_destination_urls) {
            ptree Carousel_destination_urls_node;
            Carousel_destination_urls_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Carousel_destination_urls_node));
		}
		pt.add_child("carousel_destination_urls", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Carousel_ios_deep_links
	if (!m_Carousel_ios_deep_links.empty()) {
		for (const auto &childEntry : m_Carousel_ios_deep_links) {
            ptree Carousel_ios_deep_links_node;
            Carousel_ios_deep_links_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Carousel_ios_deep_links_node));
		}
		pt.add_child("carousel_ios_deep_links", tmp_node);
		tmp_node.clear();
	}
	pt.put("click_tracking_url", m_Click_tracking_url);
	pt.put("creative_type", m_Creative_type);
	pt.put("destination_url", m_Destination_url);
	pt.put("ios_deep_link", m_Ios_deep_link);
	pt.put("is_pin_deleted", m_Is_pin_deleted);
	pt.put("is_removable", m_Is_removable);
	pt.put("name", m_Name);
	pt.put("pin_id", m_Pin_id);
	if (m_Tracking_urls != nullptr) {
		pt.add_child("tracking_urls", m_Tracking_urls->toPropertyTree());
	}
	pt.put("view_tracking_url", m_View_tracking_url);
	return pt;
}

void AdResponse_allOf::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_group_id = pt.get("ad_group_id", "");
	m_Android_deep_link = pt.get("android_deep_link", "");
	// push all items of Carousel_android_deep_links into member vector
	if (pt.get_child_optional("carousel_android_deep_links")) {
		for (const auto &childTree : pt.get_child("carousel_android_deep_links")) {
            std::string val =
                childTree.second.data();
            m_Carousel_android_deep_links.emplace_back(std::move(val));
		}
	}
	// push all items of Carousel_destination_urls into member vector
	if (pt.get_child_optional("carousel_destination_urls")) {
		for (const auto &childTree : pt.get_child("carousel_destination_urls")) {
            std::string val =
                childTree.second.data();
            m_Carousel_destination_urls.emplace_back(std::move(val));
		}
	}
	// push all items of Carousel_ios_deep_links into member vector
	if (pt.get_child_optional("carousel_ios_deep_links")) {
		for (const auto &childTree : pt.get_child("carousel_ios_deep_links")) {
            std::string val =
                childTree.second.data();
            m_Carousel_ios_deep_links.emplace_back(std::move(val));
		}
	}
	m_Click_tracking_url = pt.get("click_tracking_url", "");
	setCreativeType(pt.get("creative_type", ""));
	m_Destination_url = pt.get("destination_url", "");
	m_Ios_deep_link = pt.get("ios_deep_link", "");
	m_Is_pin_deleted = pt.get("is_pin_deleted", false);
	m_Is_removable = pt.get("is_removable", false);
	m_Name = pt.get("name", "");
	m_Pin_id = pt.get("pin_id", "");
	if (pt.get_child_optional("tracking_urls")) {
		m_Tracking_urls = nullptr;
		m_Tracking_urls->fromPropertyTree(pt.get_child("tracking_urls"));
	}
	m_View_tracking_url = pt.get("view_tracking_url", "");
}

std::string AdResponse_allOf::getAdGroupId() const
{
    return m_Ad_group_id;
}

void AdResponse_allOf::setAdGroupId(std::string value)
{
	m_Ad_group_id = value;
}
std::string AdResponse_allOf::getAndroidDeepLink() const
{
    return m_Android_deep_link;
}

void AdResponse_allOf::setAndroidDeepLink(std::string value)
{
	m_Android_deep_link = value;
}
std::vector<std::string> AdResponse_allOf::getCarouselAndroidDeepLinks() const
{
    return m_Carousel_android_deep_links;
}

void AdResponse_allOf::setCarouselAndroidDeepLinks(std::vector<std::string> value)
{
	m_Carousel_android_deep_links = value;
}
std::vector<std::string> AdResponse_allOf::getCarouselDestinationUrls() const
{
    return m_Carousel_destination_urls;
}

void AdResponse_allOf::setCarouselDestinationUrls(std::vector<std::string> value)
{
	m_Carousel_destination_urls = value;
}
std::vector<std::string> AdResponse_allOf::getCarouselIosDeepLinks() const
{
    return m_Carousel_ios_deep_links;
}

void AdResponse_allOf::setCarouselIosDeepLinks(std::vector<std::string> value)
{
	m_Carousel_ios_deep_links = value;
}
std::string AdResponse_allOf::getClickTrackingUrl() const
{
    return m_Click_tracking_url;
}

void AdResponse_allOf::setClickTrackingUrl(std::string value)
{
	m_Click_tracking_url = value;
}
std::string AdResponse_allOf::getCreativeType() const
{
    return m_Creative_type;
}

void AdResponse_allOf::setCreativeType(std::string value)
{
	if (std::find(m_Creative_typeEnum.begin(), m_Creative_typeEnum.end(), value) != m_Creative_typeEnum.end()) {
		m_Creative_type = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::string AdResponse_allOf::getDestinationUrl() const
{
    return m_Destination_url;
}

void AdResponse_allOf::setDestinationUrl(std::string value)
{
	m_Destination_url = value;
}
std::string AdResponse_allOf::getIosDeepLink() const
{
    return m_Ios_deep_link;
}

void AdResponse_allOf::setIosDeepLink(std::string value)
{
	m_Ios_deep_link = value;
}
bool AdResponse_allOf::isIsPinDeleted() const
{
    return m_Is_pin_deleted;
}

void AdResponse_allOf::setIsPinDeleted(bool value)
{
	m_Is_pin_deleted = value;
}
bool AdResponse_allOf::isIsRemovable() const
{
    return m_Is_removable;
}

void AdResponse_allOf::setIsRemovable(bool value)
{
	m_Is_removable = value;
}
std::string AdResponse_allOf::getName() const
{
    return m_Name;
}

void AdResponse_allOf::setName(std::string value)
{
	m_Name = value;
}
std::string AdResponse_allOf::getPinId() const
{
    return m_Pin_id;
}

void AdResponse_allOf::setPinId(std::string value)
{
	m_Pin_id = value;
}
std::shared_ptr<EntityStatus> AdResponse_allOf::getStatus() const
{
    return m_Status;
}

void AdResponse_allOf::setStatus(std::shared_ptr<EntityStatus> value)
{
	m_Status = value;
}
std::shared_ptr<TrackingUrls> AdResponse_allOf::getTrackingUrls() const
{
    return m_Tracking_urls;
}

void AdResponse_allOf::setTrackingUrls(std::shared_ptr<TrackingUrls> value)
{
	m_Tracking_urls = value;
}
std::string AdResponse_allOf::getViewTrackingUrl() const
{
    return m_View_tracking_url;
}

void AdResponse_allOf::setViewTrackingUrl(std::string value)
{
	m_View_tracking_url = value;
}

std::vector<AdResponse_allOf> createAdResponse_allOfVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdResponse_allOf>();
    for (const auto& child: pt) {
        vec.emplace_back(AdResponse_allOf(child.second));
    }

    return vec;
}

}
}
}
}

