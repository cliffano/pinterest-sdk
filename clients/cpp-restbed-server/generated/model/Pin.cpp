/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Pin.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Pin::Pin(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Pin::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Pin::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Pin::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Pin::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Pin::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Pin::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Pin::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("created_at", m_Created_at);
	pt.put("link", m_Link);
	pt.put("title", m_Title);
	pt.put("description", m_Description);
	pt.put("alt_text", m_Alt_text);
	pt.put("board_id", m_Board_id);
	pt.put("board_section_id", m_Board_section_id);
	if (m_Board_owner != nullptr) {
		pt.add_child("board_owner", m_Board_owner->toPropertyTree());
	}
	if (m_Media != nullptr) {
		pt.add_child("media", m_Media->toPropertyTree());
	}
	if (m_Media_source != nullptr) {
		pt.add_child("media_source", m_Media_source->toPropertyTree());
	}
	return pt;
}

void Pin::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_Created_at = pt.get("created_at", "");
	m_Link = pt.get("link", "");
	m_Title = pt.get("title", "");
	m_Description = pt.get("description", "");
	m_Alt_text = pt.get("alt_text", "");
	m_Board_id = pt.get("board_id", "");
	m_Board_section_id = pt.get("board_section_id", "");
	if (pt.get_child_optional("board_owner")) {
		m_Board_owner = nullptr;
		m_Board_owner->fromPropertyTree(pt.get_child("board_owner"));
	}
	if (pt.get_child_optional("media")) {
		m_Media = nullptr;
		m_Media->fromPropertyTree(pt.get_child("media"));
	}
	if (pt.get_child_optional("media_source")) {
		m_Media_source = nullptr;
		m_Media_source->fromPropertyTree(pt.get_child("media_source"));
	}
}

std::string Pin::getId() const
{
    return m_Id;
}

void Pin::setId(std::string value)
{
	m_Id = value;
}
std::string Pin::getCreatedAt() const
{
    return m_Created_at;
}

void Pin::setCreatedAt(std::string value)
{
	m_Created_at = value;
}
std::string Pin::getLink() const
{
    return m_Link;
}

void Pin::setLink(std::string value)
{
	m_Link = value;
}
std::string Pin::getTitle() const
{
    return m_Title;
}

void Pin::setTitle(std::string value)
{
	m_Title = value;
}
std::string Pin::getDescription() const
{
    return m_Description;
}

void Pin::setDescription(std::string value)
{
	m_Description = value;
}
std::string Pin::getAltText() const
{
    return m_Alt_text;
}

void Pin::setAltText(std::string value)
{
	m_Alt_text = value;
}
std::string Pin::getBoardId() const
{
    return m_Board_id;
}

void Pin::setBoardId(std::string value)
{
	m_Board_id = value;
}
std::string Pin::getBoardSectionId() const
{
    return m_Board_section_id;
}

void Pin::setBoardSectionId(std::string value)
{
	m_Board_section_id = value;
}
std::shared_ptr<BoardOwner> Pin::getBoardOwner() const
{
    return m_Board_owner;
}

void Pin::setBoardOwner(std::shared_ptr<BoardOwner> value)
{
	m_Board_owner = value;
}
std::shared_ptr<PinMedia> Pin::getMedia() const
{
    return m_Media;
}

void Pin::setMedia(std::shared_ptr<PinMedia> value)
{
	m_Media = value;
}
std::shared_ptr<PinMediaSource> Pin::getMediaSource() const
{
    return m_Media_source;
}

void Pin::setMediaSource(std::shared_ptr<PinMediaSource> value)
{
	m_Media_source = value;
}

std::vector<Pin> createPinVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Pin>();
    for (const auto& child: pt) {
        vec.emplace_back(Pin(child.second));
    }

    return vec;
}

}
}
}
}

