/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsAnalyticsCreateAsyncRequest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdsAnalyticsCreateAsyncRequest::AdsAnalyticsCreateAsyncRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string AdsAnalyticsCreateAsyncRequest::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void AdsAnalyticsCreateAsyncRequest::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree AdsAnalyticsCreateAsyncRequest::toPropertyTree()
{
    return toPropertyTree_internal();
}

void AdsAnalyticsCreateAsyncRequest::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string AdsAnalyticsCreateAsyncRequest::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AdsAnalyticsCreateAsyncRequest::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdsAnalyticsCreateAsyncRequest::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("start_date", m_Start_date);
	pt.put("end_date", m_End_date);
	pt.put("granularity", m_Granularity);
	if (m_Granularity != nullptr) {
		pt.add_child("granularity", m_Granularity->toPropertyTree());
	}
	if (m_Click_window_days != nullptr) {
		pt.add_child("click_window_days", m_Click_window_days->toPropertyTree());
	}
	if (m_Engagement_window_days != nullptr) {
		pt.add_child("engagement_window_days", m_Engagement_window_days->toPropertyTree());
	}
	if (m_View_window_days != nullptr) {
		pt.add_child("view_window_days", m_View_window_days->toPropertyTree());
	}
	pt.put("conversion_report_time", m_Conversion_report_time);
	if (m_Conversion_report_time != nullptr) {
		pt.add_child("conversion_report_time", m_Conversion_report_time->toPropertyTree());
	}
	// generate tree for Attribution_types
	if (!m_Attribution_types.empty()) {
		for (const auto &childEntry : m_Attribution_types) {
            ptree Attribution_types_node;
            Attribution_types_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Attribution_types_node));
		}
		pt.add_child("attribution_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Columns
	if (!m_Columns.empty()) {
		for (const auto &childEntry : m_Columns) {
            ptree Columns_node;
            Columns_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Columns_node));
		}
		pt.add_child("columns", tmp_node);
		tmp_node.clear();
	}
	pt.put("level", m_Level);
	if (m_Level != nullptr) {
		pt.add_child("level", m_Level->toPropertyTree());
	}
	pt.put("report_format", m_Report_format);
	if (m_Report_format != nullptr) {
		pt.add_child("report_format", m_Report_format->toPropertyTree());
	}
	// generate tree for Campaign_ids
	if (!m_Campaign_ids.empty()) {
		for (const auto &childEntry : m_Campaign_ids) {
            ptree Campaign_ids_node;
            Campaign_ids_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Campaign_ids_node));
		}
		pt.add_child("campaign_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Campaign_statuses
	if (!m_Campaign_statuses.empty()) {
		for (const auto &childEntry : m_Campaign_statuses) {
            ptree Campaign_statuses_node;
            Campaign_statuses_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Campaign_statuses_node));
		}
		pt.add_child("campaign_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Campaign_objective_types
	if (!m_Campaign_objective_types.empty()) {
		for (const auto &childEntry : m_Campaign_objective_types) {
            ptree Campaign_objective_types_node;
            Campaign_objective_types_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Campaign_objective_types_node));
		}
		pt.add_child("campaign_objective_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_group_ids
	if (!m_Ad_group_ids.empty()) {
		for (const auto &childEntry : m_Ad_group_ids) {
            ptree Ad_group_ids_node;
            Ad_group_ids_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Ad_group_ids_node));
		}
		pt.add_child("ad_group_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_group_statuses
	if (!m_Ad_group_statuses.empty()) {
		for (const auto &childEntry : m_Ad_group_statuses) {
            ptree Ad_group_statuses_node;
            Ad_group_statuses_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Ad_group_statuses_node));
		}
		pt.add_child("ad_group_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_ids
	if (!m_Ad_ids.empty()) {
		for (const auto &childEntry : m_Ad_ids) {
            ptree Ad_ids_node;
            Ad_ids_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Ad_ids_node));
		}
		pt.add_child("ad_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Ad_statuses
	if (!m_Ad_statuses.empty()) {
		for (const auto &childEntry : m_Ad_statuses) {
            ptree Ad_statuses_node;
            Ad_statuses_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Ad_statuses_node));
		}
		pt.add_child("ad_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_group_ids
	if (!m_Product_group_ids.empty()) {
		for (const auto &childEntry : m_Product_group_ids) {
            ptree Product_group_ids_node;
            Product_group_ids_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Product_group_ids_node));
		}
		pt.add_child("product_group_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_group_statuses
	if (!m_Product_group_statuses.empty()) {
		for (const auto &childEntry : m_Product_group_statuses) {
            ptree Product_group_statuses_node;
            Product_group_statuses_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Product_group_statuses_node));
		}
		pt.add_child("product_group_statuses", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Product_item_ids
	if (!m_Product_item_ids.empty()) {
		for (const auto &childEntry : m_Product_item_ids) {
            ptree Product_item_ids_node;
            Product_item_ids_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Product_item_ids_node));
		}
		pt.add_child("product_item_ids", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Targeting_types
	if (!m_Targeting_types.empty()) {
		for (const auto &childEntry : m_Targeting_types) {
            ptree Targeting_types_node;
            Targeting_types_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Targeting_types_node));
		}
		pt.add_child("targeting_types", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Metrics_filters
	if (!m_Metrics_filters.empty()) {
		for (const auto &childEntry : m_Metrics_filters) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("metrics_filters", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void AdsAnalyticsCreateAsyncRequest::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Start_date = pt.get("start_date", "");
	m_End_date = pt.get("end_date", "");
	m_Granularity = pt.get("granularity", "");
	if (pt.get_child_optional("granularity")) {
		m_Granularity = "";
		m_Granularity->fromPropertyTree(pt.get_child("granularity"));
	}
	if (pt.get_child_optional("click_window_days")) {
		m_Click_window_days = 30;
		m_Click_window_days->fromPropertyTree(pt.get_child("click_window_days"));
	}
	if (pt.get_child_optional("engagement_window_days")) {
		m_Engagement_window_days = 30;
		m_Engagement_window_days->fromPropertyTree(pt.get_child("engagement_window_days"));
	}
	if (pt.get_child_optional("view_window_days")) {
		m_View_window_days = 1;
		m_View_window_days->fromPropertyTree(pt.get_child("view_window_days"));
	}
	m_Conversion_report_time = pt.get("conversion_report_time", "TIME_OF_AD_ACTION");
	if (pt.get_child_optional("conversion_report_time")) {
		m_Conversion_report_time = "TIME_OF_AD_ACTION";
		m_Conversion_report_time->fromPropertyTree(pt.get_child("conversion_report_time"));
	}
	// push all items of Attribution_types into member vector
	if (pt.get_child_optional("attribution_types")) {
		for (const auto &childTree : pt.get_child("attribution_types")) {
            std::shared_ptr<ConversionReportAttributionType> val =
            m_Attribution_types.emplace_back(std::move(val));
		}
	}
	// push all items of Columns into member vector
	if (pt.get_child_optional("columns")) {
		for (const auto &childTree : pt.get_child("columns")) {
            std::shared_ptr<ReportingColumnAsync> val =
            m_Columns.emplace_back(std::move(val));
		}
	}
	m_Level = pt.get("level", "");
	if (pt.get_child_optional("level")) {
		m_Level = "";
		m_Level->fromPropertyTree(pt.get_child("level"));
	}
	m_Report_format = pt.get("report_format", "JSON");
	if (pt.get_child_optional("report_format")) {
		m_Report_format = "JSON";
		m_Report_format->fromPropertyTree(pt.get_child("report_format"));
	}
	// push all items of Campaign_ids into member vector
	if (pt.get_child_optional("campaign_ids")) {
		for (const auto &childTree : pt.get_child("campaign_ids")) {
            std::string val =
                childTree.second.data();
            m_Campaign_ids.emplace_back(std::move(val));
		}
	}
	// push all items of Campaign_statuses into member vector
	if (pt.get_child_optional("campaign_statuses")) {
		for (const auto &childTree : pt.get_child("campaign_statuses")) {
            std::shared_ptr<CampaignSummaryStatus> val =
            m_Campaign_statuses.emplace_back(std::move(val));
		}
	}
	// push all items of Campaign_objective_types into member vector
	if (pt.get_child_optional("campaign_objective_types")) {
		for (const auto &childTree : pt.get_child("campaign_objective_types")) {
            std::shared_ptr<ObjectiveType> val =
            m_Campaign_objective_types.emplace_back(std::move(val));
		}
	}
	// push all items of Ad_group_ids into member vector
	if (pt.get_child_optional("ad_group_ids")) {
		for (const auto &childTree : pt.get_child("ad_group_ids")) {
            std::string val =
                childTree.second.data();
            m_Ad_group_ids.emplace_back(std::move(val));
		}
	}
	// push all items of Ad_group_statuses into member vector
	if (pt.get_child_optional("ad_group_statuses")) {
		for (const auto &childTree : pt.get_child("ad_group_statuses")) {
            std::shared_ptr<AdGroupSummaryStatus> val =
            m_Ad_group_statuses.emplace_back(std::move(val));
		}
	}
	// push all items of Ad_ids into member vector
	if (pt.get_child_optional("ad_ids")) {
		for (const auto &childTree : pt.get_child("ad_ids")) {
            std::string val =
                childTree.second.data();
            m_Ad_ids.emplace_back(std::move(val));
		}
	}
	// push all items of Ad_statuses into member vector
	if (pt.get_child_optional("ad_statuses")) {
		for (const auto &childTree : pt.get_child("ad_statuses")) {
            std::shared_ptr<PinPromotionSummaryStatus> val =
            m_Ad_statuses.emplace_back(std::move(val));
		}
	}
	// push all items of Product_group_ids into member vector
	if (pt.get_child_optional("product_group_ids")) {
		for (const auto &childTree : pt.get_child("product_group_ids")) {
            std::string val =
                childTree.second.data();
            m_Product_group_ids.emplace_back(std::move(val));
		}
	}
	// push all items of Product_group_statuses into member vector
	if (pt.get_child_optional("product_group_statuses")) {
		for (const auto &childTree : pt.get_child("product_group_statuses")) {
            std::shared_ptr<ProductGroupSummaryStatus> val =
            m_Product_group_statuses.emplace_back(std::move(val));
		}
	}
	// push all items of Product_item_ids into member vector
	if (pt.get_child_optional("product_item_ids")) {
		for (const auto &childTree : pt.get_child("product_item_ids")) {
            std::string val =
                childTree.second.data();
            m_Product_item_ids.emplace_back(std::move(val));
		}
	}
	// push all items of Targeting_types into member vector
	if (pt.get_child_optional("targeting_types")) {
		for (const auto &childTree : pt.get_child("targeting_types")) {
            std::shared_ptr<AdsAnalyticsTargetingType> val =
            m_Targeting_types.emplace_back(std::move(val));
		}
	}
	// push all items of Metrics_filters into member vector
	if (pt.get_child_optional("metrics_filters")) {
		for (const auto &childTree : pt.get_child("metrics_filters")) {
            std::shared_ptr<AdsAnalyticsMetricsFilter> val =
                std::make_shared<AdsAnalyticsMetricsFilter>(childTree.second);
            m_Metrics_filters.emplace_back(std::move(val));
		}
	}
}

std::string AdsAnalyticsCreateAsyncRequest::getStartDate() const
{
    return m_Start_date;
}

void AdsAnalyticsCreateAsyncRequest::setStartDate(std::string value)
{
	m_Start_date = value;
}
std::string AdsAnalyticsCreateAsyncRequest::getEndDate() const
{
    return m_End_date;
}

void AdsAnalyticsCreateAsyncRequest::setEndDate(std::string value)
{
	m_End_date = value;
}
Granularity AdsAnalyticsCreateAsyncRequest::getGranularity() const
{
    return m_Granularity;
}

void AdsAnalyticsCreateAsyncRequest::setGranularity(Granularity value)
{
	m_Granularity = value;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getClickWindowDays() const
{
    return m_Click_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setClickWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value)
{
	m_Click_window_days = value;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setEngagementWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value)
{
	m_Engagement_window_days = value;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest::getViewWindowDays() const
{
    return m_View_window_days;
}

void AdsAnalyticsCreateAsyncRequest::setViewWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value)
{
	m_View_window_days = value;
}
ConversionReportTimeType AdsAnalyticsCreateAsyncRequest::getConversionReportTime() const
{
    return m_Conversion_report_time;
}

void AdsAnalyticsCreateAsyncRequest::setConversionReportTime(ConversionReportTimeType value)
{
	m_Conversion_report_time = value;
}
std::vector<std::shared_ptr<ConversionReportAttributionType>> AdsAnalyticsCreateAsyncRequest::getAttributionTypes() const
{
    return m_Attribution_types;
}

void AdsAnalyticsCreateAsyncRequest::setAttributionTypes(std::vector<std::shared_ptr<ConversionReportAttributionType>> value)
{
	m_Attribution_types = value;
}
std::vector<std::shared_ptr<ReportingColumnAsync>> AdsAnalyticsCreateAsyncRequest::getColumns() const
{
    return m_Columns;
}

void AdsAnalyticsCreateAsyncRequest::setColumns(std::vector<std::shared_ptr<ReportingColumnAsync>> value)
{
	m_Columns = value;
}
MetricsReportingLevel AdsAnalyticsCreateAsyncRequest::getLevel() const
{
    return m_Level;
}

void AdsAnalyticsCreateAsyncRequest::setLevel(MetricsReportingLevel value)
{
	m_Level = value;
}
DataOutputFormat AdsAnalyticsCreateAsyncRequest::getReportFormat() const
{
    return m_Report_format;
}

void AdsAnalyticsCreateAsyncRequest::setReportFormat(DataOutputFormat value)
{
	m_Report_format = value;
}
std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getCampaignIds() const
{
    return m_Campaign_ids;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignIds(std::vector<std::string> value)
{
	m_Campaign_ids = value;
}
std::vector<std::shared_ptr<CampaignSummaryStatus>> AdsAnalyticsCreateAsyncRequest::getCampaignStatuses() const
{
    return m_Campaign_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignStatuses(std::vector<std::shared_ptr<CampaignSummaryStatus>> value)
{
	m_Campaign_statuses = value;
}
std::vector<std::shared_ptr<ObjectiveType>> AdsAnalyticsCreateAsyncRequest::getCampaignObjectiveTypes() const
{
    return m_Campaign_objective_types;
}

void AdsAnalyticsCreateAsyncRequest::setCampaignObjectiveTypes(std::vector<std::shared_ptr<ObjectiveType>> value)
{
	m_Campaign_objective_types = value;
}
std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getAdGroupIds() const
{
    return m_Ad_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupIds(std::vector<std::string> value)
{
	m_Ad_group_ids = value;
}
std::vector<std::shared_ptr<AdGroupSummaryStatus>> AdsAnalyticsCreateAsyncRequest::getAdGroupStatuses() const
{
    return m_Ad_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdGroupStatuses(std::vector<std::shared_ptr<AdGroupSummaryStatus>> value)
{
	m_Ad_group_statuses = value;
}
std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getAdIds() const
{
    return m_Ad_ids;
}

void AdsAnalyticsCreateAsyncRequest::setAdIds(std::vector<std::string> value)
{
	m_Ad_ids = value;
}
std::vector<std::shared_ptr<PinPromotionSummaryStatus>> AdsAnalyticsCreateAsyncRequest::getAdStatuses() const
{
    return m_Ad_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setAdStatuses(std::vector<std::shared_ptr<PinPromotionSummaryStatus>> value)
{
	m_Ad_statuses = value;
}
std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getProductGroupIds() const
{
    return m_Product_group_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupIds(std::vector<std::string> value)
{
	m_Product_group_ids = value;
}
std::vector<std::shared_ptr<ProductGroupSummaryStatus>> AdsAnalyticsCreateAsyncRequest::getProductGroupStatuses() const
{
    return m_Product_group_statuses;
}

void AdsAnalyticsCreateAsyncRequest::setProductGroupStatuses(std::vector<std::shared_ptr<ProductGroupSummaryStatus>> value)
{
	m_Product_group_statuses = value;
}
std::vector<std::string> AdsAnalyticsCreateAsyncRequest::getProductItemIds() const
{
    return m_Product_item_ids;
}

void AdsAnalyticsCreateAsyncRequest::setProductItemIds(std::vector<std::string> value)
{
	m_Product_item_ids = value;
}
std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> AdsAnalyticsCreateAsyncRequest::getTargetingTypes() const
{
    return m_Targeting_types;
}

void AdsAnalyticsCreateAsyncRequest::setTargetingTypes(std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> value)
{
	m_Targeting_types = value;
}
std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> AdsAnalyticsCreateAsyncRequest::getMetricsFilters() const
{
    return m_Metrics_filters;
}

void AdsAnalyticsCreateAsyncRequest::setMetricsFilters(std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> value)
{
	m_Metrics_filters = value;
}

std::vector<AdsAnalyticsCreateAsyncRequest> createAdsAnalyticsCreateAsyncRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdsAnalyticsCreateAsyncRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(AdsAnalyticsCreateAsyncRequest(child.second));
    }

    return vec;
}

}
}
}
}

