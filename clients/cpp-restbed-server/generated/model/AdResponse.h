/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdResponse.h
 *
 * 
 */

#ifndef AdResponse_H_
#define AdResponse_H_



#include "AdResponse_allOf_1.h"
#include "AdResponse_allOf.h"
#include "EntityStatus.h"
#include <string>
#include "TrackingUrls.h"
#include "PinPromotionSummaryStatus.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdResponse : public AdResponse_allOf, public AdResponse_allOf_1
{
public:
    AdResponse() = default;
    explicit AdResponse(boost::property_tree::ptree const& pt);
    virtual ~AdResponse() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AdResponse members

    /// <summary>
    /// ID of the ad group that contains the ad.
    /// </summary>
    std::string getAdGroupId() const;
    void setAdGroupId(std::string value);

    /// <summary>
    /// Deep link URL for Android devices. Not currently available. Using this field will generate an error.
    /// </summary>
    std::string getAndroidDeepLink() const;
    void setAndroidDeepLink(std::string value);

    /// <summary>
    /// Comma-separated deep links for the carousel pin on Android.
    /// </summary>
    std::vector<std::string> getCarouselAndroidDeepLinks() const;
    void setCarouselAndroidDeepLinks(std::vector<std::string> value);

    /// <summary>
    /// Comma-separated destination URLs for the carousel pin to promote.
    /// </summary>
    std::vector<std::string> getCarouselDestinationUrls() const;
    void setCarouselDestinationUrls(std::vector<std::string> value);

    /// <summary>
    /// Comma-separated deep links for the carousel pin on iOS.
    /// </summary>
    std::vector<std::string> getCarouselIosDeepLinks() const;
    void setCarouselIosDeepLinks(std::vector<std::string> value);

    /// <summary>
    /// Tracking url for the ad clicks.
    /// </summary>
    std::string getClickTrackingUrl() const;
    void setClickTrackingUrl(std::string value);

    /// <summary>
    /// Ad creative type enum
    /// </summary>
    std::string getCreativeType() const;
    void setCreativeType(std::string value);

    /// <summary>
    /// Destination URL.
    /// </summary>
    std::string getDestinationUrl() const;
    void setDestinationUrl(std::string value);

    /// <summary>
    /// Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
    /// </summary>
    std::string getIosDeepLink() const;
    void setIosDeepLink(std::string value);

    /// <summary>
    /// Is original pin deleted?
    /// </summary>
    bool isIsPinDeleted() const;
    void setIsPinDeleted(bool value);

    /// <summary>
    /// Is pin repinnable?
    /// </summary>
    bool isIsRemovable() const;
    void setIsRemovable(bool value);

    /// <summary>
    /// Name of the ad - 255 chars max.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Pin ID.
    /// </summary>
    std::string getPinId() const;
    void setPinId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityStatus> getStatus() const;
    void setStatus(std::shared_ptr<EntityStatus> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrackingUrls> getTrackingUrls() const;
    void setTrackingUrls(std::shared_ptr<TrackingUrls> value);

    /// <summary>
    /// Tracking URL for ad impressions.
    /// </summary>
    std::string getViewTrackingUrl() const;
    void setViewTrackingUrl(std::string value);

    /// <summary>
    /// The ID of the advertiser that this ad belongs to.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// ID of the ad campaign that contains this ad.
    /// </summary>
    std::string getCampaignId() const;
    void setCampaignId(std::string value);

    /// <summary>
    /// Destination URL template for all items within a collections drawer.
    /// </summary>
    std::string getCollectionItemsDestinationUrlTemplate() const;
    void setCollectionItemsDestinationUrlTemplate(std::string value);

    /// <summary>
    /// Pin creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t value);

    /// <summary>
    /// The ID of this ad.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
    /// </summary>
    std::vector<std::string> getRejectedReasons() const;
    void setRejectedReasons(std::vector<std::string> value);

    /// <summary>
    /// Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
    /// </summary>
    std::vector<std::string> getRejectionLabels() const;
    void setRejectionLabels(std::vector<std::string> value);

    /// <summary>
    /// Ad review status
    /// </summary>
    std::string getReviewStatus() const;
    void setReviewStatus(std::string value);

    /// <summary>
    /// Always \&quot;ad\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t value);

    /// <summary>
    /// Ad summary status
    /// </summary>
    PinPromotionSummaryStatus getSummaryStatus() const;
    void setSummaryStatus(PinPromotionSummaryStatus value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Ad_group_id = "";
    std::string m_Android_deep_link = "";
    std::vector<std::string> m_Carousel_android_deep_links;
    std::vector<std::string> m_Carousel_destination_urls;
    std::vector<std::string> m_Carousel_ios_deep_links;
    std::string m_Click_tracking_url = "";
    std::string m_Creative_type = "";
    std::string m_Destination_url = "";
    std::string m_Ios_deep_link = "";
    bool m_Is_pin_deleted = false;
    bool m_Is_removable = false;
    std::string m_Name = "";
    std::string m_Pin_id = "";
    std::shared_ptr<EntityStatus> m_Status = std::make_shared<EntityStatus>();
    std::shared_ptr<TrackingUrls> m_Tracking_urls;
    std::string m_View_tracking_url = "";
    std::string m_Ad_account_id = "";
    std::string m_Campaign_id = "";
    std::string m_Collection_items_destination_url_template = "";
    int32_t m_Created_time = 0;
    std::string m_Id = "";
    std::vector<std::string> m_Rejected_reasons;
    std::vector<std::string> m_Rejection_labels;
    std::string m_Review_status = "";
    std::string m_Type = "";
    int32_t m_Updated_time = 0;
    PinPromotionSummaryStatus m_Summary_status;
    const std::array<std::string, 7> m_Creative_typeEnum = {
          "REGULAR","VIDEO","SHOPPING","CAROUSEL","MAX_VIDEO","SHOP_THE_PIN","STORY"
    };

    const std::array<std::string, 48> m_Rejected_reasonsEnum = {
          "HASHTAGS","PROMOTIONS_AND_PRICES","TARGETING","LANDING_PAGE","CAPS_AND_SYMBOLS","SHOCKING","WEIGHT_LOSS","PROHIBITED_PRODUCT","AUTHENTICITY","NUDITY","CONFUSING_DESIGN","URGENCY","RATINGS","APP","ALCOHOL","CONTESTS","POLITICAL","OTHER","IMAGE","NAR","INCONSISTENT","CLICKBAIT","NO_DESCRIPTION","LOW_QUALITY","EXAGGERATED_CLAIMS","PINTEREST_BRAND","ALCOHOL_NO_SALE","LANDING_PAGE_SPEED","LANDING_PAGE_HARDWALL","LANDING_PAGE_BROKEN","LANDING_PAGE_QUALITY","OUT_OF_STOCK","IMAGE_LOW_QUALITY","IMAGE_BUSY","IMAGE_POORLY_EDITED","IMAGE_BEFORE_AFTER","UGC","FAKE_BUTTONS","WEAPONS","SENSITIVE","UNACCEPTABLE_BUSINESS","SUSPICIOUS_CLAIMS","PHARMA","SUSPICIOUS_SUPPLEMENTS","ILLEGAL_RECREATIONAL_DRUG","LOW_QUALITY_LANDING_PAGE","RESTRICTED_HEALTHCARE","INCONSISTENT_LANG_FR"
    };

    const std::array<std::string, 4> m_Review_statusEnum = {
          "OTHER","PENDING","REJECTED","APPROVED"
    };

};

std::vector<AdResponse> createAdResponseVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* AdResponse_H_ */
