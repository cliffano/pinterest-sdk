/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinMediaSource.h
 *
 * Pin media source.
 */

#ifndef PinMediaSource_H_
#define PinMediaSource_H_



#include "PinMediaSourceImageBase64.h"
#include "PinMediaSourceVideoID.h"
#include <string>
#include "PinMediaSourceImageURL.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Pin media source.
/// </summary>
class  PinMediaSource : public PinMediaSourceImageBase64, public PinMediaSourceImageURL, public PinMediaSourceVideoID
{
public:
    PinMediaSource() = default;
    explicit PinMediaSource(boost::property_tree::ptree const& pt);
    virtual ~PinMediaSource() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// PinMediaSource members

    /// <summary>
    /// 
    /// </summary>
    std::string getSourceType() const;
    void setSourceType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getContentType() const;
    void setContentType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getData() const;
    void setData(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCoverImageUrl() const;
    void setCoverImageUrl(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getMediaId() const;
    void setMediaId(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Source_type = "";
    std::string m_Content_type = "";
    std::string m_Data = "";
    std::string m_Url = "";
    std::string m_Cover_image_url = "";
    std::string m_Media_id = "";
    const std::array<std::string, 1> m_Source_typeEnum = {
          "video_id"
    };

    const std::array<std::string, 2> m_Content_typeEnum = {
          "image/jpeg","image/png"
    };

};

std::vector<PinMediaSource> createPinMediaSourceVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* PinMediaSource_H_ */
