/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsAnalyticsCreateAsyncRequest_allOf_1.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdsAnalyticsCreateAsyncRequest_allOf_1::AdsAnalyticsCreateAsyncRequest_allOf_1(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string AdsAnalyticsCreateAsyncRequest_allOf_1::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree AdsAnalyticsCreateAsyncRequest_allOf_1::toPropertyTree()
{
    return toPropertyTree_internal();
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string AdsAnalyticsCreateAsyncRequest_allOf_1::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdsAnalyticsCreateAsyncRequest_allOf_1::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Columns
	if (!m_Columns.empty()) {
		for (const auto &childEntry : m_Columns) {
            ptree Columns_node;
            Columns_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Columns_node));
		}
		pt.add_child("columns", tmp_node);
		tmp_node.clear();
	}
	pt.put("level", m_Level);
	if (m_Level != nullptr) {
		pt.add_child("level", m_Level->toPropertyTree());
	}
	pt.put("report_format", m_Report_format);
	if (m_Report_format != nullptr) {
		pt.add_child("report_format", m_Report_format->toPropertyTree());
	}
	return pt;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Columns into member vector
	if (pt.get_child_optional("columns")) {
		for (const auto &childTree : pt.get_child("columns")) {
            std::shared_ptr<ReportingColumnAsync> val =
            m_Columns.emplace_back(std::move(val));
		}
	}
	m_Level = pt.get("level", "");
	if (pt.get_child_optional("level")) {
		m_Level = "";
		m_Level->fromPropertyTree(pt.get_child("level"));
	}
	m_Report_format = pt.get("report_format", "JSON");
	if (pt.get_child_optional("report_format")) {
		m_Report_format = "JSON";
		m_Report_format->fromPropertyTree(pt.get_child("report_format"));
	}
}

std::vector<std::shared_ptr<ReportingColumnAsync>> AdsAnalyticsCreateAsyncRequest_allOf_1::getColumns() const
{
    return m_Columns;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::setColumns(std::vector<std::shared_ptr<ReportingColumnAsync>> value)
{
	m_Columns = value;
}
MetricsReportingLevel AdsAnalyticsCreateAsyncRequest_allOf_1::getLevel() const
{
    return m_Level;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::setLevel(MetricsReportingLevel value)
{
	m_Level = value;
}
DataOutputFormat AdsAnalyticsCreateAsyncRequest_allOf_1::getReportFormat() const
{
    return m_Report_format;
}

void AdsAnalyticsCreateAsyncRequest_allOf_1::setReportFormat(DataOutputFormat value)
{
	m_Report_format = value;
}

std::vector<AdsAnalyticsCreateAsyncRequest_allOf_1> createAdsAnalyticsCreateAsyncRequest_allOf_1VectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdsAnalyticsCreateAsyncRequest_allOf_1>();
    for (const auto& child: pt) {
        vec.emplace_back(AdsAnalyticsCreateAsyncRequest_allOf_1(child.second));
    }

    return vec;
}

}
}
}
}

