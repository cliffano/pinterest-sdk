/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TargetingTypeFilter.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

TargetingTypeFilter::TargetingTypeFilter(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string TargetingTypeFilter::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void TargetingTypeFilter::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree TargetingTypeFilter::toPropertyTree()
{
    return toPropertyTree_internal();
}

void TargetingTypeFilter::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string TargetingTypeFilter::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void TargetingTypeFilter::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree TargetingTypeFilter::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Targeting_types
	if (!m_Targeting_types.empty()) {
		for (const auto &childEntry : m_Targeting_types) {
            ptree Targeting_types_node;
            Targeting_types_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Targeting_types_node));
		}
		pt.add_child("targeting_types", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void TargetingTypeFilter::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Targeting_types into member vector
	if (pt.get_child_optional("targeting_types")) {
		for (const auto &childTree : pt.get_child("targeting_types")) {
            std::shared_ptr<AdsAnalyticsTargetingType> val =
            m_Targeting_types.emplace_back(std::move(val));
		}
	}
}

std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> TargetingTypeFilter::getTargetingTypes() const
{
    return m_Targeting_types;
}

void TargetingTypeFilter::setTargetingTypes(std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> value)
{
	m_Targeting_types = value;
}

std::vector<TargetingTypeFilter> createTargetingTypeFilterVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<TargetingTypeFilter>();
    for (const auto& child: pt) {
        vec.emplace_back(TargetingTypeFilter(child.second));
    }

    return vec;
}

}
}
}
}

