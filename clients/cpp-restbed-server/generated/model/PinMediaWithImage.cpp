/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinMediaWithImage.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PinMediaWithImage::PinMediaWithImage(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string PinMediaWithImage::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void PinMediaWithImage::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree PinMediaWithImage::toPropertyTree()
{
    return toPropertyTree_internal();
}

void PinMediaWithImage::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string PinMediaWithImage::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void PinMediaWithImage::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PinMediaWithImage::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Images
	if (!m_Images.empty()) {
		for (const auto &childEntry : m_Images) {
            tmp_node.push_back(std::make_pair("", childEntry->toPropertyTree()));
		}
		pt.add_child("images", tmp_node);
		tmp_node.clear();
	}
	pt.put("media_type", m_Media_type);
	return pt;
}

void PinMediaWithImage::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Images into member vector
	if (pt.get_child_optional("images")) {
		for (const auto &childTree : pt.get_child("images")) {
            std::shared_ptr<ImageDetails> val =
                std::make_shared<ImageDetails>(childTree.second);
            m_Inner.emplace_back(std::move(val));
		}
	}
	m_Media_type = pt.get("media_type", "");
}

std::map<std::string, std::shared_ptr<ImageDetails>> PinMediaWithImage::getImages() const
{
    return m_Images;
}

void PinMediaWithImage::setImages(std::map<std::string, std::shared_ptr<ImageDetails>> value)
{
	m_Images = value;
}
std::string PinMediaWithImage::getMediaType() const
{
    return m_Media_type;
}

void PinMediaWithImage::setMediaType(std::string value)
{
	m_Media_type = value;
}

std::vector<PinMediaWithImage> createPinMediaWithImageVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<PinMediaWithImage>();
    for (const auto& child: pt) {
        vec.emplace_back(PinMediaWithImage(child.second));
    }

    return vec;
}

}
}
}
}

