/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdResponse_allOf_1.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdResponse_allOf_1::AdResponse_allOf_1(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string AdResponse_allOf_1::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void AdResponse_allOf_1::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree AdResponse_allOf_1::toPropertyTree()
{
    return toPropertyTree_internal();
}

void AdResponse_allOf_1::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string AdResponse_allOf_1::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AdResponse_allOf_1::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdResponse_allOf_1::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("campaign_id", m_Campaign_id);
	pt.put("collection_items_destination_url_template", m_Collection_items_destination_url_template);
	pt.put("created_time", m_Created_time);
	pt.put("id", m_Id);
	// generate tree for Rejected_reasons
	if (!m_Rejected_reasons.empty()) {
		for (const auto &childEntry : m_Rejected_reasons) {
            ptree Rejected_reasons_node;
            Rejected_reasons_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Rejected_reasons_node));
		}
		pt.add_child("rejected_reasons", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Rejection_labels
	if (!m_Rejection_labels.empty()) {
		for (const auto &childEntry : m_Rejection_labels) {
            ptree Rejection_labels_node;
            Rejection_labels_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Rejection_labels_node));
		}
		pt.add_child("rejection_labels", tmp_node);
		tmp_node.clear();
	}
	pt.put("review_status", m_Review_status);
	pt.put("type", m_Type);
	pt.put("updated_time", m_Updated_time);
	pt.put("summary_status", m_Summary_status);
	if (m_Summary_status != nullptr) {
		pt.add_child("summary_status", m_Summary_status->toPropertyTree());
	}
	return pt;
}

void AdResponse_allOf_1::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Campaign_id = pt.get("campaign_id", "");
	m_Collection_items_destination_url_template = pt.get("collection_items_destination_url_template", "");
	m_Created_time = pt.get("created_time", 0);
	m_Id = pt.get("id", "");
	// push all items of Rejected_reasons into member vector
	if (pt.get_child_optional("rejected_reasons")) {
		for (const auto &childTree : pt.get_child("rejected_reasons")) {
            std::string val =
                childTree.second.data();
            m_Rejected_reasons.emplace_back(std::move(val));
		}
	}
	// push all items of Rejection_labels into member vector
	if (pt.get_child_optional("rejection_labels")) {
		for (const auto &childTree : pt.get_child("rejection_labels")) {
            std::string val =
                childTree.second.data();
            m_Rejection_labels.emplace_back(std::move(val));
		}
	}
	setReviewStatus(pt.get("review_status", ""));
	m_Type = pt.get("type", "");
	m_Updated_time = pt.get("updated_time", 0);
	m_Summary_status = pt.get("summary_status", "");
	if (pt.get_child_optional("summary_status")) {
		m_Summary_status = "";
		m_Summary_status->fromPropertyTree(pt.get_child("summary_status"));
	}
}

std::string AdResponse_allOf_1::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdResponse_allOf_1::setAdAccountId(std::string value)
{
	m_Ad_account_id = value;
}
std::string AdResponse_allOf_1::getCampaignId() const
{
    return m_Campaign_id;
}

void AdResponse_allOf_1::setCampaignId(std::string value)
{
	m_Campaign_id = value;
}
std::string AdResponse_allOf_1::getCollectionItemsDestinationUrlTemplate() const
{
    return m_Collection_items_destination_url_template;
}

void AdResponse_allOf_1::setCollectionItemsDestinationUrlTemplate(std::string value)
{
	m_Collection_items_destination_url_template = value;
}
int32_t AdResponse_allOf_1::getCreatedTime() const
{
    return m_Created_time;
}

void AdResponse_allOf_1::setCreatedTime(int32_t value)
{
	m_Created_time = value;
}
std::string AdResponse_allOf_1::getId() const
{
    return m_Id;
}

void AdResponse_allOf_1::setId(std::string value)
{
	m_Id = value;
}
std::vector<std::string> AdResponse_allOf_1::getRejectedReasons() const
{
    return m_Rejected_reasons;
}

void AdResponse_allOf_1::setRejectedReasons(std::vector<std::string> value)
{
	if (std::find(m_Rejected_reasonsEnum.begin(), m_Rejected_reasonsEnum.end(), value) != m_Rejected_reasonsEnum.end()) {
		m_Rejected_reasons = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::vector<std::string> AdResponse_allOf_1::getRejectionLabels() const
{
    return m_Rejection_labels;
}

void AdResponse_allOf_1::setRejectionLabels(std::vector<std::string> value)
{
	m_Rejection_labels = value;
}
std::string AdResponse_allOf_1::getReviewStatus() const
{
    return m_Review_status;
}

void AdResponse_allOf_1::setReviewStatus(std::string value)
{
	if (std::find(m_Review_statusEnum.begin(), m_Review_statusEnum.end(), value) != m_Review_statusEnum.end()) {
		m_Review_status = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::string AdResponse_allOf_1::getType() const
{
    return m_Type;
}

void AdResponse_allOf_1::setType(std::string value)
{
	m_Type = value;
}
int32_t AdResponse_allOf_1::getUpdatedTime() const
{
    return m_Updated_time;
}

void AdResponse_allOf_1::setUpdatedTime(int32_t value)
{
	m_Updated_time = value;
}
PinPromotionSummaryStatus AdResponse_allOf_1::getSummaryStatus() const
{
    return m_Summary_status;
}

void AdResponse_allOf_1::setSummaryStatus(PinPromotionSummaryStatus value)
{
	m_Summary_status = value;
}

std::vector<AdResponse_allOf_1> createAdResponse_allOf_1VectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdResponse_allOf_1>();
    for (const auto& child: pt) {
        vec.emplace_back(AdResponse_allOf_1(child.second));
    }

    return vec;
}

}
}
}
}

