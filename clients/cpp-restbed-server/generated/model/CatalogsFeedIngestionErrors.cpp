/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedIngestionErrors.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedIngestionErrors::CatalogsFeedIngestionErrors(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string CatalogsFeedIngestionErrors::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void CatalogsFeedIngestionErrors::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree CatalogsFeedIngestionErrors::toPropertyTree()
{
    return toPropertyTree_internal();
}

void CatalogsFeedIngestionErrors::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string CatalogsFeedIngestionErrors::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void CatalogsFeedIngestionErrors::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedIngestionErrors::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("image_download_error", m_Image_download_error);
	pt.put("image_download_connection_timeout", m_Image_download_connection_timeout);
	pt.put("image_format_unrecognize", m_Image_format_unrecognize);
	pt.put("line_level_internal_error", m_Line_level_internal_error);
	pt.put("large_product_count_decrease", m_Large_product_count_decrease);
	return pt;
}

void CatalogsFeedIngestionErrors::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Image_download_error = pt.get("image_download_error", 0);
	m_Image_download_connection_timeout = pt.get("image_download_connection_timeout", 0);
	m_Image_format_unrecognize = pt.get("image_format_unrecognize", 0);
	m_Line_level_internal_error = pt.get("line_level_internal_error", 0);
	setLargeProductCountDecrease(pt.get("large_product_count_decrease", 0));
}

int32_t CatalogsFeedIngestionErrors::getImageDownloadError() const
{
    return m_Image_download_error;
}

void CatalogsFeedIngestionErrors::setImageDownloadError(int32_t value)
{
	m_Image_download_error = value;
}
int32_t CatalogsFeedIngestionErrors::getImageDownloadConnectionTimeout() const
{
    return m_Image_download_connection_timeout;
}

void CatalogsFeedIngestionErrors::setImageDownloadConnectionTimeout(int32_t value)
{
	m_Image_download_connection_timeout = value;
}
int32_t CatalogsFeedIngestionErrors::getImageFormatUnrecognize() const
{
    return m_Image_format_unrecognize;
}

void CatalogsFeedIngestionErrors::setImageFormatUnrecognize(int32_t value)
{
	m_Image_format_unrecognize = value;
}
int32_t CatalogsFeedIngestionErrors::getLineLevelInternalError() const
{
    return m_Line_level_internal_error;
}

void CatalogsFeedIngestionErrors::setLineLevelInternalError(int32_t value)
{
	m_Line_level_internal_error = value;
}
int32_t CatalogsFeedIngestionErrors::getLargeProductCountDecrease() const
{
    return m_Large_product_count_decrease;
}

void CatalogsFeedIngestionErrors::setLargeProductCountDecrease(int32_t value)
{
	if (std::find(m_Large_product_count_decreaseEnum.begin(), m_Large_product_count_decreaseEnum.end(), value) != m_Large_product_count_decreaseEnum.end()) {
		m_Large_product_count_decrease = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}

std::vector<CatalogsFeedIngestionErrors> createCatalogsFeedIngestionErrorsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedIngestionErrors>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedIngestionErrors(child.second));
    }

    return vec;
}

}
}
}
}

