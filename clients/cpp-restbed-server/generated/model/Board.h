/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Board.h
 *
 * Board
 */

#ifndef Board_H_
#define Board_H_



#include <string>
#include "BoardOwner.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Board
/// </summary>
class  Board 
{
public:
    Board() = default;
    explicit Board(boost::property_tree::ptree const& pt);
    virtual ~Board() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Board members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BoardOwner> getOwner() const;
    void setOwner(std::shared_ptr<BoardOwner> value);

    /// <summary>
    /// Privacy setting for a board. Learn more about &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/article/secret-boards\&quot;&gt;secret boards&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/protected-boards\&quot;&gt;protected boards&lt;/a&gt;
    /// </summary>
    std::string getPrivacy() const;
    void setPrivacy(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Id = "";
    std::string m_Name = "";
    std::string m_Description = "";
    std::shared_ptr<BoardOwner> m_Owner;
    std::string m_Privacy = "PUBLIC";
    const std::array<std::string, 3> m_PrivacyEnum = {
          "PUBLIC","PROTECTED","SECRET"
    };

};

std::vector<Board> createBoardVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* Board_H_ */
