/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsItemsBatch.h
 *
 * Object describing the catalogs items batch
 */

#ifndef CatalogsItemsBatch_H_
#define CatalogsItemsBatch_H_



#include <string>
#include "ItemProcessingRecord.h"
#include <vector>
#include "BatchOperationStatus.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing the catalogs items batch
/// </summary>
class  CatalogsItemsBatch 
{
public:
    CatalogsItemsBatch() = default;
    explicit CatalogsItemsBatch(boost::property_tree::ptree const& pt);
    virtual ~CatalogsItemsBatch() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CatalogsItemsBatch members

    /// <summary>
    /// Array with the catalogs items processing records part of the catalogs items batch
    /// </summary>
    std::vector<std::shared_ptr<ItemProcessingRecord>> getItems() const;
    void setItems(std::vector<std::shared_ptr<ItemProcessingRecord>> value);

    /// <summary>
    /// Id of the catalogs items batch
    /// </summary>
    std::string getBatchId() const;
    void setBatchId(std::string value);

    /// <summary>
    /// Time of the batch creation: YYYY-MM-DD&#39;T&#39;hh:mm:ssTZD
    /// </summary>
    std::string getCreatedTime() const;
    void setCreatedTime(std::string value);

    /// <summary>
    /// Time of the batch completion: YYYY-MM-DD&#39;T&#39;hh:mm:ssTZD
    /// </summary>
    std::string getCompletedTime() const;
    void setCompletedTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BatchOperationStatus> getStatus() const;
    void setStatus(std::shared_ptr<BatchOperationStatus> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::vector<std::shared_ptr<ItemProcessingRecord>> m_Items;
    std::string m_Batch_id = "";
    std::string m_Created_time = "";
    std::string m_Completed_time = "";
    std::shared_ptr<BatchOperationStatus> m_Status = std::make_shared<BatchOperationStatus>();
};

std::vector<CatalogsItemsBatch> createCatalogsItemsBatchVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CatalogsItemsBatch_H_ */
