/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeed.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeed::CatalogsFeed(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string CatalogsFeed::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void CatalogsFeed::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree CatalogsFeed::toPropertyTree()
{
    return toPropertyTree_internal();
}

void CatalogsFeed::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string CatalogsFeed::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void CatalogsFeed::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeed::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("created_at", m_Created_at);
	pt.put("id", m_Id);
	pt.put("updated_at", m_Updated_at);
	pt.put("name", m_Name);
	pt.put("default_locale", m_Default_locale);
	if (m_Credentials != nullptr) {
		pt.add_child("credentials", m_Credentials->toPropertyTree());
	}
	pt.put("location", m_Location);
	if (m_Preferred_processing_schedule != nullptr) {
		pt.add_child("preferred_processing_schedule", m_Preferred_processing_schedule->toPropertyTree());
	}
	return pt;
}

void CatalogsFeed::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Created_at = pt.get("created_at", "");
	m_Id = pt.get("id", "");
	m_Updated_at = pt.get("updated_at", "");
	m_Name = pt.get("name", "");
	m_Default_locale = pt.get("default_locale", "");
	if (pt.get_child_optional("credentials")) {
		m_Credentials = std::make_shared<CatalogsFeedCredentials>();
		m_Credentials->fromPropertyTree(pt.get_child("credentials"));
	}
	m_Location = pt.get("location", "");
	if (pt.get_child_optional("preferred_processing_schedule")) {
		m_Preferred_processing_schedule = std::make_shared<CatalogsFeedProcessingSchedule>();
		m_Preferred_processing_schedule->fromPropertyTree(pt.get_child("preferred_processing_schedule"));
	}
}

std::string CatalogsFeed::getCreatedAt() const
{
    return m_Created_at;
}

void CatalogsFeed::setCreatedAt(std::string value)
{
	m_Created_at = value;
}
std::string CatalogsFeed::getId() const
{
    return m_Id;
}

void CatalogsFeed::setId(std::string value)
{
	m_Id = value;
}
std::string CatalogsFeed::getUpdatedAt() const
{
    return m_Updated_at;
}

void CatalogsFeed::setUpdatedAt(std::string value)
{
	m_Updated_at = value;
}
std::shared_ptr<Country> CatalogsFeed::getDefaultCountry() const
{
    return m_Default_country;
}

void CatalogsFeed::setDefaultCountry(std::shared_ptr<Country> value)
{
	m_Default_country = value;
}
std::shared_ptr<ProductAvailabilityType> CatalogsFeed::getDefaultAvailability() const
{
    return m_Default_availability;
}

void CatalogsFeed::setDefaultAvailability(std::shared_ptr<ProductAvailabilityType> value)
{
	m_Default_availability = value;
}
std::shared_ptr<NullableCurrency> CatalogsFeed::getDefaultCurrency() const
{
    return m_Default_currency;
}

void CatalogsFeed::setDefaultCurrency(std::shared_ptr<NullableCurrency> value)
{
	m_Default_currency = value;
}
std::string CatalogsFeed::getName() const
{
    return m_Name;
}

void CatalogsFeed::setName(std::string value)
{
	m_Name = value;
}
std::shared_ptr<CatalogsFormat> CatalogsFeed::getFormat() const
{
    return m_Format;
}

void CatalogsFeed::setFormat(std::shared_ptr<CatalogsFormat> value)
{
	m_Format = value;
}
std::string CatalogsFeed::getDefaultLocale() const
{
    return m_Default_locale;
}

void CatalogsFeed::setDefaultLocale(std::string value)
{
	m_Default_locale = value;
}
std::shared_ptr<CatalogsFeedCredentials> CatalogsFeed::getCredentials() const
{
    return m_Credentials;
}

void CatalogsFeed::setCredentials(std::shared_ptr<CatalogsFeedCredentials> value)
{
	m_Credentials = value;
}
std::string CatalogsFeed::getLocation() const
{
    return m_Location;
}

void CatalogsFeed::setLocation(std::string value)
{
	m_Location = value;
}
std::shared_ptr<CatalogsFeedProcessingSchedule> CatalogsFeed::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}

void CatalogsFeed::setPreferredProcessingSchedule(std::shared_ptr<CatalogsFeedProcessingSchedule> value)
{
	m_Preferred_processing_schedule = value;
}
std::shared_ptr<CatalogsStatus> CatalogsFeed::getStatus() const
{
    return m_Status;
}

void CatalogsFeed::setStatus(std::shared_ptr<CatalogsStatus> value)
{
	m_Status = value;
}

std::vector<CatalogsFeed> createCatalogsFeedVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeed>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeed(child.second));
    }

    return vec;
}

}
}
}
}

