/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CatalogsFeedValidationErrors.h
 *
 * 
 */

#ifndef CatalogsFeedValidationErrors_H_
#define CatalogsFeedValidationErrors_H_



#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogsFeedValidationErrors 
{
public:
    CatalogsFeedValidationErrors() = default;
    explicit CatalogsFeedValidationErrors(boost::property_tree::ptree const& pt);
    virtual ~CatalogsFeedValidationErrors() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CatalogsFeedValidationErrors members

    /// <summary>
    /// 
    /// </summary>
    int32_t getFetchError() const;
    void setFetchError(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFetchInactiveFeedError() const;
    void setFetchInactiveFeedError(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEncodingError() const;
    void setEncodingError(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDelimiterError() const;
    void setDelimiterError(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRequiredColumnsMissing() const;
    void setRequiredColumnsMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getImageLinkInvalid() const;
    void setImageLinkInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getItemidMissing() const;
    void setItemidMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTitleMissing() const;
    void setTitleMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDescriptionMissing() const;
    void setDescriptionMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getProductCategoryInvalid() const;
    void setProductCategoryInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getProductLinkMissing() const;
    void setProductLinkMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getImageLinkMissing() const;
    void setImageLinkMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAvailabilityInvalid() const;
    void setAvailabilityInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getProductPriceInvalid() const;
    void setProductPriceInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLinkFormatInvalid() const;
    void setLinkFormatInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getParseLineError() const;
    void setParseLineError(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAdwordsFormatInvalid() const;
    void setAdwordsFormatInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getProductCategoryMissing() const;
    void setProductCategoryMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getInternalServiceError() const;
    void setInternalServiceError(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNoVerifiedDomain() const;
    void setNoVerifiedDomain(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAdultInvalid() const;
    void setAdultInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getInvalidDomain() const;
    void setInvalidDomain(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFeedLengthTooLong() const;
    void setFeedLengthTooLong(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLinkLengthTooLong() const;
    void setLinkLengthTooLong(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMalformedXml() const;
    void setMalformedXml(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRedirectInvalid() const;
    void setRedirectInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPriceMissing() const;
    void setPriceMissing(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFeedTooSmall() const;
    void setFeedTooSmall(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getConditionInvalid() const;
    void setConditionInvalid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getShopifyNoProducts() const;
    void setShopifyNoProducts(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxItemsPerItemGroupExceeded() const;
    void setMaxItemsPerItemGroupExceeded(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getItemMainImageDownloadFailure() const;
    void setItemMainImageDownloadFailure(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPinjoinContentUnsafe() const;
    void setPinjoinContentUnsafe(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBlocklistedImageSignature() const;
    void setBlocklistedImageSignature(int32_t value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    int32_t m_Fetch_error = 0;
    int32_t m_Fetch_inactive_feed_error = 0;
    int32_t m_Encoding_error = 0;
    int32_t m_Delimiter_error = 0;
    int32_t m_Required_columns_missing = 0;
    int32_t m_Image_link_invalid = 0;
    int32_t m_Itemid_missing = 0;
    int32_t m_Title_missing = 0;
    int32_t m_Description_missing = 0;
    int32_t m_Product_category_invalid = 0;
    int32_t m_Product_link_missing = 0;
    int32_t m_Image_link_missing = 0;
    int32_t m_Availability_invalid = 0;
    int32_t m_Product_price_invalid = 0;
    int32_t m_Link_format_invalid = 0;
    int32_t m_Parse_line_error = 0;
    int32_t m_Adwords_format_invalid = 0;
    int32_t m_Product_category_missing = 0;
    int32_t m_Internal_service_error = 0;
    int32_t m_No_verified_domain = 0;
    int32_t m_Adult_invalid = 0;
    int32_t m_Invalid_domain = 0;
    int32_t m_Feed_length_too_long = 0;
    int32_t m_Link_length_too_long = 0;
    int32_t m_Malformed_xml = 0;
    int32_t m_Redirect_invalid = 0;
    int32_t m_Price_missing = 0;
    int32_t m_Feed_too_small = 0;
    int32_t m_Condition_invalid = 0;
    int32_t m_Shopify_no_products = 0;
    int32_t m_Max_items_per_item_group_exceeded = 0;
    int32_t m_Item_main_image_download_failure = 0;
    int32_t m_Pinjoin_content_unsafe = 0;
    int32_t m_Blocklisted_image_signature = 0;
};

std::vector<CatalogsFeedValidationErrors> createCatalogsFeedValidationErrorsVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CatalogsFeedValidationErrors_H_ */
