/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Account.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Account::Account(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string Account::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void Account::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree Account::toPropertyTree()
{
    return toPropertyTree_internal();
}

void Account::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string Account::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Account::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Account::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("account_type", m_Account_type);
	pt.put("profile_image", m_Profile_image);
	pt.put("website_url", m_Website_url);
	pt.put("username", m_Username);
	return pt;
}

void Account::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	setAccountType(pt.get("account_type", ""));
	m_Profile_image = pt.get("profile_image", "");
	m_Website_url = pt.get("website_url", "");
	m_Username = pt.get("username", "");
}

std::string Account::getAccountType() const
{
    return m_Account_type;
}

void Account::setAccountType(std::string value)
{
	if (std::find(m_Account_typeEnum.begin(), m_Account_typeEnum.end(), value) != m_Account_typeEnum.end()) {
		m_Account_type = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::string Account::getProfileImage() const
{
    return m_Profile_image;
}

void Account::setProfileImage(std::string value)
{
	m_Profile_image = value;
}
std::string Account::getWebsiteUrl() const
{
    return m_Website_url;
}

void Account::setWebsiteUrl(std::string value)
{
	m_Website_url = value;
}
std::string Account::getUsername() const
{
    return m_Username;
}

void Account::setUsername(std::string value)
{
	m_Username = value;
}

std::vector<Account> createAccountVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Account>();
    for (const auto& child: pt) {
        vec.emplace_back(Account(child.second));
    }

    return vec;
}

}
}
}
}

