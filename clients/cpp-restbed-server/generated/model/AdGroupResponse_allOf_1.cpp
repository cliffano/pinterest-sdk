/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdGroupResponse_allOf_1.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdGroupResponse_allOf_1::AdGroupResponse_allOf_1(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string AdGroupResponse_allOf_1::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void AdGroupResponse_allOf_1::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree AdGroupResponse_allOf_1::toPropertyTree()
{
    return toPropertyTree_internal();
}

void AdGroupResponse_allOf_1::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string AdGroupResponse_allOf_1::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AdGroupResponse_allOf_1::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdGroupResponse_allOf_1::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("campaign_id", m_Campaign_id);
	pt.put("id", m_Id);
	pt.put("type", m_Type);
	pt.put("ad_account_id", m_Ad_account_id);
	pt.put("created_time", m_Created_time);
	pt.put("updated_time", m_Updated_time);
	return pt;
}

void AdGroupResponse_allOf_1::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Campaign_id = pt.get("campaign_id", "");
	m_Id = pt.get("id", "");
	m_Type = pt.get("type", "");
	m_Ad_account_id = pt.get("ad_account_id", "");
	m_Created_time = pt.get("created_time", 0);
	m_Updated_time = pt.get("updated_time", 0);
}

std::string AdGroupResponse_allOf_1::getCampaignId() const
{
    return m_Campaign_id;
}

void AdGroupResponse_allOf_1::setCampaignId(std::string value)
{
	m_Campaign_id = value;
}
std::shared_ptr<ActionType> AdGroupResponse_allOf_1::getBillableEvent() const
{
    return m_Billable_event;
}

void AdGroupResponse_allOf_1::setBillableEvent(std::shared_ptr<ActionType> value)
{
	m_Billable_event = value;
}
std::string AdGroupResponse_allOf_1::getId() const
{
    return m_Id;
}

void AdGroupResponse_allOf_1::setId(std::string value)
{
	m_Id = value;
}
std::string AdGroupResponse_allOf_1::getType() const
{
    return m_Type;
}

void AdGroupResponse_allOf_1::setType(std::string value)
{
	m_Type = value;
}
std::string AdGroupResponse_allOf_1::getAdAccountId() const
{
    return m_Ad_account_id;
}

void AdGroupResponse_allOf_1::setAdAccountId(std::string value)
{
	m_Ad_account_id = value;
}
int32_t AdGroupResponse_allOf_1::getCreatedTime() const
{
    return m_Created_time;
}

void AdGroupResponse_allOf_1::setCreatedTime(int32_t value)
{
	m_Created_time = value;
}
int32_t AdGroupResponse_allOf_1::getUpdatedTime() const
{
    return m_Updated_time;
}

void AdGroupResponse_allOf_1::setUpdatedTime(int32_t value)
{
	m_Updated_time = value;
}

std::vector<AdGroupResponse_allOf_1> createAdGroupResponse_allOf_1VectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdGroupResponse_allOf_1>();
    for (const auto& child: pt) {
        vec.emplace_back(AdGroupResponse_allOf_1(child.second));
    }

    return vec;
}

}
}
}
}

