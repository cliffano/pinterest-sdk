/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedValidationWarnings.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedValidationWarnings::CatalogsFeedValidationWarnings(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string CatalogsFeedValidationWarnings::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void CatalogsFeedValidationWarnings::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree CatalogsFeedValidationWarnings::toPropertyTree()
{
    return toPropertyTree_internal();
}

void CatalogsFeedValidationWarnings::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string CatalogsFeedValidationWarnings::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void CatalogsFeedValidationWarnings::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedValidationWarnings::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("title_length_too_long", m_Title_length_too_long);
	pt.put("description_length_too_long", m_Description_length_too_long);
	pt.put("gender_invalid", m_Gender_invalid);
	pt.put("age_group_invalid", m_Age_group_invalid);
	pt.put("size_type_invalid", m_Size_type_invalid);
	pt.put("link_format_warning", m_Link_format_warning);
	pt.put("duplicate_products", m_Duplicate_products);
	pt.put("duplicate_links", m_Duplicate_links);
	pt.put("sales_price_invalid", m_Sales_price_invalid);
	pt.put("product_category_depth_warning", m_Product_category_depth_warning);
	pt.put("adwords_same_as_link", m_Adwords_same_as_link);
	pt.put("duplicate_headers", m_Duplicate_headers);
	pt.put("fetch_same_signature", m_Fetch_same_signature);
	pt.put("adwords_format_warning", m_Adwords_format_warning);
	pt.put("additional_image_link_warning", m_Additional_image_link_warning);
	pt.put("image_link_warning", m_Image_link_warning);
	pt.put("shipping_invalid", m_Shipping_invalid);
	pt.put("tax_invalid", m_Tax_invalid);
	pt.put("shipping_weight_invalid", m_Shipping_weight_invalid);
	pt.put("expiration_date_invalid", m_Expiration_date_invalid);
	pt.put("availability_date_invalid", m_Availability_date_invalid);
	pt.put("sale_date_invalid", m_Sale_date_invalid);
	pt.put("weight_unit_invalid", m_Weight_unit_invalid);
	pt.put("is_bundle_invalid", m_Is_bundle_invalid);
	pt.put("updated_time_invalid", m_Updated_time_invalid);
	pt.put("custom_label_length_too_long", m_Custom_label_length_too_long);
	pt.put("product_type_length_too_long", m_Product_type_length_too_long);
	pt.put("too_many_additional_image_links", m_Too_many_additional_image_links);
	pt.put("multipack_invalid", m_Multipack_invalid);
	pt.put("indexed_product_count_large_delta", m_Indexed_product_count_large_delta);
	pt.put("item_additional_image_download_failure", m_Item_additional_image_download_failure);
	pt.put("optional_product_category_missing", m_Optional_product_category_missing);
	pt.put("optional_product_category_invalid", m_Optional_product_category_invalid);
	pt.put("optional_condition_missing", m_Optional_condition_missing);
	pt.put("optional_condition_invalid", m_Optional_condition_invalid);
	pt.put("ios_deep_link_invalid", m_Ios_deep_link_invalid);
	pt.put("android_deep_link_invalid", m_Android_deep_link_invalid);
	pt.put("availability_normalized", m_Availability_normalized);
	pt.put("condition_normalized", m_Condition_normalized);
	pt.put("gender_normalized", m_Gender_normalized);
	pt.put("size_type_normalized", m_Size_type_normalized);
	pt.put("age_group_normalized", m_Age_group_normalized);
	pt.put("utm_source_auto_corrected", m_Utm_source_auto_corrected);
	pt.put("country_does_not_map_to_currency", m_Country_does_not_map_to_currency);
	pt.put("min_ad_price_invalid", m_Min_ad_price_invalid);
	return pt;
}

void CatalogsFeedValidationWarnings::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Title_length_too_long = pt.get("title_length_too_long", 0);
	m_Description_length_too_long = pt.get("description_length_too_long", 0);
	m_Gender_invalid = pt.get("gender_invalid", 0);
	m_Age_group_invalid = pt.get("age_group_invalid", 0);
	m_Size_type_invalid = pt.get("size_type_invalid", 0);
	m_Link_format_warning = pt.get("link_format_warning", 0);
	m_Duplicate_products = pt.get("duplicate_products", 0);
	m_Duplicate_links = pt.get("duplicate_links", 0);
	m_Sales_price_invalid = pt.get("sales_price_invalid", 0);
	m_Product_category_depth_warning = pt.get("product_category_depth_warning", 0);
	m_Adwords_same_as_link = pt.get("adwords_same_as_link", 0);
	m_Duplicate_headers = pt.get("duplicate_headers", 0);
	m_Fetch_same_signature = pt.get("fetch_same_signature", 0);
	m_Adwords_format_warning = pt.get("adwords_format_warning", 0);
	m_Additional_image_link_warning = pt.get("additional_image_link_warning", 0);
	m_Image_link_warning = pt.get("image_link_warning", 0);
	m_Shipping_invalid = pt.get("shipping_invalid", 0);
	m_Tax_invalid = pt.get("tax_invalid", 0);
	m_Shipping_weight_invalid = pt.get("shipping_weight_invalid", 0);
	m_Expiration_date_invalid = pt.get("expiration_date_invalid", 0);
	m_Availability_date_invalid = pt.get("availability_date_invalid", 0);
	m_Sale_date_invalid = pt.get("sale_date_invalid", 0);
	m_Weight_unit_invalid = pt.get("weight_unit_invalid", 0);
	m_Is_bundle_invalid = pt.get("is_bundle_invalid", 0);
	m_Updated_time_invalid = pt.get("updated_time_invalid", 0);
	m_Custom_label_length_too_long = pt.get("custom_label_length_too_long", 0);
	m_Product_type_length_too_long = pt.get("product_type_length_too_long", 0);
	m_Too_many_additional_image_links = pt.get("too_many_additional_image_links", 0);
	m_Multipack_invalid = pt.get("multipack_invalid", 0);
	m_Indexed_product_count_large_delta = pt.get("indexed_product_count_large_delta", 0);
	m_Item_additional_image_download_failure = pt.get("item_additional_image_download_failure", 0);
	m_Optional_product_category_missing = pt.get("optional_product_category_missing", 0);
	m_Optional_product_category_invalid = pt.get("optional_product_category_invalid", 0);
	m_Optional_condition_missing = pt.get("optional_condition_missing", 0);
	m_Optional_condition_invalid = pt.get("optional_condition_invalid", 0);
	m_Ios_deep_link_invalid = pt.get("ios_deep_link_invalid", 0);
	m_Android_deep_link_invalid = pt.get("android_deep_link_invalid", 0);
	m_Availability_normalized = pt.get("availability_normalized", 0);
	m_Condition_normalized = pt.get("condition_normalized", 0);
	m_Gender_normalized = pt.get("gender_normalized", 0);
	m_Size_type_normalized = pt.get("size_type_normalized", 0);
	m_Age_group_normalized = pt.get("age_group_normalized", 0);
	m_Utm_source_auto_corrected = pt.get("utm_source_auto_corrected", 0);
	m_Country_does_not_map_to_currency = pt.get("country_does_not_map_to_currency", 0);
	m_Min_ad_price_invalid = pt.get("min_ad_price_invalid", 0);
}

int32_t CatalogsFeedValidationWarnings::getTitleLengthTooLong() const
{
    return m_Title_length_too_long;
}

void CatalogsFeedValidationWarnings::setTitleLengthTooLong(int32_t value)
{
	m_Title_length_too_long = value;
}
int32_t CatalogsFeedValidationWarnings::getDescriptionLengthTooLong() const
{
    return m_Description_length_too_long;
}

void CatalogsFeedValidationWarnings::setDescriptionLengthTooLong(int32_t value)
{
	m_Description_length_too_long = value;
}
int32_t CatalogsFeedValidationWarnings::getGenderInvalid() const
{
    return m_Gender_invalid;
}

void CatalogsFeedValidationWarnings::setGenderInvalid(int32_t value)
{
	m_Gender_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getAgeGroupInvalid() const
{
    return m_Age_group_invalid;
}

void CatalogsFeedValidationWarnings::setAgeGroupInvalid(int32_t value)
{
	m_Age_group_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getSizeTypeInvalid() const
{
    return m_Size_type_invalid;
}

void CatalogsFeedValidationWarnings::setSizeTypeInvalid(int32_t value)
{
	m_Size_type_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getLinkFormatWarning() const
{
    return m_Link_format_warning;
}

void CatalogsFeedValidationWarnings::setLinkFormatWarning(int32_t value)
{
	m_Link_format_warning = value;
}
int32_t CatalogsFeedValidationWarnings::getDuplicateProducts() const
{
    return m_Duplicate_products;
}

void CatalogsFeedValidationWarnings::setDuplicateProducts(int32_t value)
{
	m_Duplicate_products = value;
}
int32_t CatalogsFeedValidationWarnings::getDuplicateLinks() const
{
    return m_Duplicate_links;
}

void CatalogsFeedValidationWarnings::setDuplicateLinks(int32_t value)
{
	m_Duplicate_links = value;
}
int32_t CatalogsFeedValidationWarnings::getSalesPriceInvalid() const
{
    return m_Sales_price_invalid;
}

void CatalogsFeedValidationWarnings::setSalesPriceInvalid(int32_t value)
{
	m_Sales_price_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getProductCategoryDepthWarning() const
{
    return m_Product_category_depth_warning;
}

void CatalogsFeedValidationWarnings::setProductCategoryDepthWarning(int32_t value)
{
	m_Product_category_depth_warning = value;
}
int32_t CatalogsFeedValidationWarnings::getAdwordsSameAsLink() const
{
    return m_Adwords_same_as_link;
}

void CatalogsFeedValidationWarnings::setAdwordsSameAsLink(int32_t value)
{
	m_Adwords_same_as_link = value;
}
int32_t CatalogsFeedValidationWarnings::getDuplicateHeaders() const
{
    return m_Duplicate_headers;
}

void CatalogsFeedValidationWarnings::setDuplicateHeaders(int32_t value)
{
	m_Duplicate_headers = value;
}
int32_t CatalogsFeedValidationWarnings::getFetchSameSignature() const
{
    return m_Fetch_same_signature;
}

void CatalogsFeedValidationWarnings::setFetchSameSignature(int32_t value)
{
	m_Fetch_same_signature = value;
}
int32_t CatalogsFeedValidationWarnings::getAdwordsFormatWarning() const
{
    return m_Adwords_format_warning;
}

void CatalogsFeedValidationWarnings::setAdwordsFormatWarning(int32_t value)
{
	m_Adwords_format_warning = value;
}
int32_t CatalogsFeedValidationWarnings::getAdditionalImageLinkWarning() const
{
    return m_Additional_image_link_warning;
}

void CatalogsFeedValidationWarnings::setAdditionalImageLinkWarning(int32_t value)
{
	m_Additional_image_link_warning = value;
}
int32_t CatalogsFeedValidationWarnings::getImageLinkWarning() const
{
    return m_Image_link_warning;
}

void CatalogsFeedValidationWarnings::setImageLinkWarning(int32_t value)
{
	m_Image_link_warning = value;
}
int32_t CatalogsFeedValidationWarnings::getShippingInvalid() const
{
    return m_Shipping_invalid;
}

void CatalogsFeedValidationWarnings::setShippingInvalid(int32_t value)
{
	m_Shipping_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getTaxInvalid() const
{
    return m_Tax_invalid;
}

void CatalogsFeedValidationWarnings::setTaxInvalid(int32_t value)
{
	m_Tax_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getShippingWeightInvalid() const
{
    return m_Shipping_weight_invalid;
}

void CatalogsFeedValidationWarnings::setShippingWeightInvalid(int32_t value)
{
	m_Shipping_weight_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getExpirationDateInvalid() const
{
    return m_Expiration_date_invalid;
}

void CatalogsFeedValidationWarnings::setExpirationDateInvalid(int32_t value)
{
	m_Expiration_date_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getAvailabilityDateInvalid() const
{
    return m_Availability_date_invalid;
}

void CatalogsFeedValidationWarnings::setAvailabilityDateInvalid(int32_t value)
{
	m_Availability_date_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getSaleDateInvalid() const
{
    return m_Sale_date_invalid;
}

void CatalogsFeedValidationWarnings::setSaleDateInvalid(int32_t value)
{
	m_Sale_date_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getWeightUnitInvalid() const
{
    return m_Weight_unit_invalid;
}

void CatalogsFeedValidationWarnings::setWeightUnitInvalid(int32_t value)
{
	m_Weight_unit_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getIsBundleInvalid() const
{
    return m_Is_bundle_invalid;
}

void CatalogsFeedValidationWarnings::setIsBundleInvalid(int32_t value)
{
	m_Is_bundle_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getUpdatedTimeInvalid() const
{
    return m_Updated_time_invalid;
}

void CatalogsFeedValidationWarnings::setUpdatedTimeInvalid(int32_t value)
{
	m_Updated_time_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getCustomLabelLengthTooLong() const
{
    return m_Custom_label_length_too_long;
}

void CatalogsFeedValidationWarnings::setCustomLabelLengthTooLong(int32_t value)
{
	m_Custom_label_length_too_long = value;
}
int32_t CatalogsFeedValidationWarnings::getProductTypeLengthTooLong() const
{
    return m_Product_type_length_too_long;
}

void CatalogsFeedValidationWarnings::setProductTypeLengthTooLong(int32_t value)
{
	m_Product_type_length_too_long = value;
}
int32_t CatalogsFeedValidationWarnings::getTooManyAdditionalImageLinks() const
{
    return m_Too_many_additional_image_links;
}

void CatalogsFeedValidationWarnings::setTooManyAdditionalImageLinks(int32_t value)
{
	m_Too_many_additional_image_links = value;
}
int32_t CatalogsFeedValidationWarnings::getMultipackInvalid() const
{
    return m_Multipack_invalid;
}

void CatalogsFeedValidationWarnings::setMultipackInvalid(int32_t value)
{
	m_Multipack_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getIndexedProductCountLargeDelta() const
{
    return m_Indexed_product_count_large_delta;
}

void CatalogsFeedValidationWarnings::setIndexedProductCountLargeDelta(int32_t value)
{
	m_Indexed_product_count_large_delta = value;
}
int32_t CatalogsFeedValidationWarnings::getItemAdditionalImageDownloadFailure() const
{
    return m_Item_additional_image_download_failure;
}

void CatalogsFeedValidationWarnings::setItemAdditionalImageDownloadFailure(int32_t value)
{
	m_Item_additional_image_download_failure = value;
}
int32_t CatalogsFeedValidationWarnings::getOptionalProductCategoryMissing() const
{
    return m_Optional_product_category_missing;
}

void CatalogsFeedValidationWarnings::setOptionalProductCategoryMissing(int32_t value)
{
	m_Optional_product_category_missing = value;
}
int32_t CatalogsFeedValidationWarnings::getOptionalProductCategoryInvalid() const
{
    return m_Optional_product_category_invalid;
}

void CatalogsFeedValidationWarnings::setOptionalProductCategoryInvalid(int32_t value)
{
	m_Optional_product_category_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getOptionalConditionMissing() const
{
    return m_Optional_condition_missing;
}

void CatalogsFeedValidationWarnings::setOptionalConditionMissing(int32_t value)
{
	m_Optional_condition_missing = value;
}
int32_t CatalogsFeedValidationWarnings::getOptionalConditionInvalid() const
{
    return m_Optional_condition_invalid;
}

void CatalogsFeedValidationWarnings::setOptionalConditionInvalid(int32_t value)
{
	m_Optional_condition_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getIosDeepLinkInvalid() const
{
    return m_Ios_deep_link_invalid;
}

void CatalogsFeedValidationWarnings::setIosDeepLinkInvalid(int32_t value)
{
	m_Ios_deep_link_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getAndroidDeepLinkInvalid() const
{
    return m_Android_deep_link_invalid;
}

void CatalogsFeedValidationWarnings::setAndroidDeepLinkInvalid(int32_t value)
{
	m_Android_deep_link_invalid = value;
}
int32_t CatalogsFeedValidationWarnings::getAvailabilityNormalized() const
{
    return m_Availability_normalized;
}

void CatalogsFeedValidationWarnings::setAvailabilityNormalized(int32_t value)
{
	m_Availability_normalized = value;
}
int32_t CatalogsFeedValidationWarnings::getConditionNormalized() const
{
    return m_Condition_normalized;
}

void CatalogsFeedValidationWarnings::setConditionNormalized(int32_t value)
{
	m_Condition_normalized = value;
}
int32_t CatalogsFeedValidationWarnings::getGenderNormalized() const
{
    return m_Gender_normalized;
}

void CatalogsFeedValidationWarnings::setGenderNormalized(int32_t value)
{
	m_Gender_normalized = value;
}
int32_t CatalogsFeedValidationWarnings::getSizeTypeNormalized() const
{
    return m_Size_type_normalized;
}

void CatalogsFeedValidationWarnings::setSizeTypeNormalized(int32_t value)
{
	m_Size_type_normalized = value;
}
int32_t CatalogsFeedValidationWarnings::getAgeGroupNormalized() const
{
    return m_Age_group_normalized;
}

void CatalogsFeedValidationWarnings::setAgeGroupNormalized(int32_t value)
{
	m_Age_group_normalized = value;
}
int32_t CatalogsFeedValidationWarnings::getUtmSourceAutoCorrected() const
{
    return m_Utm_source_auto_corrected;
}

void CatalogsFeedValidationWarnings::setUtmSourceAutoCorrected(int32_t value)
{
	m_Utm_source_auto_corrected = value;
}
int32_t CatalogsFeedValidationWarnings::getCountryDoesNotMapToCurrency() const
{
    return m_Country_does_not_map_to_currency;
}

void CatalogsFeedValidationWarnings::setCountryDoesNotMapToCurrency(int32_t value)
{
	m_Country_does_not_map_to_currency = value;
}
int32_t CatalogsFeedValidationWarnings::getMinAdPriceInvalid() const
{
    return m_Min_ad_price_invalid;
}

void CatalogsFeedValidationWarnings::setMinAdPriceInvalid(int32_t value)
{
	m_Min_ad_price_invalid = value;
}

std::vector<CatalogsFeedValidationWarnings> createCatalogsFeedValidationWarningsVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedValidationWarnings>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedValidationWarnings(child.second));
    }

    return vec;
}

}
}
}
}

