/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CatalogsFeedsUpdateRequest.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

CatalogsFeedsUpdateRequest::CatalogsFeedsUpdateRequest(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string CatalogsFeedsUpdateRequest::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void CatalogsFeedsUpdateRequest::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree CatalogsFeedsUpdateRequest::toPropertyTree()
{
    return toPropertyTree_internal();
}

void CatalogsFeedsUpdateRequest::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string CatalogsFeedsUpdateRequest::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void CatalogsFeedsUpdateRequest::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree CatalogsFeedsUpdateRequest::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	if (m_Credentials != nullptr) {
		pt.add_child("credentials", m_Credentials->toPropertyTree());
	}
	pt.put("location", m_Location);
	if (m_Preferred_processing_schedule != nullptr) {
		pt.add_child("preferred_processing_schedule", m_Preferred_processing_schedule->toPropertyTree());
	}
	return pt;
}

void CatalogsFeedsUpdateRequest::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	if (pt.get_child_optional("credentials")) {
		m_Credentials = std::make_shared<CatalogsFeedCredentials>();
		m_Credentials->fromPropertyTree(pt.get_child("credentials"));
	}
	m_Location = pt.get("location", "");
	if (pt.get_child_optional("preferred_processing_schedule")) {
		m_Preferred_processing_schedule = std::make_shared<CatalogsFeedProcessingSchedule>();
		m_Preferred_processing_schedule->fromPropertyTree(pt.get_child("preferred_processing_schedule"));
	}
}

std::shared_ptr<ProductAvailabilityType> CatalogsFeedsUpdateRequest::getDefaultAvailability() const
{
    return m_Default_availability;
}

void CatalogsFeedsUpdateRequest::setDefaultAvailability(std::shared_ptr<ProductAvailabilityType> value)
{
	m_Default_availability = value;
}
std::shared_ptr<NullableCurrency> CatalogsFeedsUpdateRequest::getDefaultCurrency() const
{
    return m_Default_currency;
}

void CatalogsFeedsUpdateRequest::setDefaultCurrency(std::shared_ptr<NullableCurrency> value)
{
	m_Default_currency = value;
}
std::string CatalogsFeedsUpdateRequest::getName() const
{
    return m_Name;
}

void CatalogsFeedsUpdateRequest::setName(std::string value)
{
	m_Name = value;
}
std::shared_ptr<CatalogsFormat> CatalogsFeedsUpdateRequest::getFormat() const
{
    return m_Format;
}

void CatalogsFeedsUpdateRequest::setFormat(std::shared_ptr<CatalogsFormat> value)
{
	m_Format = value;
}
std::shared_ptr<CatalogsFeedCredentials> CatalogsFeedsUpdateRequest::getCredentials() const
{
    return m_Credentials;
}

void CatalogsFeedsUpdateRequest::setCredentials(std::shared_ptr<CatalogsFeedCredentials> value)
{
	m_Credentials = value;
}
std::string CatalogsFeedsUpdateRequest::getLocation() const
{
    return m_Location;
}

void CatalogsFeedsUpdateRequest::setLocation(std::string value)
{
	m_Location = value;
}
std::shared_ptr<CatalogsFeedProcessingSchedule> CatalogsFeedsUpdateRequest::getPreferredProcessingSchedule() const
{
    return m_Preferred_processing_schedule;
}

void CatalogsFeedsUpdateRequest::setPreferredProcessingSchedule(std::shared_ptr<CatalogsFeedProcessingSchedule> value)
{
	m_Preferred_processing_schedule = value;
}
std::shared_ptr<CatalogsStatus> CatalogsFeedsUpdateRequest::getStatus() const
{
    return m_Status;
}

void CatalogsFeedsUpdateRequest::setStatus(std::shared_ptr<CatalogsStatus> value)
{
	m_Status = value;
}

std::vector<CatalogsFeedsUpdateRequest> createCatalogsFeedsUpdateRequestVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<CatalogsFeedsUpdateRequest>();
    for (const auto& child: pt) {
        vec.emplace_back(CatalogsFeedsUpdateRequest(child.second));
    }

    return vec;
}

}
}
}
}

