/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignResponse.h
 *
 * 
 */

#ifndef CampaignResponse_H_
#define CampaignResponse_H_



#include "CampaignResponse_allOf.h"
#include "CampaignResponse_allOf_1.h"
#include "EntityStatus.h"
#include "ObjectiveType.h"
#include <string>
#include "TrackingUrls.h"
#include "CampaignCommon.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  CampaignResponse : public CampaignResponse_allOf, public CampaignCommon, public CampaignResponse_allOf_1
{
public:
    CampaignResponse() = default;
    explicit CampaignResponse(boost::property_tree::ptree const& pt);
    virtual ~CampaignResponse() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// CampaignResponse members

    /// <summary>
    /// Campaign ID.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Campaign&#39;s Advertiser ID.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// Campaign name.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// 
    /// </summary>
    EntityStatus getStatus() const;
    void setStatus(EntityStatus value);

    /// <summary>
    /// Campaign total spending cap.
    /// </summary>
    int32_t getLifetimeSpendCap() const;
    void setLifetimeSpendCap(int32_t value);

    /// <summary>
    /// Campaign daily spending cap.
    /// </summary>
    int32_t getDailySpendCap() const;
    void setDailySpendCap(int32_t value);

    /// <summary>
    /// Order line ID that appears on the invoice.
    /// </summary>
    std::string getOrderLineId() const;
    void setOrderLineId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrackingUrls> getTrackingUrls() const;
    void setTrackingUrls(std::shared_ptr<TrackingUrls> value);

    /// <summary>
    /// Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
    /// </summary>
    int32_t getStartTime() const;
    void setStartTime(int32_t value);

    /// <summary>
    /// Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
    /// </summary>
    int32_t getEndTime() const;
    void setEndTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ObjectiveType> getObjectiveType() const;
    void setObjectiveType(std::shared_ptr<ObjectiveType> value);

    /// <summary>
    /// Campaign creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t value);

    /// <summary>
    /// UTC timestamp. Last update time.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t value);

    /// <summary>
    /// Always \&quot;campaign\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Id = "";
    std::string m_Ad_account_id = "";
    std::string m_Name = "";
    EntityStatus m_Status;
    int32_t m_Lifetime_spend_cap = 0;
    int32_t m_Daily_spend_cap = 0;
    std::string m_Order_line_id = "";
    std::shared_ptr<TrackingUrls> m_Tracking_urls;
    int32_t m_Start_time = 0;
    int32_t m_End_time = 0;
    std::shared_ptr<ObjectiveType> m_Objective_type = std::make_shared<ObjectiveType>();
    int32_t m_Created_time = 0;
    int32_t m_Updated_time = 0;
    std::string m_Type = "";
};

std::vector<CampaignResponse> createCampaignResponseVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* CampaignResponse_H_ */
