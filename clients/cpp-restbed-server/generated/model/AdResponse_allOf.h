/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdResponse_allOf.h
 *
 * Creation fields
 */

#ifndef AdResponse_allOf_H_
#define AdResponse_allOf_H_



#include "EntityStatus.h"
#include <string>
#include "TrackingUrls.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Creation fields
/// </summary>
class  AdResponse_allOf 
{
public:
    AdResponse_allOf() = default;
    explicit AdResponse_allOf(boost::property_tree::ptree const& pt);
    virtual ~AdResponse_allOf() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AdResponse_allOf members

    /// <summary>
    /// ID of the ad group that contains the ad.
    /// </summary>
    std::string getAdGroupId() const;
    void setAdGroupId(std::string value);

    /// <summary>
    /// Deep link URL for Android devices. Not currently available. Using this field will generate an error.
    /// </summary>
    std::string getAndroidDeepLink() const;
    void setAndroidDeepLink(std::string value);

    /// <summary>
    /// Comma-separated deep links for the carousel pin on Android.
    /// </summary>
    std::vector<std::string> getCarouselAndroidDeepLinks() const;
    void setCarouselAndroidDeepLinks(std::vector<std::string> value);

    /// <summary>
    /// Comma-separated destination URLs for the carousel pin to promote.
    /// </summary>
    std::vector<std::string> getCarouselDestinationUrls() const;
    void setCarouselDestinationUrls(std::vector<std::string> value);

    /// <summary>
    /// Comma-separated deep links for the carousel pin on iOS.
    /// </summary>
    std::vector<std::string> getCarouselIosDeepLinks() const;
    void setCarouselIosDeepLinks(std::vector<std::string> value);

    /// <summary>
    /// Tracking url for the ad clicks.
    /// </summary>
    std::string getClickTrackingUrl() const;
    void setClickTrackingUrl(std::string value);

    /// <summary>
    /// Ad creative type enum
    /// </summary>
    std::string getCreativeType() const;
    void setCreativeType(std::string value);

    /// <summary>
    /// Destination URL.
    /// </summary>
    std::string getDestinationUrl() const;
    void setDestinationUrl(std::string value);

    /// <summary>
    /// Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
    /// </summary>
    std::string getIosDeepLink() const;
    void setIosDeepLink(std::string value);

    /// <summary>
    /// Is original pin deleted?
    /// </summary>
    bool isIsPinDeleted() const;
    void setIsPinDeleted(bool value);

    /// <summary>
    /// Is pin repinnable?
    /// </summary>
    bool isIsRemovable() const;
    void setIsRemovable(bool value);

    /// <summary>
    /// Name of the ad - 255 chars max.
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// Pin ID.
    /// </summary>
    std::string getPinId() const;
    void setPinId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityStatus> getStatus() const;
    void setStatus(std::shared_ptr<EntityStatus> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrackingUrls> getTrackingUrls() const;
    void setTrackingUrls(std::shared_ptr<TrackingUrls> value);

    /// <summary>
    /// Tracking URL for ad impressions.
    /// </summary>
    std::string getViewTrackingUrl() const;
    void setViewTrackingUrl(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Ad_group_id = "";
    std::string m_Android_deep_link = "";
    std::vector<std::string> m_Carousel_android_deep_links;
    std::vector<std::string> m_Carousel_destination_urls;
    std::vector<std::string> m_Carousel_ios_deep_links;
    std::string m_Click_tracking_url = "";
    std::string m_Creative_type = "";
    std::string m_Destination_url = "";
    std::string m_Ios_deep_link = "";
    bool m_Is_pin_deleted = false;
    bool m_Is_removable = false;
    std::string m_Name = "";
    std::string m_Pin_id = "";
    std::shared_ptr<EntityStatus> m_Status = std::make_shared<EntityStatus>();
    std::shared_ptr<TrackingUrls> m_Tracking_urls;
    std::string m_View_tracking_url = "";
    const std::array<std::string, 7> m_Creative_typeEnum = {
          "REGULAR","VIDEO","SHOPPING","CAROUSEL","MAX_VIDEO","SHOP_THE_PIN","STORY"
    };

};

std::vector<AdResponse_allOf> createAdResponse_allOfVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* AdResponse_allOf_H_ */
