/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsCreateAsyncRequest_allOf.h
 *
 * 
 */

#ifndef AdsAnalyticsCreateAsyncRequest_allOf_H_
#define AdsAnalyticsCreateAsyncRequest_allOf_H_



#include "Granularity.h"
#include "ConversionReportTimeType.h"
#include "ConversionReportAttributionType.h"
#include <string>
#include <vector>
#include "ConversionAttributionWindowDays.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdsAnalyticsCreateAsyncRequest_allOf 
{
public:
    AdsAnalyticsCreateAsyncRequest_allOf() = default;
    explicit AdsAnalyticsCreateAsyncRequest_allOf(boost::property_tree::ptree const& pt);
    virtual ~AdsAnalyticsCreateAsyncRequest_allOf() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AdsAnalyticsCreateAsyncRequest_allOf members

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string value);

    /// <summary>
    /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    /// </summary>
    Granularity getGranularity() const;
    void setGranularity(Granularity value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getClickWindowDays() const;
    void setClickWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getEngagementWindowDays() const;
    void setEngagementWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getViewWindowDays() const;
    void setViewWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value);

    /// <summary>
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    /// </summary>
    ConversionReportTimeType getConversionReportTime() const;
    void setConversionReportTime(ConversionReportTimeType value);

    /// <summary>
    /// List of types of attribution for the conversion report
    /// </summary>
    std::vector<std::shared_ptr<ConversionReportAttributionType>> getAttributionTypes() const;
    void setAttributionTypes(std::vector<std::shared_ptr<ConversionReportAttributionType>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Start_date = "";
    std::string m_End_date = "";
    Granularity m_Granularity;
    std::shared_ptr<ConversionAttributionWindowDays> m_Click_window_days;
    std::shared_ptr<ConversionAttributionWindowDays> m_Engagement_window_days;
    std::shared_ptr<ConversionAttributionWindowDays> m_View_window_days;
    ConversionReportTimeType m_Conversion_report_time;
    std::vector<std::shared_ptr<ConversionReportAttributionType>> m_Attribution_types;
};

std::vector<AdsAnalyticsCreateAsyncRequest_allOf> createAdsAnalyticsCreateAsyncRequest_allOfVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* AdsAnalyticsCreateAsyncRequest_allOf_H_ */
