/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Pin.h
 *
 * Pin
 */

#ifndef Pin_H_
#define Pin_H_



#include "PinMedia.h"
#include <string>
#include "BoardOwner.h"
#include "PinMediaSource.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Pin
/// </summary>
class  Pin 
{
public:
    Pin() = default;
    explicit Pin(boost::property_tree::ptree const& pt);
    virtual ~Pin() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Pin members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getLink() const;
    void setLink(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getAltText() const;
    void setAltText(std::string value);

    /// <summary>
    /// The board to which this Pin belongs.
    /// </summary>
    std::string getBoardId() const;
    void setBoardId(std::string value);

    /// <summary>
    /// The board section to which this Pin belongs.
    /// </summary>
    std::string getBoardSectionId() const;
    void setBoardSectionId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BoardOwner> getBoardOwner() const;
    void setBoardOwner(std::shared_ptr<BoardOwner> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PinMedia> getMedia() const;
    void setMedia(std::shared_ptr<PinMedia> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PinMediaSource> getMediaSource() const;
    void setMediaSource(std::shared_ptr<PinMediaSource> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Id = "";
    std::string m_Created_at = "";
    std::string m_Link = "";
    std::string m_Title = "";
    std::string m_Description = "";
    std::string m_Alt_text = "";
    std::string m_Board_id = "";
    std::string m_Board_section_id = "";
    std::shared_ptr<BoardOwner> m_Board_owner;
    std::shared_ptr<PinMedia> m_Media;
    std::shared_ptr<PinMediaSource> m_Media_source;
};

std::vector<Pin> createPinVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* Pin_H_ */
