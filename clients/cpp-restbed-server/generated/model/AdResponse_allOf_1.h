/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdResponse_allOf_1.h
 *
 * 
 */

#ifndef AdResponse_allOf_1_H_
#define AdResponse_allOf_1_H_



#include <string>
#include "PinPromotionSummaryStatus.h"
#include <vector>
#include <memory>
#include <vector>
#include <array>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdResponse_allOf_1 
{
public:
    AdResponse_allOf_1() = default;
    explicit AdResponse_allOf_1(boost::property_tree::ptree const& pt);
    virtual ~AdResponse_allOf_1() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AdResponse_allOf_1 members

    /// <summary>
    /// The ID of the advertiser that this ad belongs to.
    /// </summary>
    std::string getAdAccountId() const;
    void setAdAccountId(std::string value);

    /// <summary>
    /// ID of the ad campaign that contains this ad.
    /// </summary>
    std::string getCampaignId() const;
    void setCampaignId(std::string value);

    /// <summary>
    /// Destination URL template for all items within a collections drawer.
    /// </summary>
    std::string getCollectionItemsDestinationUrlTemplate() const;
    void setCollectionItemsDestinationUrlTemplate(std::string value);

    /// <summary>
    /// Pin creation time. Unix timestamp in seconds.
    /// </summary>
    int32_t getCreatedTime() const;
    void setCreatedTime(int32_t value);

    /// <summary>
    /// The ID of this ad.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
    /// </summary>
    std::vector<std::string> getRejectedReasons() const;
    void setRejectedReasons(std::vector<std::string> value);

    /// <summary>
    /// Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
    /// </summary>
    std::vector<std::string> getRejectionLabels() const;
    void setRejectionLabels(std::vector<std::string> value);

    /// <summary>
    /// Ad review status
    /// </summary>
    std::string getReviewStatus() const;
    void setReviewStatus(std::string value);

    /// <summary>
    /// Always \&quot;ad\&quot;.
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// Last update time. Unix timestamp in seconds.
    /// </summary>
    int32_t getUpdatedTime() const;
    void setUpdatedTime(int32_t value);

    /// <summary>
    /// Ad summary status
    /// </summary>
    PinPromotionSummaryStatus getSummaryStatus() const;
    void setSummaryStatus(PinPromotionSummaryStatus value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Ad_account_id = "";
    std::string m_Campaign_id = "";
    std::string m_Collection_items_destination_url_template = "";
    int32_t m_Created_time = 0;
    std::string m_Id = "";
    std::vector<std::string> m_Rejected_reasons;
    std::vector<std::string> m_Rejection_labels;
    std::string m_Review_status = "";
    std::string m_Type = "";
    int32_t m_Updated_time = 0;
    PinPromotionSummaryStatus m_Summary_status;
    const std::array<std::string, 48> m_Rejected_reasonsEnum = {
          "HASHTAGS","PROMOTIONS_AND_PRICES","TARGETING","LANDING_PAGE","CAPS_AND_SYMBOLS","SHOCKING","WEIGHT_LOSS","PROHIBITED_PRODUCT","AUTHENTICITY","NUDITY","CONFUSING_DESIGN","URGENCY","RATINGS","APP","ALCOHOL","CONTESTS","POLITICAL","OTHER","IMAGE","NAR","INCONSISTENT","CLICKBAIT","NO_DESCRIPTION","LOW_QUALITY","EXAGGERATED_CLAIMS","PINTEREST_BRAND","ALCOHOL_NO_SALE","LANDING_PAGE_SPEED","LANDING_PAGE_HARDWALL","LANDING_PAGE_BROKEN","LANDING_PAGE_QUALITY","OUT_OF_STOCK","IMAGE_LOW_QUALITY","IMAGE_BUSY","IMAGE_POORLY_EDITED","IMAGE_BEFORE_AFTER","UGC","FAKE_BUTTONS","WEAPONS","SENSITIVE","UNACCEPTABLE_BUSINESS","SUSPICIOUS_CLAIMS","PHARMA","SUSPICIOUS_SUPPLEMENTS","ILLEGAL_RECREATIONAL_DRUG","LOW_QUALITY_LANDING_PAGE","RESTRICTED_HEALTHCARE","INCONSISTENT_LANG_FR"
    };

    const std::array<std::string, 4> m_Review_statusEnum = {
          "OTHER","PENDING","REJECTED","APPROVED"
    };

};

std::vector<AdResponse_allOf_1> createAdResponse_allOf_1VectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* AdResponse_allOf_1_H_ */
