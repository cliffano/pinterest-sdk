/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdsAnalyticsCreateAsyncRequest_allOf.h"

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdsAnalyticsCreateAsyncRequest_allOf::AdsAnalyticsCreateAsyncRequest_allOf(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}

std::string AdsAnalyticsCreateAsyncRequest_allOf::toJsonString(bool prettyJson /* = false */)
{
    return toJsonString_internal(prettyJson);
}

void AdsAnalyticsCreateAsyncRequest_allOf::fromJsonString(std::string const& jsonString)
{
    fromJsonString_internal(jsonString);
}

boost::property_tree::ptree AdsAnalyticsCreateAsyncRequest_allOf::toPropertyTree()
{
    return toPropertyTree_internal();
}

void AdsAnalyticsCreateAsyncRequest_allOf::fromPropertyTree(boost::property_tree::ptree const& pt)
{
    fromPropertyTree_internal(pt);
}

std::string AdsAnalyticsCreateAsyncRequest_allOf::toJsonString_internal(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AdsAnalyticsCreateAsyncRequest_allOf::fromJsonString_internal(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AdsAnalyticsCreateAsyncRequest_allOf::toPropertyTree_internal()
{
	ptree pt;
	ptree tmp_node;
	pt.put("start_date", m_Start_date);
	pt.put("end_date", m_End_date);
	pt.put("granularity", m_Granularity);
	if (m_Granularity != nullptr) {
		pt.add_child("granularity", m_Granularity->toPropertyTree());
	}
	if (m_Click_window_days != nullptr) {
		pt.add_child("click_window_days", m_Click_window_days->toPropertyTree());
	}
	if (m_Engagement_window_days != nullptr) {
		pt.add_child("engagement_window_days", m_Engagement_window_days->toPropertyTree());
	}
	if (m_View_window_days != nullptr) {
		pt.add_child("view_window_days", m_View_window_days->toPropertyTree());
	}
	pt.put("conversion_report_time", m_Conversion_report_time);
	if (m_Conversion_report_time != nullptr) {
		pt.add_child("conversion_report_time", m_Conversion_report_time->toPropertyTree());
	}
	// generate tree for Attribution_types
	if (!m_Attribution_types.empty()) {
		for (const auto &childEntry : m_Attribution_types) {
            ptree Attribution_types_node;
            Attribution_types_node.put("", childEntry);
            tmp_node.push_back(std::make_pair("", Attribution_types_node));
		}
		pt.add_child("attribution_types", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void AdsAnalyticsCreateAsyncRequest_allOf::fromPropertyTree_internal(ptree const &pt)
{
	ptree tmp_node;
	m_Start_date = pt.get("start_date", "");
	m_End_date = pt.get("end_date", "");
	m_Granularity = pt.get("granularity", "");
	if (pt.get_child_optional("granularity")) {
		m_Granularity = "";
		m_Granularity->fromPropertyTree(pt.get_child("granularity"));
	}
	if (pt.get_child_optional("click_window_days")) {
		m_Click_window_days = 30;
		m_Click_window_days->fromPropertyTree(pt.get_child("click_window_days"));
	}
	if (pt.get_child_optional("engagement_window_days")) {
		m_Engagement_window_days = 30;
		m_Engagement_window_days->fromPropertyTree(pt.get_child("engagement_window_days"));
	}
	if (pt.get_child_optional("view_window_days")) {
		m_View_window_days = 1;
		m_View_window_days->fromPropertyTree(pt.get_child("view_window_days"));
	}
	m_Conversion_report_time = pt.get("conversion_report_time", "TIME_OF_AD_ACTION");
	if (pt.get_child_optional("conversion_report_time")) {
		m_Conversion_report_time = "TIME_OF_AD_ACTION";
		m_Conversion_report_time->fromPropertyTree(pt.get_child("conversion_report_time"));
	}
	// push all items of Attribution_types into member vector
	if (pt.get_child_optional("attribution_types")) {
		for (const auto &childTree : pt.get_child("attribution_types")) {
            std::shared_ptr<ConversionReportAttributionType> val =
            m_Attribution_types.emplace_back(std::move(val));
		}
	}
}

std::string AdsAnalyticsCreateAsyncRequest_allOf::getStartDate() const
{
    return m_Start_date;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setStartDate(std::string value)
{
	m_Start_date = value;
}
std::string AdsAnalyticsCreateAsyncRequest_allOf::getEndDate() const
{
    return m_End_date;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setEndDate(std::string value)
{
	m_End_date = value;
}
Granularity AdsAnalyticsCreateAsyncRequest_allOf::getGranularity() const
{
    return m_Granularity;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setGranularity(Granularity value)
{
	m_Granularity = value;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest_allOf::getClickWindowDays() const
{
    return m_Click_window_days;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setClickWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value)
{
	m_Click_window_days = value;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest_allOf::getEngagementWindowDays() const
{
    return m_Engagement_window_days;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setEngagementWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value)
{
	m_Engagement_window_days = value;
}
std::shared_ptr<ConversionAttributionWindowDays> AdsAnalyticsCreateAsyncRequest_allOf::getViewWindowDays() const
{
    return m_View_window_days;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setViewWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value)
{
	m_View_window_days = value;
}
ConversionReportTimeType AdsAnalyticsCreateAsyncRequest_allOf::getConversionReportTime() const
{
    return m_Conversion_report_time;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setConversionReportTime(ConversionReportTimeType value)
{
	m_Conversion_report_time = value;
}
std::vector<std::shared_ptr<ConversionReportAttributionType>> AdsAnalyticsCreateAsyncRequest_allOf::getAttributionTypes() const
{
    return m_Attribution_types;
}

void AdsAnalyticsCreateAsyncRequest_allOf::setAttributionTypes(std::vector<std::shared_ptr<ConversionReportAttributionType>> value)
{
	m_Attribution_types = value;
}

std::vector<AdsAnalyticsCreateAsyncRequest_allOf> createAdsAnalyticsCreateAsyncRequest_allOfVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<AdsAnalyticsCreateAsyncRequest_allOf>();
    for (const auto& child: pt) {
        vec.emplace_back(AdsAnalyticsCreateAsyncRequest_allOf(child.second));
    }

    return vec;
}

}
}
}
}

