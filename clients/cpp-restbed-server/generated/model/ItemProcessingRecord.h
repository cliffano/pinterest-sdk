/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ItemProcessingRecord.h
 *
 * Object describing an item processing record
 */

#ifndef ItemProcessingRecord_H_
#define ItemProcessingRecord_H_



#include "ItemValidationEvent.h"
#include <string>
#include "ItemProcessingStatus.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object describing an item processing record
/// </summary>
class  ItemProcessingRecord 
{
public:
    ItemProcessingRecord() = default;
    explicit ItemProcessingRecord(boost::property_tree::ptree const& pt);
    virtual ~ItemProcessingRecord() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// ItemProcessingRecord members

    /// <summary>
    /// The catalog item id in the merchant namespace
    /// </summary>
    std::string getItemId() const;
    void setItemId(std::string value);

    /// <summary>
    /// Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
    /// </summary>
    std::vector<std::shared_ptr<ItemValidationEvent>> getErrors() const;
    void setErrors(std::vector<std::shared_ptr<ItemValidationEvent>> value);

    /// <summary>
    /// Array with the validation warnings for the item processing record
    /// </summary>
    std::vector<std::shared_ptr<ItemValidationEvent>> getWarnings() const;
    void setWarnings(std::vector<std::shared_ptr<ItemValidationEvent>> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ItemProcessingStatus> getStatus() const;
    void setStatus(std::shared_ptr<ItemProcessingStatus> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Item_id = "";
    std::vector<std::shared_ptr<ItemValidationEvent>> m_Errors;
    std::vector<std::shared_ptr<ItemValidationEvent>> m_Warnings;
    std::shared_ptr<ItemProcessingStatus> m_Status = std::make_shared<ItemProcessingStatus>();
};

std::vector<ItemProcessingRecord> createItemProcessingRecordVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* ItemProcessingRecord_H_ */
