/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsCreateAsyncRequest.h
 *
 * 
 */

#ifndef AdsAnalyticsCreateAsyncRequest_H_
#define AdsAnalyticsCreateAsyncRequest_H_



#include "ConversionReportTimeType.h"
#include "ConversionReportAttributionType.h"
#include <string>
#include "AdsAnalyticsCreateAsyncRequest_allOf_1.h"
#include "PinPromotionSummaryStatus.h"
#include "ReportingColumnAsync.h"
#include "MetricsReportingLevel.h"
#include <vector>
#include "AdsAnalyticsMetricsFilter.h"
#include "Granularity.h"
#include "AdsAnalyticsTargetingType.h"
#include "ProductGroupSummaryStatus.h"
#include "AdsAnalyticsCreateAsyncRequest_allOf.h"
#include "CampaignSummaryStatus.h"
#include "DataOutputFormat.h"
#include "ObjectiveType.h"
#include "AdGroupSummaryStatus.h"
#include "ConversionAttributionWindowDays.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdsAnalyticsCreateAsyncRequest : public AdsAnalyticsCreateAsyncRequest_allOf, public AdsAnalyticsCreateAsyncRequest_allOf_1
{
public:
    AdsAnalyticsCreateAsyncRequest() = default;
    explicit AdsAnalyticsCreateAsyncRequest(boost::property_tree::ptree const& pt);
    virtual ~AdsAnalyticsCreateAsyncRequest() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AdsAnalyticsCreateAsyncRequest members

    /// <summary>
    /// Metric report start date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getStartDate() const;
    void setStartDate(std::string value);

    /// <summary>
    /// Metric report end date (UTC). Format: YYYY-MM-DD
    /// </summary>
    std::string getEndDate() const;
    void setEndDate(std::string value);

    /// <summary>
    /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
    /// </summary>
    Granularity getGranularity() const;
    void setGranularity(Granularity value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getClickWindowDays() const;
    void setClickWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getEngagementWindowDays() const;
    void setEngagementWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value);

    /// <summary>
    /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
    /// </summary>
    std::shared_ptr<ConversionAttributionWindowDays> getViewWindowDays() const;
    void setViewWindowDays(std::shared_ptr<ConversionAttributionWindowDays> value);

    /// <summary>
    /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    /// </summary>
    ConversionReportTimeType getConversionReportTime() const;
    void setConversionReportTime(ConversionReportTimeType value);

    /// <summary>
    /// List of types of attribution for the conversion report
    /// </summary>
    std::vector<std::shared_ptr<ConversionReportAttributionType>> getAttributionTypes() const;
    void setAttributionTypes(std::vector<std::shared_ptr<ConversionReportAttributionType>> value);

    /// <summary>
    /// Metric and entity columns
    /// </summary>
    std::vector<std::shared_ptr<ReportingColumnAsync>> getColumns() const;
    void setColumns(std::vector<std::shared_ptr<ReportingColumnAsync>> value);

    /// <summary>
    /// Level of the report
    /// </summary>
    MetricsReportingLevel getLevel() const;
    void setLevel(MetricsReportingLevel value);

    /// <summary>
    /// Specification for formatting report data
    /// </summary>
    DataOutputFormat getReportFormat() const;
    void setReportFormat(DataOutputFormat value);

    /// <summary>
    /// List of campaign ids
    /// </summary>
    std::vector<std::string> getCampaignIds() const;
    void setCampaignIds(std::vector<std::string> value);

    /// <summary>
    /// List of status values for filtering
    /// </summary>
    std::vector<std::shared_ptr<CampaignSummaryStatus>> getCampaignStatuses() const;
    void setCampaignStatuses(std::vector<std::shared_ptr<CampaignSummaryStatus>> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<std::shared_ptr<ObjectiveType>> getCampaignObjectiveTypes() const;
    void setCampaignObjectiveTypes(std::vector<std::shared_ptr<ObjectiveType>> value);

    /// <summary>
    /// List of ad group ids
    /// </summary>
    std::vector<std::string> getAdGroupIds() const;
    void setAdGroupIds(std::vector<std::string> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<std::shared_ptr<AdGroupSummaryStatus>> getAdGroupStatuses() const;
    void setAdGroupStatuses(std::vector<std::shared_ptr<AdGroupSummaryStatus>> value);

    /// <summary>
    /// List of ad ids
    /// </summary>
    std::vector<std::string> getAdIds() const;
    void setAdIds(std::vector<std::string> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<std::shared_ptr<PinPromotionSummaryStatus>> getAdStatuses() const;
    void setAdStatuses(std::vector<std::shared_ptr<PinPromotionSummaryStatus>> value);

    /// <summary>
    /// List of product group ids
    /// </summary>
    std::vector<std::string> getProductGroupIds() const;
    void setProductGroupIds(std::vector<std::string> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<std::shared_ptr<ProductGroupSummaryStatus>> getProductGroupStatuses() const;
    void setProductGroupStatuses(std::vector<std::shared_ptr<ProductGroupSummaryStatus>> value);

    /// <summary>
    /// List of product item ids
    /// </summary>
    std::vector<std::string> getProductItemIds() const;
    void setProductItemIds(std::vector<std::string> value);

    /// <summary>
    /// List of targeting types
    /// </summary>
    std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> getTargetingTypes() const;
    void setTargetingTypes(std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> value);

    /// <summary>
    /// List of metrics filters
    /// </summary>
    std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> getMetricsFilters() const;
    void setMetricsFilters(std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_Start_date = "";
    std::string m_End_date = "";
    Granularity m_Granularity;
    std::shared_ptr<ConversionAttributionWindowDays> m_Click_window_days;
    std::shared_ptr<ConversionAttributionWindowDays> m_Engagement_window_days;
    std::shared_ptr<ConversionAttributionWindowDays> m_View_window_days;
    ConversionReportTimeType m_Conversion_report_time;
    std::vector<std::shared_ptr<ConversionReportAttributionType>> m_Attribution_types;
    std::vector<std::shared_ptr<ReportingColumnAsync>> m_Columns;
    MetricsReportingLevel m_Level;
    DataOutputFormat m_Report_format;
    std::vector<std::string> m_Campaign_ids;
    std::vector<std::shared_ptr<CampaignSummaryStatus>> m_Campaign_statuses;
    std::vector<std::shared_ptr<ObjectiveType>> m_Campaign_objective_types;
    std::vector<std::string> m_Ad_group_ids;
    std::vector<std::shared_ptr<AdGroupSummaryStatus>> m_Ad_group_statuses;
    std::vector<std::string> m_Ad_ids;
    std::vector<std::shared_ptr<PinPromotionSummaryStatus>> m_Ad_statuses;
    std::vector<std::string> m_Product_group_ids;
    std::vector<std::shared_ptr<ProductGroupSummaryStatus>> m_Product_group_statuses;
    std::vector<std::string> m_Product_item_ids;
    std::vector<std::shared_ptr<AdsAnalyticsTargetingType>> m_Targeting_types;
    std::vector<std::shared_ptr<AdsAnalyticsMetricsFilter>> m_Metrics_filters;
};

std::vector<AdsAnalyticsCreateAsyncRequest> createAdsAnalyticsCreateAsyncRequestVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* AdsAnalyticsCreateAsyncRequest_H_ */
