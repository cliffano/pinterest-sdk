/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MediaUpload_allOf_upload_parameters.h
 *
 * The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
 */

#ifndef MediaUpload_allOf_upload_parameters_H_
#define MediaUpload_allOf_upload_parameters_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
/// </summary>
class  MediaUpload_allOf_upload_parameters 
{
public:
    MediaUpload_allOf_upload_parameters() = default;
    explicit MediaUpload_allOf_upload_parameters(boost::property_tree::ptree const& pt);
    virtual ~MediaUpload_allOf_upload_parameters() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// MediaUpload_allOf_upload_parameters members

    /// <summary>
    /// 
    /// </summary>
    std::string getXAmzDate() const;
    void setXAmzDate(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getXAmzSignature() const;
    void setXAmzSignature(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getXAmzSecurityToken() const;
    void setXAmzSecurityToken(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getXAmzAlgorithm() const;
    void setXAmzAlgorithm(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getKey() const;
    void setKey(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPolicy() const;
    void setPolicy(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getXAmzCredential() const;
    void setXAmzCredential(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getContentType() const;
    void setContentType(std::string value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::string m_X_amz_date = "";
    std::string m_X_amz_signature = "";
    std::string m_X_amz_security_token = "";
    std::string m_X_amz_algorithm = "";
    std::string m_Key = "";
    std::string m_Policy = "";
    std::string m_X_amz_credential = "";
    std::string m_Content_Type = "";
};

std::vector<MediaUpload_allOf_upload_parameters> createMediaUpload_allOf_upload_parametersVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* MediaUpload_allOf_upload_parameters_H_ */
