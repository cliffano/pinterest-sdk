/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdsAnalyticsMetricsFilter.h
 *
 * 
 */

#ifndef AdsAnalyticsMetricsFilter_H_
#define AdsAnalyticsMetricsFilter_H_



#include "AdsAnalyticsFilterColumn.h"
#include "AdsAnalyticsFilterOperator.h"
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdsAnalyticsMetricsFilter 
{
public:
    AdsAnalyticsMetricsFilter() = default;
    explicit AdsAnalyticsMetricsFilter(boost::property_tree::ptree const& pt);
    virtual ~AdsAnalyticsMetricsFilter() = default;

    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AdsAnalyticsMetricsFilter members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AdsAnalyticsFilterColumn> getField() const;
    void setField(std::shared_ptr<AdsAnalyticsFilterColumn> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AdsAnalyticsFilterOperator> getROperator() const;
    void setROperator(std::shared_ptr<AdsAnalyticsFilterOperator> value);

    /// <summary>
    /// List of values for filtering
    /// </summary>
    std::vector<double> getValues() const;
    void setValues(std::vector<double> value);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string toJsonString_internal(bool prettyJson = false);
    virtual void fromJsonString_internal(std::string const& jsonString);
    virtual boost::property_tree::ptree toPropertyTree_internal();
    virtual void fromPropertyTree_internal(boost::property_tree::ptree const& pt);


protected:
    std::shared_ptr<AdsAnalyticsFilterColumn> m_Field = std::make_shared<AdsAnalyticsFilterColumn>();
    std::shared_ptr<AdsAnalyticsFilterOperator> m_r_operator = std::make_shared<AdsAnalyticsFilterOperator>();
    std::vector<double> m_Values;
};

std::vector<AdsAnalyticsMetricsFilter> createAdsAnalyticsMetricsFilterVectorFromJsonString(const std::string& json);

}
}
}
}

#endif /* AdsAnalyticsMetricsFilter_H_ */
