#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.3.0
# Contact: blah@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_catalogs_feed
import ../models/model_catalogs_feeds_create_request
import ../models/model_catalogs_feeds_update_request
import ../models/model_catalogs_items
import ../models/model_catalogs_items_batch
import ../models/model_catalogs_items_batch_request
import ../models/model_catalogs_product_group
import ../models/model_catalogs_product_group_create_request
import ../models/model_catalogs_product_group_update_request
import ../models/model_error
import ../models/model_paginated
import ../models/model_object

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc catalogsProductGroupsCreate*(httpClient: HttpClient, catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest): (Option[object], Response) =
  ## Create product group
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/catalogs/product_groups", $(%catalogsProductGroupCreateRequest))
  constructResult[object](response)


proc catalogsProductGroupsDelete*(httpClient: HttpClient, productGroupId: string): Response =
  ## Delete product group
  httpClient.delete(basepath & fmt"/catalogs/product_groups/{product_group_id}")


proc catalogsProductGroupsList*(httpClient: HttpClient, feedId: string, bookmark: string, pageSize: int): (Option[Paginated], Response) =
  ## Get product groups list
  let query_for_api_call = encodeQuery([
    ("feed_id", $feedId), # Unique identifier of a feed
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & "/catalogs/product_groups" & "?" & query_for_api_call)
  constructResult[Paginated](response)


proc catalogsProductGroupsUpdate*(httpClient: HttpClient, productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest): (Option[CatalogsProductGroup], Response) =
  ## Update product group
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & fmt"/catalogs/product_groups/{product_group_id}", $(%catalogsProductGroupUpdateRequest))
  constructResult[CatalogsProductGroup](response)


proc feedProcessingResultsList*(httpClient: HttpClient, feedId: string, bookmark: string, pageSize: int): (Option[Paginated], Response) =
  ## List processing results for a given feed
  let query_for_api_call = encodeQuery([
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & fmt"/catalogs/feeds/{feed_id}/processing_results" & "?" & query_for_api_call)
  constructResult[Paginated](response)


proc feedsCreate*(httpClient: HttpClient, catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest): (Option[CatalogsFeed], Response) =
  ## Create feed
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/catalogs/feeds", $(%catalogsFeedsCreateRequest))
  constructResult[CatalogsFeed](response)


proc feedsDelete*(httpClient: HttpClient, feedId: string): Response =
  ## Delete feed
  httpClient.delete(basepath & fmt"/catalogs/feeds/{feed_id}")


proc feedsGet*(httpClient: HttpClient, feedId: string): (Option[CatalogsFeed], Response) =
  ## Get feed

  let response = httpClient.get(basepath & fmt"/catalogs/feeds/{feed_id}")
  constructResult[CatalogsFeed](response)


proc feedsList*(httpClient: HttpClient, bookmark: string, pageSize: int): (Option[Paginated], Response) =
  ## List feeds
  let query_for_api_call = encodeQuery([
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & "/catalogs/feeds" & "?" & query_for_api_call)
  constructResult[Paginated](response)


proc feedsUpdate*(httpClient: HttpClient, feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest): (Option[CatalogsFeed], Response) =
  ## Update feed
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & fmt"/catalogs/feeds/{feed_id}", $(%catalogsFeedsUpdateRequest))
  constructResult[CatalogsFeed](response)


proc itemsBatchGet*(httpClient: HttpClient, batchId: string): (Option[CatalogsItemsBatch], Response) =
  ## Get catalogs items batch

  let response = httpClient.get(basepath & fmt"/catalogs/items/batch/{batch_id}")
  constructResult[CatalogsItemsBatch](response)


proc itemsBatchPost*(httpClient: HttpClient, catalogsItemsBatchRequest: CatalogsItemsBatchRequest): (Option[CatalogsItemsBatch], Response) =
  ## Perform an operation on an item batch
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/catalogs/items/batch", $(%catalogsItemsBatchRequest))
  constructResult[CatalogsItemsBatch](response)


proc itemsGet*(httpClient: HttpClient, country: string, itemIds: seq[string], language: string): (Option[CatalogsItems], Response) =
  ## Get catalogs items
  let query_for_api_call = encodeQuery([
    ("country", $country), # Country for the Catalogs Items
    ("item_ids", $itemIds.join(",")), # Catalos Item ids
    ("language", $language), # Language for the Catalogs Items
  ])

  let response = httpClient.get(basepath & "/catalogs/items" & "?" & query_for_api_call)
  constructResult[CatalogsItems](response)

