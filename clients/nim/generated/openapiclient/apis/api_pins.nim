#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.3.0
# Contact: blah@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_analytics_metrics_response
import ../models/model_error
import ../models/model_pin

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc pinsAnalytics*(httpClient: HttpClient, pinId: string, startDate: string, endDate: string, metricTypes: seq[MetricTypes], appTypes: string, splitField: string, adAccountId: string): (Option[Table[string, AnalyticsMetricsResponse]], Response) =
  ## Get Pin analytics
  let query_for_api_call = encodeQuery([
    ("start_date", $startDate), # Metric report start date (UTC). Format: YYYY-MM-DD
    ("end_date", $endDate), # Metric report end date (UTC). Format: YYYY-MM-DD
    ("app_types", $appTypes), # Apps or devices to get data for, default is all.
    ("metric_types", $metricTypes.join(",")), # Pin metric types to get data for, default is all.
    ("split_field", $splitField), # How to split the data into groups. Not including this param means data won't be split.
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.get(basepath & fmt"/pins/{pin_id}/analytics" & "?" & query_for_api_call)
  constructResult[Table[string, AnalyticsMetricsResponse]](response)


proc pinsCreate*(httpClient: HttpClient, pin: Pin): (Option[Pin], Response) =
  ## Create Pin
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/pins", $(%pin))
  constructResult[Pin](response)


proc pinsDelete*(httpClient: HttpClient, pinId: string): Response =
  ## Delete Pin
  httpClient.delete(basepath & fmt"/pins/{pin_id}")


proc pinsGet*(httpClient: HttpClient, pinId: string, adAccountId: string): (Option[Pin], Response) =
  ## Get Pin
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.get(basepath & fmt"/pins/{pin_id}" & "?" & query_for_api_call)
  constructResult[Pin](response)

