// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ActionType,
    ActionTypeFromJSON,
    ActionTypeToJSON,
    AdGroupCommonOptimizationGoalMetadata,
    AdGroupCommonOptimizationGoalMetadataFromJSON,
    AdGroupCommonOptimizationGoalMetadataToJSON,
    AdGroupCommonTrackingUrls,
    AdGroupCommonTrackingUrlsFromJSON,
    AdGroupCommonTrackingUrlsToJSON,
    BudgetType,
    BudgetTypeFromJSON,
    BudgetTypeToJSON,
    EntityStatus,
    EntityStatusFromJSON,
    EntityStatusToJSON,
    PacingDeliveryType,
    PacingDeliveryTypeFromJSON,
    PacingDeliveryTypeToJSON,
    PlacementGroupType,
    PlacementGroupTypeFromJSON,
    PlacementGroupTypeToJSON,
    TargetingSpec,
    TargetingSpecFromJSON,
    TargetingSpecToJSON,
} from './';

/**
 * 
 * @export
 * @interface AdGroupCommon
 */
export interface AdGroupCommon  {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupCommon
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupCommon
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupCommon
     */
    budgetInMicroCurrency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupCommon
     */
    bidInMicroCurrency?: number;
    /**
     * 
     * @type {AdGroupCommonOptimizationGoalMetadata}
     * @memberof AdGroupCommon
     */
    optimizationGoalMetadata?: AdGroupCommonOptimizationGoalMetadata;
    /**
     * 
     * @type {BudgetType}
     * @memberof AdGroupCommon
     */
    budgetType?: BudgetType;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupCommon
     */
    startTime?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupCommon
     */
    endTime?: number;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupCommon
     */
    targetingSpec?: TargetingSpec;
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"https://developers.pinterest.com/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupCommon
     */
    lifetimeFrequencyCap?: number;
    /**
     * 
     * @type {AdGroupCommonTrackingUrls}
     * @memberof AdGroupCommon
     */
    trackingUrls?: AdGroupCommonTrackingUrls;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupCommon
     */
    autoTargetingEnabled?: boolean;
    /**
     * <a href=\"https://developers.pinterest.com/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupCommon
     */
    placementGroup?: PlacementGroupType;
    /**
     * 
     * @type {PacingDeliveryType}
     * @memberof AdGroupCommon
     */
    pacingDeliveryType?: PacingDeliveryType;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupCommon
     */
    campaignId?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupCommon
     */
    billableEvent?: ActionType;
    /**
     * Bid strategy type
     * @type {string}
     * @memberof AdGroupCommon
     */
    bidStrategyType?: AdGroupCommonBidStrategyTypeEnum;
}

export function AdGroupCommonFromJSON(json: any): AdGroupCommon {
    return {
        'name': !exists(json, 'name') ? undefined : json['name'],
        'status': !exists(json, 'status') ? undefined : EntityStatusFromJSON(json['status']),
        'budgetInMicroCurrency': !exists(json, 'budget_in_micro_currency') ? undefined : json['budget_in_micro_currency'],
        'bidInMicroCurrency': !exists(json, 'bid_in_micro_currency') ? undefined : json['bid_in_micro_currency'],
        'optimizationGoalMetadata': !exists(json, 'optimization_goal_metadata') ? undefined : AdGroupCommonOptimizationGoalMetadataFromJSON(json['optimization_goal_metadata']),
        'budgetType': !exists(json, 'budget_type') ? undefined : BudgetTypeFromJSON(json['budget_type']),
        'startTime': !exists(json, 'start_time') ? undefined : json['start_time'],
        'endTime': !exists(json, 'end_time') ? undefined : json['end_time'],
        'targetingSpec': !exists(json, 'targeting_spec') ? undefined : TargetingSpecFromJSON(json['targeting_spec']),
        'lifetimeFrequencyCap': !exists(json, 'lifetime_frequency_cap') ? undefined : json['lifetime_frequency_cap'],
        'trackingUrls': !exists(json, 'tracking_urls') ? undefined : AdGroupCommonTrackingUrlsFromJSON(json['tracking_urls']),
        'autoTargetingEnabled': !exists(json, 'auto_targeting_enabled') ? undefined : json['auto_targeting_enabled'],
        'placementGroup': !exists(json, 'placement_group') ? undefined : PlacementGroupTypeFromJSON(json['placement_group']),
        'pacingDeliveryType': !exists(json, 'pacing_delivery_type') ? undefined : PacingDeliveryTypeFromJSON(json['pacing_delivery_type']),
        'campaignId': !exists(json, 'campaign_id') ? undefined : json['campaign_id'],
        'billableEvent': !exists(json, 'billable_event') ? undefined : ActionTypeFromJSON(json['billable_event']),
        'bidStrategyType': !exists(json, 'bid_strategy_type') ? undefined : json['bid_strategy_type'],
    };
}

export function AdGroupCommonToJSON(value?: AdGroupCommon): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'status': EntityStatusToJSON(value.status),
        'budget_in_micro_currency': value.budgetInMicroCurrency,
        'bid_in_micro_currency': value.bidInMicroCurrency,
        'optimization_goal_metadata': AdGroupCommonOptimizationGoalMetadataToJSON(value.optimizationGoalMetadata),
        'budget_type': BudgetTypeToJSON(value.budgetType),
        'start_time': value.startTime,
        'end_time': value.endTime,
        'targeting_spec': TargetingSpecToJSON(value.targetingSpec),
        'lifetime_frequency_cap': value.lifetimeFrequencyCap,
        'tracking_urls': AdGroupCommonTrackingUrlsToJSON(value.trackingUrls),
        'auto_targeting_enabled': value.autoTargetingEnabled,
        'placement_group': PlacementGroupTypeToJSON(value.placementGroup),
        'pacing_delivery_type': PacingDeliveryTypeToJSON(value.pacingDeliveryType),
        'campaign_id': value.campaignId,
        'billable_event': ActionTypeToJSON(value.billableEvent),
        'bid_strategy_type': value.bidStrategyType,
    };
}

/**
* @export
* @enum {string}
*/
export enum AdGroupCommonBidStrategyTypeEnum {
    AutomaticBid = 'AUTOMATIC_BID',
    MaxBid = 'MAX_BID',
    TargetAvg = 'TARGET_AVG',
    Null = 'null'
}


