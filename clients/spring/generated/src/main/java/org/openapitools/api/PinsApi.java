/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AnalyticsMetricsResponse;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Error;
import java.time.LocalDate;
import org.openapitools.model.Pin;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-01T12:06:55.503075Z[Etc/UTC]")
@Validated
@Tag(name = "pins", description = "the pins API")
public interface PinsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /pins/{pin_id}/analytics : Get Pin analytics
     * Get analytics for a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\&quot;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
     *
     * @param pinId Unique identifier of a Pin. (required)
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD (required)
     * @param metricTypes Pin metric types to get data for, default is all. (required)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param splitField How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return response (status code 200)
     *         or Not authorized to access board or Pin. (status code 403)
     *         or Pin not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "pinsAnalytics",
        summary = "Get Pin analytics",
        tags = { "pins" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  AnalyticsMetricsResponse.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access board or Pin.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Pin not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pins/{pin_id}/analytics",
        produces = { "application/json" }
    )
    default ResponseEntity<Map<String, AnalyticsMetricsResponse>> pinsAnalytics(
        @Parameter(name = "pin_id", description = "Unique identifier of a Pin.", required = true, schema = @Schema(description = "")) @PathVariable("pin_id") String pinId,
        @NotNull @Parameter(name = "start_date", description = "Metric report start date (UTC). Format: YYYY-MM-DD", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "start_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "end_date", description = "Metric report end date (UTC). Format: YYYY-MM-DD", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "end_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @NotNull @Parameter(name = "metric_types", description = "Pin metric types to get data for, default is all.", required = true, schema = @Schema(description = "", allowableValues = { "IMPRESSION", "SAVE", "PIN_CLICK", "OUTBOUND_CLICK", "VIDEO_MRC_VIEW", "VIDEO_AVG_WATCH_TIME", "VIDEO_V50_WATCH_TIME", "QUARTILE_95_PERCENT_VIEW" })) @Valid @RequestParam(value = "metric_types", required = true) List<String> metricTypes,
        @Parameter(name = "app_types", description = "Apps or devices to get data for, default is all.", schema = @Schema(description = "", allowableValues = { "ALL", "MOBILE", "TABLET", "WEB" }, defaultValue = "ALL")) @Valid @RequestParam(value = "app_types", required = false, defaultValue = "ALL") String appTypes,
        @Parameter(name = "split_field", description = "How to split the data into groups. Not including this param means data won't be split.", schema = @Schema(description = "", allowableValues = { "NO_SPLIT", "APP_TYPE" }, defaultValue = "NO_SPLIT")) @Valid @RequestParam(value = "split_field", required = false, defaultValue = "NO_SPLIT") String splitField,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", schema = @Schema(description = "")) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /pins : Create Pin
     * Create a Pin on a board or board section owned by the \&quot;operation user_account\&quot;.  Note: If the current \&quot;operation user_account\&quot; (defined by the access token) has access to another user&#39;s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account&#39;s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id&#x3D;12345&amp;...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called &#39;curated content&#39;, please use our &lt;a href&#x3D;&#39;/docs/add-ons/save-button&#39;&gt;Save button&lt;/a&gt; instead. For more tips on creating fresh content for Pinterest, review our &lt;a href&#x3D;&#39;/docs/solutions/content-apps&#39;&gt;Content App Solutions Guide&lt;/a&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/solutions/content-apps/#creatingvideopins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @param pin Create a new Pin. (required)
     * @return Successful pin creation. (status code 201)
     *         or Invalid Pin parameters response (status code 400)
     *         or The Pin&#39;s image is too small, too large or is broken (status code 403)
     *         or Board or section not found (status code 404)
     *         or This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. (status code 429)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "pinsCreate",
        summary = "Create Pin",
        tags = { "pins" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful pin creation.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pin.class))),
            @ApiResponse(responseCode = "400", description = "Invalid Pin parameters response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "The Pin's image is too small, too large or is broken", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Board or section not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "429", description = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write", "pins:read", "pins:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pins",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Pin> pinsCreate(
        @Parameter(name = "Pin", description = "Create a new Pin.", required = true, schema = @Schema(description = "")) @Valid @RequestBody Pin pin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"board_owner\" : \"{}\", \"media_source\" : \"{}\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"id\" : \"813744226420795884\", \"media\" : \"{}\", \"title\" : \"title\", \"board_section_id\" : \"board_section_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /pins/{pin_id} : Delete Pin
     * Delete a Pins owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param pinId Unique identifier of a Pin. (required)
     * @return Successfully deleted Pin (status code 204)
     *         or Not authorized to access board or Pin. (status code 403)
     *         or Pin not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "pinsDelete",
        summary = "Delete Pin",
        tags = { "pins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully deleted Pin"),
            @ApiResponse(responseCode = "403", description = "Not authorized to access board or Pin.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Pin not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write", "pins:read", "pins:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pins/{pin_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> pinsDelete(
        @Parameter(name = "pin_id", description = "Unique identifier of a Pin.", required = true, schema = @Schema(description = "")) @PathVariable("pin_id") String pinId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pins/{pin_id} : Get Pin
     * Get a Pin owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
     *
     * @param pinId Unique identifier of a Pin. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return response (status code 200)
     *         or Not authorized to access board or Pin. (status code 403)
     *         or Pin not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "pinsGet",
        summary = "Get Pin",
        tags = { "pins" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Pin.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access board or Pin.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Pin not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pins/{pin_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Pin> pinsGet(
        @Parameter(name = "pin_id", description = "Unique identifier of a Pin.", required = true, schema = @Schema(description = "")) @PathVariable("pin_id") String pinId,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", schema = @Schema(description = "")) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"board_owner\" : \"{}\", \"media_source\" : \"{}\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"id\" : \"813744226420795884\", \"media\" : \"{}\", \"title\" : \"title\", \"board_section_id\" : \"board_section_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
