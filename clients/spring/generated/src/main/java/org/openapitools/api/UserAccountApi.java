/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import org.openapitools.model.AnalyticsMetricsResponse;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Error;
import java.time.LocalDate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-07T10:48:11.625089Z[Etc/UTC]")
@Validated
@Tag(name = "user_account", description = "the user_account API")
public interface UserAccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user_account/analytics : Get user account analytics
     * Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
     *
     * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD (required)
     * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD (required)
     * @param fromClaimedContent Filter on Pins that match your claimed domain. (optional, default to BOTH)
     * @param pinFormat Pin formats to get data for, default is all. (optional, default to ALL)
     * @param appTypes Apps or devices to get data for, default is all. (optional, default to ALL)
     * @param metricTypes Metric types to get data for, default is all.  (optional)
     * @param splitField How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Not authorized to access the user account analytics. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userAccountAnalytics",
        summary = "Get user account analytics",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  AnalyticsMetricsResponse.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account analytics.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account/analytics",
        produces = { "application/json" }
    )
    default ResponseEntity<Map<String, AnalyticsMetricsResponse>> userAccountAnalytics(
        @NotNull @Parameter(name = "start_date", description = "Metric report start date (UTC). Format: YYYY-MM-DD", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "start_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @NotNull @Parameter(name = "end_date", description = "Metric report end date (UTC). Format: YYYY-MM-DD", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "end_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "from_claimed_content", description = "Filter on Pins that match your claimed domain.", schema = @Schema(description = "", allowableValues = { "OTHER", "CLAIMED", "BOTH" }, defaultValue = "BOTH")) @Valid @RequestParam(value = "from_claimed_content", required = false, defaultValue = "BOTH") String fromClaimedContent,
        @Parameter(name = "pin_format", description = "Pin formats to get data for, default is all.", schema = @Schema(description = "", allowableValues = { "ALL", "PRODUCT", "REGULAR", "VIDEO" }, defaultValue = "ALL")) @Valid @RequestParam(value = "pin_format", required = false, defaultValue = "ALL") String pinFormat,
        @Parameter(name = "app_types", description = "Apps or devices to get data for, default is all.", schema = @Schema(description = "", allowableValues = { "ALL", "MOBILE", "TABLET", "WEB" }, defaultValue = "ALL")) @Valid @RequestParam(value = "app_types", required = false, defaultValue = "ALL") String appTypes,
        @Parameter(name = "metric_types", description = "Metric types to get data for, default is all. ", schema = @Schema(description = "", allowableValues = { "ENGAGEMENT", "ENGAGEMENT_RATE", "IMPRESSION", "OUTBOUND_CLICK", "OUTBOUND_CLICK_RATE", "PIN_CLICK", "PIN_CLICK_RATE", "SAVE", "SAVE_RATE" })) @Valid @RequestParam(value = "metric_types", required = false) List<String> metricTypes,
        @Parameter(name = "split_field", description = "How to split the data into groups. Not including this param means data won't be split.", schema = @Schema(description = "", allowableValues = { "NO_SPLIT", "APP_TYPE", "OWNED_CONTENT", "PIN_FORMAT" }, defaultValue = "NO_SPLIT")) @Valid @RequestParam(value = "split_field", required = false, defaultValue = "NO_SPLIT") String splitField,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", schema = @Schema(description = "")) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_account : Get user account
     * Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
     *
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return response (status code 200)
     *         or Not authorized to access the user account. (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "userAccountGet",
        summary = "Get user account",
        tags = { "user_account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Account.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access the user account.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "user_accounts:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user_account",
        produces = { "application/json" }
    )
    default ResponseEntity<Account> userAccountGet(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", schema = @Schema(description = "")) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"account_type\" : \"PINNER\", \"profile_image\" : \"profile_image\", \"website_url\" : \"website_url\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
