/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Board;
import org.openapitools.model.BoardSection;
import org.openapitools.model.BoardUpdate;
import org.openapitools.model.Error;
import org.openapitools.model.Paginated;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-01T12:06:55.503075Z[Etc/UTC]")
@Validated
@Tag(name = "boards", description = "the boards API")
public interface BoardsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /boards/{board_id}/sections : Create board section
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @return response (status code 201)
     *         or Invalid board section parameters. (status code 400)
     *         or Not authorized to create board sections. (status code 403)
     *         or Could not get exclusive access to the board to create a new section. (status code 409)
     *         or Could not create a new board section. (status code 500)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardSectionsCreate",
        summary = "Create board section",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "201", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  BoardSection.class))),
            @ApiResponse(responseCode = "400", description = "Invalid board section parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to create board sections.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Could not get exclusive access to the board to create a new section.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Could not create a new board section.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/boards/{board_id}/sections",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardSection> boardSectionsCreate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Parameter(name = "BoardSection", description = "Create a board section.", required = true, schema = @Schema(description = "")) @Valid @RequestBody BoardSection boardSection
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Salads\", \"id\" : \"549755885175\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /boards/{board_id}/sections/{section_id} : Delete board section
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @return Board section deleted successfully (status code 204)
     *         or Not authorized to delete board section. (status code 403)
     *         or Board section not found. (status code 404)
     *         or Board section conflict. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardSectionsDelete",
        summary = "Delete board section",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Board section deleted successfully"),
            @ApiResponse(responseCode = "403", description = "Not authorized to delete board section.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Board section not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Board section conflict.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/boards/{board_id}/sections/{section_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> boardSectionsDelete(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "section_id", description = "Unique identifier of a board section.", required = true, schema = @Schema(description = "")) @PathVariable("section_id") String sectionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /boards/{board_id}/sections : List board sections
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardSectionsList",
        summary = "List board sections",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boards/{board_id}/sections",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> boardSectionsList(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /boards/{board_id}/sections/{section_id}/pins : List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return response (status code 200)
     *         or Not authorized to access Pins on board section. (status code 403)
     *         or Board or section not found. (status code 404)
     *         or Board section conflict. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardSectionsListPins",
        summary = "List Pins on board section",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access Pins on board section.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Board or section not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Board section conflict.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boards/{board_id}/sections/{section_id}/pins",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> boardSectionsListPins(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "section_id", description = "Unique identifier of a board section.", required = true, schema = @Schema(description = "")) @PathVariable("section_id") String sectionId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /boards/{board_id}/sections/{section_id} : Update board section
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @return response (status code 200)
     *         or Invalid board section parameters. (status code 400)
     *         or Not authorized to update board section. (status code 403)
     *         or Board section conflict. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardSectionsUpdate",
        summary = "Update board section",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  BoardSection.class))),
            @ApiResponse(responseCode = "400", description = "Invalid board section parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to update board section.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Board section conflict.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/boards/{board_id}/sections/{section_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardSection> boardSectionsUpdate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "section_id", description = "Unique identifier of a board section.", required = true, schema = @Schema(description = "")) @PathVariable("section_id") String sectionId,
        @Parameter(name = "BoardSection", description = "Update a board section.", required = true, schema = @Schema(description = "")) @Valid @RequestBody BoardSection boardSection
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Salads\", \"id\" : \"549755885175\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /boards : Create board
     * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param board Create a board using a single board json object. (required)
     * @return response (status code 201)
     *         or The board name is invalid or duplicated. (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsCreate",
        summary = "Create board",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "201", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Board.class))),
            @ApiResponse(responseCode = "400", description = "The board name is invalid or duplicated.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/boards",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Board> boardsCreate(
        @Parameter(name = "Board", description = "Create a board using a single board json object.", required = true, schema = @Schema(description = "")) @Valid @RequestBody Board board
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"{}\", \"name\" : \"Summer Recipes\", \"description\" : \"My favorite summer recipes\", \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /boards/{board_id} : Delete board
     * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @return Board deleted successfully (status code 204)
     *         or Not authorized to delete the board. (status code 403)
     *         or Board not found. (status code 404)
     *         or Could not get exclusive access to delete the board. (status code 409)
     *         or This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. (status code 429)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsDelete",
        summary = "Delete board",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Board deleted successfully"),
            @ApiResponse(responseCode = "403", description = "Not authorized to delete the board.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Board not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Could not get exclusive access to delete the board.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "429", description = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/boards/{board_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> boardsDelete(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /boards/{board_id} : Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @return response (status code 200)
     *         or Board not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsGet",
        summary = "Get board",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Board.class))),
            @ApiResponse(responseCode = "404", description = "Board not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boards/{board_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Board> boardsGet(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"{}\", \"name\" : \"Summer Recipes\", \"description\" : \"My favorite summer recipes\", \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /boards : List boards
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @return response (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsList",
        summary = "List boards",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boards",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> boardsList(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "privacy", description = "Privacy setting for a board.", schema = @Schema(description = "", allowableValues = { "PUBLIC", "PROTECTED", "SECRET" })) @Valid @RequestParam(value = "privacy", required = false) String privacy
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /boards/{board_id}/pins : List Pins on board
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return response (status code 200)
     *         or Board not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsListPins",
        summary = "List Pins on board",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "404", description = "Board not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boards/{board_id}/pins",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> boardsListPins(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /boards/{board_id} : Update board
     * Update a board owned by the \&quot;operating user_account\&quot;.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @return response (status code 200)
     *         or Invalid board parameters. (status code 400)
     *         or Not authorized to update the board. (status code 403)
     *         or This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window. (status code 429)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "boardsUpdate",
        summary = "Update board",
        tags = { "boards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Board.class))),
            @ApiResponse(responseCode = "400", description = "Invalid board parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to update the board.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "429", description = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "boards:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/boards/{board_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Board> boardsUpdate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "board_id", description = "Unique identifier of a board.", required = true, schema = @Schema(description = "")) @PathVariable("board_id") String boardId,
        @Parameter(name = "BoardUpdate", description = "Update a board.", required = true, schema = @Schema(description = "")) @Valid @RequestBody BoardUpdate boardUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"{}\", \"name\" : \"Summer Recipes\", \"description\" : \"My favorite summer recipes\", \"privacy\" : \"PUBLIC\", \"id\" : \"549755885175\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
