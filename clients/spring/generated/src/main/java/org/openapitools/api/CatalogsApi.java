/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CatalogsFeed;
import org.openapitools.model.CatalogsItemValidationIssue;
import org.openapitools.model.CatalogsItems;
import org.openapitools.model.CatalogsItemsBatch;
import org.openapitools.model.CatalogsItemsFilters;
import org.openapitools.model.CatalogsList200Response;
import org.openapitools.model.CatalogsListProductsByFilterRequest;
import org.openapitools.model.CatalogsProductGroupPinsList200Response;
import org.openapitools.model.CatalogsProductGroupProductCounts;
import org.openapitools.model.CatalogsProductGroupsCreate201Response;
import org.openapitools.model.CatalogsProductGroupsCreateRequest;
import org.openapitools.model.CatalogsProductGroupsList200Response;
import org.openapitools.model.CatalogsProductGroupsUpdateRequest;
import org.openapitools.model.Error;
import org.openapitools.model.FeedProcessingResultsList200Response;
import org.openapitools.model.FeedsCreateRequest;
import org.openapitools.model.FeedsList200Response;
import org.openapitools.model.FeedsUpdateRequest;
import org.openapitools.model.ItemsBatchPostRequest;
import org.openapitools.model.ItemsIssuesList200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-14T23:15:39.458648915Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "catalogs", description = "Manage information about shopping product catalogs and items.")
public interface CatalogsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /catalogs : List catalogs
     * Fetch catalogs owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsList",
        summary = "List catalogs",
        description = "Fetch catalogs owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsList200Response> catalogsList(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"created_at\" : \"2022-03-14T15:15:22Z\", \"id\" : \"864344156814050986\" }, { \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"created_at\" : \"2022-03-14T15:15:22Z\", \"id\" : \"864344156814050986\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/product_groups/{product_group_id}/products : List products for a Product Group
     * Get a list of product pins for a given Catalogs Product Group Id owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Catalogs product group not found. (status code 404)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupPinsList",
        summary = "List products for a Product Group",
        description = "Get a list of product pins for a given Catalogs Product Group Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupPinsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Catalogs product group not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "catalogs:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/product_groups/{product_group_id}/products",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupPinsList200Response> catalogsProductGroupPinsList(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, in = ParameterIn.PATH) @PathVariable("product_group_id") String productGroupId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"metadata\" : { \"item_id\" : \"DS0294-L\", \"price\" : 24.99, \"item_group_id\" : \"DS0294\", \"currency\" : \"USD\", \"sale_price\" : 14.99 }, \"pin\" : { \"note\" : \"note\", \"board_owner\" : { \"username\" : \"username\" }, \"media_source\" : \"{}\", \"pin_metrics\" : { \"pin_metrics\" : [ { \"90d\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3 }, \"all_time\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3, \"reaction\" : 10, \"comment\" : 2 } }, null ] }, \"is_owner\" : true, \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"has_been_promoted\" : true, \"media\" : { \"media_type\" : \"media_type\" }, \"title\" : \"title\", \"board_section_id\" : \"board_section_id\", \"dominant_color\" : \"#6E7874\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"creative_type\" : \"creative_type\", \"parent_pin_id\" : \"parent_pin_id\", \"id\" : \"813744226420795884\", \"is_standard\" : true } }, { \"metadata\" : { \"item_id\" : \"DS0294-L\", \"price\" : 24.99, \"item_group_id\" : \"DS0294\", \"currency\" : \"USD\", \"sale_price\" : 14.99 }, \"pin\" : { \"note\" : \"note\", \"board_owner\" : { \"username\" : \"username\" }, \"media_source\" : \"{}\", \"pin_metrics\" : { \"pin_metrics\" : [ { \"90d\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3 }, \"all_time\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3, \"reaction\" : 10, \"comment\" : 2 } }, null ] }, \"is_owner\" : true, \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"has_been_promoted\" : true, \"media\" : { \"media_type\" : \"media_type\" }, \"title\" : \"title\", \"board_section_id\" : \"board_section_id\", \"dominant_color\" : \"#6E7874\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"creative_type\" : \"creative_type\", \"parent_pin_id\" : \"parent_pin_id\", \"id\" : \"813744226420795884\", \"is_standard\" : true } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catalogs/product_groups : Create product group
     * Create product group to use in Catalogs owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param catalogsProductGroupsCreateRequest Request object used to created a catalogs product group. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 201)
     *         or Invalid body. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for catalog product group mutations yet. (status code 403)
     *         or Conflict. Can&#39;t create this catalogs product group with this value. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsCreate",
        summary = "Create product group",
        description = "Create product group to use in Catalogs owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupsCreate201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid body.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for catalog product group mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't create this catalogs product group with this value.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/product_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupsCreate201Response> catalogsProductGroupsCreate(
        @Parameter(name = "CatalogsProductGroupsCreateRequest", description = "Request object used to created a catalogs product group.", required = true) @Valid @RequestBody CatalogsProductGroupsCreateRequest catalogsProductGroupsCreateRequest,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : 1622742155000, \"catalog_type\" : \"RETAIL\", \"name\" : \"Most Popular\", \"description\" : \"description\", \"created_at\" : 1621350033000, \"id\" : \"443727193917\", \"filters\" : { \"any_of\" : [ { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } }, { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } } ] }, \"type\" : \"TOP_SELLERS\", \"is_featured\" : true, \"feed_id\" : \"2680059592705\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /catalogs/product_groups/{product_group_id} : Delete product group
     * Delete a product group owned by the \&quot;operation user_account\&quot; from being in use in Catalogs. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Catalogs Product Group deleted successfully. (status code 204)
     *         or Invalid catalogs product group id parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for catalog product group mutations yet. (status code 403)
     *         or Catalogs product group not found. (status code 404)
     *         or Conflict. Can&#39;t delete this catalogs product group. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsDelete",
        summary = "Delete product group",
        description = "Delete a product group owned by the \"operation user_account\" from being in use in Catalogs. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Catalogs Product Group deleted successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid catalogs product group id parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for catalog product group mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Catalogs product group not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't delete this catalogs product group.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/catalogs/product_groups/{product_group_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> catalogsProductGroupsDelete(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, in = ParameterIn.PATH) @PathVariable("product_group_id") String productGroupId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/product_groups/{product_group_id} : Get product group
     * Get a singe product group for a given Catalogs Product Group Id owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid catalogs product group id parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for catalog product group mutations yet. (status code 403)
     *         or Catalogs product group not found. (status code 404)
     *         or Conflict. Can&#39;t get a catalogs product group without an existing catalog. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsGet",
        summary = "Get product group",
        description = "Get a singe product group for a given Catalogs Product Group Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupsCreate201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid catalogs product group id parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for catalog product group mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Catalogs product group not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't get a catalogs product group without an existing catalog.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/product_groups/{product_group_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupsCreate201Response> catalogsProductGroupsGet(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, in = ParameterIn.PATH) @PathVariable("product_group_id") String productGroupId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : 1622742155000, \"catalog_type\" : \"RETAIL\", \"name\" : \"Most Popular\", \"description\" : \"description\", \"created_at\" : 1621350033000, \"id\" : \"443727193917\", \"filters\" : { \"any_of\" : [ { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } }, { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } } ] }, \"type\" : \"TOP_SELLERS\", \"is_featured\" : true, \"feed_id\" : \"2680059592705\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/product_groups : List product groups
     * Get a list of product groups for a given Catalogs Feed Id owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param feedId Filter entities for a given feed_id. If not given, all feeds are considered. (optional)
     * @param catalogId Filter entities for a given catalog_id. If not given, all catalogs are considered. (optional)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid feed parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for catalog product group mutations yet. (status code 403)
     *         or Data feed not found. (status code 404)
     *         or Conflict. Can&#39;t create this catalogs product group with this value. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsList",
        summary = "List product groups",
        description = "Get a list of product groups for a given Catalogs Feed Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for catalog product group mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't create this catalogs product group with this value.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/product_groups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupsList200Response> catalogsProductGroupsList(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Filter entities for a given feed_id. If not given, all feeds are considered.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "feed_id", required = false) String feedId,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "catalog_id", description = "Filter entities for a given catalog_id. If not given, all catalogs are considered.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "catalog_id", required = false) String catalogId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"updated_at\" : 1622742155000, \"catalog_type\" : \"RETAIL\", \"name\" : \"Most Popular\", \"description\" : \"description\", \"created_at\" : 1621350033000, \"id\" : \"443727193917\", \"filters\" : { \"any_of\" : [ { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } }, { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } } ] }, \"type\" : \"TOP_SELLERS\", \"is_featured\" : true, \"feed_id\" : \"2680059592705\" }, { \"updated_at\" : 1622742155000, \"catalog_type\" : \"RETAIL\", \"name\" : \"Most Popular\", \"description\" : \"description\", \"created_at\" : 1621350033000, \"id\" : \"443727193917\", \"filters\" : { \"any_of\" : [ { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } }, { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } } ] }, \"type\" : \"TOP_SELLERS\", \"is_featured\" : true, \"feed_id\" : \"2680059592705\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/product_groups/{product_group_id}/product_counts : Get product counts for a Product Group
     * Get a product counts for a given Catalogs Product Group owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Product Group Not Found. (status code 404)
     *         or Can&#39;t access this feature without an existing catalog. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsProductCountsGet",
        summary = "Get product counts for a Product Group",
        description = "Get a product counts for a given Catalogs Product Group owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupProductCounts.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product Group Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Can't access this feature without an existing catalog.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/product_groups/{product_group_id}/product_counts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupProductCounts> catalogsProductGroupsProductCountsGet(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, in = ParameterIn.PATH) @PathVariable("product_group_id") String productGroupId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"out_of_stock\" : 0.6027456183070403, \"total\" : 0.5962133916683182, \"in_stock\" : 0.08008281904610115, \"preorder\" : 0.14658129805029452 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /catalogs/product_groups/{product_group_id} : Update product group
     * Update product group owned by the \&quot;operation user_account\&quot; to use in Catalogs. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupsUpdateRequest Request object used to Update a catalogs product group. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for catalog product group mutations yet. (status code 403)
     *         or Catalogs product group not found. (status code 404)
     *         or Conflict. Can&#39;t update this catalogs product group to this value. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsUpdate",
        summary = "Update product group",
        description = "Update product group owned by the \"operation user_account\" to use in Catalogs. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupsCreate201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for catalog product group mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Catalogs product group not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't update this catalogs product group to this value.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/catalogs/product_groups/{product_group_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupsCreate201Response> catalogsProductGroupsUpdate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, in = ParameterIn.PATH) @PathVariable("product_group_id") String productGroupId,
        @Parameter(name = "CatalogsProductGroupsUpdateRequest", description = "Request object used to Update a catalogs product group.", required = true) @Valid @RequestBody CatalogsProductGroupsUpdateRequest catalogsProductGroupsUpdateRequest,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : 1622742155000, \"catalog_type\" : \"RETAIL\", \"name\" : \"Most Popular\", \"description\" : \"description\", \"created_at\" : 1621350033000, \"id\" : \"443727193917\", \"filters\" : { \"any_of\" : [ { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } }, { \"MIN_PRICE\" : { \"inclusion\" : true, \"negated\" : false, \"values\" : 0.08008281904610115 } } ] }, \"type\" : \"TOP_SELLERS\", \"is_featured\" : true, \"feed_id\" : \"2680059592705\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/feeds/{feed_id}/processing_results : List processing results for a given feed
     * Fetch a feed processing results owned by the \&quot;operation user_account\&quot;. Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Feed not found. (status code 404)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "feedProcessingResultsList",
        summary = "List processing results for a given feed",
        description = "Fetch a feed processing results owned by the \"operation user_account\". Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeedProcessingResultsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Feed not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/feeds/{feed_id}/processing_results",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FeedProcessingResultsList200Response> feedProcessingResultsList(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, in = ParameterIn.PATH) @PathVariable("feed_id") String feedId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"updated_at\" : \"2022-03-14T15:16:34Z\", \"product_counts\" : { \"ingested\" : 4, \"original\" : 1 }, \"ingestion_details\" : { \"warnings\" : { \"ADDITIONAL_IMAGE_FILE_NOT_FOUND\" : 1, \"HOTEL_PRICE_HEADER_IS_PRESENT\" : 7, \"ADDITIONAL_IMAGE_INVALID_FILE\" : 6, \"ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR\" : 7, \"ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE\" : 1, \"ADDITIONAL_IMAGE_MALFORMED_URL\" : 1 }, \"errors\" : { \"LINE_LEVEL_INTERNAL_ERROR\" : 0, \"ACCOUNT_FLAGGED\" : 1, \"IMAGE_MALFORMED_URL\" : 2, \"IMAGE_LEVEL_INTERNAL_ERROR\" : 5, \"IMAGE_FILE_NOT_FOUND\" : 7, \"IMAGE_FILE_NOT_ACCESSIBLE\" : 5, \"IMAGE_INVALID_FILE\" : 9, \"LARGE_PRODUCT_COUNT_DECREASE\" : 6 }, \"info\" : { \"PREORDER\" : 4, \"OUT_OF_STOCK\" : 2, \"IN_STOCK\" : 3 } }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"id\" : \"id\", \"validation_details\" : { \"warnings\" : { \"AD_LINK_FORMAT_WARNING\" : 4, \"UTM_SOURCE_AUTO_CORRECTED\" : 2, \"ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG\" : 0, \"IMAGE_LINK_WARNING\" : 1, \"INCONSISTENT_CURRENCY_VALUES\" : 0, \"UPDATED_TIME_INVALID\" : 8, \"OPTIONAL_PRODUCT_CATEGORY_MISSING\" : 3, \"MULTIPACK_INVALID\" : 8, \"ANDROID_DEEP_LINK_INVALID\" : 3, \"DESCRIPTION_LENGTH_TOO_LONG\" : 7, \"SHIPPING_HEIGHT_INVALID\" : 4, \"TITLE_LENGTH_TOO_LONG\" : 4, \"SALE_DATE_INVALID\" : 1, \"DUPLICATE_HEADERS\" : 4, \"SALES_PRICE_TOO_LOW\" : 0, \"SHIPPING_WEIGHT_INVALID\" : 4, \"GTIN_INVALID\" : 4, \"PRODUCT_TYPE_LENGTH_TOO_LONG\" : 5, \"COUNTRY_DOES_NOT_MAP_TO_CURRENCY\" : 3, \"SIZE_SYSTEM_INVALID\" : 0, \"SHIPPING_INVALID\" : 8, \"CUSTOM_LABEL_LENGTH_TOO_LONG\" : 0, \"INDEXED_PRODUCT_COUNT_LARGE_DELTA\" : 7, \"SHIPPING_WIDTH_INVALID\" : 7, \"ADWORDS_FORMAT_WARNING\" : 6, \"AD_LINK_SAME_AS_LINK\" : 1, \"OPTIONAL_CONDITION_INVALID\" : 7, \"LINK_FORMAT_WARNING\" : 7, \"SIZE_TYPE_INVALID\" : 9, \"TAX_INVALID\" : 6, \"SALES_PRICE_TOO_HIGH\" : 2, \"EXPIRATION_DATE_INVALID\" : 8, \"GENDER_INVALID\" : 9, \"FETCH_SAME_SIGNATURE\" : 3, \"IOS_DEEP_LINK_INVALID\" : 0, \"ADDITIONAL_IMAGE_LINK_WARNING\" : 2, \"OPTIONAL_CONDITION_MISSING\" : 5, \"MIN_AD_PRICE_INVALID\" : 8, \"AGE_GROUP_INVALID\" : 0, \"TOO_MANY_ADDITIONAL_IMAGE_LINKS\" : 5, \"MPN_INVALID\" : 9, \"AVAILABILITY_DATE_INVALID\" : 9, \"IS_BUNDLE_INVALID\" : 9, \"ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE\" : 3, \"SALES_PRICE_INVALID\" : 5, \"PRODUCT_CATEGORY_DEPTH_WARNING\" : 4, \"WEIGHT_UNIT_INVALID\" : 3, \"OPTIONAL_PRODUCT_CATEGORY_INVALID\" : 9, \"ADWORDS_SAME_AS_LINK\" : 8 }, \"errors\" : { \"ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE\" : 5, \"FETCH_ERROR\" : 5, \"DESCRIPTION_MISSING\" : 1, \"PINJOIN_CONTENT_UNSAFE\" : 3, \"PARSE_LINE_ERROR\" : 3, \"NO_VERIFIED_DOMAIN\" : 0, \"LINK_LENGTH_TOO_LONG\" : 8, \"REQUIRED_COLUMNS_MISSING\" : 8, \"AVAILABILITY_INVALID\" : 6, \"ITEMID_MISSING\" : 3, \"LINK_FORMAT_INVALID\" : 6, \"DELIMITER_ERROR\" : 6, \"FEED_TOO_SMALL\" : 3, \"LIST_PRICE_INVALID\" : 0, \"IMAGE_LINK_INVALID\" : 6, \"MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED\" : 7, \"IMAGE_LINK_LENGTH_TOO_LONG\" : 6, \"ADULT_INVALID\" : 7, \"PRICE_MISSING\" : 3, \"DUPLICATE_PRODUCTS\" : 9, \"INTERNAL_SERVICE_ERROR\" : 7, \"PRODUCT_PRICE_INVALID\" : 5, \"ADWORDS_FORMAT_INVALID\" : 3, \"INVALID_DOMAIN\" : 0, \"BLOCKLISTED_IMAGE_SIGNATURE\" : 4, \"FEED_LENGTH_TOO_LONG\" : 4, \"ENCODING_ERROR\" : 9, \"IMAGE_LINK_MISSING\" : 6, \"PRODUCT_LINK_MISSING\" : 2, \"TITLE_MISSING\" : 6, \"MALFORMED_XML\" : 7, \"FETCH_INACTIVE_FEED_ERROR\" : 9, \"PRICE_CANNOT_BE_DETERMINED\" : 6 } } }, { \"updated_at\" : \"2022-03-14T15:16:34Z\", \"product_counts\" : { \"ingested\" : 4, \"original\" : 1 }, \"ingestion_details\" : { \"warnings\" : { \"ADDITIONAL_IMAGE_FILE_NOT_FOUND\" : 1, \"HOTEL_PRICE_HEADER_IS_PRESENT\" : 7, \"ADDITIONAL_IMAGE_INVALID_FILE\" : 6, \"ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR\" : 7, \"ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE\" : 1, \"ADDITIONAL_IMAGE_MALFORMED_URL\" : 1 }, \"errors\" : { \"LINE_LEVEL_INTERNAL_ERROR\" : 0, \"ACCOUNT_FLAGGED\" : 1, \"IMAGE_MALFORMED_URL\" : 2, \"IMAGE_LEVEL_INTERNAL_ERROR\" : 5, \"IMAGE_FILE_NOT_FOUND\" : 7, \"IMAGE_FILE_NOT_ACCESSIBLE\" : 5, \"IMAGE_INVALID_FILE\" : 9, \"LARGE_PRODUCT_COUNT_DECREASE\" : 6 }, \"info\" : { \"PREORDER\" : 4, \"OUT_OF_STOCK\" : 2, \"IN_STOCK\" : 3 } }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"id\" : \"id\", \"validation_details\" : { \"warnings\" : { \"AD_LINK_FORMAT_WARNING\" : 4, \"UTM_SOURCE_AUTO_CORRECTED\" : 2, \"ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG\" : 0, \"IMAGE_LINK_WARNING\" : 1, \"INCONSISTENT_CURRENCY_VALUES\" : 0, \"UPDATED_TIME_INVALID\" : 8, \"OPTIONAL_PRODUCT_CATEGORY_MISSING\" : 3, \"MULTIPACK_INVALID\" : 8, \"ANDROID_DEEP_LINK_INVALID\" : 3, \"DESCRIPTION_LENGTH_TOO_LONG\" : 7, \"SHIPPING_HEIGHT_INVALID\" : 4, \"TITLE_LENGTH_TOO_LONG\" : 4, \"SALE_DATE_INVALID\" : 1, \"DUPLICATE_HEADERS\" : 4, \"SALES_PRICE_TOO_LOW\" : 0, \"SHIPPING_WEIGHT_INVALID\" : 4, \"GTIN_INVALID\" : 4, \"PRODUCT_TYPE_LENGTH_TOO_LONG\" : 5, \"COUNTRY_DOES_NOT_MAP_TO_CURRENCY\" : 3, \"SIZE_SYSTEM_INVALID\" : 0, \"SHIPPING_INVALID\" : 8, \"CUSTOM_LABEL_LENGTH_TOO_LONG\" : 0, \"INDEXED_PRODUCT_COUNT_LARGE_DELTA\" : 7, \"SHIPPING_WIDTH_INVALID\" : 7, \"ADWORDS_FORMAT_WARNING\" : 6, \"AD_LINK_SAME_AS_LINK\" : 1, \"OPTIONAL_CONDITION_INVALID\" : 7, \"LINK_FORMAT_WARNING\" : 7, \"SIZE_TYPE_INVALID\" : 9, \"TAX_INVALID\" : 6, \"SALES_PRICE_TOO_HIGH\" : 2, \"EXPIRATION_DATE_INVALID\" : 8, \"GENDER_INVALID\" : 9, \"FETCH_SAME_SIGNATURE\" : 3, \"IOS_DEEP_LINK_INVALID\" : 0, \"ADDITIONAL_IMAGE_LINK_WARNING\" : 2, \"OPTIONAL_CONDITION_MISSING\" : 5, \"MIN_AD_PRICE_INVALID\" : 8, \"AGE_GROUP_INVALID\" : 0, \"TOO_MANY_ADDITIONAL_IMAGE_LINKS\" : 5, \"MPN_INVALID\" : 9, \"AVAILABILITY_DATE_INVALID\" : 9, \"IS_BUNDLE_INVALID\" : 9, \"ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE\" : 3, \"SALES_PRICE_INVALID\" : 5, \"PRODUCT_CATEGORY_DEPTH_WARNING\" : 4, \"WEIGHT_UNIT_INVALID\" : 3, \"OPTIONAL_PRODUCT_CATEGORY_INVALID\" : 9, \"ADWORDS_SAME_AS_LINK\" : 8 }, \"errors\" : { \"ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE\" : 5, \"FETCH_ERROR\" : 5, \"DESCRIPTION_MISSING\" : 1, \"PINJOIN_CONTENT_UNSAFE\" : 3, \"PARSE_LINE_ERROR\" : 3, \"NO_VERIFIED_DOMAIN\" : 0, \"LINK_LENGTH_TOO_LONG\" : 8, \"REQUIRED_COLUMNS_MISSING\" : 8, \"AVAILABILITY_INVALID\" : 6, \"ITEMID_MISSING\" : 3, \"LINK_FORMAT_INVALID\" : 6, \"DELIMITER_ERROR\" : 6, \"FEED_TOO_SMALL\" : 3, \"LIST_PRICE_INVALID\" : 0, \"IMAGE_LINK_INVALID\" : 6, \"MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED\" : 7, \"IMAGE_LINK_LENGTH_TOO_LONG\" : 6, \"ADULT_INVALID\" : 7, \"PRICE_MISSING\" : 3, \"DUPLICATE_PRODUCTS\" : 9, \"INTERNAL_SERVICE_ERROR\" : 7, \"PRODUCT_PRICE_INVALID\" : 5, \"ADWORDS_FORMAT_INVALID\" : 3, \"INVALID_DOMAIN\" : 0, \"BLOCKLISTED_IMAGE_SIGNATURE\" : 4, \"FEED_LENGTH_TOO_LONG\" : 4, \"ENCODING_ERROR\" : 9, \"IMAGE_LINK_MISSING\" : 6, \"PRODUCT_LINK_MISSING\" : 2, \"TITLE_MISSING\" : 6, \"MALFORMED_XML\" : 7, \"FETCH_INACTIVE_FEED_ERROR\" : 9, \"PRICE_CANNOT_BE_DETERMINED\" : 6 } } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catalogs/feeds : Create feed
     * Create a new feed owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Please, be aware that \&quot;default_country\&quot; and \&quot;default_locale\&quot; are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.
     *
     * @param feedsCreateRequest Request object used to created a feed. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 201)
     *         or Invalid feed parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Business account required. (status code 403)
     *         or User website required. (status code 409)
     *         or Unique feed name is required. (status code 422)
     *         or Not implemented (absent \&quot;default_country\&quot; or \&quot;default_locale\&quot;). (status code 501)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "feedsCreate",
        summary = "Create feed",
        description = "Create a new feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href='https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href='/docs/shopping/catalog/'>Pinterest API for shopping</a>.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsFeed.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Business account required.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "User website required.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unique feed name is required.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not implemented (absent \"default_country\" or \"default_locale\").", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/feeds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CatalogsFeed> feedsCreate(
        @Parameter(name = "FeedsCreateRequest", description = "Request object used to created a feed.", required = true) @Valid @RequestBody FeedsCreateRequest feedsCreateRequest,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"credentials\" : { \"password\" : \"password\", \"username\" : \"username\" }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"preferred_processing_schedule\" : { \"timezone\" : \"Africa/Abidjan\", \"time\" : \"02:59\" }, \"default_locale\" : \"en-US\", \"location\" : \"location\", \"id\" : \"id\", \"default_currency\" : \"USD\", \"default_country\" : \"US\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /catalogs/feeds/{feed_id} : Delete feed
     * Delete a feed owned by the \&quot;operating user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Feed deleted successfully. (status code 204)
     *         or Invalid feed parameters. (status code 400)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Data feed not found. (status code 404)
     *         or Conflict. Can&#39;t delete a feed with active promotions. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "feedsDelete",
        summary = "Delete feed",
        description = "Delete a feed owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href='https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href='/docs/shopping/catalog/'>Pinterest API for shopping</a>.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Feed deleted successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't delete a feed with active promotions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/catalogs/feeds/{feed_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> feedsDelete(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, in = ParameterIn.PATH) @PathVariable("feed_id") String feedId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/feeds/{feed_id} : Get feed
     * Get a single feed owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid feed parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Data feed not found. (status code 404)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "feedsGet",
        summary = "Get feed",
        description = "Get a single feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href='https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href='/docs/shopping/catalog/'>Pinterest API for shopping</a>.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsFeed.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/feeds/{feed_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsFeed> feedsGet(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, in = ParameterIn.PATH) @PathVariable("feed_id") String feedId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"credentials\" : { \"password\" : \"password\", \"username\" : \"username\" }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"preferred_processing_schedule\" : { \"timezone\" : \"Africa/Abidjan\", \"time\" : \"02:59\" }, \"default_locale\" : \"en-US\", \"location\" : \"location\", \"id\" : \"id\", \"default_currency\" : \"USD\", \"default_country\" : \"US\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/feeds : List feeds
     * Fetch feeds owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param catalogId Filter entities for a given catalog_id. If not given, all catalogs are considered. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "feedsList",
        summary = "List feeds",
        description = "Fetch feeds owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href='https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href='/docs/shopping/catalog/'>Pinterest API for shopping</a>.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeedsList200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/feeds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FeedsList200Response> feedsList(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Pattern(regexp = "^\\d+$") @Parameter(name = "catalog_id", description = "Filter entities for a given catalog_id. If not given, all catalogs are considered.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "catalog_id", required = false) String catalogId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"credentials\" : { \"password\" : \"password\", \"username\" : \"username\" }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"preferred_processing_schedule\" : { \"timezone\" : \"Africa/Abidjan\", \"time\" : \"02:59\" }, \"default_locale\" : \"en-US\", \"location\" : \"location\", \"id\" : \"id\", \"default_currency\" : \"USD\", \"default_country\" : \"US\" }, { \"credentials\" : { \"password\" : \"password\", \"username\" : \"username\" }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"preferred_processing_schedule\" : { \"timezone\" : \"Africa/Abidjan\", \"time\" : \"02:59\" }, \"default_locale\" : \"en-US\", \"location\" : \"location\", \"id\" : \"id\", \"default_currency\" : \"USD\", \"default_country\" : \"US\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /catalogs/feeds/{feed_id} : Update feed
     * Update a feed owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to &lt;a href&#x3D;&#39;https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs&#39;&gt;Before you get started with Catalogs&lt;/a&gt;. For Hotel parterns, refer to &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Pinterest API for shopping&lt;/a&gt;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param feedsUpdateRequest Request object used to update a feed. (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Invalid feed parameters. (status code 400)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Data feed not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "feedsUpdate",
        summary = "Update feed",
        description = "Update a feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href='https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href='/docs/shopping/catalog/'>Pinterest API for shopping</a>.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsFeed.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/catalogs/feeds/{feed_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CatalogsFeed> feedsUpdate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, in = ParameterIn.PATH) @PathVariable("feed_id") String feedId,
        @Parameter(name = "FeedsUpdateRequest", description = "Request object used to update a feed.", required = true) @Valid @RequestBody FeedsUpdateRequest feedsUpdateRequest,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"credentials\" : { \"password\" : \"password\", \"username\" : \"username\" }, \"created_at\" : \"2022-03-14T15:15:22Z\", \"updated_at\" : \"2022-03-14T15:16:34Z\", \"name\" : \"name\", \"preferred_processing_schedule\" : { \"timezone\" : \"Africa/Abidjan\", \"time\" : \"02:59\" }, \"default_locale\" : \"en-US\", \"location\" : \"location\", \"id\" : \"id\", \"default_currency\" : \"USD\", \"default_country\" : \"US\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/items/batch/{batch_id} : Get catalogs item batch status
     * Get a single catalogs items batch owned by the \&quot;operating user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/shopping/catalog/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.
     *
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Response containing the requested catalogs items batch (status code 200)
     *         or Not authenticated to access catalogs items batch (status code 401)
     *         or Not authorized to access catalogs items batch (status code 403)
     *         or Catalogs items batch not found (status code 404)
     *         or Method Not Allowed. (status code 405)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "itemsBatchGet",
        summary = "Get catalogs item batch status",
        description = "Get a single catalogs items batch owned by the \"operating user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response containing the requested catalogs items batch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsItemsBatch.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated to access catalogs items batch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access catalogs items batch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Catalogs items batch not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not Allowed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/items/batch/{batch_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsItemsBatch> itemsBatchGet(
        @Parameter(name = "batch_id", description = "Id of a catalogs items batch to fetch", required = true, in = ParameterIn.PATH) @PathVariable("batch_id") String batchId,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catalogs/items/batch : Operate on item batch
     * This endpoint supports multiple operations on a set of one or more catalog items owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/shopping/catalog/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.
     *
     * @param itemsBatchPostRequest Request object used to create catalogs items in a batch (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Response containing the requested catalogs items batch (status code 200)
     *         or Invalid request parameters. (status code 400)
     *         or Not authenticated to post catalogs items (status code 401)
     *         or Not authorized to post catalogs items (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "itemsBatchPost",
        summary = "Operate on item batch",
        description = "This endpoint supports multiple operations on a set of one or more catalog items owned by the \"operation user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response containing the requested catalogs items batch", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsItemsBatch.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated to post catalogs items", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to post catalogs items", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/items/batch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CatalogsItemsBatch> itemsBatchPost(
        @Parameter(name = "ItemsBatchPostRequest", description = "Request object used to create catalogs items in a batch", required = true) @Valid @RequestBody ItemsBatchPostRequest itemsBatchPostRequest,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/items : Get catalogs items
     * Get the items of the catalog owned by the \&quot;operation user_account\&quot;. &lt;a href&#x3D;\&quot;/docs/shopping/catalog/#Update%20items%20in%20batch\&quot; target&#x3D;\&quot;_blank\&quot;&gt;See detailed documentation here.&lt;/a&gt; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.
     *
     * @param country Country for the Catalogs Items (required)
     * @param language Language for the Catalogs Items (required)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @param itemIds This parameter is deprecated. Use filters instead. (optional)
     * @param filters Identifies items to be retrieved. This is a required parameter. (optional)
     * @return Response containing the requested catalogs items (status code 200)
     *         or Invalid request parameters. (status code 400)
     *         or Not authorized to access catalogs items (status code 401)
     *         or Not authorized to access catalogs items (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "itemsGet",
        summary = "Get catalogs items",
        description = "Get the items of the catalog owned by the \"operation user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response containing the requested catalogs items", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsItems.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authorized to access catalogs items", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Not authorized to access catalogs items", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/items",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CatalogsItems> itemsGet(
        @NotNull @Parameter(name = "country", description = "Country for the Catalogs Items", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = true) String country,
        @NotNull @Parameter(name = "language", description = "Language for the Catalogs Items", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "language", required = true) String language,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId,
        @Parameter(name = "item_ids", deprecated = true, description = "This parameter is deprecated. Use filters instead.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "item_ids", required = false) @Deprecated List<String> itemIds,
        @Parameter(name = "filters", description = "Identifies items to be retrieved. This is a required parameter.", in = ParameterIn.QUERY) @Valid CatalogsItemsFilters filters
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { }, { } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/processing_results/{processing_result_id}/item_issues : List item issues for a given processing result
     * List item validation issues for a given feed processing result owned by the \&quot;operation user_account\&quot;. Up to 20 random samples of affected items are returned for each error and warning code. Please note that for now query parameters &#39;item_numbers&#39; and &#39;item_validation_issue&#39; cannot be used simultaneously until it is implemented in some release in the future. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param processingResultId Unique identifier of a feed processing result. It can be acquired from the \&quot;id\&quot; field of the \&quot;items\&quot; array within the response of the [List processing results for a given feed](https://developers.pinterest.com/docs/api/v5/#operation/feed_processing_results/list). (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param itemNumbers Item number based on order of appearance in the Catalogs Feed. For example, &#39;0&#39; refers to first item found in a feed that was downloaded from a &#39;location&#39; specified during feed creation. (optional)
     * @param itemValidationIssue Filter item validation issues that have a given type of item validation issue. (optional)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Unauthorized access. (status code 401)
     *         or Processing Result not found. (status code 404)
     *         or Not implemented. (status code 501)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "itemsIssuesList",
        summary = "List item issues for a given processing result",
        description = "List item validation issues for a given feed processing result owned by the \"operation user_account\". Up to 20 random samples of affected items are returned for each error and warning code. Please note that for now query parameters 'item_numbers' and 'item_validation_issue' cannot be used simultaneously until it is implemented in some release in the future. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemsIssuesList200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Processing Result not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not implemented.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/processing_results/{processing_result_id}/item_issues",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ItemsIssuesList200Response> itemsIssuesList(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "processing_result_id", description = "Unique identifier of a feed processing result. It can be acquired from the \"id\" field of the \"items\" array within the response of the [List processing results for a given feed](https://developers.pinterest.com/docs/api/v5/#operation/feed_processing_results/list).", required = true, in = ParameterIn.PATH) @PathVariable("processing_result_id") String processingResultId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Parameter(name = "item_numbers", description = "Item number based on order of appearance in the Catalogs Feed. For example, '0' refers to first item found in a feed that was downloaded from a 'location' specified during feed creation.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "item_numbers", required = false) List<Integer> itemNumbers,
        @Parameter(name = "item_validation_issue", description = "Filter item validation issues that have a given type of item validation issue.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "item_validation_issue", required = false) CatalogsItemValidationIssue itemValidationIssue,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"item_id\" : \"DS0294-L\", \"warnings\" : { \"AD_LINK_FORMAT_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LINK_FORMAT_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"UTM_SOURCE_AUTO_CORRECTED\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SIZE_TYPE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TAX_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IMAGE_LINK_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALES_PRICE_TOO_HIGH\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"EXPIRATION_DATE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"GENDER_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IOS_DEEP_LINK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADDITIONAL_IMAGE_LINK_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_CONDITION_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_PRODUCT_CATEGORY_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MIN_AD_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MULTIPACK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ANDROID_DEEP_LINK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"DESCRIPTION_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_HEIGHT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TITLE_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AGE_GROUP_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALE_DATE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TOO_MANY_ADDITIONAL_IMAGE_LINKS\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MPN_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALES_PRICE_TOO_LOW\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AVAILABILITY_DATE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_WEIGHT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IS_BUNDLE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"GTIN_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_TYPE_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"COUNTRY_DOES_NOT_MAP_TO_CURRENCY\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALES_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SIZE_SYSTEM_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"CUSTOM_LABEL_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_CATEGORY_DEPTH_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_WIDTH_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADWORDS_FORMAT_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_PRODUCT_CATEGORY_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"WEIGHT_UNIT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AD_LINK_SAME_AS_LINK\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_CONDITION_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADWORDS_SAME_AS_LINK\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" } }, \"item_number\" : 0, \"errors\" : { \"IMAGE_LINK_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADULT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRICE_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"DESCRIPTION_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"DUPLICATE_PRODUCTS\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PINJOIN_CONTENT_UNSAFE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADWORDS_FORMAT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"BLOCKLISTED_IMAGE_SIGNATURE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"INVALID_DOMAIN\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LINK_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PARSE_LINE_ERROR\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AVAILABILITY_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IMAGE_LINK_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_LINK_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ITEMID_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TITLE_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LINK_FORMAT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LIST_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IMAGE_LINK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRICE_CANNOT_BE_DETERMINED\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" } } }, { \"item_id\" : \"DS0294-L\", \"warnings\" : { \"AD_LINK_FORMAT_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LINK_FORMAT_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"UTM_SOURCE_AUTO_CORRECTED\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SIZE_TYPE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TAX_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IMAGE_LINK_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALES_PRICE_TOO_HIGH\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"EXPIRATION_DATE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"GENDER_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IOS_DEEP_LINK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADDITIONAL_IMAGE_LINK_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_CONDITION_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_PRODUCT_CATEGORY_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MIN_AD_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MULTIPACK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ANDROID_DEEP_LINK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"DESCRIPTION_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_HEIGHT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TITLE_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AGE_GROUP_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALE_DATE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TOO_MANY_ADDITIONAL_IMAGE_LINKS\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MPN_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALES_PRICE_TOO_LOW\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AVAILABILITY_DATE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_WEIGHT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IS_BUNDLE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"GTIN_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_TYPE_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"COUNTRY_DOES_NOT_MAP_TO_CURRENCY\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SALES_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SIZE_SYSTEM_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"CUSTOM_LABEL_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_CATEGORY_DEPTH_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"SHIPPING_WIDTH_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADWORDS_FORMAT_WARNING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_PRODUCT_CATEGORY_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"WEIGHT_UNIT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AD_LINK_SAME_AS_LINK\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"OPTIONAL_CONDITION_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADWORDS_SAME_AS_LINK\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" } }, \"item_number\" : 0, \"errors\" : { \"IMAGE_LINK_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADULT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRICE_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"DESCRIPTION_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"DUPLICATE_PRODUCTS\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PINJOIN_CONTENT_UNSAFE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ADWORDS_FORMAT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"BLOCKLISTED_IMAGE_SIGNATURE\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"INVALID_DOMAIN\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LINK_LENGTH_TOO_LONG\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PARSE_LINE_ERROR\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"AVAILABILITY_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IMAGE_LINK_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRODUCT_LINK_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"ITEMID_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"TITLE_MISSING\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LINK_FORMAT_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"LIST_PRICE_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"IMAGE_LINK_INVALID\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"PRICE_CANNOT_BE_DETERMINED\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" }, \"MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED\" : { \"attribute_name\" : \"TITLE\", \"provided_value\" : \"provided_value\" } } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catalogs/products/get_by_product_group_filters : List filtered products
     * List products Pins owned by the \&quot;operation user_account\&quot; that meet the criteria specified in the Catalogs Product Group Filter given in the request. - This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent. - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an &lt;code&gt;ad_account_id&lt;/code&gt; (obtained via &lt;a href&#x3D;&#39;/docs/api/v5/#operation/ad_accounts/list&#39;&gt;List ad accounts&lt;/a&gt;) to use the owner of that ad_account as the \&quot;operation user_account\&quot;. In order to do this, the token user_account must have one of the following &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt; roles on the ad_account: Owner, Admin, Catalogs Manager.  &lt;a href&#x3D;&#39;/docs/shopping/catalog/&#39;&gt;Learn more&lt;/a&gt;
     *
     * @param catalogsListProductsByFilterRequest Object holding a group of filters for a catalog product group (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/getting-started/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param adAccountId Unique identifier of an ad account. (optional)
     * @return Success (status code 200)
     *         or Unauthorized access. (status code 401)
     *         or Conflict. Can&#39;t get products. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "productsByProductGroupFilterList",
        summary = "List filtered products",
        description = "List products Pins owned by the \"operation user_account\" that meet the criteria specified in the Catalogs Product Group Filter given in the request. - This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href='/docs/api/v5/#operation/ad_accounts/list'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href='/docs/shopping/catalog/'>Learn more</a>",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogsProductGroupPinsList200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't get products.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "boards:read", "catalogs:read", "pins:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/products/get_by_product_group_filters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CatalogsProductGroupPinsList200Response> productsByProductGroupFilterList(
        @Parameter(name = "CatalogsListProductsByFilterRequest", description = "Object holding a group of filters for a catalog product group", required = true) @Valid @RequestBody CatalogsListProductsByFilterRequest catalogsListProductsByFilterRequest,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(250) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize,
        @Pattern(regexp = "^\\d+$") @Size(max = 18) @Parameter(name = "ad_account_id", description = "Unique identifier of an ad account.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ad_account_id", required = false) String adAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"bookmark\" : \"bookmark\", \"items\" : [ { \"metadata\" : { \"item_id\" : \"DS0294-L\", \"price\" : 24.99, \"item_group_id\" : \"DS0294\", \"currency\" : \"USD\", \"sale_price\" : 14.99 }, \"pin\" : { \"note\" : \"note\", \"board_owner\" : { \"username\" : \"username\" }, \"media_source\" : \"{}\", \"pin_metrics\" : { \"pin_metrics\" : [ { \"90d\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3 }, \"all_time\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3, \"reaction\" : 10, \"comment\" : 2 } }, null ] }, \"is_owner\" : true, \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"has_been_promoted\" : true, \"media\" : { \"media_type\" : \"media_type\" }, \"title\" : \"title\", \"board_section_id\" : \"board_section_id\", \"dominant_color\" : \"#6E7874\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"creative_type\" : \"creative_type\", \"parent_pin_id\" : \"parent_pin_id\", \"id\" : \"813744226420795884\", \"is_standard\" : true } }, { \"metadata\" : { \"item_id\" : \"DS0294-L\", \"price\" : 24.99, \"item_group_id\" : \"DS0294\", \"currency\" : \"USD\", \"sale_price\" : 14.99 }, \"pin\" : { \"note\" : \"note\", \"board_owner\" : { \"username\" : \"username\" }, \"media_source\" : \"{}\", \"pin_metrics\" : { \"pin_metrics\" : [ { \"90d\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3 }, \"all_time\" : { \"pin_click\" : 7, \"impression\" : 2, \"clickthrough\" : 3, \"reaction\" : 10, \"comment\" : 2 } }, null ] }, \"is_owner\" : true, \"link\" : \"https://www.pinterest.com/\", \"created_at\" : \"2020-01-01T20:10:40Z\", \"description\" : \"description\", \"has_been_promoted\" : true, \"media\" : { \"media_type\" : \"media_type\" }, \"title\" : \"title\", \"board_section_id\" : \"board_section_id\", \"dominant_color\" : \"#6E7874\", \"alt_text\" : \"alt_text\", \"board_id\" : \"board_id\", \"creative_type\" : \"creative_type\", \"parent_pin_id\" : \"parent_pin_id\", \"id\" : \"813744226420795884\", \"is_standard\" : true } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
