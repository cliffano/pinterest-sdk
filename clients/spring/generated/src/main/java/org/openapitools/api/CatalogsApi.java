/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CatalogsFeed;
import org.openapitools.model.CatalogsFeedsCreateRequest;
import org.openapitools.model.CatalogsFeedsUpdateRequest;
import org.openapitools.model.CatalogsItems;
import org.openapitools.model.CatalogsItemsBatch;
import org.openapitools.model.CatalogsItemsBatchRequest;
import org.openapitools.model.CatalogsProductGroup;
import org.openapitools.model.CatalogsProductGroupCreateRequest;
import org.openapitools.model.CatalogsProductGroupUpdateRequest;
import org.openapitools.model.Error;
import org.openapitools.model.Paginated;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-01T12:06:55.503075Z[Etc/UTC]")
@Validated
@Tag(name = "catalogs", description = "the catalogs API")
public interface CatalogsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /catalogs/product_groups : Create product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
     *
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group. (required)
     * @return Success (status code 201)
     *         or Invalid body. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Conflict. Can&#39;t create this catalogs product group with this value. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsCreate",
        summary = "Create product group",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Object.class))),
            @ApiResponse(responseCode = "400", description = "Invalid body.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't create this catalogs product group with this value.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/product_groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> catalogsProductGroupsCreate(
        @Parameter(name = "CatalogsProductGroupCreateRequest", description = "Request object used to created a catalogs product group.", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /catalogs/product_groups/{product_group_id} : Delete product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @return Catalogs Product Group deleted successfully. (status code 204)
     *         or Invalid catalogs product group id parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Catalogs product group not found. (status code 404)
     *         or Conflict. Can&#39;t delete this catalogs product group. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsDelete",
        summary = "Delete product group",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Catalogs Product Group deleted successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid catalogs product group id parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Catalogs product group not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't delete this catalogs product group.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/catalogs/product_groups/{product_group_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> catalogsProductGroupsDelete(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, schema = @Schema(description = "")) @PathVariable("product_group_id") String productGroupId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/product_groups : Get product groups list
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Invalid feed parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Data feed not found. (status code 404)
     *         or Conflict. Can&#39;t create this catalogs product group with this value. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsList",
        summary = "Get product groups list",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't create this catalogs product group with this value.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/product_groups",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> catalogsProductGroupsList(
        @NotNull @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "feed_id", required = true) String feedId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /catalogs/product_groups/{product_group_id} : Update product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group. (required)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Catalogs product group not found. (status code 404)
     *         or Conflict. Can&#39;t update this catalogs product group to this value. (status code 409)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "catalogsProductGroupsUpdate",
        summary = "Update product group",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsProductGroup.class))),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Catalogs product group not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't update this catalogs product group to this value.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/catalogs/product_groups/{product_group_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CatalogsProductGroup> catalogsProductGroupsUpdate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "product_group_id", description = "Unique identifier of a product group", required = true, schema = @Schema(description = "")) @PathVariable("product_group_id") String productGroupId,
        @Parameter(name = "CatalogsProductGroupUpdateRequest", description = "Request object used to Update a catalogs product group.", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : 1622742155000, \"name\" : \"Most Popular\", \"description\" : \"description\", \"created_at\" : 1621350033000, \"id\" : \"2680059592705\", \"type\" : \"TOP_SELLERS\", \"feed_id\" : \"feed_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/feeds/{feed_id}/processing_results : List processing results for a given feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Feed not found. (status code 404)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "feedProcessingResultsList",
        summary = "List processing results for a given feed",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Feed not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/feeds/{feed_id}/processing_results",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> feedProcessingResultsList(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, schema = @Schema(description = "")) @PathVariable("feed_id") String feedId,
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catalogs/feeds : Create feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param catalogsFeedsCreateRequest Request object used to created a feed. (required)
     * @return Success (status code 201)
     *         or Invalid feed parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Business account required. (status code 403)
     *         or User website required. (status code 409)
     *         or Unique feed name is required. (status code 422)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "feedsCreate",
        summary = "Create feed",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsFeed.class))),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Business account required.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "User website required.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "422", description = "Unique feed name is required.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/feeds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CatalogsFeed> feedsCreate(
        @Parameter(name = "CatalogsFeedsCreateRequest", description = "Request object used to created a feed.", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogsFeedsCreateRequest catalogsFeedsCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /catalogs/feeds/{feed_id} : Delete feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @return Feed deleted successfully. (status code 204)
     *         or Invalid feed parameters. (status code 400)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Data feed not found. (status code 404)
     *         or Conflict. Can&#39;t delete a feed with active promotions. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "feedsDelete",
        summary = "Delete feed",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Feed deleted successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict. Can't delete a feed with active promotions.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/catalogs/feeds/{feed_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> feedsDelete(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, schema = @Schema(description = "")) @PathVariable("feed_id") String feedId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/feeds/{feed_id} : Get feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @return Success (status code 200)
     *         or Invalid feed parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Data feed not found. (status code 404)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "feedsGet",
        summary = "Get feed",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsFeed.class))),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/feeds/{feed_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CatalogsFeed> feedsGet(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, schema = @Schema(description = "")) @PathVariable("feed_id") String feedId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/feeds : List feeds
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Success (status code 200)
     *         or Invalid parameters. (status code 400)
     *         or Unauthorized access. (status code 401)
     *         or Unexpected error. (status code 200)
     */
    @Operation(
        operationId = "feedsList",
        summary = "List feeds",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Paginated.class))),
            @ApiResponse(responseCode = "400", description = "Invalid parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/feeds",
        produces = { "application/json" }
    )
    default ResponseEntity<Paginated> feedsList(
        @Parameter(name = "bookmark", description = "Cursor used to fetch the next page of items", schema = @Schema(description = "")) @Valid @RequestParam(value = "bookmark", required = false) String bookmark,
        @Min(1) @Max(100) @Parameter(name = "page_size", description = "Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/api/v5/#tag/Pagination'>Pagination</a> for more information.", schema = @Schema(description = "", defaultValue = "25")) @Valid @RequestParam(value = "page_size", required = false, defaultValue = "25") Integer pageSize
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /catalogs/feeds/{feed_id} : Update feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param catalogsFeedsUpdateRequest Request object used to update a feed. (required)
     * @return Success (status code 200)
     *         or Invalid feed parameters. (status code 400)
     *         or Forbidden. Account not approved for feed mutations yet. (status code 403)
     *         or Data feed not found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "feedsUpdate",
        summary = "Update feed",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsFeed.class))),
            @ApiResponse(responseCode = "400", description = "Invalid feed parameters.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden. Account not approved for feed mutations yet.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Data feed not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/catalogs/feeds/{feed_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CatalogsFeed> feedsUpdate(
        @Pattern(regexp = "^\\d+$") @Parameter(name = "feed_id", description = "Unique identifier of a feed", required = true, schema = @Schema(description = "")) @PathVariable("feed_id") String feedId,
        @Parameter(name = "CatalogsFeedsUpdateRequest", description = "Request object used to update a feed.", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/items/batch/{batch_id} : Get catalogs items batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
     *
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @return Response containing the requested catalogs items batch (status code 200)
     *         or Not authorized to access catalogs items batch (status code 401)
     *         or Not authorized to access catalogs items batch (status code 403)
     *         or Catalogs items batch not found (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "itemsBatchGet",
        summary = "Get catalogs items batch",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response containing the requested catalogs items batch", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsItemsBatch.class))),
            @ApiResponse(responseCode = "401", description = "Not authorized to access catalogs items batch", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access catalogs items batch", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Catalogs items batch not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/items/batch/{batch_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CatalogsItemsBatch> itemsBatchGet(
        @Parameter(name = "batch_id", description = "Id of a catalogs items batch to fetch", required = true, schema = @Schema(description = "")) @PathVariable("batch_id") String batchId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_time\" : \"2020-01-01T20:10:40Z\", \"completed_time\" : \"2022-03-10T15:37:10Z\", \"batch_id\" : \"595953100599279259-66753b9bb65c46c49bd8503b27fecf9e\", \"items\" : [ { \"item_id\" : \"DS0294-M\", \"warnings\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"errors\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"status\" : \"SUCCESS\" }, { \"item_id\" : \"DS0294-M\", \"warnings\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"errors\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"status\" : \"SUCCESS\" } ], \"status\" : \"PROCESSING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catalogs/items/batch : Perform an operation on an item batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
     *
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch (required)
     * @return Response containing the requested catalogs items batch (status code 200)
     *         or Not authorized to post catalogs items (status code 401)
     *         or Not authorized to post catalogs items (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "itemsBatchPost",
        summary = "Perform an operation on an item batch",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response containing the requested catalogs items batch", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsItemsBatch.class))),
            @ApiResponse(responseCode = "401", description = "Not authorized to post catalogs items", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to post catalogs items", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read", "catalogs:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catalogs/items/batch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CatalogsItemsBatch> itemsBatchPost(
        @Parameter(name = "CatalogsItemsBatchRequest", description = "Request object used to create catalogs items in a batch", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogsItemsBatchRequest catalogsItemsBatchRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_time\" : \"2020-01-01T20:10:40Z\", \"completed_time\" : \"2022-03-10T15:37:10Z\", \"batch_id\" : \"595953100599279259-66753b9bb65c46c49bd8503b27fecf9e\", \"items\" : [ { \"item_id\" : \"DS0294-M\", \"warnings\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"errors\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"status\" : \"SUCCESS\" }, { \"item_id\" : \"DS0294-M\", \"warnings\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"errors\" : [ { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" }, { \"code\" : 106, \"attribute\" : \"title\", \"message\" : \"Title is missing from product metadata.\" } ], \"status\" : \"SUCCESS\" } ], \"status\" : \"PROCESSING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalogs/items : Get catalogs items
     * Get the items of the catalog created by the \&quot;operating user_account\&quot;
     *
     * @param country Country for the Catalogs Items (required)
     * @param itemIds Catalos Item ids (required)
     * @param language Language for the Catalogs Items (required)
     * @return Response containing the requested catalogs items (status code 200)
     *         or Not authorized to access catalogs items (status code 401)
     *         or Not authorized to access catalogs items (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "itemsGet",
        summary = "Get catalogs items",
        tags = { "catalogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response containing the requested catalogs items", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CatalogsItems.class))),
            @ApiResponse(responseCode = "401", description = "Not authorized to access catalogs items", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Not authorized to access catalogs items", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        },
        security = {
            @SecurityRequirement(name = "pinterest_oauth2", scopes={ "catalogs:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalogs/items",
        produces = { "application/json" }
    )
    default ResponseEntity<CatalogsItems> itemsGet(
        @NotNull @Parameter(name = "country", description = "Country for the Catalogs Items", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "country", required = true) String country,
        @NotNull @Parameter(name = "item_ids", description = "Catalos Item ids", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "item_ids", required = true) List<String> itemIds,
        @NotNull @Parameter(name = "language", description = "Language for the Catalogs Items", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "language", required = true) String language
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"item_id\" : \"DS0294-M\", \"attributes\" : { \"custom_label_4\" : \"Man hat\", \"custom_label_3\" : \"Woman dress\", \"custom_label_2\" : \"Winter sales\", \"shipping_width\" : \"16 in\", \"custom_label_1\" : \"Summer promotion\", \"color\" : \"blue\", \"gender\" : \"unisex\", \"item_group_id\" : \"DS0294\", \"link\" : \"https://www.example.com/cat/womens-clothing/denim-shirt-0294\", \"pattern\" : \"plaid\", \"additional_image_link\" : [ \"https://scene.example.com/image/image_v2.jpg\", \"https://scene.example.com/image/image_v3.jpg\" ], \"description\" : \"Casual fit denim shirt made with the finest quality Japanese denim.\", \"availability\" : \"in stock\", \"number_of_reviews\" : 10, \"custom_label_0\" : \"Best sellers\", \"title\" : \"Women’s denim shirt, large\", \"average_review_rating\" : 5, \"shipping\" : \"US:CA:Ground:0 USD\", \"price\" : \"24.99 USD\", \"ad_link\" : \"https://www.example.com/cat/denim-shirt/item012?utm_source=Pinterest\", \"mobile_link\" : \"https://m.example.com/cat/womens-clothing/denim-shirt-0294\", \"id\" : \"DS0294-L\", \"min_ad_price\" : \"19.99 USD\", \"brand\" : \"Josie’s Denim\", \"google_product_category\" : \"Apparel & Accessories > Clothing > Shirts & Tops\", \"gtin\" : 3234567890126, \"image_link\" : [ \"https://scene.example.com/image/image.jpg\" ], \"size_type\" : \"regular\", \"age_group\" : \"newborn\", \"free_shipping_label\" : true, \"free_shipping_limit\" : \"35 USD\", \"mpn\" : \"PI12345NTEREST\", \"tax\" : \"US:1025433:6.00:y\", \"sale_price\" : \"14.99 USD\", \"shipping_height\" : \"12 in\", \"condition\" : \"new\", \"product_type\" : \"Clothing > Women’s > Shirts > Denim\", \"last_updated_time\" : 1641483432072, \"material\" : \"cotton\", \"size\" : \"M\", \"size_system\" : \"US\", \"number_of_ratings\" : 10, \"shipping_weight\" : \"3 kg\", \"adult\" : true } }, { \"item_id\" : \"DS0294-M\", \"attributes\" : { \"custom_label_4\" : \"Man hat\", \"custom_label_3\" : \"Woman dress\", \"custom_label_2\" : \"Winter sales\", \"shipping_width\" : \"16 in\", \"custom_label_1\" : \"Summer promotion\", \"color\" : \"blue\", \"gender\" : \"unisex\", \"item_group_id\" : \"DS0294\", \"link\" : \"https://www.example.com/cat/womens-clothing/denim-shirt-0294\", \"pattern\" : \"plaid\", \"additional_image_link\" : [ \"https://scene.example.com/image/image_v2.jpg\", \"https://scene.example.com/image/image_v3.jpg\" ], \"description\" : \"Casual fit denim shirt made with the finest quality Japanese denim.\", \"availability\" : \"in stock\", \"number_of_reviews\" : 10, \"custom_label_0\" : \"Best sellers\", \"title\" : \"Women’s denim shirt, large\", \"average_review_rating\" : 5, \"shipping\" : \"US:CA:Ground:0 USD\", \"price\" : \"24.99 USD\", \"ad_link\" : \"https://www.example.com/cat/denim-shirt/item012?utm_source=Pinterest\", \"mobile_link\" : \"https://m.example.com/cat/womens-clothing/denim-shirt-0294\", \"id\" : \"DS0294-L\", \"min_ad_price\" : \"19.99 USD\", \"brand\" : \"Josie’s Denim\", \"google_product_category\" : \"Apparel & Accessories > Clothing > Shirts & Tops\", \"gtin\" : 3234567890126, \"image_link\" : [ \"https://scene.example.com/image/image.jpg\" ], \"size_type\" : \"regular\", \"age_group\" : \"newborn\", \"free_shipping_label\" : true, \"free_shipping_limit\" : \"35 USD\", \"mpn\" : \"PI12345NTEREST\", \"tax\" : \"US:1025433:6.00:y\", \"sale_price\" : \"14.99 USD\", \"shipping_height\" : \"12 in\", \"condition\" : \"new\", \"product_type\" : \"Clothing > Women’s > Shirts > Denim\", \"last_updated_time\" : 1641483432072, \"material\" : \"cotton\", \"size\" : \"M\", \"size_system\" : \"US\", \"number_of_ratings\" : 10, \"shipping_weight\" : \"3 kg\", \"adult\" : true } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
