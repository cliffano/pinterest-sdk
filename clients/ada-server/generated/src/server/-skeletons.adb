--  Pinterest REST API
--  Pinterest's REST API
--
--  The version of the OpenAPI document: 5.3.0
--  Contact: blah@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.4.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   package body Skeleton is


      package API_Ad_Account_Analytics is
         new Swagger.Servers.Operation (Handler => Ad_Account_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/analytics");

      --  Get ad account analytics
      procedure Ad_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Ad_Account_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Account_Analytics;

      package API_Ad_Accounts_List is
         new Swagger.Servers.Operation (Handler => Ad_Accounts_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts");

      --  List ad accounts
      procedure Ad_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Include_Shared_Accounts : Swagger.Nullable_Boolean;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "include_shared_accounts", Include_Shared_Accounts);
         Impl.Ad_Accounts_List
            (Bookmark,
             Page_Size,
             Include_Shared_Accounts, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Accounts_List;

      package API_Ad_Groups_Analytics is
         new Swagger.Servers.Operation (Handler => Ad_Groups_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/analytics");

      --  Get ad group analytics
      procedure Ad_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids", Ad_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Ad_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Ad_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Groups_Analytics;

      package API_Ad_Groups_List is
         new Swagger.Servers.Operation (Handler => Ad_Groups_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups");

      --  List ad groups
      procedure Ad_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Translate_Interests_To_Names : Swagger.Nullable_Boolean;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids", Ad_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses", Entity_Statuses);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "translate_interests_to_names", Translate_Interests_To_Names);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Ad_Groups_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark,
             Translate_Interests_To_Names, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Groups_List;

      package API_Ads_Analytics is
         new Swagger.Servers.Operation (Handler => Ads_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/analytics");

      --  Get ad analytics
      procedure Ads_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_ids", Ad_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Ads_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Ad_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ads_Analytics;

      package API_Ads_List is
         new Swagger.Servers.Operation (Handler => Ads_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads");

      --  List ads
      procedure Ads_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids", Ad_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_ids", Ad_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses", Entity_Statuses);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Ads_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Ad_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ads_List;

      package API_Analytics_Create_Report is
         new Swagger.Servers.Operation (Handler => Analytics_Create_Report,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports");

      --  Create async request for an account analytics report
      procedure Analytics_Create_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Ads_Analytics_Create_Async_Request_Type : AdsAnalyticsCreateAsyncRequest_Type;
         Result : .Models.AdsAnalyticsCreateAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "AdsAnalyticsCreateAsyncRequest_Type", Ads_Analytics_Create_Async_Request_Type);
         Impl.Analytics_Create_Report
            (Ad_Account_Id,
             Ads_Analytics_Create_Async_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Analytics_Create_Report;

      package API_Analytics_Get_Report is
         new Swagger.Servers.Operation (Handler => Analytics_Get_Report,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports");

      --  Get the account analytics report created by the async call
      procedure Analytics_Get_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Token : Swagger.UString;
         Result : .Models.AdsAnalyticsGetAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "token", Token);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Analytics_Get_Report
            (Ad_Account_Id,
             Token, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Analytics_Get_Report;

      package API_Campaigns_Analytics is
         new Swagger.Servers.Operation (Handler => Campaigns_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/analytics");

      --  Get campaign analytics
      procedure Campaigns_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Campaigns_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Campaign_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Campaigns_Analytics;

      package API_Campaigns_List is
         new Swagger.Servers.Operation (Handler => Campaigns_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns");

      --  List campaigns
      procedure Campaigns_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses", Entity_Statuses);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Campaigns_List
            (Ad_Account_Id,
             Campaign_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Campaigns_List;

      package API_Product_Groups_Analytics is
         new Swagger.Servers.Operation (Handler => Product_Groups_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_groups/analytics");

      --  Get product group analytics
      procedure Product_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Product_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "product_group_ids", Product_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Impl.Product_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Product_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Product_Groups_Analytics;

      package API_Board_Sections_Create is
         new Swagger.Servers.Operation (Handler => Board_Sections_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections");

      --  Create board section
      procedure Board_Sections_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Impl.Board_Sections_Create
            (Board_Id,
             Board_Section_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_Create;

      package API_Board_Sections_Delete is
         new Swagger.Servers.Operation (Handler => Board_Sections_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}");

      --  Delete board section
      procedure Board_Sections_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Section_Id);
         Impl.Board_Sections_Delete
            (Board_Id,
             Section_Id, Context);

      end Board_Sections_Delete;

      package API_Board_Sections_List is
         new Swagger.Servers.Operation (Handler => Board_Sections_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections");

      --  List board sections
      procedure Board_Sections_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Impl.Board_Sections_List
            (Board_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_List;

      package API_Board_Sections_List_Pins is
         new Swagger.Servers.Operation (Handler => Board_Sections_List_Pins,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}/pins");

      --  List Pins on board section
      procedure Board_Sections_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Section_Id);
         Impl.Board_Sections_List_Pins
            (Board_Id,
             Section_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_List_Pins;

      package API_Board_Sections_Update is
         new Swagger.Servers.Operation (Handler => Board_Sections_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}");

      --  Update board section
      procedure Board_Sections_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Section_Id);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Impl.Board_Sections_Update
            (Board_Id,
             Section_Id,
             Board_Section_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_Update;

      package API_Boards_Create is
         new Swagger.Servers.Operation (Handler => Boards_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/boards");

      --  Create board
      procedure Boards_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Type : Board_Type;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "Board_Type", Board_Type);
         Impl.Boards_Create
            (Board_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_Create;

      package API_Boards_Delete is
         new Swagger.Servers.Operation (Handler => Boards_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/boards/{board_id}");

      --  Delete board
      procedure Boards_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Impl.Boards_Delete
            (Board_Id, Context);

      end Boards_Delete;

      package API_Boards_Get is
         new Swagger.Servers.Operation (Handler => Boards_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}");

      --  Get board
      procedure Boards_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Impl.Boards_Get
            (Board_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_Get;

      package API_Boards_List is
         new Swagger.Servers.Operation (Handler => Boards_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards");

      --  List boards
      procedure Boards_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Privacy : Swagger.Nullable_UString;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "privacy", Privacy);
         Impl.Boards_List
            (Bookmark,
             Page_Size,
             Privacy, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_List;

      package API_Boards_List_Pins is
         new Swagger.Servers.Operation (Handler => Boards_List_Pins,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}/pins");

      --  List Pins on board
      procedure Boards_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Impl.Boards_List_Pins
            (Board_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_List_Pins;

      package API_Boards_Update is
         new Swagger.Servers.Operation (Handler => Boards_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/boards/{board_id}");

      --  Update board
      procedure Boards_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Board_Id : Swagger.UString;
         Board_Update_Type : BoardUpdate_Type;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "BoardUpdate_Type", Board_Update_Type);
         Impl.Boards_Update
            (Board_Id,
             Board_Update_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_Update;

      package API_Catalogs_Product_Groups_Create is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/catalogs/product_groups");

      --  Create product group
      procedure Catalogs_Product_Groups_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_Product_Group_Create_Request_Type : CatalogsProductGroupCreateRequest_Type;
         Result : Swagger.Object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "CatalogsProductGroupCreateRequest_Type", Catalogs_Product_Group_Create_Request_Type);
         Impl.Catalogs_Product_Groups_Create
            (Catalogs_Product_Group_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Catalogs_Product_Groups_Create;

      package API_Catalogs_Product_Groups_Delete is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}");

      --  Delete product group
      procedure Catalogs_Product_Groups_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Product_Group_Id);
         Impl.Catalogs_Product_Groups_Delete
            (Product_Group_Id, Context);

      end Catalogs_Product_Groups_Delete;

      package API_Catalogs_Product_Groups_List is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/product_groups");

      --  Get product groups list
      procedure Catalogs_Product_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "feed_id", Feed_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Impl.Catalogs_Product_Groups_List
            (Feed_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Catalogs_Product_Groups_List;

      package API_Catalogs_Product_Groups_Update is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}");

      --  Update product group
      procedure Catalogs_Product_Groups_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Product_Group_Id : Swagger.UString;
         Catalogs_Product_Group_Update_Request_Type : CatalogsProductGroupUpdateRequest_Type;
         Result : .Models.CatalogsProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Product_Group_Id);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "CatalogsProductGroupUpdateRequest_Type", Catalogs_Product_Group_Update_Request_Type);
         Impl.Catalogs_Product_Groups_Update
            (Product_Group_Id,
             Catalogs_Product_Group_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Catalogs_Product_Groups_Update;

      package API_Feed_Processing_Results_List is
         new Swagger.Servers.Operation (Handler => Feed_Processing_Results_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}/processing_results");

      --  List processing results for a given feed
      procedure Feed_Processing_Results_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Impl.Feed_Processing_Results_List
            (Feed_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feed_Processing_Results_List;

      package API_Feeds_Create is
         new Swagger.Servers.Operation (Handler => Feeds_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/catalogs/feeds");

      --  Create feed
      procedure Feeds_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_Feeds_Create_Request_Type : CatalogsFeedsCreateRequest_Type;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "CatalogsFeedsCreateRequest_Type", Catalogs_Feeds_Create_Request_Type);
         Impl.Feeds_Create
            (Catalogs_Feeds_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_Create;

      package API_Feeds_Delete is
         new Swagger.Servers.Operation (Handler => Feeds_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}");

      --  Delete feed
      procedure Feeds_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Impl.Feeds_Delete
            (Feed_Id, Context);

      end Feeds_Delete;

      package API_Feeds_Get is
         new Swagger.Servers.Operation (Handler => Feeds_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}");

      --  Get feed
      procedure Feeds_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Impl.Feeds_Get
            (Feed_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_Get;

      package API_Feeds_List is
         new Swagger.Servers.Operation (Handler => Feeds_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/feeds");

      --  List feeds
      procedure Feeds_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Impl.Feeds_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_List;

      package API_Feeds_Update is
         new Swagger.Servers.Operation (Handler => Feeds_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}");

      --  Update feed
      procedure Feeds_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Feed_Id : Swagger.UString;
         Catalogs_Feeds_Update_Request_Type : CatalogsFeedsUpdateRequest_Type;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "CatalogsFeedsUpdateRequest_Type", Catalogs_Feeds_Update_Request_Type);
         Impl.Feeds_Update
            (Feed_Id,
             Catalogs_Feeds_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_Update;

      package API_Items_Batch_Get is
         new Swagger.Servers.Operation (Handler => Items_Batch_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/items/batch/{batch_id}");

      --  Get catalogs items batch
      procedure Items_Batch_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Batch_Id : Swagger.UString;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Batch_Id);
         Impl.Items_Batch_Get
            (Batch_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Items_Batch_Get;

      package API_Items_Batch_Post is
         new Swagger.Servers.Operation (Handler => Items_Batch_Post,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/catalogs/items/batch");

      --  Perform an operation on an item batch
      procedure Items_Batch_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Catalogs_Items_Batch_Request_Type : CatalogsItemsBatchRequest_Type;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "CatalogsItemsBatchRequest_Type", Catalogs_Items_Batch_Request_Type);
         Impl.Items_Batch_Post
            (Catalogs_Items_Batch_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Items_Batch_Post;

      package API_Items_Get is
         new Swagger.Servers.Operation (Handler => Items_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/items");

      --  Get catalogs items
      procedure Items_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Country : Swagger.UString;
         Item_Ids : Swagger.UString_Vectors.Vector;
         Language : Swagger.UString;
         Result : .Models.CatalogsItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "country", Country);
         Swagger.Servers.Get_Query_Parameter (Req, "item_ids", Item_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "language", Language);
         Impl.Items_Get
            (Country,
             Item_Ids,
             Language, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Items_Get;

      package API_Media_Create is
         new Swagger.Servers.Operation (Handler => Media_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/media");

      --  Register media upload
      procedure Media_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Media_Upload_Request_Type : MediaUploadRequest_Type;
         Result : .Models.MediaUpload_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "MediaUploadRequest_Type", Media_Upload_Request_Type);
         Impl.Media_Create
            (Media_Upload_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Media_Create;

      package API_Media_Get is
         new Swagger.Servers.Operation (Handler => Media_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/media/{media_id}");

      --  Get media upload details
      procedure Media_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Media_Id : Swagger.UString;
         Result : .Models.MediaUploadDetails_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Media_Id);
         Impl.Media_Get
            (Media_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Media_Get;

      package API_Media_List is
         new Swagger.Servers.Operation (Handler => Media_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/media");

      --  List media uploads
      procedure Media_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Impl.Media_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Media_List;

      package API_Oauth_Token is
         new Swagger.Servers.Operation (Handler => Oauth_Token,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/oauth/token");

      --  Generate OAuth access token
      procedure Oauth_Token
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Grant_Type : Swagger.UString;
         Result : .Models.OauthAccessTokenResponse_Type;
      begin
         Swagger.Servers.Get_Parameter (Context, "grant_type", Grant_Type);
         Impl.Oauth_Token
            (Grant_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Oauth_Token;

      package API_Pins_Analytics is
         new Swagger.Servers.Operation (Handler => Pins_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/pins/{pin_id}/analytics");

      --  Get Pin analytics
      procedure Pins_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Metric_Types : Swagger.UString_Vectors.Vector;
         App_Types : Swagger.Nullable_UString;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.AnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "app_types", App_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "metric_types", Metric_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "split_field", Split_Field);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Pin_Id);
         Impl.Pins_Analytics
            (Pin_Id,
             Start_Date,
             End_Date,
             Metric_Types,
             App_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Pins_Analytics;

      package API_Pins_Create is
         new Swagger.Servers.Operation (Handler => Pins_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/pins");

      --  Create Pin
      procedure Pins_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Pin_Type : Pin_Type;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);

         .Models.Deserialize (Input, "Pin_Type", Pin_Type);
         Impl.Pins_Create
            (Pin_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Pins_Create;

      package API_Pins_Delete is
         new Swagger.Servers.Operation (Handler => Pins_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/pins/{pin_id}");

      --  Delete Pin
      procedure Pins_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Pin_Id);
         Impl.Pins_Delete
            (Pin_Id, Context);

      end Pins_Delete;

      package API_Pins_Get is
         new Swagger.Servers.Operation (Handler => Pins_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/pins/{pin_id}");

      --  Get Pin
      procedure Pins_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pin_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Pin_Id);
         Impl.Pins_Get
            (Pin_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Pins_Get;

      package API_User_Account_Analytics is
         new Swagger.Servers.Operation (Handler => User_Account_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_account/analytics");

      --  Get user account analytics
      procedure User_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.AnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content", From_Claimed_Content);
         Swagger.Servers.Get_Query_Parameter (Req, "pin_format", Pin_Format);
         Swagger.Servers.Get_Query_Parameter (Req, "app_types", App_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "metric_types", Metric_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "split_field", Split_Field);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Impl.User_Account_Analytics
            (Start_Date,
             End_Date,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Metric_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end User_Account_Analytics;

      package API_User_Account_Get is
         new Swagger.Servers.Operation (Handler => User_Account_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_account");

      --  Get user account
      procedure User_Account_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Account_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Impl.User_Account_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end User_Account_Get;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Ad_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Ads_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ads_List.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Get_Report.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_List.Definition);
         Swagger.Servers.Register (Server, API_Product_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Create.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Delete.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Update.Definition);
         Swagger.Servers.Register (Server, API_Boards_Create.Definition);
         Swagger.Servers.Register (Server, API_Boards_Delete.Definition);
         Swagger.Servers.Register (Server, API_Boards_Get.Definition);
         Swagger.Servers.Register (Server, API_Boards_List.Definition);
         Swagger.Servers.Register (Server, API_Boards_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Boards_Update.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Create.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Delete.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Update.Definition);
         Swagger.Servers.Register (Server, API_Feed_Processing_Results_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Create.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Delete.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Get.Definition);
         Swagger.Servers.Register (Server, API_Feeds_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Update.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Get.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Post.Definition);
         Swagger.Servers.Register (Server, API_Items_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_Create.Definition);
         Swagger.Servers.Register (Server, API_Media_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_List.Definition);
         Swagger.Servers.Register (Server, API_Oauth_Token.Definition);
         Swagger.Servers.Register (Server, API_Pins_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Pins_Create.Definition);
         Swagger.Servers.Register (Server, API_Pins_Delete.Definition);
         Swagger.Servers.Register (Server, API_Pins_Get.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Get.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Get ad account analytics
      procedure Ad_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Ad_Account_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Account_Analytics;

      package API_Ad_Account_Analytics is
         new Swagger.Servers.Operation (Handler => Ad_Account_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/analytics");

      --  List ad accounts
      procedure Ad_Accounts_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Include_Shared_Accounts : Swagger.Nullable_Boolean;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "include_shared_accounts", Include_Shared_Accounts);
         Server.Ad_Accounts_List
            (Bookmark,
             Page_Size,
             Include_Shared_Accounts, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Accounts_List;

      package API_Ad_Accounts_List is
         new Swagger.Servers.Operation (Handler => Ad_Accounts_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts");

      --  Get ad group analytics
      procedure Ad_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids", Ad_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Ad_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Ad_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Groups_Analytics;

      package API_Ad_Groups_Analytics is
         new Swagger.Servers.Operation (Handler => Ad_Groups_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups/analytics");

      --  List ad groups
      procedure Ad_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Translate_Interests_To_Names : Swagger.Nullable_Boolean;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids", Ad_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses", Entity_Statuses);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "translate_interests_to_names", Translate_Interests_To_Names);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Ad_Groups_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark,
             Translate_Interests_To_Names, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ad_Groups_List;

      package API_Ad_Groups_List is
         new Swagger.Servers.Operation (Handler => Ad_Groups_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ad_groups");

      --  Get ad analytics
      procedure Ads_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_ids", Ad_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Ads_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Ad_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ads_Analytics;

      package API_Ads_Analytics is
         new Swagger.Servers.Operation (Handler => Ads_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads/analytics");

      --  List ads
      procedure Ads_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Ad_Group_Ids : Swagger.UString_Vectors.Vector;
         Ad_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_group_ids", Ad_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_ids", Ad_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses", Entity_Statuses);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Ads_List
            (Ad_Account_Id,
             Campaign_Ids,
             Ad_Group_Ids,
             Ad_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Ads_List;

      package API_Ads_List is
         new Swagger.Servers.Operation (Handler => Ads_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/ads");

      --  Create async request for an account analytics report
      procedure Analytics_Create_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Ad_Account_Id : Swagger.UString;
         Ads_Analytics_Create_Async_Request_Type : AdsAnalyticsCreateAsyncRequest_Type;
         Result : .Models.AdsAnalyticsCreateAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "AdsAnalyticsCreateAsyncRequest_Type", Ads_Analytics_Create_Async_Request_Type);
         Server.Analytics_Create_Report
            (Ad_Account_Id,
             Ads_Analytics_Create_Async_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Analytics_Create_Report;

      package API_Analytics_Create_Report is
         new Swagger.Servers.Operation (Handler => Analytics_Create_Report,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports");

      --  Get the account analytics report created by the async call
      procedure Analytics_Get_Report
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Token : Swagger.UString;
         Result : .Models.AdsAnalyticsGetAsyncResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "token", Token);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Analytics_Get_Report
            (Ad_Account_Id,
             Token, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Analytics_Get_Report;

      package API_Analytics_Get_Report is
         new Swagger.Servers.Operation (Handler => Analytics_Get_Report,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/reports");

      --  Get campaign analytics
      procedure Campaigns_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Campaigns_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Campaign_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Campaigns_Analytics;

      package API_Campaigns_Analytics is
         new Swagger.Servers.Operation (Handler => Campaigns_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns/analytics");

      --  List campaigns
      procedure Campaigns_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Campaign_Ids : Swagger.UString_Vectors.Vector;
         Entity_Statuses : Swagger.UString_Vectors.Vector;
         Page_Size : Swagger.Nullable_Integer;
         Order : Swagger.Nullable_UString;
         Bookmark : Swagger.Nullable_UString;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "campaign_ids", Campaign_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "entity_statuses", Entity_Statuses);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Campaigns_List
            (Ad_Account_Id,
             Campaign_Ids,
             Entity_Statuses,
             Page_Size,
             Order,
             Bookmark, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Campaigns_List;

      package API_Campaigns_List is
         new Swagger.Servers.Operation (Handler => Campaigns_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/campaigns");

      --  Get product group analytics
      procedure Product_Groups_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Product_Group_Ids : Swagger.UString_Vectors.Vector;
         Columns : Swagger.UString_Vectors.Vector;
         Granularity : .Models.Granularity_Type;
         Click_Window_Days : Swagger.Nullable_Integer;
         Engagement_Window_Days : Swagger.Nullable_Integer;
         View_Window_Days : Swagger.Nullable_Integer;
         Conversion_Report_Time : Swagger.Nullable_UString;
         Result : Swagger.Object_Map_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Ads_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "product_group_ids", Product_Group_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "columns", Columns);
         Swagger.Servers.Get_Query_Parameter (Req, "granularity", Granularity);
         Swagger.Servers.Get_Query_Parameter (Req, "click_window_days", Click_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "engagement_window_days", Engagement_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "view_window_days", View_Window_Days);
         Swagger.Servers.Get_Query_Parameter (Req, "conversion_report_time", Conversion_Report_Time);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Ad_Account_Id);
         Server.Product_Groups_Analytics
            (Ad_Account_Id,
             Start_Date,
             End_Date,
             Product_Group_Ids,
             Columns,
             Granularity,
             Click_Window_Days,
             Engagement_Window_Days,
             View_Window_Days,
             Conversion_Report_Time, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Product_Groups_Analytics;

      package API_Product_Groups_Analytics is
         new Swagger.Servers.Operation (Handler => Product_Groups_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/ad_accounts/{ad_account_id}/product_groups/analytics");

      --  Create board section
      procedure Board_Sections_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Server.Board_Sections_Create
            (Board_Id,
             Board_Section_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_Create;

      package API_Board_Sections_Create is
         new Swagger.Servers.Operation (Handler => Board_Sections_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections");

      --  Delete board section
      procedure Board_Sections_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Section_Id);
         Server.Board_Sections_Delete
            (Board_Id,
             Section_Id, Context);

      end Board_Sections_Delete;

      package API_Board_Sections_Delete is
         new Swagger.Servers.Operation (Handler => Board_Sections_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}");

      --  List board sections
      procedure Board_Sections_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Server.Board_Sections_List
            (Board_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_List;

      package API_Board_Sections_List is
         new Swagger.Servers.Operation (Handler => Board_Sections_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections");

      --  List Pins on board section
      procedure Board_Sections_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Section_Id);
         Server.Board_Sections_List_Pins
            (Board_Id,
             Section_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_List_Pins;

      package API_Board_Sections_List_Pins is
         new Swagger.Servers.Operation (Handler => Board_Sections_List_Pins,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}/pins");

      --  Update board section
      procedure Board_Sections_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Id : Swagger.UString;
         Section_Id : Swagger.UString;
         Board_Section_Type : BoardSection_Type;
         Result : .Models.BoardSection_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Section_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "BoardSection_Type", Board_Section_Type);
         Server.Board_Sections_Update
            (Board_Id,
             Section_Id,
             Board_Section_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Board_Sections_Update;

      package API_Board_Sections_Update is
         new Swagger.Servers.Operation (Handler => Board_Sections_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/boards/{board_id}/sections/{section_id}");

      --  Create board
      procedure Boards_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Type : Board_Type;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "Board_Type", Board_Type);
         Server.Boards_Create
            (Board_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_Create;

      package API_Boards_Create is
         new Swagger.Servers.Operation (Handler => Boards_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/boards");

      --  Delete board
      procedure Boards_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Server.Boards_Delete
            (Board_Id, Context);

      end Boards_Delete;

      package API_Boards_Delete is
         new Swagger.Servers.Operation (Handler => Boards_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/boards/{board_id}");

      --  Get board
      procedure Boards_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Server.Boards_Get
            (Board_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_Get;

      package API_Boards_Get is
         new Swagger.Servers.Operation (Handler => Boards_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}");

      --  List boards
      procedure Boards_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Privacy : Swagger.Nullable_UString;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Query_Parameter (Req, "privacy", Privacy);
         Server.Boards_List
            (Bookmark,
             Page_Size,
             Privacy, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_List;

      package API_Boards_List is
         new Swagger.Servers.Operation (Handler => Boards_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards");

      --  List Pins on board
      procedure Boards_List_Pins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Board_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Server.Boards_List_Pins
            (Board_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_List_Pins;

      package API_Boards_List_Pins is
         new Swagger.Servers.Operation (Handler => Boards_List_Pins,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/boards/{board_id}/pins");

      --  Update board
      procedure Boards_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Board_Id : Swagger.UString;
         Board_Update_Type : BoardUpdate_Type;
         Result : .Models.Board_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Board_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "BoardUpdate_Type", Board_Update_Type);
         Server.Boards_Update
            (Board_Id,
             Board_Update_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Boards_Update;

      package API_Boards_Update is
         new Swagger.Servers.Operation (Handler => Boards_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/boards/{board_id}");

      --  Create product group
      procedure Catalogs_Product_Groups_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_Product_Group_Create_Request_Type : CatalogsProductGroupCreateRequest_Type;
         Result : Swagger.Object;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "CatalogsProductGroupCreateRequest_Type", Catalogs_Product_Group_Create_Request_Type);
         Server.Catalogs_Product_Groups_Create
            (Catalogs_Product_Group_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Catalogs_Product_Groups_Create;

      package API_Catalogs_Product_Groups_Create is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/catalogs/product_groups");

      --  Delete product group
      procedure Catalogs_Product_Groups_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Product_Group_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Product_Group_Id);
         Server.Catalogs_Product_Groups_Delete
            (Product_Group_Id, Context);

      end Catalogs_Product_Groups_Delete;

      package API_Catalogs_Product_Groups_Delete is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}");

      --  Get product groups list
      procedure Catalogs_Product_Groups_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "feed_id", Feed_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Server.Catalogs_Product_Groups_List
            (Feed_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Catalogs_Product_Groups_List;

      package API_Catalogs_Product_Groups_List is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/product_groups");

      --  Update product group
      procedure Catalogs_Product_Groups_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Product_Group_Id : Swagger.UString;
         Catalogs_Product_Group_Update_Request_Type : CatalogsProductGroupUpdateRequest_Type;
         Result : .Models.CatalogsProductGroup_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Product_Group_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "CatalogsProductGroupUpdateRequest_Type", Catalogs_Product_Group_Update_Request_Type);
         Server.Catalogs_Product_Groups_Update
            (Product_Group_Id,
             Catalogs_Product_Group_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Catalogs_Product_Groups_Update;

      package API_Catalogs_Product_Groups_Update is
         new Swagger.Servers.Operation (Handler => Catalogs_Product_Groups_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/catalogs/product_groups/{product_group_id}");

      --  List processing results for a given feed
      procedure Feed_Processing_Results_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Server.Feed_Processing_Results_List
            (Feed_Id,
             Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feed_Processing_Results_List;

      package API_Feed_Processing_Results_List is
         new Swagger.Servers.Operation (Handler => Feed_Processing_Results_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}/processing_results");

      --  Create feed
      procedure Feeds_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_Feeds_Create_Request_Type : CatalogsFeedsCreateRequest_Type;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "CatalogsFeedsCreateRequest_Type", Catalogs_Feeds_Create_Request_Type);
         Server.Feeds_Create
            (Catalogs_Feeds_Create_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_Create;

      package API_Feeds_Create is
         new Swagger.Servers.Operation (Handler => Feeds_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/catalogs/feeds");

      --  Delete feed
      procedure Feeds_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Server.Feeds_Delete
            (Feed_Id, Context);

      end Feeds_Delete;

      package API_Feeds_Delete is
         new Swagger.Servers.Operation (Handler => Feeds_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}");

      --  Get feed
      procedure Feeds_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Feed_Id : Swagger.UString;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Server.Feeds_Get
            (Feed_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_Get;

      package API_Feeds_Get is
         new Swagger.Servers.Operation (Handler => Feeds_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}");

      --  List feeds
      procedure Feeds_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Server.Feeds_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_List;

      package API_Feeds_List is
         new Swagger.Servers.Operation (Handler => Feeds_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/feeds");

      --  Update feed
      procedure Feeds_Update
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Feed_Id : Swagger.UString;
         Catalogs_Feeds_Update_Request_Type : CatalogsFeedsUpdateRequest_Type;
         Result : .Models.CatalogsFeed_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Feed_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "CatalogsFeedsUpdateRequest_Type", Catalogs_Feeds_Update_Request_Type);
         Server.Feeds_Update
            (Feed_Id,
             Catalogs_Feeds_Update_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Feeds_Update;

      package API_Feeds_Update is
         new Swagger.Servers.Operation (Handler => Feeds_Update,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/catalogs/feeds/{feed_id}");

      --  Get catalogs items batch
      procedure Items_Batch_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Batch_Id : Swagger.UString;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Batch_Id);
         Server.Items_Batch_Get
            (Batch_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Items_Batch_Get;

      package API_Items_Batch_Get is
         new Swagger.Servers.Operation (Handler => Items_Batch_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/items/batch/{batch_id}");

      --  Perform an operation on an item batch
      procedure Items_Batch_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Catalogs_Items_Batch_Request_Type : CatalogsItemsBatchRequest_Type;
         Result : .Models.CatalogsItemsBatch_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "CatalogsItemsBatchRequest_Type", Catalogs_Items_Batch_Request_Type);
         Server.Items_Batch_Post
            (Catalogs_Items_Batch_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Items_Batch_Post;

      package API_Items_Batch_Post is
         new Swagger.Servers.Operation (Handler => Items_Batch_Post,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/catalogs/items/batch");

      --  Get catalogs items
      procedure Items_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Country : Swagger.UString;
         Item_Ids : Swagger.UString_Vectors.Vector;
         Language : Swagger.UString;
         Result : .Models.CatalogsItems_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Catalogs_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "country", Country);
         Swagger.Servers.Get_Query_Parameter (Req, "item_ids", Item_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "language", Language);
         Server.Items_Get
            (Country,
             Item_Ids,
             Language, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Items_Get;

      package API_Items_Get is
         new Swagger.Servers.Operation (Handler => Items_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/catalogs/items");

      --  Register media upload
      procedure Media_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Media_Upload_Request_Type : MediaUploadRequest_Type;
         Result : .Models.MediaUpload_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "MediaUploadRequest_Type", Media_Upload_Request_Type);
         Server.Media_Create
            (Media_Upload_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Media_Create;

      package API_Media_Create is
         new Swagger.Servers.Operation (Handler => Media_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/media");

      --  Get media upload details
      procedure Media_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Media_Id : Swagger.UString;
         Result : .Models.MediaUploadDetails_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Media_Id);
         Server.Media_Get
            (Media_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Media_Get;

      package API_Media_Get is
         new Swagger.Servers.Operation (Handler => Media_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/media/{media_id}");

      --  List media uploads
      procedure Media_List
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Bookmark : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Result : .Models.Paginated_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "bookmark", Bookmark);
         Swagger.Servers.Get_Query_Parameter (Req, "page_size", Page_Size);
         Server.Media_List
            (Bookmark,
             Page_Size, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Media_List;

      package API_Media_List is
         new Swagger.Servers.Operation (Handler => Media_List,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/media");

      --  Generate OAuth access token
      procedure Oauth_Token
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Grant_Type : Swagger.UString;
         Result : .Models.OauthAccessTokenResponse_Type;
      begin
         Swagger.Servers.Get_Parameter (Context, "grant_type", Grant_Type);
         Server.Oauth_Token
            (Grant_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Oauth_Token;

      package API_Oauth_Token is
         new Swagger.Servers.Operation (Handler => Oauth_Token,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/oauth/token");

      --  Get Pin analytics
      procedure Pins_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Id : Swagger.UString;
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         Metric_Types : Swagger.UString_Vectors.Vector;
         App_Types : Swagger.Nullable_UString;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.AnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "app_types", App_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "metric_types", Metric_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "split_field", Split_Field);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Pin_Id);
         Server.Pins_Analytics
            (Pin_Id,
             Start_Date,
             End_Date,
             Metric_Types,
             App_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Pins_Analytics;

      package API_Pins_Analytics is
         new Swagger.Servers.Operation (Handler => Pins_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/pins/{pin_id}/analytics");

      --  Create Pin
      procedure Pins_Create
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Pin_Type : Pin_Type;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "Pin_Type", Pin_Type);
         Server.Pins_Create
            (Pin_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Pins_Create;

      package API_Pins_Create is
         new Swagger.Servers.Operation (Handler => Pins_Create,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/pins");

      --  Delete Pin
      procedure Pins_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Id : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Write.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Pin_Id);
         Server.Pins_Delete
            (Pin_Id, Context);

      end Pins_Delete;

      package API_Pins_Delete is
         new Swagger.Servers.Operation (Handler => Pins_Delete,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/pins/{pin_id}");

      --  Get Pin
      procedure Pins_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pin_Id : Swagger.UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Pin_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_Boards_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         if not Context.Has_Permission (ACL_Pins_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Pin_Id);
         Server.Pins_Get
            (Pin_Id,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Pins_Get;

      package API_Pins_Get is
         new Swagger.Servers.Operation (Handler => Pins_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/pins/{pin_id}");

      --  Get user account analytics
      procedure User_Account_Analytics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Start_Date : Swagger.Date;
         End_Date : Swagger.Date;
         From_Claimed_Content : Swagger.Nullable_UString;
         Pin_Format : Swagger.Nullable_UString;
         App_Types : Swagger.Nullable_UString;
         Metric_Types : Swagger.UString_Vectors.Vector;
         Split_Field : Swagger.Nullable_UString;
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : Swagger..Models.AnalyticsMetricsResponse_Type_Map;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "start_date", Start_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "end_date", End_Date);
         Swagger.Servers.Get_Query_Parameter (Req, "from_claimed_content", From_Claimed_Content);
         Swagger.Servers.Get_Query_Parameter (Req, "pin_format", Pin_Format);
         Swagger.Servers.Get_Query_Parameter (Req, "app_types", App_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "metric_types", Metric_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "split_field", Split_Field);
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Server.User_Account_Analytics
            (Start_Date,
             End_Date,
             From_Claimed_Content,
             Pin_Format,
             App_Types,
             Metric_Types,
             Split_Field,
             Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end User_Account_Analytics;

      package API_User_Account_Analytics is
         new Swagger.Servers.Operation (Handler => User_Account_Analytics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_account/analytics");

      --  Get user account
      procedure User_Account_Get
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Ad_Account_Id : Swagger.Nullable_UString;
         Result : .Models.Account_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         if not Context.Has_Permission (ACL_User_Accounts_Read.Permission) then
            Context.Set_Error (403, "Permission denied");
            return;
         end if;
         Swagger.Servers.Get_Query_Parameter (Req, "ad_account_id", Ad_Account_Id);
         Server.User_Account_Get
            (Ad_Account_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end User_Account_Get;

      package API_User_Account_Get is
         new Swagger.Servers.Operation (Handler => User_Account_Get,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_account");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Ad_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Accounts_List.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ad_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Ads_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Ads_List.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Create_Report.Definition);
         Swagger.Servers.Register (Server, API_Analytics_Get_Report.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Campaigns_List.Definition);
         Swagger.Servers.Register (Server, API_Product_Groups_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Create.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Delete.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Board_Sections_Update.Definition);
         Swagger.Servers.Register (Server, API_Boards_Create.Definition);
         Swagger.Servers.Register (Server, API_Boards_Delete.Definition);
         Swagger.Servers.Register (Server, API_Boards_Get.Definition);
         Swagger.Servers.Register (Server, API_Boards_List.Definition);
         Swagger.Servers.Register (Server, API_Boards_List_Pins.Definition);
         Swagger.Servers.Register (Server, API_Boards_Update.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Create.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Delete.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_List.Definition);
         Swagger.Servers.Register (Server, API_Catalogs_Product_Groups_Update.Definition);
         Swagger.Servers.Register (Server, API_Feed_Processing_Results_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Create.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Delete.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Get.Definition);
         Swagger.Servers.Register (Server, API_Feeds_List.Definition);
         Swagger.Servers.Register (Server, API_Feeds_Update.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Get.Definition);
         Swagger.Servers.Register (Server, API_Items_Batch_Post.Definition);
         Swagger.Servers.Register (Server, API_Items_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_Create.Definition);
         Swagger.Servers.Register (Server, API_Media_Get.Definition);
         Swagger.Servers.Register (Server, API_Media_List.Definition);
         Swagger.Servers.Register (Server, API_Oauth_Token.Definition);
         Swagger.Servers.Register (Server, API_Pins_Analytics.Definition);
         Swagger.Servers.Register (Server, API_Pins_Create.Definition);
         Swagger.Servers.Register (Server, API_Pins_Delete.Definition);
         Swagger.Servers.Register (Server, API_Pins_Get.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Analytics.Definition);
         Swagger.Servers.Register (Server, API_User_Account_Get.Definition);
      end Register;

      protected body Server is
         --  Get ad account analytics
         procedure Ad_Account_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in .Models.Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out Swagger.Object_Map_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Account_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Ad_Account_Analytics;

         --  List ad accounts
         procedure Ad_Accounts_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Include_Shared_Accounts : in Swagger.Nullable_Boolean;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Accounts_List
               (Bookmark,
                Page_Size,
                Include_Shared_Accounts,
                Result,
                Context);
         end Ad_Accounts_List;

         --  Get ad group analytics
         procedure Ad_Groups_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in .Models.Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out Swagger.Object_Map_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Ad_Group_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Ad_Groups_Analytics;

         --  List ad groups
         procedure Ad_Groups_List
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Translate_Interests_To_Names : in Swagger.Nullable_Boolean;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ad_Groups_List
               (Ad_Account_Id,
                Campaign_Ids,
                Ad_Group_Ids,
                Entity_Statuses,
                Page_Size,
                Order,
                Bookmark,
                Translate_Interests_To_Names,
                Result,
                Context);
         end Ad_Groups_List;

         --  Get ad analytics
         procedure Ads_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Ad_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in .Models.Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out Swagger.Object_Map_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Ad_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Ads_Analytics;

         --  List ads
         procedure Ads_List
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Ad_Group_Ids : in Swagger.UString_Vectors.Vector;
             Ad_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Ads_List
               (Ad_Account_Id,
                Campaign_Ids,
                Ad_Group_Ids,
                Ad_Ids,
                Entity_Statuses,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Ads_List;

         --  Create async request for an account analytics report
         procedure Analytics_Create_Report
            (Ad_Account_Id : in Swagger.UString;
             Ads_Analytics_Create_Async_Request_Type : in AdsAnalyticsCreateAsyncRequest_Type;
             Result : out .Models.AdsAnalyticsCreateAsyncResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Create_Report
               (Ad_Account_Id,
                Ads_Analytics_Create_Async_Request_Type,
                Result,
                Context);
         end Analytics_Create_Report;

         --  Get the account analytics report created by the async call
         procedure Analytics_Get_Report
            (Ad_Account_Id : in Swagger.UString;
             Token : in Swagger.UString;
             Result : out .Models.AdsAnalyticsGetAsyncResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Analytics_Get_Report
               (Ad_Account_Id,
                Token,
                Result,
                Context);
         end Analytics_Get_Report;

         --  Get campaign analytics
         procedure Campaigns_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in .Models.Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out Swagger.Object_Map_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Campaign_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Campaigns_Analytics;

         --  List campaigns
         procedure Campaigns_List
            (Ad_Account_Id : in Swagger.UString;
             Campaign_Ids : in Swagger.UString_Vectors.Vector;
             Entity_Statuses : in Swagger.UString_Vectors.Vector;
             Page_Size : in Swagger.Nullable_Integer;
             Order : in Swagger.Nullable_UString;
             Bookmark : in Swagger.Nullable_UString;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Campaigns_List
               (Ad_Account_Id,
                Campaign_Ids,
                Entity_Statuses,
                Page_Size,
                Order,
                Bookmark,
                Result,
                Context);
         end Campaigns_List;

         --  Get product group analytics
         procedure Product_Groups_Analytics
            (Ad_Account_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Product_Group_Ids : in Swagger.UString_Vectors.Vector;
             Columns : in Swagger.UString_Vectors.Vector;
             Granularity : in .Models.Granularity_Type;
             Click_Window_Days : in Swagger.Nullable_Integer;
             Engagement_Window_Days : in Swagger.Nullable_Integer;
             View_Window_Days : in Swagger.Nullable_Integer;
             Conversion_Report_Time : in Swagger.Nullable_UString;
             Result : out Swagger.Object_Map_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Product_Groups_Analytics
               (Ad_Account_Id,
                Start_Date,
                End_Date,
                Product_Group_Ids,
                Columns,
                Granularity,
                Click_Window_Days,
                Engagement_Window_Days,
                View_Window_Days,
                Conversion_Report_Time,
                Result,
                Context);
         end Product_Groups_Analytics;

         --  Create board section
         procedure Board_Sections_Create
            (Board_Id : in Swagger.UString;
             Board_Section_Type : in BoardSection_Type;
             Result : out .Models.BoardSection_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_Create
               (Board_Id,
                Board_Section_Type,
                Result,
                Context);
         end Board_Sections_Create;

         --  Delete board section
         procedure Board_Sections_Delete
            (Board_Id : in Swagger.UString;
             Section_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_Delete
               (Board_Id,
                Section_Id,
                Context);
         end Board_Sections_Delete;

         --  List board sections
         procedure Board_Sections_List
            (Board_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_List
               (Board_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Board_Sections_List;

         --  List Pins on board section
         procedure Board_Sections_List_Pins
            (Board_Id : in Swagger.UString;
             Section_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_List_Pins
               (Board_Id,
                Section_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Board_Sections_List_Pins;

         --  Update board section
         procedure Board_Sections_Update
            (Board_Id : in Swagger.UString;
             Section_Id : in Swagger.UString;
             Board_Section_Type : in BoardSection_Type;
             Result : out .Models.BoardSection_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Board_Sections_Update
               (Board_Id,
                Section_Id,
                Board_Section_Type,
                Result,
                Context);
         end Board_Sections_Update;

         --  Create board
         procedure Boards_Create
            (Board_Type : in Board_Type;
             Result : out .Models.Board_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Create
               (Board_Type,
                Result,
                Context);
         end Boards_Create;

         --  Delete board
         procedure Boards_Delete
            (Board_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Delete
               (Board_Id,
                Context);
         end Boards_Delete;

         --  Get board
         procedure Boards_Get
            (Board_Id : in Swagger.UString;
             Result : out .Models.Board_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Get
               (Board_Id,
                Result,
                Context);
         end Boards_Get;

         --  List boards
         procedure Boards_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Privacy : in Swagger.Nullable_UString;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_List
               (Bookmark,
                Page_Size,
                Privacy,
                Result,
                Context);
         end Boards_List;

         --  List Pins on board
         procedure Boards_List_Pins
            (Board_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_List_Pins
               (Board_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Boards_List_Pins;

         --  Update board
         procedure Boards_Update
            (Board_Id : in Swagger.UString;
             Board_Update_Type : in BoardUpdate_Type;
             Result : out .Models.Board_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Boards_Update
               (Board_Id,
                Board_Update_Type,
                Result,
                Context);
         end Boards_Update;

         --  Create product group
         procedure Catalogs_Product_Groups_Create
            (Catalogs_Product_Group_Create_Request_Type : in CatalogsProductGroupCreateRequest_Type;
             Result : out Swagger.Object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Create
               (Catalogs_Product_Group_Create_Request_Type,
                Result,
                Context);
         end Catalogs_Product_Groups_Create;

         --  Delete product group
         procedure Catalogs_Product_Groups_Delete
            (Product_Group_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Delete
               (Product_Group_Id,
                Context);
         end Catalogs_Product_Groups_Delete;

         --  Get product groups list
         procedure Catalogs_Product_Groups_List
            (Feed_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_List
               (Feed_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Catalogs_Product_Groups_List;

         --  Update product group
         procedure Catalogs_Product_Groups_Update
            (Product_Group_Id : in Swagger.UString;
             Catalogs_Product_Group_Update_Request_Type : in CatalogsProductGroupUpdateRequest_Type;
             Result : out .Models.CatalogsProductGroup_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Catalogs_Product_Groups_Update
               (Product_Group_Id,
                Catalogs_Product_Group_Update_Request_Type,
                Result,
                Context);
         end Catalogs_Product_Groups_Update;

         --  List processing results for a given feed
         procedure Feed_Processing_Results_List
            (Feed_Id : in Swagger.UString;
             Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feed_Processing_Results_List
               (Feed_Id,
                Bookmark,
                Page_Size,
                Result,
                Context);
         end Feed_Processing_Results_List;

         --  Create feed
         procedure Feeds_Create
            (Catalogs_Feeds_Create_Request_Type : in CatalogsFeedsCreateRequest_Type;
             Result : out .Models.CatalogsFeed_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Create
               (Catalogs_Feeds_Create_Request_Type,
                Result,
                Context);
         end Feeds_Create;

         --  Delete feed
         procedure Feeds_Delete
            (Feed_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Delete
               (Feed_Id,
                Context);
         end Feeds_Delete;

         --  Get feed
         procedure Feeds_Get
            (Feed_Id : in Swagger.UString;
             Result : out .Models.CatalogsFeed_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Get
               (Feed_Id,
                Result,
                Context);
         end Feeds_Get;

         --  List feeds
         procedure Feeds_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_List
               (Bookmark,
                Page_Size,
                Result,
                Context);
         end Feeds_List;

         --  Update feed
         procedure Feeds_Update
            (Feed_Id : in Swagger.UString;
             Catalogs_Feeds_Update_Request_Type : in CatalogsFeedsUpdateRequest_Type;
             Result : out .Models.CatalogsFeed_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Feeds_Update
               (Feed_Id,
                Catalogs_Feeds_Update_Request_Type,
                Result,
                Context);
         end Feeds_Update;

         --  Get catalogs items batch
         procedure Items_Batch_Get
            (Batch_Id : in Swagger.UString;
             Result : out .Models.CatalogsItemsBatch_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Batch_Get
               (Batch_Id,
                Result,
                Context);
         end Items_Batch_Get;

         --  Perform an operation on an item batch
         procedure Items_Batch_Post
            (Catalogs_Items_Batch_Request_Type : in CatalogsItemsBatchRequest_Type;
             Result : out .Models.CatalogsItemsBatch_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Batch_Post
               (Catalogs_Items_Batch_Request_Type,
                Result,
                Context);
         end Items_Batch_Post;

         --  Get catalogs items
         procedure Items_Get
            (Country : in Swagger.UString;
             Item_Ids : in Swagger.UString_Vectors.Vector;
             Language : in Swagger.UString;
             Result : out .Models.CatalogsItems_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Items_Get
               (Country,
                Item_Ids,
                Language,
                Result,
                Context);
         end Items_Get;

         --  Register media upload
         procedure Media_Create
            (Media_Upload_Request_Type : in MediaUploadRequest_Type;
             Result : out .Models.MediaUpload_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Media_Create
               (Media_Upload_Request_Type,
                Result,
                Context);
         end Media_Create;

         --  Get media upload details
         procedure Media_Get
            (Media_Id : in Swagger.UString;
             Result : out .Models.MediaUploadDetails_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Media_Get
               (Media_Id,
                Result,
                Context);
         end Media_Get;

         --  List media uploads
         procedure Media_List
            (Bookmark : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Result : out .Models.Paginated_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Media_List
               (Bookmark,
                Page_Size,
                Result,
                Context);
         end Media_List;

         --  Generate OAuth access token
         procedure Oauth_Token
            (Grant_Type : in Swagger.UString;
             Result : out .Models.OauthAccessTokenResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Oauth_Token
               (Grant_Type,
                Result,
                Context);
         end Oauth_Token;

         --  Get Pin analytics
         procedure Pins_Analytics
            (Pin_Id : in Swagger.UString;
             Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             Metric_Types : in Swagger.UString_Vectors.Vector;
             App_Types : in Swagger.Nullable_UString;
             Split_Field : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger..Models.AnalyticsMetricsResponse_Type_Map;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Analytics
               (Pin_Id,
                Start_Date,
                End_Date,
                Metric_Types,
                App_Types,
                Split_Field,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Analytics;

         --  Create Pin
         procedure Pins_Create
            (Pin_Type : in Pin_Type;
             Result : out .Models.Pin_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Create
               (Pin_Type,
                Result,
                Context);
         end Pins_Create;

         --  Delete Pin
         procedure Pins_Delete
            (Pin_Id : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Delete
               (Pin_Id,
                Context);
         end Pins_Delete;

         --  Get Pin
         procedure Pins_Get
            (Pin_Id : in Swagger.UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Pin_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Pins_Get
               (Pin_Id,
                Ad_Account_Id,
                Result,
                Context);
         end Pins_Get;

         --  Get user account analytics
         procedure User_Account_Analytics
            (Start_Date : in Swagger.Date;
             End_Date : in Swagger.Date;
             From_Claimed_Content : in Swagger.Nullable_UString;
             Pin_Format : in Swagger.Nullable_UString;
             App_Types : in Swagger.Nullable_UString;
             Metric_Types : in Swagger.UString_Vectors.Vector;
             Split_Field : in Swagger.Nullable_UString;
             Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out Swagger..Models.AnalyticsMetricsResponse_Type_Map;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Analytics
               (Start_Date,
                End_Date,
                From_Claimed_Content,
                Pin_Format,
                App_Types,
                Metric_Types,
                Split_Field,
                Ad_Account_Id,
                Result,
                Context);
         end User_Account_Analytics;

         --  Get user account
         procedure User_Account_Get
            (Ad_Account_Id : in Swagger.Nullable_UString;
             Result : out .Models.Account_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.User_Account_Get
               (Ad_Account_Id,
                Result,
                Context);
         end User_Account_Get;

      end Server;

   end Shared_Instance;

end .Skeletons;
