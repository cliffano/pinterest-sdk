/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Board
import org.openapitools.client.model.BoardSection
import org.openapitools.client.model.BoardUpdate
import org.openapitools.client.model.Error
import org.openapitools.client.model.Paginated
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class BoardsApi(
  val defBasePath: String = "https://api.pinterest.com/v5",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new BoardsApiAsyncHelper(client, config)

  /**
   * Create board section
   * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param boardSection Create a board section. 
   * @return BoardSection
   */
  def boardSectionsCreate(boardId: String, boardSection: BoardSection): Option[BoardSection] = {
    val await = Try(Await.result(boardSectionsCreateAsync(boardId, boardSection), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create board section asynchronously
   * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param boardSection Create a board section. 
   * @return Future(BoardSection)
   */
  def boardSectionsCreateAsync(boardId: String, boardSection: BoardSection): Future[BoardSection] = {
      helper.boardSectionsCreate(boardId, boardSection)
  }

  /**
   * Delete board section
   * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param sectionId Unique identifier of a board section. 
   * @return void
   */
  def boardSectionsDelete(boardId: String, sectionId: String) = {
    val await = Try(Await.result(boardSectionsDeleteAsync(boardId, sectionId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete board section asynchronously
   * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param sectionId Unique identifier of a board section. 
   * @return Future(void)
   */
  def boardSectionsDeleteAsync(boardId: String, sectionId: String) = {
      helper.boardSectionsDelete(boardId, sectionId)
  }

  /**
   * List board sections
   * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @return Paginated
   */
  def boardSectionsList(boardId: String, bookmark: Option[String] = None, pageSize: Option[Integer] = None): Option[Paginated] = {
    val await = Try(Await.result(boardSectionsListAsync(boardId, bookmark, pageSize), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List board sections asynchronously
   * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @return Future(Paginated)
   */
  def boardSectionsListAsync(boardId: String, bookmark: Option[String] = None, pageSize: Option[Integer] = None): Future[Paginated] = {
      helper.boardSectionsList(boardId, bookmark, pageSize)
  }

  /**
   * List Pins on board section
   * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param sectionId Unique identifier of a board section. 
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @return Paginated
   */
  def boardSectionsListPins(boardId: String, sectionId: String, bookmark: Option[String] = None, pageSize: Option[Integer] = None): Option[Paginated] = {
    val await = Try(Await.result(boardSectionsListPinsAsync(boardId, sectionId, bookmark, pageSize), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List Pins on board section asynchronously
   * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param sectionId Unique identifier of a board section. 
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @return Future(Paginated)
   */
  def boardSectionsListPinsAsync(boardId: String, sectionId: String, bookmark: Option[String] = None, pageSize: Option[Integer] = None): Future[Paginated] = {
      helper.boardSectionsListPins(boardId, sectionId, bookmark, pageSize)
  }

  /**
   * Update board section
   * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param sectionId Unique identifier of a board section. 
   * @param boardSection Update a board section. 
   * @return BoardSection
   */
  def boardSectionsUpdate(boardId: String, sectionId: String, boardSection: BoardSection): Option[BoardSection] = {
    val await = Try(Await.result(boardSectionsUpdateAsync(boardId, sectionId, boardSection), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update board section asynchronously
   * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param sectionId Unique identifier of a board section. 
   * @param boardSection Update a board section. 
   * @return Future(BoardSection)
   */
  def boardSectionsUpdateAsync(boardId: String, sectionId: String, boardSection: BoardSection): Future[BoardSection] = {
      helper.boardSectionsUpdate(boardId, sectionId, boardSection)
  }

  /**
   * Create board
   * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param board Create a board using a single board json object. 
   * @return Board
   */
  def boardsCreate(board: Board): Option[Board] = {
    val await = Try(Await.result(boardsCreateAsync(board), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create board asynchronously
   * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param board Create a board using a single board json object. 
   * @return Future(Board)
   */
  def boardsCreateAsync(board: Board): Future[Board] = {
      helper.boardsCreate(board)
  }

  /**
   * Delete board
   * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @return void
   */
  def boardsDelete(boardId: String) = {
    val await = Try(Await.result(boardsDeleteAsync(boardId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete board asynchronously
   * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @return Future(void)
   */
  def boardsDeleteAsync(boardId: String) = {
      helper.boardsDelete(boardId)
  }

  /**
   * Get board
   * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @return Board
   */
  def boardsGet(boardId: String): Option[Board] = {
    val await = Try(Await.result(boardsGetAsync(boardId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get board asynchronously
   * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @return Future(Board)
   */
  def boardsGetAsync(boardId: String): Future[Board] = {
      helper.boardsGet(boardId)
  }

  /**
   * List boards
   * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
   *
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param privacy Privacy setting for a board. (optional)
   * @return Paginated
   */
  def boardsList(bookmark: Option[String] = None, pageSize: Option[Integer] = None, privacy: Option[String] = None): Option[Paginated] = {
    val await = Try(Await.result(boardsListAsync(bookmark, pageSize, privacy), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List boards asynchronously
   * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
   *
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param privacy Privacy setting for a board. (optional)
   * @return Future(Paginated)
   */
  def boardsListAsync(bookmark: Option[String] = None, pageSize: Option[Integer] = None, privacy: Option[String] = None): Future[Paginated] = {
      helper.boardsList(bookmark, pageSize, privacy)
  }

  /**
   * List Pins on board
   * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @return Paginated
   */
  def boardsListPins(boardId: String, bookmark: Option[String] = None, pageSize: Option[Integer] = None): Option[Paginated] = {
    val await = Try(Await.result(boardsListPinsAsync(boardId, bookmark, pageSize), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List Pins on board asynchronously
   * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   *
   * @param boardId Unique identifier of a board. 
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @return Future(Paginated)
   */
  def boardsListPinsAsync(boardId: String, bookmark: Option[String] = None, pageSize: Option[Integer] = None): Future[Paginated] = {
      helper.boardsListPins(boardId, bookmark, pageSize)
  }

  /**
   * Update board
   * Update a board owned by the \&quot;operating user_account\&quot;.
   *
   * @param boardId Unique identifier of a board. 
   * @param boardUpdate Update a board. 
   * @return Board
   */
  def boardsUpdate(boardId: String, boardUpdate: BoardUpdate): Option[Board] = {
    val await = Try(Await.result(boardsUpdateAsync(boardId, boardUpdate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update board asynchronously
   * Update a board owned by the \&quot;operating user_account\&quot;.
   *
   * @param boardId Unique identifier of a board. 
   * @param boardUpdate Update a board. 
   * @return Future(Board)
   */
  def boardsUpdateAsync(boardId: String, boardUpdate: BoardUpdate): Future[Board] = {
      helper.boardsUpdate(boardId, boardUpdate)
  }

}

class BoardsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def boardSectionsCreate(boardId: String,
    boardSection: BoardSection)(implicit reader: ClientResponseReader[BoardSection], writer: RequestWriter[BoardSection]): Future[BoardSection] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}/sections")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardSectionsCreate")

    if (boardSection == null) throw new Exception("Missing required parameter 'boardSection' when calling BoardsApi->boardSectionsCreate")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(boardSection))
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardSectionsDelete(boardId: String,
    sectionId: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}/sections/{section_id}")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString)
      replaceAll("\\{" + "section_id" + "\\}", sectionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardSectionsDelete")

    if (sectionId == null) throw new Exception("Missing required parameter 'sectionId' when calling BoardsApi->boardSectionsDelete")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardSectionsList(boardId: String,
    bookmark: Option[String] = None,
    pageSize: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}/sections")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardSectionsList")

    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardSectionsListPins(boardId: String,
    sectionId: String,
    bookmark: Option[String] = None,
    pageSize: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}/sections/{section_id}/pins")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString)
      replaceAll("\\{" + "section_id" + "\\}", sectionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardSectionsListPins")

    if (sectionId == null) throw new Exception("Missing required parameter 'sectionId' when calling BoardsApi->boardSectionsListPins")

    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardSectionsUpdate(boardId: String,
    sectionId: String,
    boardSection: BoardSection)(implicit reader: ClientResponseReader[BoardSection], writer: RequestWriter[BoardSection]): Future[BoardSection] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}/sections/{section_id}")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString)
      replaceAll("\\{" + "section_id" + "\\}", sectionId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardSectionsUpdate")

    if (sectionId == null) throw new Exception("Missing required parameter 'sectionId' when calling BoardsApi->boardSectionsUpdate")

    if (boardSection == null) throw new Exception("Missing required parameter 'boardSection' when calling BoardsApi->boardSectionsUpdate")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(boardSection))
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardsCreate(board: Board)(implicit reader: ClientResponseReader[Board], writer: RequestWriter[Board]): Future[Board] = {
    // create path and map variables
    val path = (addFmt("/boards"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (board == null) throw new Exception("Missing required parameter 'board' when calling BoardsApi->boardsCreate")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(board))
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardsDelete(boardId: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardsDelete")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardsGet(boardId: String)(implicit reader: ClientResponseReader[Board]): Future[Board] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardsGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardsList(bookmark: Option[String] = None,
    pageSize: Option[Integer] = None,
    privacy: Option[String] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/boards"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }
    privacy match {
      case Some(param) => queryParams += "privacy" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardsListPins(boardId: String,
    bookmark: Option[String] = None,
    pageSize: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}/pins")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardsListPins")

    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def boardsUpdate(boardId: String,
    boardUpdate: BoardUpdate)(implicit reader: ClientResponseReader[Board], writer: RequestWriter[BoardUpdate]): Future[Board] = {
    // create path and map variables
    val path = (addFmt("/boards/{board_id}")
      replaceAll("\\{" + "board_id" + "\\}", boardId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (boardId == null) throw new Exception("Missing required parameter 'boardId' when calling BoardsApi->boardsUpdate")

    if (boardUpdate == null) throw new Exception("Missing required parameter 'boardUpdate' when calling BoardsApi->boardsUpdate")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(boardUpdate))
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
