/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.AdsAnalyticsCreateAsyncRequest
import org.openapitools.client.model.AdsAnalyticsCreateAsyncResponse
import org.openapitools.client.model.AdsAnalyticsGetAsyncResponse
import org.openapitools.client.model.AnyType
import java.util.Date
import org.openapitools.client.model.Error
import org.openapitools.client.model.Granularity
import org.openapitools.client.model.Paginated
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class AdAccountsApi(
  val defBasePath: String = "https://api.pinterest.com/v5",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AdAccountsApiAsyncHelper(client, config)

  /**
   * Get ad account analytics
   * Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return List[Map[String, Any]]
   */
  def adAccountAnalytics(adAccountId: String, startDate: Date, endDate: Date, columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Option[List[Map[String, Any]]] = {
    val await = Try(Await.result(adAccountAnalyticsAsync(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get ad account analytics asynchronously
   * Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return Future(List[Map[String, Any]])
   */
  def adAccountAnalyticsAsync(adAccountId: String, startDate: Date, endDate: Date, columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Future[List[Map[String, Any]]] = {
      helper.adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime)
  }

  /**
   * List ad accounts
   * Get a list of the ad_accounts that the \&quot;operation user_account\&quot; has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;.
   *
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param includeSharedAccounts Include shared ad accounts (optional, default to true)
   * @return Paginated
   */
  def adAccountsList(bookmark: Option[String] = None, pageSize: Option[Integer] = None, includeSharedAccounts: Option[Boolean] = None): Option[Paginated] = {
    val await = Try(Await.result(adAccountsListAsync(bookmark, pageSize, includeSharedAccounts), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List ad accounts asynchronously
   * Get a list of the ad_accounts that the \&quot;operation user_account\&quot; has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;.
   *
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param includeSharedAccounts Include shared ad accounts (optional, default to true)
   * @return Future(Paginated)
   */
  def adAccountsListAsync(bookmark: Option[String] = None, pageSize: Option[Integer] = None, includeSharedAccounts: Option[Boolean] = None): Future[Paginated] = {
      helper.adAccountsList(bookmark, pageSize, includeSharedAccounts)
  }

  /**
   * Get ad group analytics
   * Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param adGroupIds List of Ad group Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return List[Map[String, Any]]
   */
  def adGroupsAnalytics(adAccountId: String, startDate: Date, endDate: Date, adGroupIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Option[List[Map[String, Any]]] = {
    val await = Try(Await.result(adGroupsAnalyticsAsync(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get ad group analytics asynchronously
   * Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param adGroupIds List of Ad group Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return Future(List[Map[String, Any]])
   */
  def adGroupsAnalyticsAsync(adAccountId: String, startDate: Date, endDate: Date, adGroupIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Future[List[Map[String, Any]]] = {
      helper.adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime)
  }

  /**
   * List ad groups
   * Get a list of the ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param campaignIds List of Campaign Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param adGroupIds List of Ad group Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param entityStatuses Entity status (optional, default to new ListBuffer[String]() )
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs. (optional, default to false)
   * @return Paginated
   */
  def adGroupsList(adAccountId: String, campaignIds: Option[List[String]] = None, adGroupIds: Option[List[String]] = None, entityStatuses: Option[List[String]] = None, pageSize: Option[Integer] = None, order: Option[String] = None, bookmark: Option[String] = None, translateInterestsToNames: Option[Boolean] = None): Option[Paginated] = {
    val await = Try(Await.result(adGroupsListAsync(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List ad groups asynchronously
   * Get a list of the ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param campaignIds List of Campaign Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param adGroupIds List of Ad group Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param entityStatuses Entity status (optional, default to new ListBuffer[String]() )
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @param translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs. (optional, default to false)
   * @return Future(Paginated)
   */
  def adGroupsListAsync(adAccountId: String, campaignIds: Option[List[String]] = None, adGroupIds: Option[List[String]] = None, entityStatuses: Option[List[String]] = None, pageSize: Option[Integer] = None, order: Option[String] = None, bookmark: Option[String] = None, translateInterestsToNames: Option[Boolean] = None): Future[Paginated] = {
      helper.adGroupsList(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames)
  }

  /**
   * Get ad analytics
   * Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param adIds List of Ad Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return List[Map[String, Any]]
   */
  def adsAnalytics(adAccountId: String, startDate: Date, endDate: Date, adIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Option[List[Map[String, Any]]] = {
    val await = Try(Await.result(adsAnalyticsAsync(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get ad analytics asynchronously
   * Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param adIds List of Ad Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return Future(List[Map[String, Any]])
   */
  def adsAnalyticsAsync(adAccountId: String, startDate: Date, endDate: Date, adIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Future[List[Map[String, Any]]] = {
      helper.adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime)
  }

  /**
   * List ads
   * Get a list of the ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param campaignIds List of Campaign Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param adGroupIds List of Ad group Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param adIds List of Ad Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param entityStatuses Entity status (optional, default to new ListBuffer[String]() )
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @return Paginated
   */
  def adsList(adAccountId: String, campaignIds: Option[List[String]] = None, adGroupIds: Option[List[String]] = None, adIds: Option[List[String]] = None, entityStatuses: Option[List[String]] = None, pageSize: Option[Integer] = None, order: Option[String] = None, bookmark: Option[String] = None): Option[Paginated] = {
    val await = Try(Await.result(adsListAsync(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List ads asynchronously
   * Get a list of the ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param campaignIds List of Campaign Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param adGroupIds List of Ad group Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param adIds List of Ad Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param entityStatuses Entity status (optional, default to new ListBuffer[String]() )
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @return Future(Paginated)
   */
  def adsListAsync(adAccountId: String, campaignIds: Option[List[String]] = None, adGroupIds: Option[List[String]] = None, adIds: Option[List[String]] = None, entityStatuses: Option[List[String]] = None, pageSize: Option[Integer] = None, order: Option[String] = None, bookmark: Option[String] = None): Future[Paginated] = {
      helper.adsList(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark)
  }

  /**
   * Create async request for an account analytics report
   * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param adsAnalyticsCreateAsyncRequest  
   * @return AdsAnalyticsCreateAsyncResponse
   */
  def analyticsCreateReport(adAccountId: String, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest): Option[AdsAnalyticsCreateAsyncResponse] = {
    val await = Try(Await.result(analyticsCreateReportAsync(adAccountId, adsAnalyticsCreateAsyncRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create async request for an account analytics report asynchronously
   * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param adsAnalyticsCreateAsyncRequest  
   * @return Future(AdsAnalyticsCreateAsyncResponse)
   */
  def analyticsCreateReportAsync(adAccountId: String, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest): Future[AdsAnalyticsCreateAsyncResponse] = {
      helper.analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest)
  }

  /**
   * Get the account analytics report created by the async call
   * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it&#39;s valid for an hour. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param token Token returned from the post request creation call 
   * @return AdsAnalyticsGetAsyncResponse
   */
  def analyticsGetReport(adAccountId: String, token: String): Option[AdsAnalyticsGetAsyncResponse] = {
    val await = Try(Await.result(analyticsGetReportAsync(adAccountId, token), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the account analytics report created by the async call asynchronously
   * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it&#39;s valid for an hour. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param token Token returned from the post request creation call 
   * @return Future(AdsAnalyticsGetAsyncResponse)
   */
  def analyticsGetReportAsync(adAccountId: String, token: String): Future[AdsAnalyticsGetAsyncResponse] = {
      helper.analyticsGetReport(adAccountId, token)
  }

  /**
   * Get campaign analytics
   * Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param campaignIds List of Campaign Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return List[Map[String, Any]]
   */
  def campaignsAnalytics(adAccountId: String, startDate: Date, endDate: Date, campaignIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Option[List[Map[String, Any]]] = {
    val await = Try(Await.result(campaignsAnalyticsAsync(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get campaign analytics asynchronously
   * Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param campaignIds List of Campaign Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return Future(List[Map[String, Any]])
   */
  def campaignsAnalyticsAsync(adAccountId: String, startDate: Date, endDate: Date, campaignIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Future[List[Map[String, Any]]] = {
      helper.campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime)
  }

  /**
   * List campaigns
   * Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param campaignIds List of Campaign Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param entityStatuses Entity status (optional, default to new ListBuffer[String]() )
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @return Paginated
   */
  def campaignsList(adAccountId: String, campaignIds: Option[List[String]] = None, entityStatuses: Option[List[String]] = None, pageSize: Option[Integer] = None, order: Option[String] = None, bookmark: Option[String] = None): Option[Paginated] = {
    val await = Try(Await.result(campaignsListAsync(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * List campaigns asynchronously
   * Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param campaignIds List of Campaign Ids to use to filter the results. (optional, default to new ListBuffer[String]() )
   * @param entityStatuses Entity status (optional, default to new ListBuffer[String]() )
   * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
   * @param order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
   * @param bookmark Cursor used to fetch the next page of items (optional)
   * @return Future(Paginated)
   */
  def campaignsListAsync(adAccountId: String, campaignIds: Option[List[String]] = None, entityStatuses: Option[List[String]] = None, pageSize: Option[Integer] = None, order: Option[String] = None, bookmark: Option[String] = None): Future[Paginated] = {
      helper.campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark)
  }

  /**
   * Get product group analytics
   * Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param productGroupIds List of Product group Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return List[Map[String, Any]]
   */
  def productGroupsAnalytics(adAccountId: String, startDate: Date, endDate: Date, productGroupIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Option[List[Map[String, Any]]] = {
    val await = Try(Await.result(productGroupsAnalyticsAsync(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get product group analytics asynchronously
   * Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   *
   * @param adAccountId Unique identifier of an ad account. 
   * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD 
   * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD 
   * @param productGroupIds List of Product group Ids to use to filter the results. 
   * @param columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
   * @param granularity Granularity 
   * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to 30)
   * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to 1)
   * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to TIME_OF_AD_ACTION)
   * @return Future(List[Map[String, Any]])
   */
  def productGroupsAnalyticsAsync(adAccountId: String, startDate: Date, endDate: Date, productGroupIds: List[String], columns: List[String], granularity: Granularity, clickWindowDays: Option[Integer] = None, engagementWindowDays: Option[Integer] = None, viewWindowDays: Option[Integer] = None, conversionReportTime: Option[String] = None): Future[List[Map[String, Any]]] = {
      helper.productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime)
  }

}

class AdAccountsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def adAccountAnalytics(adAccountId: String,
    startDate: Date,
    endDate: Date,
    columns: List[String],
    granularity: Granularity,
    clickWindowDays: Option[Integer] = None,
    engagementWindowDays: Option[Integer] = None,
    viewWindowDays: Option[Integer] = None,
    conversionReportTime: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Map[String, Any]]]): Future[List[Map[String, Any]]] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/analytics")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->adAccountAnalytics")

    if (columns == null) throw new Exception("Missing required parameter 'columns' when calling AdAccountsApi->adAccountAnalytics")
    if (granularity == null) throw new Exception("Missing required parameter 'granularity' when calling AdAccountsApi->adAccountAnalytics")
    queryParams += "start_date" -> startDate.toString
    queryParams += "end_date" -> endDate.toString
    queryParams += "columns" -> columns.toString
    queryParams += "granularity" -> granularity.toString
    clickWindowDays match {
      case Some(param) => queryParams += "click_window_days" -> param.toString
      case _ => queryParams
    }
    engagementWindowDays match {
      case Some(param) => queryParams += "engagement_window_days" -> param.toString
      case _ => queryParams
    }
    viewWindowDays match {
      case Some(param) => queryParams += "view_window_days" -> param.toString
      case _ => queryParams
    }
    conversionReportTime match {
      case Some(param) => queryParams += "conversion_report_time" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def adAccountsList(bookmark: Option[String] = None,
    pageSize: Option[Integer] = None,
    includeSharedAccounts: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }
    includeSharedAccounts match {
      case Some(param) => queryParams += "include_shared_accounts" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def adGroupsAnalytics(adAccountId: String,
    startDate: Date,
    endDate: Date,
    adGroupIds: List[String],
    columns: List[String],
    granularity: Granularity,
    clickWindowDays: Option[Integer] = None,
    engagementWindowDays: Option[Integer] = None,
    viewWindowDays: Option[Integer] = None,
    conversionReportTime: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Map[String, Any]]]): Future[List[Map[String, Any]]] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/ad_groups/analytics")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->adGroupsAnalytics")

    if (adGroupIds == null) throw new Exception("Missing required parameter 'adGroupIds' when calling AdAccountsApi->adGroupsAnalytics")
    if (columns == null) throw new Exception("Missing required parameter 'columns' when calling AdAccountsApi->adGroupsAnalytics")
    if (granularity == null) throw new Exception("Missing required parameter 'granularity' when calling AdAccountsApi->adGroupsAnalytics")
    queryParams += "start_date" -> startDate.toString
    queryParams += "end_date" -> endDate.toString
    queryParams += "ad_group_ids" -> adGroupIds.toString
    queryParams += "columns" -> columns.toString
    queryParams += "granularity" -> granularity.toString
    clickWindowDays match {
      case Some(param) => queryParams += "click_window_days" -> param.toString
      case _ => queryParams
    }
    engagementWindowDays match {
      case Some(param) => queryParams += "engagement_window_days" -> param.toString
      case _ => queryParams
    }
    viewWindowDays match {
      case Some(param) => queryParams += "view_window_days" -> param.toString
      case _ => queryParams
    }
    conversionReportTime match {
      case Some(param) => queryParams += "conversion_report_time" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def adGroupsList(adAccountId: String,
    campaignIds: Option[List[String]] = None,
    adGroupIds: Option[List[String]] = None,
    entityStatuses: Option[List[String]] = None,
    pageSize: Option[Integer] = None,
    order: Option[String] = None,
    bookmark: Option[String] = None,
    translateInterestsToNames: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/ad_groups")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->adGroupsList")

    campaignIds match {
      case Some(param) => queryParams += "campaign_ids" -> param.toString
      case _ => queryParams
    }
    adGroupIds match {
      case Some(param) => queryParams += "ad_group_ids" -> param.toString
      case _ => queryParams
    }
    entityStatuses match {
      case Some(param) => queryParams += "entity_statuses" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }
    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }
    translateInterestsToNames match {
      case Some(param) => queryParams += "translate_interests_to_names" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def adsAnalytics(adAccountId: String,
    startDate: Date,
    endDate: Date,
    adIds: List[String],
    columns: List[String],
    granularity: Granularity,
    clickWindowDays: Option[Integer] = None,
    engagementWindowDays: Option[Integer] = None,
    viewWindowDays: Option[Integer] = None,
    conversionReportTime: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Map[String, Any]]]): Future[List[Map[String, Any]]] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/ads/analytics")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->adsAnalytics")

    if (adIds == null) throw new Exception("Missing required parameter 'adIds' when calling AdAccountsApi->adsAnalytics")
    if (columns == null) throw new Exception("Missing required parameter 'columns' when calling AdAccountsApi->adsAnalytics")
    if (granularity == null) throw new Exception("Missing required parameter 'granularity' when calling AdAccountsApi->adsAnalytics")
    queryParams += "start_date" -> startDate.toString
    queryParams += "end_date" -> endDate.toString
    queryParams += "ad_ids" -> adIds.toString
    queryParams += "columns" -> columns.toString
    queryParams += "granularity" -> granularity.toString
    clickWindowDays match {
      case Some(param) => queryParams += "click_window_days" -> param.toString
      case _ => queryParams
    }
    engagementWindowDays match {
      case Some(param) => queryParams += "engagement_window_days" -> param.toString
      case _ => queryParams
    }
    viewWindowDays match {
      case Some(param) => queryParams += "view_window_days" -> param.toString
      case _ => queryParams
    }
    conversionReportTime match {
      case Some(param) => queryParams += "conversion_report_time" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def adsList(adAccountId: String,
    campaignIds: Option[List[String]] = None,
    adGroupIds: Option[List[String]] = None,
    adIds: Option[List[String]] = None,
    entityStatuses: Option[List[String]] = None,
    pageSize: Option[Integer] = None,
    order: Option[String] = None,
    bookmark: Option[String] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/ads")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->adsList")

    campaignIds match {
      case Some(param) => queryParams += "campaign_ids" -> param.toString
      case _ => queryParams
    }
    adGroupIds match {
      case Some(param) => queryParams += "ad_group_ids" -> param.toString
      case _ => queryParams
    }
    adIds match {
      case Some(param) => queryParams += "ad_ids" -> param.toString
      case _ => queryParams
    }
    entityStatuses match {
      case Some(param) => queryParams += "entity_statuses" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }
    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def analyticsCreateReport(adAccountId: String,
    adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest)(implicit reader: ClientResponseReader[AdsAnalyticsCreateAsyncResponse], writer: RequestWriter[AdsAnalyticsCreateAsyncRequest]): Future[AdsAnalyticsCreateAsyncResponse] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/reports")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->analyticsCreateReport")

    if (adsAnalyticsCreateAsyncRequest == null) throw new Exception("Missing required parameter 'adsAnalyticsCreateAsyncRequest' when calling AdAccountsApi->analyticsCreateReport")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(adsAnalyticsCreateAsyncRequest))
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def analyticsGetReport(adAccountId: String,
    token: String)(implicit reader: ClientResponseReader[AdsAnalyticsGetAsyncResponse]): Future[AdsAnalyticsGetAsyncResponse] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/reports")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->analyticsGetReport")

    if (token == null) throw new Exception("Missing required parameter 'token' when calling AdAccountsApi->analyticsGetReport")

    queryParams += "token" -> token.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def campaignsAnalytics(adAccountId: String,
    startDate: Date,
    endDate: Date,
    campaignIds: List[String],
    columns: List[String],
    granularity: Granularity,
    clickWindowDays: Option[Integer] = None,
    engagementWindowDays: Option[Integer] = None,
    viewWindowDays: Option[Integer] = None,
    conversionReportTime: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Map[String, Any]]]): Future[List[Map[String, Any]]] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/campaigns/analytics")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->campaignsAnalytics")

    if (campaignIds == null) throw new Exception("Missing required parameter 'campaignIds' when calling AdAccountsApi->campaignsAnalytics")
    if (columns == null) throw new Exception("Missing required parameter 'columns' when calling AdAccountsApi->campaignsAnalytics")
    if (granularity == null) throw new Exception("Missing required parameter 'granularity' when calling AdAccountsApi->campaignsAnalytics")
    queryParams += "start_date" -> startDate.toString
    queryParams += "end_date" -> endDate.toString
    queryParams += "campaign_ids" -> campaignIds.toString
    queryParams += "columns" -> columns.toString
    queryParams += "granularity" -> granularity.toString
    clickWindowDays match {
      case Some(param) => queryParams += "click_window_days" -> param.toString
      case _ => queryParams
    }
    engagementWindowDays match {
      case Some(param) => queryParams += "engagement_window_days" -> param.toString
      case _ => queryParams
    }
    viewWindowDays match {
      case Some(param) => queryParams += "view_window_days" -> param.toString
      case _ => queryParams
    }
    conversionReportTime match {
      case Some(param) => queryParams += "conversion_report_time" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def campaignsList(adAccountId: String,
    campaignIds: Option[List[String]] = None,
    entityStatuses: Option[List[String]] = None,
    pageSize: Option[Integer] = None,
    order: Option[String] = None,
    bookmark: Option[String] = None
    )(implicit reader: ClientResponseReader[Paginated]): Future[Paginated] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/campaigns")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->campaignsList")

    campaignIds match {
      case Some(param) => queryParams += "campaign_ids" -> param.toString
      case _ => queryParams
    }
    entityStatuses match {
      case Some(param) => queryParams += "entity_statuses" -> param.toString
      case _ => queryParams
    }
    pageSize match {
      case Some(param) => queryParams += "page_size" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }
    bookmark match {
      case Some(param) => queryParams += "bookmark" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def productGroupsAnalytics(adAccountId: String,
    startDate: Date,
    endDate: Date,
    productGroupIds: List[String],
    columns: List[String],
    granularity: Granularity,
    clickWindowDays: Option[Integer] = None,
    engagementWindowDays: Option[Integer] = None,
    viewWindowDays: Option[Integer] = None,
    conversionReportTime: Option[String] = None
    )(implicit reader: ClientResponseReader[List[Map[String, Any]]]): Future[List[Map[String, Any]]] = {
    // create path and map variables
    val path = (addFmt("/ad_accounts/{ad_account_id}/product_groups/analytics")
      replaceAll("\\{" + "ad_account_id" + "\\}", adAccountId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (adAccountId == null) throw new Exception("Missing required parameter 'adAccountId' when calling AdAccountsApi->productGroupsAnalytics")

    if (productGroupIds == null) throw new Exception("Missing required parameter 'productGroupIds' when calling AdAccountsApi->productGroupsAnalytics")
    if (columns == null) throw new Exception("Missing required parameter 'columns' when calling AdAccountsApi->productGroupsAnalytics")
    if (granularity == null) throw new Exception("Missing required parameter 'granularity' when calling AdAccountsApi->productGroupsAnalytics")
    queryParams += "start_date" -> startDate.toString
    queryParams += "end_date" -> endDate.toString
    queryParams += "product_group_ids" -> productGroupIds.toString
    queryParams += "columns" -> columns.toString
    queryParams += "granularity" -> granularity.toString
    clickWindowDays match {
      case Some(param) => queryParams += "click_window_days" -> param.toString
      case _ => queryParams
    }
    engagementWindowDays match {
      case Some(param) => queryParams += "engagement_window_days" -> param.toString
      case _ => queryParams
    }
    viewWindowDays match {
      case Some(param) => queryParams += "view_window_days" -> param.toString
      case _ => queryParams
    }
    conversionReportTime match {
      case Some(param) => queryParams += "conversion_report_time" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
