# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class TopVideoPinsAnalyticsResponse(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class date_availability(
        DictSchema
    ):
        latest_available_timestamp = NumberSchema
        is_realtime = BoolSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            latest_available_timestamp: typing.Union[latest_available_timestamp, Unset] = unset,
            is_realtime: typing.Union[is_realtime, Unset] = unset,
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'date_availability':
            return super().__new__(
                cls,
                *args,
                latest_available_timestamp=latest_available_timestamp,
                is_realtime=is_realtime,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class pins(
        ListSchema
    ):
        
        
        class _items(
            DictSchema
        ):
            
            
            class metrics(
                DictSchema
            ):
                _additional_properties = NumberSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict, ],
                    _configuration: typing.Optional[Configuration] = None,
                    **kwargs: typing.Type[Schema],
                ) -> 'metrics':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class data_status(
                DictSchema
            ):
            
                @classmethod
                @property
                def _additional_properties(cls) -> typing.Type['DataStatus']:
                    return DataStatus
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict, ],
                    _configuration: typing.Optional[Configuration] = None,
                    **kwargs: typing.Type[Schema],
                ) -> 'data_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            pin_id = StrSchema
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                metrics: typing.Union[metrics, Unset] = unset,
                data_status: typing.Union[data_status, Unset] = unset,
                pin_id: typing.Union[pin_id, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> '_items':
                return super().__new__(
                    cls,
                    *args,
                    metrics=metrics,
                    data_status=data_status,
                    pin_id=pin_id,
                    _configuration=_configuration,
                    **kwargs,
                )
    
    
    class sort_by(
        _SchemaEnumMaker(
            enum_value_to_name={
                "SAVE": "SAVE",
                "IMPRESSION": "IMPRESSION",
                "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                "VIDEO_MRC_VIEW": "VIDEO_MRC_VIEW",
                "VIDEO_AVG_WATCH_TIME": "VIDEO_AVG_WATCH_TIME",
                "VIDEO_V50_WATCH_TIME": "VIDEO_V50_WATCH_TIME",
                "QUARTILE_95_PERCENT_VIEW": "QUARTILE_95_PERCENT_VIEW",
                "VIDEO_10S_VIEW": "VIDEO_10S_VIEW",
                "VIDEO_START": "VIDEO_START",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def SAVE(cls):
            return cls("SAVE")
        
        @classmethod
        @property
        def IMPRESSION(cls):
            return cls("IMPRESSION")
        
        @classmethod
        @property
        def OUTBOUND_CLICK(cls):
            return cls("OUTBOUND_CLICK")
        
        @classmethod
        @property
        def VIDEO_MRC_VIEW(cls):
            return cls("VIDEO_MRC_VIEW")
        
        @classmethod
        @property
        def VIDEO_AVG_WATCH_TIME(cls):
            return cls("VIDEO_AVG_WATCH_TIME")
        
        @classmethod
        @property
        def VIDEO_V50_WATCH_TIME(cls):
            return cls("VIDEO_V50_WATCH_TIME")
        
        @classmethod
        @property
        def QUARTILE_95_PERCENT_VIEW(cls):
            return cls("QUARTILE_95_PERCENT_VIEW")
        
        @classmethod
        @property
        def VIDEO_10S_VIEW(cls):
            return cls("VIDEO_10S_VIEW")
        
        @classmethod
        @property
        def VIDEO_START(cls):
            return cls("VIDEO_START")


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        date_availability: typing.Union[date_availability, Unset] = unset,
        pins: typing.Union[pins, Unset] = unset,
        sort_by: typing.Union[sort_by, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'TopVideoPinsAnalyticsResponse':
        return super().__new__(
            cls,
            *args,
            date_availability=date_availability,
            pins=pins,
            sort_by=sort_by,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.data_status import DataStatus
