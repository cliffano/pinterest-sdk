# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class AdGroupResponseAllOf(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    name = StrSchema
    
    
    class status(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    EntityStatus,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'status':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class budget_in_micro_currency(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'budget_in_micro_currency':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class bid_in_micro_currency(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'bid_in_micro_currency':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class budget_type(
        _SchemaEnumMaker(
            enum_value_to_name={
                "DAILY": "DAILY",
                "LIFETIME": "LIFETIME",
                "CBO_ADGROUP": "CBO_ADGROUP",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def DAILY(cls):
            return cls._enum_by_value["DAILY"]("DAILY")
        
        @classmethod
        @property
        def LIFETIME(cls):
            return cls._enum_by_value["LIFETIME"]("LIFETIME")
        
        @classmethod
        @property
        def CBO_ADGROUP(cls):
            return cls._enum_by_value["CBO_ADGROUP"]("CBO_ADGROUP")
    
    
    class start_time(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'start_time':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class end_time(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'end_time':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class targeting_spec(
        DictSchema
    ):
        
        
        class _additional_properties(
            ListSchema
        ):
            _items = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'targeting_spec':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
                **kwargs,
            )
    lifetime_frequency_cap = IntSchema
    
    
    class tracking_urls(
        _SchemaTypeChecker(typing.Union[frozendict, none_type, ]),
        ComposedBase,
        DictBase,
        NoneBase,
        Schema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    TrackingUrls,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'tracking_urls':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
                **kwargs,
            )
    
    
    class auto_targeting_enabled(
        _SchemaTypeChecker(typing.Union[none_type, bool, ]),
        BoolBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[bool, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'auto_targeting_enabled':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class placement_group(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    PlacementGroupType,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'placement_group':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class pacing_delivery_type(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    PacingDeliveryType,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'pacing_delivery_type':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class conversion_learning_mode_type(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        _SchemaEnumMaker(
            enum_value_to_name={
                None: "NONE",
                "NOT_ACTIVE": "NOT_ACTIVE",
                "ACTIVE": "ACTIVE",
                "null": "NULL",
            }
        ),
        StrBase,
        NoneBase,
        Schema
    ):
        
        @classmethod
        @property
        def NONE(cls):
            return cls._enum_by_value[None](None)
        
        @classmethod
        @property
        def NOT_ACTIVE(cls):
            return cls._enum_by_value["NOT_ACTIVE"]("NOT_ACTIVE")
        
        @classmethod
        @property
        def ACTIVE(cls):
            return cls._enum_by_value["ACTIVE"]("ACTIVE")
        
        @classmethod
        @property
        def NULL(cls):
            return cls._enum_by_value["null"]("null")
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'conversion_learning_mode_type':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class summary_status(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    AdGroupSummaryStatus,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'summary_status':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    feed_profile_id = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: typing.Union[name, Unset] = unset,
        status: typing.Union[status, Unset] = unset,
        budget_in_micro_currency: typing.Union[budget_in_micro_currency, Unset] = unset,
        bid_in_micro_currency: typing.Union[bid_in_micro_currency, Unset] = unset,
        budget_type: typing.Union[budget_type, Unset] = unset,
        start_time: typing.Union[start_time, Unset] = unset,
        end_time: typing.Union[end_time, Unset] = unset,
        targeting_spec: typing.Union[targeting_spec, Unset] = unset,
        lifetime_frequency_cap: typing.Union[lifetime_frequency_cap, Unset] = unset,
        tracking_urls: typing.Union[tracking_urls, Unset] = unset,
        auto_targeting_enabled: typing.Union[auto_targeting_enabled, Unset] = unset,
        placement_group: typing.Union[placement_group, Unset] = unset,
        pacing_delivery_type: typing.Union[pacing_delivery_type, Unset] = unset,
        conversion_learning_mode_type: typing.Union[conversion_learning_mode_type, Unset] = unset,
        summary_status: typing.Union[summary_status, Unset] = unset,
        feed_profile_id: typing.Union[feed_profile_id, Unset] = unset,
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'AdGroupResponseAllOf':
        return super().__new__(
            cls,
            *args,
            name=name,
            status=status,
            budget_in_micro_currency=budget_in_micro_currency,
            bid_in_micro_currency=bid_in_micro_currency,
            budget_type=budget_type,
            start_time=start_time,
            end_time=end_time,
            targeting_spec=targeting_spec,
            lifetime_frequency_cap=lifetime_frequency_cap,
            tracking_urls=tracking_urls,
            auto_targeting_enabled=auto_targeting_enabled,
            placement_group=placement_group,
            pacing_delivery_type=pacing_delivery_type,
            conversion_learning_mode_type=conversion_learning_mode_type,
            summary_status=summary_status,
            feed_profile_id=feed_profile_id,
            _instantiation_metadata=_instantiation_metadata,
            **kwargs,
        )

from openapi_client.model.ad_group_summary_status import AdGroupSummaryStatus
from openapi_client.model.entity_status import EntityStatus
from openapi_client.model.pacing_delivery_type import PacingDeliveryType
from openapi_client.model.placement_group_type import PlacementGroupType
from openapi_client.model.tracking_urls import TrackingUrls
