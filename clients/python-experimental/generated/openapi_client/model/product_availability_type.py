# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ProductAvailabilityType(
    _SchemaTypeChecker(typing.Union[none_type, str, ]),
    _SchemaEnumMaker(
        enum_value_to_name={
            None: "NONE",
            "IN_STOCK": "IN_STOCK",
            "OUT_OF_STOCK": "OUT_OF_STOCK",
            "PREORDER": "PREORDER",
            "null": "NULL",
        }
    ),
    StrBase,
    NoneBase,
    Schema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Default availability for products in a feed.
    """
    
    @classmethod
    @property
    def NONE(cls):
        return cls._enum_by_value[None](None)
    
    @classmethod
    @property
    def IN_STOCK(cls):
        return cls._enum_by_value["IN_STOCK"]("IN_STOCK")
    
    @classmethod
    @property
    def OUT_OF_STOCK(cls):
        return cls._enum_by_value["OUT_OF_STOCK"]("OUT_OF_STOCK")
    
    @classmethod
    @property
    def PREORDER(cls):
        return cls._enum_by_value["PREORDER"]("PREORDER")
    
    @classmethod
    @property
    def NULL(cls):
        return cls._enum_by_value["null"]("null")

    def __new__(
        cls,
        *args: typing.Union[str, None, ],
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
    ) -> 'ProductAvailabilityType':
        return super().__new__(
            cls,
            *args,
            _instantiation_metadata=_instantiation_metadata,
        )
