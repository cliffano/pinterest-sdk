# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class CatalogsFeed(
    ComposedBase,
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Catalogs Feed object
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        
        
        class allOf_1(
            DictSchema
        ):
            _required_property_names = set((
            ))
        
            @classmethod
            @property
            def default_country(cls) -> typing.Type['Country']:
                return Country
        
            @classmethod
            @property
            def default_availability(cls) -> typing.Type['ProductAvailabilityType']:
                return ProductAvailabilityType
        
            @classmethod
            @property
            def default_currency(cls) -> typing.Type['NullableCurrency']:
                return NullableCurrency
            
            
            class name(
                _SchemaTypeChecker(typing.Union[none_type, str, ]),
                StrBase,
                NoneBase,
                Schema
            ):
            
                def __new__(
                    cls,
                    *args: typing.Union[str, None, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @classmethod
            @property
            def format(cls) -> typing.Type['CatalogsFormat']:
                return CatalogsFormat
            default_locale = StrSchema
        
            @classmethod
            @property
            def credentials(cls) -> typing.Type['CatalogsFeedCredentials']:
                return CatalogsFeedCredentials
            location = StrSchema
        
            @classmethod
            @property
            def preferred_processing_schedule(cls) -> typing.Type['CatalogsFeedProcessingSchedule']:
                return CatalogsFeedProcessingSchedule
        
            @classmethod
            @property
            def status(cls) -> typing.Type['CatalogsStatus']:
                return CatalogsStatus
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                default_country: typing.Union['Country', Unset] = unset,
                default_availability: typing.Union['ProductAvailabilityType', Unset] = unset,
                default_currency: typing.Union['NullableCurrency', Unset] = unset,
                format: typing.Union['CatalogsFormat', Unset] = unset,
                default_locale: typing.Union[default_locale, Unset] = unset,
                credentials: typing.Union['CatalogsFeedCredentials', Unset] = unset,
                preferred_processing_schedule: typing.Union['CatalogsFeedProcessingSchedule', Unset] = unset,
                status: typing.Union['CatalogsStatus', Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_1':
                return super().__new__(
                    cls,
                    *args,
                    default_country=default_country,
                    default_availability=default_availability,
                    default_currency=default_currency,
                    format=format,
                    default_locale=default_locale,
                    credentials=credentials,
                    preferred_processing_schedule=preferred_processing_schedule,
                    status=status,
                    _configuration=_configuration,
                    **kwargs,
                )
        return {
            'allOf': [
                CatalogsDbItem,
                allOf_1,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'CatalogsFeed':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.catalogs_db_item import CatalogsDbItem
