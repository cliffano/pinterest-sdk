# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Items(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class items(
        DictSchema
    ):
    
        @classmethod
        @property
        def status(cls) -> typing.Type['EntityStatus']:
            return EntityStatus
        
        
        class tracking_url(
            _SchemaTypeChecker(typing.Union[none_type, str, ]),
            StrBase,
            NoneBase,
            Schema
        ):
        
            def __new__(
                cls,
                *args: typing.Union[str, None, ],
                _configuration: typing.Optional[Configuration] = None,
            ) -> 'tracking_url':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        catalogs_product_group_id = StrSchema
        catalogs_product_group_name = StrSchema
    
        @classmethod
        @property
        def creative_type(cls) -> typing.Type['CreativeType']:
            return CreativeType
        
        
        class collections_hero_pin_id(
            _SchemaTypeChecker(typing.Union[none_type, str, ]),
            StrBase,
            NoneBase,
            Schema
        ):
        
            def __new__(
                cls,
                *args: typing.Union[str, None, ],
                _configuration: typing.Optional[Configuration] = None,
            ) -> 'collections_hero_pin_id':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        
        class collections_hero_destination_url(
            _SchemaTypeChecker(typing.Union[none_type, str, ]),
            StrBase,
            NoneBase,
            Schema
        ):
        
            def __new__(
                cls,
                *args: typing.Union[str, None, ],
                _configuration: typing.Optional[Configuration] = None,
            ) -> 'collections_hero_destination_url':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        
        class slideshow_collections_title(
            _SchemaTypeChecker(typing.Union[none_type, str, ]),
            StrBase,
            NoneBase,
            Schema
        ):
        
            def __new__(
                cls,
                *args: typing.Union[str, None, ],
                _configuration: typing.Optional[Configuration] = None,
            ) -> 'slideshow_collections_title':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        
        class slideshow_collections_description(
            _SchemaTypeChecker(typing.Union[none_type, str, ]),
            StrBase,
            NoneBase,
            Schema
        ):
        
            def __new__(
                cls,
                *args: typing.Union[str, None, ],
                _configuration: typing.Optional[Configuration] = None,
            ) -> 'slideshow_collections_description':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            status: typing.Union['EntityStatus', Unset] = unset,
            tracking_url: typing.Union[tracking_url, Unset] = unset,
            catalogs_product_group_id: typing.Union[catalogs_product_group_id, Unset] = unset,
            catalogs_product_group_name: typing.Union[catalogs_product_group_name, Unset] = unset,
            creative_type: typing.Union['CreativeType', Unset] = unset,
            collections_hero_pin_id: typing.Union[collections_hero_pin_id, Unset] = unset,
            collections_hero_destination_url: typing.Union[collections_hero_destination_url, Unset] = unset,
            slideshow_collections_title: typing.Union[slideshow_collections_title, Unset] = unset,
            slideshow_collections_description: typing.Union[slideshow_collections_description, Unset] = unset,
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'items':
            return super().__new__(
                cls,
                *args,
                status=status,
                tracking_url=tracking_url,
                catalogs_product_group_id=catalogs_product_group_id,
                catalogs_product_group_name=catalogs_product_group_name,
                creative_type=creative_type,
                collections_hero_pin_id=collections_hero_pin_id,
                collections_hero_destination_url=collections_hero_destination_url,
                slideshow_collections_title=slideshow_collections_title,
                slideshow_collections_description=slideshow_collections_description,
                _configuration=_configuration,
                **kwargs,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        items: typing.Union[items, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Items':
        return super().__new__(
            cls,
            *args,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.creative_type import CreativeType
from openapi_client.model.entity_status import EntityStatus
