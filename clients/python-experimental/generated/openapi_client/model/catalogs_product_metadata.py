# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class CatalogsProductMetadata(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Product metadata entity
    """
    _required_property_names = set((
        'item_id',
        'item_group_id',
        'availability',
        'price',
        'sale_price',
        'currency',
    ))
    item_id = StrSchema
    
    
    class item_group_id(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'item_group_id':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )

    @classmethod
    @property
    def availability(cls) -> typing.Type['NonNullableProductAvailabilityType']:
        return NonNullableProductAvailabilityType
    price = NumberSchema
    
    
    class sale_price(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        NumberBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[float, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'sale_price':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )

    @classmethod
    @property
    def currency(cls) -> typing.Type['NonNullableCatalogsCurrency']:
        return NonNullableCatalogsCurrency


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        item_id: item_id,
        item_group_id: item_group_id,
        availability: availability,
        price: price,
        sale_price: sale_price,
        currency: currency,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'CatalogsProductMetadata':
        return super().__new__(
            cls,
            *args,
            item_id=item_id,
            item_group_id=item_group_id,
            availability=availability,
            price=price,
            sale_price=sale_price,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.non_nullable_catalogs_currency import NonNullableCatalogsCurrency
from openapi_client.model.non_nullable_product_availability_type import NonNullableProductAvailabilityType
