# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class CatalogsProductGroup(
    ComposedBase,
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    catalog product group entity
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        
        
        class oneOf_0(
            DictSchema
        ):
            _required_property_names = set((
            ))
            
            
            class id(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
            name = StrSchema
            
            
            class description(
                _SchemaTypeChecker(typing.Union[none_type, str, ]),
                StrBase,
                NoneBase,
                Schema
            ):
            
                def __new__(
                    cls,
                    *args: typing.Union[str, None, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @classmethod
            @property
            def filters(cls) -> typing.Type['CatalogsProductGroupFilters']:
                return CatalogsProductGroupFilters
            is_featured = BoolSchema
        
            @classmethod
            @property
            def type(cls) -> typing.Type['CatalogsProductGroupType']:
                return CatalogsProductGroupType
        
            @classmethod
            @property
            def status(cls) -> typing.Type['CatalogsProductGroupStatus']:
                return CatalogsProductGroupStatus
            created_at = IntSchema
            updated_at = IntSchema
            
            
            class feed_id(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                name: typing.Union[name, Unset] = unset,
                description: typing.Union[description, Unset] = unset,
                is_featured: typing.Union[is_featured, Unset] = unset,
                type: typing.Union['CatalogsProductGroupType', Unset] = unset,
                status: typing.Union['CatalogsProductGroupStatus', Unset] = unset,
                created_at: typing.Union[created_at, Unset] = unset,
                updated_at: typing.Union[updated_at, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'oneOf_0':
                return super().__new__(
                    cls,
                    *args,
                    name=name,
                    description=description,
                    is_featured=is_featured,
                    type=type,
                    status=status,
                    created_at=created_at,
                    updated_at=updated_at,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class oneOf_1(
            DictSchema
        ):
            _required_property_names = set((
            ))
            
            
            class id(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
            name = StrSchema
            
            
            class description(
                _SchemaTypeChecker(typing.Union[none_type, str, ]),
                StrBase,
                NoneBase,
                Schema
            ):
            
                def __new__(
                    cls,
                    *args: typing.Union[str, None, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @classmethod
            @property
            def filters(cls) -> typing.Type['CatalogsProductGroupFilters']:
                return CatalogsProductGroupFilters
            is_featured = BoolSchema
        
            @classmethod
            @property
            def type(cls) -> typing.Type['CatalogsProductGroupType']:
                return CatalogsProductGroupType
        
            @classmethod
            @property
            def status(cls) -> typing.Type['CatalogsProductGroupStatus']:
                return CatalogsProductGroupStatus
            created_at = IntSchema
            updated_at = IntSchema
            
            
            class feed_id(
                _SchemaTypeChecker(typing.Union[none_type, str, ]),
                _SchemaEnumMaker(
                    enum_value_to_name={
                        None: "NONE",
                        "null": "NULL",
                    }
                ),
                StrBase,
                NoneBase,
                Schema
            ):
                
                @classmethod
                @property
                def NONE(cls):
                    return cls._enum_by_value[None](None)
                
                @classmethod
                @property
                def NULL(cls):
                    return cls("null")
            
                def __new__(
                    cls,
                    *args: typing.Union[str, None, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'feed_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                name: typing.Union[name, Unset] = unset,
                description: typing.Union[description, Unset] = unset,
                is_featured: typing.Union[is_featured, Unset] = unset,
                type: typing.Union['CatalogsProductGroupType', Unset] = unset,
                status: typing.Union['CatalogsProductGroupStatus', Unset] = unset,
                created_at: typing.Union[created_at, Unset] = unset,
                updated_at: typing.Union[updated_at, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'oneOf_1':
                return super().__new__(
                    cls,
                    *args,
                    name=name,
                    description=description,
                    is_featured=is_featured,
                    type=type,
                    status=status,
                    created_at=created_at,
                    updated_at=updated_at,
                    _configuration=_configuration,
                    **kwargs,
                )
        return {
            'allOf': [
            ],
            'oneOf': [
                oneOf_0,
                oneOf_1,
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'CatalogsProductGroup':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
