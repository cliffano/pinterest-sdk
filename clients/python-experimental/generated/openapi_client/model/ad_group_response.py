# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class AdGroupResponse(
    ComposedBase,
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        
        
        class allOf_1(
            DictSchema
        ):
            
            
            class id(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
            
            
            class ad_account_id(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^\d+$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
            created_time = IntSchema
            updated_time = IntSchema
            type = StrSchema
            
            
            class conversion_learning_mode_type(
                _SchemaTypeChecker(typing.Union[none_type, str, ]),
                _SchemaEnumMaker(
                    enum_value_to_name={
                        None: "NONE",
                        "NOT_ACTIVE": "NOT_ACTIVE",
                        "ACTIVE": "ACTIVE",
                        "null": "NULL",
                    }
                ),
                StrBase,
                NoneBase,
                Schema
            ):
                
                @classmethod
                @property
                def NONE(cls):
                    return cls._enum_by_value[None](None)
                
                @classmethod
                @property
                def NOT_ACTIVE(cls):
                    return cls("NOT_ACTIVE")
                
                @classmethod
                @property
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @classmethod
                @property
                def NULL(cls):
                    return cls("null")
            
                def __new__(
                    cls,
                    *args: typing.Union[str, None, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'conversion_learning_mode_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class summary_status(
                ComposedBase,
                StrSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            AdGroupSummaryStatus,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'summary_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            feed_profile_id = StrSchema
            dca_assets = AnyTypeSchema
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                ad_account_id: typing.Union[ad_account_id, Unset] = unset,
                created_time: typing.Union[created_time, Unset] = unset,
                updated_time: typing.Union[updated_time, Unset] = unset,
                type: typing.Union[type, Unset] = unset,
                conversion_learning_mode_type: typing.Union[conversion_learning_mode_type, Unset] = unset,
                summary_status: typing.Union[summary_status, Unset] = unset,
                feed_profile_id: typing.Union[feed_profile_id, Unset] = unset,
                dca_assets: typing.Union[dca_assets, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_1':
                return super().__new__(
                    cls,
                    *args,
                    ad_account_id=ad_account_id,
                    created_time=created_time,
                    updated_time=updated_time,
                    type=type,
                    conversion_learning_mode_type=conversion_learning_mode_type,
                    summary_status=summary_status,
                    feed_profile_id=feed_profile_id,
                    dca_assets=dca_assets,
                    _configuration=_configuration,
                    **kwargs,
                )
        return {
            'allOf': [
                AdGroupCommon,
                allOf_1,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'AdGroupResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.ad_group_common import AdGroupCommon
