# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ItemAttributes(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class ad_link(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'ad_link':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class additional_image_link(
        _SchemaTypeChecker(typing.Union[tuple, none_type, ]),
        ListBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[list, tuple, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'additional_image_link':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class adult(
        _SchemaTypeChecker(typing.Union[none_type, bool, ]),
        BoolBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[bool, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'adult':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class age_group(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'age_group':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class availability(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'availability':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class average_review_rating(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        NumberBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[float, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'average_review_rating':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class brand(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'brand':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class checkout_enabled(
        _SchemaTypeChecker(typing.Union[none_type, bool, ]),
        BoolBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[bool, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'checkout_enabled':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class color(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'color':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class condition(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'condition':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class custom_label_0(
        _SchemaValidator(
            max_length=1000,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'custom_label_0':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class custom_label_1(
        _SchemaValidator(
            max_length=1000,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'custom_label_1':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class custom_label_2(
        _SchemaValidator(
            max_length=1000,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'custom_label_2':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class custom_label_3(
        _SchemaValidator(
            max_length=1000,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'custom_label_3':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class custom_label_4(
        _SchemaValidator(
            max_length=1000,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'custom_label_4':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class description(
        _SchemaValidator(
            max_length=10000,
        ),
        StrSchema
    ):
        pass
    
    
    class free_shipping_label(
        _SchemaTypeChecker(typing.Union[none_type, bool, ]),
        BoolBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[bool, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'free_shipping_label':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class free_shipping_limit(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'free_shipping_limit':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class gender(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'gender':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class google_product_category(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'google_product_category':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class gtin(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'gtin':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class id(
        _SchemaValidator(
            max_length=127,
        ),
        StrSchema
    ):
        pass
    
    
    class image_link(
        _SchemaValidator(
            min_items=1,
        ),
        ListSchema
    ):
        
        
        class _items(
            _SchemaValidator(
                max_length=2000,
            ),
            StrSchema
        ):
            pass
    
    
    class item_group_id(
        _SchemaValidator(
            max_length=127,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'item_group_id':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class last_updated_time(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        Int64Base,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'last_updated_time':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class link(
        _SchemaValidator(
            max_length=511,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'link':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class material(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'material':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class min_ad_price(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'min_ad_price':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class mobile_link(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'mobile_link':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class mpn(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'mpn':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class number_of_ratings(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'number_of_ratings':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class number_of_reviews(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'number_of_reviews':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class pattern(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'pattern':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    price = StrSchema
    
    
    class product_type(
        _SchemaValidator(
            max_length=1000,
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'product_type':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class sale_price(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'sale_price':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class shipping(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'shipping':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class shipping_height(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'shipping_height':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class shipping_weight(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'shipping_weight':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class shipping_width(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'shipping_width':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class size(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'size':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class size_system(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'size_system':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class size_type(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'size_type':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class tax(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'tax':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class title(
        _SchemaValidator(
            max_length=500,
        ),
        StrSchema
    ):
        pass
    
    
    class variant_names(
        _SchemaTypeChecker(typing.Union[tuple, none_type, ]),
        ListBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[list, tuple, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'variant_names':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class variant_values(
        _SchemaTypeChecker(typing.Union[tuple, none_type, ]),
        ListBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[list, tuple, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'variant_values':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        ad_link: typing.Union[ad_link, Unset] = unset,
        additional_image_link: typing.Union[additional_image_link, Unset] = unset,
        adult: typing.Union[adult, Unset] = unset,
        age_group: typing.Union[age_group, Unset] = unset,
        availability: typing.Union[availability, Unset] = unset,
        average_review_rating: typing.Union[average_review_rating, Unset] = unset,
        brand: typing.Union[brand, Unset] = unset,
        checkout_enabled: typing.Union[checkout_enabled, Unset] = unset,
        color: typing.Union[color, Unset] = unset,
        condition: typing.Union[condition, Unset] = unset,
        custom_label_0: typing.Union[custom_label_0, Unset] = unset,
        custom_label_1: typing.Union[custom_label_1, Unset] = unset,
        custom_label_2: typing.Union[custom_label_2, Unset] = unset,
        custom_label_3: typing.Union[custom_label_3, Unset] = unset,
        custom_label_4: typing.Union[custom_label_4, Unset] = unset,
        description: typing.Union[description, Unset] = unset,
        free_shipping_label: typing.Union[free_shipping_label, Unset] = unset,
        free_shipping_limit: typing.Union[free_shipping_limit, Unset] = unset,
        gender: typing.Union[gender, Unset] = unset,
        google_product_category: typing.Union[google_product_category, Unset] = unset,
        gtin: typing.Union[gtin, Unset] = unset,
        id: typing.Union[id, Unset] = unset,
        image_link: typing.Union[image_link, Unset] = unset,
        item_group_id: typing.Union[item_group_id, Unset] = unset,
        last_updated_time: typing.Union[last_updated_time, Unset] = unset,
        link: typing.Union[link, Unset] = unset,
        material: typing.Union[material, Unset] = unset,
        min_ad_price: typing.Union[min_ad_price, Unset] = unset,
        mobile_link: typing.Union[mobile_link, Unset] = unset,
        mpn: typing.Union[mpn, Unset] = unset,
        number_of_ratings: typing.Union[number_of_ratings, Unset] = unset,
        number_of_reviews: typing.Union[number_of_reviews, Unset] = unset,
        pattern: typing.Union[pattern, Unset] = unset,
        price: typing.Union[price, Unset] = unset,
        product_type: typing.Union[product_type, Unset] = unset,
        sale_price: typing.Union[sale_price, Unset] = unset,
        shipping: typing.Union[shipping, Unset] = unset,
        shipping_height: typing.Union[shipping_height, Unset] = unset,
        shipping_weight: typing.Union[shipping_weight, Unset] = unset,
        shipping_width: typing.Union[shipping_width, Unset] = unset,
        size: typing.Union[size, Unset] = unset,
        size_system: typing.Union[size_system, Unset] = unset,
        size_type: typing.Union[size_type, Unset] = unset,
        tax: typing.Union[tax, Unset] = unset,
        title: typing.Union[title, Unset] = unset,
        variant_names: typing.Union[variant_names, Unset] = unset,
        variant_values: typing.Union[variant_values, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'ItemAttributes':
        return super().__new__(
            cls,
            *args,
            ad_link=ad_link,
            additional_image_link=additional_image_link,
            adult=adult,
            age_group=age_group,
            availability=availability,
            average_review_rating=average_review_rating,
            brand=brand,
            checkout_enabled=checkout_enabled,
            color=color,
            condition=condition,
            custom_label_0=custom_label_0,
            custom_label_1=custom_label_1,
            custom_label_2=custom_label_2,
            custom_label_3=custom_label_3,
            custom_label_4=custom_label_4,
            description=description,
            free_shipping_label=free_shipping_label,
            free_shipping_limit=free_shipping_limit,
            gender=gender,
            google_product_category=google_product_category,
            gtin=gtin,
            id=id,
            image_link=image_link,
            item_group_id=item_group_id,
            last_updated_time=last_updated_time,
            link=link,
            material=material,
            min_ad_price=min_ad_price,
            mobile_link=mobile_link,
            mpn=mpn,
            number_of_ratings=number_of_ratings,
            number_of_reviews=number_of_reviews,
            pattern=pattern,
            price=price,
            product_type=product_type,
            sale_price=sale_price,
            shipping=shipping,
            shipping_height=shipping_height,
            shipping_weight=shipping_weight,
            shipping_width=shipping_width,
            size=size,
            size_system=size_system,
            size_type=size_type,
            tax=tax,
            title=title,
            variant_names=variant_names,
            variant_values=variant_values,
            _configuration=_configuration,
            **kwargs,
        )
