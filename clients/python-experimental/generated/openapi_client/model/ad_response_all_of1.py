# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class AdResponseAllOf1(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class ad_account_id(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    
    
    class campaign_id(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    
    
    class collection_items_destination_url_template(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'collection_items_destination_url_template':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    created_time = IntSchema
    
    
    class id(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    
    
    class rejected_reasons(
        ListSchema
    ):
        
        
        class _items(
            _SchemaEnumMaker(
                enum_value_to_name={
                    "HASHTAGS": "HASHTAGS",
                    "PROMOTIONS_AND_PRICES": "PROMOTIONS_AND_PRICES",
                    "TARGETING": "TARGETING",
                    "LANDING_PAGE": "LANDING_PAGE",
                    "CAPS_AND_SYMBOLS": "CAPS_AND_SYMBOLS",
                    "SHOCKING": "SHOCKING",
                    "WEIGHT_LOSS": "WEIGHT_LOSS",
                    "PROHIBITED_PRODUCT": "PROHIBITED_PRODUCT",
                    "AUTHENTICITY": "AUTHENTICITY",
                    "NUDITY": "NUDITY",
                    "CONFUSING_DESIGN": "CONFUSING_DESIGN",
                    "URGENCY": "URGENCY",
                    "RATINGS": "RATINGS",
                    "APP": "APP",
                    "ALCOHOL": "ALCOHOL",
                    "CONTESTS": "CONTESTS",
                    "POLITICAL": "POLITICAL",
                    "OTHER": "OTHER",
                    "IMAGE": "IMAGE",
                    "NAR": "NAR",
                    "INCONSISTENT": "INCONSISTENT",
                    "CLICKBAIT": "CLICKBAIT",
                    "NO_DESCRIPTION": "NO_DESCRIPTION",
                    "LOW_QUALITY": "LOW_QUALITY",
                    "EXAGGERATED_CLAIMS": "EXAGGERATED_CLAIMS",
                    "PINTEREST_BRAND": "PINTEREST_BRAND",
                    "ALCOHOL_NO_SALE": "ALCOHOL_NO_SALE",
                    "LANDING_PAGE_SPEED": "LANDING_PAGE_SPEED",
                    "LANDING_PAGE_HARDWALL": "LANDING_PAGE_HARDWALL",
                    "LANDING_PAGE_BROKEN": "LANDING_PAGE_BROKEN",
                    "LANDING_PAGE_QUALITY": "LANDING_PAGE_QUALITY",
                    "OUT_OF_STOCK": "OUT_OF_STOCK",
                    "IMAGE_LOW_QUALITY": "IMAGE_LOW_QUALITY",
                    "IMAGE_BUSY": "IMAGE_BUSY",
                    "IMAGE_POORLY_EDITED": "IMAGE_POORLY_EDITED",
                    "IMAGE_BEFORE_AFTER": "IMAGE_BEFORE_AFTER",
                    "UGC": "UGC",
                    "FAKE_BUTTONS": "FAKE_BUTTONS",
                    "WEAPONS": "WEAPONS",
                    "SENSITIVE": "SENSITIVE",
                    "UNACCEPTABLE_BUSINESS": "UNACCEPTABLE_BUSINESS",
                    "SUSPICIOUS_CLAIMS": "SUSPICIOUS_CLAIMS",
                    "PHARMA": "PHARMA",
                    "SUSPICIOUS_SUPPLEMENTS": "SUSPICIOUS_SUPPLEMENTS",
                    "ILLEGAL_RECREATIONAL_DRUG": "ILLEGAL_RECREATIONAL_DRUG",
                    "LOW_QUALITY_LANDING_PAGE": "LOW_QUALITY_LANDING_PAGE",
                    "RESTRICTED_HEALTHCARE": "RESTRICTED_HEALTHCARE",
                    "INCONSISTENT_LANG_FR": "INCONSISTENT_LANG_FR",
                }
            ),
            StrSchema
        ):
            
            @classmethod
            @property
            def HASHTAGS(cls):
                return cls._enum_by_value["HASHTAGS"]("HASHTAGS")
            
            @classmethod
            @property
            def PROMOTIONS_AND_PRICES(cls):
                return cls._enum_by_value["PROMOTIONS_AND_PRICES"]("PROMOTIONS_AND_PRICES")
            
            @classmethod
            @property
            def TARGETING(cls):
                return cls._enum_by_value["TARGETING"]("TARGETING")
            
            @classmethod
            @property
            def LANDING_PAGE(cls):
                return cls._enum_by_value["LANDING_PAGE"]("LANDING_PAGE")
            
            @classmethod
            @property
            def CAPS_AND_SYMBOLS(cls):
                return cls._enum_by_value["CAPS_AND_SYMBOLS"]("CAPS_AND_SYMBOLS")
            
            @classmethod
            @property
            def SHOCKING(cls):
                return cls._enum_by_value["SHOCKING"]("SHOCKING")
            
            @classmethod
            @property
            def WEIGHT_LOSS(cls):
                return cls._enum_by_value["WEIGHT_LOSS"]("WEIGHT_LOSS")
            
            @classmethod
            @property
            def PROHIBITED_PRODUCT(cls):
                return cls._enum_by_value["PROHIBITED_PRODUCT"]("PROHIBITED_PRODUCT")
            
            @classmethod
            @property
            def AUTHENTICITY(cls):
                return cls._enum_by_value["AUTHENTICITY"]("AUTHENTICITY")
            
            @classmethod
            @property
            def NUDITY(cls):
                return cls._enum_by_value["NUDITY"]("NUDITY")
            
            @classmethod
            @property
            def CONFUSING_DESIGN(cls):
                return cls._enum_by_value["CONFUSING_DESIGN"]("CONFUSING_DESIGN")
            
            @classmethod
            @property
            def URGENCY(cls):
                return cls._enum_by_value["URGENCY"]("URGENCY")
            
            @classmethod
            @property
            def RATINGS(cls):
                return cls._enum_by_value["RATINGS"]("RATINGS")
            
            @classmethod
            @property
            def APP(cls):
                return cls._enum_by_value["APP"]("APP")
            
            @classmethod
            @property
            def ALCOHOL(cls):
                return cls._enum_by_value["ALCOHOL"]("ALCOHOL")
            
            @classmethod
            @property
            def CONTESTS(cls):
                return cls._enum_by_value["CONTESTS"]("CONTESTS")
            
            @classmethod
            @property
            def POLITICAL(cls):
                return cls._enum_by_value["POLITICAL"]("POLITICAL")
            
            @classmethod
            @property
            def OTHER(cls):
                return cls._enum_by_value["OTHER"]("OTHER")
            
            @classmethod
            @property
            def IMAGE(cls):
                return cls._enum_by_value["IMAGE"]("IMAGE")
            
            @classmethod
            @property
            def NAR(cls):
                return cls._enum_by_value["NAR"]("NAR")
            
            @classmethod
            @property
            def INCONSISTENT(cls):
                return cls._enum_by_value["INCONSISTENT"]("INCONSISTENT")
            
            @classmethod
            @property
            def CLICKBAIT(cls):
                return cls._enum_by_value["CLICKBAIT"]("CLICKBAIT")
            
            @classmethod
            @property
            def NO_DESCRIPTION(cls):
                return cls._enum_by_value["NO_DESCRIPTION"]("NO_DESCRIPTION")
            
            @classmethod
            @property
            def LOW_QUALITY(cls):
                return cls._enum_by_value["LOW_QUALITY"]("LOW_QUALITY")
            
            @classmethod
            @property
            def EXAGGERATED_CLAIMS(cls):
                return cls._enum_by_value["EXAGGERATED_CLAIMS"]("EXAGGERATED_CLAIMS")
            
            @classmethod
            @property
            def PINTEREST_BRAND(cls):
                return cls._enum_by_value["PINTEREST_BRAND"]("PINTEREST_BRAND")
            
            @classmethod
            @property
            def ALCOHOL_NO_SALE(cls):
                return cls._enum_by_value["ALCOHOL_NO_SALE"]("ALCOHOL_NO_SALE")
            
            @classmethod
            @property
            def LANDING_PAGE_SPEED(cls):
                return cls._enum_by_value["LANDING_PAGE_SPEED"]("LANDING_PAGE_SPEED")
            
            @classmethod
            @property
            def LANDING_PAGE_HARDWALL(cls):
                return cls._enum_by_value["LANDING_PAGE_HARDWALL"]("LANDING_PAGE_HARDWALL")
            
            @classmethod
            @property
            def LANDING_PAGE_BROKEN(cls):
                return cls._enum_by_value["LANDING_PAGE_BROKEN"]("LANDING_PAGE_BROKEN")
            
            @classmethod
            @property
            def LANDING_PAGE_QUALITY(cls):
                return cls._enum_by_value["LANDING_PAGE_QUALITY"]("LANDING_PAGE_QUALITY")
            
            @classmethod
            @property
            def OUT_OF_STOCK(cls):
                return cls._enum_by_value["OUT_OF_STOCK"]("OUT_OF_STOCK")
            
            @classmethod
            @property
            def IMAGE_LOW_QUALITY(cls):
                return cls._enum_by_value["IMAGE_LOW_QUALITY"]("IMAGE_LOW_QUALITY")
            
            @classmethod
            @property
            def IMAGE_BUSY(cls):
                return cls._enum_by_value["IMAGE_BUSY"]("IMAGE_BUSY")
            
            @classmethod
            @property
            def IMAGE_POORLY_EDITED(cls):
                return cls._enum_by_value["IMAGE_POORLY_EDITED"]("IMAGE_POORLY_EDITED")
            
            @classmethod
            @property
            def IMAGE_BEFORE_AFTER(cls):
                return cls._enum_by_value["IMAGE_BEFORE_AFTER"]("IMAGE_BEFORE_AFTER")
            
            @classmethod
            @property
            def UGC(cls):
                return cls._enum_by_value["UGC"]("UGC")
            
            @classmethod
            @property
            def FAKE_BUTTONS(cls):
                return cls._enum_by_value["FAKE_BUTTONS"]("FAKE_BUTTONS")
            
            @classmethod
            @property
            def WEAPONS(cls):
                return cls._enum_by_value["WEAPONS"]("WEAPONS")
            
            @classmethod
            @property
            def SENSITIVE(cls):
                return cls._enum_by_value["SENSITIVE"]("SENSITIVE")
            
            @classmethod
            @property
            def UNACCEPTABLE_BUSINESS(cls):
                return cls._enum_by_value["UNACCEPTABLE_BUSINESS"]("UNACCEPTABLE_BUSINESS")
            
            @classmethod
            @property
            def SUSPICIOUS_CLAIMS(cls):
                return cls._enum_by_value["SUSPICIOUS_CLAIMS"]("SUSPICIOUS_CLAIMS")
            
            @classmethod
            @property
            def PHARMA(cls):
                return cls._enum_by_value["PHARMA"]("PHARMA")
            
            @classmethod
            @property
            def SUSPICIOUS_SUPPLEMENTS(cls):
                return cls._enum_by_value["SUSPICIOUS_SUPPLEMENTS"]("SUSPICIOUS_SUPPLEMENTS")
            
            @classmethod
            @property
            def ILLEGAL_RECREATIONAL_DRUG(cls):
                return cls._enum_by_value["ILLEGAL_RECREATIONAL_DRUG"]("ILLEGAL_RECREATIONAL_DRUG")
            
            @classmethod
            @property
            def LOW_QUALITY_LANDING_PAGE(cls):
                return cls._enum_by_value["LOW_QUALITY_LANDING_PAGE"]("LOW_QUALITY_LANDING_PAGE")
            
            @classmethod
            @property
            def RESTRICTED_HEALTHCARE(cls):
                return cls._enum_by_value["RESTRICTED_HEALTHCARE"]("RESTRICTED_HEALTHCARE")
            
            @classmethod
            @property
            def INCONSISTENT_LANG_FR(cls):
                return cls._enum_by_value["INCONSISTENT_LANG_FR"]("INCONSISTENT_LANG_FR")
    
    
    class rejection_labels(
        ListSchema
    ):
        _items = StrSchema
    
    
    class review_status(
        _SchemaEnumMaker(
            enum_value_to_name={
                "OTHER": "OTHER",
                "PENDING": "PENDING",
                "REJECTED": "REJECTED",
                "APPROVED": "APPROVED",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def OTHER(cls):
            return cls._enum_by_value["OTHER"]("OTHER")
        
        @classmethod
        @property
        def PENDING(cls):
            return cls._enum_by_value["PENDING"]("PENDING")
        
        @classmethod
        @property
        def REJECTED(cls):
            return cls._enum_by_value["REJECTED"]("REJECTED")
        
        @classmethod
        @property
        def APPROVED(cls):
            return cls._enum_by_value["APPROVED"]("APPROVED")
    type = StrSchema
    updated_time = IntSchema
    
    
    class summary_status(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    PinPromotionSummaryStatus,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'summary_status':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        ad_account_id: typing.Union[ad_account_id, Unset] = unset,
        campaign_id: typing.Union[campaign_id, Unset] = unset,
        collection_items_destination_url_template: typing.Union[collection_items_destination_url_template, Unset] = unset,
        created_time: typing.Union[created_time, Unset] = unset,
        id: typing.Union[id, Unset] = unset,
        rejected_reasons: typing.Union[rejected_reasons, Unset] = unset,
        rejection_labels: typing.Union[rejection_labels, Unset] = unset,
        review_status: typing.Union[review_status, Unset] = unset,
        type: typing.Union[type, Unset] = unset,
        updated_time: typing.Union[updated_time, Unset] = unset,
        summary_status: typing.Union[summary_status, Unset] = unset,
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'AdResponseAllOf1':
        return super().__new__(
            cls,
            *args,
            ad_account_id=ad_account_id,
            campaign_id=campaign_id,
            collection_items_destination_url_template=collection_items_destination_url_template,
            created_time=created_time,
            id=id,
            rejected_reasons=rejected_reasons,
            rejection_labels=rejection_labels,
            review_status=review_status,
            type=type,
            updated_time=updated_time,
            summary_status=summary_status,
            _instantiation_metadata=_instantiation_metadata,
            **kwargs,
        )

from openapi_client.model.pin_promotion_summary_status import PinPromotionSummaryStatus
