# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class CampaignCommon(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Campaign Data
    """
    _required_property_names = set((
        'ad_account_id',
    ))
    
    
    class ad_account_id(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    name = StrSchema
    
    
    class status(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    EntityStatus,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'status':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class lifetime_spend_cap(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'lifetime_spend_cap':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class daily_spend_cap(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'daily_spend_cap':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class order_line_id(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'order_line_id':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class tracking_urls(
        _SchemaTypeChecker(typing.Union[frozendict, none_type, ]),
        ComposedBase,
        DictBase,
        NoneBase,
        Schema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    TrackingUrls,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'tracking_urls':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
                **kwargs,
            )
    
    
    class start_time(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'start_time':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class end_time(
        _SchemaTypeChecker(typing.Union[none_type, decimal.Decimal, ]),
        IntBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[int, None, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'end_time':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        ad_account_id: ad_account_id,
        name: typing.Union[name, Unset] = unset,
        status: typing.Union[status, Unset] = unset,
        lifetime_spend_cap: typing.Union[lifetime_spend_cap, Unset] = unset,
        daily_spend_cap: typing.Union[daily_spend_cap, Unset] = unset,
        order_line_id: typing.Union[order_line_id, Unset] = unset,
        tracking_urls: typing.Union[tracking_urls, Unset] = unset,
        start_time: typing.Union[start_time, Unset] = unset,
        end_time: typing.Union[end_time, Unset] = unset,
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'CampaignCommon':
        return super().__new__(
            cls,
            *args,
            ad_account_id=ad_account_id,
            name=name,
            status=status,
            lifetime_spend_cap=lifetime_spend_cap,
            daily_spend_cap=daily_spend_cap,
            order_line_id=order_line_id,
            tracking_urls=tracking_urls,
            start_time=start_time,
            end_time=end_time,
            _instantiation_metadata=_instantiation_metadata,
            **kwargs,
        )

from openapi_client.model.entity_status import EntityStatus
from openapi_client.model.tracking_urls import TrackingUrls
