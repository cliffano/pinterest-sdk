# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ProductGroupPromotion(
    ComposedBase,
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id = StrSchema
    
    
    class ad_group_id(
        _SchemaValidator(
            regex=[{
                'pattern': r'^(AG)?\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    
    
    class type(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'type':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    bid_in_micro_currency = IntSchema
    
    
    class included(
        _SchemaTypeChecker(typing.Union[none_type, bool, ]),
        BoolBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[bool, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'included':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class definition(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'definition':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class relative_definition(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'relative_definition':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class parent_id(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'parent_id':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class slideshow_collections_title(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'slideshow_collections_title':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class slideshow_collections_description(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'slideshow_collections_description':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        return {
            'allOf': [
                Items,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        id: typing.Union[id, Unset] = unset,
        ad_group_id: typing.Union[ad_group_id, Unset] = unset,
        type: typing.Union[type, Unset] = unset,
        bid_in_micro_currency: typing.Union[bid_in_micro_currency, Unset] = unset,
        included: typing.Union[included, Unset] = unset,
        definition: typing.Union[definition, Unset] = unset,
        relative_definition: typing.Union[relative_definition, Unset] = unset,
        parent_id: typing.Union[parent_id, Unset] = unset,
        slideshow_collections_title: typing.Union[slideshow_collections_title, Unset] = unset,
        slideshow_collections_description: typing.Union[slideshow_collections_description, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'ProductGroupPromotion':
        return super().__new__(
            cls,
            *args,
            id=id,
            ad_group_id=ad_group_id,
            type=type,
            bid_in_micro_currency=bid_in_micro_currency,
            included=included,
            definition=definition,
            relative_definition=relative_definition,
            parent_id=parent_id,
            slideshow_collections_title=slideshow_collections_title,
            slideshow_collections_description=slideshow_collections_description,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.items import Items
