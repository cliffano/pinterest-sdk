# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class AdsAnalyticsCreateAsyncRequest(
    ComposedBase,
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        
        
        class allOf_0(
            DictSchema
        ):
            _required_property_names = set((
            ))
            
            
            class start_date(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^(\d{4})-(\d{2})-(\d{2})$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
            
            
            class end_date(
                _SchemaValidator(
                    regex=[{
                        'pattern': r'^(\d{4})-(\d{2})-(\d{2})$',  # noqa: E501
                    }],
                ),
                StrSchema
            ):
                pass
            
            
            class granularity(
                ComposedBase,
                StrSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            Granularity,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'granularity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class click_window_days(
                ComposedBase,
                IntSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            ConversionAttributionWindowDays,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[int, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'click_window_days':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class engagement_window_days(
                ComposedBase,
                IntSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            ConversionAttributionWindowDays,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[int, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'engagement_window_days':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class view_window_days(
                ComposedBase,
                IntSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            ConversionAttributionWindowDays,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[int, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'view_window_days':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class conversion_report_time(
                ComposedBase,
                StrSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            ConversionReportTimeType,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'conversion_report_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class attribution_types(
                ListSchema
            ):
            
                @classmethod
                @property
                def _items(cls) -> typing.Type['ConversionReportAttributionType']:
                    return ConversionReportAttributionType
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                click_window_days: typing.Union[click_window_days, Unset] = unset,
                engagement_window_days: typing.Union[engagement_window_days, Unset] = unset,
                view_window_days: typing.Union[view_window_days, Unset] = unset,
                conversion_report_time: typing.Union[conversion_report_time, Unset] = unset,
                attribution_types: typing.Union[attribution_types, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_0':
                return super().__new__(
                    cls,
                    *args,
                    click_window_days=click_window_days,
                    engagement_window_days=engagement_window_days,
                    view_window_days=view_window_days,
                    conversion_report_time=conversion_report_time,
                    attribution_types=attribution_types,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class allOf_1(
            ComposedBase,
            DictSchema
        ):
        
            @classmethod
            @property
            @functools.cache
            def _composed_schemas(cls):
                # we need this here to make our import statements work
                # we must store _composed_schemas in here so the code is only run
                # when we invoke this method. If we kept this at the class
                # level we would get an error because the class level
                # code would be run when this module is imported, and these composed
                # classes don't exist yet because their module has not finished
                # loading
                
                
                class allOf_0(
                    DictSchema
                ):
                    
                    
                    class campaign_ids(
                        _SchemaValidator(
                            max_items=500,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                        
                        
                        class _items(
                            _SchemaValidator(
                                regex=[{
                                    'pattern': r'^\d+$',  # noqa: E501
                                }],
                            ),
                            StrSchema
                        ):
                            pass
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        campaign_ids: typing.Union[campaign_ids, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_0':
                        return super().__new__(
                            cls,
                            *args,
                            campaign_ids=campaign_ids,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_1(
                    DictSchema
                ):
                    
                    
                    class campaign_statuses(
                        _SchemaValidator(
                            max_items=6,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                    
                        @classmethod
                        @property
                        def _items(cls) -> typing.Type['CampaignSummaryStatus']:
                            return CampaignSummaryStatus
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        campaign_statuses: typing.Union[campaign_statuses, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_1':
                        return super().__new__(
                            cls,
                            *args,
                            campaign_statuses=campaign_statuses,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_2(
                    DictSchema
                ):
                    
                    
                    class campaign_objective_types(
                        _SchemaValidator(
                            max_items=6,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                    
                        @classmethod
                        @property
                        def _items(cls) -> typing.Type['ObjectiveType']:
                            return ObjectiveType
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        campaign_objective_types: typing.Union[campaign_objective_types, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_2':
                        return super().__new__(
                            cls,
                            *args,
                            campaign_objective_types=campaign_objective_types,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_3(
                    DictSchema
                ):
                    
                    
                    class ad_group_ids(
                        _SchemaValidator(
                            max_items=500,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                        
                        
                        class _items(
                            _SchemaValidator(
                                regex=[{
                                    'pattern': r'^\d+$',  # noqa: E501
                                }],
                            ),
                            StrSchema
                        ):
                            pass
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        ad_group_ids: typing.Union[ad_group_ids, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_3':
                        return super().__new__(
                            cls,
                            *args,
                            ad_group_ids=ad_group_ids,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_4(
                    DictSchema
                ):
                    
                    
                    class ad_group_statuses(
                        _SchemaValidator(
                            max_items=6,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                    
                        @classmethod
                        @property
                        def _items(cls) -> typing.Type['AdGroupSummaryStatus']:
                            return AdGroupSummaryStatus
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        ad_group_statuses: typing.Union[ad_group_statuses, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_4':
                        return super().__new__(
                            cls,
                            *args,
                            ad_group_statuses=ad_group_statuses,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_5(
                    DictSchema
                ):
                    
                    
                    class ad_ids(
                        _SchemaValidator(
                            max_items=500,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                        
                        
                        class _items(
                            _SchemaValidator(
                                regex=[{
                                    'pattern': r'^\d+$',  # noqa: E501
                                }],
                            ),
                            StrSchema
                        ):
                            pass
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        ad_ids: typing.Union[ad_ids, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_5':
                        return super().__new__(
                            cls,
                            *args,
                            ad_ids=ad_ids,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_6(
                    DictSchema
                ):
                    
                    
                    class ad_statuses(
                        _SchemaValidator(
                            max_items=6,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                    
                        @classmethod
                        @property
                        def _items(cls) -> typing.Type['PinPromotionSummaryStatus']:
                            return PinPromotionSummaryStatus
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        ad_statuses: typing.Union[ad_statuses, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_6':
                        return super().__new__(
                            cls,
                            *args,
                            ad_statuses=ad_statuses,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_7(
                    DictSchema
                ):
                    
                    
                    class product_group_ids(
                        _SchemaValidator(
                            max_items=500,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                        
                        
                        class _items(
                            _SchemaValidator(
                                regex=[{
                                    'pattern': r'^\d+$',  # noqa: E501
                                }],
                            ),
                            StrSchema
                        ):
                            pass
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        product_group_ids: typing.Union[product_group_ids, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_7':
                        return super().__new__(
                            cls,
                            *args,
                            product_group_ids=product_group_ids,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_8(
                    DictSchema
                ):
                    
                    
                    class product_group_statuses(
                        _SchemaValidator(
                            max_items=6,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                    
                        @classmethod
                        @property
                        def _items(cls) -> typing.Type['ProductGroupSummaryStatus']:
                            return ProductGroupSummaryStatus
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        product_group_statuses: typing.Union[product_group_statuses, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_8':
                        return super().__new__(
                            cls,
                            *args,
                            product_group_statuses=product_group_statuses,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_9(
                    DictSchema
                ):
                    
                    
                    class product_item_ids(
                        _SchemaValidator(
                            max_items=500,
                            min_items=1,
                        ),
                        ListSchema
                    ):
                        
                        
                        class _items(
                            _SchemaValidator(
                                regex=[{
                                    'pattern': r'^\d+$',  # noqa: E501
                                }],
                            ),
                            StrSchema
                        ):
                            pass
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        product_item_ids: typing.Union[product_item_ids, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_9':
                        return super().__new__(
                            cls,
                            *args,
                            product_item_ids=product_item_ids,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class allOf_11(
                    DictSchema
                ):
                    
                    
                    class metrics_filters(
                        _SchemaValidator(
                            min_items=1,
                        ),
                        ListSchema
                    ):
                    
                        @classmethod
                        @property
                        def _items(cls) -> typing.Type['AdsAnalyticsMetricsFilter']:
                            return AdsAnalyticsMetricsFilter
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict, ],
                        metrics_filters: typing.Union[metrics_filters, Unset] = unset,
                        _configuration: typing.Optional[Configuration] = None,
                        **kwargs: typing.Type[Schema],
                    ) -> 'allOf_11':
                        return super().__new__(
                            cls,
                            *args,
                            metrics_filters=metrics_filters,
                            _configuration=_configuration,
                            **kwargs,
                        )
                return {
                    'allOf': [
                        allOf_0,
                        allOf_1,
                        allOf_2,
                        allOf_3,
                        allOf_4,
                        allOf_5,
                        allOf_6,
                        allOf_7,
                        allOf_8,
                        allOf_9,
                        TargetingTypeFilter,
                        allOf_11,
                    ],
                    'oneOf': [
                    ],
                    'anyOf': [
                    ],
                    'not':
                        None
                }
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_1':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class allOf_2(
            DictSchema
        ):
            _required_property_names = set((
            ))
            
            
            class columns(
                ListSchema
            ):
            
                @classmethod
                @property
                def _items(cls) -> typing.Type['ReportingColumnAsync']:
                    return ReportingColumnAsync
            
            
            class level(
                ComposedBase,
                StrSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            MetricsReportingLevel,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'level':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class report_format(
                ComposedBase,
                StrSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            DataOutputFormat,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'report_format':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                report_format: typing.Union[report_format, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_2':
                return super().__new__(
                    cls,
                    *args,
                    report_format=report_format,
                    _configuration=_configuration,
                    **kwargs,
                )
        return {
            'allOf': [
                allOf_0,
                allOf_1,
                allOf_2,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'AdsAnalyticsCreateAsyncRequest':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
