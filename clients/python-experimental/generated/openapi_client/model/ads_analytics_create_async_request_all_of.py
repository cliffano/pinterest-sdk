# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: pinterest-api@pinterest.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class AdsAnalyticsCreateAsyncRequestAllOf(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    _required_property_names = set((
        'start_date',
        'end_date',
        'granularity',
    ))
    
    
    class start_date(
        _SchemaValidator(
            regex=[{
                'pattern': r'^(\d{4})-(\d{2})-(\d{2})$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    
    
    class end_date(
        _SchemaValidator(
            regex=[{
                'pattern': r'^(\d{4})-(\d{2})-(\d{2})$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass
    
    
    class granularity(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    Granularity,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'granularity':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class click_window_days(
        ComposedBase,
        IntSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    ConversionAttributionWindowDays,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[int, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'click_window_days':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class engagement_window_days(
        ComposedBase,
        IntSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    ConversionAttributionWindowDays,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[int, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'engagement_window_days':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class view_window_days(
        ComposedBase,
        IntSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    ConversionAttributionWindowDays,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[int, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'view_window_days':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class conversion_report_time(
        ComposedBase,
        StrSchema
    ):
    
        @classmethod
        @property
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    ConversionReportTimeType,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
            }
    
        def __new__(
            cls,
            *args: typing.Union[str, ],
            _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        ) -> 'conversion_report_time':
            return super().__new__(
                cls,
                *args,
                _instantiation_metadata=_instantiation_metadata,
            )
    
    
    class attribution_types(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['ConversionReportAttributionType']:
            return ConversionReportAttributionType


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        start_date: start_date,
        end_date: end_date,
        granularity: granularity,
        click_window_days: typing.Union[click_window_days, Unset] = unset,
        engagement_window_days: typing.Union[engagement_window_days, Unset] = unset,
        view_window_days: typing.Union[view_window_days, Unset] = unset,
        conversion_report_time: typing.Union[conversion_report_time, Unset] = unset,
        attribution_types: typing.Union[attribution_types, Unset] = unset,
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'AdsAnalyticsCreateAsyncRequestAllOf':
        return super().__new__(
            cls,
            *args,
            start_date=start_date,
            end_date=end_date,
            granularity=granularity,
            click_window_days=click_window_days,
            engagement_window_days=engagement_window_days,
            view_window_days=view_window_days,
            conversion_report_time=conversion_report_time,
            attribution_types=attribution_types,
            _instantiation_metadata=_instantiation_metadata,
            **kwargs,
        )

from openapi_client.model.conversion_attribution_window_days import ConversionAttributionWindowDays
from openapi_client.model.conversion_report_attribution_type import ConversionReportAttributionType
from openapi_client.model.conversion_report_time_type import ConversionReportTimeType
from openapi_client.model.granularity import Granularity
