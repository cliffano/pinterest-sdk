# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class AnalyticsMetricsResponse(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class daily_metrics(
        ListSchema
    ):
        
        
        class _items(
            DictSchema
        ):
        
            @classmethod
            @property
            def data_status(cls) -> typing.Type['DataStatus']:
                return DataStatus
            date = StrSchema
        
            @classmethod
            @property
            def metrics(cls) -> typing.Type['Metrics']:
                return Metrics
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                data_status: typing.Union['DataStatus', Unset] = unset,
                date: typing.Union[date, Unset] = unset,
                metrics: typing.Union['Metrics', Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> '_items':
                return super().__new__(
                    cls,
                    *args,
                    data_status=data_status,
                    date=date,
                    metrics=metrics,
                    _configuration=_configuration,
                    **kwargs,
                )
    
    
    class summary_metrics(
        DictSchema
    ):
        _additional_properties = NumberSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'summary_metrics':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        daily_metrics: typing.Union[daily_metrics, Unset] = unset,
        summary_metrics: typing.Union[summary_metrics, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'AnalyticsMetricsResponse':
        return super().__new__(
            cls,
            *args,
            daily_metrics=daily_metrics,
            summary_metrics=summary_metrics,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.data_status import DataStatus
from openapi_client.model.metrics import Metrics
