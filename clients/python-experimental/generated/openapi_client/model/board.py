# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Board(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Board
    """
    _required_property_names = set((
        'name',
    ))
    id = StrSchema
    name = StrSchema
    
    
    class description(
        _SchemaTypeChecker(typing.Union[none_type, str, ]),
        StrBase,
        NoneBase,
        Schema
    ):
    
        def __new__(
            cls,
            *args: typing.Union[str, None, ],
            _configuration: typing.Optional[Configuration] = None,
        ) -> 'description':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
            )
    
    
    class owner(
        ComposedBase,
        DictSchema
    ):
    
        @classmethod
        @property
        @functools.cache
        def _composed_schemas(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return {
                'allOf': [
                    BoardOwner,
                ],
                'oneOf': [
                ],
                'anyOf': [
                ],
                'not':
                    None
            }
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'owner':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class privacy(
        _SchemaEnumMaker(
            enum_value_to_name={
                "PUBLIC": "PUBLIC",
                "PROTECTED": "PROTECTED",
                "SECRET": "SECRET",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def PUBLIC(cls):
            return cls("PUBLIC")
        
        @classmethod
        @property
        def PROTECTED(cls):
            return cls("PROTECTED")
        
        @classmethod
        @property
        def SECRET(cls):
            return cls("SECRET")


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: name,
        id: typing.Union[id, Unset] = unset,
        description: typing.Union[description, Unset] = unset,
        owner: typing.Union[owner, Unset] = unset,
        privacy: typing.Union[privacy, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Board':
        return super().__new__(
            cls,
            *args,
            name=name,
            id=id,
            description=description,
            owner=owner,
            privacy=privacy,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.board_owner import BoardOwner
