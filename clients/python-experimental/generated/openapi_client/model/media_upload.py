# coding: utf-8

"""
    Pinterest REST API

    Pinterest's REST API  # noqa: E501

    The version of the OpenAPI document: 5.4.1
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class MediaUpload(
    ComposedSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Media upload that has been registered but not uploaded/processed yet.
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        
        
        class allOf_0(
            DictSchema
        ):
            media_id = StrSchema
            
            
            class media_type(
                ComposedBase,
                StrSchema
            ):
            
                @classmethod
                @property
                @functools.cache
                def _composed_schemas(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return {
                        'allOf': [
                            MediaUploadType,
                        ],
                        'oneOf': [
                        ],
                        'anyOf': [
                        ],
                        'not':
                            None
                    }
            
                def __new__(
                    cls,
                    *args: typing.Union[str, ],
                    _configuration: typing.Optional[Configuration] = None,
                ) -> 'media_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            upload_url = StrSchema
            
            
            class upload_parameters(
                DictSchema
            ):
                x_amz_date = StrSchema
                locals()["x-amz-date"] = x_amz_date
                del locals()['x_amz_date']
                x_amz_signature = StrSchema
                locals()["x-amz-signature"] = x_amz_signature
                del locals()['x_amz_signature']
                x_amz_security_token = StrSchema
                locals()["x-amz-security-token"] = x_amz_security_token
                del locals()['x_amz_security_token']
                x_amz_algorithm = StrSchema
                locals()["x-amz-algorithm"] = x_amz_algorithm
                del locals()['x_amz_algorithm']
                key = StrSchema
                policy = StrSchema
                x_amz_credential = StrSchema
                locals()["x-amz-credential"] = x_amz_credential
                del locals()['x_amz_credential']
                content_type = StrSchema
                locals()["Content-Type"] = content_type
                del locals()['content_type']
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict, ],
                    key: typing.Union[key, Unset] = unset,
                    policy: typing.Union[policy, Unset] = unset,
                    _configuration: typing.Optional[Configuration] = None,
                    **kwargs: typing.Type[Schema],
                ) -> 'upload_parameters':
                    return super().__new__(
                        cls,
                        *args,
                        key=key,
                        policy=policy,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict, ],
                media_id: typing.Union[media_id, Unset] = unset,
                media_type: typing.Union[media_type, Unset] = unset,
                upload_url: typing.Union[upload_url, Unset] = unset,
                upload_parameters: typing.Union[upload_parameters, Unset] = unset,
                _configuration: typing.Optional[Configuration] = None,
                **kwargs: typing.Type[Schema],
            ) -> 'allOf_0':
                return super().__new__(
                    cls,
                    *args,
                    media_id=media_id,
                    media_type=media_type,
                    upload_url=upload_url,
                    upload_parameters=upload_parameters,
                    _configuration=_configuration,
                    **kwargs,
                )
        return {
            'allOf': [
                allOf_0,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, str, date, datetime, int, float, decimal.Decimal, None, list, tuple, bytes],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'MediaUpload':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
