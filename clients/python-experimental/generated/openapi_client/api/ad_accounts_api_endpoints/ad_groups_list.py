# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from openapi_client.model.paginated import Paginated
from openapi_client.model.error import Error

# query params


class CampaignIdsSchema(
    _SchemaValidator(
        max_items=100,
        min_items=1,
    ),
    ListSchema
):
    
    
    class _items(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass


class AdGroupIdsSchema(
    _SchemaValidator(
        max_items=100,
        min_items=1,
    ),
    ListSchema
):
    
    
    class _items(
        _SchemaValidator(
            regex=[{
                'pattern': r'^\d+$',  # noqa: E501
            }],
        ),
        StrSchema
    ):
        pass


class EntityStatusesSchema(
    ListSchema
):
    
    
    class _items(
        _SchemaEnumMaker(
            enum_value_to_name={
                "ACTIVE": "ACTIVE",
                "PAUSED": "PAUSED",
                "ARCHIVED": "ARCHIVED",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def ACTIVE(cls):
            return cls._enum_by_value["ACTIVE"]("ACTIVE")
        
        @classmethod
        @property
        def PAUSED(cls):
            return cls._enum_by_value["PAUSED"]("PAUSED")
        
        @classmethod
        @property
        def ARCHIVED(cls):
            return cls._enum_by_value["ARCHIVED"]("ARCHIVED")


class PageSizeSchema(
    _SchemaValidator(
        inclusive_maximum=100,
        inclusive_minimum=1,
    ),
    IntSchema
):
    pass


class OrderSchema(
    _SchemaEnumMaker(
        enum_value_to_name={
            "ASCENDING": "ASCENDING",
            "DESCENDING": "DESCENDING",
        }
    ),
    StrSchema
):
    
    @classmethod
    @property
    def ASCENDING(cls):
        return cls._enum_by_value["ASCENDING"]("ASCENDING")
    
    @classmethod
    @property
    def DESCENDING(cls):
        return cls._enum_by_value["DESCENDING"]("DESCENDING")
BookmarkSchema = StrSchema
TranslateInterestsToNamesSchema = BoolSchema
RequestRequiredQueryParams = typing.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing.TypedDict(
    'RequestOptionalQueryParams',
    {
        'campaign_ids': CampaignIdsSchema,
        'ad_group_ids': AdGroupIdsSchema,
        'entity_statuses': EntityStatusesSchema,
        'page_size': PageSizeSchema,
        'order': OrderSchema,
        'bookmark': BookmarkSchema,
        'translate_interests_to_names': TranslateInterestsToNamesSchema,
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_campaign_ids = api_client.QueryParameter(
    name="campaign_ids",
    style=api_client.ParameterStyle.FORM,
    schema=CampaignIdsSchema,
    explode=True,
)
request_query_ad_group_ids = api_client.QueryParameter(
    name="ad_group_ids",
    style=api_client.ParameterStyle.FORM,
    schema=AdGroupIdsSchema,
    explode=True,
)
request_query_entity_statuses = api_client.QueryParameter(
    name="entity_statuses",
    style=api_client.ParameterStyle.FORM,
    schema=EntityStatusesSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="page_size",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_order = api_client.QueryParameter(
    name="order",
    style=api_client.ParameterStyle.FORM,
    schema=OrderSchema,
    explode=True,
)
request_query_bookmark = api_client.QueryParameter(
    name="bookmark",
    style=api_client.ParameterStyle.FORM,
    schema=BookmarkSchema,
    explode=True,
)
request_query_translate_interests_to_names = api_client.QueryParameter(
    name="translate_interests_to_names",
    style=api_client.ParameterStyle.FORM,
    schema=TranslateInterestsToNamesSchema,
    explode=True,
)
# path params


class AdAccountIdSchema(
    _SchemaValidator(
        regex=[{
            'pattern': r'^\d+$',  # noqa: E501
        }],
    ),
    StrSchema
):
    pass
RequestRequiredPathParams = typing.TypedDict(
    'RequestRequiredPathParams',
    {
        'ad_account_id': AdAccountIdSchema,
    }
)
RequestOptionalPathParams = typing.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_ad_account_id = api_client.PathParameter(
    name="ad_account_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AdAccountIdSchema,
    required=True,
)
_path = '/ad_accounts/{ad_account_id}/ad_groups'
_method = 'GET'
_auth = [
    'pinterest_oauth2',
]


class SchemaFor200ResponseBodyApplicationJson(
    ComposedSchema
):

    @classmethod
    @property
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        allOf_1 = AnyTypeSchema
        return {
            'allOf': [
                Paginated,
                allOf_1,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, str, date, datetime, int, float, decimal.Decimal, None, list, tuple, bytes],
        _instantiation_metadata: typing.Optional[InstantiationMetadata] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            _instantiation_metadata=_instantiation_metadata,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class AdGroupsList(api_client.Api):

    def ad_groups_list(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict(),
        path_params: RequestPathParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        List ad groups
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs(RequestPathParams, path_params)

        _path_params = {}
        for parameter in (
            request_path_ad_account_id,
        ):
            parameter_data = path_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        _query_params = []
        for parameter in (
            request_query_campaign_ids,
            request_query_ad_group_ids,
            request_query_entity_statuses,
            request_query_page_size,
            request_query_order,
            request_query_bookmark,
            request_query_translate_interests_to_names,
        ):
            parameter_data = query_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _query_params.extend(serialized_data)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=_path,
            method=_method,
            path_params=_path_params,
            query_params=tuple(_query_params),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
