# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    InstantiationMetadata,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    NumberBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from openapi_client.model.analytics_response import AnalyticsResponse
from openapi_client.model.error import Error

# query params
StartDateSchema = DateSchema
EndDateSchema = DateSchema


class AppTypesSchema(
    _SchemaEnumMaker(
        enum_value_to_name={
            "ALL": "ALL",
            "MOBILE": "MOBILE",
            "TABLET": "TABLET",
            "WEB": "WEB",
        }
    ),
    StrSchema
):
    
    @classmethod
    @property
    def ALL(cls):
        return cls._enum_by_value["ALL"]("ALL")
    
    @classmethod
    @property
    def MOBILE(cls):
        return cls._enum_by_value["MOBILE"]("MOBILE")
    
    @classmethod
    @property
    def TABLET(cls):
        return cls._enum_by_value["TABLET"]("TABLET")
    
    @classmethod
    @property
    def WEB(cls):
        return cls._enum_by_value["WEB"]("WEB")


class MetricTypesSchema(
    ListSchema
):
    
    
    class _items(
        _SchemaEnumMaker(
            enum_value_to_name={
                "IMPRESSION": "IMPRESSION",
                "SAVE": "SAVE",
                "PIN_CLICK": "PIN_CLICK",
                "OUTBOUND_CLICK": "OUTBOUND_CLICK",
                "VIDEO_MRC_VIEW": "VIDEO_MRC_VIEW",
                "VIDEO_AVG_WATCH_TIME": "VIDEO_AVG_WATCH_TIME",
                "VIDEO_V50_WATCH_TIME": "VIDEO_V50_WATCH_TIME",
                "QUARTILE_95_PERCENT_VIEW": "QUARTILE_95_PERCENT_VIEW",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def IMPRESSION(cls):
            return cls._enum_by_value["IMPRESSION"]("IMPRESSION")
        
        @classmethod
        @property
        def SAVE(cls):
            return cls._enum_by_value["SAVE"]("SAVE")
        
        @classmethod
        @property
        def PIN_CLICK(cls):
            return cls._enum_by_value["PIN_CLICK"]("PIN_CLICK")
        
        @classmethod
        @property
        def OUTBOUND_CLICK(cls):
            return cls._enum_by_value["OUTBOUND_CLICK"]("OUTBOUND_CLICK")
        
        @classmethod
        @property
        def VIDEO_MRC_VIEW(cls):
            return cls._enum_by_value["VIDEO_MRC_VIEW"]("VIDEO_MRC_VIEW")
        
        @classmethod
        @property
        def VIDEO_AVG_WATCH_TIME(cls):
            return cls._enum_by_value["VIDEO_AVG_WATCH_TIME"]("VIDEO_AVG_WATCH_TIME")
        
        @classmethod
        @property
        def VIDEO_V50_WATCH_TIME(cls):
            return cls._enum_by_value["VIDEO_V50_WATCH_TIME"]("VIDEO_V50_WATCH_TIME")
        
        @classmethod
        @property
        def QUARTILE_95_PERCENT_VIEW(cls):
            return cls._enum_by_value["QUARTILE_95_PERCENT_VIEW"]("QUARTILE_95_PERCENT_VIEW")


class SplitFieldSchema(
    _SchemaEnumMaker(
        enum_value_to_name={
            "NO_SPLIT": "NO_SPLIT",
            "APP_TYPE": "APP_TYPE",
        }
    ),
    StrSchema
):
    
    @classmethod
    @property
    def NO_SPLIT(cls):
        return cls._enum_by_value["NO_SPLIT"]("NO_SPLIT")
    
    @classmethod
    @property
    def APP_TYPE(cls):
        return cls._enum_by_value["APP_TYPE"]("APP_TYPE")


class AdAccountIdSchema(
    _SchemaValidator(
        regex=[{
            'pattern': r'^\d+$',  # noqa: E501
        }],
    ),
    StrSchema
):
    pass
RequestRequiredQueryParams = typing.TypedDict(
    'RequestRequiredQueryParams',
    {
        'start_date': StartDateSchema,
        'end_date': EndDateSchema,
        'metric_types': MetricTypesSchema,
    }
)
RequestOptionalQueryParams = typing.TypedDict(
    'RequestOptionalQueryParams',
    {
        'app_types': AppTypesSchema,
        'split_field': SplitFieldSchema,
        'ad_account_id': AdAccountIdSchema,
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_start_date = api_client.QueryParameter(
    name="start_date",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    required=True,
    explode=True,
)
request_query_end_date = api_client.QueryParameter(
    name="end_date",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateSchema,
    required=True,
    explode=True,
)
request_query_app_types = api_client.QueryParameter(
    name="app_types",
    style=api_client.ParameterStyle.FORM,
    schema=AppTypesSchema,
    explode=True,
)
request_query_metric_types = api_client.QueryParameter(
    name="metric_types",
    style=api_client.ParameterStyle.FORM,
    schema=MetricTypesSchema,
    required=True,
)
request_query_split_field = api_client.QueryParameter(
    name="split_field",
    style=api_client.ParameterStyle.FORM,
    schema=SplitFieldSchema,
)
request_query_ad_account_id = api_client.QueryParameter(
    name="ad_account_id",
    style=api_client.ParameterStyle.FORM,
    schema=AdAccountIdSchema,
    explode=True,
)
# path params
PinIdSchema = StrSchema
RequestRequiredPathParams = typing.TypedDict(
    'RequestRequiredPathParams',
    {
        'pin_id': PinIdSchema,
    }
)
RequestOptionalPathParams = typing.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_pin_id = api_client.PathParameter(
    name="pin_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PinIdSchema,
    required=True,
)
_path = '/pins/{pin_id}/analytics'
_method = 'GET'
_auth = [
    'pinterest_oauth2',
]
SchemaFor200ResponseBodyApplicationJson = AnalyticsResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = Error


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '403': _response_for_403,
    '404': _response_for_404,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class PinsAnalytics(api_client.Api):

    def pins_analytics(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict(),
        path_params: RequestPathParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        Get Pin analytics
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs(RequestPathParams, path_params)

        _path_params = {}
        for parameter in (
            request_path_pin_id,
        ):
            parameter_data = path_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        _query_params = []
        for parameter in (
            request_query_start_date,
            request_query_end_date,
            request_query_app_types,
            request_query_metric_types,
            request_query_split_field,
            request_query_ad_account_id,
        ):
            parameter_data = query_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _query_params.extend(serialized_data)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=_path,
            method=_method,
            path_params=_path_params,
            query_params=tuple(_query_params),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
