/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { AdAccountsCatalogsProductGroupsList200Response } from '../model/adAccountsCatalogsProductGroupsList200Response';
import { Configuration } from '../configuration';


@Injectable()
export class ProductGroupsService {

    protected basePath = 'https://api.pinterest.com/v5';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get catalog product groups
     * This endpoint is completely deprecated. Please use &lt;a href&#x3D;\&#39;/docs/api/v5/#operation/catalogs_product_groups/list\&#39;&gt;List product groups&lt;/a&gt; from Catalogs API instead.
     * @param adAccountId Unique identifier of an ad account.
     * @param feedProfileId The feed profile id whose catalog product groups we want to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adAccountsCatalogsProductGroupsList(adAccountId: string, feedProfileId?: string, ): Observable<AxiosResponse<AdAccountsCatalogsProductGroupsList200Response>>;
    public adAccountsCatalogsProductGroupsList(adAccountId: string, feedProfileId?: string, ): Observable<any> {

        if (adAccountId === null || adAccountId === undefined) {
            throw new Error('Required parameter adAccountId was null or undefined when calling adAccountsCatalogsProductGroupsList.');
        }


        let queryParameters = new URLSearchParams();
        if (feedProfileId !== undefined && feedProfileId !== null) {
            queryParameters.append('feed_profile_id', <any>feedProfileId);
        }

        let headers = {...this.defaultHeaders};

        // authentication (pinterest_oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<AdAccountsCatalogsProductGroupsList200Response>(`${this.basePath}/ad_accounts/${encodeURIComponent(String(ad_account_id))}/product_groups/catalogs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
