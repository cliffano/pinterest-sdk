/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  OauthAccessTokenResponse,
} from './models';

/**
 * oauthToken - parameters interface
 */
export interface IOauthTokenParams {
  grantType: string;
}

/**
 * OauthApi - API class
 */
@autoinject()
export class OauthApi extends Api {

  /**
   * Creates a new OauthApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Generate OAuth access token
   * Generate an OAuth access token by using an authorization code or a refresh token.  See &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Authentication\&#39;&gt;Authentication&lt;/a&gt; for more.
   * @param params.grantType 
   */
  async oauthToken(params: IOauthTokenParams): Promise<OauthAccessTokenResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('oauthToken', params, 'grantType');

    // Create URL to call
    const url = `${this.basePath}/oauth/token`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'grant_type': params['grantType'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

