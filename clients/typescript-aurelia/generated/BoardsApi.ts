/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  Board,
  BoardUpdate,
  Paginated &amp; object,
  BoardSection,
} from './models';

/**
 * boardSectionsCreate - parameters interface
 */
export interface IBoardSectionsCreateParams {
  boardId: string;
  boardSection: BoardSection;
}

/**
 * boardSectionsDelete - parameters interface
 */
export interface IBoardSectionsDeleteParams {
  boardId: string;
  sectionId: string;
}

/**
 * boardSectionsList - parameters interface
 */
export interface IBoardSectionsListParams {
  boardId: string;
  bookmark?: string;
  pageSize?: number;
}

/**
 * boardSectionsListPins - parameters interface
 */
export interface IBoardSectionsListPinsParams {
  boardId: string;
  sectionId: string;
  bookmark?: string;
  pageSize?: number;
}

/**
 * boardSectionsUpdate - parameters interface
 */
export interface IBoardSectionsUpdateParams {
  boardId: string;
  sectionId: string;
  boardSection: BoardSection;
}

/**
 * boardsCreate - parameters interface
 */
export interface IBoardsCreateParams {
  board: Board;
}

/**
 * boardsDelete - parameters interface
 */
export interface IBoardsDeleteParams {
  boardId: string;
}

/**
 * boardsGet - parameters interface
 */
export interface IBoardsGetParams {
  boardId: string;
}

/**
 * boardsList - parameters interface
 */
export interface IBoardsListParams {
  bookmark?: string;
  pageSize?: number;
  privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET';
}

/**
 * boardsListPins - parameters interface
 */
export interface IBoardsListPinsParams {
  boardId: string;
  bookmark?: string;
  pageSize?: number;
}

/**
 * boardsUpdate - parameters interface
 */
export interface IBoardsUpdateParams {
  boardId: string;
  boardUpdate: BoardUpdate;
}

/**
 * BoardsApi - API class
 */
@autoinject()
export class BoardsApi extends Api {

  /**
   * Creates a new BoardsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Create board section
   * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   * @param params.boardSection Create a board section.
   */
  async boardSectionsCreate(params: IBoardSectionsCreateParams): Promise<BoardSection> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardSectionsCreate', params, 'boardId');
    this.ensureParamIsSet('boardSectionsCreate', params, 'boardSection');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}/sections`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['boardSection'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete board section
   * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   * @param params.sectionId Unique identifier of a board section.
   */
  async boardSectionsDelete(params: IBoardSectionsDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardSectionsDelete', params, 'boardId');
    this.ensureParamIsSet('boardSectionsDelete', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}/sections/{section_id}`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List board sections
   * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async boardSectionsList(params: IBoardSectionsListParams): Promise<Paginated & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardSectionsList', params, 'boardId');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}/sections`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Pins on board section
   * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   * @param params.sectionId Unique identifier of a board section.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async boardSectionsListPins(params: IBoardSectionsListPinsParams): Promise<Paginated & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardSectionsListPins', params, 'boardId');
    this.ensureParamIsSet('boardSectionsListPins', params, 'sectionId');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}/sections/{section_id}/pins`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update board section
   * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   * @param params.sectionId Unique identifier of a board section.
   * @param params.boardSection Update a board section.
   */
  async boardSectionsUpdate(params: IBoardSectionsUpdateParams): Promise<BoardSection> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardSectionsUpdate', params, 'boardId');
    this.ensureParamIsSet('boardSectionsUpdate', params, 'sectionId');
    this.ensureParamIsSet('boardSectionsUpdate', params, 'boardSection');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}/sections/{section_id}`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`))
      .replace(`{${'section_id'}}`, encodeURIComponent(`${params['sectionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['boardSection'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create board
   * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.board Create a board using a single board json object.
   */
  async boardsCreate(params: IBoardsCreateParams): Promise<Board> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardsCreate', params, 'board');

    // Create URL to call
    const url = `${this.basePath}/boards`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['board'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Delete board
   * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   */
  async boardsDelete(params: IBoardsDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardsDelete', params, 'boardId');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get board
   * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   */
  async boardsGet(params: IBoardsGetParams): Promise<Board> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardsGet', params, 'boardId');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List boards
   * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.privacy Privacy setting for a board.
   */
  async boardsList(params: IBoardsListParams): Promise<Paginated & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/boards`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'privacy': params['privacy'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Pins on board
   * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
   * @param params.boardId Unique identifier of a board.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   */
  async boardsListPins(params: IBoardsListPinsParams): Promise<Paginated & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardsListPins', params, 'boardId');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}/pins`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update board
   * Update a board owned by the \&quot;operating user_account\&quot;.
   * @param params.boardId Unique identifier of a board.
   * @param params.boardUpdate Update a board.
   */
  async boardsUpdate(params: IBoardsUpdateParams): Promise<Board> {
    // Verify required parameters are set
    this.ensureParamIsSet('boardsUpdate', params, 'boardId');
    this.ensureParamIsSet('boardsUpdate', params, 'boardUpdate');

    // Create URL to call
    const url = `${this.basePath}/boards/{board_id}`
      .replace(`{${'board_id'}}`, encodeURIComponent(`${params['boardId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['boardUpdate'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

