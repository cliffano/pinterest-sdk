/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  LeadFormsList200Response,
  LeadFormTestResponse,
  LeadFormResponse,
  LeadFormTestRequest,
} from './models';

/**
 * leadFormGet - parameters interface
 */
export interface ILeadFormGetParams {
  adAccountId: string;
  leadFormId: string;
}

/**
 * leadFormTestCreate - parameters interface
 */
export interface ILeadFormTestCreateParams {
  adAccountId: string;
  leadFormId: string;
  leadFormTestRequest: LeadFormTestRequest;
}

/**
 * leadFormsList - parameters interface
 */
export interface ILeadFormsListParams {
  adAccountId: string;
  pageSize?: number;
  order?: 'ASCENDING' | 'DESCENDING';
  bookmark?: string;
}

/**
 * LeadFormsApi - API class
 */
@autoinject()
export class LeadFormsApi extends Api {

  /**
   * Creates a new LeadFormsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get lead form by id
   * Gets a lead form given it\&#39;s ID. It must also be associated with the provided ad account ID. Retrieving an advertiser\&#39;s lead form will only contain results if you\&#39;re a part of the Lead ads beta. If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.leadFormId Unique identifier of a lead form.
   */
  async leadFormGet(params: ILeadFormGetParams): Promise<LeadFormResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('leadFormGet', params, 'adAccountId');
    this.ensureParamIsSet('leadFormGet', params, 'leadFormId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'lead_form_id'}}`, encodeURIComponent(`${params['leadFormId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create lead form test data
   * Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/new/about-beta-access/\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.leadFormId Unique identifier of a lead form.
   * @param params.leadFormTestRequest Subscription to create.
   */
  async leadFormTestCreate(params: ILeadFormTestCreateParams): Promise<LeadFormTestResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('leadFormTestCreate', params, 'adAccountId');
    this.ensureParamIsSet('leadFormTestCreate', params, 'leadFormId');
    this.ensureParamIsSet('leadFormTestCreate', params, 'leadFormTestRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`))
      .replace(`{${'lead_form_id'}}`, encodeURIComponent(`${params['leadFormId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['leadFormTestRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get lead forms
   * Gets all Lead Forms associated with an ad account ID. Retrieving an advertiser\&#39;s list of lead forms will only contain results if you\&#39;re a part of the Lead ads beta.  If you\&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/getting-started/pagination/\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async leadFormsList(params: ILeadFormsListParams): Promise<LeadFormsList200Response> {
    // Verify required parameters are set
    this.ensureParamIsSet('leadFormsList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/lead_forms`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'page_size': params['pageSize'],
        'order': params['order'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

