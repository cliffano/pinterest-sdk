/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AdsAnalyticsGetAsyncResponse,
  AdsAnalyticsCreateAsyncResponse,
  Granularity,
  Paginated &amp; object,
  AdsAnalyticsCreateAsyncRequest,
} from './models';

/**
 * adAccountAnalytics - parameters interface
 */
export interface IAdAccountAnalyticsParams {
  adAccountId: string;
  startDate: string;
  endDate: string;
  columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>;
  granularity: Granularity;
  clickWindowDays?: 1 | 7 | 30 | 60;
  engagementWindowDays?: 1 | 7 | 30 | 60;
  viewWindowDays?: 1 | 7 | 30 | 60;
  conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';
}

/**
 * adAccountsList - parameters interface
 */
export interface IAdAccountsListParams {
  bookmark?: string;
  pageSize?: number;
  includeSharedAccounts?: boolean;
}

/**
 * adGroupsAnalytics - parameters interface
 */
export interface IAdGroupsAnalyticsParams {
  adAccountId: string;
  startDate: string;
  endDate: string;
  adGroupIds: Array<string>;
  columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>;
  granularity: Granularity;
  clickWindowDays?: 1 | 7 | 30 | 60;
  engagementWindowDays?: 1 | 7 | 30 | 60;
  viewWindowDays?: 1 | 7 | 30 | 60;
  conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';
}

/**
 * adGroupsList - parameters interface
 */
export interface IAdGroupsListParams {
  adAccountId: string;
  campaignIds?: Array<string>;
  adGroupIds?: Array<string>;
  entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>;
  pageSize?: number;
  order?: 'ASCENDING' | 'DESCENDING';
  bookmark?: string;
  translateInterestsToNames?: boolean;
}

/**
 * adsAnalytics - parameters interface
 */
export interface IAdsAnalyticsParams {
  adAccountId: string;
  startDate: string;
  endDate: string;
  adIds: Array<string>;
  columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>;
  granularity: Granularity;
  clickWindowDays?: 1 | 7 | 30 | 60;
  engagementWindowDays?: 1 | 7 | 30 | 60;
  viewWindowDays?: 1 | 7 | 30 | 60;
  conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';
}

/**
 * adsList - parameters interface
 */
export interface IAdsListParams {
  adAccountId: string;
  campaignIds?: Array<string>;
  adGroupIds?: Array<string>;
  adIds?: Array<string>;
  entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>;
  pageSize?: number;
  order?: 'ASCENDING' | 'DESCENDING';
  bookmark?: string;
}

/**
 * analyticsCreateReport - parameters interface
 */
export interface IAnalyticsCreateReportParams {
  adAccountId: string;
  adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest;
}

/**
 * analyticsGetReport - parameters interface
 */
export interface IAnalyticsGetReportParams {
  adAccountId: string;
  token: string;
}

/**
 * campaignsAnalytics - parameters interface
 */
export interface ICampaignsAnalyticsParams {
  adAccountId: string;
  startDate: string;
  endDate: string;
  campaignIds: Array<string>;
  columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>;
  granularity: Granularity;
  clickWindowDays?: 1 | 7 | 30 | 60;
  engagementWindowDays?: 1 | 7 | 30 | 60;
  viewWindowDays?: 1 | 7 | 30 | 60;
  conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';
}

/**
 * campaignsList - parameters interface
 */
export interface ICampaignsListParams {
  adAccountId: string;
  campaignIds?: Array<string>;
  entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>;
  pageSize?: number;
  order?: 'ASCENDING' | 'DESCENDING';
  bookmark?: string;
}

/**
 * productGroupsAnalytics - parameters interface
 */
export interface IProductGroupsAnalyticsParams {
  adAccountId: string;
  startDate: string;
  endDate: string;
  productGroupIds: Array<string>;
  columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>;
  granularity: Granularity;
  clickWindowDays?: 1 | 7 | 30 | 60;
  engagementWindowDays?: 1 | 7 | 30 | 60;
  viewWindowDays?: 1 | 7 | 30 | 60;
  conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';
}

/**
 * AdAccountsApi - API class
 */
@autoinject()
export class AdAccountsApi extends Api {

  /**
   * Creates a new AdAccountsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get ad account analytics
   * Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD
   * @param params.columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param params.granularity Granularity
   * @param params.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param params.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   */
  async adAccountAnalytics(params: IAdAccountAnalyticsParams): Promise<Array<{ [key: string]: object; }>> {
    // Verify required parameters are set
    this.ensureParamIsSet('adAccountAnalytics', params, 'adAccountId');
    this.ensureParamIsSet('adAccountAnalytics', params, 'startDate');
    this.ensureParamIsSet('adAccountAnalytics', params, 'endDate');
    this.ensureParamIsSet('adAccountAnalytics', params, 'columns');
    this.ensureParamIsSet('adAccountAnalytics', params, 'granularity');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/analytics`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'columns': params['columns'],
        'granularity': params['granularity'],
        'click_window_days': params['clickWindowDays'],
        'engagement_window_days': params['engagementWindowDays'],
        'view_window_days': params['viewWindowDays'],
        'conversion_report_time': params['conversionReportTime'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List ad accounts
   * Get a list of the ad_accounts that the \&quot;operation user_account\&quot; has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.includeSharedAccounts Include shared ad accounts
   */
  async adAccountsList(params: IAdAccountsListParams): Promise<Paginated & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/ad_accounts`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'bookmark': params['bookmark'],
        'page_size': params['pageSize'],
        'include_shared_accounts': params['includeSharedAccounts'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ad group analytics
   * Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD
   * @param params.adGroupIds List of Ad group Ids to use to filter the results.
   * @param params.columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param params.granularity Granularity
   * @param params.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param params.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   */
  async adGroupsAnalytics(params: IAdGroupsAnalyticsParams): Promise<Array<{ [key: string]: object; }>> {
    // Verify required parameters are set
    this.ensureParamIsSet('adGroupsAnalytics', params, 'adAccountId');
    this.ensureParamIsSet('adGroupsAnalytics', params, 'startDate');
    this.ensureParamIsSet('adGroupsAnalytics', params, 'endDate');
    this.ensureParamIsSet('adGroupsAnalytics', params, 'adGroupIds');
    this.ensureParamIsSet('adGroupsAnalytics', params, 'columns');
    this.ensureParamIsSet('adGroupsAnalytics', params, 'granularity');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ad_groups/analytics`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'ad_group_ids': params['adGroupIds'],
        'columns': params['columns'],
        'granularity': params['granularity'],
        'click_window_days': params['clickWindowDays'],
        'engagement_window_days': params['engagementWindowDays'],
        'view_window_days': params['viewWindowDays'],
        'conversion_report_time': params['conversionReportTime'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List ad groups
   * Get a list of the ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.campaignIds List of Campaign Ids to use to filter the results.
   * @param params.adGroupIds List of Ad group Ids to use to filter the results.
   * @param params.entityStatuses Entity status
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.bookmark Cursor used to fetch the next page of items
   * @param params.translateInterestsToNames Return interests as text names (if value is true) rather than topic IDs.
   */
  async adGroupsList(params: IAdGroupsListParams): Promise<Paginated & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('adGroupsList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ad_groups`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'campaign_ids': params['campaignIds'],
        'ad_group_ids': params['adGroupIds'],
        'entity_statuses': params['entityStatuses'],
        'page_size': params['pageSize'],
        'order': params['order'],
        'bookmark': params['bookmark'],
        'translate_interests_to_names': params['translateInterestsToNames'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ad analytics
   * Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD
   * @param params.adIds List of Ad Ids to use to filter the results.
   * @param params.columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param params.granularity Granularity
   * @param params.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param params.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   */
  async adsAnalytics(params: IAdsAnalyticsParams): Promise<Array<{ [key: string]: object; }>> {
    // Verify required parameters are set
    this.ensureParamIsSet('adsAnalytics', params, 'adAccountId');
    this.ensureParamIsSet('adsAnalytics', params, 'startDate');
    this.ensureParamIsSet('adsAnalytics', params, 'endDate');
    this.ensureParamIsSet('adsAnalytics', params, 'adIds');
    this.ensureParamIsSet('adsAnalytics', params, 'columns');
    this.ensureParamIsSet('adsAnalytics', params, 'granularity');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ads/analytics`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'ad_ids': params['adIds'],
        'columns': params['columns'],
        'granularity': params['granularity'],
        'click_window_days': params['clickWindowDays'],
        'engagement_window_days': params['engagementWindowDays'],
        'view_window_days': params['viewWindowDays'],
        'conversion_report_time': params['conversionReportTime'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List ads
   * Get a list of the ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.campaignIds List of Campaign Ids to use to filter the results.
   * @param params.adGroupIds List of Ad group Ids to use to filter the results.
   * @param params.adIds List of Ad Ids to use to filter the results.
   * @param params.entityStatuses Entity status
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async adsList(params: IAdsListParams): Promise<Paginated & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('adsList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/ads`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'campaign_ids': params['campaignIds'],
        'ad_group_ids': params['adGroupIds'],
        'ad_ids': params['adIds'],
        'entity_statuses': params['entityStatuses'],
        'page_size': params['pageSize'],
        'order': params['order'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create async request for an account analytics report
   * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.adsAnalyticsCreateAsyncRequest 
   */
  async analyticsCreateReport(params: IAnalyticsCreateReportParams): Promise<AdsAnalyticsCreateAsyncResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('analyticsCreateReport', params, 'adAccountId');
    this.ensureParamIsSet('analyticsCreateReport', params, 'adsAnalyticsCreateAsyncRequest');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/reports`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['adsAnalyticsCreateAsyncRequest'] || {}))

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get the account analytics report created by the async call
   * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\&#39;s valid for an hour. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.token Token returned from the post request creation call
   */
  async analyticsGetReport(params: IAnalyticsGetReportParams): Promise<AdsAnalyticsGetAsyncResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('analyticsGetReport', params, 'adAccountId');
    this.ensureParamIsSet('analyticsGetReport', params, 'token');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/reports`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'token': params['token'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get campaign analytics
   * Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD
   * @param params.campaignIds List of Campaign Ids to use to filter the results.
   * @param params.columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param params.granularity Granularity
   * @param params.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param params.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   */
  async campaignsAnalytics(params: ICampaignsAnalyticsParams): Promise<Array<{ [key: string]: object; }>> {
    // Verify required parameters are set
    this.ensureParamIsSet('campaignsAnalytics', params, 'adAccountId');
    this.ensureParamIsSet('campaignsAnalytics', params, 'startDate');
    this.ensureParamIsSet('campaignsAnalytics', params, 'endDate');
    this.ensureParamIsSet('campaignsAnalytics', params, 'campaignIds');
    this.ensureParamIsSet('campaignsAnalytics', params, 'columns');
    this.ensureParamIsSet('campaignsAnalytics', params, 'granularity');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/campaigns/analytics`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'campaign_ids': params['campaignIds'],
        'columns': params['columns'],
        'granularity': params['granularity'],
        'click_window_days': params['clickWindowDays'],
        'engagement_window_days': params['engagementWindowDays'],
        'view_window_days': params['viewWindowDays'],
        'conversion_report_time': params['conversionReportTime'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List campaigns
   * Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.campaignIds List of Campaign Ids to use to filter the results.
   * @param params.entityStatuses Entity status
   * @param params.pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
   * @param params.order The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
   * @param params.bookmark Cursor used to fetch the next page of items
   */
  async campaignsList(params: ICampaignsListParams): Promise<Paginated & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('campaignsList', params, 'adAccountId');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/campaigns`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'campaign_ids': params['campaignIds'],
        'entity_statuses': params['entityStatuses'],
        'page_size': params['pageSize'],
        'order': params['order'],
        'bookmark': params['bookmark'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get product group analytics
   * Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token\&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
   * @param params.adAccountId Unique identifier of an ad account.
   * @param params.startDate Metric report start date (UTC). Format: YYYY-MM-DD
   * @param params.endDate Metric report end date (UTC). Format: YYYY-MM-DD
   * @param params.productGroupIds List of Product group Ids to use to filter the results.
   * @param params.columns Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile\&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it\&#39;s microdollars. Otherwise, it\&#39;s in microunits of the advertiser\&#39;s currency.&lt;br/&gt;For example, if the advertiser\&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
   * @param params.granularity Granularity
   * @param params.clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
   * @param params.viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
   * @param params.conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
   */
  async productGroupsAnalytics(params: IProductGroupsAnalyticsParams): Promise<Array<{ [key: string]: object; }>> {
    // Verify required parameters are set
    this.ensureParamIsSet('productGroupsAnalytics', params, 'adAccountId');
    this.ensureParamIsSet('productGroupsAnalytics', params, 'startDate');
    this.ensureParamIsSet('productGroupsAnalytics', params, 'endDate');
    this.ensureParamIsSet('productGroupsAnalytics', params, 'productGroupIds');
    this.ensureParamIsSet('productGroupsAnalytics', params, 'columns');
    this.ensureParamIsSet('productGroupsAnalytics', params, 'granularity');

    // Create URL to call
    const url = `${this.basePath}/ad_accounts/{ad_account_id}/product_groups/analytics`
      .replace(`{${'ad_account_id'}}`, encodeURIComponent(`${params['adAccountId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start_date': params['startDate'],
        'end_date': params['endDate'],
        'product_group_ids': params['productGroupIds'],
        'columns': params['columns'],
        'granularity': params['granularity'],
        'click_window_days': params['clickWindowDays'],
        'engagement_window_days': params['engagementWindowDays'],
        'view_window_days': params['viewWindowDays'],
        'conversion_report_time': params['conversionReportTime'],
      })

      // Authentication 'pinterest_oauth2' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

