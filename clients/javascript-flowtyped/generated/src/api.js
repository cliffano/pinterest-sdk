// @flow
/* eslint-disable no-use-before-define */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api.pinterest.com/v5".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}


            export type AccountAccountTypeEnum = 'PINNER' | 'BUSINESS';
/**
 * 
 * @export
 */
export type Account = {
    /**
     * Type of account
     * @type {string}
     * @memberof Account
     */
    account_type?: AccountAccountTypeEnum;
    /**
     * User account ID.
     * @type {string}
     * @memberof Account
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    profile_image?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    website_url?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    username?: string;
    /**
     * Profile about description.
     * @type {string}
     * @memberof Account
     */
    about?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    business_name?: string;
    /**
     * User account board count.<br/>**Note**: Board count on user account level may differ from counts found elsewhere due to attribution of collaborative Boards.
     * @type {number}
     * @memberof Account
     */
    board_count?: number;
    /**
     * User account pin count. This includes both created and saved pins.
     * @type {number}
     * @memberof Account
     */
    pin_count?: number;
    /**
     * User account follower count.
     * @type {number}
     * @memberof Account
     */
    follower_count?: number;
    /**
     * User account following count.
     * @type {number}
     * @memberof Account
     */
    following_count?: number;
    /**
     * User account monthly views.
     * @type {number}
     * @memberof Account
     */
    monthly_views?: number;
}

/**
 * Ad group billable event type. For update, only draft ad groups may update billable event.
 * @export
 * @enum {string}
 */
export type ActionType = 'CLICKTHROUGH' | 'IMPRESSION' | 'VIDEO_V_50_MRC';

/**
 * 
 * @export
 */
export type AdAccount = {
    /**
     * 
     * @type {string}
     * @memberof AdAccount
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AdAccount
     */
    name?: string;
    /**
     * 
     * @type {AdAccountOwner}
     * @memberof AdAccount
     */
    owner?: AdAccountOwner;
    /**
     * 
     * @type {Country}
     * @memberof AdAccount
     */
    country?: Country;
    /**
     * 
     * @type {Currency}
     * @memberof AdAccount
     */
    currency?: Currency;
    /**
     * 
     * @type {Array<BusinessAccessRole>}
     * @memberof AdAccount
     */
    permissions?: Array<BusinessAccessRole>;
    /**
     * Creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdAccount
     */
    created_time?: number;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdAccount
     */
    updated_time?: number;
}

/**
 * 
 * @export
 */
export type AdAccountAnalyticsResponseInner = {
    [key: string]: AnyType | any;

    /**
     * The ID of the advertiser that this metrics belongs to.
     * @type {string}
     * @memberof AdAccountAnalyticsResponseInner
     */
    AD_ACCOUNT_ID: string;
    /**
     * Current metrics date. Only returned when granularity is a time-based value (`DAY`, `HOUR`, `WEEK`, `MONTH`)
     * @type {Date}
     * @memberof AdAccountAnalyticsResponseInner
     */
    DATE?: Date;
}

/**
 * 
 * @export
 */
export type AdAccountCreateRequest = {
    /**
     * 
     * @type {Country}
     * @memberof AdAccountCreateRequest
     */
    country?: Country;
    /**
     * Ad Account name.
     * @type {string}
     * @memberof AdAccountCreateRequest
     */
    name?: string;
    /**
     * Advertiser\'s owning user ID.
     * @type {string}
     * @memberof AdAccountCreateRequest
     */
    owner_user_id?: string;
}

/**
 * 
 * @export
 */
export type AdAccountCreateSubscriptionRequest = {
    /**
     * Standard HTTPS webhook URL.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionRequest
     */
    webhook_url: string;
    /**
     * Lead form ID.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionRequest
     */
    lead_form_id?: string;
    /**
     * Partner access token. Only for clients that requires authentication. We recommend to avoid this param.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionRequest
     */
    partner_access_token?: string;
    /**
     * Partner refresh token. Only for clients that requires authentication. We recommend to avoid this param.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionRequest
     */
    partner_refresh_token?: string;
}

/**
 * 
 * @export
 */
export type AdAccountCreateSubscriptionResponse = {
    /**
     * Subscription ID.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionResponse
     */
    id?: string;
    /**
     * Base64 encoded key for client to decrypt lead data.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionResponse
     */
    cryptographic_key?: string;
    /**
     * Lead data encryption algorithm.
     * @type {string}
     * @memberof AdAccountCreateSubscriptionResponse
     */
    cryptographic_algorithm?: string;
    /**
     * Subscription creation time. Unix timestamp in milliseconds.
     * @type {number}
     * @memberof AdAccountCreateSubscriptionResponse
     */
    created_time?: number;
}

/**
 * 
 * @export
 */
export type AdAccountGetSubscriptionResponse = {
    /**
     * Lead form ID.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    lead_form_id?: string;
    /**
     * Standard HTTPS webhook URL.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    webhook_url?: string;
    /**
     * Subscription ID.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    id?: string;
    /**
     * User account used to subscribe lead data.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    user_account_id?: string;
    /**
     * The Ad Account ID that this lead form belongs to.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    ad_account_id?: string;
    /**
     * API version.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    api_version?: string;
    /**
     * Base64 encoded key for client to decrypt lead data.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    cryptographic_key?: string;
    /**
     * Lead data encryption algorithm.
     * @type {string}
     * @memberof AdAccountGetSubscriptionResponse
     */
    cryptographic_algorithm?: string;
    /**
     * Lead form creation time. Unix timestamp in milliseconds.
     * @type {number}
     * @memberof AdAccountGetSubscriptionResponse
     */
    created_time?: number;
}

/**
 * 
 * @export
 */
export type AdAccountOwner = {
    /**
     * Public username for the user account
     * @type {string}
     * @memberof AdAccountOwner
     */
    username?: string;
    /**
     * The owning account\'s user ID.
     * @type {string}
     * @memberof AdAccountOwner
     */
    id?: string;
}

/**
 * 
 * @export
 */
export type AdAccountsCatalogsProductGroupsList200Response = {
    /**
     * 
     * @type {Array<CatalogProductGroup>}
     * @memberof AdAccountsCatalogsProductGroupsList200Response
     */
    items: Array<CatalogProductGroup>;
    /**
     * 
     * @type {string}
     * @memberof AdAccountsCatalogsProductGroupsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AdAccountsCountryResponse = {
    /**
     * 
     * @type {Array<AdAccountsCountryResponseData>}
     * @memberof AdAccountsCountryResponse
     */
    items?: Array<AdAccountsCountryResponseData>;
}

/**
 * 
 * @export
 */
export type AdAccountsCountryResponseData = {
    /**
     * 
     * @type {AdCountry}
     * @memberof AdAccountsCountryResponseData
     */
    code?: AdCountry;
    /**
     * Country currency.
     * @type {string}
     * @memberof AdAccountsCountryResponseData
     */
    currency?: string;
    /**
     * Country index
     * @type {number}
     * @memberof AdAccountsCountryResponseData
     */
    index?: number;
    /**
     * Country name
     * @type {string}
     * @memberof AdAccountsCountryResponseData
     */
    name?: string;
}

/**
 * 
 * @export
 */
export type AdAccountsList200Response = {
    /**
     * Ad accounts
     * @type {Array<AdAccount>}
     * @memberof AdAccountsList200Response
     */
    items: Array<AdAccount>;
    /**
     * 
     * @type {string}
     * @memberof AdAccountsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AdAccountsSubscriptionsGetList200Response = {
    /**
     * 
     * @type {Array<AdAccountGetSubscriptionResponse>}
     * @memberof AdAccountsSubscriptionsGetList200Response
     */
    items: Array<AdAccountGetSubscriptionResponse>;
    /**
     * 
     * @type {string}
     * @memberof AdAccountsSubscriptionsGetList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AdArrayResponse = {
    /**
     * 
     * @type {Array<AdArrayResponseElement>}
     * @memberof AdArrayResponse
     */
    items?: Array<AdArrayResponseElement>;
}

/**
 * 
 * @export
 */
export type AdArrayResponseElement = {
    /**
     * 
     * @type {AdResponse}
     * @memberof AdArrayResponseElement
     */
    data?: AdResponse;
    /**
     * 
     * @type {Exception}
     * @memberof AdArrayResponseElement
     */
    exceptions?: Exception;
}


            export type AdCommonCustomizableCtaTypeEnum = 'GET_OFFER' | 'LEARN_MORE' | 'ORDER_NOW' | 'SHOP_NOW' | 'SIGN_UP' | 'SUBSCRIBE' | 'BUY_NOW' | 'CONTACT_US' | 'GET_QUOTE' | 'VISIT_WEBSITE' | 'APPLY_NOW' | 'BOOK_NOW' | 'REQUEST_DEMO' | 'REGISTER_NOW' | 'FIND_A_DEALER' | 'ADD_TO_CART' | 'WATCH_NOW' | 'READ_MORE' | 'null';
/**
 * Creation fields
 * @export
 */
export type AdCommon = {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdCommon
     */
    ad_group_id?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdCommon
     */
    android_deep_link?: string;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdCommon
     */
    carousel_android_deep_links?: Array<string>;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdCommon
     */
    carousel_destination_urls?: Array<string>;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdCommon
     */
    carousel_ios_deep_links?: Array<string>;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdCommon
     */
    click_tracking_url?: string;
    /**
     * 
     * @type {CreativeType}
     * @memberof AdCommon
     */
    creative_type?: CreativeType;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdCommon
     */
    destination_url?: string;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdCommon
     */
    ios_deep_link?: string;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdCommon
     */
    is_pin_deleted?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdCommon
     */
    is_removable?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdCommon
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdCommon
     */
    status?: EntityStatus;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof AdCommon
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdCommon
     */
    view_tracking_url?: string;
    /**
     * Lead form ID for lead ad generation.
     * @type {string}
     * @memberof AdCommon
     */
    lead_form_id?: string;
    /**
     * 
     * @type {GridClickType}
     * @memberof AdCommon
     */
    grid_click_type?: GridClickType;
    /**
     * Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_WEBSITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
     * @type {string}
     * @memberof AdCommon
     */
    customizable_cta_type?: AdCommonCustomizableCtaTypeEnum;
    /**
     * 
     * @type {AdCommonQuizPinData}
     * @memberof AdCommon
     */
    quiz_pin_data?: AdCommonQuizPinData;
}

/**
 * Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
 * @export
 */
export type AdCommonQuizPinData = {
    /**
     * 
     * @type {Array<QuizPinQuestion>}
     * @memberof AdCommonQuizPinData
     */
    questions?: Array<QuizPinQuestion>;
    /**
     * 
     * @type {Array<QuizPinResult>}
     * @memberof AdCommonQuizPinData
     */
    results?: Array<QuizPinResult>;
}

/**
 * 
 * @export
 */
export type AdCommonTrackingUrls = {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdCommonTrackingUrls
     */
    impression?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdCommonTrackingUrls
     */
    click?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdCommonTrackingUrls
     */
    engagement?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdCommonTrackingUrls
     */
    buyable_button?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdCommonTrackingUrls
     */
    audience_verification?: Array<string>;
}

/**
 * Country ID from ISO 3166-1 alpha-2.
 * @export
 * @enum {string}
 */
export type AdCountry = 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AS' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FM' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MH' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MP' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PW' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VI' | 'VN' | 'VU' | 'WF' | 'WS' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW';


            export type AdCreateRequestCustomizableCtaTypeEnum = 'GET_OFFER' | 'LEARN_MORE' | 'ORDER_NOW' | 'SHOP_NOW' | 'SIGN_UP' | 'SUBSCRIBE' | 'BUY_NOW' | 'CONTACT_US' | 'GET_QUOTE' | 'VISIT_WEBSITE' | 'APPLY_NOW' | 'BOOK_NOW' | 'REQUEST_DEMO' | 'REGISTER_NOW' | 'FIND_A_DEALER' | 'ADD_TO_CART' | 'WATCH_NOW' | 'READ_MORE' | 'null';
/**
 * 
 * @export
 */
export type AdCreateRequest = {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdCreateRequest
     */
    ad_group_id: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdCreateRequest
     */
    android_deep_link?: string;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdCreateRequest
     */
    carousel_android_deep_links?: Array<string>;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdCreateRequest
     */
    carousel_destination_urls?: Array<string>;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdCreateRequest
     */
    carousel_ios_deep_links?: Array<string>;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdCreateRequest
     */
    click_tracking_url?: string;
    /**
     * 
     * @type {CreativeType}
     * @memberof AdCreateRequest
     */
    creative_type: CreativeType;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdCreateRequest
     */
    destination_url?: string;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdCreateRequest
     */
    ios_deep_link?: string;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdCreateRequest
     */
    is_pin_deleted?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdCreateRequest
     */
    is_removable?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdCreateRequest
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdCreateRequest
     */
    status?: EntityStatus;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof AdCreateRequest
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdCreateRequest
     */
    view_tracking_url?: string;
    /**
     * Lead form ID for lead ad generation.
     * @type {string}
     * @memberof AdCreateRequest
     */
    lead_form_id?: string;
    /**
     * 
     * @type {GridClickType}
     * @memberof AdCreateRequest
     */
    grid_click_type?: GridClickType;
    /**
     * Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_WEBSITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
     * @type {string}
     * @memberof AdCreateRequest
     */
    customizable_cta_type?: AdCreateRequestCustomizableCtaTypeEnum;
    /**
     * 
     * @type {AdCommonQuizPinData}
     * @memberof AdCreateRequest
     */
    quiz_pin_data?: AdCommonQuizPinData;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdCreateRequest
     */
    pin_id: string;
}

/**
 * 
 * @export
 */
export type AdGroupArrayResponse = {
    /**
     * 
     * @type {Array<AdGroupArrayResponseElement>}
     * @memberof AdGroupArrayResponse
     */
    items?: Array<AdGroupArrayResponseElement>;
}

/**
 * 
 * @export
 */
export type AdGroupArrayResponseElement = {
    /**
     * 
     * @type {AdGroupResponse}
     * @memberof AdGroupArrayResponseElement
     */
    data?: AdGroupResponse;
    /**
     * 
     * @type {Array<Exception>}
     * @memberof AdGroupArrayResponseElement
     */
    exceptions?: Array<Exception>;
}


            export type AdGroupAudienceSizingRequestCreativeTypesEnum = 'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA';
/**
 * 
 * @export
 */
export type AdGroupAudienceSizingRequest = {
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupAudienceSizingRequest
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupAudienceSizingRequest
     */
    placement_group?: PlacementGroupType;
    /**
     * Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
     * @type {Array<string>}
     * @memberof AdGroupAudienceSizingRequest
     */
    creative_types?: Array<AdGroupAudienceSizingRequestCreativeTypesEnum>;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupAudienceSizingRequest
     */
    targeting_spec?: TargetingSpec;
    /**
     * Targeted product group IDs. </p><strong>Note:</strong> This can only be combined with shopping/catalog sales campaigns. For more information, <a href=\"https://help.pinterest.com/en/business/article/shopping-ads#section-14571\" target=\"_blank\">click here</a>. SHOPPING_RETARGETING must be included in targeting_spec object or this field will be ignored.
     * @type {Array<string>}
     * @memberof AdGroupAudienceSizingRequest
     */
    product_group_ids?: Array<string>;
    /**
     * Array of keyword objects. If the keywords field is missing, all keywords will be targeted.
     * @type {Array<AdGroupAudienceSizingRequestKeywordsInner>}
     * @memberof AdGroupAudienceSizingRequest
     */
    keywords?: Array<AdGroupAudienceSizingRequestKeywordsInner>;
}

/**
 * 
 * @export
 */
export type AdGroupAudienceSizingRequestKeywordsInner = {
    /**
     * 
     * @type {MatchTypeResponse}
     * @memberof AdGroupAudienceSizingRequestKeywordsInner
     */
    match_type: MatchTypeResponse;
    /**
     * Keyword value (120 chars max).
     * @type {string}
     * @memberof AdGroupAudienceSizingRequestKeywordsInner
     */
    value: string;
}

/**
 * 
 * @export
 */
export type AdGroupAudienceSizingResponse = {
    /**
     * The lower confidence bound of the estimated potential audience size. \"Potential audience size\" estimates the number of people you may be able to reach per month with your campaign. It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
     * @type {number}
     * @memberof AdGroupAudienceSizingResponse
     */
    audience_size_lower_bound?: number;
    /**
     * The upper confidence bound of the estimated potential audience size. \"Potential audience size\" estimates the number of people you may be able to reach per month with your campaign. It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
     * @type {number}
     * @memberof AdGroupAudienceSizingResponse
     */
    audience_size_upper_bound?: number;
}


            export type AdGroupCommonBidStrategyTypeEnum = 'AUTOMATIC_BID' | 'MAX_BID' | 'TARGET_AVG' | 'null';
/**
 * 
 * @export
 */
export type AdGroupCommon = {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupCommon
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupCommon
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupCommon
     */
    budget_in_micro_currency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupCommon
     */
    bid_in_micro_currency?: number;
    /**
     * 
     * @type {AdGroupCommonOptimizationGoalMetadata}
     * @memberof AdGroupCommon
     */
    optimization_goal_metadata?: AdGroupCommonOptimizationGoalMetadata;
    /**
     * 
     * @type {BudgetType}
     * @memberof AdGroupCommon
     */
    budget_type?: BudgetType;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupCommon
     */
    start_time?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupCommon
     */
    end_time?: number;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupCommon
     */
    targeting_spec?: TargetingSpec;
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"https://developers.pinterest.com/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupCommon
     */
    lifetime_frequency_cap?: number;
    /**
     * 
     * @type {AdGroupCommonTrackingUrls}
     * @memberof AdGroupCommon
     */
    tracking_urls?: AdGroupCommonTrackingUrls;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupCommon
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\"https://developers.pinterest.com/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupCommon
     */
    placement_group?: PlacementGroupType;
    /**
     * 
     * @type {PacingDeliveryType}
     * @memberof AdGroupCommon
     */
    pacing_delivery_type?: PacingDeliveryType;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupCommon
     */
    campaign_id?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupCommon
     */
    billable_event?: ActionType;
    /**
     * Bid strategy type
     * @type {string}
     * @memberof AdGroupCommon
     */
    bid_strategy_type?: AdGroupCommonBidStrategyTypeEnum;
}

/**
 * Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign\'s `objective_type` is set to `\"WEB_CONVERSION\"`.
 * @export
 */
export type AdGroupCommonOptimizationGoalMetadata = {
    /**
     * 
     * @type {OptimizationGoalMetadataConversionTagV3GoalMetadata}
     * @memberof AdGroupCommonOptimizationGoalMetadata
     */
    conversion_tag_v3_goal_metadata?: OptimizationGoalMetadataConversionTagV3GoalMetadata;
    /**
     * 
     * @type {OptimizationGoalMetadataFrequencyGoalMetadata}
     * @memberof AdGroupCommonOptimizationGoalMetadata
     */
    frequency_goal_metadata?: OptimizationGoalMetadataFrequencyGoalMetadata;
    /**
     * 
     * @type {OptimizationGoalMetadataScrollupGoalMetadata}
     * @memberof AdGroupCommonOptimizationGoalMetadata
     */
    scrollup_goal_metadata?: OptimizationGoalMetadataScrollupGoalMetadata;
}

/**
 * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @export
 */
export type AdGroupCommonTrackingUrls = {
    /**
     * 
     * @type {Array<string>}
     * @memberof AdGroupCommonTrackingUrls
     */
    impression?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdGroupCommonTrackingUrls
     */
    click?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdGroupCommonTrackingUrls
     */
    engagement?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdGroupCommonTrackingUrls
     */
    buyable_button?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdGroupCommonTrackingUrls
     */
    audience_verification?: Array<string>;
}


            export type AdGroupCreateRequestBidStrategyTypeEnum = 'AUTOMATIC_BID' | 'MAX_BID' | 'TARGET_AVG' | 'null';
/**
 * 
 * @export
 */
export type AdGroupCreateRequest = {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupCreateRequest
     */
    name: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupCreateRequest
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupCreateRequest
     */
    budget_in_micro_currency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupCreateRequest
     */
    bid_in_micro_currency?: number;
    /**
     * 
     * @type {AdGroupCommonOptimizationGoalMetadata}
     * @memberof AdGroupCreateRequest
     */
    optimization_goal_metadata?: AdGroupCommonOptimizationGoalMetadata;
    /**
     * 
     * @type {BudgetType}
     * @memberof AdGroupCreateRequest
     */
    budget_type?: BudgetType;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupCreateRequest
     */
    start_time?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupCreateRequest
     */
    end_time?: number;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupCreateRequest
     */
    targeting_spec?: TargetingSpec;
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"https://developers.pinterest.com/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupCreateRequest
     */
    lifetime_frequency_cap?: number;
    /**
     * 
     * @type {AdGroupCommonTrackingUrls}
     * @memberof AdGroupCreateRequest
     */
    tracking_urls?: AdGroupCommonTrackingUrls;
    /**
     * Enable auto-targeting for ad group.Default value is True. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupCreateRequest
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\"https://developers.pinterest.com/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupCreateRequest
     */
    placement_group?: PlacementGroupType;
    /**
     * 
     * @type {PacingDeliveryType}
     * @memberof AdGroupCreateRequest
     */
    pacing_delivery_type?: PacingDeliveryType;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupCreateRequest
     */
    campaign_id: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupCreateRequest
     */
    billable_event: ActionType;
    /**
     * Bid strategy type
     * @type {string}
     * @memberof AdGroupCreateRequest
     */
    bid_strategy_type?: AdGroupCreateRequestBidStrategyTypeEnum;
}


            export type AdGroupResponseBidStrategyTypeEnum = 'AUTOMATIC_BID' | 'MAX_BID' | 'TARGET_AVG' | 'null';

            export type AdGroupResponseConversionLearningModeTypeEnum = 'NOT_ACTIVE' | 'ACTIVE' | 'null';
/**
 * 
 * @export
 */
export type AdGroupResponse = {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupResponse
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupResponse
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupResponse
     */
    budget_in_micro_currency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupResponse
     */
    bid_in_micro_currency?: number;
    /**
     * 
     * @type {AdGroupCommonOptimizationGoalMetadata}
     * @memberof AdGroupResponse
     */
    optimization_goal_metadata?: AdGroupCommonOptimizationGoalMetadata;
    /**
     * 
     * @type {BudgetType}
     * @memberof AdGroupResponse
     */
    budget_type?: BudgetType;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupResponse
     */
    start_time?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    end_time?: number;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupResponse
     */
    targeting_spec?: TargetingSpec;
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"https://developers.pinterest.com/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupResponse
     */
    lifetime_frequency_cap?: number;
    /**
     * 
     * @type {AdGroupCommonTrackingUrls}
     * @memberof AdGroupResponse
     */
    tracking_urls?: AdGroupCommonTrackingUrls;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupResponse
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\"https://developers.pinterest.com/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupResponse
     */
    placement_group?: PlacementGroupType;
    /**
     * 
     * @type {PacingDeliveryType}
     * @memberof AdGroupResponse
     */
    pacing_delivery_type?: PacingDeliveryType;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupResponse
     */
    campaign_id?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupResponse
     */
    billable_event?: ActionType;
    /**
     * Bid strategy type
     * @type {string}
     * @memberof AdGroupResponse
     */
    bid_strategy_type?: AdGroupResponseBidStrategyTypeEnum;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    id?: string;
    /**
     * Advertiser ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    ad_account_id?: string;
    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    created_time?: number;
    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    updated_time?: number;
    /**
     * Always \"adgroup\".
     * @type {string}
     * @memberof AdGroupResponse
     */
    type?: string;
    /**
     * oCPM learn mode
     * @type {string}
     * @memberof AdGroupResponse
     */
    conversion_learning_mode_type?: AdGroupResponseConversionLearningModeTypeEnum;
    /**
     * Ad group summary status.
     * @type {AdGroupSummaryStatus}
     * @memberof AdGroupResponse
     */
    summary_status?: AdGroupSummaryStatus;
    /**
     * Feed Profile ID associated to the adgroup.
     * @type {string}
     * @memberof AdGroupResponse
     */
    feed_profile_id?: string;
    /**
     * [DCA] The Dynamic creative assets to use for DCA. Dynamic Creative Assembly (DCA) accepts basic creative assets of an ad (image, video, title, call to action, logo etc). Then it automatically generates optimized ad combinations based on these assets.
     * @type {AnyType}
     * @memberof AdGroupResponse
     */
    dca_assets?: AnyType;
}

/**
 * Summary status for ad group
 * @export
 * @enum {string}
 */
export type AdGroupSummaryStatus = 'RUNNING' | 'PAUSED' | 'NOT_STARTED' | 'COMPLETED' | 'ADVERTISER_DISABLED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT';


            export type AdGroupUpdateRequestBidStrategyTypeEnum = 'AUTOMATIC_BID' | 'MAX_BID' | 'TARGET_AVG' | 'null';
/**
 * 
 * @export
 */
export type AdGroupUpdateRequest = {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupUpdateRequest
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    budget_in_micro_currency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    bid_in_micro_currency?: number;
    /**
     * 
     * @type {AdGroupCommonOptimizationGoalMetadata}
     * @memberof AdGroupUpdateRequest
     */
    optimization_goal_metadata?: AdGroupCommonOptimizationGoalMetadata;
    /**
     * 
     * @type {BudgetType}
     * @memberof AdGroupUpdateRequest
     */
    budget_type?: BudgetType;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    start_time?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    end_time?: number;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof AdGroupUpdateRequest
     */
    targeting_spec?: TargetingSpec;
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"https://developers.pinterest.com/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupUpdateRequest
     */
    lifetime_frequency_cap?: number;
    /**
     * 
     * @type {AdGroupCommonTrackingUrls}
     * @memberof AdGroupUpdateRequest
     */
    tracking_urls?: AdGroupCommonTrackingUrls;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupUpdateRequest
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\"https://developers.pinterest.com/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupUpdateRequest
     */
    placement_group?: PlacementGroupType;
    /**
     * 
     * @type {PacingDeliveryType}
     * @memberof AdGroupUpdateRequest
     */
    pacing_delivery_type?: PacingDeliveryType;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    campaign_id?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupUpdateRequest
     */
    billable_event?: ActionType;
    /**
     * Bid strategy type
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    bid_strategy_type?: AdGroupUpdateRequestBidStrategyTypeEnum;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupUpdateRequest
     */
    id: string;
}

/**
 * 
 * @export
 */
export type AdGroupsAnalyticsResponseInner = {
    [key: string]: AnyType | any;

    /**
     * The ID of the ad group that this metrics belongs to.
     * @type {string}
     * @memberof AdGroupsAnalyticsResponseInner
     */
    AD_GROUP_ID: string;
    /**
     * Current metrics date. Only returned when granularity is a time-based value (`DAY`, `HOUR`, `WEEK`, `MONTH`)
     * @type {Date}
     * @memberof AdGroupsAnalyticsResponseInner
     */
    DATE?: Date;
}

/**
 * 
 * @export
 */
export type AdGroupsList200Response = {
    /**
     * 
     * @type {Array<AdGroupResponse>}
     * @memberof AdGroupsList200Response
     */
    items: Array<AdGroupResponse>;
    /**
     * 
     * @type {string}
     * @memberof AdGroupsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AdPinId = {
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdPinId
     */
    pin_id?: string;
}

/**
 * 
 * @export
 */
export type AdPreviewCreateFromImage = {
    /**
     * Image URL.
     * @type {string}
     * @memberof AdPreviewCreateFromImage
     */
    image_url: string;
    /**
     * Title displayed below ad.
     * @type {string}
     * @memberof AdPreviewCreateFromImage
     */
    title: string;
}

/**
 * 
 * @export
 */
export type AdPreviewCreateFromPin = {
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdPreviewCreateFromPin
     */
    pin_id: string;
}

/**
 * 
 * @export
 */
export type AdPreviewRequest = {
    /**
     * Image URL.
     * @type {string}
     * @memberof AdPreviewRequest
     */
    image_url: string;
    /**
     * Title displayed below ad.
     * @type {string}
     * @memberof AdPreviewRequest
     */
    title: string;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdPreviewRequest
     */
    pin_id: string;
}

/**
 * 
 * @export
 */
export type AdPreviewURLResponse = {
    /**
     * \'Preview URL, expires in 7 days. Can be used in an iframe. For example: https://ads.pinterest.com/ad-preview/74667c814dd2b19/ The preview object ID/key is the last param - 74667c814dd2b19\'
     * @type {string}
     * @memberof AdPreviewURLResponse
     */
    url?: string;
}


            export type AdResponseCustomizableCtaTypeEnum = 'GET_OFFER' | 'LEARN_MORE' | 'ORDER_NOW' | 'SHOP_NOW' | 'SIGN_UP' | 'SUBSCRIBE' | 'BUY_NOW' | 'CONTACT_US' | 'GET_QUOTE' | 'VISIT_WEBSITE' | 'APPLY_NOW' | 'BOOK_NOW' | 'REQUEST_DEMO' | 'REGISTER_NOW' | 'FIND_A_DEALER' | 'ADD_TO_CART' | 'WATCH_NOW' | 'READ_MORE' | 'null';

            export type AdResponseRejectedReasonsEnum = 'HASHTAGS' | 'PROMOTIONS_AND_PRICES' | 'TARGETING' | 'LANDING_PAGE' | 'CAPS_AND_SYMBOLS' | 'SHOCKING' | 'WEIGHT_LOSS' | 'PROHIBITED_PRODUCT' | 'AUTHENTICITY' | 'NUDITY' | 'CONFUSING_DESIGN' | 'URGENCY' | 'RATINGS' | 'APP' | 'ALCOHOL' | 'CONTESTS' | 'POLITICAL' | 'OTHER' | 'IMAGE' | 'NAR' | 'INCONSISTENT' | 'CLICKBAIT' | 'NO_DESCRIPTION' | 'LOW_QUALITY' | 'EXAGGERATED_CLAIMS' | 'PINTEREST_BRAND' | 'ALCOHOL_NO_SALE' | 'LANDING_PAGE_SPEED' | 'LANDING_PAGE_HARDWALL' | 'LANDING_PAGE_BROKEN' | 'LANDING_PAGE_QUALITY' | 'OUT_OF_STOCK' | 'IMAGE_LOW_QUALITY' | 'IMAGE_BUSY' | 'IMAGE_POORLY_EDITED' | 'IMAGE_BEFORE_AFTER' | 'UGC' | 'FAKE_BUTTONS' | 'WEAPONS' | 'SENSITIVE' | 'UNACCEPTABLE_BUSINESS' | 'SUSPICIOUS_CLAIMS' | 'PHARMA' | 'SUSPICIOUS_SUPPLEMENTS' | 'ILLEGAL_RECREATIONAL_DRUG' | 'LOW_QUALITY_LANDING_PAGE' | 'RESTRICTED_HEALTHCARE' | 'INCONSISTENT_LANG_FR';

            export type AdResponseReviewStatusEnum = 'OTHER' | 'PENDING' | 'REJECTED' | 'APPROVED';
/**
 * 
 * @export
 */
export type AdResponse = {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdResponse
     */
    ad_group_id?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponse
     */
    android_deep_link?: string;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    carousel_android_deep_links?: Array<string>;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    carousel_destination_urls?: Array<string>;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    carousel_ios_deep_links?: Array<string>;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdResponse
     */
    click_tracking_url?: string;
    /**
     * 
     * @type {CreativeType}
     * @memberof AdResponse
     */
    creative_type?: CreativeType;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdResponse
     */
    destination_url?: string;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponse
     */
    ios_deep_link?: string;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdResponse
     */
    is_pin_deleted?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdResponse
     */
    is_removable?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdResponse
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdResponse
     */
    status?: EntityStatus;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof AdResponse
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdResponse
     */
    view_tracking_url?: string;
    /**
     * Lead form ID for lead ad generation.
     * @type {string}
     * @memberof AdResponse
     */
    lead_form_id?: string;
    /**
     * 
     * @type {GridClickType}
     * @memberof AdResponse
     */
    grid_click_type?: GridClickType;
    /**
     * Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_WEBSITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
     * @type {string}
     * @memberof AdResponse
     */
    customizable_cta_type?: AdResponseCustomizableCtaTypeEnum;
    /**
     * 
     * @type {AdCommonQuizPinData}
     * @memberof AdResponse
     */
    quiz_pin_data?: AdCommonQuizPinData;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdResponse
     */
    pin_id?: string;
    /**
     * The ID of the advertiser that this ad belongs to.
     * @type {string}
     * @memberof AdResponse
     */
    ad_account_id?: string;
    /**
     * ID of the ad campaign that contains this ad.
     * @type {string}
     * @memberof AdResponse
     */
    campaign_id?: string;
    /**
     * Destination URL template for all items within a collections drawer.
     * @type {string}
     * @memberof AdResponse
     */
    collection_items_destination_url_template?: string;
    /**
     * Pin creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponse
     */
    created_time?: number;
    /**
     * The ID of this ad.
     * @type {string}
     * @memberof AdResponse
     */
    id?: string;
    /**
     * Enum reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponse
     */
    rejected_reasons?: Array<AdResponseRejectedReasonsEnum>;
    /**
     * Text reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponse
     */
    rejection_labels?: Array<string>;
    /**
     * Ad review status
     * @type {string}
     * @memberof AdResponse
     */
    review_status?: AdResponseReviewStatusEnum;
    /**
     * Always \"ad\".
     * @type {string}
     * @memberof AdResponse
     */
    type?: string;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponse
     */
    updated_time?: number;
    /**
     * Ad summary status
     * @type {PinPromotionSummaryStatus}
     * @memberof AdResponse
     */
    summary_status?: PinPromotionSummaryStatus;
}


            export type AdUpdateRequestCustomizableCtaTypeEnum = 'GET_OFFER' | 'LEARN_MORE' | 'ORDER_NOW' | 'SHOP_NOW' | 'SIGN_UP' | 'SUBSCRIBE' | 'BUY_NOW' | 'CONTACT_US' | 'GET_QUOTE' | 'VISIT_WEBSITE' | 'APPLY_NOW' | 'BOOK_NOW' | 'REQUEST_DEMO' | 'REGISTER_NOW' | 'FIND_A_DEALER' | 'ADD_TO_CART' | 'WATCH_NOW' | 'READ_MORE' | 'null';
/**
 * 
 * @export
 */
export type AdUpdateRequest = {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    ad_group_id?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    android_deep_link?: string;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdUpdateRequest
     */
    carousel_android_deep_links?: Array<string>;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdUpdateRequest
     */
    carousel_destination_urls?: Array<string>;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdUpdateRequest
     */
    carousel_ios_deep_links?: Array<string>;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    click_tracking_url?: string;
    /**
     * 
     * @type {CreativeType}
     * @memberof AdUpdateRequest
     */
    creative_type?: CreativeType;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    destination_url?: string;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    ios_deep_link?: string;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdUpdateRequest
     */
    is_pin_deleted?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdUpdateRequest
     */
    is_removable?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdUpdateRequest
     */
    status?: EntityStatus;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof AdUpdateRequest
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    view_tracking_url?: string;
    /**
     * Lead form ID for lead ad generation.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    lead_form_id?: string;
    /**
     * 
     * @type {GridClickType}
     * @memberof AdUpdateRequest
     */
    grid_click_type?: GridClickType;
    /**
     * Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_WEBSITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only)
     * @type {string}
     * @memberof AdUpdateRequest
     */
    customizable_cta_type?: AdUpdateRequestCustomizableCtaTypeEnum;
    /**
     * 
     * @type {AdCommonQuizPinData}
     * @memberof AdUpdateRequest
     */
    quiz_pin_data?: AdCommonQuizPinData;
    /**
     * The ID of this ad.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    id: string;
    /**
     * Pin ID. This field may only be updated for draft ads.
     * @type {string}
     * @memberof AdUpdateRequest
     */
    pin_id?: string;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsCreateAsyncRequest = {
    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    start_date: string;
    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    end_date: string;
    /**
     * TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @type {Granularity}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    granularity: Granularity;
    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    click_window_days?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    engagement_window_days?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    view_window_days?: ConversionAttributionWindowDays;
    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @type {ConversionReportTimeType}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    conversion_report_time?: ConversionReportTimeType;
    /**
     * List of types of attribution for the conversion report
     * @type {Array<ConversionReportAttributionType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    attribution_types?: Array<ConversionReportAttributionType>;
    /**
     * List of campaign ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    campaign_ids?: Array<string>;
    /**
     * List of status values for filtering
     * @type {Array<CampaignSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    campaign_statuses?: Array<CampaignSummaryStatus>;
    /**
     * List of values for filtering. [\"WEB_SESSIONS\"] in BETA.
     * @type {Array<ObjectiveType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    campaign_objective_types?: Array<ObjectiveType>;
    /**
     * List of ad group ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_group_ids?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<AdGroupSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_group_statuses?: Array<AdGroupSummaryStatus>;
    /**
     * List of ad ids [This parameter is no supported for Product Item Level Reports]
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_ids?: Array<string>;
    /**
     * List of values for filtering [This parameter is not supported for Product Item Level Reports]
     * @type {Array<PinPromotionSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_statuses?: Array<PinPromotionSummaryStatus>;
    /**
     * List of product group ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    product_group_ids?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<ProductGroupSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    product_group_statuses?: Array<ProductGroupSummaryStatus>;
    /**
     * List of product item ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    product_item_ids?: Array<string>;
    /**
     * List of targeting types. Requires `level` to be a value ending in `_TARGETING`.
     * @type {Array<AdsAnalyticsTargetingType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    targeting_types?: Array<AdsAnalyticsTargetingType>;
    /**
     * List of metrics filters
     * @type {Array<AdsAnalyticsMetricsFilter>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    metrics_filters?: Array<AdsAnalyticsMetricsFilter>;
    /**
     * Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
     * @type {Array<ReportingColumnAsync>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    columns: Array<ReportingColumnAsync>;
    /**
     * Level of the report
     * @type {MetricsReportingLevel}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    level: MetricsReportingLevel;
    /**
     * Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
     * @type {DataOutputFormat}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    report_format?: DataOutputFormat;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsCreateAsyncResponse = {
    /**
     * 
     * @type {BulkReportingJobStatus}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    report_status?: BulkReportingJobStatus;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    message?: string;
}

/**
 * Reporting columns for sync reporting data filter
 * @export
 * @enum {string}
 */
export type AdsAnalyticsFilterColumn = 'SPEND_IN_DOLLAR' | 'TOTAL_IMPRESSION';

/**
 * Filter operator for sync reporting
 * @export
 * @enum {string}
 */
export type AdsAnalyticsFilterOperator = 'LESS_THAN' | 'GREATER_THAN';

/**
 * 
 * @export
 */
export type AdsAnalyticsGetAsyncResponse = {
    /**
     * 
     * @type {BulkReportingJobStatus}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    report_status?: BulkReportingJobStatus;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    url?: string;
    /**
     * 
     * @type {number}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    size?: number;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsMetricsFilter = {
    /**
     * 
     * @type {AdsAnalyticsFilterColumn}
     * @memberof AdsAnalyticsMetricsFilter
     */
    field: AdsAnalyticsFilterColumn;
    /**
     * 
     * @type {AdsAnalyticsFilterOperator}
     * @memberof AdsAnalyticsMetricsFilter
     */
    operator: AdsAnalyticsFilterOperator;
    /**
     * List of values for filtering
     * @type {Array<number>}
     * @memberof AdsAnalyticsMetricsFilter
     */
    values: Array<number>;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsResponseInner = {
    [key: string]: AnyType | any;

    /**
     * The ID of the ad that this metrics belongs to.
     * @type {string}
     * @memberof AdsAnalyticsResponseInner
     */
    AD_ID: string;
    /**
     * Current metrics date. Only returned when granularity is a time-based value (`DAY`, `HOUR`, `WEEK`, `MONTH`)
     * @type {Date}
     * @memberof AdsAnalyticsResponseInner
     */
    DATE?: Date;
}

/**
 * Reporting targeting type
 * @export
 * @enum {string}
 */
export type AdsAnalyticsTargetingType = 'KEYWORD' | 'APPTYPE' | 'GENDER' | 'LOCATION' | 'PLACEMENT' | 'COUNTRY' | 'TARGETED_INTEREST' | 'PINNER_INTEREST' | 'AUDIENCE_INCLUDE' | 'GEO' | 'AGE_BUCKET' | 'REGION';


            export type AdsCreditDiscountsResponseDiscountTypeEnum = 'COUPON' | 'CREDIT' | 'COUPON_APPLIED' | 'CREDIT_APPLIED' | 'MARKETING_OFFER_CREDIT' | 'MARKETING_OFFER_CREDIT_APPLIED' | 'GOODWILL_CREDIT' | 'GOODWILL_CREDIT_APPLIED' | 'INTERNAL_CREDIT' | 'INTERNAL_CREDIT_APPLIED' | 'PREPAID_CREDIT' | 'PREPAID_CREDIT_APPLIED' | 'SALES_INCENTIVE_CREDIT' | 'SALES_INCENTIVE_CREDIT_APPLIED' | 'CREDIT_EXPIRED' | 'FUTURE_CREDIT' | 'REFERRAL_CREDIT' | 'INVOICE_SALES_INCENTIVE_CREDIT' | 'INVOICE_SALES_INCENTIVE_CREDIT_APPLIED' | 'PREPAID_CREDIT_REFUND' | 'null';
/**
 * 
 * @export
 */
export type AdsCreditDiscountsResponse = {
    /**
     * True if the offer code is currently active.
     * @type {boolean}
     * @memberof AdsCreditDiscountsResponse
     */
    active?: boolean;
    /**
     * Advertiser ID the offer was applied to.
     * @type {string}
     * @memberof AdsCreditDiscountsResponse
     */
    advertiser_id?: string;
    /**
     * The type of discount of this credit
     * @type {string}
     * @memberof AdsCreditDiscountsResponse
     */
    discountType?: AdsCreditDiscountsResponseDiscountTypeEnum;
    /**
     * The discount applied in the offer’s currency value.
     * @type {number}
     * @memberof AdsCreditDiscountsResponse
     */
    discountInMicroCurrency?: number;
    /**
     * Currency value for the discount.
     * @type {string}
     * @memberof AdsCreditDiscountsResponse
     */
    discountCurrency?: string;
    /**
     * Human readable title of the offer code.
     * @type {string}
     * @memberof AdsCreditDiscountsResponse
     */
    title?: string;
    /**
     * The credits left to spend.
     * @type {number}
     * @memberof AdsCreditDiscountsResponse
     */
    remainingDiscountInMicroCurrency?: number;
}

/**
 * 
 * @export
 */
export type AdsCreditRedeemRequest = {
    /**
     * Takes in a SHA256 hash of the offerCode.
     * @type {string}
     * @memberof AdsCreditRedeemRequest
     */
    offerCodeHash: string;
    /**
     * If true, only validate if we can redeem offer code. Otherwise it will actually apply the offer code to the account
     * @type {boolean}
     * @memberof AdsCreditRedeemRequest
     */
    validateOnly: boolean;
}

/**
 * 
 * @export
 */
export type AdsCreditRedeemResponse = {
    /**
     * Returns true if the offer code was successfully applied(validateOnly=false) or can be applied(validateOnly=true).
     * @type {boolean}
     * @memberof AdsCreditRedeemResponse
     */
    success?: boolean;
    /**
     * Error code type if error occurs
     * @type {number}
     * @memberof AdsCreditRedeemResponse
     */
    errorCode?: number;
    /**
     * Reason for failure
     * @type {string}
     * @memberof AdsCreditRedeemResponse
     */
    errorMessage?: string;
}

/**
 * 
 * @export
 */
export type AdsCreditsDiscountsGet200Response = {
    /**
     * 
     * @type {Array<AdsCreditDiscountsResponse>}
     * @memberof AdsCreditsDiscountsGet200Response
     */
    items: Array<AdsCreditDiscountsResponse>;
    /**
     * 
     * @type {string}
     * @memberof AdsCreditsDiscountsGet200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AdsList200Response = {
    /**
     * 
     * @type {Array<AdResponse>}
     * @memberof AdsList200Response
     */
    items: Array<AdResponse>;
    /**
     * 
     * @type {string}
     * @memberof AdsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AnalyticsDailyMetrics = {
    /**
     * 
     * @type {DataStatus}
     * @memberof AnalyticsDailyMetrics
     */
    data_status?: DataStatus;
    /**
     * Metrics date (UTC): YYYY-MM-DD.
     * @type {string}
     * @memberof AnalyticsDailyMetrics
     */
    _date?: string;
    /**
     * The metric name and daily value for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof AnalyticsDailyMetrics
     */
    metrics?: { [key: string]: number; };
}

/**
 * 
 * @export
 */
export type AnalyticsMetricsResponse = {
    /**
     * The metric name and value over the requested period for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof AnalyticsMetricsResponse
     */
    summary_metrics?: { [key: string]: number; };
    /**
     * Array with the requested daily metric records
     * @type {Array<AnalyticsDailyMetrics>}
     * @memberof AnalyticsMetricsResponse
     */
    daily_metrics?: Array<AnalyticsDailyMetrics>;
}

/**
 * 
 * @export
 */
export type Audience = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof Audience
     */
    ad_account_id?: string;
    /**
     * Audience ID.
     * @type {string}
     * @memberof Audience
     */
    id?: string;
    /**
     * Audience name.
     * @type {string}
     * @memberof Audience
     */
    name?: string;
    /**
     * <a href=\"/docs/reference/glossary/#Audience Types\">Audience types</a>: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR
     * @type {string}
     * @memberof Audience
     */
    audience_type?: string;
    /**
     * Audience description.
     * @type {string}
     * @memberof Audience
     */
    description?: string;
    /**
     * 
     * @type {AudienceRule}
     * @memberof Audience
     */
    rule?: AudienceRule;
    /**
     * Audience size.
     * @type {number}
     * @memberof Audience
     */
    size?: number;
    /**
     * Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it.
     * @type {string}
     * @memberof Audience
     */
    status?: string;
    /**
     * Always \"audience\".
     * @type {string}
     * @memberof Audience
     */
    type?: string;
    /**
     * Creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof Audience
     */
    created_timestamp?: number;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof Audience
     */
    updated_timestamp?: number;
}

/**
 * 
 * @export
 */
export type AudienceCategory = {
    /**
     * Interest unique key (same as ID).
     * @type {string}
     * @memberof AudienceCategory
     */
    key?: string;
    /**
     * Interest name.
     * @type {string}
     * @memberof AudienceCategory
     */
    name?: string;
    /**
     * Interest\'s percent of category\'s total audience.
     * @type {number}
     * @memberof AudienceCategory
     */
    ratio?: number;
    /**
     * Interest affinity index.
     * @type {number}
     * @memberof AudienceCategory
     */
    index?: number;
    /**
     * Interest ID.
     * @type {string}
     * @memberof AudienceCategory
     */
    id?: string;
    /**
     * Subcategory interest distribution
     * @type {Array<AudienceSubcategory>}
     * @memberof AudienceCategory
     */
    subcategories?: Array<AudienceSubcategory>;
}

/**
 * 
 * @export
 */
export type AudienceCommon = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof AudienceCommon
     */
    ad_account_id?: string;
    /**
     * Audience name.
     * @type {string}
     * @memberof AudienceCommon
     */
    name?: string;
    /**
     * 
     * @type {AudienceRule}
     * @memberof AudienceCommon
     */
    rule?: AudienceRule;
}

/**
 * 
 * @export
 */
export type AudienceCreateCustomRequest = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof AudienceCreateCustomRequest
     */
    ad_account_id?: string;
    /**
     * Audience name.
     * @type {string}
     * @memberof AudienceCreateCustomRequest
     */
    name: string;
    /**
     * 
     * @type {AudienceRule}
     * @memberof AudienceCreateCustomRequest
     */
    rule: AudienceRule;
    /**
     * 
     * @type {AudienceSharingType}
     * @memberof AudienceCreateCustomRequest
     */
    sharing_type: AudienceSharingType;
    /**
     * 
     * @type {AudienceDataParty}
     * @memberof AudienceCreateCustomRequest
     */
    data_party: AudienceDataParty;
    /**
     * 
     * @type {string}
     * @memberof AudienceCreateCustomRequest
     */
    category?: string;
}

/**
 * 
 * @export
 */
export type AudienceCreateRequest = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof AudienceCreateRequest
     */
    ad_account_id?: string;
    /**
     * Audience name.
     * @type {string}
     * @memberof AudienceCreateRequest
     */
    name: string;
    /**
     * 
     * @type {AudienceRule}
     * @memberof AudienceCreateRequest
     */
    rule: AudienceRule;
    /**
     * Audience description.
     * @type {string}
     * @memberof AudienceCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {AudienceCreateRequest1AudienceType}
     * @memberof AudienceCreateRequest
     */
    audience_type: AudienceCreateRequest1AudienceType;
}

/**
 * 
 * @export
 */
export type AudienceCreateRequest1AudienceType = {
}

/**
 * Whether the data is owned by the partner (1p) or by the data provider (3p)
 * @export
 * @enum {string}
 */
export type AudienceDataParty = '1p' | '3p';

/**
 * Queryable audience representation.
 * @export
 */
export type AudienceDefinition = {
    /**
     * Generation date
     * @type {string}
     * @memberof AudienceDefinition
     */
    _date?: string;
    /**
     * Generated audience type to request.
     * @type {string}
     * @memberof AudienceDefinition
     */
    type?: string;
    /**
     * Generated audience scope to request.
     * @type {string}
     * @memberof AudienceDefinition
     */
    scope?: string;
}

/**
 * 
 * @export
 */
export type AudienceDefinitionResponse = {
    /**
     * 
     * @type {Array<AudienceDefinition>}
     * @memberof AudienceDefinitionResponse
     */
    items?: Array<AudienceDefinition>;
}

/**
 * Demographic detail for a single audience demographic
 * @export
 */
export type AudienceDemographicValue = {
    /**
     * Unique key for demographic item
     * @type {string}
     * @memberof AudienceDemographicValue
     */
    key?: string;
    /**
     * Display name for demographic
     * @type {string}
     * @memberof AudienceDemographicValue
     */
    name?: string;
    /**
     * Value of demographic item as a percent of total audience
     * @type {number}
     * @memberof AudienceDemographicValue
     */
    ratio?: number;
}

/**
 * Audience demographics
 * @export
 */
export type AudienceDemographics = {
    /**
     * Ages distribution.
     * @type {Array<AudienceDemographicValue>}
     * @memberof AudienceDemographics
     */
    ages?: Array<AudienceDemographicValue>;
    /**
     * Gender distribution.
     * @type {Array<AudienceDemographicValue>}
     * @memberof AudienceDemographics
     */
    genders?: Array<AudienceDemographicValue>;
    /**
     * Device usage distribution.
     * @type {Array<AudienceDemographicValue>}
     * @memberof AudienceDemographics
     */
    devices?: Array<AudienceDemographicValue>;
    /**
     * Geographic metro area distribution.
     * @type {Array<AudienceDemographicValue>}
     * @memberof AudienceDemographics
     */
    metros?: Array<AudienceDemographicValue>;
    /**
     * Country area distribution.
     * @type {Array<AudienceDemographicValue>}
     * @memberof AudienceDemographics
     */
    countries?: Array<AudienceDemographicValue>;
}

/**
 * 
 * @export
 */
export type AudienceInsightCategoryArrayResponse = {
    /**
     * 
     * @type {Array<AudienceInsightCategoryCommon>}
     * @memberof AudienceInsightCategoryArrayResponse
     */
    items?: Array<AudienceInsightCategoryCommon>;
}

/**
 * 
 * @export
 */
export type AudienceInsightCategoryCommon = {
    /**
     * 
     * @type {string}
     * @memberof AudienceInsightCategoryCommon
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof AudienceInsightCategoryCommon
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof AudienceInsightCategoryCommon
     */
    ratio?: number;
    /**
     * 
     * @type {number}
     * @memberof AudienceInsightCategoryCommon
     */
    index?: number;
    /**
     * 
     * @type {string}
     * @memberof AudienceInsightCategoryCommon
     */
    id?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type AudienceInsightType = 'YOUR_TOTAL_AUDIENCE' | 'YOUR_ENGAGED_AUDIENCE' | 'PINTEREST_TOTAL_AUDIENCE';

/**
 * Audience interests and demographics.
 * @export
 */
export type AudienceInsightsResponse = {
    /**
     * Category interest distribution
     * @type {Array<AudienceCategory>}
     * @memberof AudienceInsightsResponse
     */
    categories?: Array<AudienceCategory>;
    /**
     * 
     * @type {AudienceDemographics}
     * @memberof AudienceInsightsResponse
     */
    demographics?: AudienceDemographics;
    /**
     * 
     * @type {AudienceInsightType}
     * @memberof AudienceInsightsResponse
     */
    type?: AudienceInsightType;
    /**
     * Generation date
     * @type {string}
     * @memberof AudienceInsightsResponse
     */
    _date?: string;
    /**
     * Population count.
     * @type {number}
     * @memberof AudienceInsightsResponse
     */
    size?: number;
    /**
     * Indicates whether the audience size has been rounded up to the next highest upper boundary.
     * @type {boolean}
     * @memberof AudienceInsightsResponse
     */
    size_is_upper_bound?: boolean;
}

/**
 * JSON object defining targeted audience users. Example rule formats per audience type:<br>CUSTOMER_LIST: { \"customer_list_id\": \"&lt;customer list ID&gt;\"}<br>ACTALIKE: { \"seed_id\": [\"&lt;audience ID&gt;\"], \"country\": \"US\", \"percentage\": \"10\" }<br>(Valid countries include: \"US\", \"CA\", and \"GB\". Percentage should be 1-10.<br>The targeted audience should be this % size across Pinterest.)<br>VISITOR: { \"visitor_source_id\": [\"&lt;conversion tag ID&gt;\"], \"retention_days\": \"180\", \"event_source\": {\"=\": [\"web\", \"mobile\"]}, \"ingestion_source\": {\"=\": [\"tag\"]}}<br>(Retention days should be 1-540. Retention applies to specific customers.)<br>ENGAGEMENT: {\"engagement_domain\": [\"www.entomi.com\"], \"engager_type\": 1}<br>For more details on engagement audiences, see <a href=\"https://developers.pinterest.com/docs/redoc/adtech_ads_v4/#section/November-2021\" target=\"_blank\">November 2021 changelog</a>.
 * @export
 */
export type AudienceRule = {
    /**
     * Valid countries include: \"US\", \"CA\", and \"GB\".
     * @type {string}
     * @memberof AudienceRule
     */
    country?: string;
    /**
     * Customer list ID. For CUSTOMER_LIST `audience_type`.
     * @type {string}
     * @memberof AudienceRule
     */
    customer_list_id?: string;
    /**
     * The audience account\'s verified domain. **Required** for ENGAGEMENT `audience_type`.
     * @type {Array<string>}
     * @memberof AudienceRule
     */
    engagement_domain?: Array<string>;
    /**
     * Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
     * @type {string}
     * @memberof AudienceRule
     */
    engagement_type?: string;
    /**
     * A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
     * @type {string}
     * @memberof AudienceRule
     */
    event?: string;
    /**
     * 
     * @type {PinterestTagEventData}
     * @memberof AudienceRule
     */
    event_data?: PinterestTagEventData;
    /**
     * Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
     * @type {number}
     * @memberof AudienceRule
     */
    percentage?: number;
    /**
     * IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
     * @type {Array<string>}
     * @memberof AudienceRule
     */
    pin_id?: Array<string>;
    /**
     * Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
     * @type {boolean}
     * @memberof AudienceRule
     */
    prefill?: boolean;
    /**
     * Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
     * @type {number}
     * @memberof AudienceRule
     */
    retention_days?: number;
    /**
     * Audience ID(s). For ACTALIKE `audience_type`. 
     * @type {Array<string>}
     * @memberof AudienceRule
     */
    seed_id?: Array<string>;
    /**
     * Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin\'s URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
     * @type {Array<string>}
     * @memberof AudienceRule
     */
    url?: Array<string>;
    /**
     * The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
     * @type {string}
     * @memberof AudienceRule
     */
    visitor_source_id?: string;
    /**
     * Optional for VISITOR. You can use it as a {\'=\': [value]}. Supported values are: web, mobile, offline
     * @type {Object}
     * @memberof AudienceRule
     */
    event_source?: Object;
    /**
     * Optional for VISITOR. You can use it as a {\'=\': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
     * @type {Object}
     * @memberof AudienceRule
     */
    ingestion_source?: Object;
    /**
     * Optional for ENGAGEMENT. Engager type value should be 1-2.
     * @type {number}
     * @memberof AudienceRule
     */
    engager_type?: number;
    /**
     * Campaign ID for engagement audience filter.
     * @type {Array<string>}
     * @memberof AudienceRule
     */
    campaign_id?: Array<string>;
    /**
     * Ad ID for engagement audience filter.
     * @type {Array<string>}
     * @memberof AudienceRule
     */
    ad_id?: Array<string>;
    /**
     * Objective for engagement audience filter.
     * @type {Array<ObjectiveType>}
     * @memberof AudienceRule
     */
    objective_type?: Array<ObjectiveType>;
    /**
     * Ad account ID.
     * @type {string}
     * @memberof AudienceRule
     */
    ad_account_id?: string;
}

/**
 * Audience sharing type: [\"CUSTOM\", \"SYNDICATED\"]
 * @export
 * @enum {string}
 */
export type AudienceSharingType = 'CUSTOM' | 'SYNDICATED';

/**
 * 
 * @export
 */
export type AudienceSubcategory = {
    /**
     * Interest unique key (same as ID).
     * @type {string}
     * @memberof AudienceSubcategory
     */
    key?: string;
    /**
     * Subinterest name.
     * @type {string}
     * @memberof AudienceSubcategory
     */
    name?: string;
    /**
     * Subinterest\'s percent of category\'s total audience.
     * @type {number}
     * @memberof AudienceSubcategory
     */
    ratio?: number;
    /**
     * Subinterest affinity index.
     * @type {number}
     * @memberof AudienceSubcategory
     */
    index?: number;
    /**
     * Subinterest ID.
     * @type {string}
     * @memberof AudienceSubcategory
     */
    id?: string;
}

/**
 * Audience type
 * @export
 * @enum {string}
 */
export type AudienceType = 'CUSTOMER_LIST' | 'VISITOR' | 'ENGAGEMENT' | 'ACTALIKE' | 'PERSONA';

/**
 * Audience operation type (update or remove).
 * @export
 * @enum {string}
 */
export type AudienceUpdateOperationType = 'UPDATE' | 'REMOVE';

/**
 * 
 * @export
 */
export type AudienceUpdateRequest = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof AudienceUpdateRequest
     */
    ad_account_id?: string;
    /**
     * Audience name.
     * @type {string}
     * @memberof AudienceUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {AudienceRule}
     * @memberof AudienceUpdateRequest
     */
    rule?: AudienceRule;
    /**
     * Audience description.
     * @type {string}
     * @memberof AudienceUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {AudienceUpdateOperationType}
     * @memberof AudienceUpdateRequest
     */
    operation_type?: AudienceUpdateOperationType;
}

/**
 * 
 * @export
 */
export type AudiencesList200Response = {
    /**
     * 
     * @type {Array<Audience>}
     * @memberof AudiencesList200Response
     */
    items: Array<Audience>;
    /**
     * 
     * @type {string}
     * @memberof AudiencesList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type AvailabilityFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof AvailabilityFilter
     */
    AVAILABILITY: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * The operation performed by the batch. The DELETE_DISCONTINUED operation only updates availablity to \"Out of Stock\".
 * @export
 * @enum {string}
 */
export type BatchOperation = 'UPDATE' | 'UPSERT' | 'CREATE' | 'DELETE_DISCONTINUED' | 'DELETE';

/**
 * The status of the operation performed by the batch
 * @export
 * @enum {string}
 */
export type BatchOperationStatus = 'PROCESSING' | 'COMPLETED';

/**
 * 
 * @export
 */
export type BidFloor = {
    /**
     * A list of bid floors in micro currency. For example, [100000, 200000]
     * @type {Array<number>}
     * @memberof BidFloor
     */
    bid_floors?: Array<number>;
    /**
     * Always the string \'bidfloor\'
     * @type {string}
     * @memberof BidFloor
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type BidFloorRequest = {
    /**
     * 
     * @type {Array<BidFloorSpec>}
     * @memberof BidFloorRequest
     */
    bid_floor_specs: Array<BidFloorSpec>;
    /**
     * 
     * @type {TargetingSpec}
     * @memberof BidFloorRequest
     */
    targeting_spec?: TargetingSpec;
}

/**
 * 
 * @export
 */
export type BidFloorSpec = {
    /**
     * 
     * @type {Array<Country>}
     * @memberof BidFloorSpec
     */
    countries?: Array<Country>;
    /**
     * 
     * @type {Currency}
     * @memberof BidFloorSpec
     */
    currency: Currency;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof BidFloorSpec
     */
    objective_type?: ObjectiveType;
    /**
     * 
     * @type {ActionType}
     * @memberof BidFloorSpec
     */
    billable_event: ActionType;
    /**
     * 
     * @type {OptimizationGoalMetadata}
     * @memberof BidFloorSpec
     */
    optimization_goal_metadata?: OptimizationGoalMetadata;
    /**
     * 
     * @type {CreativeType}
     * @memberof BidFloorSpec
     */
    creative_type?: CreativeType;
}

/**
 * 
 * @export
 */
export type BillingProfilesGet200Response = {
    /**
     * 
     * @type {Array<BillingProfilesResponse>}
     * @memberof BillingProfilesGet200Response
     */
    items: Array<BillingProfilesResponse>;
    /**
     * 
     * @type {string}
     * @memberof BillingProfilesGet200Response
     */
    bookmark?: string;
}


            export type BillingProfilesResponseCardTypeEnum = 'UNKNOWN' | 'VISA' | 'MASTERCARD' | 'AMERICAN_EXPRESS' | 'DISCOVER' | 'ELO';

            export type BillingProfilesResponseStatusEnum = 'UNSPECIFIED' | 'VALID' | 'INVALID' | 'PENDING' | 'DELETED' | 'SECONDARY' | 'PENDING_SECONDARY';

            export type BillingProfilesResponsePaymentMethodBrandEnum = 'UNKNOWN' | 'VISA' | 'MASTERCARD' | 'AMERICAN_EXPRESS' | 'DISCOVER' | 'SOFORT' | 'DINERS_CLUB' | 'ELO' | 'CARTE_BANCAIRE';
/**
 * 
 * @export
 */
export type BillingProfilesResponse = {
    /**
     * Billing ID.
     * @type {string}
     * @memberof BillingProfilesResponse
     */
    id?: string;
    /**
     * Type of the card.
     * @type {string}
     * @memberof BillingProfilesResponse
     */
    card_type?: BillingProfilesResponseCardTypeEnum;
    /**
     * Status of the billing.
     * @type {string}
     * @memberof BillingProfilesResponse
     */
    status?: BillingProfilesResponseStatusEnum;
    /**
     * Advertiser ID of the billing.
     * @type {string}
     * @memberof BillingProfilesResponse
     */
    advertiser_id?: string;
    /**
     * Brand of the payment method.
     * @type {string}
     * @memberof BillingProfilesResponse
     */
    payment_method_brand?: BillingProfilesResponsePaymentMethodBrandEnum;
}


            export type BoardPrivacyEnum = 'PUBLIC' | 'PROTECTED' | 'SECRET';
/**
 * Board
 * @export
 */
export type Board = {
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    id?: string;
    /**
     * Date and time of board creation.
     * @type {Date}
     * @memberof Board
     */
    created_at?: Date;
    /**
     * Date and time of last board pins modified.
     * @type {Date}
     * @memberof Board
     */
    board_pins_modified_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    description?: string;
    /**
     * Count of collaborators on the board.
     * @type {number}
     * @memberof Board
     */
    collaborator_count?: number;
    /**
     * Count of pins on the board.
     * @type {number}
     * @memberof Board
     */
    pin_count?: number;
    /**
     * Board follower count.
     * @type {number}
     * @memberof Board
     */
    follower_count?: number;
    /**
     * 
     * @type {BoardMedia}
     * @memberof Board
     */
    media?: BoardMedia;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Board
     */
    owner?: BoardOwner;
    /**
     * Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a>
     * @type {string}
     * @memberof Board
     */
    privacy?: BoardPrivacyEnum;
}

/**
 * Board media.
 * @export
 */
export type BoardMedia = {
    /**
     * Board cover image.
     * @type {string}
     * @memberof BoardMedia
     */
    image_cover_url?: string;
    /**
     * Board pin thumbnail urls.
     * @type {Array<string>}
     * @memberof BoardMedia
     */
    pin_thumbnail_urls?: Array<string>;
}

/**
 * 
 * @export
 */
export type BoardOwner = {
    /**
     * 
     * @type {string}
     * @memberof BoardOwner
     */
    username?: string;
}

/**
 * Sections help organize pins within a board.
 * @export
 */
export type BoardSection = {
    /**
     * 
     * @type {string}
     * @memberof BoardSection
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardSection
     */
    name: string;
}

/**
 * 
 * @export
 */
export type BoardSectionsList200Response = {
    /**
     * Board sections
     * @type {Array<BoardSection>}
     * @memberof BoardSectionsList200Response
     */
    items: Array<BoardSection>;
    /**
     * 
     * @type {string}
     * @memberof BoardSectionsList200Response
     */
    bookmark?: string;
}


            export type BoardUpdatePrivacyEnum = 'PUBLIC' | 'SECRET';
/**
 * Board fields for updates
 * @export
 */
export type BoardUpdate = {
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    privacy?: BoardUpdatePrivacyEnum;
}

/**
 * 
 * @export
 */
export type BoardsList200Response = {
    /**
     * Boards
     * @type {Array<Board>}
     * @memberof BoardsList200Response
     */
    items: Array<Board>;
    /**
     * 
     * @type {string}
     * @memberof BoardsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type BoardsListPins200Response = {
    /**
     * Pins
     * @type {Array<Pin>}
     * @memberof BoardsListPins200Response
     */
    items: Array<Pin>;
    /**
     * 
     * @type {string}
     * @memberof BoardsListPins200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type BoardsUserFollowsList200Response = {
    /**
     * 
     * @type {Array<Board>}
     * @memberof BoardsUserFollowsList200Response
     */
    items: Array<Board>;
    /**
     * 
     * @type {string}
     * @memberof BoardsUserFollowsList200Response
     */
    bookmark?: string;
}

/**
 * Creation fields
 * @export
 */
export type BookClosedResponse = {
    /**
     * Are conversion metrics ready?
     * @type {boolean}
     * @memberof BookClosedResponse
     */
    conversion_metrics_ready?: boolean;
    /**
     * Are non-conversion metrics ready?
     * @type {boolean}
     * @memberof BookClosedResponse
     */
    non_conversion_metrics_ready?: boolean;
}

/**
 * 
 * @export
 */
export type BrandFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof BrandFilter
     */
    BRAND: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. For CBO campaigns, only \"CBO_ADGROUP\" is allowed. For WEB_SESSIONS campaigns, only \"LIFETIME\" is allowed. For update, only draft ad groups may update budget type.
 * @export
 * @enum {string}
 */
export type BudgetType = 'DAILY' | 'LIFETIME' | 'CBO_ADGROUP';

/**
 * Ad entities to get in bulk request.
 * @export
 */
export type BulkDownloadRequest = {
    /**
     * All entity types specified will be downloaded. Fewer types result in faster downloads.
     * @type {Array<BulkEntityType>}
     * @memberof BulkDownloadRequest
     */
    entity_types?: Array<BulkEntityType>;
    /**
     * All entities specified by these IDs as well as their children and grandchildren will be downloaded if the entity type is one of the types requested to be downloaded.
     * @type {Array<string>}
     * @memberof BulkDownloadRequest
     */
    entity_ids?: Array<string>;
    /**
     * Unix UTC timestamp to retrieve all entities that have changed since this time.
     * @type {string}
     * @memberof BulkDownloadRequest
     */
    updated_since?: string;
    /**
     * 
     * @type {BulkDownloadRequestCampaignFilter}
     * @memberof BulkDownloadRequest
     */
    campaign_filter?: BulkDownloadRequestCampaignFilter;
    /**
     * 
     * @type {BulkOutputFormat}
     * @memberof BulkDownloadRequest
     */
    output_format?: BulkOutputFormat;
}

/**
 * 
 * @export
 */
export type BulkDownloadRequestCampaignFilter = {
    /**
     * Unix UTC timestamp.
     * @type {string}
     * @memberof BulkDownloadRequestCampaignFilter
     */
    start_time?: string;
    /**
     * Unix UTC timestamp.
     * @type {string}
     * @memberof BulkDownloadRequestCampaignFilter
     */
    end_time?: string;
    /**
     * Campaign name
     * @type {string}
     * @memberof BulkDownloadRequestCampaignFilter
     */
    name?: string;
    /**
     * 
     * @type {Array<CampaignSummaryStatus>}
     * @memberof BulkDownloadRequestCampaignFilter
     */
    campaign_status?: Array<CampaignSummaryStatus>;
    /**
     * 
     * @type {Array<ObjectiveType>}
     * @memberof BulkDownloadRequestCampaignFilter
     */
    objective_type?: Array<ObjectiveType>;
}

/**
 * 
 * @export
 */
export type BulkDownloadResponse = {
    /**
     * ID of the bulk request.
     * @type {string}
     * @memberof BulkDownloadResponse
     */
    request_id?: string;
}

/**
 * Refers ads entity type
 * @export
 * @enum {string}
 */
export type BulkEntityType = 'CAMPAIGN' | 'AD_GROUP' | 'PRODUCT_GROUP' | 'AD' | 'KEYWORD';

/**
 * Bulk file output format
 * @export
 * @enum {string}
 */
export type BulkOutputFormat = 'CSV' | 'JSON';

/**
 * Possible status for a bulk reporting job
 * @export
 * @enum {string}
 */
export type BulkReportingJobStatus = 'DOES_NOT_EXIST' | 'FINISHED' | 'IN_PROGRESS' | 'EXPIRED' | 'FAILED' | 'CANCELLED';

/**
 * Two set of objects to be managed asyncronusly by bulk. One for creations, one for modifications.
 * @export
 */
export type BulkUpsertRequest = {
    /**
     * 
     * @type {BulkUpsertRequestCreate}
     * @memberof BulkUpsertRequest
     */
    create?: BulkUpsertRequestCreate;
    /**
     * 
     * @type {BulkUpsertRequestUpdate}
     * @memberof BulkUpsertRequest
     */
    update?: BulkUpsertRequestUpdate;
}

/**
 * Request for creation of entities in bulk.
 * @export
 */
export type BulkUpsertRequestCreate = {
    /**
     * 
     * @type {Array<CampaignCreateRequest>}
     * @memberof BulkUpsertRequestCreate
     */
    campaigns?: Array<CampaignCreateRequest>;
    /**
     * 
     * @type {Array<AdGroupCreateRequest>}
     * @memberof BulkUpsertRequestCreate
     */
    ad_groups?: Array<AdGroupCreateRequest>;
    /**
     * 
     * @type {Array<AdCreateRequest>}
     * @memberof BulkUpsertRequestCreate
     */
    ads?: Array<AdCreateRequest>;
    /**
     * 
     * @type {Array<ProductGroupPromotionCreateRequest>}
     * @memberof BulkUpsertRequestCreate
     */
    product_groups?: Array<ProductGroupPromotionCreateRequest>;
    /**
     * 
     * @type {Array<KeywordsRequest>}
     * @memberof BulkUpsertRequestCreate
     */
    keywords?: Array<KeywordsRequest>;
}

/**
 * Request for creation of entities in bulk.
 * @export
 */
export type BulkUpsertRequestUpdate = {
    /**
     * 
     * @type {Array<CampaignUpdateRequest>}
     * @memberof BulkUpsertRequestUpdate
     */
    campaigns?: Array<CampaignUpdateRequest>;
    /**
     * 
     * @type {Array<AdGroupUpdateRequest>}
     * @memberof BulkUpsertRequestUpdate
     */
    ad_groups?: Array<AdGroupUpdateRequest>;
    /**
     * 
     * @type {Array<AdUpdateRequest>}
     * @memberof BulkUpsertRequestUpdate
     */
    ads?: Array<AdUpdateRequest>;
    /**
     * 
     * @type {Array<ProductGroupPromotionUpdateRequest>}
     * @memberof BulkUpsertRequestUpdate
     */
    product_groups?: Array<ProductGroupPromotionUpdateRequest>;
    /**
     * 
     * @type {Array<KeywordUpdate>}
     * @memberof BulkUpsertRequestUpdate
     */
    keywords?: Array<KeywordUpdate>;
}

/**
 * ID of the bulk request.
 * @export
 */
export type BulkUpsertResponse = {
    /**
     * 
     * @type {string}
     * @memberof BulkUpsertResponse
     */
    request_id?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type BulkUpsertStatus = 'RUNNING' | 'SUCCEEDED' | 'FAILED';

/**
 * ID of the bulk request.
 * @export
 */
export type BulkUpsertStatusResponse = {
    /**
     * 
     * @type {BulkUpsertStatus}
     * @memberof BulkUpsertStatusResponse
     */
    status?: BulkUpsertStatus;
    /**
     * 
     * @type {string}
     * @memberof BulkUpsertStatusResponse
     */
    result_url?: string;
}

/**
 * Permission role for business access.
 * @export
 * @enum {string}
 */
export type BusinessAccessRole = 'OWNER' | 'ADMIN' | 'ANALYST' | 'SOS_READER' | 'FINANCE_MANAGER' | 'AUDIENCE_MANAGER' | 'CAMPAIGN_MANAGER' | 'CATALOGS_MANAGER' | 'RESTRICTED_OWNER' | 'PROFILE_MANAGER' | 'PROFILE_PUBLISHER' | 'RESOURCE_PINNER_LIST_OWNER' | 'RESOURCE_PINNER_LIST_READER' | 'BIZ_PINNER_LIST_SHARER' | 'RESOURCE_CONVERSION_TAGS_READER';

/**
 * Campaign Data
 * @export
 */
export type CampaignCommon = {
    /**
     * Campaign\'s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     * @type {string}
     * @memberof CampaignCommon
     */
    ad_account_id?: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignCommon
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignCommon
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCommon
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCommon
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignCommon
     */
    order_line_id?: string;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof CampaignCommon
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCommon
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCommon
     */
    end_time?: number;
    /**
     * 
     * @type {CampaignSummaryStatus}
     * @memberof CampaignCommon
     */
    summary_status?: CampaignSummaryStatus;
}

/**
 * 
 * @export
 */
export type CampaignCreateCommon = {
    /**
     * Campaign\'s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     * @type {string}
     * @memberof CampaignCreateCommon
     */
    ad_account_id?: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignCreateCommon
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignCreateCommon
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCreateCommon
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCreateCommon
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignCreateCommon
     */
    order_line_id?: string;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof CampaignCreateCommon
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCreateCommon
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCreateCommon
     */
    end_time?: number;
    /**
     * 
     * @type {CampaignSummaryStatus}
     * @memberof CampaignCreateCommon
     */
    summary_status?: CampaignSummaryStatus;
    /**
     * Determine if a campaign has flexible daily budgets setup.
     * @type {boolean}
     * @memberof CampaignCreateCommon
     */
    is_flexible_daily_budgets?: boolean;
    /**
     * When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
     * @type {number}
     * @memberof CampaignCreateCommon
     */
    default_ad_group_budget_in_micro_currency?: number;
    /**
     * Specifies whether the campaign was created in the automated campaign flow
     * @type {boolean}
     * @memberof CampaignCreateCommon
     */
    is_automated_campaign?: boolean;
}

/**
 * 
 * @export
 */
export type CampaignCreateRequest = {
    /**
     * Campaign\'s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     * @type {string}
     * @memberof CampaignCreateRequest
     */
    ad_account_id: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignCreateRequest
     */
    name: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignCreateRequest
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCreateRequest
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCreateRequest
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignCreateRequest
     */
    order_line_id?: string;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof CampaignCreateRequest
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCreateRequest
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCreateRequest
     */
    end_time?: number;
    /**
     * 
     * @type {CampaignSummaryStatus}
     * @memberof CampaignCreateRequest
     */
    summary_status?: CampaignSummaryStatus;
    /**
     * Determine if a campaign has flexible daily budgets setup.
     * @type {boolean}
     * @memberof CampaignCreateRequest
     */
    is_flexible_daily_budgets?: boolean;
    /**
     * When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
     * @type {number}
     * @memberof CampaignCreateRequest
     */
    default_ad_group_budget_in_micro_currency?: number;
    /**
     * Specifies whether the campaign was created in the automated campaign flow
     * @type {boolean}
     * @memberof CampaignCreateRequest
     */
    is_automated_campaign?: boolean;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignCreateRequest
     */
    objective_type: ObjectiveType;
}

/**
 * 
 * @export
 */
export type CampaignCreateResponse = {
    /**
     * 
     * @type {Array<CampaignCreateResponseItem>}
     * @memberof CampaignCreateResponse
     */
    items?: Array<CampaignCreateResponseItem>;
}

/**
 * 
 * @export
 */
export type CampaignCreateResponseData = {
    /**
     * Campaign\'s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     * @type {string}
     * @memberof CampaignCreateResponseData
     */
    ad_account_id?: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignCreateResponseData
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignCreateResponseData
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignCreateResponseData
     */
    order_line_id?: string;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof CampaignCreateResponseData
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    end_time?: number;
    /**
     * 
     * @type {CampaignSummaryStatus}
     * @memberof CampaignCreateResponseData
     */
    summary_status?: CampaignSummaryStatus;
    /**
     * Determines if a campaign has flexible daily budgets setup.
     * @type {boolean}
     * @memberof CampaignCreateResponseData
     */
    is_flexible_daily_budgets?: boolean;
    /**
     * When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    default_ad_group_budget_in_micro_currency?: number;
    /**
     * Specifies whether the campaign was created in the automated campaign flow
     * @type {boolean}
     * @memberof CampaignCreateResponseData
     */
    is_automated_campaign?: boolean;
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignCreateResponseData
     */
    id?: string;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignCreateResponseData
     */
    objective_type?: ObjectiveType;
    /**
     * Campaign creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    created_time?: number;
    /**
     * UTC timestamp. Last update time.
     * @type {number}
     * @memberof CampaignCreateResponseData
     */
    updated_time?: number;
    /**
     * Always \"campaign\".
     * @type {string}
     * @memberof CampaignCreateResponseData
     */
    type?: string;
    /**
     * Determines if a campaign automatically generate ad-group level budgets given a campaign budget to maximize campaign outcome. When transitioning from non-cbo to cbo, all previous child ad group budget will be cleared.
     * @type {boolean}
     * @memberof CampaignCreateResponseData
     */
    is_campaign_budget_optimization?: boolean;
}

/**
 * 
 * @export
 */
export type CampaignCreateResponseItem = {
    /**
     * 
     * @type {CampaignCreateResponseData}
     * @memberof CampaignCreateResponseItem
     */
    data?: CampaignCreateResponseData;
    /**
     * 
     * @type {Array<Exception>}
     * @memberof CampaignCreateResponseItem
     */
    exceptions?: Array<Exception>;
}

/**
 * 
 * @export
 */
export type CampaignId = {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignId
     */
    id?: string;
}

/**
 * 
 * @export
 */
export type CampaignResponse = {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignResponse
     */
    id?: string;
    /**
     * Campaign\'s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     * @type {string}
     * @memberof CampaignResponse
     */
    ad_account_id?: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignResponse
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignResponse
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignResponse
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignResponse
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignResponse
     */
    order_line_id?: string;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof CampaignResponse
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignResponse
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignResponse
     */
    end_time?: number;
    /**
     * 
     * @type {CampaignSummaryStatus}
     * @memberof CampaignResponse
     */
    summary_status?: CampaignSummaryStatus;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignResponse
     */
    objective_type?: ObjectiveType;
    /**
     * Campaign creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CampaignResponse
     */
    created_time?: number;
    /**
     * UTC timestamp. Last update time.
     * @type {number}
     * @memberof CampaignResponse
     */
    updated_time?: number;
    /**
     * Always \"campaign\".
     * @type {string}
     * @memberof CampaignResponse
     */
    type?: string;
    /**
     * Determines if a campaign has flexible daily budgets setup.
     * @type {boolean}
     * @memberof CampaignResponse
     */
    is_flexible_daily_budgets?: boolean;
    /**
     * Determines if a campaign automatically generate ad-group level budgets given a campaign budget to maximize campaign outcome. When transitioning from non-cbo to cbo, all previous child ad group budget will be cleared.
     * @type {boolean}
     * @memberof CampaignResponse
     */
    is_campaign_budget_optimization?: boolean;
}

/**
 * Summary status for campaign
 * @export
 * @enum {string}
 */
export type CampaignSummaryStatus = 'RUNNING' | 'PAUSED' | 'NOT_STARTED' | 'COMPLETED' | 'ADVERTISER_DISABLED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT';

/**
 * 
 * @export
 */
export type CampaignUpdateRequest = {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignUpdateRequest
     */
    id: string;
    /**
     * Campaign\'s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     * @type {string}
     * @memberof CampaignUpdateRequest
     */
    ad_account_id: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignUpdateRequest
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignUpdateRequest
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
     * @type {number}
     * @memberof CampaignUpdateRequest
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignUpdateRequest
     */
    order_line_id?: string;
    /**
     * 
     * @type {AdCommonTrackingUrls}
     * @memberof CampaignUpdateRequest
     */
    tracking_urls?: AdCommonTrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignUpdateRequest
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignUpdateRequest
     */
    end_time?: number;
    /**
     * 
     * @type {CampaignSummaryStatus}
     * @memberof CampaignUpdateRequest
     */
    summary_status?: CampaignSummaryStatus;
    /**
     * Determine if a campaign has flexible daily budgets setup.
     * @type {boolean}
     * @memberof CampaignUpdateRequest
     */
    is_flexible_daily_budgets?: boolean;
    /**
     * When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
     * @type {number}
     * @memberof CampaignUpdateRequest
     */
    default_ad_group_budget_in_micro_currency?: number;
    /**
     * Specifies whether the campaign was created in the automated campaign flow
     * @type {boolean}
     * @memberof CampaignUpdateRequest
     */
    is_automated_campaign?: boolean;
    /**
     * Determines if a campaign automatically generate ad-group level budgets given a campaign budget to maximize campaign outcome. When transitioning from non-cbo to cbo, all previous child ad group budget will be cleared.
     * @type {boolean}
     * @memberof CampaignUpdateRequest
     */
    is_campaign_budget_optimization?: boolean;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignUpdateRequest
     */
    objective_type?: ObjectiveType;
}

/**
 * 
 * @export
 */
export type CampaignUpdateResponse = {
    /**
     * 
     * @type {Array<CampaignCreateResponseItem>}
     * @memberof CampaignUpdateResponse
     */
    items?: Array<CampaignCreateResponseItem>;
}

/**
 * 
 * @export
 */
export type CampaignsAnalyticsResponseInner = {
    [key: string]: AnyType | any;

    /**
     * The ID of the campaing that this metrics belongs to.
     * @type {string}
     * @memberof CampaignsAnalyticsResponseInner
     */
    CAMPAIGN_ID: string;
    /**
     * Current metrics date. Only returned when granularity is a time-based value (`DAY`, `HOUR`, `WEEK`, `MONTH`)
     * @type {Date}
     * @memberof CampaignsAnalyticsResponseInner
     */
    DATE?: Date;
}

/**
 * 
 * @export
 */
export type CampaignsList200Response = {
    /**
     * 
     * @type {Array<CampaignResponse>}
     * @memberof CampaignsList200Response
     */
    items: Array<CampaignResponse>;
    /**
     * 
     * @type {string}
     * @memberof CampaignsList200Response
     */
    bookmark?: string;
}

/**
 * Catalog entity
 * @export
 */
export type Catalog = {
    /**
     * 
     * @type {Date}
     * @memberof Catalog
     */
    created_at?: Date;
    /**
     * ID of the catalog entity.
     * @type {string}
     * @memberof Catalog
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Catalog
     */
    updated_at?: Date;
    /**
     * A human-friendly name associated to a catalog entity.
     * @type {string}
     * @memberof Catalog
     */
    name: string;
    /**
     * 
     * @type {CatalogsType}
     * @memberof Catalog
     */
    catalog_type: CatalogsType;
}

/**
 * non-promoted catalog product group entity
 * @export
 */
export type CatalogProductGroup = {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogProductGroup
     */
    id?: string;
    /**
     * Merchant ID pertaining to the owner of the catalog product group.
     * @type {string}
     * @memberof CatalogProductGroup
     */
    merchant_id?: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogProductGroup
     */
    name?: string;
    /**
     * Object holding a list of filters
     * @type {Object}
     * @memberof CatalogProductGroup
     */
    filters?: Object;
    /**
     * Object holding a list of filters
     * @type {Object}
     * @memberof CatalogProductGroup
     */
    filter_v2?: Object;
    /**
     * 
     * @type {Board}
     * @memberof CatalogProductGroup
     */
    type?: Board;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CatalogProductGroup
     */
    status?: EntityStatus;
    /**
     * id of the feed profile belonging to this catalog product group
     * @type {string}
     * @memberof CatalogProductGroup
     */
    feed_profile_id?: string;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogProductGroup
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogProductGroup
     */
    last_update?: number;
    /**
     * Amount of products in the catalog product group
     * @type {number}
     * @memberof CatalogProductGroup
     */
    product_count?: number;
    /**
     * index of the featured position of the catalog product group
     * @type {number}
     * @memberof CatalogProductGroup
     */
    featured_position?: number;
}


            export type CatalogsCreateHotelItemOperationEnum = 'CREATE';
/**
 * A hotel item to be created.
 * @export
 */
export type CatalogsCreateHotelItem = {
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsCreateHotelItem
     */
    hotel_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsCreateHotelItem
     */
    operation: CatalogsCreateHotelItemOperationEnum;
    /**
     * 
     * @type {CatalogsHotelAttributes}
     * @memberof CatalogsCreateHotelItem
     */
    attributes: CatalogsHotelAttributes;
}


            export type CatalogsCreateRetailItemOperationEnum = 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
/**
 * An item to be created
 * @export
 */
export type CatalogsCreateRetailItem = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsCreateRetailItem
     */
    item_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsCreateRetailItem
     */
    operation: CatalogsCreateRetailItemOperationEnum;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof CatalogsCreateRetailItem
     */
    attributes: ItemAttributes;
}

/**
 * 
 * @export
 */
export type CatalogsDbItem = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsDbItem
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsDbItem
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsDbItem
     */
    updated_at?: Date;
}


            export type CatalogsDeleteHotelItemOperationEnum = 'DELETE';
/**
 * A hotel item to be deleted
 * @export
 */
export type CatalogsDeleteHotelItem = {
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsDeleteHotelItem
     */
    hotel_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsDeleteHotelItem
     */
    operation: CatalogsDeleteHotelItemOperationEnum;
}


            export type CatalogsDeleteRetailItemOperationEnum = 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
/**
 * An item to be deleted
 * @export
 */
export type CatalogsDeleteRetailItem = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsDeleteRetailItem
     */
    item_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsDeleteRetailItem
     */
    operation: CatalogsDeleteRetailItemOperationEnum;
}

/**
 * Catalogs Feed object
 * @export
 */
export type CatalogsFeed = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeed
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeed
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeed
     */
    updated_at?: Date;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof CatalogsFeed
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeed
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsFeed
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeed
     */
    credentials: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeed
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeed
     */
    preferred_processing_schedule: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeed
     */
    status: CatalogsStatus;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeed
     */
    default_currency: NullableCurrency;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsFeed
     */
    default_locale: string;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeed
     */
    default_country: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeed
     */
    default_availability: ProductAvailabilityType;
    /**
     * Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type.
     * @type {string}
     * @memberof CatalogsFeed
     */
    catalog_id: string;
}

/**
 * This field is **OPTIONAL**. Use this if your feed file requires username and password.
 * @export
 */
export type CatalogsFeedCredentials = {
    /**
     * The required password for downloading a feed.
     * @type {string}
     * @memberof CatalogsFeedCredentials
     */
    password: string;
    /**
     * The required username for downloading a feed.
     * @type {string}
     * @memberof CatalogsFeedCredentials
     */
    username: string;
}

/**
 * 
 * @export
 */
export type CatalogsFeedIngestionDetails = {
    /**
     * 
     * @type {CatalogsFeedIngestionErrors}
     * @memberof CatalogsFeedIngestionDetails
     */
    errors: CatalogsFeedIngestionErrors;
    /**
     * 
     * @type {CatalogsFeedIngestionInfo}
     * @memberof CatalogsFeedIngestionDetails
     */
    info: CatalogsFeedIngestionInfo;
    /**
     * 
     * @type {CatalogsFeedIngestionWarnings}
     * @memberof CatalogsFeedIngestionDetails
     */
    warnings: CatalogsFeedIngestionWarnings;
}


            export type CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum = 1;
/**
 * 
 * @export
 */
export type CatalogsFeedIngestionErrors = {
    /**
     * We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    LINE_LEVEL_INTERNAL_ERROR?: number;
    /**
     * The product count has decreased by more than 99% compared to the last successful ingestion.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    LARGE_PRODUCT_COUNT_DECREASE?: CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum;
    /**
     * We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    ACCOUNT_FLAGGED?: number;
    /**
     * We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    IMAGE_LEVEL_INTERNAL_ERROR?: number;
    /**
     * Image files are unreadable. Please upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    IMAGE_FILE_NOT_ACCESSIBLE?: number;
    /**
     * Image files are unreadable. Please check your link and upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    IMAGE_MALFORMED_URL?: number;
    /**
     * Image files are unreadable. Please upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    IMAGE_FILE_NOT_FOUND?: number;
    /**
     * Image files are unreadable. Please upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    IMAGE_INVALID_FILE?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedIngestionInfo = {
    /**
     * The number of ingested products that are in stock.
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    IN_STOCK?: number;
    /**
     * The number of ingested products that are in out of stock.
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    OUT_OF_STOCK?: number;
    /**
     * The number of ingested products that are in preorder.
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    PREORDER?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedIngestionWarnings = {
    /**
     * We experienced a technical difficulty and were unable to download some additional images. The next download attempt will happen in 24 hours.
     * @type {number}
     * @memberof CatalogsFeedIngestionWarnings
     */
    ADDITIONAL_IMAGE_LEVEL_INTERNAL_ERROR?: number;
    /**
     * Additional image files are unreadable. Please upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionWarnings
     */
    ADDITIONAL_IMAGE_FILE_NOT_ACCESSIBLE?: number;
    /**
     * Additional image files are unreadable. Please check your link and upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionWarnings
     */
    ADDITIONAL_IMAGE_MALFORMED_URL?: number;
    /**
     * Additional image files are unreadable. Please upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionWarnings
     */
    ADDITIONAL_IMAGE_FILE_NOT_FOUND?: number;
    /**
     * Additional image files are unreadable. Please upload new files to continue.
     * @type {number}
     * @memberof CatalogsFeedIngestionWarnings
     */
    ADDITIONAL_IMAGE_INVALID_FILE?: number;
    /**
     * price is not a supported column. Use base_price and sale_price instead.
     * @type {number}
     * @memberof CatalogsFeedIngestionWarnings
     */
    HOTEL_PRICE_HEADER_IS_PRESENT?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedProcessingResult = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeedProcessingResult
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeedProcessingResult
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeedProcessingResult
     */
    updated_at?: Date;
    /**
     * 
     * @type {CatalogsFeedIngestionDetails}
     * @memberof CatalogsFeedProcessingResult
     */
    ingestion_details: CatalogsFeedIngestionDetails;
    /**
     * 
     * @type {CatalogsFeedProcessingStatus}
     * @memberof CatalogsFeedProcessingResult
     */
    status: CatalogsFeedProcessingStatus;
    /**
     * 
     * @type {CatalogsFeedProductCounts}
     * @memberof CatalogsFeedProcessingResult
     */
    product_counts: CatalogsFeedProductCounts;
    /**
     * 
     * @type {CatalogsFeedValidationDetails}
     * @memberof CatalogsFeedProcessingResult
     */
    validation_details: CatalogsFeedValidationDetails;
}


            export type CatalogsFeedProcessingScheduleTimezoneEnum = 'Africa/Abidjan' | 'Africa/Accra' | 'Africa/Algiers' | 'Africa/Bissau' | 'Africa/Cairo' | 'Africa/Casablanca' | 'Africa/Ceuta' | 'Africa/El_Aaiun' | 'Africa/Johannesburg' | 'Africa/Juba' | 'Africa/Khartoum' | 'Africa/Lagos' | 'Africa/Maputo' | 'Africa/Monrovia' | 'Africa/Nairobi' | 'Africa/Ndjamena' | 'Africa/Sao_Tome' | 'Africa/Tripoli' | 'Africa/Tunis' | 'Africa/Windhoek' | 'America/Adak' | 'America/Anchorage' | 'America/Araguaina' | 'America/Argentina/Buenos_Aires' | 'America/Argentina/Catamarca' | 'America/Argentina/Cordoba' | 'America/Argentina/Jujuy' | 'America/Argentina/La_Rioja' | 'America/Argentina/Mendoza' | 'America/Argentina/Rio_Gallegos' | 'America/Argentina/Salta' | 'America/Argentina/San_Juan' | 'America/Argentina/San_Luis' | 'America/Argentina/Tucuman' | 'America/Argentina/Ushuaia' | 'America/Asuncion' | 'America/Atikokan' | 'America/Bahia' | 'America/Bahia_Banderas' | 'America/Barbados' | 'America/Belem' | 'America/Belize' | 'America/Blanc-Sablon' | 'America/Boa_Vista' | 'America/Bogota' | 'America/Boise' | 'America/Cambridge_Bay' | 'America/Campo_Grande' | 'America/Cancun' | 'America/Caracas' | 'America/Cayenne' | 'America/Chicago' | 'America/Chihuahua' | 'America/Costa_Rica' | 'America/Creston' | 'America/Cuiaba' | 'America/Curacao' | 'America/Danmarkshavn' | 'America/Dawson' | 'America/Dawson_Creek' | 'America/Denver' | 'America/Detroit' | 'America/Edmonton' | 'America/Eirunepe' | 'America/El_Salvador' | 'America/Fort_Nelson' | 'America/Fortaleza' | 'America/Glace_Bay' | 'America/Goose_Bay' | 'America/Grand_Turk' | 'America/Guatemala' | 'America/Guayaquil' | 'America/Guyana' | 'America/Halifax' | 'America/Havana' | 'America/Hermosillo' | 'America/Indiana/Indianapolis' | 'America/Indiana/Knox' | 'America/Indiana/Marengo' | 'America/Indiana/Petersburg' | 'America/Indiana/Tell_City' | 'America/Indiana/Vevay' | 'America/Indiana/Vincennes' | 'America/Indiana/Winamac' | 'America/Inuvik' | 'America/Iqaluit' | 'America/Jamaica' | 'America/Juneau' | 'America/Kentucky/Louisville' | 'America/Kentucky/Monticello' | 'America/La_Paz' | 'America/Lima' | 'America/Los_Angeles' | 'America/Maceio' | 'America/Managua' | 'America/Manaus' | 'America/Martinique' | 'America/Matamoros' | 'America/Mazatlan' | 'America/Menominee' | 'America/Merida' | 'America/Metlakatla' | 'America/Mexico_City' | 'America/Miquelon' | 'America/Moncton' | 'America/Monterrey' | 'America/Montevideo' | 'America/Nassau' | 'America/New_York' | 'America/Nipigon' | 'America/Nome' | 'America/Noronha' | 'America/North_Dakota/Beulah' | 'America/North_Dakota/Center' | 'America/North_Dakota/New_Salem' | 'America/Nuuk' | 'America/Ojinaga' | 'America/Panama' | 'America/Pangnirtung' | 'America/Paramaribo' | 'America/Phoenix' | 'America/Port-au-Prince' | 'America/Port_of_Spain' | 'America/Porto_Velho' | 'America/Puerto_Rico' | 'America/Punta_Arenas' | 'America/Rainy_River' | 'America/Rankin_Inlet' | 'America/Recife' | 'America/Regina' | 'America/Resolute' | 'America/Rio_Branco' | 'America/Santarem' | 'America/Santiago' | 'America/Santo_Domingo' | 'America/Sao_Paulo' | 'America/Scoresbysund' | 'America/Sitka' | 'America/St_Johns' | 'America/Swift_Current' | 'America/Tegucigalpa' | 'America/Thule' | 'America/Thunder_Bay' | 'America/Tijuana' | 'America/Toronto' | 'America/Vancouver' | 'America/Whitehorse' | 'America/Winnipeg' | 'America/Yakutat' | 'America/Yellowknife' | 'Antarctica/Casey' | 'Antarctica/Davis' | 'Antarctica/DumontDUrville' | 'Antarctica/Macquarie' | 'Antarctica/Mawson' | 'Antarctica/Palmer' | 'Antarctica/Rothera' | 'Antarctica/Syowa' | 'Antarctica/Troll' | 'Antarctica/Vostok' | 'Asia/Almaty' | 'Asia/Amman' | 'Asia/Anadyr' | 'Asia/Aqtau' | 'Asia/Aqtobe' | 'Asia/Ashgabat' | 'Asia/Atyrau' | 'Asia/Baghdad' | 'Asia/Baku' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Beirut' | 'Asia/Bishkek' | 'Asia/Brunei' | 'Asia/Chita' | 'Asia/Choibalsan' | 'Asia/Colombo' | 'Asia/Damascus' | 'Asia/Dhaka' | 'Asia/Dili' | 'Asia/Dubai' | 'Asia/Dushanbe' | 'Asia/Famagusta' | 'Asia/Gaza' | 'Asia/Hebron' | 'Asia/Ho_Chi_Minh' | 'Asia/Hong_Kong' | 'Asia/Hovd' | 'Asia/Irkutsk' | 'Asia/Jakarta' | 'Asia/Jayapura' | 'Asia/Jerusalem' | 'Asia/Kabul' | 'Asia/Kamchatka' | 'Asia/Karachi' | 'Asia/Kathmandu' | 'Asia/Khandyga' | 'Asia/Kolkata' | 'Asia/Krasnoyarsk' | 'Asia/Kuala_Lumpur' | 'Asia/Kuching' | 'Asia/Macau' | 'Asia/Magadan' | 'Asia/Makassar' | 'Asia/Manila' | 'Asia/Nicosia' | 'Asia/Novokuznetsk' | 'Asia/Novosibirsk' | 'Asia/Omsk' | 'Asia/Oral' | 'Asia/Pontianak' | 'Asia/Pyongyang' | 'Asia/Qatar' | 'Asia/Qostanay' | 'Asia/Qyzylorda' | 'Asia/Riyadh' | 'Asia/Sakhalin' | 'Asia/Samarkand' | 'Asia/Seoul' | 'Asia/Shanghai' | 'Asia/Singapore' | 'Asia/Srednekolymsk' | 'Asia/Taipei' | 'Asia/Tashkent' | 'Asia/Tbilisi' | 'Asia/Tehran' | 'Asia/Thimphu' | 'Asia/Tokyo' | 'Asia/Tomsk' | 'Asia/Ulaanbaatar' | 'Asia/Urumqi' | 'Asia/Ust-Nera' | 'Asia/Vladivostok' | 'Asia/Yakutsk' | 'Asia/Yangon' | 'Asia/Yekaterinburg' | 'Asia/Yerevan' | 'Atlantic/Azores' | 'Atlantic/Bermuda' | 'Atlantic/Canary' | 'Atlantic/Cape_Verde' | 'Atlantic/Faroe' | 'Atlantic/Madeira' | 'Atlantic/Reykjavik' | 'Atlantic/South_Georgia' | 'Atlantic/Stanley' | 'Australia/Adelaide' | 'Australia/Brisbane' | 'Australia/Broken_Hill' | 'Australia/Currie' | 'Australia/Darwin' | 'Australia/Eucla' | 'Australia/Hobart' | 'Australia/Lindeman' | 'Australia/Lord_Howe' | 'Australia/Melbourne' | 'Australia/Perth' | 'Australia/Sydney' | 'CET' | 'CST6CDT' | 'EET' | 'EST' | 'EST5EDT' | 'Etc/GMT' | 'Etc/GMT+1' | 'Etc/GMT+10' | 'Etc/GMT+11' | 'Etc/GMT+12' | 'Etc/GMT+2' | 'Etc/GMT+3' | 'Etc/GMT+4' | 'Etc/GMT+5' | 'Etc/GMT+6' | 'Etc/GMT+7' | 'Etc/GMT+8' | 'Etc/GMT+9' | 'Etc/GMT-1' | 'Etc/GMT-10' | 'Etc/GMT-11' | 'Etc/GMT-12' | 'Etc/GMT-13' | 'Etc/GMT-14' | 'Etc/GMT-2' | 'Etc/GMT-3' | 'Etc/GMT-4' | 'Etc/GMT-5' | 'Etc/GMT-6' | 'Etc/GMT-7' | 'Etc/GMT-8' | 'Etc/GMT-9' | 'Etc/UTC' | 'Europe/Amsterdam' | 'Europe/Andorra' | 'Europe/Astrakhan' | 'Europe/Athens' | 'Europe/Belgrade' | 'Europe/Berlin' | 'Europe/Brussels' | 'Europe/Bucharest' | 'Europe/Budapest' | 'Europe/Chisinau' | 'Europe/Copenhagen' | 'Europe/Dublin' | 'Europe/Gibraltar' | 'Europe/Helsinki' | 'Europe/Istanbul' | 'Europe/Kaliningrad' | 'Europe/Kiev' | 'Europe/Kirov' | 'Europe/Lisbon' | 'Europe/London' | 'Europe/Luxembourg' | 'Europe/Madrid' | 'Europe/Malta' | 'Europe/Minsk' | 'Europe/Monaco' | 'Europe/Moscow' | 'Europe/Oslo' | 'Europe/Paris' | 'Europe/Prague' | 'Europe/Riga' | 'Europe/Rome' | 'Europe/Samara' | 'Europe/Saratov' | 'Europe/Simferopol' | 'Europe/Sofia' | 'Europe/Stockholm' | 'Europe/Tallinn' | 'Europe/Tirane' | 'Europe/Ulyanovsk' | 'Europe/Uzhgorod' | 'Europe/Vienna' | 'Europe/Vilnius' | 'Europe/Volgograd' | 'Europe/Warsaw' | 'Europe/Zaporozhye' | 'Europe/Zurich' | 'HST' | 'Indian/Chagos' | 'Indian/Christmas' | 'Indian/Cocos' | 'Indian/Kerguelen' | 'Indian/Mahe' | 'Indian/Maldives' | 'Indian/Mauritius' | 'Indian/Reunion' | 'MET' | 'MST' | 'MST7MDT' | 'PST8PDT' | 'Pacific/Apia' | 'Pacific/Auckland' | 'Pacific/Bougainville' | 'Pacific/Chatham' | 'Pacific/Chuuk' | 'Pacific/Easter' | 'Pacific/Efate' | 'Pacific/Enderbury' | 'Pacific/Fakaofo' | 'Pacific/Fiji' | 'Pacific/Funafuti' | 'Pacific/Galapagos' | 'Pacific/Gambier' | 'Pacific/Guadalcanal' | 'Pacific/Guam' | 'Pacific/Honolulu' | 'Pacific/Kiritimati' | 'Pacific/Kosrae' | 'Pacific/Kwajalein' | 'Pacific/Majuro' | 'Pacific/Marquesas' | 'Pacific/Nauru' | 'Pacific/Niue' | 'Pacific/Norfolk' | 'Pacific/Noumea' | 'Pacific/Pago_Pago' | 'Pacific/Palau' | 'Pacific/Pitcairn' | 'Pacific/Pohnpei' | 'Pacific/Port_Moresby' | 'Pacific/Rarotonga' | 'Pacific/Tahiti' | 'Pacific/Tarawa' | 'Pacific/Tongatapu' | 'Pacific/Wake' | 'Pacific/Wallis' | 'WET' | 'null';
/**
 * Daily processing schedule. This field is **OPTIONAL**. Use this to configure the preferred time for processing a feed (otherwise random).
 * @export
 */
export type CatalogsFeedProcessingSchedule = {
    /**
     * A time in format HH:MM with leading 0 (zero)
     * @type {string}
     * @memberof CatalogsFeedProcessingSchedule
     */
    time: string;
    /**
     * The timezone considered for the processing schedule time.
     * @type {string}
     * @memberof CatalogsFeedProcessingSchedule
     */
    timezone: CatalogsFeedProcessingScheduleTimezoneEnum;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type CatalogsFeedProcessingStatus = 'COMPLETED' | 'COMPLETED_EARLY' | 'DISAPPROVED' | 'FAILED' | 'PROCESSING' | 'QUEUED_FOR_PROCESSING' | 'UNDER_APPEAL' | 'UNDER_REVIEW';

/**
 * The counts can be null early in the process.
 * @export
 */
export type CatalogsFeedProductCounts = {
    /**
     * The number of products in the feed file.
     * @type {number}
     * @memberof CatalogsFeedProductCounts
     */
    original?: number;
    /**
     * The number of products successfully ingested from the feed file.
     * @type {number}
     * @memberof CatalogsFeedProductCounts
     */
    ingested?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedValidationDetails = {
    /**
     * 
     * @type {CatalogsFeedValidationErrors}
     * @memberof CatalogsFeedValidationDetails
     */
    errors: CatalogsFeedValidationErrors;
    /**
     * 
     * @type {CatalogsFeedValidationWarnings}
     * @memberof CatalogsFeedValidationDetails
     */
    warnings: CatalogsFeedValidationWarnings;
}

/**
 * 
 * @export
 */
export type CatalogsFeedValidationErrors = {
    /**
     * Pinterest couldn\'t download your feed.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    FETCH_ERROR?: number;
    /**
     * Your feed wasn\'t ingested because it hasn’t changed in the previous 90 days.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    FETCH_INACTIVE_FEED_ERROR?: number;
    /**
     * Your feed includes data with an unsupported encoding format.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    ENCODING_ERROR?: number;
    /**
     * Your feed includes data with formatting errors.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    DELIMITER_ERROR?: number;
    /**
     * Your feed is missing some required column headers.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    REQUIRED_COLUMNS_MISSING?: number;
    /**
     * Some products are duplicated.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    DUPLICATE_PRODUCTS?: number;
    /**
     * Some image links are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    IMAGE_LINK_INVALID?: number;
    /**
     * Some items are missing an item id in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    ITEMID_MISSING?: number;
    /**
     * Some items are missing a title in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    TITLE_MISSING?: number;
    /**
     * Some items are missing a description in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    DESCRIPTION_MISSING?: number;
    /**
     * Some items are missing a link URL in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    PRODUCT_LINK_MISSING?: number;
    /**
     * Some items are missing an image link URL in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    IMAGE_LINK_MISSING?: number;
    /**
     * Some items are missing an availability value in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    AVAILABILITY_INVALID?: number;
    /**
     * Some items have price formatting errors in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    PRODUCT_PRICE_INVALID?: number;
    /**
     * Some link values are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    LINK_FORMAT_INVALID?: number;
    /**
     * Your feed contains formatting errors for some items.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    PARSE_LINE_ERROR?: number;
    /**
     * Some adwords links contain too many characters.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    ADWORDS_FORMAT_INVALID?: number;
    /**
     * We experienced a technical difficulty and were unable to ingest your feed. The next ingestion will happen in 24 hours.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    INTERNAL_SERVICE_ERROR?: number;
    /**
     * Your merchant domain needs to be claimed.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    NO_VERIFIED_DOMAIN?: number;
    /**
     * Some items have invalid adult values.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    ADULT_INVALID?: number;
    /**
     * Some items have image_link URLs that contain too many characters, so those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    IMAGE_LINK_LENGTH_TOO_LONG?: number;
    /**
     * Some of your product link values don\'t match the verified domain associated with this account.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    INVALID_DOMAIN?: number;
    /**
     * Your feed contains too many items, some items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    FEED_LENGTH_TOO_LONG?: number;
    /**
     * Some product links contain too many characters, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    LINK_LENGTH_TOO_LONG?: number;
    /**
     * Your feed couldn\'t be validated because the xml file is formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    MALFORMED_XML?: number;
    /**
     * Some products are missing a price, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    PRICE_MISSING?: number;
    /**
     * Your feed couldn\'t be validated because the file doesn\'t contain the minimum number of lines required.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    FEED_TOO_SMALL?: number;
    /**
     * Some items exceed the maximum number of items per item group, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED?: number;
    /**
     * Some items\' main images can\'t be found.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE?: number;
    /**
     * Some items were not published because they don\'t meet Pinterest\'s Merchant Guidelines.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    PINJOIN_CONTENT_UNSAFE?: number;
    /**
     * Some items were not published because they don\'t meet Pinterest\'s Merchant Guidelines.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    BLOCKLISTED_IMAGE_SIGNATURE?: number;
    /**
     * Some items have list price formatting errors in their product metadata, those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    LIST_PRICE_INVALID?: number;
    /**
     * Some items were not published because price cannot be determined. The price, list price, and sale price are all different, so those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    PRICE_CANNOT_BE_DETERMINED?: number;
}


            export type CatalogsFeedValidationWarningsFETCHSAMESIGNATUREEnum = 1;
/**
 * 
 * @export
 */
export type CatalogsFeedValidationWarnings = {
    /**
     * Some items have ad links that are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    AD_LINK_FORMAT_WARNING?: number;
    /**
     * Some items have ad link URLs that are duplicates of the link URLs for those items.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    AD_LINK_SAME_AS_LINK?: number;
    /**
     * The title for some items were truncated because they contain too many characters.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    TITLE_LENGTH_TOO_LONG?: number;
    /**
     * The description for some items were truncated because they contain too many characters.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    DESCRIPTION_LENGTH_TOO_LONG?: number;
    /**
     * Some items have gender values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    GENDER_INVALID?: number;
    /**
     * Some items have age group values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    AGE_GROUP_INVALID?: number;
    /**
     * Some items have size type values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SIZE_TYPE_INVALID?: number;
    /**
     * Some items have size system values which are not one of the supported size systems.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SIZE_SYSTEM_INVALID?: number;
    /**
     * Some items have an invalid product link which contains invalid UTM tracking paramaters.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    LINK_FORMAT_WARNING?: number;
    /**
     * Some items have sale price values that are higher than the original price of the item.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SALES_PRICE_INVALID?: number;
    /**
     * Some items only have 1 or 2 levels of google_product_category values, which may limit visibility in recommendations, search results and shopping experiences.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    PRODUCT_CATEGORY_DEPTH_WARNING?: number;
    /**
     * Some items have adwords_redirect links that are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ADWORDS_FORMAT_WARNING?: number;
    /**
     * Some items have adwords_redirect URLs that are duplicates of the link URLs for those items.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ADWORDS_SAME_AS_LINK?: number;
    /**
     * Your feed contains duplicate headers.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    DUPLICATE_HEADERS?: number;
    /**
     * Ingestion completed early because there are no changes to your feed since the last successful update.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    FETCH_SAME_SIGNATURE?: CatalogsFeedValidationWarningsFETCHSAMESIGNATUREEnum;
    /**
     * Some items have additional_image_link URLs that contain too many characters, so those items will not be published.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG?: number;
    /**
     * Some items have additional_image_link URLs that are formatted incorrectly and will not be published with your items.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ADDITIONAL_IMAGE_LINK_WARNING?: number;
    /**
     * Some items have image_link URLs that are formatted incorrectly and will not be published with those items.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    IMAGE_LINK_WARNING?: number;
    /**
     * Some items have shipping values that are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SHIPPING_INVALID?: number;
    /**
     * Some items have tax values that are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    TAX_INVALID?: number;
    /**
     * Some items have invalid shipping_weight values.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SHIPPING_WEIGHT_INVALID?: number;
    /**
     * Some items have expiration_date values that are formatted incorrectly, those items will be published without an expiration date.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    EXPIRATION_DATE_INVALID?: number;
    /**
     * Some items have availability_date values that are formatted incorrectly, those items will be published without an availability date.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    AVAILABILITY_DATE_INVALID?: number;
    /**
     * Some items have sale_price_effective_date values that are formatted incorrectly, those items will be published without a sale date.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SALE_DATE_INVALID?: number;
    /**
     * Some items have weight_unit values that are formatted incorrectly, those items will be published without a weight unit.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    WEIGHT_UNIT_INVALID?: number;
    /**
     * Some items have is_bundle values that are formatted incorrectly, those items will be published without being bundled with other products.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    IS_BUNDLE_INVALID?: number;
    /**
     * Some items have updated_time values thate are formatted incorrectly, those items will be published without an updated time.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    UPDATED_TIME_INVALID?: number;
    /**
     * Some items have custom_label values that are too long, those items will be published without that custom label.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    CUSTOM_LABEL_LENGTH_TOO_LONG?: number;
    /**
     * Some items have product_type values that are too long, those items will be published without that product type.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    PRODUCT_TYPE_LENGTH_TOO_LONG?: number;
    /**
     * Some items have additional_image_link values that exceed the limit for additional images, those items will be published without some of your images.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    TOO_MANY_ADDITIONAL_IMAGE_LINKS?: number;
    /**
     * Some items have invalid multipack values.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    MULTIPACK_INVALID?: number;
    /**
     * The product count has increased or decreased significantly compared to the last successful ingestion.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    INDEXED_PRODUCT_COUNT_LARGE_DELTA?: number;
    /**
     * Some items include additional_image_links that can\'t be found.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE?: number;
    /**
     * Some items are missing a google_product_category.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    OPTIONAL_PRODUCT_CATEGORY_MISSING?: number;
    /**
     * Some items include google_product_category values that are not formatted correctly according to the GPC taxonomy.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    OPTIONAL_PRODUCT_CATEGORY_INVALID?: number;
    /**
     * Some items are missing a condition value, which may limit visibility in recommendations, search results and shopping experiences.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    OPTIONAL_CONDITION_MISSING?: number;
    /**
     * Some items include condition values that are formatted incorrectly, which may limit visibility in recommendations, search results and shopping experiences.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    OPTIONAL_CONDITION_INVALID?: number;
    /**
     * Some items include invalid ios_deep_link values.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    IOS_DEEP_LINK_INVALID?: number;
    /**
     * Some items include invalid android_deep_link.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ANDROID_DEEP_LINK_INVALID?: number;
    /**
     * Some items include utm_source values that are formatted incorrectly and have been automatically corrected.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    UTM_SOURCE_AUTO_CORRECTED?: number;
    /**
     * Some items include a currency that doesn\'t match the usual currency for the location where that product is sold or shipped.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    COUNTRY_DOES_NOT_MAP_TO_CURRENCY?: number;
    /**
     * Some items include min_ad_price values that are formatted incorrectly.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    MIN_AD_PRICE_INVALID?: number;
    /**
     * Some items include incorrectly formatted GTINs.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    GTIN_INVALID?: number;
    /**
     * Some items include inconsistent currencies in price fields.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    INCONSISTENT_CURRENCY_VALUES?: number;
    /**
     * Some items include sales price that is much lower than the list price.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SALES_PRICE_TOO_LOW?: number;
    /**
     * Some items include incorrectly formatted shipping_width.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SHIPPING_WIDTH_INVALID?: number;
    /**
     * Some items include incorrectly formatted shipping_height.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SHIPPING_HEIGHT_INVALID?: number;
    /**
     * Some items include a sales price that is higher than the list price. The sales price has been defaulted to the list price.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    SALES_PRICE_TOO_HIGH?: number;
    /**
     * Some items include incorrectly formatted MPNs.
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    MPN_INVALID?: number;
}

/**
 * Request object for creating a feed. Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.
 * @export
 */
export type CatalogsFeedsCreateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedsCreateRequestDefaultLocale}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_locale?: CatalogsFeedsCreateRequestDefaultLocale;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeedsCreateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_country?: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_availability?: ProductAvailabilityType;
}

/**
 * The locale used within a feed for product descriptions.
 * @export
 */
export type CatalogsFeedsCreateRequestDefaultLocale = {
}

/**
 * Request object for updating a feed.
 * @export
 */
export type CatalogsFeedsUpdateRequest = {
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeedsUpdateRequest
     */
    default_availability?: ProductAvailabilityType;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeedsUpdateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsFeedsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeedsUpdateRequest
     */
    format?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeedsUpdateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeedsUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeedsUpdateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeedsUpdateRequest
     */
    status?: CatalogsStatus;
}

/**
 * The file format of a feed.
 * @export
 * @enum {string}
 */
export type CatalogsFormat = 'TSV' | 'CSV' | 'XML';

/**
 * 
 * @export
 */
export type CatalogsHotelAddress = {
    /**
     * Primary street address of hotel.
     * @type {string}
     * @memberof CatalogsHotelAddress
     */
    addr1?: string;
    /**
     * City where the hotel is located.
     * @type {string}
     * @memberof CatalogsHotelAddress
     */
    city?: string;
    /**
     * State, county, province, where the hotel is located.
     * @type {string}
     * @memberof CatalogsHotelAddress
     */
    region?: string;
    /**
     * Country where the hotel is located.
     * @type {string}
     * @memberof CatalogsHotelAddress
     */
    country?: string;
    /**
     * Required for countries with a postal code system. Postal or zip code of the hotel.
     * @type {string}
     * @memberof CatalogsHotelAddress
     */
    postal_code?: string;
}

/**
 * 
 * @export
 */
export type CatalogsHotelAttributes = {
    /**
     * The hotel\'s name.
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    name?: string;
    /**
     * Link to the product page
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    link?: string;
    /**
     * Brief description of the hotel.
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    description?: string;
    /**
     * The brand to which this hotel belongs to.
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    brand?: string;
    /**
     * Latitude of the hotel.
     * @type {number}
     * @memberof CatalogsHotelAttributes
     */
    latitude?: number;
    /**
     * Longitude of the hotel.
     * @type {number}
     * @memberof CatalogsHotelAttributes
     */
    longitude?: number;
    /**
     * A list of neighborhoods where the hotel is located
     * @type {Array<string>}
     * @memberof CatalogsHotelAttributes
     */
    neighborhood?: Array<string>;
    /**
     * 
     * @type {CatalogsHotelAddress}
     * @memberof CatalogsHotelAttributes
     */
    address?: CatalogsHotelAddress;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    custom_label_0?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    custom_label_1?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    custom_label_2?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    custom_label_3?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    custom_label_4?: string;
    /**
     * The type of property. The category can be any type of internal description desired.
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    category?: string;
    /**
     * Base price of the hotel room per night followed by the ISO currency code
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    base_price?: string;
    /**
     * Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.
     * @type {string}
     * @memberof CatalogsHotelAttributes
     */
    sale_price?: string;
    /**
     * 
     * @type {CatalogsHotelGuestRatings}
     * @memberof CatalogsHotelAttributes
     */
    guest_ratings?: CatalogsHotelGuestRatings;
    /**
     * 
     * @type {CatalogsHotelAttributesAllOfMainImage}
     * @memberof CatalogsHotelAttributes
     */
    main_image?: CatalogsHotelAttributesAllOfMainImage;
    /**
     * <p><= 2000 characters</p> <p>The links to additional images for your hotel. Up to ten additional images can be used to show a hotel from different angles. Must begin with http:// or https://.</p>
     * @type {Array<string>}
     * @memberof CatalogsHotelAttributes
     */
    additional_image_link?: Array<string>;
}

/**
 * The main hotel image
 * @export
 */
export type CatalogsHotelAttributesAllOfMainImage = {
    /**
     * <p><= 2000 characters</p> <p>The link to the main hotel image. Image should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your hotel. The URL of your main_image.link must be accessible by the Pinterest user-agent, and send the accurate image. Please make sure there is no template or placeholder image at the link. Must start with http:// or https://.</p>
     * @type {string}
     * @memberof CatalogsHotelAttributesAllOfMainImage
     */
    link?: string;
    /**
     * Tag appended to the image that identifies image category or details. There can be multiple tags associated with an image
     * @type {Array<string>}
     * @memberof CatalogsHotelAttributesAllOfMainImage
     */
    tag?: Array<string>;
}


            export type CatalogsHotelBatchItemOperationEnum = 'DELETE';
/**
 * Hotel batch item
 * @export
 */
export type CatalogsHotelBatchItem = {
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsHotelBatchItem
     */
    hotel_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelBatchItem
     */
    operation: CatalogsHotelBatchItemOperationEnum;
    /**
     * 
     * @type {CatalogsUpdatableHotelAttributes}
     * @memberof CatalogsHotelBatchItem
     */
    attributes: CatalogsUpdatableHotelAttributes;
}

/**
 * Request object to update catalogs hotel items
 * @export
 */
export type CatalogsHotelBatchRequest = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelBatchRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsHotelBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsHotelBatchRequest
     */
    language: Language;
    /**
     * Array with catalogs item operations
     * @type {Array<CatalogsHotelBatchItem>}
     * @memberof CatalogsHotelBatchRequest
     */
    items: Array<CatalogsHotelBatchItem>;
    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @type {string}
     * @memberof CatalogsHotelBatchRequest
     */
    catalog_id?: string;
}

/**
 * Catalogs Hotel Feed object
 * @export
 */
export type CatalogsHotelFeed = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsHotelFeed
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelFeed
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsHotelFeed
     */
    updated_at?: Date;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof CatalogsHotelFeed
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsHotelFeed
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelFeed
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsHotelFeed
     */
    credentials: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsHotelFeed
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsHotelFeed
     */
    preferred_processing_schedule: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsHotelFeed
     */
    status: CatalogsStatus;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsHotelFeed
     */
    default_currency: NullableCurrency;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsHotelFeed
     */
    default_locale: string;
    /**
     * Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type.
     * @type {string}
     * @memberof CatalogsHotelFeed
     */
    catalog_id: string;
}

/**
 * Request object for creating a feed. Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.
 * @export
 */
export type CatalogsHotelFeedsCreateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedsCreateRequestDefaultLocale}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    default_locale: CatalogsFeedsCreateRequestDefaultLocale;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    catalog_type: CatalogsType;
    /**
     * Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. At the moment a catalog can not have multiple hotel feeds but this will change in the future.
     * @type {string}
     * @memberof CatalogsHotelFeedsCreateRequest
     */
    catalog_id?: string;
}

/**
 * Request object for updating a feed.
 * @export
 */
export type CatalogsHotelFeedsUpdateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    format?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    status?: CatalogsStatus;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelFeedsUpdateRequest
     */
    catalog_type: CatalogsType;
}

/**
 * If specified, you must provide all properties
 * @export
 */
export type CatalogsHotelGuestRatings = {
    /**
     * Your hotel\'s rating.
     * @type {number}
     * @memberof CatalogsHotelGuestRatings
     */
    score?: number;
    /**
     * Total number of people who have rated this hotel.
     * @type {number}
     * @memberof CatalogsHotelGuestRatings
     */
    number_of_reviewers?: number;
    /**
     * Max value for the hotel rating score.
     * @type {number}
     * @memberof CatalogsHotelGuestRatings
     */
    max_score?: number;
    /**
     * System you use for guest reviews.
     * @type {string}
     * @memberof CatalogsHotelGuestRatings
     */
    rating_system?: string;
}

/**
 * Object describing a hotel item error
 * @export
 */
export type CatalogsHotelItemErrorResponse = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelItemErrorResponse
     */
    catalog_type: CatalogsType;
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsHotelItemErrorResponse
     */
    hotel_id?: string;
    /**
     * Array with the errors for the item id requested
     * @type {Array<ItemValidationEvent>}
     * @memberof CatalogsHotelItemErrorResponse
     */
    errors?: Array<ItemValidationEvent>;
}

/**
 * Object describing a hotel record
 * @export
 */
export type CatalogsHotelItemResponse = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelItemResponse
     */
    catalog_type: CatalogsType;
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsHotelItemResponse
     */
    hotel_id?: string;
    /**
     * The pins mapped to the item
     * @type {Array<Pin>}
     * @memberof CatalogsHotelItemResponse
     */
    pins?: Array<Pin>;
    /**
     * 
     * @type {CatalogsHotelAttributes}
     * @memberof CatalogsHotelItemResponse
     */
    attributes?: CatalogsHotelAttributes;
}

/**
 * Object describing the catalogs hotel items batch
 * @export
 */
export type CatalogsHotelItemsBatch = {
    /**
     * Id of the catalogs items batch
     * @type {string}
     * @memberof CatalogsHotelItemsBatch
     */
    batch_id?: string;
    /**
     * Time of the batch creation: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsHotelItemsBatch
     */
    created_time?: Date;
    /**
     * Time of the batch completion: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsHotelItemsBatch
     */
    completed_time?: Date;
    /**
     * 
     * @type {BatchOperationStatus}
     * @memberof CatalogsHotelItemsBatch
     */
    status?: BatchOperationStatus;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelItemsBatch
     */
    catalog_type: CatalogsType;
    /**
     * Array with the catalogs items processing records part of the catalogs items batch
     * @type {Array<HotelProcessingRecord>}
     * @memberof CatalogsHotelItemsBatch
     */
    items?: Array<HotelProcessingRecord>;
}


            export type CatalogsHotelItemsFilterCatalogTypeEnum = 'HOTEL';
/**
 * 
 * @export
 */
export type CatalogsHotelItemsFilter = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelItemsFilter
     */
    catalog_type: CatalogsHotelItemsFilterCatalogTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsHotelItemsFilter
     */
    hotel_ids: Array<string>;
    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @type {string}
     * @memberof CatalogsHotelItemsFilter
     */
    catalog_id?: string;
}


            export type CatalogsHotelProductGroupCatalogTypeEnum = 'HOTEL';
/**
 * 
 * @export
 */
export type CatalogsHotelProductGroup = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroup
     */
    catalog_type: CatalogsHotelProductGroupCatalogTypeEnum;
    /**
     * ID of the hotel product group.
     * @type {string}
     * @memberof CatalogsHotelProductGroup
     */
    id: string;
    /**
     * Name of hotel product group
     * @type {string}
     * @memberof CatalogsHotelProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroup
     */
    description?: string;
    /**
     * 
     * @type {CatalogsHotelProductGroupFilters}
     * @memberof CatalogsHotelProductGroup
     */
    filters: CatalogsHotelProductGroupFilters;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsHotelProductGroup
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsHotelProductGroup
     */
    updated_at?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroup
     */
    catalog_id: string;
}


            export type CatalogsHotelProductGroupCreateRequestCatalogTypeEnum = 'HOTEL';
/**
 * Request object for creating a hotel product group.
 * @export
 */
export type CatalogsHotelProductGroupCreateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroupCreateRequest
     */
    catalog_type: CatalogsHotelProductGroupCreateRequestCatalogTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroupCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroupCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsHotelProductGroupFilters}
     * @memberof CatalogsHotelProductGroupCreateRequest
     */
    filters: CatalogsHotelProductGroupFilters;
    /**
     * Catalog id pertaining to the hotel product group.
     * @type {string}
     * @memberof CatalogsHotelProductGroupCreateRequest
     */
    catalog_id: string;
}

/**
 * 
 * @export
 */
export type CatalogsHotelProductGroupFilterKeys = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCurrencyCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    PRICE: CatalogsProductGroupPricingCurrencyCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    HOTEL_ID: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    BRAND: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    CUSTOM_LABEL_0: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    CUSTOM_LABEL_1: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    CUSTOM_LABEL_2: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    CUSTOM_LABEL_3: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    CUSTOM_LABEL_4: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleCountriesCriteria}
     * @memberof CatalogsHotelProductGroupFilterKeys
     */
    COUNTRY: CatalogsProductGroupMultipleCountriesCriteria;
}

/**
 * Object holding a group of filters for a hotel product group
 * @export
 */
export type CatalogsHotelProductGroupFilters = {
    /**
     * 
     * @type {Array<CatalogsHotelProductGroupFilterKeys>}
     * @memberof CatalogsHotelProductGroupFilters
     */
    any_of: Array<CatalogsHotelProductGroupFilterKeys>;
    /**
     * 
     * @type {Array<CatalogsHotelProductGroupFilterKeys>}
     * @memberof CatalogsHotelProductGroupFilters
     */
    all_of: Array<CatalogsHotelProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsHotelProductGroupFiltersAllOf = {
    /**
     * 
     * @type {Array<CatalogsHotelProductGroupFilterKeys>}
     * @memberof CatalogsHotelProductGroupFiltersAllOf
     */
    all_of: Array<CatalogsHotelProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsHotelProductGroupFiltersAnyOf = {
    /**
     * 
     * @type {Array<CatalogsHotelProductGroupFilterKeys>}
     * @memberof CatalogsHotelProductGroupFiltersAnyOf
     */
    any_of: Array<CatalogsHotelProductGroupFilterKeys>;
}


            export type CatalogsHotelProductGroupUpdateRequestCatalogTypeEnum = 'HOTEL';
/**
 * Request object for updating a hotel product group.
 * @export
 */
export type CatalogsHotelProductGroupUpdateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroupUpdateRequest
     */
    catalog_type?: CatalogsHotelProductGroupUpdateRequestCatalogTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroupUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsHotelProductGroupUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsHotelProductGroupFilters}
     * @memberof CatalogsHotelProductGroupUpdateRequest
     */
    filters?: CatalogsHotelProductGroupFilters;
}

/**
 * 
 * @export
 */
export type CatalogsItemValidationDetails = {
    /**
     * 
     * @type {NullableCatalogsItemFieldType}
     * @memberof CatalogsItemValidationDetails
     */
    attribute_name: NullableCatalogsItemFieldType;
    /**
     * Provided value that caused the validation issue.
     * @type {string}
     * @memberof CatalogsItemValidationDetails
     */
    provided_value: string;
}

/**
 * 
 * @export
 */
export type CatalogsItemValidationErrors = {
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    ADULT_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    ADWORDS_FORMAT_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    AVAILABILITY_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    BLOCKLISTED_IMAGE_SIGNATURE?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    DESCRIPTION_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    DUPLICATE_PRODUCTS?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    IMAGE_LINK_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    IMAGE_LINK_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    IMAGE_LINK_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    INVALID_DOMAIN?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    ITEMID_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    LINK_FORMAT_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    LINK_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    LIST_PRICE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    PARSE_LINE_ERROR?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    PINJOIN_CONTENT_UNSAFE?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    PRICE_CANNOT_BE_DETERMINED?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    PRICE_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    PRODUCT_LINK_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    PRODUCT_PRICE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationErrors
     */
    TITLE_MISSING?: CatalogsItemValidationDetails;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type CatalogsItemValidationIssue = 'AD_LINK_FORMAT_WARNING' | 'AD_LINK_SAME_AS_LINK' | 'ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG' | 'ADDITIONAL_IMAGE_LINK_WARNING' | 'ADULT_INVALID' | 'ADWORDS_FORMAT_INVALID' | 'ADWORDS_FORMAT_WARNING' | 'ADWORDS_SAME_AS_LINK' | 'AGE_GROUP_INVALID' | 'ANDROID_DEEP_LINK_INVALID' | 'AVAILABILITY_DATE_INVALID' | 'AVAILABILITY_INVALID' | 'BLOCKLISTED_IMAGE_SIGNATURE' | 'COUNTRY_DOES_NOT_MAP_TO_CURRENCY' | 'CUSTOM_LABEL_LENGTH_TOO_LONG' | 'DESCRIPTION_LENGTH_TOO_LONG' | 'DESCRIPTION_MISSING' | 'DUPLICATE_PRODUCTS' | 'EXPIRATION_DATE_INVALID' | 'GENDER_INVALID' | 'GTIN_INVALID' | 'IMAGE_LINK_INVALID' | 'IMAGE_LINK_LENGTH_TOO_LONG' | 'IMAGE_LINK_MISSING' | 'IMAGE_LINK_WARNING' | 'INVALID_DOMAIN' | 'IOS_DEEP_LINK_INVALID' | 'IS_BUNDLE_INVALID' | 'ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE' | 'ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE' | 'ITEMID_MISSING' | 'LINK_FORMAT_INVALID' | 'LINK_FORMAT_WARNING' | 'LINK_LENGTH_TOO_LONG' | 'LIST_PRICE_INVALID' | 'MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED' | 'MIN_AD_PRICE_INVALID' | 'MPN_INVALID' | 'MULTIPACK_INVALID' | 'OPTIONAL_CONDITION_INVALID' | 'OPTIONAL_CONDITION_MISSING' | 'OPTIONAL_PRODUCT_CATEGORY_INVALID' | 'OPTIONAL_PRODUCT_CATEGORY_MISSING' | 'PARSE_LINE_ERROR' | 'PINJOIN_CONTENT_UNSAFE' | 'PRICE_CANNOT_BE_DETERMINED' | 'PRICE_MISSING' | 'PRODUCT_CATEGORY_DEPTH_WARNING' | 'PRODUCT_LINK_MISSING' | 'PRODUCT_PRICE_INVALID' | 'PRODUCT_TYPE_LENGTH_TOO_LONG' | 'SALE_DATE_INVALID' | 'SALES_PRICE_INVALID' | 'SALES_PRICE_TOO_HIGH' | 'SALES_PRICE_TOO_LOW' | 'SHIPPING_INVALID' | 'SHIPPING_HEIGHT_INVALID' | 'SHIPPING_WEIGHT_INVALID' | 'SHIPPING_WIDTH_INVALID' | 'SIZE_SYSTEM_INVALID' | 'SIZE_TYPE_INVALID' | 'TAX_INVALID' | 'TITLE_LENGTH_TOO_LONG' | 'TITLE_MISSING' | 'TOO_MANY_ADDITIONAL_IMAGE_LINKS' | 'UTM_SOURCE_AUTO_CORRECTED' | 'WEIGHT_UNIT_INVALID';

/**
 * 
 * @export
 */
export type CatalogsItemValidationIssues = {
    /**
     * Item number based on order of appearance in the Catalogs Feed. For example, \'0\' refers to first item found in a feed that was downloaded from a \'location\' specified during feed creation.
     * @type {number}
     * @memberof CatalogsItemValidationIssues
     */
    item_number: number;
    /**
     * The merchant-created unique ID that represents the product.
     * @type {string}
     * @memberof CatalogsItemValidationIssues
     */
    item_id: string;
    /**
     * 
     * @type {CatalogsItemValidationErrors}
     * @memberof CatalogsItemValidationIssues
     */
    errors: CatalogsItemValidationErrors;
    /**
     * 
     * @type {CatalogsItemValidationWarnings}
     * @memberof CatalogsItemValidationIssues
     */
    warnings: CatalogsItemValidationWarnings;
}

/**
 * 
 * @export
 */
export type CatalogsItemValidationWarnings = {
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    AD_LINK_FORMAT_WARNING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    AD_LINK_SAME_AS_LINK?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    ADDITIONAL_IMAGE_LINK_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    ADDITIONAL_IMAGE_LINK_WARNING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    ADWORDS_FORMAT_WARNING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    ADWORDS_SAME_AS_LINK?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    AGE_GROUP_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SIZE_SYSTEM_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    ANDROID_DEEP_LINK_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    AVAILABILITY_DATE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    COUNTRY_DOES_NOT_MAP_TO_CURRENCY?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    CUSTOM_LABEL_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    DESCRIPTION_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    EXPIRATION_DATE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    GENDER_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    GTIN_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    IMAGE_LINK_WARNING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    IOS_DEEP_LINK_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    IS_BUNDLE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    ITEM_ADDITIONAL_IMAGE_DOWNLOAD_FAILURE?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    LINK_FORMAT_WARNING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    MIN_AD_PRICE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    MPN_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    MULTIPACK_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    OPTIONAL_CONDITION_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    OPTIONAL_CONDITION_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    OPTIONAL_PRODUCT_CATEGORY_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    OPTIONAL_PRODUCT_CATEGORY_MISSING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    PRODUCT_CATEGORY_DEPTH_WARNING?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    PRODUCT_TYPE_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SALES_PRICE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SALES_PRICE_TOO_LOW?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SALES_PRICE_TOO_HIGH?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SALE_DATE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SHIPPING_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SHIPPING_HEIGHT_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SHIPPING_WEIGHT_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SHIPPING_WIDTH_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    SIZE_TYPE_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    TAX_INVALID?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    TITLE_LENGTH_TOO_LONG?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    TOO_MANY_ADDITIONAL_IMAGE_LINKS?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    UTM_SOURCE_AUTO_CORRECTED?: CatalogsItemValidationDetails;
    /**
     * 
     * @type {CatalogsItemValidationDetails}
     * @memberof CatalogsItemValidationWarnings
     */
    WEIGHT_UNIT_INVALID?: CatalogsItemValidationDetails;
}

/**
 * Response object of catalogs items
 * @export
 */
export type CatalogsItems = {
    /**
     * Array with catalogs items
     * @type {Array<ItemResponse>}
     * @memberof CatalogsItems
     */
    items?: Array<ItemResponse>;
}

/**
 * Object describing the catalogs items batch
 * @export
 */
export type CatalogsItemsBatch = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsItemsBatch
     */
    catalog_type: CatalogsType;
    /**
     * Id of the catalogs items batch
     * @type {string}
     * @memberof CatalogsItemsBatch
     */
    batch_id?: string;
    /**
     * Time of the batch creation: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsItemsBatch
     */
    created_time?: Date;
    /**
     * Time of the batch completion: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsItemsBatch
     */
    completed_time?: Date;
    /**
     * 
     * @type {BatchOperationStatus}
     * @memberof CatalogsItemsBatch
     */
    status?: BatchOperationStatus;
    /**
     * Array with the catalogs items processing records part of the catalogs items batch
     * @type {Array<HotelProcessingRecord>}
     * @memberof CatalogsItemsBatch
     */
    items?: Array<HotelProcessingRecord>;
}

/**
 * Request object of catalogs items batch
 * @export
 */
export type CatalogsItemsBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsBatchRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemDeleteBatchRecord>}
     * @memberof CatalogsItemsBatchRequest
     */
    items: Array<ItemDeleteBatchRecord>;
}

/**
 * Request object to create catalogs items
 * @export
 */
export type CatalogsItemsCreateBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsCreateBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsCreateBatchRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsCreateBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemCreateBatchRecord>}
     * @memberof CatalogsItemsCreateBatchRequest
     */
    items: Array<ItemCreateBatchRecord>;
}

/**
 * Request object to delete catalogs items
 * @export
 */
export type CatalogsItemsDeleteBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsDeleteBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsDeleteBatchRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsDeleteBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemDeleteBatchRecord>}
     * @memberof CatalogsItemsDeleteBatchRequest
     */
    items: Array<ItemDeleteBatchRecord>;
}

/**
 * Request object to discontinue catalogs items
 * @export
 */
export type CatalogsItemsDeleteDiscontinuedBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsDeleteDiscontinuedBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsDeleteDiscontinuedBatchRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsDeleteDiscontinuedBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemDeleteDiscontinuedBatchRecord>}
     * @memberof CatalogsItemsDeleteDiscontinuedBatchRequest
     */
    items: Array<ItemDeleteDiscontinuedBatchRecord>;
}

/**
 * 
 * @export
 */
export type CatalogsItemsFilters = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsItemsFilters
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsItemsFilters
     */
    item_ids: Array<string>;
    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @type {string}
     * @memberof CatalogsItemsFilters
     */
    catalog_id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsItemsFilters
     */
    hotel_ids: Array<string>;
}

/**
 * Request object to update catalogs items
 * @export
 */
export type CatalogsItemsUpdateBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsUpdateBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsUpdateBatchRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsUpdateBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemUpdateBatchRecord>}
     * @memberof CatalogsItemsUpdateBatchRequest
     */
    items: Array<ItemUpdateBatchRecord>;
}

/**
 * Request object to upsert catalogs items
 * @export
 */
export type CatalogsItemsUpsertBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemUpsertBatchRecord>}
     * @memberof CatalogsItemsUpsertBatchRequest
     */
    items: Array<ItemUpsertBatchRecord>;
}

/**
 * 
 * @export
 */
export type CatalogsList200Response = {
    /**
     * 
     * @type {Array<Catalog>}
     * @memberof CatalogsList200Response
     */
    items: Array<Catalog>;
    /**
     * 
     * @type {string}
     * @memberof CatalogsList200Response
     */
    bookmark?: string;
}

/**
 * Request object to list products for a given product group filter.
 * @export
 */
export type CatalogsListProductsByFilterRequest = {
    /**
     * Catalog Feed id pertaining to the catalog product group filter.
     * @type {string}
     * @memberof CatalogsListProductsByFilterRequest
     */
    feed_id: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsListProductsByFilterRequest
     */
    filters: CatalogsProductGroupFilters;
}

/**
 * Request object to list products for a given feed_id and product group filter.
 * @export
 */
export type CatalogsListProductsByFilterRequestOneOf = {
    /**
     * Catalog Feed id pertaining to the catalog product group filter.
     * @type {string}
     * @memberof CatalogsListProductsByFilterRequestOneOf
     */
    feed_id: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsListProductsByFilterRequestOneOf
     */
    filters: CatalogsProductGroupFilters;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type CatalogsLocale = 'af-ZA' | 'ar-SA' | 'bg-BG' | 'bn-IN' | 'cs-CZ' | 'da-DK' | 'de' | 'el-GR' | 'en-AU' | 'en-CA' | 'en-GB' | 'en-IN' | 'en-US' | 'es-419' | 'es-AR' | 'es-ES' | 'es-MX' | 'fi-FI' | 'fr' | 'fr-CA' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'hu-HU' | 'id-ID' | 'it' | 'ja' | 'ko-KR' | 'ms-MY' | 'nb-NO' | 'nl' | 'pl-PL' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru-RU' | 'sk-SK' | 'sv-SE' | 'te-IN' | 'th-TH' | 'tl-PH' | 'tr' | 'uk-UA' | 'vi-VN' | 'zh-CN' | 'zh-TW';

/**
 * 
 * @export
 */
export type CatalogsProduct = {
    /**
     * 
     * @type {CatalogsProductMetadata}
     * @memberof CatalogsProduct
     */
    metadata: CatalogsProductMetadata;
    /**
     * 
     * @type {Pin}
     * @memberof CatalogsProduct
     */
    pin: Pin;
}


            export type CatalogsProductGroupCatalogTypeEnum = 'RETAIL';
/**
 * catalog product group entity
 * @export
 */
export type CatalogsProductGroup = {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroup
     */
    filters: CatalogsProductGroupFilters;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroup
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsProductGroup
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsProductGroup
     */
    status?: CatalogsProductGroupStatus;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    updated_at?: number;
    /**
     * id of the catalogs feed belonging to this catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    feed_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    catalog_type?: CatalogsProductGroupCatalogTypeEnum;
}

/**
 * Request object for creating a product group.
 * @export
 */
export type CatalogsProductGroupCreateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    description?: string;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroupCreateRequest
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupFiltersRequest}
     * @memberof CatalogsProductGroupCreateRequest
     */
    filters: CatalogsProductGroupFiltersRequest;
    /**
     * Catalog Feed id pertaining to the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    feed_id: string;
}

/**
 * A currency filter. This filter cannot be negated
 * @export
 */
export type CatalogsProductGroupCurrencyCriteria = {
    /**
     * 
     * @type {NonNullableCatalogsCurrency}
     * @memberof CatalogsProductGroupCurrencyCriteria
     */
    values: NonNullableCatalogsCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupCurrencyCriteria
     */
    negated?: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFilterKeys = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    MIN_PRICE: CatalogsProductGroupPricingCriteria;
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    MAX_PRICE: CatalogsProductGroupPricingCriteria;
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CURRENCY: CatalogsProductGroupCurrencyCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    ITEM_ID: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    AVAILABILITY: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    BRAND: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CONDITION: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_0: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_1: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_2: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_3: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_4: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    ITEM_GROUP_ID: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleGenderCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GENDER: CatalogsProductGroupMultipleGenderCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_4: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_3: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_2: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_1: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_0: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_6: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_5: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_4: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_3: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_2: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_1: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_0: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * Object holding a group of filters for a catalog product group
 * @export
 */
export type CatalogsProductGroupFilters = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFilters
     */
    any_of: Array<CatalogsProductGroupFilterKeys>;
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFilters
     */
    all_of: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFiltersAllOf = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersAllOf
     */
    all_of: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFiltersAnyOf = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersAnyOf
     */
    any_of: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * Object holding a group of filters for request on catalog product group. This is a distinct schema It is not possible to create or update a Product Group with empty filters. But some automatically generated Product Groups might have empty filters.
 * @export
 */
export type CatalogsProductGroupFiltersRequest = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersRequest
     */
    any_of: Array<CatalogsProductGroupFilterKeys>;
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersRequest
     */
    all_of: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFiltersRequestAnyOf = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersRequestAnyOf
     */
    any_of: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFiltersRequestAnyOf1 = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersRequestAnyOf1
     */
    all_of: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupMultipleCountriesCriteria = {
    /**
     * 
     * @type {Array<Country>}
     * @memberof CatalogsProductGroupMultipleCountriesCriteria
     */
    values: Array<Country>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleCountriesCriteria
     */
    negated?: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupMultipleGenderCriteria = {
    /**
     * 
     * @type {Array<Gender>}
     * @memberof CatalogsProductGroupMultipleGenderCriteria
     */
    values: Array<Gender>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleGenderCriteria
     */
    negated?: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupMultipleStringCriteria = {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsProductGroupMultipleStringCriteria
     */
    values: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleStringCriteria
     */
    negated?: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupMultipleStringListCriteria = {
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof CatalogsProductGroupMultipleStringListCriteria
     */
    values: Array<Array<string>>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleStringListCriteria
     */
    negated?: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupPinsList200Response = {
    /**
     * Pins
     * @type {Array<CatalogsProduct>}
     * @memberof CatalogsProductGroupPinsList200Response
     */
    items: Array<CatalogsProduct>;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupPinsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupPricingCriteria = {
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    inclusion?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    values: number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    negated?: boolean;
}


            export type CatalogsProductGroupPricingCurrencyCriteriaOperatorEnum = 'GREATER_THAN' | 'GREATER_THAN_OR_EQUALS' | 'LESS_THAN' | 'LESS_THAN_OR_EQUALS';
/**
 * 
 * @export
 */
export type CatalogsProductGroupPricingCurrencyCriteria = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupPricingCurrencyCriteria
     */
    operator: CatalogsProductGroupPricingCurrencyCriteriaOperatorEnum;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupPricingCurrencyCriteria
     */
    value: number;
    /**
     * 
     * @type {NonNullableCatalogsCurrency}
     * @memberof CatalogsProductGroupPricingCurrencyCriteria
     */
    currency: NonNullableCatalogsCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCurrencyCriteria
     */
    negated?: boolean;
}

/**
 * Product counts for a CatalogsProductGroup
 * @export
 */
export type CatalogsProductGroupProductCounts = {
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupProductCounts
     */
    in_stock: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupProductCounts
     */
    out_of_stock: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupProductCounts
     */
    preorder: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupProductCounts
     */
    total: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type CatalogsProductGroupStatus = 'ACTIVE' | 'INACTIVE';

/**
 * <p>Catalog product group type</p> <p>MERCHANT_CREATED: Product groups created by merchants. <br>ALL_PRODUCTS: Consists of every product in your latest successful feed upload. <br>BEST_DEALS: Consists of products with the deepest drop in price. <br>PINNER_FAVORITES: Consists of products that are resonating most with people on Pinterest, based on engagement. <br>TOP_SELLERS: Consists of products with the highest conversion rate, if you have the conversion tag installed. <br>BACK_IN_STOCK: Consists of products that were previously out of stock and are now in stock. <br>NEW_ARRIVALS: Consists of products that are new to your Catalog. <br>SHOPIFY_COLLECTION: Product groups created based on Shopify Product Collections. <br>I2PC: Product groups created based on predicted product category.</p>
 * @export
 * @enum {string}
 */
export type CatalogsProductGroupType = 'MERCHANT_CREATED' | 'ALL_PRODUCTS' | 'BEST_DEALS' | 'PINNER_FAVORITES' | 'TOP_SELLERS' | 'BACK_IN_STOCK' | 'NEW_ARRIVALS' | 'SHOPIFY_COLLECTIONS' | 'I2PC';

/**
 * Request object for updating a product group.
 * @export
 */
export type CatalogsProductGroupUpdateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    description?: string;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupFiltersRequest}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    filters?: CatalogsProductGroupFiltersRequest;
}


            export type CatalogsProductGroupsCreate201ResponseCatalogTypeEnum = 'RETAIL';
/**
 * 
 * @export
 */
export type CatalogsProductGroupsCreate201Response = {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    filters: CatalogsProductGroupFilters;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    status?: CatalogsProductGroupStatus;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    updated_at?: number;
    /**
     * id of the catalogs feed belonging to this catalog product group
     * @type {string}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    feed_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsCreate201Response
     */
    catalog_type?: CatalogsProductGroupsCreate201ResponseCatalogTypeEnum;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupsCreateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsCreateRequest
     */
    description?: string;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroupsCreateRequest
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupFiltersRequest}
     * @memberof CatalogsProductGroupsCreateRequest
     */
    filters: CatalogsProductGroupFiltersRequest;
    /**
     * Catalog Feed id pertaining to the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupsCreateRequest
     */
    feed_id: string;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupsList200Response = {
    /**
     * 
     * @type {Array<CatalogsProductGroupsList200ResponseAllOfItemsInner>}
     * @memberof CatalogsProductGroupsList200Response
     */
    items: Array<CatalogsProductGroupsList200ResponseAllOfItemsInner>;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsList200Response
     */
    bookmark?: string;
}


            export type CatalogsProductGroupsList200ResponseAllOfItemsInnerCatalogTypeEnum = 'RETAIL';
/**
 * 
 * @export
 */
export type CatalogsProductGroupsList200ResponseAllOfItemsInner = {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    filters: CatalogsProductGroupFilters;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    status?: CatalogsProductGroupStatus;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    updated_at?: number;
    /**
     * id of the catalogs feed belonging to this catalog product group
     * @type {string}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    feed_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsList200ResponseAllOfItemsInner
     */
    catalog_type?: CatalogsProductGroupsList200ResponseAllOfItemsInnerCatalogTypeEnum;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupsUpdateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupsUpdateRequest
     */
    description?: string;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsProductGroupsUpdateRequest
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupFiltersRequest}
     * @memberof CatalogsProductGroupsUpdateRequest
     */
    filters?: CatalogsProductGroupFiltersRequest;
}

/**
 * Product metadata entity
 * @export
 */
export type CatalogsProductMetadata = {
    /**
     * The user-created unique ID that represents the product.
     * @type {string}
     * @memberof CatalogsProductMetadata
     */
    item_id: string;
    /**
     * The parent ID of the product.
     * @type {string}
     * @memberof CatalogsProductMetadata
     */
    item_group_id: string;
    /**
     * 
     * @type {NonNullableProductAvailabilityType}
     * @memberof CatalogsProductMetadata
     */
    availability: NonNullableProductAvailabilityType;
    /**
     * The price of the product.
     * @type {number}
     * @memberof CatalogsProductMetadata
     */
    price: number;
    /**
     * The discounted price of the product.
     * @type {number}
     * @memberof CatalogsProductMetadata
     */
    sale_price: number;
    /**
     * 
     * @type {NonNullableCatalogsCurrency}
     * @memberof CatalogsProductMetadata
     */
    currency: NonNullableCatalogsCurrency;
}

/**
 * A request object that can have multiple operations on a single retail batch
 * @export
 */
export type CatalogsRetailBatchRequest = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailBatchRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsRetailBatchRequest
     */
    language: Language;
    /**
     * Array with catalogs item operations
     * @type {Array<CatalogsRetailBatchRequestItemsInner>}
     * @memberof CatalogsRetailBatchRequest
     */
    items: Array<CatalogsRetailBatchRequestItemsInner>;
}


            export type CatalogsRetailBatchRequestItemsInnerOperationEnum = 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
/**
 * 
 * @export
 */
export type CatalogsRetailBatchRequestItemsInner = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    item_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    operation: CatalogsRetailBatchRequestItemsInnerOperationEnum;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    attributes: ItemAttributes;
    /**
     * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
     * @type {Array<UpdateMaskFieldType>}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    update_mask?: Array<UpdateMaskFieldType>;
}

/**
 * Catalogs Retail Feed object
 * @export
 */
export type CatalogsRetailFeed = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsRetailFeed
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailFeed
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsRetailFeed
     */
    updated_at?: Date;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof CatalogsRetailFeed
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsRetailFeed
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailFeed
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsRetailFeed
     */
    credentials: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsRetailFeed
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsRetailFeed
     */
    preferred_processing_schedule: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsRetailFeed
     */
    status: CatalogsStatus;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsRetailFeed
     */
    default_currency: NullableCurrency;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsRetailFeed
     */
    default_locale: string;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailFeed
     */
    default_country: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsRetailFeed
     */
    default_availability: ProductAvailabilityType;
}

/**
 * Request object for creating a retail feed.
 * @export
 */
export type CatalogsRetailFeedsCreateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedsCreateRequestDefaultLocale}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    default_locale: CatalogsFeedsCreateRequestDefaultLocale;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    default_country: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsRetailFeedsCreateRequest
     */
    default_availability?: ProductAvailabilityType;
}

/**
 * Request object for updating a feed.
 * @export
 */
export type CatalogsRetailFeedsUpdateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    format?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    status?: CatalogsStatus;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsRetailFeedsUpdateRequest
     */
    default_availability?: ProductAvailabilityType;
}

/**
 * Object describing a retail item error
 * @export
 */
export type CatalogsRetailItemErrorResponse = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailItemErrorResponse
     */
    catalog_type: CatalogsType;
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsRetailItemErrorResponse
     */
    item_id?: string;
    /**
     * Array with the errors for the item id requested
     * @type {Array<ItemValidationEvent>}
     * @memberof CatalogsRetailItemErrorResponse
     */
    errors?: Array<ItemValidationEvent>;
}

/**
 * Object describing a retail item record
 * @export
 */
export type CatalogsRetailItemResponse = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailItemResponse
     */
    catalog_type: CatalogsType;
    /**
     * The catalog retail item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsRetailItemResponse
     */
    item_id?: string;
    /**
     * The pins mapped to the item
     * @type {Array<Pin>}
     * @memberof CatalogsRetailItemResponse
     */
    pins?: Array<Pin>;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof CatalogsRetailItemResponse
     */
    attributes?: ItemAttributes;
}

/**
 * Object describing the catalogs retail items batch
 * @export
 */
export type CatalogsRetailItemsBatch = {
    /**
     * Id of the catalogs items batch
     * @type {string}
     * @memberof CatalogsRetailItemsBatch
     */
    batch_id?: string;
    /**
     * Time of the batch creation: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsRetailItemsBatch
     */
    created_time?: Date;
    /**
     * Time of the batch completion: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsRetailItemsBatch
     */
    completed_time?: Date;
    /**
     * 
     * @type {BatchOperationStatus}
     * @memberof CatalogsRetailItemsBatch
     */
    status?: BatchOperationStatus;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailItemsBatch
     */
    catalog_type: CatalogsType;
    /**
     * Array with the catalogs items processing records part of the catalogs items batch
     * @type {Array<ItemProcessingRecord>}
     * @memberof CatalogsRetailItemsBatch
     */
    items?: Array<ItemProcessingRecord>;
}


            export type CatalogsRetailItemsFilterCatalogTypeEnum = 'RETAIL';
/**
 * 
 * @export
 */
export type CatalogsRetailItemsFilter = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailItemsFilter
     */
    catalog_type: CatalogsRetailItemsFilterCatalogTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsRetailItemsFilter
     */
    item_ids: Array<string>;
    /**
     * Catalog id pertaining to the retail item. If not provided, default to oldest retail catalog
     * @type {string}
     * @memberof CatalogsRetailItemsFilter
     */
    catalog_id?: string;
}


            export type CatalogsRetailProductGroupCatalogTypeEnum = 'RETAIL';

            export type CatalogsRetailProductGroupFeedIdEnum = 'null';
/**
 * 
 * @export
 */
export type CatalogsRetailProductGroup = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroup
     */
    catalog_type: CatalogsRetailProductGroupCatalogTypeEnum;
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsRetailProductGroup
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsRetailProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroup
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsRetailProductGroup
     */
    filters: CatalogsProductGroupFilters;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsRetailProductGroup
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsRetailProductGroup
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsRetailProductGroup
     */
    status?: CatalogsProductGroupStatus;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsRetailProductGroup
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsRetailProductGroup
     */
    updated_at?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailProductGroup
     */
    feed_id: CatalogsRetailProductGroupFeedIdEnum;
}

/**
 * Status for catalogs entities. Present in catalogs_feed values. When a feed is deleted, the response will inform DELETED as status.
 * @export
 * @enum {string}
 */
export type CatalogsStatus = 'ACTIVE' | 'INACTIVE';

/**
 * Type of the catalog entity.
 * @export
 * @enum {string}
 */
export type CatalogsType = 'RETAIL' | 'HOTEL';

/**
 * 
 * @export
 */
export type CatalogsUpdatableHotelAttributes = {
    /**
     * The hotel\'s name.
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    name?: string;
    /**
     * Link to the product page
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    link?: string;
    /**
     * Brief description of the hotel.
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    description?: string;
    /**
     * The brand to which this hotel belongs to.
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    brand?: string;
    /**
     * Latitude of the hotel.
     * @type {number}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    latitude?: number;
    /**
     * Longitude of the hotel.
     * @type {number}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    longitude?: number;
    /**
     * A list of neighborhoods where the hotel is located
     * @type {Array<string>}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    neighborhood?: Array<string>;
    /**
     * 
     * @type {CatalogsHotelAddress}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    address?: CatalogsHotelAddress;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    custom_label_0?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    custom_label_1?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    custom_label_2?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    custom_label_3?: string;
    /**
     * Custom grouping of hotels
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    custom_label_4?: string;
    /**
     * The type of property. The category can be any type of internal description desired.
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    category?: string;
    /**
     * Base price of the hotel room per night followed by the ISO currency code
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    base_price?: string;
    /**
     * Sale price of a hotel room per night. Used to advertise discounts off the regular price of the hotel.
     * @type {string}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    sale_price?: string;
    /**
     * 
     * @type {CatalogsHotelGuestRatings}
     * @memberof CatalogsUpdatableHotelAttributes
     */
    guest_ratings?: CatalogsHotelGuestRatings;
}


            export type CatalogsUpdateHotelItemOperationEnum = 'UPDATE';
/**
 * Object describing an hotel item batch record
 * @export
 */
export type CatalogsUpdateHotelItem = {
    /**
     * The catalog hotel item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsUpdateHotelItem
     */
    hotel_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsUpdateHotelItem
     */
    operation: CatalogsUpdateHotelItemOperationEnum;
    /**
     * 
     * @type {CatalogsUpdatableHotelAttributes}
     * @memberof CatalogsUpdateHotelItem
     */
    attributes: CatalogsUpdatableHotelAttributes;
}


            export type CatalogsUpdateRetailItemOperationEnum = 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
/**
 * An item to be updated
 * @export
 */
export type CatalogsUpdateRetailItem = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsUpdateRetailItem
     */
    item_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsUpdateRetailItem
     */
    operation: CatalogsUpdateRetailItemOperationEnum;
    /**
     * 
     * @type {UpdatableItemAttributes}
     * @memberof CatalogsUpdateRetailItem
     */
    attributes: UpdatableItemAttributes;
    /**
     * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
     * @type {Array<UpdateMaskFieldType>}
     * @memberof CatalogsUpdateRetailItem
     */
    update_mask?: Array<UpdateMaskFieldType>;
}


            export type CatalogsUpsertHotelItemOperationEnum = 'UPSERT';
/**
 * A hotel item to be upserted.
 * @export
 */
export type CatalogsUpsertHotelItem = {
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof CatalogsUpsertHotelItem
     */
    hotel_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsUpsertHotelItem
     */
    operation: CatalogsUpsertHotelItemOperationEnum;
    /**
     * 
     * @type {CatalogsHotelAttributes}
     * @memberof CatalogsUpsertHotelItem
     */
    attributes: CatalogsHotelAttributes;
}


            export type CatalogsUpsertRetailItemOperationEnum = 'CREATE' | 'UPDATE' | 'UPSERT' | 'DELETE';
/**
 * An item to be upserted
 * @export
 */
export type CatalogsUpsertRetailItem = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsUpsertRetailItem
     */
    item_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsUpsertRetailItem
     */
    operation: CatalogsUpsertRetailItemOperationEnum;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof CatalogsUpsertRetailItem
     */
    attributes: ItemAttributes;
}

/**
 * A request object that can have multiple operations on a single batch
 * @export
 */
export type CatalogsVerticalBatchRequest = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsVerticalBatchRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsVerticalBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsVerticalBatchRequest
     */
    language: Language;
    /**
     * Array with catalogs item operations
     * @type {Array<CatalogsHotelBatchItem>}
     * @memberof CatalogsVerticalBatchRequest
     */
    items: Array<CatalogsHotelBatchItem>;
    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @type {string}
     * @memberof CatalogsVerticalBatchRequest
     */
    catalog_id?: string;
}

/**
 * Request object for creating a feed.
 * @export
 */
export type CatalogsVerticalFeedsCreateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedsCreateRequestDefaultLocale}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    default_locale: CatalogsFeedsCreateRequestDefaultLocale;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    default_country: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    default_availability?: ProductAvailabilityType;
    /**
     * Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. At the moment a catalog can not have multiple hotel feeds but this will change in the future.
     * @type {string}
     * @memberof CatalogsVerticalFeedsCreateRequest
     */
    catalog_id?: string;
}

/**
 * Request object for updating a feed.
 * @export
 */
export type CatalogsVerticalFeedsUpdateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    format?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    status?: CatalogsStatus;
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    catalog_type: CatalogsType;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsVerticalFeedsUpdateRequest
     */
    default_availability?: ProductAvailabilityType;
}


            export type CatalogsVerticalProductGroupCatalogTypeEnum = 'RETAIL';

            export type CatalogsVerticalProductGroupFeedIdEnum = 'null';
/**
 * 
 * @export
 */
export type CatalogsVerticalProductGroup = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroup
     */
    catalog_type: CatalogsVerticalProductGroupCatalogTypeEnum;
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsVerticalProductGroup
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsVerticalProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroup
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsVerticalProductGroup
     */
    filters: CatalogsProductGroupFilters;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsVerticalProductGroup
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsVerticalProductGroup
     */
    updated_at?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroup
     */
    catalog_id: string;
    /**
     * boolean indicator of whether the product group is being featured or not
     * @type {boolean}
     * @memberof CatalogsVerticalProductGroup
     */
    is_featured?: boolean;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsVerticalProductGroup
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsVerticalProductGroup
     */
    status?: CatalogsProductGroupStatus;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroup
     */
    feed_id: CatalogsVerticalProductGroupFeedIdEnum;
}


            export type CatalogsVerticalProductGroupCreateRequestCatalogTypeEnum = 'HOTEL';
/**
 * Request object for creating a hotel product group.
 * @export
 */
export type CatalogsVerticalProductGroupCreateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroupCreateRequest
     */
    catalog_type: CatalogsVerticalProductGroupCreateRequestCatalogTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroupCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroupCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsHotelProductGroupFilters}
     * @memberof CatalogsVerticalProductGroupCreateRequest
     */
    filters: CatalogsHotelProductGroupFilters;
    /**
     * Catalog id pertaining to the hotel product group.
     * @type {string}
     * @memberof CatalogsVerticalProductGroupCreateRequest
     */
    catalog_id: string;
}


            export type CatalogsVerticalProductGroupUpdateRequestCatalogTypeEnum = 'HOTEL';
/**
 * Request object for updating a hotel product group.
 * @export
 */
export type CatalogsVerticalProductGroupUpdateRequest = {
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroupUpdateRequest
     */
    catalog_type?: CatalogsVerticalProductGroupUpdateRequestCatalogTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroupUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsVerticalProductGroupUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsHotelProductGroupFilters}
     * @memberof CatalogsVerticalProductGroupUpdateRequest
     */
    filters?: CatalogsHotelProductGroupFilters;
}

/**
 * 
 * @export
 */
export type ConditionFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ConditionFilter
     */
    CONDITION: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * Schema describing the object in the response, which contains information about the events that were received and processed.
 * @export
 */
export type ConversionApiResponse = {
    /**
     * Total number of events received in the request.
     * @type {number}
     * @memberof ConversionApiResponse
     */
    num_events_received: number;
    /**
     * Number of events that were successfully processed from the events.
     * @type {number}
     * @memberof ConversionApiResponse
     */
    num_events_processed: number;
    /**
     * Specific messages for each event received. The order will match the order in which the events were received in the request.
     * @type {Array<ConversionApiResponseEventsInner>}
     * @memberof ConversionApiResponse
     */
    events: Array<ConversionApiResponseEventsInner>;
}


            export type ConversionApiResponseEventsInnerStatusEnum = 'failed' | 'processed';
/**
 * 
 * @export
 */
export type ConversionApiResponseEventsInner = {
    /**
     * Whether the event was processed successfully.
     * @type {string}
     * @memberof ConversionApiResponseEventsInner
     */
    status: ConversionApiResponseEventsInnerStatusEnum;
    /**
     * Error message containing more information about why the event failed to be processed.
     * @type {string}
     * @memberof ConversionApiResponseEventsInner
     */
    error_message?: string;
    /**
     * Warning messages about any fields in the event which are not standard. These are not critical to event processing.
     * @type {string}
     * @memberof ConversionApiResponseEventsInner
     */
    warning_message?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type ConversionAttributionWindowDays = 0 | 1 | 7 | 14 | 30 | 60;

/**
 * 
 * @export
 */
export type ConversionEventResponse = {
    /**
     * 
     * @type {ConversionTagType}
     * @memberof ConversionEventResponse
     */
    conversion_event?: ConversionTagType;
    /**
     * Id of the tag.
     * @type {string}
     * @memberof ConversionEventResponse
     */
    conversion_tag_id?: string;
    /**
     * Id of the ad account.
     * @type {string}
     * @memberof ConversionEventResponse
     */
    ad_account_id?: string;
    /**
     * Creation date in epoch format.
     * @type {number}
     * @memberof ConversionEventResponse
     */
    created_time?: number;
}

/**
 * A list of events (one or more) encapsulated by a data object.
 * @export
 */
export type ConversionEvents = {
    /**
     * 
     * @type {Array<ConversionEventsDataInner>}
     * @memberof ConversionEvents
     */
    data: Array<ConversionEventsDataInner>;
}

/**
 * 
 * @export
 */
export type ConversionEventsDataInner = {
    /**
     * The type of the user event. Please use the right event_name otherwise the event won’t be accepted and show up correctly in reports. <li><code>add_to_cart</code> <li><code>checkout</code> <li><code>custom</code> <li><code>lead</code> <li><code>page_visit</code> <li><code>search</code> <li><code>signup</code> <li><code>view_category</code> <li><code>watch_video</code>
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    event_name: string;
    /**
     * The source indicating where the conversion event occurred. <li><code>app_android</code> <li><code>app_ios</code> <li><code>web</code> <li><code>offline</code>
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    action_source: string;
    /**
     * The time when the event happened. Unix timestamp in seconds.
     * @type {number}
     * @memberof ConversionEventsDataInner
     */
    event_time: number;
    /**
     * A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event\'s data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    event_id: string;
    /**
     * URL of the web conversion event.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    event_source_url?: string;
    /**
     * When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
     * @type {boolean}
     * @memberof ConversionEventsDataInner
     */
    opt_out?: boolean;
    /**
     * The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is \"ss-partnername\" lowercase. E.g ‘ss-shopify’
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    partner_name?: string;
    /**
     * 
     * @type {ConversionEventsUserData}
     * @memberof ConversionEventsDataInner
     */
    user_data: ConversionEventsUserData;
    /**
     * 
     * @type {ConversionEventsDataInnerCustomData}
     * @memberof ConversionEventsDataInner
     */
    custom_data?: ConversionEventsDataInnerCustomData;
    /**
     * The app store app ID.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    app_id?: string;
    /**
     * Name of the app.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    app_name?: string;
    /**
     * Version of the app.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    app_version?: string;
    /**
     * Brand of the user device.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    device_brand?: string;
    /**
     * User device\'s mobile carrier.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    device_carrier?: string;
    /**
     * Model of the user device.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    device_model?: string;
    /**
     * Type of the user device.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    device_type?: string;
    /**
     * Version of the device operating system.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    os_version?: string;
    /**
     * Whether the event occurred when the user device was connected to wifi.
     * @type {boolean}
     * @memberof ConversionEventsDataInner
     */
    wifi?: boolean;
    /**
     * Two-character ISO-639-1 language code indicating the user\'s language.
     * @type {string}
     * @memberof ConversionEventsDataInner
     */
    language?: string;
}

/**
 * Object containing other custom data.
 * @export
 */
export type ConversionEventsDataInnerCustomData = {
    /**
     * The ISO-4217 currency code. If not provided, we will default to the advertiser\'s currency set during account creation. Your campaign performance needs this field to report right ROAS/CPA.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    currency?: string;
    /**
     * Total value of the event. Accepted as a string in the request; it will be parsed into a double. For example, if there are two items in a checkout event, the value should be the total price. We recommend to use pre-tax, pre-shipping final value.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    value?: string;
    /**
     * List of products IDs. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check <a href=\"https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\" target=\"_blank\">here</a> (Install the Pinterest tag section).
     * @type {Array<string>}
     * @memberof ConversionEventsDataInnerCustomData
     */
    content_ids?: Array<string>;
    /**
     * The name of the page or product associated with the event.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    content_name?: string;
    /**
     * The category of the content associated with the event.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    content_category?: string;
    /**
     * The brand of the content associated with the event.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    content_brand?: string;
    /**
     * A list of objects containing information about products, such as price and quantity. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check <a href=\"https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\" target=\"_blank\">here</a> (Install the Pinterest tag section).
     * @type {Array<ConversionEventsDataInnerCustomDataContentsInner>}
     * @memberof ConversionEventsDataInnerCustomData
     */
    contents?: Array<ConversionEventsDataInnerCustomDataContentsInner>;
    /**
     * Total number of products of the event. For example, the total number of items purchased in a checkout event. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check <a href=\"https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\" target=\"_blank\">here</a> (Install the Pinterest tag section).
     * @type {number}
     * @memberof ConversionEventsDataInnerCustomData
     */
    num_items?: number;
    /**
     * The order ID. We recommend sending order_id to help us deduplicate events when necessary. This also helps to run other measurement products at Pinterest.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    order_id?: string;
    /**
     * The search string related to the user conversion event.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    search_string?: string;
    /**
     * Flags for different privacy rights laws to opt out users of sharing personal information. Values should be comma separated. Please follow the <a href=\"https://help.pinterest.com/en/business/article/limited-data-processing\" target=\"_blank\">Help Center</a> and <a href=\"https://developers.pinterest.com/docs/conversions/conversion-management/#Understanding%20Limited%20Data%20Processing\" target=\"_blank\">dev site</a> for specific opt_out_type set up.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    opt_out_type?: string;
    /**
     * Named partner. Not required, this is for Pinterest internal use only. Please do not use this unless specifically guided.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomData
     */
    np?: string;
}

/**
 * 
 * @export
 */
export type ConversionEventsDataInnerCustomDataContentsInner = {
    /**
     * The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check <a href=\"https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\" target=\"_blank\">here</a> (Install the Pinterest tag section).
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomDataContentsInner
     */
    id?: string;
    /**
     * The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check <a href=\"https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\" target=\"_blank\">here</a> (Install the Pinterest tag section).
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomDataContentsInner
     */
    item_price?: string;
    /**
     * The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check <a href=\"https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\" target=\"_blank\">here</a> (Install the Pinterest tag section).
     * @type {number}
     * @memberof ConversionEventsDataInnerCustomDataContentsInner
     */
    quantity?: number;
    /**
     * The name of a product.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomDataContentsInner
     */
    item_name?: string;
    /**
     * The category of a product.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomDataContentsInner
     */
    item_category?: string;
    /**
     * The brand of a product.
     * @type {string}
     * @memberof ConversionEventsDataInnerCustomDataContentsInner
     */
    item_brand?: string;
}

/**
 * Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
 * @export
 */
export type ConversionEventsUserData = {
    /**
     * Sha256 hashes of user\'s phone numbers, only digits with country code, area code, and number. Remove any symbols, letters, spaces and leading zeros. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ph?: Array<string>;
    /**
     * Sha256 hashes of user\'s gender, in lowercase. Either \"f\" or \"m\" or \"n\" for non-binary gender.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ge?: Array<string>;
    /**
     * Sha256 hashes of user\'s date of birthday, given as year, month, and day.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    db?: Array<string>;
    /**
     * Sha256 hashes of user\'s last name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ln?: Array<string>;
    /**
     * Sha256 hashes of user\'s first name, in lowercase. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    fn?: Array<string>;
    /**
     * Sha256 hashes of user\'s city, in lowercase, and without spaces or punctuation. User residency city (mostly billing).
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    ct?: Array<string>;
    /**
     * Sha256 hashes of user\'s state, given as a two-letter code in lowercase. User residency state (mostly billing).
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    st?: Array<string>;
    /**
     * Sha256 hashes of user\'s zipcode, only digits. User residency zipcode (mostly billing).
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    zp?: Array<string>;
    /**
     * Sha256 hashes of two-character ISO-3166 country code indicating the user\'s country, in lowercase.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    country?: Array<string>;
    /**
     * Sha256 hashes of the unique id from the advertiser that identifies a user in their space, e.g. user id, loyalty id, etc. We highly recommend this on all events. It may improve reporting performance such as ROAS/CPA.
     * @type {Array<string>}
     * @memberof ConversionEventsUserData
     */
    external_id?: Array<string>;
    /**
     * The unique identifier stored in _epik cookie on your domain or &epik= query parameter in the URL. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA.
     * @type {string}
     * @memberof ConversionEventsUserData
     */
    click_id?: string;
    /**
     * A unique identifier of visitors\' information defined by third party partners. e.g RampID
     * @type {string}
     * @memberof ConversionEventsUserData
     */
    partner_id?: string;
}

/**
 * Attribution type. Refers to the Pinterest Tag endpoints
 * @export
 * @enum {string}
 */
export type ConversionReportAttributionType = 'INDIVIDUAL' | 'HOUSEHOLD';

/**
 * Conversion report time type
 * @export
 * @enum {string}
 */
export type ConversionReportTimeType = 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';

/**
 * 
 * @export
 */
export type ConversionTagCommon = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof ConversionTagCommon
     */
    ad_account_id?: string;
    /**
     * Tag code snippet.
     * @type {string}
     * @memberof ConversionTagCommon
     */
    code_snippet?: string;
    /**
     * 
     * @type {EnhancedMatchStatusType}
     * @memberof ConversionTagCommon
     */
    enhanced_match_status?: EnhancedMatchStatusType;
    /**
     * Tag ID.
     * @type {string}
     * @memberof ConversionTagCommon
     */
    id?: string;
    /**
     * Time for the last event fired.
     * @type {number}
     * @memberof ConversionTagCommon
     */
    last_fired_time_ms?: number;
    /**
     * Conversion tag name.
     * @type {string}
     * @memberof ConversionTagCommon
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof ConversionTagCommon
     */
    status?: EntityStatus;
    /**
     * Version number.
     * @type {string}
     * @memberof ConversionTagCommon
     */
    version?: string;
    /**
     * 
     * @type {ConversionTagConfigs}
     * @memberof ConversionTagCommon
     */
    configs?: ConversionTagConfigs;
}

/**
 * 
 * @export
 */
export type ConversionTagConfigs = {
    /**
     * Whether Automatic Enhanced Match email is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagConfigs
     */
    aem_enabled?: boolean;
    /**
     * Metadata ingestion frequency.
     * @type {number}
     * @memberof ConversionTagConfigs
     */
    md_frequency?: number;
    /**
     * Whether Automatic Enhanced Match name is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagConfigs
     */
    aem_fnln_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match phone is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagConfigs
     */
    aem_ph_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match gender is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagConfigs
     */
    aem_ge_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match birthdate is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagConfigs
     */
    aem_db_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match location is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagConfigs
     */
    aem_loc_enabled?: boolean;
}

/**
 * 
 * @export
 */
export type ConversionTagCreate = {
    /**
     * Conversion tag name.
     * @type {string}
     * @memberof ConversionTagCreate
     */
    name: string;
    /**
     * Whether Automatic Enhanced Match email is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagCreate
     */
    aem_enabled?: boolean;
    /**
     * Metadata ingestion frequency.
     * @type {number}
     * @memberof ConversionTagCreate
     */
    md_frequency?: number;
    /**
     * Whether Automatic Enhanced Match name is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagCreate
     */
    aem_fnln_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match phone is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagCreate
     */
    aem_ph_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match gender is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagCreate
     */
    aem_ge_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match birthdate is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagCreate
     */
    aem_db_enabled?: boolean;
    /**
     * Whether Automatic Enhanced Match location is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
     * @type {boolean}
     * @memberof ConversionTagCreate
     */
    aem_loc_enabled?: boolean;
}

/**
 * 
 * @export
 */
export type ConversionTagListResponse = {
    /**
     * 
     * @type {Array<ConversionTagResponse>}
     * @memberof ConversionTagListResponse
     */
    items?: Array<ConversionTagResponse>;
}

/**
 * 
 * @export
 */
export type ConversionTagResponse = {
    /**
     * Ad account ID.
     * @type {string}
     * @memberof ConversionTagResponse
     */
    ad_account_id?: string;
    /**
     * Tag code snippet.
     * @type {string}
     * @memberof ConversionTagResponse
     */
    code_snippet?: string;
    /**
     * 
     * @type {EnhancedMatchStatusType}
     * @memberof ConversionTagResponse
     */
    enhanced_match_status?: EnhancedMatchStatusType;
    /**
     * Tag ID.
     * @type {string}
     * @memberof ConversionTagResponse
     */
    id?: string;
    /**
     * Time for the last event fired.
     * @type {number}
     * @memberof ConversionTagResponse
     */
    last_fired_time_ms?: number;
    /**
     * Conversion tag name.
     * @type {string}
     * @memberof ConversionTagResponse
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof ConversionTagResponse
     */
    status?: EntityStatus;
    /**
     * Version number.
     * @type {string}
     * @memberof ConversionTagResponse
     */
    version?: string;
    /**
     * 
     * @type {ConversionTagConfigs}
     * @memberof ConversionTagResponse
     */
    configs?: ConversionTagConfigs;
}

/**
 * conversion tag type
 * @export
 * @enum {string}
 */
export type ConversionTagType = 'PAGE_LOAD' | 'UNKNOWN' | 'INITIALIZED' | 'PAGE_VISIT' | 'SIGNUP' | 'CHECKOUT' | 'CUSTOM' | 'VIEW_CATEGORY' | 'SEARCH' | 'ADD_TO_CART' | 'WATCH_VIDEO' | 'LEAD' | 'APP_INSTALL' | 'WEB_SESSION' | 'EXTERNAL_MEASUREMENT';

/**
 * Country ID from ISO 3166-1 alpha-2.
 * @export
 * @enum {string}
 */
export type Country = 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AS' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FM' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MH' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MP' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PW' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VI' | 'VN' | 'VU' | 'WF' | 'WS' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW';

/**
 * 
 * @export
 */
export type CountryFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleCountriesCriteria}
     * @memberof CountryFilter
     */
    COUNTRY: CatalogsProductGroupMultipleCountriesCriteria;
}


            export type CreateMMMReportRequestGranularityEnum = 'DAY' | 'WEEK';

            export type CreateMMMReportRequestLevelEnum = 'CAMPAIGN_TARGETING' | 'AD_GROUP_TARGETING';
/**
 * 
 * @export
 */
export type CreateMMMReportRequest = {
    /**
     * Name of the Marketing Mix Modeling (MMM) report
     * @type {string}
     * @memberof CreateMMMReportRequest
     */
    report_name: string;
    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof CreateMMMReportRequest
     */
    start_date: string;
    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof CreateMMMReportRequest
     */
    end_date: string;
    /**
     * DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
     * @type {string}
     * @memberof CreateMMMReportRequest
     */
    granularity: CreateMMMReportRequestGranularityEnum;
    /**
     * Level of the report
     * @type {string}
     * @memberof CreateMMMReportRequest
     */
    level: CreateMMMReportRequestLevelEnum;
    /**
     * List of targeting types
     * @type {Array<MMMReportingTargetingType>}
     * @memberof CreateMMMReportRequest
     */
    targeting_types: Array<MMMReportingTargetingType>;
    /**
     * Metric and entity columns
     * @type {Array<MMMReportingColumn>}
     * @memberof CreateMMMReportRequest
     */
    columns: Array<MMMReportingColumn>;
    /**
     * A List of countries for filtering
     * @type {Array<TargetingAdvertiserCountry>}
     * @memberof CreateMMMReportRequest
     */
    countries?: Array<TargetingAdvertiserCountry>;
}

/**
 * 
 * @export
 */
export type CreateMMMReportResponse = {
    /**
     * 
     * @type {number}
     * @memberof CreateMMMReportResponse
     */
    code?: number;
    /**
     * 
     * @type {CreateMMMReportResponseData}
     * @memberof CreateMMMReportResponse
     */
    data?: CreateMMMReportResponseData;
}

/**
 * 
 * @export
 */
export type CreateMMMReportResponseData = {
    /**
     * 
     * @type {BulkReportingJobStatus}
     * @memberof CreateMMMReportResponseData
     */
    report_status?: BulkReportingJobStatus;
    /**
     * 
     * @type {string}
     * @memberof CreateMMMReportResponseData
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMMMReportResponseData
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMMMReportResponseData
     */
    status?: string;
}

/**
 * Ad creative type enum. For update, only draft ads may update creative type. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
 * @export
 * @enum {string}
 */
export type CreativeType = 'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA' | 'SHOWCASE' | 'QUIZ';

/**
 * Currency Codes from ISO 4217
 * @export
 * @enum {string}
 */
export type Currency = 'UNK' | 'USD' | 'GBP' | 'CAD' | 'EUR' | 'AUD' | 'NZD' | 'SEK' | 'ILS' | 'CHF' | 'HKD' | 'JPY' | 'SGD' | 'KRW' | 'NOK' | 'DKK' | 'PLN' | 'RON' | 'HUF' | 'CZK' | 'BRL' | 'MXN' | 'ARS' | 'CLP' | 'COP';

/**
 * 
 * @export
 */
export type CurrencyFilter = {
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CurrencyFilter
     */
    CURRENCY: CatalogsProductGroupCurrencyCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel0Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel0Filter
     */
    CUSTOM_LABEL_0: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel1Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel1Filter
     */
    CUSTOM_LABEL_1: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel2Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel2Filter
     */
    CUSTOM_LABEL_2: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel3Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel3Filter
     */
    CUSTOM_LABEL_3: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel4Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel4Filter
     */
    CUSTOM_LABEL_4: CatalogsProductGroupMultipleStringCriteria;
}


            export type CustomerListStatusEnum = 'PROCESSING' | 'READY' | 'TOO_SMALL' | 'UPLOADING';
/**
 * 
 * @export
 */
export type CustomerList = {
    /**
     * Associated ad account ID.
     * @type {string}
     * @memberof CustomerList
     */
    ad_account_id?: string;
    /**
     * Creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CustomerList
     */
    created_time?: number;
    /**
     * Customer list ID.
     * @type {string}
     * @memberof CustomerList
     */
    id?: string;
    /**
     * Customer list name.
     * @type {string}
     * @memberof CustomerList
     */
    name?: string;
    /**
     * Total number of list updates.  List creation counts as one batch. Each <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append</a> or <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.
     * @type {number}
     * @memberof CustomerList
     */
    num_batches?: number;
    /**
     * Number of removed user records. In a <a href=\"/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT\">Remove API</a> call, this counter increases even if the user is not found in the list.
     * @type {number}
     * @memberof CustomerList
     */
    num_removed_user_records?: number;
    /**
     * Number of uploaded user records. In an <a href=\"/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT\">Append API</a> call, this counter increases even if the uploaded user is already in the list.
     * @type {number}
     * @memberof CustomerList
     */
    num_uploaded_user_records?: number;
    /**
     * Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
     * @type {string}
     * @memberof CustomerList
     */
    status?: CustomerListStatusEnum;
    /**
     * Always \"customerlist\".
     * @type {string}
     * @memberof CustomerList
     */
    type?: string;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CustomerList
     */
    updated_time?: number;
    /**
     * Customer list errors
     * @type {Object}
     * @memberof CustomerList
     */
    exceptions?: Object;
}

/**
 * 
 * @export
 */
export type CustomerListRequest = {
    /**
     * Customer list name.
     * @type {string}
     * @memberof CustomerListRequest
     */
    name: string;
    /**
     * Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
     * @type {string}
     * @memberof CustomerListRequest
     */
    records: string;
    /**
     * 
     * @type {UserListType}
     * @memberof CustomerListRequest
     */
    list_type?: UserListType;
    /**
     * Customer list errors.
     * @type {Object}
     * @memberof CustomerListRequest
     */
    exceptions?: Object;
}

/**
 * 
 * @export
 */
export type CustomerListUpdateRequest = {
    /**
     * Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
     * @type {string}
     * @memberof CustomerListUpdateRequest
     */
    records: string;
    /**
     * 
     * @type {UserListOperationType}
     * @memberof CustomerListUpdateRequest
     */
    operation_type: UserListOperationType;
    /**
     * 
     * @type {Exception}
     * @memberof CustomerListUpdateRequest
     */
    exceptions?: Exception;
}

/**
 * 
 * @export
 */
export type CustomerListsList200Response = {
    /**
     * 
     * @type {Array<CustomerList>}
     * @memberof CustomerListsList200Response
     */
    items: Array<CustomerList>;
    /**
     * 
     * @type {string}
     * @memberof CustomerListsList200Response
     */
    bookmark?: string;
}

/**
 * Format of generated report
 * @export
 * @enum {string}
 */
export type DataOutputFormat = 'JSON' | 'CSV';

/**
 * Metrics availablity, e.g., \"READY\".
 * @export
 * @enum {string}
 */
export type DataStatus = 'PROCESSING' | 'READY' | 'ESTIMATE' | 'BEFORE_BUSINESS_CREATED' | 'BEFORE_DATA_RETENTION_PERIOD' | 'BEFORE_PIN_DATA_RETENTION_PERIOD' | 'BEFORE_METRIC_START_DATE' | 'BEFORE_CORE_METRIC_START_DATE' | 'BEFORE_PIN_FORMAT_METRIC_START_DATE' | 'BEFORE_AUDIENCE_METRIC_START_DATE' | 'BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE' | 'BEFORE_VIDEO_METRIC_START_DATE' | 'BEFORE_CONVERSION_METRIC_START_DATE' | 'PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD' | 'IN_BAD_TAG_DATE' | 'BEFORE_PUBLISHED_METRIC_START_DATE' | 'BEFORE_ASSIST_METRIC_START_DATE' | 'BEFORE_PIN_CREATED' | 'BEFORE_ACCOUNT_CLAIMED' | 'BEFORE_DEMOGRAPHIC_FILTERS_START_DATE' | 'AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD' | 'AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD' | 'BEFORE_PRODUCT_GROUP_FILTER_START_DATE';

/**
 * 
 * @export
 */
export type DeliveryMetricsResponse = {
    /**
     * 
     * @type {Array<DeliveryMetricsResponseItemsInner>}
     * @memberof DeliveryMetricsResponse
     */
    items?: Array<DeliveryMetricsResponseItemsInner>;
}


            export type DeliveryMetricsResponseItemsInnerCategoryEnum = 'ADS' | 'ORGANIC';
/**
 * 
 * @export
 */
export type DeliveryMetricsResponseItemsInner = {
    /**
     * Metric\'s name.
     * @type {string}
     * @memberof DeliveryMetricsResponseItemsInner
     */
    name?: string;
    /**
     * Category name
     * @type {string}
     * @memberof DeliveryMetricsResponseItemsInner
     */
    category?: DeliveryMetricsResponseItemsInnerCategoryEnum;
    /**
     * How the metric is defined.
     * @type {string}
     * @memberof DeliveryMetricsResponseItemsInner
     */
    definition?: string;
    /**
     * Display name, when available. If unavaible it will not be returned. Matches how the metric is named in our native tools like Pinterest Ads Manager.
     * @type {string}
     * @memberof DeliveryMetricsResponseItemsInner
     */
    display_name?: string;
}

/**
 * Used for including extra details to a base error
 * @export
 */
export type DetailedError = {
    /**
     * 
     * @type {number}
     * @memberof DetailedError
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof DetailedError
     */
    message: string;
    /**
     * 
     * @type {Object}
     * @memberof DetailedError
     */
    details: Object;
}

/**
 * The enhanced match status of the tag
 * @export
 * @enum {string}
 */
export type EnhancedMatchStatusType = 'UNKNOWN' | 'NOT_VALIDATED' | 'VALIDATING_IN_PROGRESS' | 'VALIDATION_COMPLETE' | 'null';

/**
 * Entity status
 * @export
 * @enum {string}
 */
export type EntityStatus = 'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT';

/**
 * 
 * @export
 */
export type Error = {
    /**
     * 
     * @type {number}
     * @memberof Error
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    message: string;
}

/**
 * 
 * @export
 */
export type Exception = {
    /**
     * Exception error code.
     * @type {number}
     * @memberof Exception
     */
    code?: number;
    /**
     * Exception message.
     * @type {string}
     * @memberof Exception
     */
    message?: string;
}

/**
 * 
 * @export
 */
export type FeedProcessingResultsList200Response = {
    /**
     * 
     * @type {Array<CatalogsFeedProcessingResult>}
     * @memberof FeedProcessingResultsList200Response
     */
    items: Array<CatalogsFeedProcessingResult>;
    /**
     * 
     * @type {string}
     * @memberof FeedProcessingResultsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type FeedsCreateRequest = {
    /**
     * 
     * @type {NullableCurrency}
     * @memberof FeedsCreateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof FeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof FeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedsCreateRequestDefaultLocale}
     * @memberof FeedsCreateRequest
     */
    default_locale?: CatalogsFeedsCreateRequestDefaultLocale;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof FeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof FeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof FeedsCreateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {Country}
     * @memberof FeedsCreateRequest
     */
    default_country?: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof FeedsCreateRequest
     */
    default_availability?: ProductAvailabilityType;
}

/**
 * 
 * @export
 */
export type FeedsList200Response = {
    /**
     * 
     * @type {Array<CatalogsFeed>}
     * @memberof FeedsList200Response
     */
    items: Array<CatalogsFeed>;
    /**
     * 
     * @type {string}
     * @memberof FeedsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type FeedsUpdateRequest = {
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof FeedsUpdateRequest
     */
    default_availability?: ProductAvailabilityType;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof FeedsUpdateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof FeedsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof FeedsUpdateRequest
     */
    format?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof FeedsUpdateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof FeedsUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof FeedsUpdateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof FeedsUpdateRequest
     */
    status?: CatalogsStatus;
}

/**
 * 
 * @export
 */
export type FollowUserRequest = {
    /**
     * Whether this request comes as result of auto-follow after clicking on a link. Follow links can be used by partners on their site or in emails. Only selected partners can be followed this way. We verify that partner can be auto-followed.
     * @type {boolean}
     * @memberof FollowUserRequest
     */
    auto_follow?: boolean;
}

/**
 * 
 * @export
 */
export type FollowersList200Response = {
    /**
     * 
     * @type {Array<UserSummary>}
     * @memberof FollowersList200Response
     */
    items: Array<UserSummary>;
    /**
     * 
     * @type {string}
     * @memberof FollowersList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type Gender = 'FEMALE' | 'MALE' | 'UNISEX';

/**
 * 
 * @export
 */
export type GenderFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleGenderCriteria}
     * @memberof GenderFilter
     */
    GENDER: CatalogsProductGroupMultipleGenderCriteria;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type GetAudiencesOrderBy = 'NONE' | 'ID' | 'SIZE' | 'CREATION_DATE' | 'UPDATED_TIME' | 'NAME' | 'STATUS' | 'TYPE';

/**
 * 
 * @export
 */
export type GetMMMReportResponse = {
    /**
     * 
     * @type {number}
     * @memberof GetMMMReportResponse
     */
    code?: number;
    /**
     * 
     * @type {GetMMMReportResponseData}
     * @memberof GetMMMReportResponse
     */
    data?: GetMMMReportResponseData;
    /**
     * 
     * @type {string}
     * @memberof GetMMMReportResponse
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMMMReportResponse
     */
    status?: string;
}


            export type GetMMMReportResponseDataReportStatusEnum = 'DOES_NOT_EXIST' | 'FINISHED' | 'IN_PROGRESS' | 'EXPIRED' | 'FAILED' | 'CANCELLED';
/**
 * 
 * @export
 */
export type GetMMMReportResponseData = {
    /**
     * 
     * @type {string}
     * @memberof GetMMMReportResponseData
     */
    report_status?: GetMMMReportResponseDataReportStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof GetMMMReportResponseData
     */
    url?: string;
    /**
     * 
     * @type {number}
     * @memberof GetMMMReportResponseData
     */
    size?: number;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory0Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory0Filter
     */
    GOOGLE_PRODUCT_CATEGORY_0: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory1Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory1Filter
     */
    GOOGLE_PRODUCT_CATEGORY_1: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory2Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory2Filter
     */
    GOOGLE_PRODUCT_CATEGORY_2: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory3Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory3Filter
     */
    GOOGLE_PRODUCT_CATEGORY_3: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory4Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory4Filter
     */
    GOOGLE_PRODUCT_CATEGORY_4: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory5Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory5Filter
     */
    GOOGLE_PRODUCT_CATEGORY_5: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory6Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory6Filter
     */
    GOOGLE_PRODUCT_CATEGORY_6: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * Granularity
 * @export
 * @enum {string}
 */
export type Granularity = 'TOTAL' | 'DAY' | 'HOUR' | 'WEEK' | 'MONTH';

/**
 * Where a user is taken after clicking on an ad in grid.
 * @export
 * @enum {string}
 */
export type GridClickType = 'CLOSEUP' | 'DIRECT_TO_DESTINATION';

/**
 * 
 * @export
 */
export type HotelIdFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof HotelIdFilter
     */
    HOTEL_ID: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * Object describing an item processing record
 * @export
 */
export type HotelProcessingRecord = {
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof HotelProcessingRecord
     */
    hotel_id?: string;
    /**
     * Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
     * @type {Array<ItemValidationEvent>}
     * @memberof HotelProcessingRecord
     */
    errors?: Array<ItemValidationEvent>;
    /**
     * Array with the validation warnings for the item processing record
     * @type {Array<ItemValidationEvent>}
     * @memberof HotelProcessingRecord
     */
    warnings?: Array<ItemValidationEvent>;
    /**
     * 
     * @type {ItemProcessingStatus}
     * @memberof HotelProcessingRecord
     */
    status?: ItemProcessingStatus;
}

/**
 * 
 * @export
 */
export type ImageDetails = {
    /**
     * 
     * @type {number}
     * @memberof ImageDetails
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof ImageDetails
     */
    height: number;
    /**
     * 
     * @type {string}
     * @memberof ImageDetails
     */
    url: string;
}

/**
 * 
 * @export
 */
export type ImageMetadata = {
    /**
     * 
     * @type {string}
     * @memberof ImageMetadata
     */
    item_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageMetadata
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageMetadata
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageMetadata
     */
    link?: string;
    /**
     * 
     * @type {ImageMetadataImages}
     * @memberof ImageMetadata
     */
    images?: ImageMetadataImages;
}

/**
 * 
 * @export
 */
export type ImageMetadataImages = {
    /**
     * 
     * @type {ImageDetails}
     * @memberof ImageMetadataImages
     */
    _150x150?: ImageDetails;
    /**
     * 
     * @type {ImageDetails}
     * @memberof ImageMetadataImages
     */
    _400x300?: ImageDetails;
    /**
     * 
     * @type {ImageDetails}
     * @memberof ImageMetadataImages
     */
    _600x?: ImageDetails;
    /**
     * 
     * @type {ImageDetails}
     * @memberof ImageMetadataImages
     */
    _1200x?: ImageDetails;
}


            export type IntegrationLogEventTypeEnum = 'APP' | 'API';

            export type IntegrationLogLogLevelEnum = 'INFO' | 'WARN' | 'ERROR';
/**
 * Schema for log sent from an integration application.
 * @export
 */
export type IntegrationLog = {
    /**
     * Timestamp in milliseconds of when the log was executed at the client.
     * @type {number}
     * @memberof IntegrationLog
     */
    client_timestamp: number;
    /**
     * Log event type
     * @type {string}
     * @memberof IntegrationLog
     */
    event_type: IntegrationLogEventTypeEnum;
    /**
     * Log level type
     * @type {string}
     * @memberof IntegrationLog
     */
    log_level: IntegrationLogLogLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    external_business_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    advertiser_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    merchant_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    tag_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    feed_profile_id?: string;
    /**
     * Explanation of the event that occured.
     * @type {string}
     * @memberof IntegrationLog
     */
    message?: string;
    /**
     * Version number of the integration application.
     * @type {string}
     * @memberof IntegrationLog
     */
    app_version_number?: string;
    /**
     * Version number of the platform the integration application is running on.
     * @type {string}
     * @memberof IntegrationLog
     */
    platform_version_number?: string;
    /**
     * 
     * @type {IntegrationLogClientError}
     * @memberof IntegrationLog
     */
    error?: IntegrationLogClientError;
    /**
     * 
     * @type {IntegrationLogClientRequest}
     * @memberof IntegrationLog
     */
    request?: IntegrationLogClientRequest;
}

/**
 * System error details included in the log sent by the client.
 * @export
 */
export type IntegrationLogClientError = {
    /**
     * Original cause of the error.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    cause?: string;
    /**
     * Column number in the line of the file that raised the error.
     * @type {number}
     * @memberof IntegrationLogClientError
     */
    column_number?: number;
    /**
     * Filename where the error happened.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    file_name?: string;
    /**
     * Line number where the error happened.
     * @type {number}
     * @memberof IntegrationLogClientError
     */
    line_number?: number;
    /**
     * Human-readable description of the error.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    message?: string;
    /**
     * More detail about the message.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    message_detail?: string;
    /**
     * Filename where the error happened.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    name?: string;
    /**
     * Integer that specifies the error code.
     * @type {number}
     * @memberof IntegrationLogClientError
     */
    _number?: number;
    /**
     * Stack trace of where the error happened.
     * @type {string}
     * @memberof IntegrationLogClientError
     */
    stack_trace?: string;
}


            export type IntegrationLogClientRequestMethodEnum = 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'CONNECT' | 'OPTIONS' | 'TRACE' | 'PATCH';
/**
 * HTTP request details included in the log sent by the client.
 * @export
 */
export type IntegrationLogClientRequest = {
    /**
     * 
     * @type {string}
     * @memberof IntegrationLogClientRequest
     */
    method: IntegrationLogClientRequestMethodEnum;
    /**
     * HTTP request host from host header.
     * @type {string}
     * @memberof IntegrationLogClientRequest
     */
    host: string;
    /**
     * HTTP request path.
     * @type {string}
     * @memberof IntegrationLogClientRequest
     */
    path: string;
    /**
     * HTTP request headers as key-value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof IntegrationLogClientRequest
     */
    request_headers?: { [key: string]: string; };
    /**
     * HTTP response headers as key-value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof IntegrationLogClientRequest
     */
    response_headers?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof IntegrationLogClientRequest
     */
    response_status_code?: number;
}

/**
 * Schema describing the response when a log has invalid fields.
 * @export
 */
export type IntegrationLogsInvalidLogResponse = {
    /**
     * 
     * @type {Array<IntegrationLogsInvalidLogResponseRejectedLogsInner>}
     * @memberof IntegrationLogsInvalidLogResponse
     */
    rejected_logs?: Array<IntegrationLogsInvalidLogResponseRejectedLogsInner>;
}

/**
 * 
 * @export
 */
export type IntegrationLogsInvalidLogResponseRejectedLogsInner = {
    /**
     * Index of the log in the batch.
     * @type {number}
     * @memberof IntegrationLogsInvalidLogResponseRejectedLogsInner
     */
    log_index?: number;
    /**
     * The field name containing an invalid value.
     * @type {string}
     * @memberof IntegrationLogsInvalidLogResponseRejectedLogsInner
     */
    field: string;
    /**
     * The value that is invalid.
     * @type {string}
     * @memberof IntegrationLogsInvalidLogResponseRejectedLogsInner
     */
    value: string;
    /**
     * The reason the value is invalid.
     * @type {string}
     * @memberof IntegrationLogsInvalidLogResponseRejectedLogsInner
     */
    reason: string;
}

/**
 * Batch of logs sent from an integration application.
 * @export
 */
export type IntegrationLogsRequest = {
    /**
     * 
     * @type {Array<IntegrationLog>}
     * @memberof IntegrationLogsRequest
     */
    logs: Array<IntegrationLog>;
}

/**
 * Response when logs are successfully processed.
 * @export
 */
export type IntegrationLogsSuccessResponse = {
    /**
     * 
     * @type {string}
     * @memberof IntegrationLogsSuccessResponse
     */
    message?: string;
}

/**
 * Integration metadata
 * @export
 */
export type IntegrationMetadata = {
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    external_business_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    connected_merchant_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    connected_user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    connected_advertiser_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    connected_lba_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    connected_tag_id?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationMetadata
     */
    partner_access_token_expiry?: number;
    /**
     * 
     * @type {number}
     * @memberof IntegrationMetadata
     */
    partner_refresh_token_expiry?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    scopes?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationMetadata
     */
    created_timestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof IntegrationMetadata
     */
    updated_timestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    additional_id_1?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationMetadata
     */
    partner_metadata?: string;
}

/**
 * Integration record
 * @export
 */
export type IntegrationRecord = {
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    external_business_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    connected_merchant_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    connected_user_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    connected_advertiser_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    connected_lba_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    connected_tag_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    partner_access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    partner_refresh_token?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    partner_primary_email?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRecord
     */
    partner_access_token_expiry?: number;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRecord
     */
    partner_refresh_token_expiry?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    scopes?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    partner_metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRecord
     */
    additional_id_1?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRecord
     */
    created_time?: number;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRecord
     */
    updated_time?: number;
}

/**
 * Schema used for creating the integration metadata.
 * @export
 */
export type IntegrationRequest = {
    /**
     * External business ID for the integration.
     * @type {string}
     * @memberof IntegrationRequest
     */
    external_business_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    connected_merchant_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    connected_advertiser_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    connected_lba_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    connected_tag_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    partner_access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    partner_refresh_token?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    partner_primary_email?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRequest
     */
    partner_access_token_expiry?: number;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRequest
     */
    partner_refresh_token_expiry?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    scopes?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    additional_id_1?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequest
     */
    partner_metadata?: string;
}

/**
 * Schema used for updating the integration metadata.
 * @export
 */
export type IntegrationRequestPatch = {
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    connected_merchant_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    connected_advertiser_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    connected_lba_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    connected_tag_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    partner_access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    partner_refresh_token?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    partner_primary_email?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRequestPatch
     */
    partner_access_token_expiry?: number;
    /**
     * 
     * @type {number}
     * @memberof IntegrationRequestPatch
     */
    partner_refresh_token_expiry?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    scopes?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    additional_id_1?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationRequestPatch
     */
    partner_metadata?: string;
}

/**
 * 
 * @export
 */
export type IntegrationsGetList200Response = {
    /**
     * 
     * @type {Array<IntegrationRecord>}
     * @memberof IntegrationsGetList200Response
     */
    items: Array<IntegrationRecord>;
    /**
     * 
     * @type {string}
     * @memberof IntegrationsGetList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type Interest = {
    /**
     * 
     * @type {string}
     * @memberof Interest
     */
    canonical_url?: string;
    /**
     * 
     * @type {string}
     * @memberof Interest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Interest
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof Interest
     */
    name?: string;
}

/**
 * 
 * @export
 */
export type ItemAttributes = {
    /**
     * Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
     * @type {string}
     * @memberof ItemAttributes
     */
    ad_link?: string;
    /**
     * Set this attribute to TRUE if you\'re submitting items that are considered “adult”. These will not be shown on Pinterest.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    adult?: boolean;
    /**
     * The age group to apply a demographic range to the product. Must be one of the following values (upper or lowercased): ‘newborn’, ‘infant’, ‘toddler’, ‘kids’, or ‘adult’.
     * @type {string}
     * @memberof ItemAttributes
     */
    age_group?: string;
    /**
     * The availability of the product. Must be one of the following values (upper or lowercased): ‘in stock’, ‘out of stock’, ‘preorder’.
     * @type {string}
     * @memberof ItemAttributes
     */
    availability?: string;
    /**
     * Average reviews for the item. Can be a number from 1-5.
     * @type {number}
     * @memberof ItemAttributes
     */
    average_review_rating?: number;
    /**
     * The brand of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    brand?: string;
    /**
     * This attribute is not supported anymore.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    checkout_enabled?: boolean;
    /**
     * The primary color of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    color?: string;
    /**
     * The condition of the product. Must be one of the following values (upper or lowercased): ‘new’, ‘used’, or ‘refurbished’.
     * @type {string}
     * @memberof ItemAttributes
     */
    condition?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_0?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_1?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_2?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_3?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_4?: string;
    /**
     * <p><= 10000 characters</p> <p>The description of the product.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    description?: string;
    /**
     * The item is free to ship.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    free_shipping_label?: boolean;
    /**
     * The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
     * @type {string}
     * @memberof ItemAttributes
     */
    free_shipping_limit?: string;
    /**
     * The gender associated with the product. Must be one of the following values (upper or lowercased): ‘male’, ‘female’, or ‘unisex’.
     * @type {string}
     * @memberof ItemAttributes
     */
    gender?: string;
    /**
     * The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
     * @type {string}
     * @memberof ItemAttributes
     */
    google_product_category?: string;
    /**
     * The unique universal product identifier.
     * @type {number}
     * @memberof ItemAttributes
     */
    gtin?: number;
    /**
     * <p><= 127 characters</p> <p>The user-created unique ID that represents the product. Only Unicode characters are accepted.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    id?: string;
    /**
     * <p><= 127 characters</p> <p>The parent ID of the product.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    item_group_id?: string;
    /**
     * The millisecond timestamp when the item was lastly modified by the merchant.
     * @type {number}
     * @memberof ItemAttributes
     */
    last_updated_time?: number;
    /**
     * <p><= 511 characters</p> <p>The landing page for the product.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    link?: string;
    /**
     * The material used to make the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    material?: string;
    /**
     * The minimum advertised price of the product. It supports the following formats, \"19.99 USD\", \"19.99USD\" and \"19.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    min_ad_price?: string;
    /**
     * The mobile-optimized version of your landing page. Must begin with http:// or https://.
     * @type {string}
     * @memberof ItemAttributes
     */
    mobile_link?: string;
    /**
     * Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
     * @type {string}
     * @memberof ItemAttributes
     */
    mpn?: string;
    /**
     * The number of ratings for the item.
     * @type {number}
     * @memberof ItemAttributes
     */
    number_of_ratings?: number;
    /**
     * The number of reviews available for the item.
     * @type {number}
     * @memberof ItemAttributes
     */
    number_of_reviews?: number;
    /**
     * The description of the pattern used for the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    pattern?: string;
    /**
     * The price of the product. It supports the following formats, \"24.99 USD\", \"24.99USD\" and \"24.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    price?: string;
    /**
     * <p><= 1000 characters</p> <p>The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ > “. The > must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    product_type?: string;
    /**
     * The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \"14.99 USD\", \"14.99USD\" and \"14.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    sale_price?: string;
    /**
     * Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping?: string;
    /**
     * The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping_height?: string;
    /**
     * The weight of the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping_weight?: string;
    /**
     * The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping_width?: string;
    /**
     * The size of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    size?: string;
    /**
     * Indicates the country’s sizing system in which you are submitting your product. Must be one of the following values (upper or lowercased): ‘US’, ‘UK’, ‘EU’, ‘DE’, ‘FR’, ‘JP’, ‘CN’, ‘IT’, ‘BR’, ‘MEX’, or ‘AU’.
     * @type {string}
     * @memberof ItemAttributes
     */
    size_system?: string;
    /**
     * Additional description for the size. Must be one of the following values (upper or lowercased): ‘regular’, ‘petite’, ‘plus’, ‘big_and_tall’, or ‘maternity’.
     * @type {string}
     * @memberof ItemAttributes
     */
    size_type?: string;
    /**
     * Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
     * @type {string}
     * @memberof ItemAttributes
     */
    tax?: string;
    /**
     * <p><= 500 characters</p> <p>The name of the product.</p>
     * @type {string}
     * @memberof ItemAttributes
     */
    title?: string;
    /**
     * Options for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed.
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    variant_names?: Array<string>;
    /**
     * Option values for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed. The order of the variant values must be consistent with the order of the variant names.
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    variant_values?: Array<string>;
    /**
     * <p><= 2000 characters</p> <p>The links to additional images for your product. Up to ten additional images can be used to show a product from different angles or to show different stages. Must begin with http:// or https://.</p>
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    additional_image_link?: Array<string>;
    /**
     * <p><= 2000 characters</p> <p>The link to the main product images. Images should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your product. The URL of your image_link must be accessible by the Pinterest user-agent, and send the accurate images. Please make sure there are no template or placeholder images at the link. Must start with http:// or https://.</p>
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    image_link?: Array<string>;
}

/**
 * Object describing an item batch record
 * @export
 */
export type ItemBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemBatchRecord
     */
    item_id?: string;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof ItemBatchRecord
     */
    attributes?: ItemAttributes;
    /**
     * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
     * @type {Array<UpdateMaskFieldType>}
     * @memberof ItemBatchRecord
     */
    update_mask?: Array<UpdateMaskFieldType>;
}

/**
 * Object describing an item batch record to create items
 * @export
 */
export type ItemCreateBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemCreateBatchRecord
     */
    item_id?: string;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof ItemCreateBatchRecord
     */
    attributes?: ItemAttributes;
}

/**
 * Object describing an item batch record to delete items
 * @export
 */
export type ItemDeleteBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemDeleteBatchRecord
     */
    item_id?: string;
}

/**
 * Object describing an item batch record to discontinue items
 * @export
 */
export type ItemDeleteDiscontinuedBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemDeleteDiscontinuedBatchRecord
     */
    item_id?: string;
}

/**
 * 
 * @export
 */
export type ItemGroupIdFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ItemGroupIdFilter
     */
    ITEM_GROUP_ID: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type ItemIdFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ItemIdFilter
     */
    ITEM_ID: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * Object describing an item processing record
 * @export
 */
export type ItemProcessingRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemProcessingRecord
     */
    item_id?: string;
    /**
     * Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemProcessingRecord
     */
    errors?: Array<ItemValidationEvent>;
    /**
     * Array with the validation warnings for the item processing record
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemProcessingRecord
     */
    warnings?: Array<ItemValidationEvent>;
    /**
     * 
     * @type {ItemProcessingStatus}
     * @memberof ItemProcessingRecord
     */
    status?: ItemProcessingStatus;
}

/**
 * The status of the item processing record
 * @export
 * @enum {string}
 */
export type ItemProcessingStatus = 'SUCCESS' | 'FAILURE' | 'PROCESSING';

/**
 * Object describing an item record
 * @export
 */
export type ItemResponse = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof ItemResponse
     */
    catalog_type: CatalogsType;
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemResponse
     */
    item_id?: string;
    /**
     * Array with the errors for the item id requested
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemResponse
     */
    errors?: Array<ItemValidationEvent>;
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof ItemResponse
     */
    hotel_id?: string;
}

/**
 * 
 * @export
 */
export type ItemResponseAnyOf = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof ItemResponseAnyOf
     */
    catalog_type: CatalogsType;
    /**
     * The catalog retail item id in the merchant namespace
     * @type {string}
     * @memberof ItemResponseAnyOf
     */
    item_id?: string;
    /**
     * The pins mapped to the item
     * @type {Array<Pin>}
     * @memberof ItemResponseAnyOf
     */
    pins?: Array<Pin>;
    /**
     * 
     * @type {CatalogsHotelAttributes}
     * @memberof ItemResponseAnyOf
     */
    attributes?: CatalogsHotelAttributes;
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof ItemResponseAnyOf
     */
    hotel_id?: string;
}

/**
 * 
 * @export
 */
export type ItemResponseAnyOf1 = {
    /**
     * 
     * @type {CatalogsType}
     * @memberof ItemResponseAnyOf1
     */
    catalog_type: CatalogsType;
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemResponseAnyOf1
     */
    item_id?: string;
    /**
     * Array with the errors for the item id requested
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemResponseAnyOf1
     */
    errors?: Array<ItemValidationEvent>;
    /**
     * The catalog hotel id in the merchant namespace
     * @type {string}
     * @memberof ItemResponseAnyOf1
     */
    hotel_id?: string;
}

/**
 * Object describing an item batch record to update items
 * @export
 */
export type ItemUpdateBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemUpdateBatchRecord
     */
    item_id?: string;
    /**
     * 
     * @type {UpdatableItemAttributes}
     * @memberof ItemUpdateBatchRecord
     */
    attributes?: UpdatableItemAttributes;
    /**
     * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
     * @type {Array<UpdateMaskFieldType>}
     * @memberof ItemUpdateBatchRecord
     */
    update_mask?: Array<UpdateMaskFieldType>;
}

/**
 * Object describing an item batch record to upsert items
 * @export
 */
export type ItemUpsertBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemUpsertBatchRecord
     */
    item_id?: string;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof ItemUpsertBatchRecord
     */
    attributes?: ItemAttributes;
}

/**
 * Object describing an item validation event
 * @export
 */
export type ItemValidationEvent = {
    /**
     * The attribute that the item validation event references
     * @type {string}
     * @memberof ItemValidationEvent
     */
    attribute?: string;
    /**
     * The event code that the item validation event references
     * @type {number}
     * @memberof ItemValidationEvent
     */
    code?: number;
    /**
     * Title message describing the item validation event
     * @type {string}
     * @memberof ItemValidationEvent
     */
    message?: string;
}

/**
 * 
 * @export
 */
export type ItemsBatchPostRequest = {
    /**
     * 
     * @type {Country}
     * @memberof ItemsBatchPostRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof ItemsBatchPostRequest
     */
    language: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof ItemsBatchPostRequest
     */
    operation: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemDeleteBatchRecord>}
     * @memberof ItemsBatchPostRequest
     */
    items: Array<ItemDeleteBatchRecord>;
}

/**
 * 
 * @export
 */
export type ItemsIssuesList200Response = {
    /**
     * 
     * @type {Array<CatalogsItemValidationIssues>}
     * @memberof ItemsIssuesList200Response
     */
    items: Array<CatalogsItemValidationIssues>;
    /**
     * 
     * @type {string}
     * @memberof ItemsIssuesList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type Keyword = {
    /**
     * 
     * @type {boolean}
     * @memberof Keyword
     */
    archived?: boolean;
    /**
     * Keyword ID .
     * @type {string}
     * @memberof Keyword
     */
    id?: string;
    /**
     * Keyword parent entity ID (advertiser, campaign, ad group).
     * @type {string}
     * @memberof Keyword
     */
    parent_id?: string;
    /**
     * Parent entity type
     * @type {string}
     * @memberof Keyword
     */
    parent_type?: string;
    /**
     * Always keyword
     * @type {string}
     * @memberof Keyword
     */
    type?: string;
    /**
     * Keyword custom bid in microcurrency - null if inherited from parent ad group.
     * @type {number}
     * @memberof Keyword
     */
    bid?: number;
    /**
     * 
     * @type {MatchTypeResponse}
     * @memberof Keyword
     */
    match_type: MatchTypeResponse;
    /**
     * Keyword value (120 chars max).
     * @type {string}
     * @memberof Keyword
     */
    value: string;
}

/**
 * 
 * @export
 */
export type KeywordError = {
    /**
     * 
     * @type {Keyword}
     * @memberof KeywordError
     */
    data?: Keyword;
    /**
     * 
     * @type {Array<string>}
     * @memberof KeywordError
     */
    error_messages?: Array<string>;
}

/**
 * Keyword metrics JSON
 * @export
 */
export type KeywordMetrics = {
    /**
     * Average cost per click
     * @type {number}
     * @memberof KeywordMetrics
     */
    avg_cpc_in_micro_currency?: number;
    /**
     * Keyword\'s search frequency. This value is based on keyword frequency in pepsi client response
     * @type {string}
     * @memberof KeywordMetrics
     */
    keyword_query_volume?: string;
}

/**
 * 
 * @export
 */
export type KeywordMetricsResponse = {
    /**
     * Keyword name, e.g., \"keyword\":\"fashion outfits\"
     * @type {string}
     * @memberof KeywordMetricsResponse
     */
    keyword?: string;
    /**
     * 
     * @type {KeywordMetrics}
     * @memberof KeywordMetricsResponse
     */
    metrics?: KeywordMetrics;
}

/**
 * 
 * @export
 */
export type KeywordUpdate = {
    /**
     * Keyword ID.
     * @type {string}
     * @memberof KeywordUpdate
     */
    id: string;
    /**
     * Is keyword archived?
     * @type {boolean}
     * @memberof KeywordUpdate
     */
    archived?: boolean;
    /**
     * Keyword custom bid in microcurrency - null if inherited from parent ad group.
     * @type {number}
     * @memberof KeywordUpdate
     */
    bid?: number;
}

/**
 * 
 * @export
 */
export type KeywordUpdateBody = {
    /**
     * Keywords to update. Object array. Each object has 3 possible fields:<br>1. \"id\": (required) keyword ID<br>2. \"archived\": boolean. Should keyword be archived?<br>3. \"bid\": number<br>For example: [{\"id\":\"2886610576653\", \"archived\": false, \"bid\": 20000}, {\"id\":\"2886610576654\",  \"archived\": true, \"bid\": 20000}, ...]
     * @type {Array<KeywordUpdate>}
     * @memberof KeywordUpdateBody
     */
    keywords: Array<KeywordUpdate>;
}

/**
 * 
 * @export
 */
export type KeywordsCommon = {
    /**
     * Keyword custom bid in microcurrency - null if inherited from parent ad group.
     * @type {number}
     * @memberof KeywordsCommon
     */
    bid?: number;
    /**
     * 
     * @type {MatchTypeResponse}
     * @memberof KeywordsCommon
     */
    match_type: MatchTypeResponse;
    /**
     * Keyword value (120 chars max).
     * @type {string}
     * @memberof KeywordsCommon
     */
    value: string;
}

/**
 * 
 * @export
 */
export type KeywordsGet200Response = {
    /**
     * 
     * @type {Array<Keyword>}
     * @memberof KeywordsGet200Response
     */
    items: Array<Keyword>;
    /**
     * 
     * @type {string}
     * @memberof KeywordsGet200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type KeywordsMetricsArrayResponse = {
    /**
     * 
     * @type {Array<KeywordMetricsResponse>}
     * @memberof KeywordsMetricsArrayResponse
     */
    data?: Array<KeywordMetricsResponse>;
}

/**
 * 
 * @export
 */
export type KeywordsRequest = {
    /**
     * Keyword JSON array. Each array element has 3 fields
     * @type {Array<KeywordsCommon>}
     * @memberof KeywordsRequest
     */
    keywords: Array<KeywordsCommon>;
    /**
     * Keyword parent entity ID (advertiser, campaign, ad group).
     * @type {string}
     * @memberof KeywordsRequest
     */
    parent_id: string;
}

/**
 * 
 * @export
 */
export type KeywordsResponse = {
    /**
     * 
     * @type {Array<KeywordError>}
     * @memberof KeywordsResponse
     */
    errors?: Array<KeywordError>;
    /**
     * 
     * @type {Array<Keyword>}
     * @memberof KeywordsResponse
     */
    keywords?: Array<Keyword>;
}

/**
 * Language code, which is among the offical ISO 639-1 language list.
 * @export
 * @enum {string}
 */
export type Language = 'AM' | 'AR' | 'AZ' | 'BG' | 'BN' | 'BS' | 'CA' | 'CS' | 'DA' | 'DV' | 'DZ' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'FA' | 'FI' | 'FR' | 'HE' | 'HI' | 'HR' | 'HU' | 'HY' | 'ID' | 'IN' | 'IS' | 'IT' | 'IW' | 'JA' | 'KA' | 'KM' | 'KO' | 'LO' | 'LT' | 'LV' | 'MK' | 'MN' | 'MS' | 'MY' | 'NB' | 'NE' | 'NL' | 'NO' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SQ' | 'SR' | 'SV' | 'TL' | 'UK' | 'VI' | 'TE' | 'TH' | 'TR' | 'XX' | 'ZH';

/**
 * Creation fields
 * @export
 */
export type LeadFormCommon = {
    /**
     * Internal name of the lead form.
     * @type {string}
     * @memberof LeadFormCommon
     */
    name?: string;
    /**
     * A link to the advertiser\'s privacy policy. This will be included in the lead form\'s disclosure language.
     * @type {string}
     * @memberof LeadFormCommon
     */
    privacy_policy_link?: string;
    /**
     * Whether the advertiser has accepted Pinterest\'s terms of service for creating a lead ad.
     * @type {boolean}
     * @memberof LeadFormCommon
     */
    has_accepted_terms?: boolean;
    /**
     * A message for people who complete the form to let them know what happens next.
     * @type {string}
     * @memberof LeadFormCommon
     */
    completion_message?: string;
    /**
     * 
     * @type {LeadFormStatus}
     * @memberof LeadFormCommon
     */
    status?: LeadFormStatus;
    /**
     * Additional disclosure language to be included in the lead form.
     * @type {string}
     * @memberof LeadFormCommon
     */
    disclosure_language?: string;
    /**
     * List of questions to be displayed on the lead form.
     * @type {Array<LeadFormQuestion>}
     * @memberof LeadFormCommon
     */
    questions?: Array<LeadFormQuestion>;
}

/**
 * 
 * @export
 */
export type LeadFormQuestion = {
    /**
     * 
     * @type {LeadFormQuestionType}
     * @memberof LeadFormQuestion
     */
    question_type?: LeadFormQuestionType;
    /**
     * 
     * @type {LeadFormQuestionFieldType}
     * @memberof LeadFormQuestion
     */
    custom_question_field_type?: LeadFormQuestionFieldType;
    /**
     * Question label for a custom question.
     * @type {string}
     * @memberof LeadFormQuestion
     */
    custom_question_label?: string;
    /**
     * Question options for a custom question.
     * @type {Array<string>}
     * @memberof LeadFormQuestion
     */
    custom_question_options?: Array<string>;
}

/**
 * Lead form question field type
 * @export
 * @enum {string}
 */
export type LeadFormQuestionFieldType = 'TEXT_FIELD' | 'TEXT_AREA' | 'RADIO_LIST' | 'CHECKBOX' | 'null';

/**
 * Lead form question type
 * @export
 * @enum {string}
 */
export type LeadFormQuestionType = 'CUSTOM' | 'FULL_NAME' | 'FIRST_NAME' | 'LAST_NAME' | 'EMAIL' | 'PHONE_NUMBER' | 'ZIP_CODE' | 'AGE' | 'GENDER' | 'CITY' | 'COUNTRY' | 'PREFERRED_CONTACT_METHOD' | 'STATE_PROVINCE' | 'ADDRESS' | 'DATE_OF_BIRTH';

/**
 * 
 * @export
 */
export type LeadFormResponse = {
    /**
     * Internal name of the lead form.
     * @type {string}
     * @memberof LeadFormResponse
     */
    name?: string;
    /**
     * A link to the advertiser\'s privacy policy. This will be included in the lead form\'s disclosure language.
     * @type {string}
     * @memberof LeadFormResponse
     */
    privacy_policy_link?: string;
    /**
     * Whether the advertiser has accepted Pinterest\'s terms of service for creating a lead ad.
     * @type {boolean}
     * @memberof LeadFormResponse
     */
    has_accepted_terms?: boolean;
    /**
     * A message for people who complete the form to let them know what happens next.
     * @type {string}
     * @memberof LeadFormResponse
     */
    completion_message?: string;
    /**
     * 
     * @type {LeadFormStatus}
     * @memberof LeadFormResponse
     */
    status?: LeadFormStatus;
    /**
     * Additional disclosure language to be included in the lead form.
     * @type {string}
     * @memberof LeadFormResponse
     */
    disclosure_language?: string;
    /**
     * List of questions to be displayed on the lead form.
     * @type {Array<LeadFormQuestion>}
     * @memberof LeadFormResponse
     */
    questions?: Array<LeadFormQuestion>;
    /**
     * The ID of this lead form
     * @type {string}
     * @memberof LeadFormResponse
     */
    id?: string;
    /**
     * The Ad Account ID that this lead form belongs to.
     * @type {string}
     * @memberof LeadFormResponse
     */
    ad_account_id?: string;
    /**
     * Lead form creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof LeadFormResponse
     */
    created_time?: number;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof LeadFormResponse
     */
    updated_time?: number;
}

/**
 * Status of the lead form
 * @export
 * @enum {string}
 */
export type LeadFormStatus = 'DRAFT' | 'ACTIVE';

/**
 * Request to create test data for lead data test API.
 * @export
 */
export type LeadFormTestRequest = {
    /**
     * Test lead answers. Should follow the creation order.
     * @type {Array<string>}
     * @memberof LeadFormTestRequest
     */
    answers: Array<string>;
}

/**
 * Response for lead data test API.
 * @export
 */
export type LeadFormTestResponse = {
    /**
     * Subscription ID.
     * @type {string}
     * @memberof LeadFormTestResponse
     */
    subscription_id?: string;
}

/**
 * 
 * @export
 */
export type LeadFormsList200Response = {
    /**
     * 
     * @type {Array<LeadFormResponse>}
     * @memberof LeadFormsList200Response
     */
    items: Array<LeadFormResponse>;
    /**
     * 
     * @type {string}
     * @memberof LeadFormsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type LineItem = {
    /**
     * Product brand. For example, \"Parker\".
     * @type {string}
     * @memberof LineItem
     */
    product_brand?: string;
    /**
     * Product category. For example, \"Shoes\".
     * @type {string}
     * @memberof LineItem
     */
    product_category?: string;
    /**
     * Product ID. For example, 1414.
     * @type {number}
     * @memberof LineItem
     */
    product_id?: number;
    /**
     * Product name. For example, \"Parker Boots\".
     * @type {string}
     * @memberof LineItem
     */
    product_name?: string;
    /**
     * Product price. For example, \"99.99\".
     * @type {string}
     * @memberof LineItem
     */
    product_price?: string;
    /**
     * Product quantity. For example, 2.
     * @type {number}
     * @memberof LineItem
     */
    product_quantity?: number;
    /**
     * Product variant. For example, \"Red\".
     * @type {string}
     * @memberof LineItem
     */
    product_variant?: string;
    /**
     * Product variant ID. For example, \"1414-34832\".
     * @type {string}
     * @memberof LineItem
     */
    product_variant_id?: string;
}

/**
 * 
 * @export
 */
export type LinkedBusiness = {
    /**
     * Username
     * @type {string}
     * @memberof LinkedBusiness
     */
    username?: string;
    /**
     * image_small_url
     * @type {string}
     * @memberof LinkedBusiness
     */
    image_small_url?: string;
    /**
     * image_medium_url
     * @type {string}
     * @memberof LinkedBusiness
     */
    image_medium_url?: string;
    /**
     * image_large_url
     * @type {string}
     * @memberof LinkedBusiness
     */
    image_large_url?: string;
    /**
     * image_xlarge_url
     * @type {string}
     * @memberof LinkedBusiness
     */
    image_xlarge_url?: string;
}

/**
 * Marketing Mix Modeling (MMM) Reporting Columns
 * @export
 * @enum {string}
 */
export type MMMReportingColumn = 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECTR' | 'CAMPAIGN_NAME' | 'TOTAL_ENGAGEMENT' | 'EENGAGEMENT_RATE' | 'ECPM_IN_DOLLAR' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_GROUP_ID' | 'AD_GROUP_NAME' | 'CLICKTHROUGH_1' | 'IMPRESSION_1' | 'CLICKTHROUGH_2' | 'IMPRESSION_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'ADVERTISER_NAME' | 'SPEND_ORDER_LINE_PAID_TYPE';

/**
 * Ad targeting types for MMM report
 * @export
 * @enum {string}
 */
export type MMMReportingTargetingType = 'APPTYPE' | 'COUNTRY' | 'CREATIVE_TYPE' | 'GENDER' | 'LOCATION';

/**
 * Keyword match type
 * @export
 * @enum {string}
 */
export type MatchType = 'BROAD' | 'PHRASE' | 'EXACT' | 'EXACT_NEGATIVE' | 'PHRASE_NEGATIVE';

/**
 * Keyword match type
 * @export
 * @enum {string}
 */
export type MatchTypeResponse = 'BROAD' | 'PHRASE' | 'EXACT' | 'EXACT_NEGATIVE' | 'PHRASE_NEGATIVE' | 'null';

/**
 * 
 * @export
 */
export type MaxPriceFilter = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof MaxPriceFilter
     */
    MAX_PRICE: CatalogsProductGroupPricingCriteria;
}

/**
 * 
 * @export
 */
export type MediaList200Response = {
    /**
     * Media
     * @type {Array<MediaUploadDetails>}
     * @memberof MediaList200Response
     */
    items: Array<MediaUploadDetails>;
    /**
     * 
     * @type {string}
     * @memberof MediaList200Response
     */
    bookmark?: string;
}

/**
 * Media upload that has been registered but not uploaded/processed yet.
 * @export
 */
export type MediaUpload = {
    /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     * @type {string}
     * @memberof MediaUpload
     */
    media_id?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUpload
     */
    media_type?: MediaUploadType;
    /**
     * The URL where you will POST your media file.
     * @type {string}
     * @memberof MediaUpload
     */
    upload_url?: string;
    /**
     * 
     * @type {MediaUploadAllOfUploadParameters}
     * @memberof MediaUpload
     */
    upload_parameters?: MediaUploadAllOfUploadParameters;
}

/**
 * The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
 * @export
 */
export type MediaUploadAllOfUploadParameters = {
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_date?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_signature?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_security_token?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_algorithm?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    policy?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_credential?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    Content_Type?: string;
}

/**
 * Media upload details
 * @export
 */
export type MediaUploadDetails = {
    /**
     * 
     * @type {string}
     * @memberof MediaUploadDetails
     */
    media_id?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadDetails
     */
    media_type?: MediaUploadType;
    /**
     * 
     * @type {MediaUploadStatus}
     * @memberof MediaUploadDetails
     */
    status?: MediaUploadStatus;
}

/**
 * Media upload request
 * @export
 */
export type MediaUploadRequest = {
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadRequest
     */
    media_type: MediaUploadType;
}

/**
 * Media upload status
 * @export
 * @enum {string}
 */
export type MediaUploadStatus = 'registered' | 'processing' | 'succeeded' | 'failed';

/**
 * 
 * @export
 * @enum {string}
 */
export type MediaUploadType = 'video';

/**
 * Level of the reporting request
 * @export
 * @enum {string}
 */
export type MetricsReportingLevel = 'ADVERTISER' | 'ADVERTISER_TARGETING' | 'CAMPAIGN' | 'CAMPAIGN_TARGETING' | 'AD_GROUP' | 'AD_GROUP_TARGETING' | 'PIN_PROMOTION' | 'PIN_PROMOTION_TARGETING' | 'KEYWORD' | 'PRODUCT_GROUP' | 'PRODUCT_GROUP_TARGETING' | 'PRODUCT_ITEM';

/**
 * 
 * @export
 */
export type MetricsResponse = {
    /**
     * 
     * @type {Array<Object>}
     * @memberof MetricsResponse
     */
    data?: Array<Object>;
}

/**
 * 
 * @export
 */
export type MinPriceFilter = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof MinPriceFilter
     */
    MIN_PRICE: CatalogsProductGroupPricingCriteria;
}

/**
 * Currency Codes from ISO 4217.
 * @export
 * @enum {string}
 */
export type NonNullableCatalogsCurrency = 'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BYR' | 'BZD' | 'CAD' | 'CDF' | 'CHF' | 'CLP' | 'CNY' | 'COP' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GGP' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'IMP' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JEP' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRO' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SPL' | 'SRD' | 'STD' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TVD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'UYU' | 'UZS' | 'VEF' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XCD' | 'XDR' | 'XOF' | 'XPF' | 'YER' | 'ZAR' | 'ZMW' | 'ZWD';

/**
 * Product availability.
 * @export
 * @enum {string}
 */
export type NonNullableProductAvailabilityType = 'IN_STOCK' | 'OUT_OF_STOCK' | 'PREORDER';

/**
 * Product item fields
 * @export
 * @enum {string}
 */
export type NullableCatalogsItemFieldType = 'ITEM_ID' | 'ITEM_GROUP_ID' | 'TITLE' | 'DESCRIPTION' | 'ITEM_LINK' | 'ORGANIC_LINK' | 'IMAGE_LINK' | 'ADWORDS_REDIRECT_LINK' | 'AD_LINK' | 'SIZE' | 'GOOGLE_PRODUCT_CATEGORY' | 'PRODUCT_CATEGORY' | 'CONDITION' | 'AVAILABILITY' | 'GENDER' | 'AGE_GROUP' | 'SIZE_TYPE' | 'SIZE_SYSTEM' | 'ADULT' | 'SHIPPING' | 'SHIPPING_WEIGHT' | 'TAX' | 'MULTIPACK' | 'ADDITIONAL_IMAGE_LINK' | 'PRICE' | 'SALE_PRICE' | 'IS_BUNDLE' | 'EXPIRATION_DATE' | 'SALE_PRICE_EFFECTIVE_DATE' | 'AVAILABILITY_DATE' | 'WEIGHT_UNIT' | 'PRODUCT_TYPE' | 'CUSTOM_LABEL_0' | 'CUSTOM_LABEL_1' | 'CUSTOM_LABEL_2' | 'CUSTOM_LABEL_3' | 'CUSTOM_LABEL_4' | 'MATERIAL' | 'PATTERN' | 'COLOR' | 'BRAND' | 'GTIN' | 'MPN' | 'IOS_DEEP_LINK' | 'ANDROID_DEEP_LINK' | 'FREE_SHIPPING_LABEL' | 'FREE_SHIPPING_LIMIT' | 'AVG_REVIEW_RATING' | 'NUM_RATINGS' | 'NUM_REVIEWS' | 'ALT_TEXT' | 'VARIANT_NAMES' | 'VARIANT_VALUES' | 'MIN_AD_PRICE' | 'SHIPPING_WIDTH' | 'SHIPPING_HEIGHT' | 'null';

/**
 * Currency Codes from ISO 4217.
 * @export
 * @enum {string}
 */
export type NullableCurrency = 'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BYR' | 'BZD' | 'CAD' | 'CDF' | 'CHF' | 'CLP' | 'CNY' | 'COP' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GGP' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'IMP' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JEP' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRO' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SPL' | 'SRD' | 'STD' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TVD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'UYU' | 'UZS' | 'VEF' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XCD' | 'XDR' | 'XOF' | 'XPF' | 'YER' | 'ZAR' | 'ZMW' | 'ZWD' | 'null';

/**
 * A request to exchange an authorization code for an access token.
 * @export
 */
export type OauthAccessTokenRequestCode = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCode
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCode
     */
    redirect_uri: string;
} & OauthAccessTokenRequest

/**
 * A request to exchange a refresh token for a new access token.
 * @export
 */
export type OauthAccessTokenRequestRefresh = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    scope?: string;
    /**
     * Setting this field to <code>true</code> will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \"everlasting_refresh\".
     * @type {boolean}
     * @memberof OauthAccessTokenRequestRefresh
     */
    refresh_on?: boolean;
} & OauthAccessTokenRequest


            export type OauthAccessTokenResponseResponseTypeEnum = 'authorization_code' | 'refresh_token';
/**
 * A successful OAuth access token response.
 * @export
 */
export type OauthAccessTokenResponse = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    response_type?: OauthAccessTokenResponseResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    token_type: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponse
     */
    expires_in: number;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    scope: string;
}

/**
 * A successful OAuth access token response for the authorization code flow.
 * @export
 */
export type OauthAccessTokenResponseCode = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseCode
     */
    refresh_token: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseCode
     */
    refresh_token_expires_in: number;
} & OauthAccessTokenResponse

/**
 * A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
 * @export
 */
export type OauthAccessTokenResponseEverlastingRefresh = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseEverlastingRefresh
     */
    refresh_token: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseEverlastingRefresh
     */
    refresh_token_expires_in: number;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseEverlastingRefresh
     */
    refresh_token_expires_at: number;
} & OauthAccessTokenResponse

/**
 * A successful OAuth access token response for the refresh token flow, with an added refresh token.
 * @export
 */
export type OauthAccessTokenResponseIntegrationRefresh = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseIntegrationRefresh
     */
    refresh_token: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseIntegrationRefresh
     */
    refresh_token_expires_in: number;
} & OauthAccessTokenResponse

/**
 * A successful OAuth access token response for the refresh token flow.
 * @export
 */
export type OauthAccessTokenResponseRefresh = {
} & OauthAccessTokenResponse

/**
 * Campaign objective type. If set as one of [\"AWARENESS\", \"CONSIDERATION\", \"WEB_CONVERSION\", \"CATALOG_SALES\"] the campaign is considered as a Campaign Budget Optimization (CBO) campaign, meaning budget needs to be set at the campaign level rather than at the ad group level. [\"WEB_SESSIONS\"] in BETA. For update, only draft campaigns may update objective type.
 * @export
 * @enum {string}
 */
export type ObjectiveType = 'AWARENESS' | 'CONSIDERATION' | 'VIDEO_VIEW' | 'WEB_CONVERSION' | 'CATALOG_SALES' | 'WEB_SESSIONS';

/**
 * 
 * @export
 */
export type OptimizationGoalMetadata = {
    /**
     * 
     * @type {OptimizationGoalMetadataConversionTagV3GoalMetadata}
     * @memberof OptimizationGoalMetadata
     */
    conversion_tag_v3_goal_metadata?: OptimizationGoalMetadataConversionTagV3GoalMetadata;
    /**
     * 
     * @type {OptimizationGoalMetadataFrequencyGoalMetadata}
     * @memberof OptimizationGoalMetadata
     */
    frequency_goal_metadata?: OptimizationGoalMetadataFrequencyGoalMetadata;
    /**
     * 
     * @type {OptimizationGoalMetadataScrollupGoalMetadata}
     * @memberof OptimizationGoalMetadata
     */
    scrollup_goal_metadata?: OptimizationGoalMetadataScrollupGoalMetadata;
}


            export type OptimizationGoalMetadataConversionTagV3GoalMetadataConversionEventEnum = 'PAGE_VISIT' | 'SIGNUP' | 'CHECKOUT' | 'CUSTOM' | 'VIEW_CATEGORY' | 'SEARCH' | 'ADD_TO_CART' | 'WATCH_VIDEO' | 'LEAD' | 'APP_INSTALL';

            export type OptimizationGoalMetadataConversionTagV3GoalMetadataLearningModeTypeEnum = 'NOT_ACTIVE' | 'ACTIVE' | 'null';
/**
 * 
 * @export
 */
export type OptimizationGoalMetadataConversionTagV3GoalMetadata = {
    /**
     * 
     * @type {OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadata
     */
    attribution_windows?: OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows;
    /**
     * 
     * @type {string}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadata
     */
    conversion_event?: OptimizationGoalMetadataConversionTagV3GoalMetadataConversionEventEnum;
    /**
     * 
     * @type {string}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadata
     */
    conversion_tag_id?: string;
    /**
     * 
     * @type {string}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadata
     */
    cpa_goal_value_in_micro_currency?: string;
    /**
     * Ad group is ROAS optimized
     * @type {boolean}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadata
     */
    is_roas_optimized?: boolean;
    /**
     * Conversion learning model type
     * @type {string}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadata
     */
    learning_mode_type?: OptimizationGoalMetadataConversionTagV3GoalMetadataLearningModeTypeEnum;
}

/**
 * 
 * @export
 */
export type OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows = {
    /**
     * 
     * @type {number}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows
     */
    click_window_days?: number;
    /**
     * 
     * @type {number}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows
     */
    engagement_window_days?: number;
    /**
     * 
     * @type {number}
     * @memberof OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows
     */
    view_window_days?: number;
}


            export type OptimizationGoalMetadataFrequencyGoalMetadataTimerangeEnum = 'THIRTY_DAY' | 'DAY' | 'SEVEN_DAY' | 'TWENTY_MINUTE' | 'TEN_MINUTE' | 'TWENTY_FOUR_HOUR';
/**
 * 
 * @export
 */
export type OptimizationGoalMetadataFrequencyGoalMetadata = {
    /**
     * 
     * @type {number}
     * @memberof OptimizationGoalMetadataFrequencyGoalMetadata
     */
    frequency?: number;
    /**
     * User entity counts time range
     * @type {string}
     * @memberof OptimizationGoalMetadataFrequencyGoalMetadata
     */
    timerange?: OptimizationGoalMetadataFrequencyGoalMetadataTimerangeEnum;
}

/**
 * 
 * @export
 */
export type OptimizationGoalMetadataScrollupGoalMetadata = {
    /**
     * 
     * @type {string}
     * @memberof OptimizationGoalMetadataScrollupGoalMetadata
     */
    scrollup_goal_value_in_micro_currency?: string;
}

/**
 * 
 * @export
 */
export type OrderLine = {
    /**
     * Order line ID.
     * @type {string}
     * @memberof OrderLine
     */
    id?: string;
    /**
     * Always \"orderline\".
     * @type {string}
     * @memberof OrderLine
     */
    type?: string;
    /**
     * Ad account ID.
     * @type {string}
     * @memberof OrderLine
     */
    ad_account_id?: string;
    /**
     * Purchase order ID.
     * @type {string}
     * @memberof OrderLine
     */
    purchase_order_id?: string;
    /**
     * Start time. Unix timestamp.
     * @type {number}
     * @memberof OrderLine
     */
    start_time?: number;
    /**
     * End time. Unix timestamp.
     * @type {number}
     * @memberof OrderLine
     */
    end_time?: number;
    /**
     * Order line budget in micro currency.
     * @type {number}
     * @memberof OrderLine
     */
    budget?: number;
    /**
     * Order line paid budget in micro currency.
     * @type {number}
     * @memberof OrderLine
     */
    paid_budget?: number;
    /**
     * Order line status.
     * @type {OrderLineStatus}
     * @memberof OrderLine
     */
    status?: OrderLineStatus;
    /**
     * Order line name.
     * @type {string}
     * @memberof OrderLine
     */
    name?: string;
    /**
     * Order line paid type.
     * @type {OrderLinePaidType}
     * @memberof OrderLine
     */
    paid_type?: OrderLinePaidType;
    /**
     * Associated List of campaign IDs.
     * @type {Array<string>}
     * @memberof OrderLine
     */
    campaign_ids: Array<string>;
}

/**
 * 
 * @export
 */
export type OrderLineError = {
    /**
     * 
     * @type {OrderLine}
     * @memberof OrderLineError
     */
    data?: OrderLine;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderLineError
     */
    error_messages?: Array<string>;
}

/**
 * Order Line Paid Type
 * @export
 * @enum {string}
 */
export type OrderLinePaidType = 'PAID' | 'BONUS' | 'MAKE_GOOD' | 'TEST' | 'null';

/**
 * 
 * @export
 */
export type OrderLineResponse = {
    /**
     * Error list if update(s) fail.
     * @type {Array<OrderLineError>}
     * @memberof OrderLineResponse
     */
    errors?: Array<OrderLineError>;
    /**
     * Order Line object array.
     * @type {Array<OrderLine>}
     * @memberof OrderLineResponse
     */
    order_line?: Array<OrderLine>;
}

/**
 * 
 * @export
 */
export type OrderLineSingleResponse = {
    /**
     * 
     * @type {OrderLineResponse}
     * @memberof OrderLineSingleResponse
     */
    data?: OrderLineResponse;
}

/**
 * Order Line Status
 * @export
 * @enum {string}
 */
export type OrderLineStatus = 'ACTIVE' | 'PAUSED' | 'DELETED';

/**
 * Order Line
 * @export
 */
export type OrderLines = {
    /**
     * Order line ID.
     * @type {string}
     * @memberof OrderLines
     */
    id?: string;
    /**
     * Always \"orderline\".
     * @type {string}
     * @memberof OrderLines
     */
    type?: string;
    /**
     * Ad account ID.
     * @type {string}
     * @memberof OrderLines
     */
    ad_account_id?: string;
    /**
     * Purchase order ID.
     * @type {string}
     * @memberof OrderLines
     */
    purchase_order_id?: string;
    /**
     * Start time. Unix timestamp.
     * @type {number}
     * @memberof OrderLines
     */
    start_time?: number;
    /**
     * End time. Unix timestamp.
     * @type {number}
     * @memberof OrderLines
     */
    end_time?: number;
    /**
     * Order line budget in micro currency.
     * @type {number}
     * @memberof OrderLines
     */
    budget?: number;
    /**
     * Order line paid budget in micro currency.
     * @type {number}
     * @memberof OrderLines
     */
    paid_budget?: number;
    /**
     * Order line status.
     * @type {OrderLineStatus}
     * @memberof OrderLines
     */
    status?: OrderLineStatus;
    /**
     * Order line name.
     * @type {string}
     * @memberof OrderLines
     */
    name?: string;
    /**
     * Order line paid type.
     * @type {OrderLinePaidType}
     * @memberof OrderLines
     */
    paid_type?: OrderLinePaidType;
}

/**
 * 
 * @export
 */
export type OrderLinesArrayResponse = {
    /**
     * 
     * @type {Array<OrderLines>}
     * @memberof OrderLinesArrayResponse
     */
    items?: Array<OrderLines>;
}

/**
 * 
 * @export
 */
export type OrderLinesList200Response = {
    /**
     * 
     * @type {Array<OrderLine>}
     * @memberof OrderLinesList200Response
     */
    items: Array<OrderLine>;
    /**
     * 
     * @type {string}
     * @memberof OrderLinesList200Response
     */
    bookmark?: string;
}

/**
 * Ad group pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day. When using CBO, only the STANDARD pacing delivery type is allowed.
 * @export
 * @enum {string}
 */
export type PacingDeliveryType = 'STANDARD' | 'ACCELERATED';

/**
 * 
 * @export
 */
export type PageVisitConversionTagsGet200Response = {
    /**
     * 
     * @type {Array<ConversionEventResponse>}
     * @memberof PageVisitConversionTagsGet200Response
     */
    items: Array<ConversionEventResponse>;
    /**
     * 
     * @type {string}
     * @memberof PageVisitConversionTagsGet200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type Paginated = {
    /**
     * 
     * @type {Array<Object>}
     * @memberof Paginated
     */
    items: Array<Object>;
    /**
     * 
     * @type {string}
     * @memberof Paginated
     */
    bookmark?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type PartnerType = 'INTERNAL' | 'EXTERNAL';

/**
 * Pin
 * @export
 */
export type Pin = {
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Pin
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    description?: string;
    /**
     * Dominant pin color. Hex number, e.g. \\\"#6E7874\\\".
     * @type {string}
     * @memberof Pin
     */
    dominant_color?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    alt_text?: string;
    /**
     * 
     * @type {CreativeType}
     * @memberof Pin
     */
    creative_type?: CreativeType;
    /**
     * The board to which this Pin belongs.
     * @type {string}
     * @memberof Pin
     */
    board_id?: string;
    /**
     * The board section to which this Pin belongs.
     * @type {string}
     * @memberof Pin
     */
    board_section_id?: string;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Pin
     */
    board_owner?: BoardOwner;
    /**
     * Whether the \"operation user_account\" is the Pin owner.
     * @type {boolean}
     * @memberof Pin
     */
    is_owner?: boolean;
    /**
     * 
     * @type {SummaryPinMedia}
     * @memberof Pin
     */
    media?: SummaryPinMedia;
    /**
     * 
     * @type {PinMediaSource}
     * @memberof Pin
     */
    media_source?: PinMediaSource;
    /**
     * The source pin id if this pin was saved from another pin. <a href=\"https://help.pinterest.com/article/save-pins-on-pinterest\">Learn more</a>.
     * @type {string}
     * @memberof Pin
     */
    parent_pin_id?: string;
    /**
     * Whether the Pin is standard or not. See documentation on <a href=\"https://developers.pinterest.com/docs/content/update/\">Changes to Pin creation</a> for more information.
     * @type {boolean}
     * @memberof Pin
     */
    is_standard?: boolean;
    /**
     * Whether the Pin has been promoted or not.
     * @type {boolean}
     * @memberof Pin
     */
    has_been_promoted?: boolean;
    /**
     * Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>.
     * @type {string}
     * @memberof Pin
     */
    note?: string;
    /**
     * Pin metrics with associated time intervals if any.
     * @type {Object}
     * @memberof Pin
     */
    pin_metrics?: Object;
}

/**
 * 
 * @export
 */
export type PinAnalyticsMetricsResponse = {
    /**
     * The lifetime metric name and value.
     * @type {{ [key: string]: number; }}
     * @memberof PinAnalyticsMetricsResponse
     */
    lifetime_metrics?: { [key: string]: number; };
    /**
     * Array with the requested daily metric records
     * @type {Array<PinAnalyticsMetricsResponseDailyMetricsInner>}
     * @memberof PinAnalyticsMetricsResponse
     */
    daily_metrics?: Array<PinAnalyticsMetricsResponseDailyMetricsInner>;
    /**
     * The metric name and value over the requested period for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof PinAnalyticsMetricsResponse
     */
    summary_metrics?: { [key: string]: number; };
}

/**
 * 
 * @export
 */
export type PinAnalyticsMetricsResponseDailyMetricsInner = {
    /**
     * 
     * @type {DataStatus}
     * @memberof PinAnalyticsMetricsResponseDailyMetricsInner
     */
    data_status?: DataStatus;
    /**
     * Metrics date (UTC): YYYY-MM-DD.
     * @type {string}
     * @memberof PinAnalyticsMetricsResponseDailyMetricsInner
     */
    _date?: string;
    /**
     * The metric name and daily value for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof PinAnalyticsMetricsResponseDailyMetricsInner
     */
    metrics?: { [key: string]: number; };
}

/**
 * Pin
 * @export
 */
export type PinCreate = {
    /**
     * 
     * @type {string}
     * @memberof PinCreate
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof PinCreate
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof PinCreate
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof PinCreate
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PinCreate
     */
    description?: string;
    /**
     * Dominant pin color. Hex number, e.g. \\\"#6E7874\\\".
     * @type {string}
     * @memberof PinCreate
     */
    dominant_color?: string;
    /**
     * 
     * @type {string}
     * @memberof PinCreate
     */
    alt_text?: string;
    /**
     * The board to which this Pin belongs.
     * @type {string}
     * @memberof PinCreate
     */
    board_id?: string;
    /**
     * The board section to which this Pin belongs.
     * @type {string}
     * @memberof PinCreate
     */
    board_section_id?: string;
    /**
     * 
     * @type {BoardOwner}
     * @memberof PinCreate
     */
    board_owner?: BoardOwner;
    /**
     * 
     * @type {SummaryPinMedia}
     * @memberof PinCreate
     */
    media?: SummaryPinMedia;
    /**
     * 
     * @type {PinMediaSource}
     * @memberof PinCreate
     */
    media_source?: PinMediaSource;
    /**
     * The source pin id if this pin was saved from another pin. <a href=\"https://help.pinterest.com/article/save-pins-on-pinterest\">Learn more</a>.
     * @type {string}
     * @memberof PinCreate
     */
    parent_pin_id?: string;
    /**
     * Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>.
     * @type {string}
     * @memberof PinCreate
     */
    note?: string;
}

/**
 * Pin media objects.
 * @export
 */
export type PinMedia = {
    /**
     * 
     * @type {string}
     * @memberof PinMedia
     */
    media_type?: string;
}

/**
 * 
 * @export
 */
export type PinMediaMetadata = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaMetadata
     */
    item_type?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaMetadata
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaMetadata
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaMetadata
     */
    link?: string;
    /**
     * 
     * @type {ImageMetadataImages}
     * @memberof PinMediaMetadata
     */
    images?: ImageMetadataImages;
    /**
     * 
     * @type {string}
     * @memberof PinMediaMetadata
     */
    cover_image_url?: string;
    /**
     * Video url (720p). </p><strong>Note:</strong> This field is limited and not available to all apps.
     * @type {string}
     * @memberof PinMediaMetadata
     */
    video_url?: string;
    /**
     * Duration (in milliseconds)
     * @type {number}
     * @memberof PinMediaMetadata
     */
    duration?: number;
    /**
     * Height (in pixels)
     * @type {number}
     * @memberof PinMediaMetadata
     */
    height?: number;
    /**
     * Width (in pixels)
     * @type {number}
     * @memberof PinMediaMetadata
     */
    width?: number;
}


            export type PinMediaSourceSourceTypeEnum = 'pin_url';

            export type PinMediaSourceContentTypeEnum = 'image/jpeg' | 'image/png';

            export type PinMediaSourceCoverImageContentTypeEnum = 'image/jpeg' | 'image/png';
/**
 * Pin media source.
 * @export
 */
export type PinMediaSource = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    source_type: PinMediaSourceSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    content_type: PinMediaSourceContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    data: string;
    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @type {boolean}
     * @memberof PinMediaSource
     */
    is_standard?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    url: string;
    /**
     * Cover image url.
     * @type {string}
     * @memberof PinMediaSource
     */
    cover_image_url?: string;
    /**
     * Content type for cover image Base64.
     * @type {string}
     * @memberof PinMediaSource
     */
    cover_image_content_type?: PinMediaSourceCoverImageContentTypeEnum;
    /**
     * Cover image Base64.
     * @type {string}
     * @memberof PinMediaSource
     */
    cover_image_data?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    media_id: string;
    /**
     * Array with image objects.
     * @type {Array<PinMediaSourceImagesURLItemsInner>}
     * @memberof PinMediaSource
     */
    items: Array<PinMediaSourceImagesURLItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof PinMediaSource
     */
    index?: number;
    /**
     * This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
     * @type {boolean}
     * @memberof PinMediaSource
     */
    is_affiliate_link?: boolean;
}


            export type PinMediaSourceImageBase64SourceTypeEnum = 'image_base64';

            export type PinMediaSourceImageBase64ContentTypeEnum = 'image/jpeg' | 'image/png';
/**
 * Base64-encoded image media source
 * @export
 */
export type PinMediaSourceImageBase64 = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    source_type: PinMediaSourceImageBase64SourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    content_type: PinMediaSourceImageBase64ContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    data: string;
    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @type {boolean}
     * @memberof PinMediaSourceImageBase64
     */
    is_standard?: boolean;
}


            export type PinMediaSourceImageURLSourceTypeEnum = 'image_url';
/**
 * Image URL-based media source
 * @export
 */
export type PinMediaSourceImageURL = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageURL
     */
    source_type: PinMediaSourceImageURLSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageURL
     */
    url: string;
    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @type {boolean}
     * @memberof PinMediaSourceImageURL
     */
    is_standard?: boolean;
}


            export type PinMediaSourceImagesBase64SourceTypeEnum = 'multiple_image_base64';
/**
 * Multiple Base64-encoded images media source
 * @export
 */
export type PinMediaSourceImagesBase64 = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesBase64
     */
    source_type?: PinMediaSourceImagesBase64SourceTypeEnum;
    /**
     * Array with image objects.
     * @type {Array<PinMediaSourceImagesBase64ItemsInner>}
     * @memberof PinMediaSourceImagesBase64
     */
    items: Array<PinMediaSourceImagesBase64ItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof PinMediaSourceImagesBase64
     */
    index?: number;
}


            export type PinMediaSourceImagesBase64ItemsInnerContentTypeEnum = 'image/jpeg' | 'image/png';
/**
 * 
 * @export
 */
export type PinMediaSourceImagesBase64ItemsInner = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesBase64ItemsInner
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesBase64ItemsInner
     */
    description?: string;
    /**
     * Destination link for the image.
     * @type {string}
     * @memberof PinMediaSourceImagesBase64ItemsInner
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesBase64ItemsInner
     */
    content_type: PinMediaSourceImagesBase64ItemsInnerContentTypeEnum;
    /**
     * Image to upload as base64 string.
     * @type {string}
     * @memberof PinMediaSourceImagesBase64ItemsInner
     */
    data: string;
}


            export type PinMediaSourceImagesURLSourceTypeEnum = 'multiple_image_urls';
/**
 * Multiple images urls-based media source
 * @export
 */
export type PinMediaSourceImagesURL = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesURL
     */
    source_type?: PinMediaSourceImagesURLSourceTypeEnum;
    /**
     * Array with image objects.
     * @type {Array<PinMediaSourceImagesURLItemsInner>}
     * @memberof PinMediaSourceImagesURL
     */
    items: Array<PinMediaSourceImagesURLItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof PinMediaSourceImagesURL
     */
    index?: number;
}

/**
 * 
 * @export
 */
export type PinMediaSourceImagesURLItemsInner = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesURLItemsInner
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImagesURLItemsInner
     */
    description?: string;
    /**
     * Destination link for the image.
     * @type {string}
     * @memberof PinMediaSourceImagesURLItemsInner
     */
    link?: string;
    /**
     * URL of image to upload.
     * @type {string}
     * @memberof PinMediaSourceImagesURLItemsInner
     */
    url: string;
}


            export type PinMediaSourcePinURLSourceTypeEnum = 'pin_url';
/**
 * Pin URL-based media source for product pin creation. Currently the field is only available to a list of beta users.
 * @export
 */
export type PinMediaSourcePinURL = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourcePinURL
     */
    source_type: PinMediaSourcePinURLSourceTypeEnum;
    /**
     * This is an affiliate link or sponsored product. The FTC requires disclosure for paid partnerships and affiliate products.
     * @type {boolean}
     * @memberof PinMediaSourcePinURL
     */
    is_affiliate_link?: boolean;
}


            export type PinMediaSourceVideoIDSourceTypeEnum = 'video_id';

            export type PinMediaSourceVideoIDCoverImageContentTypeEnum = 'image/jpeg' | 'image/png';
/**
 * Video ID-based media source
 * @export
 */
export type PinMediaSourceVideoID = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    source_type: PinMediaSourceVideoIDSourceTypeEnum;
    /**
     * Cover image url.
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    cover_image_url?: string;
    /**
     * Content type for cover image Base64.
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    cover_image_content_type?: PinMediaSourceVideoIDCoverImageContentTypeEnum;
    /**
     * Cover image Base64.
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    cover_image_data?: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    media_id: string;
    /**
     * Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
     * @type {boolean}
     * @memberof PinMediaSourceVideoID
     */
    is_standard?: boolean;
}

/**
 * Pin with image.
 * @export
 */
export type PinMediaWithImage = {
    /**
     * 
     * @type {ImageMetadataImages}
     * @memberof PinMediaWithImage
     */
    images?: ImageMetadataImages;
} & PinMedia

/**
 * Pin with a mix of images and videos.
 * @export
 */
export type PinMediaWithImageAndVideo = {
    /**
     * 
     * @type {Array<PinMediaMetadata>}
     * @memberof PinMediaWithImageAndVideo
     */
    items?: Array<PinMediaMetadata>;
} & PinMedia

/**
 * Pin with multiple images.
 * @export
 */
export type PinMediaWithImages = {
    /**
     * 
     * @type {Array<ImageMetadata>}
     * @memberof PinMediaWithImages
     */
    items?: Array<ImageMetadata>;
} & PinMedia

/**
 * Pin with video.
 * @export
 */
export type PinMediaWithVideo = {
    /**
     * 
     * @type {ImageMetadataImages}
     * @memberof PinMediaWithVideo
     */
    images?: ImageMetadataImages;
    /**
     * 
     * @type {string}
     * @memberof PinMediaWithVideo
     */
    cover_image_url?: string;
    /**
     * Video url (720p). </p><strong>Note:</strong> This field is limited and not available to all apps.
     * @type {string}
     * @memberof PinMediaWithVideo
     */
    video_url?: string;
    /**
     * Duration (in milliseconds)
     * @type {number}
     * @memberof PinMediaWithVideo
     */
    duration?: number;
    /**
     * Height (in pixels)
     * @type {number}
     * @memberof PinMediaWithVideo
     */
    height?: number;
    /**
     * Width (in pixels)
     * @type {number}
     * @memberof PinMediaWithVideo
     */
    width?: number;
} & PinMedia

/**
 * Pin with multiple videos.
 * @export
 */
export type PinMediaWithVideos = {
    /**
     * 
     * @type {Array<VideoMetadata>}
     * @memberof PinMediaWithVideos
     */
    items?: Array<VideoMetadata>;
} & PinMedia

/**
 * Summary status for pin promotions
 * @export
 * @enum {string}
 */
export type PinPromotionSummaryStatus = 'APPROVED' | 'PAUSED' | 'PENDING' | 'REJECTED' | 'ADVERTISER_DISABLED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT';

/**
 * Pin fields for updates
 * @export
 */
export type PinUpdate = {
    /**
     * Pin\'s alternative text.
     * @type {string}
     * @memberof PinUpdate
     */
    alt_text?: string;
    /**
     * The id of the board to move the Pin onto.
     * @type {string}
     * @memberof PinUpdate
     */
    board_id?: string;
    /**
     * <a href=\"https://help.pinterest.com/en/article/create-a-board-section\">Board section</a> ID.
     * @type {string}
     * @memberof PinUpdate
     */
    board_section_id?: string;
    /**
     * Pin description - 800 characters maximum.
     * @type {string}
     * @memberof PinUpdate
     */
    description?: string;
    /**
     * URL viewer is taken to when they click pin.
     * @type {string}
     * @memberof PinUpdate
     */
    link?: string;
    /**
     * The native pin title that creators explicitly prefer to display.
     * @type {string}
     * @memberof PinUpdate
     */
    title?: string;
    /**
     * Carousel Pin slots data.
     * @type {Array<PinUpdateCarouselSlotsInner>}
     * @memberof PinUpdate
     */
    carousel_slots?: Array<PinUpdateCarouselSlotsInner>;
    /**
     * Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>.
     * @type {string}
     * @memberof PinUpdate
     */
    note?: string;
}

/**
 * 
 * @export
 */
export type PinUpdateCarouselSlotsInner = {
    /**
     * Carousel Pin slot title.
     * @type {string}
     * @memberof PinUpdateCarouselSlotsInner
     */
    title?: string;
    /**
     * Carousel Pin slot description.
     * @type {string}
     * @memberof PinUpdateCarouselSlotsInner
     */
    description?: string;
    /**
     * Carousel Pin slot link.
     * @type {string}
     * @memberof PinUpdateCarouselSlotsInner
     */
    link?: string;
}

/**
 * 
 * @export
 */
export type PinsAnalyticsMetricTypesParameterInner = {
}

/**
 * 
 * @export
 */
export type PinsList200Response = {
    /**
     * 
     * @type {Array<Pin>}
     * @memberof PinsList200Response
     */
    items: Array<Pin>;
    /**
     * 
     * @type {string}
     * @memberof PinsList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type PinsSaveRequest = {
    /**
     * Unique identifier of the board to which the pin will be saved.
     * @type {string}
     * @memberof PinsSaveRequest
     */
    board_id?: string;
    /**
     * Unique identifier of the board section to which the pin will be saved.
     * @type {string}
     * @memberof PinsSaveRequest
     */
    board_section_id?: string;
}

/**
 * Optional for VISITOR `audience_type`. With the Pinterest tag, you can use event data to capture event details from your website. This object lists all the available predefined event data fields in the Pinterest tag. You can include these event data fields as part of a VISITOR audience’s `rule`; however, you **must** specify an `event` for the `event_data` fields to be evaluated. Besides what’s listed, you can also create your own set of `event_data` fields and define their usages or purposes according to your website needs. However, the benefit of using the predefined event data fields is that we can provide various metrics based on those fields\' data.<br>Examples per `event` type:<br>`pagevisit`<br>\"event_data\": { \"page_name\": \"My online store 123 | view items | shoe\" }<br>`signup`<br>\"event_data\": { \"lead_type\": \"New release promotion\" }<br>`checkout`<br>\"event_data\": { \"value\": 116, \"order_quantity\": 2, \"currency\": \"USD\", \"line_items\": [ { \"product_name\": \"Pillows (Set of 2)\", \"product_id\": \"11\", \"product_price\": 48, \"product_quantity\": 1 }, { \"product_name\": \"Pillows, Large (Set of 2)\", \"product_id\": \"15\", \"product_price\": 68, \"product_quantity\": 1 } ] }<br>`addtocart`<br>\"event_data\": { \"value\": 499, \"order_quantity\": 1, \"currency\": \"USD\", \"line_items\": [ { \"product_name\": \"Red leather boots\", \"product_id\": \"3486\", \"product_category\": \"shoe\", \"product_variant_id\": \"JB11103000\", \"product_price\": 499, \"product_quantity\": \"1\", \"product_brand\": \"My brand\" }]}<br>`watchvideo`<br>\"event_data\": { \"video_title\": \"My Product Video 01\" }<br>`lead`<br>\"event_data\": { \"lead_type\": \"Newsletter\" }
 * @export
 */
export type PinterestTagEventData = {
    /**
     * 
     * @type {Currency}
     * @memberof PinterestTagEventData
     */
    currency?: Currency;
    /**
     * Promotion code. For example, \"Newsletter\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    lead_type?: string;
    /**
     * 
     * @type {LineItem}
     * @memberof PinterestTagEventData
     */
    line_items?: LineItem;
    /**
     * Order ID. For example, \"X-151481\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    order_id?: string;
    /**
     * Order quantity. For example, 1.
     * @type {number}
     * @memberof PinterestTagEventData
     */
    order_quantity?: number;
    /**
     * Page name. For example, \"Our Favorite Pins on Pinterest\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    page_name?: string;
    /**
     * Promotion code. For example, \"WINTER10\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    promo_code?: string;
    /**
     * Property. For example, \"Athleta\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    property?: string;
    /**
     * Search query string. For example, \"boots\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    search_query?: string;
    /**
     * Product value. For example, \"199.98\"
     * @type {string}
     * @memberof PinterestTagEventData
     */
    value?: string;
    /**
     * Video title. For example, \"How to style your Parker Boots\".
     * @type {string}
     * @memberof PinterestTagEventData
     */
    video_title?: string;
}

/**
 * Campaign placement group type
 * @export
 * @enum {string}
 */
export type PlacementGroupType = 'ALL' | 'SEARCH' | 'BROWSE' | 'OTHER';

/**
 * 
 * @export
 */
export type PriceFilter = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCurrencyCriteria}
     * @memberof PriceFilter
     */
    PRICE: CatalogsProductGroupPricingCurrencyCriteria;
}

/**
 * Default availability for products in a feed.
 * @export
 * @enum {string}
 */
export type ProductAvailabilityType = 'IN_STOCK' | 'OUT_OF_STOCK' | 'PREORDER' | 'null';

/**
 * 
 * @export
 */
export type ProductGroupAnalyticsResponseInner = {
    [key: string]: AnyType | any;

    /**
     * The ID of the product group that this metrics belongs to.
     * @type {string}
     * @memberof ProductGroupAnalyticsResponseInner
     */
    PRODUCT_GROUP_ID: string;
    /**
     * Current metrics date. Only returned when granularity is a time-based value (`DAY`, `HOUR`, `WEEK`, `MONTH`)
     * @type {Date}
     * @memberof ProductGroupAnalyticsResponseInner
     */
    DATE?: Date;
}

/**
 * 
 * @export
 */
export type ProductGroupPromotion = {
    /**
     * ID of the product group promotion.
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    id?: string;
    /**
     * ID of the ad group the product group belongs to.
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    ad_group_id?: string;
    /**
     * The bid in micro currency.
     * @type {number}
     * @memberof ProductGroupPromotion
     */
    bid_in_micro_currency?: number;
    /**
     * True if the group is BIDDABLE, false if it should be EXCLUDED from serving ads.
     * @type {boolean}
     * @memberof ProductGroupPromotion
     */
    included?: boolean;
    /**
     * The full product group definition path
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    definition?: string;
    /**
     * The definition of the product group, relative to its parent - an attribute name/value pair
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    relative_definition?: string;
    /**
     * The parent Product Group ID of this Product Group
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    parent_id?: string;
    /**
     * Slideshow Collections Title
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    slideshow_collections_title?: string;
    /**
     * Slideshow Collections Description
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    slideshow_collections_description?: string;
    /**
     * If set to true products promoted in this product group will use the Mobile Deep Link specified in your catalog
     * @type {boolean}
     * @memberof ProductGroupPromotion
     */
    is_mdl?: boolean;
    /**
     * 
     * @type {EntityStatus}
     * @memberof ProductGroupPromotion
     */
    status?: EntityStatus;
    /**
     * Tracking template for proudct group promotions. 4000 limit
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    tracking_url?: string;
    /**
     * ID of the catalogs product group that this product group promotion references
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    catalog_product_group_id?: string;
    /**
     * Catalogs product group name
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    catalog_product_group_name?: string;
    /**
     * 
     * @type {CreativeType}
     * @memberof ProductGroupPromotion
     */
    creative_type?: CreativeType;
    /**
     * Hero Pin ID if this PG is promoted as a Collection
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    collections_hero_pin_id?: string;
    /**
     * Collections Hero Destination Url
     * @type {string}
     * @memberof ProductGroupPromotion
     */
    collections_hero_destination_url?: string;
    /**
     * 
     * @type {GridClickType}
     * @memberof ProductGroupPromotion
     */
    grid_click_type?: GridClickType;
}

/**
 * 
 * @export
 */
export type ProductGroupPromotionCreateRequest = {
    /**
     * ID of the Ad Group the Product Group Promotion belongs to.
     * @type {string}
     * @memberof ProductGroupPromotionCreateRequest
     */
    ad_group_id: string;
    /**
     * 
     * @type {Array<ProductGroupPromotion>}
     * @memberof ProductGroupPromotionCreateRequest
     */
    product_group_promotion: Array<ProductGroupPromotion>;
}

/**
 * 
 * @export
 */
export type ProductGroupPromotionResponse = {
    /**
     * 
     * @type {Array<ProductGroupPromotionResponseItem>}
     * @memberof ProductGroupPromotionResponse
     */
    items?: Array<ProductGroupPromotionResponseItem>;
}

/**
 * 
 * @export
 */
export type ProductGroupPromotionResponseItem = {
    /**
     * 
     * @type {ProductGroupPromotion}
     * @memberof ProductGroupPromotionResponseItem
     */
    data?: ProductGroupPromotion;
    /**
     * 
     * @type {Array<Exception>}
     * @memberof ProductGroupPromotionResponseItem
     */
    exceptions?: Array<Exception>;
}

/**
 * 
 * @export
 */
export type ProductGroupPromotionUpdateRequest = {
    /**
     * ID of the ad group the product group belongs to.
     * @type {string}
     * @memberof ProductGroupPromotionUpdateRequest
     */
    ad_group_id: string;
    /**
     * 
     * @type {Array<ProductGroupPromotion>}
     * @memberof ProductGroupPromotionUpdateRequest
     */
    product_group_promotion: Array<ProductGroupPromotion>;
}

/**
 * 
 * @export
 */
export type ProductGroupPromotionsList200Response = {
    /**
     * 
     * @type {Array<ProductGroupPromotionResponseItem>}
     * @memberof ProductGroupPromotionsList200Response
     */
    items: Array<ProductGroupPromotionResponseItem>;
    /**
     * 
     * @type {string}
     * @memberof ProductGroupPromotionsList200Response
     */
    bookmark?: string;
}

/**
 * Summary status for product group
 * @export
 * @enum {string}
 */
export type ProductGroupSummaryStatus = 'RUNNING' | 'PAUSED' | 'EXCLUDED' | 'ARCHIVED';

/**
 * 
 * @export
 */
export type ProductType0Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType0Filter
     */
    PRODUCT_TYPE_0: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType1Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType1Filter
     */
    PRODUCT_TYPE_1: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType2Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType2Filter
     */
    PRODUCT_TYPE_2: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType3Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType3Filter
     */
    PRODUCT_TYPE_3: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType4Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType4Filter
     */
    PRODUCT_TYPE_4: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * This field includes all quiz data including questions, options, and results.
 * @export
 */
export type QuizPinData = {
    /**
     * 
     * @type {Array<QuizPinQuestion>}
     * @memberof QuizPinData
     */
    questions?: Array<QuizPinQuestion>;
    /**
     * 
     * @type {Array<QuizPinResult>}
     * @memberof QuizPinData
     */
    results?: Array<QuizPinResult>;
}

/**
 *  This field contains multiple options to a quiz question.
 * @export
 */
export type QuizPinOption = {
    /**
     * 
     * @type {number}
     * @memberof QuizPinOption
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizPinOption
     */
    text?: string;
}

/**
 * A specific quiz inquiry.
 * @export
 */
export type QuizPinQuestion = {
    /**
     * 
     * @type {number}
     * @memberof QuizPinQuestion
     */
    question_id?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizPinQuestion
     */
    question_text?: string;
    /**
     * 
     * @type {Array<QuizPinOption>}
     * @memberof QuizPinQuestion
     */
    options?: Array<QuizPinOption>;
}

/**
 * The result, and link out, based on the user’s choice.
 * @export
 */
export type QuizPinResult = {
    /**
     * 
     * @type {string}
     * @memberof QuizPinResult
     */
    organic_pin_id?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizPinResult
     */
    android_deep_link?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizPinResult
     */
    ios_deep_link?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizPinResult
     */
    destination_url?: string;
    /**
     * 
     * @type {number}
     * @memberof QuizPinResult
     */
    result_id?: number;
}

/**
 * 
 * @export
 */
export type RelatedTerms = {
    /**
     * First input term. For example, if you pass \"?terms=clothes,workout\", then id will be \"clothes\"
     * @type {string}
     * @memberof RelatedTerms
     */
    id?: string;
    /**
     * Total number of related terms returned
     * @type {number}
     * @memberof RelatedTerms
     */
    related_term_count?: number;
    /**
     * The id of the advertiser.
     * @type {Array<RelatedTermsRelatedTermsListInner>}
     * @memberof RelatedTerms
     */
    related_terms_list?: Array<RelatedTermsRelatedTermsListInner>;
}

/**
 * 
 * @export
 */
export type RelatedTermsRelatedTermsListInner = {
    /**
     * 
     * @type {string}
     * @memberof RelatedTermsRelatedTermsListInner
     */
    term?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RelatedTermsRelatedTermsListInner
     */
    related_terms?: Array<string>;
}

/**
 * Reporting columns
 * @export
 * @enum {string}
 */
export type ReportingColumnAsync = 'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'OUTBOUND_CTR' | 'COST_PER_OUTBOUND_CLICK' | 'CAMPAIGN_NAME' | 'CAMPAIGN_STATUS' | 'PIN_PROMOTION_STATUS' | 'AD_STATUS' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_MANAGED_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_NAME' | 'AD_GROUP_STATUS' | 'AD_GROUP_ENTITY_STATUS' | 'PRODUCT_GROUP_ID' | 'PRODUCT_GROUP_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_PAGE_VISIT' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CUSTOM' | 'TOTAL_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SEARCH' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY' | 'TOTAL_ENGAGEMENT_APP_INSTALL' | 'TOTAL_ENGAGEMENT_UNKNOWN' | 'TOTAL_CLICK_PAGE_VISIT' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CUSTOM' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SEARCH' | 'TOTAL_CLICK_WATCH_VIDEO' | 'TOTAL_CLICK_VIEW_CATEGORY' | 'TOTAL_CLICK_APP_INSTALL' | 'TOTAL_CLICK_UNKNOWN' | 'TOTAL_VIEW_PAGE_VISIT' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CUSTOM' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SEARCH' | 'TOTAL_VIEW_WATCH_VIDEO' | 'TOTAL_VIEW_VIEW_CATEGORY' | 'TOTAL_VIEW_APP_INSTALL' | 'TOTAL_VIEW_UNKNOWN' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY' | 'TOTAL_ENGAGEMENT_SIGNUP_QUANTITY' | 'TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY' | 'TOTAL_ENGAGEMENT_CUSTOM_QUANTITY' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY' | 'TOTAL_ENGAGEMENT_LEAD_QUANTITY' | 'TOTAL_ENGAGEMENT_SEARCH_QUANTITY' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY' | 'TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY' | 'TOTAL_CLICK_PAGE_VISIT_QUANTITY' | 'TOTAL_CLICK_SIGNUP_QUANTITY' | 'TOTAL_CLICK_CHECKOUT_QUANTITY' | 'TOTAL_CLICK_CUSTOM_QUANTITY' | 'TOTAL_CLICK_ADD_TO_CART_QUANTITY' | 'TOTAL_CLICK_LEAD_QUANTITY' | 'TOTAL_CLICK_SEARCH_QUANTITY' | 'TOTAL_CLICK_WATCH_VIDEO_QUANTITY' | 'TOTAL_CLICK_VIEW_CATEGORY_QUANTITY' | 'TOTAL_CLICK_UNKNOWN_QUANTITY' | 'TOTAL_VIEW_PAGE_VISIT_QUANTITY' | 'TOTAL_VIEW_SIGNUP_QUANTITY' | 'TOTAL_VIEW_CHECKOUT_QUANTITY' | 'TOTAL_VIEW_CUSTOM_QUANTITY' | 'TOTAL_VIEW_ADD_TO_CART_QUANTITY' | 'TOTAL_VIEW_LEAD_QUANTITY' | 'TOTAL_VIEW_SEARCH_QUANTITY' | 'TOTAL_VIEW_WATCH_VIDEO_QUANTITY' | 'TOTAL_VIEW_VIEW_CATEGORY_QUANTITY' | 'TOTAL_VIEW_UNKNOWN_QUANTITY' | 'TOTAL_CONVERSIONS_QUANTITY' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'ONSITE_CHECKOUTS_1' | 'PIN_PROMOTION_NAME' | 'AD_NAME' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_APP_INSTALL' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_QUANTITY' | 'PAGE_VISIT_COST_PER_ACTION' | 'APP_INSTALL_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_3SEC_VIEWS_1' | 'VIDEO_P100_COMPLETE_1' | 'VIDEO_P0_COMBINED_1' | 'VIDEO_P25_COMBINED_1' | 'VIDEO_P50_COMBINED_1' | 'VIDEO_P75_COMBINED_1' | 'VIDEO_P95_COMBINED_1' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'CPV_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'CPCV_IN_MICRO_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'CPCV_P95_IN_MICRO_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'VIDEO_AVG_WATCHTIME_IN_SECOND_1' | 'VIDEO_AVG_WATCHTIME_IN_SECOND_2' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'INAPP_CHECKOUT_ROAS' | 'TOTAL_INAPP_CHECKOUT' | 'TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_CHECKOUT' | 'TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_CHECKOUT' | 'TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_CHECKOUT_COST_PER_ACTION' | 'OFFLINE_CHECKOUT_ROAS' | 'TOTAL_OFFLINE_CHECKOUT' | 'TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CHECKOUT' | 'TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CHECKOUT' | 'TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'PINTEREST_CHECKOUT_COST_PER_ACTION' | 'PINTEREST_CHECKOUT_ROAS' | 'TOTAL_PINTEREST_CHECKOUT' | 'TOTAL_PINTEREST_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'WEB_ADD_TO_CART_COST_PER_ACTION' | 'WEB_ADD_TO_CART_ROAS' | 'TOTAL_WEB_ADD_TO_CART' | 'TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_ADD_TO_CART' | 'TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_ADD_TO_CART' | 'TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'INAPP_ADD_TO_CART_COST_PER_ACTION' | 'INAPP_ADD_TO_CART_ROAS' | 'TOTAL_INAPP_ADD_TO_CART' | 'TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_ADD_TO_CART' | 'TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_ADD_TO_CART' | 'TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'WEB_PAGE_VISIT_COST_PER_ACTION' | 'WEB_PAGE_VISIT_ROAS' | 'TOTAL_WEB_PAGE_VISIT' | 'TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_PAGE_VISIT' | 'TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_PAGE_VISIT' | 'TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'WEB_SIGNUP_COST_PER_ACTION' | 'WEB_SIGNUP_ROAS' | 'TOTAL_WEB_SIGNUP' | 'TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_SIGNUP' | 'TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_SIGNUP' | 'TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'INAPP_SIGNUP_COST_PER_ACTION' | 'INAPP_SIGNUP_ROAS' | 'TOTAL_INAPP_SIGNUP' | 'TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_SIGNUP' | 'TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_SIGNUP' | 'TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_SIGNUP_COST_PER_ACTION' | 'OFFLINE_SIGNUP_ROAS' | 'TOTAL_OFFLINE_SIGNUP' | 'TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_SIGNUP' | 'TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_SIGNUP' | 'TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'WEB_WATCH_VIDEO_COST_PER_ACTION' | 'WEB_WATCH_VIDEO_ROAS' | 'TOTAL_WEB_WATCH_VIDEO' | 'TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_WATCH_VIDEO' | 'TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_WATCH_VIDEO' | 'TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'WEB_LEAD_COST_PER_ACTION' | 'WEB_LEAD_ROAS' | 'TOTAL_WEB_LEAD' | 'TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_LEAD' | 'TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_LEAD' | 'TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_LEAD' | 'TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_LEAD_COST_PER_ACTION' | 'OFFLINE_LEAD_ROAS' | 'TOTAL_OFFLINE_LEAD' | 'TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_LEAD' | 'TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_LEAD' | 'TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'WEB_SEARCH_COST_PER_ACTION' | 'WEB_SEARCH_ROAS' | 'TOTAL_WEB_SEARCH' | 'TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_SEARCH' | 'TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SEARCH' | 'TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_SEARCH' | 'TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'INAPP_SEARCH_COST_PER_ACTION' | 'INAPP_SEARCH_ROAS' | 'TOTAL_INAPP_SEARCH' | 'TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_SEARCH' | 'TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_SEARCH' | 'TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'WEB_VIEW_CATEGORY_COST_PER_ACTION' | 'WEB_VIEW_CATEGORY_ROAS' | 'TOTAL_WEB_VIEW_CATEGORY' | 'TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'WEB_CUSTOM_COST_PER_ACTION' | 'WEB_CUSTOM_ROAS' | 'TOTAL_WEB_CUSTOM' | 'TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CUSTOM' | 'TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CUSTOM' | 'TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_CUSTOM_COST_PER_ACTION' | 'OFFLINE_CUSTOM_ROAS' | 'TOTAL_OFFLINE_CUSTOM' | 'TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CUSTOM' | 'TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CUSTOM' | 'TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'WEB_UNKNOWN_COST_PER_ACTION' | 'WEB_UNKNOWN_ROAS' | 'TOTAL_WEB_UNKNOWN' | 'TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_UNKNOWN' | 'TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_UNKNOWN' | 'TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'INAPP_UNKNOWN_COST_PER_ACTION' | 'INAPP_UNKNOWN_ROAS' | 'TOTAL_INAPP_UNKNOWN' | 'TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_UNKNOWN' | 'TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_UNKNOWN' | 'TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_UNKNOWN_COST_PER_ACTION' | 'OFFLINE_UNKNOWN_ROAS' | 'TOTAL_OFFLINE_UNKNOWN' | 'TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_UNKNOWN' | 'TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_UNKNOWN' | 'TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'INAPP_APP_INSTALL_COST_PER_ACTION' | 'INAPP_APP_INSTALL_ROAS' | 'TOTAL_INAPP_APP_INSTALL' | 'TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_APP_INSTALL' | 'TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_APP_INSTALL' | 'TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE' | 'STANDARD_AD_FEED_ITEM_ID';

/**
 * An internal role type used on business access, EMPLOYEE, ADMIN.
 * @export
 * @enum {string}
 */
export type Role = 'UNKNOWN' | 'OWNER' | 'ADMIN' | 'ANALYST' | 'SOS_READER' | 'FINANCE_MANAGER' | 'AUDIENCE_MANAGER' | 'CAMPAIGN_MANAGER' | 'CATALOGS_MANAGER' | 'RESTRICTED_OWNER' | 'PROFILE_MANAGER' | 'PROFILE_PUBLISHER' | 'RESOURCE_PINNER_LIST_OWNER' | 'RESOURCE_PINNER_LIST_READER' | 'BIZ_PINNER_LIST_SHARER' | 'RESOURCE_CONVERSION_TAGS_READER';

/**
 * 
 * @export
 */
export type SSIOAccountAddress = {
    /**
     * Address display
     * @type {string}
     * @memberof SSIOAccountAddress
     */
    display?: string;
    /**
     * Purpose for which the address is used, usually Billing or Businness
     * @type {string}
     * @memberof SSIOAccountAddress
     */
    purpose?: string;
    /**
     * Salesforce id for address
     * @type {string}
     * @memberof SSIOAccountAddress
     */
    address_id?: string;
    /**
     * Legal entity for this insertion order
     * @type {string}
     * @memberof SSIOAccountAddress
     */
    order_legal_entity?: string;
}

/**
 * 
 * @export
 */
export type SSIOAccountItem = {
    /**
     * Salesforce id for billto_info
     * @type {string}
     * @memberof SSIOAccountItem
     */
    id?: string;
    /**
     * Salesforce id for IO Terms and Conditions
     * @type {string}
     * @memberof SSIOAccountItem
     */
    io_terms_id?: string;
    /**
     * Salesforce text for IO Terms and Conditions
     * @type {string}
     * @memberof SSIOAccountItem
     */
    io_terms?: string;
    /**
     * Salesforce id for US Terms and Conditions
     * @type {string}
     * @memberof SSIOAccountItem
     */
    us_terms_id?: string;
    /**
     * Salesforce text for US Terms and Conditions
     * @type {string}
     * @memberof SSIOAccountItem
     */
    us_terms?: string;
    /**
     * Salesforce id for Rest of the World Terms and Conditions
     * @type {string}
     * @memberof SSIOAccountItem
     */
    row_terms_id?: string;
    /**
     * Salesforce text for Rest of the World Terms and Conditions
     * @type {string}
     * @memberof SSIOAccountItem
     */
    row_terms?: string;
    /**
     * Insertion Order Type - Pinterest Paper or Agency Paper
     * @type {string}
     * @memberof SSIOAccountItem
     */
    io_type?: string;
    /**
     * Address information that is associated with this account.
     * @type {Array<SSIOAccountAddress>}
     * @memberof SSIOAccountItem
     */
    addresses?: Array<SSIOAccountAddress>;
}

/**
 * 
 * @export
 */
export type SSIOAccountPMPName = {
    /**
     * Display name
     * @type {string}
     * @memberof SSIOAccountPMPName
     */
    name?: string;
    /**
     * Salesforce id for PMP
     * @type {string}
     * @memberof SSIOAccountPMPName
     */
    id?: string;
}

/**
 * 
 * @export
 */
export type SSIOAccountResponse = {
    /**
     * Advertiser eligible to create order lines
     * @type {boolean}
     * @memberof SSIOAccountResponse
     */
    eligible?: boolean;
    /**
     * Advertiser eligible to update order lines
     * @type {boolean}
     * @memberof SSIOAccountResponse
     */
    can_edit?: boolean;
    /**
     * An array of Salesforce account information that includes address, io terms, etc.
     * @type {Array<SSIOAccountItem>}
     * @memberof SSIOAccountResponse
     */
    billto_infos?: Array<SSIOAccountItem>;
    /**
     * 
     * @type {string}
     * @memberof SSIOAccountResponse
     */
    currency?: string;
    /**
     * 
     * @type {Array<SSIOAccountPMPName>}
     * @memberof SSIOAccountResponse
     */
    pmp_names?: Array<SSIOAccountPMPName>;
    /**
     * Error indicator from Salesforce which could be \"No Error\"
     * @type {string}
     * @memberof SSIOAccountResponse
     */
    error?: string;
}


            export type SSIOCreateInsertionOrderRequestOrderLineTypeEnum = 'BUDGET' | 'PERPETUALS';
/**
 * 
 * @export
 */
export type SSIOCreateInsertionOrderRequest = {
    /**
     * Starting date of time period. Format: YYYY-MM-DD
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    start_date: string;
    /**
     * End date of time period. Format: YYYY-MM-DD
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    end_date?: string;
    /**
     * The po number
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    po_number: string;
    /**
     * If Budget order line, the budget amount.
     * @type {number}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    budget_amount?: number;
    /**
     * The billing contact first name
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    billing_contact_firstname: string;
    /**
     * The billing contact last name
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    billing_contact_lastname: string;
    /**
     * The billing contact email
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    billing_contact_email: string;
    /**
     * The media contact first name
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    media_contact_firstname: string;
    /**
     * The media contact last name
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    media_contact_lastname: string;
    /**
     * The media contact email
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    media_contact_email: string;
    /**
     * URL link for agency
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    agency_link?: string;
    /**
     * The email of user submitting the insertion order
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    user_email?: string;
    /**
     * The UTC timestamp (to the nearest sec) of when terms were accepted
     * @type {number}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    accepted_terms_time?: number;
    /**
     * The pmp id
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    pmp_id: string;
    /**
     * The order name
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    order_name: string;
    /**
     * Type can be Budget or Perpetual
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    order_line_type: SSIOCreateInsertionOrderRequestOrderLineTypeEnum;
    /**
     * The SFDC id for the terms
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    accepted_terms_id: string;
    /**
     * The bill-to company id
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    billto_company_id: string;
    /**
     * The bill-to business address id
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    billto_business_address_id: string;
    /**
     * The bill-to billing address id
     * @type {string}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    billto_billing_address_id: string;
    /**
     * If Ongoing (perpetual) order line, the estimated monthly spend
     * @type {number}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    estimated_monthly_spend?: number;
    /**
     * 
     * @type {Currency}
     * @memberof SSIOCreateInsertionOrderRequest
     */
    currency_info: Currency;
}

/**
 * 
 * @export
 */
export type SSIOCreateInsertionOrderResponse = {
    /**
     * Salesforce order id
     * @type {string}
     * @memberof SSIOCreateInsertionOrderResponse
     */
    pin_order_id?: string;
}

/**
 * 
 * @export
 */
export type SSIOEditInsertionOrderRequest = {
    /**
     * Starting date of time period. Format: YYYY-MM-DD
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    start_date?: string;
    /**
     * End date of time period. Format: YYYY-MM-DD
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    end_date?: string;
    /**
     * The po number
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    po_number?: string;
    /**
     * If Budget order line, the budget amount.
     * @type {number}
     * @memberof SSIOEditInsertionOrderRequest
     */
    budget_amount?: number;
    /**
     * The billing contact first name
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    billing_contact_firstname?: string;
    /**
     * The billing contact last name
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    billing_contact_lastname?: string;
    /**
     * The billing contact email
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    billing_contact_email?: string;
    /**
     * The media contact first name
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    media_contact_firstname?: string;
    /**
     * The media contact last name
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    media_contact_lastname?: string;
    /**
     * The media contact email
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    media_contact_email?: string;
    /**
     * URL link for agency
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    agency_link?: string;
    /**
     * The email of user submitting the insertion order
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    user_email?: string;
    /**
     * LineId in the Oracle DB
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    oracle_line_id?: string;
    /**
     * OrderId in SFDC
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    salesforce_order_id?: string;
    /**
     * OrderLineId in SFDC
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    salesforce_order_line_id?: string;
    /**
     * Ads manager OrderLineId
     * @type {string}
     * @memberof SSIOEditInsertionOrderRequest
     */
    ads_manager_order_line_id?: string;
}

/**
 * 
 * @export
 */
export type SSIOEditInsertionOrderResponse = {
    /**
     * Salesforce order id
     * @type {string}
     * @memberof SSIOEditInsertionOrderResponse
     */
    pin_order_id?: string;
}

/**
 * 
 * @export
 */
export type SSIOInsertionOrderCommon = {
    /**
     * Starting date of time period. Format: YYYY-MM-DD
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    start_date?: string;
    /**
     * End date of time period. Format: YYYY-MM-DD
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    end_date?: string;
    /**
     * The po number
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    po_number?: string;
    /**
     * If Budget order line, the budget amount.
     * @type {number}
     * @memberof SSIOInsertionOrderCommon
     */
    budget_amount?: number;
    /**
     * The billing contact first name
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    billing_contact_firstname?: string;
    /**
     * The billing contact last name
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    billing_contact_lastname?: string;
    /**
     * The billing contact email
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    billing_contact_email?: string;
    /**
     * The media contact first name
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    media_contact_firstname?: string;
    /**
     * The media contact last name
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    media_contact_lastname?: string;
    /**
     * The media contact email
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    media_contact_email?: string;
    /**
     * URL link for agency
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    agency_link?: string;
    /**
     * The email of user submitting the insertion order
     * @type {string}
     * @memberof SSIOInsertionOrderCommon
     */
    user_email?: string;
}

/**
 * 
 * @export
 */
export type SSIOInsertionOrderStatus = {
    /**
     * Salesforce order id
     * @type {string}
     * @memberof SSIOInsertionOrderStatus
     */
    pin_order_id?: string;
    /**
     * Salesforce insertion order status
     * @type {string}
     * @memberof SSIOInsertionOrderStatus
     */
    status?: string;
    /**
     * Salesforce insertion order creation time
     * @type {string}
     * @memberof SSIOInsertionOrderStatus
     */
    creation_time?: string;
}

/**
 * 
 * @export
 */
export type SSIOInsertionOrderStatusResponse = {
    /**
     * Salesforce order id
     * @type {string}
     * @memberof SSIOInsertionOrderStatusResponse
     */
    pin_order_id?: string;
    /**
     * Salesforce insertion order status
     * @type {string}
     * @memberof SSIOInsertionOrderStatusResponse
     */
    status?: string;
    /**
     * Salesforce insertion order creation time
     * @type {string}
     * @memberof SSIOInsertionOrderStatusResponse
     */
    creation_time?: string;
}

/**
 * 
 * @export
 */
export type SSIOOrderLine = {
    /**
     * OrderLineId in SFDC
     * @type {string}
     * @memberof SSIOOrderLine
     */
    salesforce_order_line_id?: string;
    /**
     * Ads manager OrderLineId
     * @type {string}
     * @memberof SSIOOrderLine
     */
    ads_manager_order_line_id?: string;
    /**
     * The pin order id associated with the order line in SFDC
     * @type {string}
     * @memberof SSIOOrderLine
     */
    pin_order_id?: string;
    /**
     * Last modified date.
     * @type {string}
     * @memberof SSIOOrderLine
     */
    last_modified_date_time?: string;
    /**
     * Start date of the order line.
     * @type {Date}
     * @memberof SSIOOrderLine
     */
    start_date?: Date;
    /**
     * End date of the order line.
     * @type {Date}
     * @memberof SSIOOrderLine
     */
    end_date?: Date;
    /**
     * Bill To Company name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    bill_to_company_name?: string;
    /**
     * Billing contact first name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    billing_contact_firstname?: string;
    /**
     * Billing contact last name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    billing_contact_lastname?: string;
    /**
     * Billing contact email
     * @type {string}
     * @memberof SSIOOrderLine
     */
    billing_contact_email?: string;
    /**
     * Billing media email
     * @type {string}
     * @memberof SSIOOrderLine
     */
    media_contact_email?: string;
    /**
     * Billing contact first name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    media_contact_firstname?: string;
    /**
     * Billing contact first name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    media_contact_lastname?: string;
    /**
     * 
     * @type {Currency}
     * @memberof SSIOOrderLine
     */
    currency_info?: Currency;
    /**
     * Agency link
     * @type {string}
     * @memberof SSIOOrderLine
     */
    agency_link?: string;
    /**
     * The po number
     * @type {string}
     * @memberof SSIOOrderLine
     */
    po_number?: string;
    /**
     * The order name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    order_name?: string;
    /**
     * The Pinterest marketing partner name
     * @type {string}
     * @memberof SSIOOrderLine
     */
    pmp_name?: string;
    /**
     * The SFDC id for the terms
     * @type {string}
     * @memberof SSIOOrderLine
     */
    accepted_terms_id?: string;
    /**
     * The UTC timestamp (to the nearest sec) of when terms were accepted
     * @type {string}
     * @memberof SSIOOrderLine
     */
    accepted_terms_time?: string;
    /**
     * If Budget order line, the budget amount.
     * @type {number}
     * @memberof SSIOOrderLine
     */
    budget_amount?: number;
    /**
     * If Ongoing (perpetual) order line, the estimated monthly spend
     * @type {number}
     * @memberof SSIOOrderLine
     */
    estimated_monthly_spend?: number;
}

/**
 * 
 * @export
 */
export type SearchPartnerPins200Response = {
    /**
     * 
     * @type {Array<SummaryPin>}
     * @memberof SearchPartnerPins200Response
     */
    items: Array<SummaryPin>;
    /**
     * 
     * @type {string}
     * @memberof SearchPartnerPins200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type SearchUserBoardsGet200Response = {
    /**
     * items
     * @type {Array<Board>}
     * @memberof SearchUserBoardsGet200Response
     */
    items: Array<Board>;
    /**
     * 
     * @type {string}
     * @memberof SearchUserBoardsGet200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type SingleInterestTargetingOptionResponse = {
    /**
     * 
     * @type {string}
     * @memberof SingleInterestTargetingOptionResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SingleInterestTargetingOptionResponse
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SingleInterestTargetingOptionResponse
     */
    child_interests?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SingleInterestTargetingOptionResponse
     */
    level?: number;
}

/**
 * 
 * @export
 */
export type SsioInsertionOrdersStatusGetByAdAccount200Response = {
    /**
     * Insertion orders status by ad acount id
     * @type {Array<SSIOInsertionOrderStatus>}
     * @memberof SsioInsertionOrdersStatusGetByAdAccount200Response
     */
    items: Array<SSIOInsertionOrderStatus>;
    /**
     * 
     * @type {string}
     * @memberof SsioInsertionOrdersStatusGetByAdAccount200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type SsioOrderLinesGetByAdAccount200Response = {
    /**
     * SSIO order lines by ad acount id
     * @type {Array<SSIOOrderLine>}
     * @memberof SsioOrderLinesGetByAdAccount200Response
     */
    items: Array<SSIOOrderLine>;
    /**
     * 
     * @type {string}
     * @memberof SsioOrderLinesGetByAdAccount200Response
     */
    bookmark?: string;
}

/**
 * Summarized pin information
 * @export
 */
export type SummaryPin = {
    /**
     * 
     * @type {SummaryPinMedia}
     * @memberof SummaryPin
     */
    media?: SummaryPinMedia;
    /**
     * 
     * @type {string}
     * @memberof SummaryPin
     */
    alt_text?: string;
    /**
     * 
     * @type {string}
     * @memberof SummaryPin
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof SummaryPin
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SummaryPin
     */
    description?: string;
}

/**
 * 
 * @export
 */
export type SummaryPinMedia = {
} & PinMedia

/**
 * Advertiser\'s ISO two character country code.
 * @export
 * @enum {string}
 */
export type TargetingAdvertiserCountry = 'US' | 'GB' | 'CA' | 'IE' | 'AU' | 'NZ' | 'FR' | 'SE' | 'IL' | 'DE' | 'AT' | 'IT' | 'ES' | 'NL' | 'BE' | 'PT' | 'CH' | 'HK' | 'JP' | 'KR' | 'SG' | 'NO' | 'DK' | 'FI' | 'CY' | 'LU' | 'MT' | 'PL' | 'RO' | 'HU' | 'CZ' | 'GR' | 'SK' | 'BR' | 'MX' | 'AR' | 'CL' | 'CO';


            export type TargetingSpecAGEBUCKETEnum = '18-24' | '21+' | '25-34' | '35-44' | '45-49' | '50-54' | '55-64' | '65+';

            export type TargetingSpecAPPTYPEEnum = 'android_mobile' | 'android_tablet' | 'ipad' | 'iphone' | 'web' | 'web_mobile';

            export type TargetingSpecGENDEREnum = 'unknown' | 'male' | 'female';

            export type TargetingSpecTARGETINGSTRATEGYEnum = 'CHOOSE_YOUR_OWN' | 'FIND_NEW_CUSTOMERS' | 'RECONNECT_WITH_USERS';
/**
 * Ad group targeting specification defining the ad group target audience. For example, {\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}
 * @export
 */
export type TargetingSpec = {
    /**
     * Age ranges. If the AGE_BUCKET field is missing, the default behavior in terms of ad delivery is that **All age buckets** will be targeted.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    AGE_BUCKET?: Array<TargetingSpecAGEBUCKETEnum>;
    /**
     * Allowed devices. If the APPTYPE field is missing, the default behavior in terms of ad delivery is that **All devices/apptypes** will be targeted.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    APPTYPE?: Array<TargetingSpecAPPTYPEEnum>;
    /**
     * Excluded customer list IDs. Used to drive new customer acquisition goals. For example: [\"2542620905475\"]. Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_EXCLUDE field is missing, the default behavior in terms of ad delivery is that **No users will be excluded**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    AUDIENCE_EXCLUDE?: Array<string>;
    /**
     * Targeted customer list IDs. For example: [\"2542620905473\"]. Audience lists need to have at least 100 people with Pinterest accounts in them Audience lists need to have at least 100 people with Pinterest accounts in them. If the AUDIENCE_INCLUDE field is missing, the default behavior in terms of ad delivery is that **All users will be included**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    AUDIENCE_INCLUDE?: Array<string>;
    /**
     * Targeted genders. Values: [\"unknown\",\"male\",\"female\"]. If the GENDER field is missing, the default behavior in terms of ad delivery is that **All genders will be targeted**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    GENDER?: Array<TargetingSpecGENDEREnum>;
    /**
     * Location region codes, e.g., \"BE-VOV\" (East Flanders, Belgium) For complete list, <a href=\"https://help.pinterest.com/sub/helpcenter/partner/pinterest_location_targeting_codes.xlsx\" target=\"_blank\">click here</a> or postal codes, e.g., \"US-94107\". Use either region codes or postal codes but not both. If the GEO field is missing, the default behavior in terms of ad delivery is that **No geos will be selected**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    GEO?: Array<string>;
    /**
     * Array of interest object IDs. If the INTEREST field is missing, the default behavior in terms of ad delivery is that **All interests will be targeted**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    INTEREST?: Array<string>;
    /**
     * 24 ISO 639-1 two letter language codes. If the LOCALE field is missing, the default behavior in terms of ad delivery is that **All languages will be target, only english non-sublanguage will be targeted**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    LOCALE?: Array<string>;
    /**
     * 22 ISO Alpha 2 two letter country codes or US Nielsen DMA (Designated Market Area) codes (location region codes) (e.g., [\"US\", \"807\"]). For complete list, click here. Location-Country and Location-Metro codes apply. If the LOCATION field is missing, the default behavior in terms of ad delivery is that **Selects default country if not specified (US) and all regions within that country**.
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    LOCATION?: Array<string>;
    /**
     * Array of object: lookback_window [Integer]: Number of days ago to start lookback timeframe for dynamic retargeting tag_types [Array of integer]: Event types to target for dynamic retargeting exclusion_window [Integer]: Number of days ago to stop lookback timeframe for dynamic retargeting
     * @type {Array<TargetingSpecSHOPPINGRETARGETING>}
     * @memberof TargetingSpec
     */
    SHOPPING_RETARGETING?: Array<TargetingSpecSHOPPINGRETARGETING>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TargetingSpec
     */
    TARGETING_STRATEGY?: Array<TargetingSpecTARGETINGSTRATEGYEnum>;
}

/**
 * 
 * @export
 */
export type TargetingSpecSHOPPINGRETARGETING = {
    /**
     * Number of days ago to start lookback timeframe for dynamic retargeting
     * @type {number}
     * @memberof TargetingSpecSHOPPINGRETARGETING
     */
    lookback_window?: number;
    /**
     * Event types to target for dynamic retargeting
     * @type {Array<number>}
     * @memberof TargetingSpecSHOPPINGRETARGETING
     */
    tag_types?: Array<number>;
    /**
     * Number of days ago to stop lookback timeframe for dynamic retargeting
     * @type {number}
     * @memberof TargetingSpecSHOPPINGRETARGETING
     */
    exclusion_window?: number;
}

/**
 * 
 * @export
 */
export type TargetingTypeFilter = {
    /**
     * List of targeting types. Requires `level` to be a value ending in `_TARGETING`.
     * @type {Array<AdsAnalyticsTargetingType>}
     * @memberof TargetingTypeFilter
     */
    targeting_types?: Array<AdsAnalyticsTargetingType>;
}


            export type TemplateResponseColumnsEnum = 'SPEND_IN_MICRO_DOLLAR' | 'SPEND_IN_MICRO_US_DOLLAR' | 'BONUS_SPEND_IN_MICRO_DOLLAR' | 'BONUS_SPEND_IN_DOLLAR' | 'PAID_IMPRESSION' | 'PAID_CLICKTHROUGH' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_US_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'CPC_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'OUTBOUND_CTR' | 'CPC_IN_MICRO_CURRENCY' | 'CPW_IN_MICRO_DOLLAR' | 'CPW_IN_DOLLAR' | 'COST_PER_OUTBOUND_CLICK' | 'AD_ONLY_PIN' | 'CAMPAIGN_NAME' | 'CAMPAIGN_STATUS' | 'DATE' | 'BUDGET_IN_DOLLAR' | 'AVAILABLE_BUDGET_IN_DOLLAR' | 'TARGETING_TYPE' | 'TARGETING_VALUE' | 'TARGETING_VALUE_NAME' | 'PAID_EVENTS' | 'BONUS_EVENTS' | 'INSERTION' | 'LEGACY_CAMPAIGN_ID' | 'HBASE_ID' | 'PIN_DESCRIPTION' | 'CAMPAIGN_END_DATE' | 'PIN_PROMOTION_STATUS' | 'AD_STATUS' | 'PIN_ID' | 'CROSS_DEVICE_TYPE' | 'INGESTION_SOURCE' | 'SOURCE_PLATFORM' | 'PIN_PROMOTION_IS_RUNNING' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'CPE_IN_MICRO_DOLLAR' | 'ECPE_IN_MICRO_DOLLAR' | 'CPE_IN_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'INTERNAL_ECPE_IN_MICRO_DOLLAR' | 'INTERNAL_ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPM_IN_DOLLAR' | 'REPIN_RATE' | 'REPIN_RATE_2' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'ADVERTISER_OWNER_USER_ID' | 'ADVERTISER_OWNER_USER_NAME' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'KEYWORD_ID' | 'KEYWORD_IS_DELETED' | 'BRAND_SFDC_ACCOUNT_ID' | 'CAMPAIGN_ACTION_TYPE' | 'CAMPAIGN_BID_TYPE' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_MANAGED_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'BUDGET_TYPE' | 'BUDGET_IN_LOCAL_CURRENCY' | 'AD_GROUP_NAME' | 'AD_GROUP_STATUS' | 'AD_GROUP_END_DATE' | 'AD_GROUP_BUDGET_TYPE' | 'AD_GROUP_BUDGET_IN_LOCAL_CURRENCY' | 'AD_GROUP_SUGGESTED_BUDGET_IN_LOCAL_CURRENCY' | 'AD_GROUP_SUGGESTED_BONUS_BUDGET_IN_LOCAL_CURRENCY' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ACTION_TYPE' | 'AD_GROUP_CONVERSION_LEARNING_MODE_TYPE' | 'AD_GROUP_TARGET_CPA' | 'AD_GROUP_BID_STRATEGY_TYPE' | 'AD_GROUP_EXPERIMENT_NAME' | 'AD_GROUP_EXPERIMENT_CELL' | 'CAMPAIGN_WEB_CLOSEUP_WHITELISTED' | 'PRODUCT_GROUP_ID' | 'PRODUCT_GROUP_DEFINITION' | 'PARENT_PRODUCT_GROUP_ID' | 'PRODUCT_GROUP_TYPE' | 'PRODUCT_GROUP_BID_IN_MICRO_CURRENCY' | 'PRODUCT_GROUP_STATUS' | 'PRODUCT_GROUP_ENTITY_STATUS' | 'PRODUCT_GROUP_INCLUSION' | 'PRODUCT_GROUP_CREATIVE_TYPE' | 'ITEM_ID' | 'PRODUCT_ITEM_ID' | 'INTERNAL_PRODUCT_ITEM_ID' | 'PRODUCT_ITEM_NAME' | 'PRODUCT_ITEM_IMAGE_URL' | 'PRODUCT_ITEM_PRICE' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'ORDER_LINE_PIN_REV_SHARE' | 'ORDER_LINE_PAID_TYPE' | 'SPEND_ORDER_LINE_ID' | 'SPEND_ORDER_LINE_PAID_TYPE' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'LIKE_1' | 'SEND_1' | 'FLAG_1' | 'HIDE_1' | 'INSERTION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_USER_1' | 'REPIN_USER_1' | 'IMPRESSION_USER_1' | 'LIKE_USER_1' | 'SEND_USER_1' | 'FLAG_USER_1' | 'HIDE_USER_1' | 'INSERTION_USER_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'LIKE_2' | 'SEND_2' | 'FLAG_2' | 'OUTBOUND_CLICK_2' | 'CLICKTHROUGH_USER_2' | 'REPIN_USER_2' | 'IMPRESSION_USER_2' | 'LIKE_USER_2' | 'SEND_USER_2' | 'FLAG_USER_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_REPIN' | 'TOTAL_IMPRESSION' | 'TOTAL_LIKE' | 'TOTAL_SEND' | 'TOTAL_FLAG' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_OUTBOUND_CLICK' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'ENGAGEMENT_PAGE_VISIT_1' | 'ENGAGEMENT_SIGNUP_1' | 'ENGAGEMENT_CHECKOUT_1' | 'ENGAGEMENT_CUSTOM_1' | 'ENGAGEMENT_ADD_TO_CART_1' | 'ENGAGEMENT_LEAD_1' | 'ENGAGEMENT_SEARCH_1' | 'ENGAGEMENT_WATCH_VIDEO_1' | 'ENGAGEMENT_VIEW_CATEGORY_1' | 'ENGAGEMENT_APP_INSTALL_1' | 'ENGAGEMENT_UNKNOWN_1' | 'CLICK_PAGE_VISIT_1' | 'CLICK_SIGNUP_1' | 'CLICK_CHECKOUT_1' | 'CLICK_CUSTOM_1' | 'CLICK_ADD_TO_CART_1' | 'CLICK_LEAD_1' | 'CLICK_SEARCH_1' | 'CLICK_WATCH_VIDEO_1' | 'CLICK_VIEW_CATEGORY_1' | 'CLICK_APP_INSTALL_1' | 'CLICK_UNKNOWN_1' | 'VIEW_PAGE_VISIT_1' | 'VIEW_SIGNUP_1' | 'VIEW_CHECKOUT_1' | 'VIEW_CUSTOM_1' | 'VIEW_ADD_TO_CART_1' | 'VIEW_LEAD_1' | 'VIEW_SEARCH_1' | 'VIEW_WATCH_VIDEO_1' | 'VIEW_VIEW_CATEGORY_1' | 'VIEW_APP_INSTALL_1' | 'VIEW_UNKNOWN_1' | 'CONVERSIONS_1' | 'ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_LEAD_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR_1' | 'CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_LEAD_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR_1' | 'VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR_1' | 'CONVERSIONS_VALUE_IN_MICRO_DOLLAR_1' | 'ENGAGEMENT_PAGE_VISIT_QUANTITY_1' | 'ENGAGEMENT_SIGNUP_QUANTITY_1' | 'ENGAGEMENT_CHECKOUT_QUANTITY_1' | 'ENGAGEMENT_CUSTOM_QUANTITY_1' | 'ENGAGEMENT_ADD_TO_CART_QUANTITY_1' | 'ENGAGEMENT_LEAD_QUANTITY_1' | 'ENGAGEMENT_SEARCH_QUANTITY_1' | 'ENGAGEMENT_WATCH_VIDEO_QUANTITY_1' | 'ENGAGEMENT_VIEW_CATEGORY_QUANTITY_1' | 'ENGAGEMENT_APP_INSTALL_QUANTITY_1' | 'ENGAGEMENT_UNKNOWN_QUANTITY_1' | 'CLICK_PAGE_VISIT_QUANTITY_1' | 'CLICK_SIGNUP_QUANTITY_1' | 'CLICK_CHECKOUT_QUANTITY_1' | 'CLICK_CUSTOM_QUANTITY_1' | 'CLICK_ADD_TO_CART_QUANTITY_1' | 'CLICK_LEAD_QUANTITY_1' | 'CLICK_SEARCH_QUANTITY_1' | 'CLICK_WATCH_VIDEO_QUANTITY_1' | 'CLICK_VIEW_CATEGORY_QUANTITY_1' | 'CLICK_APP_INSTALL_QUANTITY_1' | 'CLICK_UNKNOWN_QUANTITY_1' | 'VIEW_PAGE_VISIT_QUANTITY_1' | 'VIEW_SIGNUP_QUANTITY_1' | 'VIEW_CHECKOUT_QUANTITY_1' | 'VIEW_CUSTOM_QUANTITY_1' | 'VIEW_ADD_TO_CART_QUANTITY_1' | 'VIEW_LEAD_QUANTITY_1' | 'VIEW_SEARCH_QUANTITY_1' | 'VIEW_WATCH_VIDEO_QUANTITY_1' | 'VIEW_VIEW_CATEGORY_QUANTITY_1' | 'VIEW_APP_INSTALL_QUANTITY_1' | 'VIEW_UNKNOWN_QUANTITY_1' | 'CONVERSIONS_QUANTITY_1' | 'ENGAGEMENT_PAGE_VISIT_2' | 'ENGAGEMENT_SIGNUP_2' | 'ENGAGEMENT_CHECKOUT_2' | 'ENGAGEMENT_CUSTOM_2' | 'ENGAGEMENT_ADD_TO_CART_2' | 'ENGAGEMENT_LEAD_2' | 'ENGAGEMENT_SEARCH_2' | 'ENGAGEMENT_WATCH_VIDEO_2' | 'ENGAGEMENT_VIEW_CATEGORY_2' | 'ENGAGEMENT_APP_INSTALL_2' | 'ENGAGEMENT_UNKNOWN_2' | 'CLICK_PAGE_VISIT_2' | 'CLICK_SIGNUP_2' | 'CLICK_CHECKOUT_2' | 'CLICK_CUSTOM_2' | 'CLICK_ADD_TO_CART_2' | 'CLICK_LEAD_2' | 'CLICK_SEARCH_2' | 'CLICK_WATCH_VIDEO_2' | 'CLICK_VIEW_CATEGORY_2' | 'CLICK_APP_INSTALL_2' | 'CLICK_UNKNOWN_2' | 'VIEW_PAGE_VISIT_2' | 'VIEW_SIGNUP_2' | 'VIEW_CHECKOUT_2' | 'VIEW_CUSTOM_2' | 'VIEW_ADD_TO_CART_2' | 'VIEW_LEAD_2' | 'VIEW_SEARCH_2' | 'VIEW_WATCH_VIDEO_2' | 'VIEW_VIEW_CATEGORY_2' | 'VIEW_APP_INSTALL_2' | 'VIEW_UNKNOWN_2' | 'CONVERSIONS_2' | 'ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_LEAD_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR_2' | 'CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_LEAD_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR_2' | 'VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR_2' | 'CONVERSIONS_VALUE_IN_MICRO_DOLLAR_2' | 'ENGAGEMENT_PAGE_VISIT_QUANTITY_2' | 'ENGAGEMENT_SIGNUP_QUANTITY_2' | 'ENGAGEMENT_CHECKOUT_QUANTITY_2' | 'ENGAGEMENT_CUSTOM_QUANTITY_2' | 'ENGAGEMENT_ADD_TO_CART_QUANTITY_2' | 'ENGAGEMENT_LEAD_QUANTITY_2' | 'ENGAGEMENT_SEARCH_QUANTITY_2' | 'ENGAGEMENT_WATCH_VIDEO_QUANTITY_2' | 'ENGAGEMENT_VIEW_CATEGORY_QUANTITY_2' | 'ENGAGEMENT_APP_INSTALL_QUANTITY_2' | 'ENGAGEMENT_UNKNOWN_QUANTITY_2' | 'CLICK_PAGE_VISIT_QUANTITY_2' | 'CLICK_SIGNUP_QUANTITY_2' | 'CLICK_CHECKOUT_QUANTITY_2' | 'CLICK_CUSTOM_QUANTITY_2' | 'CLICK_ADD_TO_CART_QUANTITY_2' | 'CLICK_LEAD_QUANTITY_2' | 'CLICK_SEARCH_QUANTITY_2' | 'CLICK_WATCH_VIDEO_QUANTITY_2' | 'CLICK_VIEW_CATEGORY_QUANTITY_2' | 'CLICK_APP_INSTALL_QUANTITY_2' | 'CLICK_UNKNOWN_QUANTITY_2' | 'VIEW_PAGE_VISIT_QUANTITY_2' | 'VIEW_SIGNUP_QUANTITY_2' | 'VIEW_CHECKOUT_QUANTITY_2' | 'VIEW_CUSTOM_QUANTITY_2' | 'VIEW_ADD_TO_CART_QUANTITY_2' | 'VIEW_LEAD_QUANTITY_2' | 'VIEW_SEARCH_QUANTITY_2' | 'VIEW_WATCH_VIDEO_QUANTITY_2' | 'VIEW_VIEW_CATEGORY_QUANTITY_2' | 'VIEW_APP_INSTALL_QUANTITY_2' | 'VIEW_UNKNOWN_QUANTITY_2' | 'CONVERSIONS_QUANTITY_2' | 'TOTAL_ENGAGEMENT_PAGE_VISIT' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CUSTOM' | 'TOTAL_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SEARCH' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY' | 'TOTAL_ENGAGEMENT_APP_INSTALL' | 'TOTAL_ENGAGEMENT_UNKNOWN' | 'TOTAL_CLICK_PAGE_VISIT' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CUSTOM' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SEARCH' | 'TOTAL_CLICK_WATCH_VIDEO' | 'TOTAL_CLICK_VIEW_CATEGORY' | 'TOTAL_CLICK_APP_INSTALL' | 'TOTAL_CLICK_UNKNOWN' | 'TOTAL_VIEW_PAGE_VISIT' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CUSTOM' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SEARCH' | 'TOTAL_VIEW_WATCH_VIDEO' | 'TOTAL_VIEW_VIEW_CATEGORY' | 'TOTAL_VIEW_APP_INSTALL' | 'TOTAL_VIEW_UNKNOWN' | 'TOTAL_CONVERSIONS' | 'TOTAL_WEB_CONVERSIONS' | 'TOTAL_INAPP_CONVERSIONS' | 'TOTAL_OFFLINE_CONVERSIONS' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS_VALUE_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY' | 'TOTAL_ENGAGEMENT_SIGNUP_QUANTITY' | 'TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY' | 'TOTAL_ENGAGEMENT_CUSTOM_QUANTITY' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY' | 'TOTAL_ENGAGEMENT_LEAD_QUANTITY' | 'TOTAL_ENGAGEMENT_SEARCH_QUANTITY' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY' | 'TOTAL_ENGAGEMENT_APP_INSTALL_QUANTITY' | 'TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY' | 'TOTAL_CLICK_PAGE_VISIT_QUANTITY' | 'TOTAL_CLICK_SIGNUP_QUANTITY' | 'TOTAL_CLICK_CHECKOUT_QUANTITY' | 'TOTAL_CLICK_CUSTOM_QUANTITY' | 'TOTAL_CLICK_ADD_TO_CART_QUANTITY' | 'TOTAL_CLICK_LEAD_QUANTITY' | 'TOTAL_CLICK_SEARCH_QUANTITY' | 'TOTAL_CLICK_WATCH_VIDEO_QUANTITY' | 'TOTAL_CLICK_VIEW_CATEGORY_QUANTITY' | 'TOTAL_CLICK_APP_INSTALL_QUANTITY' | 'TOTAL_CLICK_UNKNOWN_QUANTITY' | 'TOTAL_VIEW_PAGE_VISIT_QUANTITY' | 'TOTAL_VIEW_SIGNUP_QUANTITY' | 'TOTAL_VIEW_CHECKOUT_QUANTITY' | 'TOTAL_VIEW_CUSTOM_QUANTITY' | 'TOTAL_VIEW_ADD_TO_CART_QUANTITY' | 'TOTAL_VIEW_LEAD_QUANTITY' | 'TOTAL_VIEW_SEARCH_QUANTITY' | 'TOTAL_VIEW_WATCH_VIDEO_QUANTITY' | 'TOTAL_VIEW_VIEW_CATEGORY_QUANTITY' | 'TOTAL_VIEW_APP_INSTALL_QUANTITY' | 'TOTAL_VIEW_UNKNOWN_QUANTITY' | 'TOTAL_CONVERSIONS_QUANTITY' | 'COST_PER_CONVERSION_IN_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'APP_INSTALLS_CPA_BILLABLE' | 'APP_INSTALLS_CLICK' | 'APP_INSTALLS_CLOSEUPREPIN' | 'APP_INSTALLS_VIEW' | 'APP_INSTALLS' | 'APP_INSTALLS_ENGAGEMENT' | 'APP_INSTALLS_CLICK_1' | 'APP_INSTALLS_CLICK_2' | 'APP_INSTALLS_VIEW_1' | 'APP_INSTALLS_VIEW_2' | 'APP_INSTALLS_ENGAGEMENT_1' | 'APP_INSTALLS_ENGAGEMENT_2' | 'APP_INSTALLS_1' | 'APP_INSTALLS_2' | 'CPI_IN_MICRO_DOLLAR' | 'ECPI_IN_MICRO_DOLLAR' | 'CPI_IN_DOLLAR' | 'ECPI_IN_DOLLAR' | 'ONSITE_CHECKOUTS_CPA_BILLABLE_1' | 'ONSITE_CHECKOUTS_CPA_BILLABLE_2' | 'ONSITE_CHECKOUTS_CPA_BILLABLE' | 'ONSITE_CHECKOUTS_VALUE_1' | 'ONSITE_CHECKOUTS_VALUE_2' | 'ONSITE_CHECKOUTS_VALUE' | 'ONSITE_CHECKOUTS_1' | 'ONSITE_CHECKOUTS_2' | 'ONSITE_CHECKOUTS' | 'ONSITE_CHECKOUTS_VALUE_IN_MICRO_DOLLAR_1' | 'ONSITE_CHECKOUTS_VALUE_IN_MICRO_DOLLAR_2' | 'CONVERSION_RATE' | 'AVERAGE_CHECKOUT_VALUE' | 'RETURN_ON_ADVERTISER_SPEND' | 'BUY_BUTTON_CLICKS_1' | 'BUY_BUTTON_CLICKS_2' | 'TOTAL_BUY_BUTTON_CLICKS' | 'ORDER_DROPOFF_RATE' | 'ONSITE_CHECKOUTS_VALUE_IN_MICRO_DOLLAR' | 'ONSITE_CHECKOUTS_VALUE_IN_DOLLAR' | 'PIN_PROMOTION_NAME' | 'AD_NAME' | 'LIFETIME_IMPRESSION_USER_1' | 'PIN_PROMOTION_CAMPAIGN_ID' | 'PIN_PROMOTION_CAMPAIGN_NAME' | 'PIN_PROMOTION_CAMPAIGN_ACTION_TYPE' | 'TOTAL_LIFETIME_IMPRESSION_USER' | 'PIN_PROMOTION_CAMPAIGN_STATUS' | 'PIN_PROMOTION_CAMPAIGN_MANAGED_STATUS' | 'PIN_PROMOTION_CAMPAIGN_ENTITY_STATUS' | 'PIN_PROMOTION_AD_GROUP_ID' | 'PIN_PROMOTION_AD_GROUP_NAME' | 'PIN_PROMOTION_AD_GROUP_STATUS' | 'PIN_PROMOTION_AD_GROUP_ENTITY_STATUS' | 'PIN_PROMOTION_CREATIVE_TYPE' | 'PIN_PROMOTION_ENTITY_STATUS' | 'PIN_PROMOTION_CREATIVE_TYPE_V2' | 'PIN_PROMOTION_REVIEW_STATUS' | 'AD_GROUP_CAMPAIGN_ACTION_TYPE' | 'AD_GROUP_CAMPAIGN_ID' | 'AD_GROUP_CAMPAIGN_NAME' | 'AD_GROUP_CAMPAIGN_STATUS' | 'AD_GROUP_CREATIVE_TYPE' | 'AD_GROUP_CAMPAIGN_MANAGED_STATUS' | 'AD_GROUP_CAMPAIGN_ENTITY_STATUS' | 'AD_GROUP_START_DATE' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'AD_GROUP_BID_IN_MICRO_CURRENCY' | 'CAMPAIGN_AD_GROUP_START_DATE' | 'CAMPAIGN_AD_GROUP_END_DATE' | 'CAMPAIGN_NUMBER_OF_AD_GROUPS' | 'AD_GROUP_NUMBER_OF_PIN_PROMOTIONS' | 'TODAY_SPEND_IN_LOCAL_CURRENCY' | 'TOTAL_LIFETIME_SPEND_IN_LOCAL_CURRENCY' | 'BUDGET_UTILIZATION' | 'AD_GROUP_OPTIMIZATION' | 'INSERTION_ORDER' | 'AD_GROUP_BONUS_BUDGET' | 'FREQUENCY' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_CREATIVE_TYPE' | 'AD_GROUP_PLACEMENT_GROUP_TYPE' | 'AD_GROUP_IS_PREFETCH_ENABLED' | 'CAMPAIGN_BUDGET_OPTIMIZATION' | 'CAMPAIGN_START_DATE' | 'IS_AUTOMATED_CAMPAIGN' | 'IS_PREMIERE_CAMPAIGN' | 'FLEXIBLE_DAILY_BUDGETS' | 'PERCENT_CROSS_DEVICE_CONVERSIONS' | 'PAGE_VISIT_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'SIGNUP_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'CHECKOUT_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'CUSTOM_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'ADD_TO_CART_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'LEAD_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'SEARCH_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'WATCH_VIDEO_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'VIEW_CATEGORY_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'APP_INSTALL_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'UNKNOWN_PERCENT_CROSS_DEVICE_CONVERSIONS' | 'TOTAL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_ADD_TO_CART' | 'TOTAL_LEAD' | 'TOTAL_SEARCH' | 'TOTAL_WATCH_VIDEO' | 'TOTAL_VIEW_CATEGORY' | 'TOTAL_APP_INSTALL' | 'TOTAL_UNKNOWN' | 'TOTAL_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_LEAD_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'AVERAGE_PAGE_VISIT_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_SIGNUP_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_CHECKOUT_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_CUSTOM_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_ADD_TO_CART_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_LEAD_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_SEARCH_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_WATCH_VIDEO_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_VIEW_CATEGORY_VALUE_IN_MICRO_US_DOLLAR' | 'AVERAGE_UNKNOWN_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_PAGE_VISIT_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_ADD_TO_CART_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_LEAD_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_SEARCH_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_WATCH_VIDEO_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_VIEW_CATEGORY_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_UNKNOWN_VALUE_IN_MICRO_US_DOLLAR' | 'TOTAL_PAGE_VISIT_QUANTITY' | 'TOTAL_SIGNUP_QUANTITY' | 'TOTAL_CHECKOUT_QUANTITY' | 'TOTAL_CUSTOM_QUANTITY' | 'TOTAL_ADD_TO_CART_QUANTITY' | 'TOTAL_LEAD_QUANTITY' | 'TOTAL_SEARCH_QUANTITY' | 'TOTAL_WATCH_VIDEO_QUANTITY' | 'TOTAL_VIEW_CATEGORY_QUANTITY' | 'TOTAL_APP_INSTALL_QUANTITY' | 'TOTAL_UNKNOWN_QUANTITY' | 'TOTAL_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_APP_INSTALL_VALUE_IN_DOLLAR' | 'TOTAL_UNKNOWN_VALUE_IN_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'SIGNUP_COST_PER_ACTION' | 'CHECKOUT_COST_PER_ACTION' | 'CUSTOM_COST_PER_ACTION' | 'ADD_TO_CART_COST_PER_ACTION' | 'LEAD_COST_PER_ACTION' | 'SEARCH_COST_PER_ACTION' | 'WATCH_VIDEO_COST_PER_ACTION' | 'VIEW_CATEGORY_COST_PER_ACTION' | 'APP_INSTALL_COST_PER_ACTION' | 'UNKNOWN_COST_PER_ACTION' | 'AD_GROUP_CPA_IN_MICRO_CURRENCY' | 'PAGE_VISIT_COST_PER_ACTION_IN_US_DOLLAR' | 'SIGNUP_COST_PER_ACTION_IN_US_DOLLAR' | 'CHECKOUT_COST_PER_ACTION_IN_US_DOLLAR' | 'CUSTOM_COST_PER_ACTION_IN_US_DOLLAR' | 'ADD_TO_CART_COST_PER_ACTION_IN_US_DOLLAR' | 'LEAD_COST_PER_ACTION_IN_US_DOLLAR' | 'SEARCH_COST_PER_ACTION_IN_US_DOLLAR' | 'WATCH_VIDEO_COST_PER_ACTION_IN_US_DOLLAR' | 'VIEW_CATEGORY_COST_PER_ACTION_IN_US_DOLLAR' | 'UNKNOWN_COST_PER_ACTION_IN_US_DOLLAR' | 'PAGE_VISIT_ROAS' | 'SIGNUP_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'ADD_TO_CART_ROAS' | 'LEAD_ROAS' | 'SEARCH_ROAS' | 'WATCH_VIDEO_ROAS' | 'VIEW_CATEGORY_ROAS' | 'APP_INSTALL_ROAS' | 'UNKNOWN_ROAS' | 'ROAS' | 'CLICK_ROAS' | 'ENGAGEMENT_ROAS' | 'VIEW_ROAS' | 'HOUR' | 'BOARD_ENGAGEMENT' | 'BOARD_INSERTION' | 'BOARD_IMPRESSION' | 'BOARD_FOLLOW' | 'BOARD_SEND' | 'BOARD_HIDE' | 'PRODUCT_GROUP_CAMPAIGN_ID' | 'PRODUCT_GROUP_CAMPAIGN_NAME' | 'PRODUCT_GROUP_CAMPAIGN_ACTION_TYPE' | 'PRODUCT_GROUP_CAMPAIGN_STATUS' | 'PRODUCT_GROUP_CAMPAIGN_MANAGED_STATUS' | 'PRODUCT_GROUP_AD_GROUP_ID' | 'PRODUCT_GROUP_AD_GROUP_NAME' | 'PRODUCT_GROUP_AD_GROUP_STATUS' | 'PROMOTED_CATALOG_PRODUCT_GROUP_REFERENCE_ID' | 'PROMOTED_CATALOG_PRODUCT_GROUP_REFERENCE_NAME' | 'PROMOTED_CATALOG_PRODUCT_GROUP_ID' | 'PROMOTED_CATALOG_PRODUCT_GROUP_BID_IN_MICRO_CURRENCY' | 'PROMOTED_CATALOG_PRODUCT_GROUP_STATUS' | 'PROMOTED_CATALOG_PRODUCT_GROUP_ENTITY_STATUS' | 'PROMOTED_CATALOG_PRODUCT_GROUP_CAMPAIGN_ID' | 'PROMOTED_CATALOG_PRODUCT_GROUP_CAMPAIGN_NAME' | 'PROMOTED_CATALOG_PRODUCT_GROUP_CAMPAIGN_ACTION_TYPE' | 'PROMOTED_CATALOG_PRODUCT_GROUP_CAMPAIGN_STATUS' | 'PROMOTED_CATALOG_PRODUCT_GROUP_CAMPAIGN_MANAGED_STATUS' | 'PROMOTED_CATALOG_PRODUCT_GROUP_AD_GROUP_ID' | 'PROMOTED_CATALOG_PRODUCT_GROUP_AD_GROUP_NAME' | 'PROMOTED_CATALOG_PRODUCT_GROUP_AD_GROUP_STATUS' | 'PROMOTED_CATALOG_PRODUCT_GROUP_TRACKING_TEMPLATE_URL' | 'VIDEO_3SEC_VIEWS_1' | 'VIDEO_P0_COMPLETE_1' | 'VIDEO_P25_COMPLETE_1' | 'VIDEO_P50_COMPLETE_1' | 'VIDEO_P75_COMPLETE_1' | 'VIDEO_P95_COMPLETE_1' | 'VIDEO_P97_COMPLETE_1' | 'VIDEO_P100_COMPLETE_1' | 'VIDEO_P0_COMBINED_1' | 'VIDEO_P25_COMBINED_1' | 'VIDEO_P50_COMBINED_1' | 'VIDEO_P75_COMBINED_1' | 'VIDEO_P95_COMBINED_1' | 'VIDEO_P97_COMBINED_1' | 'VIDEO_P100_COMBINED_1' | 'VIDEO_AVG_WATCHTIME_1' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_VIEW_RATE_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P0_COMPLETE_2' | 'VIDEO_P25_COMPLETE_2' | 'VIDEO_P50_COMPLETE_2' | 'VIDEO_P75_COMPLETE_2' | 'VIDEO_P95_COMPLETE_2' | 'VIDEO_P97_COMPLETE_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_P97_COMBINED_2' | 'VIDEO_P100_COMBINED_2' | 'VIDEO_AVG_WATCHTIME_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_VIEW_RATE_2' | 'VIDEO_LENGTH' | 'CPV_IN_MICRO_DOLLAR' | 'CPV_IN_DOLLAR' | 'CP3SV_IN_MICRO_DOLLAR' | 'CP3SV_IN_DOLLAR' | 'ECPV_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECP3SV_IN_MICRO_DOLLAR' | 'ECP3SV_IN_DOLLAR' | 'CPCV_IN_DOLLAR' | 'CPCV_IN_MICRO_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_IN_MICRO_DOLLAR' | 'CPCV_P95_IN_DOLLAR' | 'CPCV_P95_IN_MICRO_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPCV_P95_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P0_COMPLETE' | 'TOTAL_VIDEO_P25_COMPLETE' | 'TOTAL_VIDEO_P50_COMPLETE' | 'TOTAL_VIDEO_P75_COMPLETE' | 'TOTAL_VIDEO_P95_COMPLETE' | 'TOTAL_VIDEO_P97_COMPLETE' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_P97_COMBINED' | 'TOTAL_VIDEO_P100_COMBINED' | 'TOTAL_VIDEO_AVG_WATCHTIME' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_VIEW_RATE' | 'VIDEO_V50_WATCHTIME_1' | 'VIDEO_V50_WATCHTIME_2' | 'TOTAL_VIDEO_V50_WATCHTIME' | 'VIDEO_SUM_V50_WATCHTIME_IN_MILLISECOND_1' | 'VIDEO_SUM_V50_WATCHTIME_IN_MILLISECOND_2' | 'TOTAL_VIDEO_SUM_V50_WATCHTIME_IN_MILLISECOND' | 'VIDEO_SUM_V50_WATCHTIME_IN_SECOND_1' | 'VIDEO_SUM_V50_WATCHTIME_IN_SECOND_2' | 'TOTAL_VIDEO_SUM_V50_WATCHTIME_IN_SECOND' | 'VIDEO_AVG_WATCHTIME_IN_MILLISECOND_1' | 'VIDEO_AVG_WATCHTIME_IN_MILLISECOND_2' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_MILLISECOND' | 'VIDEO_AVG_WATCHTIME_IN_SECOND_1' | 'VIDEO_AVG_WATCHTIME_IN_SECOND_2' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'DELIVERY_STATUS_NO_FANOUT' | 'DELIVERY_STATUS_WITH_FANOUT' | 'KEYWORD_COMPETITION_BAND' | 'KEYWORD_QUERY_VOLUME' | 'KEYWORD_VALUE' | 'KEYWORD_MATCH_TYPE' | 'KEYWORD_BID_IN_MICRO_CURRENCY' | 'KEYWORD_USER_QUERY' | 'KEYWORD_SQR_KEYWORD_VALUE' | 'KEYWORD_AD_GROUP_ID' | 'KEYWORD_AD_GROUP_NAME' | 'KEYWORD_CAMPAIGN_ID' | 'KEYWORD_CAMPAIGN_NAME' | 'KEYWORD_SEARCH_TERM_AD_GROUP_ID' | 'KEYWORD_SEARCH_TERM_AD_GROUP_NAME' | 'KEYWORD_SEARCH_TERM_CAMPAIGN_ID' | 'KEYWORD_SEARCH_TERM_CAMPAIGN_NAME' | 'NEGATIVE_KEYWORD_AD_GROUP_ID' | 'NEGATIVE_KEYWORD_AD_GROUP_NAME' | 'NEGATIVE_KEYWORD_CAMPAIGN_ID' | 'NEGATIVE_KEYWORD_CAMPAIGN_NAME' | 'ONE_TAP_V2_WEBSITE_VIEW_1' | 'ONE_TAP_V2_WEBSITE_VIEW_2' | 'TOTAL_ONE_TAP_V2_WEBSITE_VIEW' | 'ONE_TAP_V2_WEBSITE_VIEW_USER_1' | 'ONE_TAP_V2_WEBSITE_VIEW_USER_2' | 'TOTAL_LANDING_PAGE_VIEWS' | 'LANDING_PAGE_VIEWS_1' | 'LANDING_PAGE_VIEWS_2' | 'COST_PER_LANDING_PAGE_VIEW' | 'LANDING_PAGE_VIEW_RATE' | 'TOTAL_DESTINATION_VIEWS' | 'DESTINATION_VIEWS_1' | 'DESTINATION_VIEWS_2' | 'COST_PER_DESTINATION_VIEW_IN_DOLLAR' | 'COST_PER_DESTINATION_VIEW_IN_MICRO_DOLLAR' | 'DESTINATION_VIEW_RATE' | 'CAROUSEL_SLOT_INDEX' | 'CAROUSEL_ID' | 'CAROUSEL_SLOT_PROMOTION_ID' | 'CAROUSEL_SLOT_IMPRESSION_1' | 'CAROUSEL_SLOT_IMPRESSION_2' | 'TOTAL_CAROUSEL_SLOT_IMPRESSION' | 'CAROUSEL_SLOT_IMPRESSION_USER_1' | 'CAROUSEL_SLOT_IMPRESSION_USER_2' | 'CAROUSEL_SLOT_CLICKTHROUGH_1' | 'CAROUSEL_SLOT_CLICKTHROUGH_2' | 'TOTAL_CAROUSEL_SLOT_CLICKTHROUGH' | 'CAROUSEL_SLOT_CLICKTHROUGH_USER_1' | 'CAROUSEL_SLOT_CLICKTHROUGH_USER_2' | 'CAROUSEL_SLOT_SIDESWIPE_1' | 'CAROUSEL_SLOT_SIDESWIPE_2' | 'TOTAL_CAROUSEL_SLOT_SIDESWIPE' | 'CAROUSEL_SLOT_SIDESWIPE_USER_1' | 'CAROUSEL_SLOT_SIDESWIPE_USER_2' | 'CAROUSEL_SLOT_VIEW_WEBSITE_1' | 'CAROUSEL_SLOT_VIEW_WEBSITE_2' | 'TOTAL_CAROUSEL_SLOT_VIEW_WEBSITE' | 'CAROUSEL_SLOT_VIEW_WEBSITE_USER_1' | 'CAROUSEL_SLOT_VIEW_WEBSITE_USER_2' | 'COLLECTION_PIN_ITEM_IMPRESSION_1' | 'COLLECTION_PIN_ITEM_IMPRESSION_2' | 'TOTAL_COLLECTION_PIN_ITEM_IMPRESSION' | 'COLLECTION_PIN_ITEM_CLICKTHROUGH_1' | 'COLLECTION_PIN_ITEM_CLICKTHROUGH_2' | 'TOTAL_COLLECTION_PIN_ITEM_CLICKTHROUGH' | 'HOLDOUT_EXPERIMENT' | 'AD_GROUP_HOLDOUT_EXPERIMENT' | 'PIN_PROMOTION_HOLDOUT_EXPERIMENT' | 'MULTI_OBJECTIVE_RESULT' | 'MULTI_OBJECTIVE_COST' | 'MULTI_OBJECTIVE_RESULT_DESCRIPTION' | 'MULTI_OBJECTIVE_COST_DESCRIPTION' | 'DATE_RANGE' | 'DATE_RANGE_START' | 'DATE_RANGE_END' | 'REPORT_DATE_START' | 'REPORT_DATE_END' | 'PINNER_LIST_NAME' | 'PINNER_LIST_TYPE' | 'ORDER_VALUE' | 'ORDER_QUANTITY' | 'ADVERTISER_NAME' | 'ADVERTISER_CURRENCY' | 'TOTAL_REPIN_RATE' | 'SPEND_YESTERDAY_IN_DOLLAR' | 'PIN_PROMOTION_REJECTION_LABELS' | 'PIN_PROMOTION_DESTINATION_URL' | 'VIDEO_COMPLETION_RATE' | 'CAMPAIGN_BOOKING_REFERENCE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'INAPP_CHECKOUT_ROAS' | 'TOTAL_INAPP_CHECKOUT' | 'TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_CLICK_CHECKOUT' | 'TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_VIEW_CHECKOUT' | 'TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_DOLLAR' | 'OFFLINE_CHECKOUT_COST_PER_ACTION' | 'OFFLINE_CHECKOUT_ROAS' | 'TOTAL_OFFLINE_CHECKOUT' | 'TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CHECKOUT' | 'TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CHECKOUT' | 'TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_DOLLAR' | 'PINTEREST_CHECKOUT_COST_PER_ACTION' | 'PINTEREST_CHECKOUT_ROAS' | 'TOTAL_PINTEREST_CHECKOUT' | 'TOTAL_PINTEREST_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_PINTEREST_CHECKOUT_VALUE_IN_DOLLAR' | 'WEB_ADD_TO_CART_COST_PER_ACTION' | 'WEB_ADD_TO_CART_ROAS' | 'TOTAL_WEB_ADD_TO_CART' | 'TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_ADD_TO_CART' | 'TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_ADD_TO_CART' | 'TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_DOLLAR' | 'INAPP_ADD_TO_CART_COST_PER_ACTION' | 'INAPP_ADD_TO_CART_ROAS' | 'TOTAL_INAPP_ADD_TO_CART' | 'TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_CLICK_ADD_TO_CART' | 'TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_VIEW_ADD_TO_CART' | 'TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_DOLLAR' | 'WEB_PAGE_VISIT_COST_PER_ACTION' | 'WEB_PAGE_VISIT_ROAS' | 'TOTAL_WEB_PAGE_VISIT' | 'TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_PAGE_VISIT' | 'TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_PAGE_VISIT' | 'TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_DOLLAR' | 'WEB_SIGNUP_COST_PER_ACTION' | 'WEB_SIGNUP_ROAS' | 'TOTAL_WEB_SIGNUP' | 'TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_SIGNUP' | 'TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_SIGNUP' | 'TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_DOLLAR' | 'INAPP_SIGNUP_COST_PER_ACTION' | 'INAPP_SIGNUP_ROAS' | 'TOTAL_INAPP_SIGNUP' | 'TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_CLICK_SIGNUP' | 'TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_VIEW_SIGNUP' | 'TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_DOLLAR' | 'OFFLINE_SIGNUP_COST_PER_ACTION' | 'OFFLINE_SIGNUP_ROAS' | 'TOTAL_OFFLINE_SIGNUP' | 'TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_CLICK_SIGNUP' | 'TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_VIEW_SIGNUP' | 'TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_DOLLAR' | 'WEB_WATCH_VIDEO_COST_PER_ACTION' | 'WEB_WATCH_VIDEO_ROAS' | 'TOTAL_WEB_WATCH_VIDEO' | 'TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_WATCH_VIDEO' | 'TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_WATCH_VIDEO' | 'TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_DOLLAR' | 'WEB_LEAD_COST_PER_ACTION' | 'WEB_LEAD_ROAS' | 'TOTAL_WEB_LEAD' | 'TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_LEAD' | 'TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_LEAD' | 'TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_LEAD' | 'TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_LEAD_VALUE_IN_DOLLAR' | 'OFFLINE_LEAD_COST_PER_ACTION' | 'OFFLINE_LEAD_ROAS' | 'TOTAL_OFFLINE_LEAD' | 'TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_CLICK_LEAD' | 'TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_VIEW_LEAD' | 'TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_DOLLAR' | 'WEB_SEARCH_COST_PER_ACTION' | 'WEB_SEARCH_ROAS' | 'TOTAL_WEB_SEARCH' | 'TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_SEARCH' | 'TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SEARCH' | 'TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_SEARCH' | 'TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_SEARCH_VALUE_IN_DOLLAR' | 'INAPP_SEARCH_COST_PER_ACTION' | 'INAPP_SEARCH_ROAS' | 'TOTAL_INAPP_SEARCH' | 'TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_CLICK_SEARCH' | 'TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_VIEW_SEARCH' | 'TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_DOLLAR' | 'WEB_VIEW_CATEGORY_COST_PER_ACTION' | 'WEB_VIEW_CATEGORY_ROAS' | 'TOTAL_WEB_VIEW_CATEGORY' | 'TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_DOLLAR' | 'WEB_CUSTOM_COST_PER_ACTION' | 'WEB_CUSTOM_ROAS' | 'TOTAL_WEB_CUSTOM' | 'TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_CUSTOM' | 'TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_CUSTOM' | 'TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_DOLLAR' | 'OFFLINE_CUSTOM_COST_PER_ACTION' | 'OFFLINE_CUSTOM_ROAS' | 'TOTAL_OFFLINE_CUSTOM' | 'TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CUSTOM' | 'TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CUSTOM' | 'TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_DOLLAR' | 'WEB_UNKNOWN_COST_PER_ACTION' | 'WEB_UNKNOWN_ROAS' | 'TOTAL_WEB_UNKNOWN' | 'TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_WEB_CLICK_UNKNOWN' | 'TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_WEB_VIEW_UNKNOWN' | 'TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_DOLLAR' | 'INAPP_UNKNOWN_COST_PER_ACTION' | 'INAPP_UNKNOWN_ROAS' | 'TOTAL_INAPP_UNKNOWN' | 'TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_CLICK_UNKNOWN' | 'TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_VIEW_UNKNOWN' | 'TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_DOLLAR' | 'OFFLINE_UNKNOWN_COST_PER_ACTION' | 'OFFLINE_UNKNOWN_ROAS' | 'TOTAL_OFFLINE_UNKNOWN' | 'TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_CLICK_UNKNOWN' | 'TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_DOLLAR' | 'TOTAL_OFFLINE_VIEW_UNKNOWN' | 'TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_DOLLAR' | 'INAPP_APP_INSTALL_COST_PER_ACTION' | 'INAPP_APP_INSTALL_ROAS' | 'TOTAL_INAPP_APP_INSTALL' | 'TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_APP_INSTALL_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_CLICK_APP_INSTALL' | 'TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_DOLLAR' | 'TOTAL_INAPP_VIEW_APP_INSTALL' | 'TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_DOLLAR' | 'IDEA_PIN_PAGE_FORWARD_1' | 'IDEA_PIN_PAGE_FORWARD_2' | 'IDEA_PIN_PAGE_BACKWARD_1' | 'IDEA_PIN_PAGE_BACKWARD_2' | 'TOTAL_IDEA_PIN_PAGE_FORWARD' | 'TOTAL_IDEA_PIN_PAGE_BACKWARD' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'CPM_IN_US_DOLLAR' | 'ECPC_IN_US_DOLLAR' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_STARTED' | 'QUIZ_COMPLETED' | 'QUIZ_PIN_RESULT_OPEN' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | '_SHOWCASE_SUBPAGE_CLOSEUP_INTERNAL' | 'SHOWCASE_CARD_LANDING' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE' | 'STANDARD_AD_FEED_ITEM_ID' | 'IS_STANDARD_FEED_AD' | 'TARGETING_GENDER' | 'TARGETING_CREATIVE_TYPE' | 'TARGETING_COUNTRY' | 'TARGETING_LOCATION' | 'TARGETING_APPTYPE' | 'TARGETING_LOCATION_CODE';

            export type TemplateResponseConversionReportTimeTypeEnum = 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';

            export type TemplateResponseCreationSourceEnum = 'ADS_API' | 'ADS_MANAGER_REPORTING_PAGE' | 'ADS_MANAGER_REPORT_BUILDER';

            export type TemplateResponseTypeEnum = 'UNSPECIFIED' | 'BULK' | 'OVERVIEW' | 'TABLE';

            export type TemplateResponseIngestionSourcesEnum = 'TAG' | 'MMP' | 'FILE_UPLOAD' | 'CONVERSIONS_API' | 'NATIVE';
/**
 * Template fields
 * @export
 */
export type TemplateResponse = {
    /**
     * Template ID
     * @type {string}
     * @memberof TemplateResponse
     */
    id?: string;
    /**
     * ID of the Ad Account that owns the template
     * @type {string}
     * @memberof TemplateResponse
     */
    ad_account_id?: string;
    /**
     * IDs of the Ad Accounts that have access to this template
     * @type {Array<string>}
     * @memberof TemplateResponse
     */
    ad_account_ids?: Array<string>;
    /**
     * ID of the user who created the template
     * @type {string}
     * @memberof TemplateResponse
     */
    user_id?: string;
    /**
     * Template Name
     * @type {string}
     * @memberof TemplateResponse
     */
    name?: string;
    /**
     * The number of days prior to the day the report will be delivered at which the report will start
     * @type {number}
     * @memberof TemplateResponse
     */
    report_start_relative_days_in_past?: number;
    /**
     * The number of days prior to the day the report will be delivered at which the report will end
     * @type {number}
     * @memberof TemplateResponse
     */
    report_end_relative_days_in_past?: number;
    /**
     * 
     * @type {TemplateResponseDateRange}
     * @memberof TemplateResponse
     */
    date_range?: TemplateResponseDateRange;
    /**
     * 
     * @type {MetricsReportingLevel}
     * @memberof TemplateResponse
     */
    report_level?: MetricsReportingLevel;
    /**
     * 
     * @type {DataOutputFormat}
     * @memberof TemplateResponse
     */
    report_format?: DataOutputFormat;
    /**
     * A list of columns to be included in the report
     * @type {Array<string>}
     * @memberof TemplateResponse
     */
    columns?: Array<TemplateResponseColumnsEnum>;
    /**
     * 
     * @type {Granularity}
     * @memberof TemplateResponse
     */
    granularity?: Granularity;
    /**
     * The length of the sliding window over which view conversions will be attributed
     * @type {number}
     * @memberof TemplateResponse
     */
    view_window_days?: number;
    /**
     * The length of the sliding window over which click conversions will be attributed
     * @type {number}
     * @memberof TemplateResponse
     */
    click_window_days?: number;
    /**
     * The length of the sliding window over which engagement conversions will be attributed
     * @type {number}
     * @memberof TemplateResponse
     */
    engagement_window_days?: number;
    /**
     * Conversion report time type
     * @type {string}
     * @memberof TemplateResponse
     */
    conversion_report_time_type?: TemplateResponseConversionReportTimeTypeEnum;
    /**
     * A JSON representation of any filters to be applied before returning report data. Each filter object should contain all of the following fields:<br> \"field\": The column name<br> \"operator\": The operator. Allowed operators: [\"=\", \"!=\", \"in\", \"not_in\", \"~\", \">\", \"<\", \"contains_substring\"]<br> \"value\": A single value or a list of values
     * @type {string}
     * @memberof TemplateResponse
     */
    filters_json?: string;
    /**
     * A boolean value that indicates if the user owns the template
     * @type {boolean}
     * @memberof TemplateResponse
     */
    is_owned_by_user?: boolean;
    /**
     * A boolean value that indicates if this template has been used to create a scheduled report
     * @type {boolean}
     * @memberof TemplateResponse
     */
    is_scheduled?: boolean;
    /**
     * The surface used to create this template
     * @type {string}
     * @memberof TemplateResponse
     */
    creation_source?: TemplateResponseCreationSourceEnum;
    /**
     * A boolean that indicates if the template has been deleted
     * @type {boolean}
     * @memberof TemplateResponse
     */
    is_deleted?: boolean;
    /**
     * Time of last update in seconds since Unix epoch
     * @type {number}
     * @memberof TemplateResponse
     */
    updated_time?: number;
    /**
     * A list of custom column IDs
     * @type {Array<string>}
     * @memberof TemplateResponse
     */
    custom_column_ids?: Array<string>;
    /**
     * Reporting template type
     * @type {string}
     * @memberof TemplateResponse
     */
    type?: TemplateResponseTypeEnum;
    /**
     * The filter on the conversion ingestion source method for conversion metrics
     * @type {Array<string>}
     * @memberof TemplateResponse
     */
    ingestion_sources?: Array<TemplateResponseIngestionSourcesEnum>;
}

/**
 * 
 * @export
 */
export type TemplateResponseDateRange = {
    /**
     * 
     * @type {TemplateResponseDateRangeDynamicDateRange}
     * @memberof TemplateResponseDateRange
     */
    dynamic_date_range?: TemplateResponseDateRangeDynamicDateRange;
    /**
     * 
     * @type {TemplateResponseDateRangeRelativeDateRange}
     * @memberof TemplateResponseDateRange
     */
    relative_date_range?: TemplateResponseDateRangeRelativeDateRange;
    /**
     * 
     * @type {TemplateResponseDateRangeAbsoluteDateRange}
     * @memberof TemplateResponseDateRange
     */
    absolute_date_range?: TemplateResponseDateRangeAbsoluteDateRange;
}

/**
 * The absolute date range of the template
 * @export
 */
export type TemplateResponseDateRangeAbsoluteDateRange = {
    /**
     * The date range type
     * @type {string}
     * @memberof TemplateResponseDateRangeAbsoluteDateRange
     */
    type?: string;
    /**
     * The start date of the date range
     * @type {number}
     * @memberof TemplateResponseDateRangeAbsoluteDateRange
     */
    start_date?: number;
    /**
     * The end date of the date range
     * @type {number}
     * @memberof TemplateResponseDateRangeAbsoluteDateRange
     */
    end_date?: number;
}


            export type TemplateResponseDateRangeDynamicDateRangeRangeEnum = 'YEAR_TO_DATE' | 'QUARTER_TO_DATE' | 'MONTH_TO_DATE' | 'LAST_MONTH';
/**
 * The dynamic date range of the template
 * @export
 */
export type TemplateResponseDateRangeDynamicDateRange = {
    /**
     * The date range type
     * @type {string}
     * @memberof TemplateResponseDateRangeDynamicDateRange
     */
    type?: string;
    /**
     * The dynamic range type
     * @type {string}
     * @memberof TemplateResponseDateRangeDynamicDateRange
     */
    range?: TemplateResponseDateRangeDynamicDateRangeRangeEnum;
}

/**
 * The relative date range of the template
 * @export
 */
export type TemplateResponseDateRangeRelativeDateRange = {
    /**
     * The date range type
     * @type {string}
     * @memberof TemplateResponseDateRangeRelativeDateRange
     */
    type?: string;
    /**
     * The start date of the date range
     * @type {number}
     * @memberof TemplateResponseDateRangeRelativeDateRange
     */
    start_days_in_past?: number;
    /**
     * The end date of the date range
     * @type {number}
     * @memberof TemplateResponseDateRangeRelativeDateRange
     */
    end_days_in_past?: number;
}

/**
 * 
 * @export
 */
export type TemplatesList200Response = {
    /**
     * 
     * @type {Array<TemplateResponse>}
     * @memberof TemplatesList200Response
     */
    items: Array<TemplateResponse>;
    /**
     * 
     * @type {string}
     * @memberof TemplatesList200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type TermsOfService = {
    /**
     * The ID of the terms of service
     * @type {string}
     * @memberof TermsOfService
     */
    id?: string;
    /**
     * The terms of service content
     * @type {string}
     * @memberof TermsOfService
     */
    html?: string;
    /**
     * Whether the ad account has accepted terms of service.
     * @type {boolean}
     * @memberof TermsOfService
     */
    has_accepted?: boolean;
    /**
     * The ID of the ad account.
     * @type {string}
     * @memberof TermsOfService
     */
    ad_account_id?: string;
}


            export type TopPinsAnalyticsResponseSortByEnum = 'ENGAGEMENT' | 'SAVE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'PIN_CLICK';
/**
 * 
 * @export
 */
export type TopPinsAnalyticsResponse = {
    /**
     * 
     * @type {TopPinsAnalyticsResponseDateAvailability}
     * @memberof TopPinsAnalyticsResponse
     */
    date_availability?: TopPinsAnalyticsResponseDateAvailability;
    /**
     * 
     * @type {Array<TopPinsAnalyticsResponsePinsInner>}
     * @memberof TopPinsAnalyticsResponse
     */
    pins?: Array<TopPinsAnalyticsResponsePinsInner>;
    /**
     * 
     * @type {string}
     * @memberof TopPinsAnalyticsResponse
     */
    sort_by?: TopPinsAnalyticsResponseSortByEnum;
}

/**
 * 
 * @export
 */
export type TopPinsAnalyticsResponseDateAvailability = {
    /**
     * 
     * @type {number}
     * @memberof TopPinsAnalyticsResponseDateAvailability
     */
    latest_available_timestamp?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TopPinsAnalyticsResponseDateAvailability
     */
    is_realtime?: boolean;
}

/**
 * Array with metrics, status, and pin id for the requested metric
 * @export
 */
export type TopPinsAnalyticsResponsePinsInner = {
    /**
     * The metric name and daily value for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof TopPinsAnalyticsResponsePinsInner
     */
    metrics?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: DataStatus; }}
     * @memberof TopPinsAnalyticsResponsePinsInner
     */
    data_status?: { [key: string]: DataStatus; };
    /**
     * The pin id
     * @type {string}
     * @memberof TopPinsAnalyticsResponsePinsInner
     */
    pin_id?: string;
}


            export type TopVideoPinsAnalyticsResponseSortByEnum = 'SAVE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START';
/**
 * 
 * @export
 */
export type TopVideoPinsAnalyticsResponse = {
    /**
     * 
     * @type {TopPinsAnalyticsResponseDateAvailability}
     * @memberof TopVideoPinsAnalyticsResponse
     */
    date_availability?: TopPinsAnalyticsResponseDateAvailability;
    /**
     * 
     * @type {Array<TopVideoPinsAnalyticsResponsePinsInner>}
     * @memberof TopVideoPinsAnalyticsResponse
     */
    pins?: Array<TopVideoPinsAnalyticsResponsePinsInner>;
    /**
     * 
     * @type {string}
     * @memberof TopVideoPinsAnalyticsResponse
     */
    sort_by?: TopVideoPinsAnalyticsResponseSortByEnum;
}

/**
 * Array with metrics, status, and pin id for the requested metric
 * @export
 */
export type TopVideoPinsAnalyticsResponsePinsInner = {
    /**
     * The metric name and daily value for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof TopVideoPinsAnalyticsResponsePinsInner
     */
    metrics?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: DataStatus; }}
     * @memberof TopVideoPinsAnalyticsResponsePinsInner
     */
    data_status?: { [key: string]: DataStatus; };
    /**
     * The pin id
     * @type {string}
     * @memberof TopVideoPinsAnalyticsResponsePinsInner
     */
    pin_id?: string;
}

/**
 * Third-party tracking URLs. Up to three tracking URLs - with a max length of 2,000 - are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @export
 */
export type TrackingUrls = {
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    impression?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    click?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    engagement?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    buyable_button?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    audience_verification?: Array<string>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type TrendType = 'growing' | 'monthly' | 'yearly' | 'seasonal';

/**
 * 
 * @export
 */
export type TrendingKeywordsResponse = {
    /**
     * The top trending keywords for the specified trend type in the requested region.<br /> Results are ordered, with the first element in the array representing the #1 top trend.
     * @type {Array<TrendingKeywordsResponseTrendsInner>}
     * @memberof TrendingKeywordsResponse
     */
    trends?: Array<TrendingKeywordsResponseTrendsInner>;
}

/**
 * 
 * @export
 */
export type TrendingKeywordsResponseTrendsInner = {
    /**
     * The keyword that is trending.
     * @type {string}
     * @memberof TrendingKeywordsResponseTrendsInner
     */
    keyword?: string;
    /**
     * The week-over-week percent change in search volume for this keyword.<br /> For example, a value of \"50\" would represent a 50% increase in searches in the last seven days compared to the week prior.<br /> **Note**: growth rates are rounded, with a maximum of +/- 10000% change.  A value of 10001 indicates that this keyword experienced > 10000% week-over-week growth.
     * @type {number}
     * @memberof TrendingKeywordsResponseTrendsInner
     */
    pct_growth_wow?: number;
    /**
     * The month-over-month percent change in search volume for this keyword.<br /> For example, a value of \"400\" would represent a 400% increase in searches in the last 30 days compared to the month prior.<br /> **Note**: growth rates are rounded, with a maximum of +/- 10000% change.  A value of 10001 indicates that this keyword experienced > 10000% month-over-month growth.
     * @type {number}
     * @memberof TrendingKeywordsResponseTrendsInner
     */
    pct_growth_mom?: number;
    /**
     * The year-over-year percent change in search volume for this keyword.<br /> For example, a value of \"-5\" would represent a 5% decrease in searches in the last 365 days compared to the month prior.<br /> **Note**: growth rates are rounded, with a maximum of +/- 10000% change.  A value of 10001 indicates that this keyword experienced > 10000% year-over-year growth.
     * @type {number}
     * @memberof TrendingKeywordsResponseTrendsInner
     */
    pct_growth_yoy?: number;
    /**
     * 
     * @type {TrendingKeywordsResponseTrendsInnerTimeSeries}
     * @memberof TrendingKeywordsResponseTrendsInner
     */
    time_series?: TrendingKeywordsResponseTrendsInnerTimeSeries;
}

/**
 * A sequence of weekly observations of the relative search volume for this keyword over the past year.<br /> These values are normalized to a [0-100] range, and can be used to visualize the history of user interest in this keyword. By default, normalization is applied independently to the time series of each keyword, but the `normalize_against_group` query parameter can be used in cases where you wish to compare relative volume between keywords.<br /> **Note**: The date of each observation is in ISO-8601 format and represents the *end* of the week.  For example, a value of `2023-10-31` would include searches that happened between `2023-10-25` and `2023-10-31`.
 * @export
 */
export type TrendingKeywordsResponseTrendsInnerTimeSeries = {
    [key: string]: number | any;

    /**
     * 
     * @type {Date}
     * @memberof TrendingKeywordsResponseTrendsInnerTimeSeries
     */
    _date?: Date;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type TrendsSupportedRegion = 'US' | 'CA' | 'DE' | 'FR' | 'ES' | 'IT' | 'DE+AT+CH' | 'GB+IE' | 'IT+ES+PT+GR+MT' | 'PL+RO+HU+SK+CZ' | 'SE+DK+FI+NO' | 'NL+BE+LU' | 'AR' | 'BR' | 'CO' | 'MX' | 'MX+AR+CO+CL' | 'AU+NZ';

/**
 * 
 * @export
 */
export type UpdatableItemAttributes = {
    /**
     * Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    ad_link?: string;
    /**
     * Set this attribute to TRUE if you\'re submitting items that are considered “adult”. These will not be shown on Pinterest.
     * @type {boolean}
     * @memberof UpdatableItemAttributes
     */
    adult?: boolean;
    /**
     * The age group to apply a demographic range to the product. Must be one of the following values (upper or lowercased): ‘newborn’, ‘infant’, ‘toddler’, ‘kids’, or ‘adult’.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    age_group?: string;
    /**
     * The availability of the product. Must be one of the following values (upper or lowercased): ‘in stock’, ‘out of stock’, ‘preorder’.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    availability?: string;
    /**
     * Average reviews for the item. Can be a number from 1-5.
     * @type {number}
     * @memberof UpdatableItemAttributes
     */
    average_review_rating?: number;
    /**
     * The brand of the product.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    brand?: string;
    /**
     * This attribute is not supported anymore.
     * @type {boolean}
     * @memberof UpdatableItemAttributes
     */
    checkout_enabled?: boolean;
    /**
     * The primary color of the product.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    color?: string;
    /**
     * The condition of the product. Must be one of the following values (upper or lowercased): ‘new’, ‘used’, or ‘refurbished’.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    condition?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    custom_label_0?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    custom_label_1?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    custom_label_2?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    custom_label_3?: string;
    /**
     * <p><= 1000 characters</p> <p>Custom grouping of products.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    custom_label_4?: string;
    /**
     * <p><= 10000 characters</p> <p>The description of the product.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    description?: string;
    /**
     * The item is free to ship.
     * @type {boolean}
     * @memberof UpdatableItemAttributes
     */
    free_shipping_label?: boolean;
    /**
     * The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    free_shipping_limit?: string;
    /**
     * The gender associated with the product. Must be one of the following values (upper or lowercased): ‘male’, ‘female’, or ‘unisex’.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    gender?: string;
    /**
     * The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    google_product_category?: string;
    /**
     * The unique universal product identifier.
     * @type {number}
     * @memberof UpdatableItemAttributes
     */
    gtin?: number;
    /**
     * <p><= 127 characters</p> <p>The user-created unique ID that represents the product. Only Unicode characters are accepted.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    id?: string;
    /**
     * <p><= 127 characters</p> <p>The parent ID of the product.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    item_group_id?: string;
    /**
     * The millisecond timestamp when the item was lastly modified by the merchant.
     * @type {number}
     * @memberof UpdatableItemAttributes
     */
    last_updated_time?: number;
    /**
     * <p><= 511 characters</p> <p>The landing page for the product.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    link?: string;
    /**
     * The material used to make the product.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    material?: string;
    /**
     * The minimum advertised price of the product. It supports the following formats, \"19.99 USD\", \"19.99USD\" and \"19.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    min_ad_price?: string;
    /**
     * The mobile-optimized version of your landing page. Must begin with http:// or https://.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    mobile_link?: string;
    /**
     * Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    mpn?: string;
    /**
     * The number of ratings for the item.
     * @type {number}
     * @memberof UpdatableItemAttributes
     */
    number_of_ratings?: number;
    /**
     * The number of reviews available for the item.
     * @type {number}
     * @memberof UpdatableItemAttributes
     */
    number_of_reviews?: number;
    /**
     * The description of the pattern used for the product.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    pattern?: string;
    /**
     * The price of the product. It supports the following formats, \"24.99 USD\", \"24.99USD\" and \"24.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    price?: string;
    /**
     * <p><= 1000 characters</p> <p>The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ > “. The > must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    product_type?: string;
    /**
     * The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \"14.99 USD\", \"14.99USD\" and \"14.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    sale_price?: string;
    /**
     * Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    shipping?: string;
    /**
     * The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    shipping_height?: string;
    /**
     * The weight of the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    shipping_weight?: string;
    /**
     * The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    shipping_width?: string;
    /**
     * The size of the product.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    size?: string;
    /**
     * Indicates the country’s sizing system in which you are submitting your product. Must be one of the following values (upper or lowercased): ‘US’, ‘UK’, ‘EU’, ‘DE’, ‘FR’, ‘JP’, ‘CN’, ‘IT’, ‘BR’, ‘MEX’, or ‘AU’.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    size_system?: string;
    /**
     * Additional description for the size. Must be one of the following values (upper or lowercased): ‘regular’, ‘petite’, ‘plus’, ‘big_and_tall’, or ‘maternity’.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    size_type?: string;
    /**
     * Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    tax?: string;
    /**
     * <p><= 500 characters</p> <p>The name of the product.</p>
     * @type {string}
     * @memberof UpdatableItemAttributes
     */
    title?: string;
    /**
     * Options for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed.
     * @type {Array<string>}
     * @memberof UpdatableItemAttributes
     */
    variant_names?: Array<string>;
    /**
     * Option values for this variant. People will see these options next to your Pin and can select the one they want. List them in the order you want them displayed. The order of the variant values must be consistent with the order of the variant names.
     * @type {Array<string>}
     * @memberof UpdatableItemAttributes
     */
    variant_values?: Array<string>;
}

/**
 * The field types supported by the update mask
 * @export
 * @enum {string}
 */
export type UpdateMaskFieldType = 'ad_link' | 'adult' | 'age_group' | 'availability' | 'average_review_rating' | 'brand' | 'checkout_enabled' | 'color' | 'condition' | 'custom_label_0' | 'custom_label_1' | 'custom_label_2' | 'custom_label_3' | 'custom_label_4' | 'description' | 'free_shipping_label' | 'free_shipping_limit' | 'gender' | 'google_product_category' | 'gtin' | 'item_group_id' | 'last_updated_time' | 'link' | 'material' | 'min_ad_price' | 'mpn' | 'number_of_ratings' | 'number_of_reviews' | 'pattern' | 'price' | 'product_type' | 'sale_price' | 'shipping' | 'shipping_height' | 'shipping_weight' | 'shipping_width' | 'size' | 'size_system' | 'size_type' | 'tax' | 'title' | 'variant_names' | 'variant_values';

/**
 * 
 * @export
 */
export type UserAccountFollowedInterests200Response = {
    /**
     * 
     * @type {Array<Interest>}
     * @memberof UserAccountFollowedInterests200Response
     */
    items: Array<Interest>;
    /**
     * 
     * @type {string}
     * @memberof UserAccountFollowedInterests200Response
     */
    bookmark?: string;
}

/**
 * Specifies the type of followees to be kept when filtering them.
 * @export
 * @enum {string}
 */
export type UserFollowingFeedType = 'ALL' | 'RANKED' | 'CREATOR_ONLY' | 'RANKED_CREATOR_ONLY';

/**
 * 
 * @export
 */
export type UserFollowingGet200Response = {
    /**
     * Users
     * @type {Array<UserSummary>}
     * @memberof UserFollowingGet200Response
     */
    items: Array<UserSummary>;
    /**
     * 
     * @type {string}
     * @memberof UserFollowingGet200Response
     */
    bookmark?: string;
}

/**
 * User list operation type (add or remove)
 * @export
 * @enum {string}
 */
export type UserListOperationType = 'ADD' | 'REMOVE';

/**
 * User list type
 * @export
 * @enum {string}
 */
export type UserListType = 'EMAIL' | 'IDFA' | 'MAID' | 'LR_ID' | 'DLX_ID' | 'HASHED_PINNER_ID';

/**
 * 
 * @export
 */
export type UserSummary = {
    /**
     * Username
     * @type {string}
     * @memberof UserSummary
     */
    username?: string;
    /**
     * Always \"user\"
     * @type {string}
     * @memberof UserSummary
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type UserWebsiteSummary = {
    /**
     * Website with path or domain only
     * @type {string}
     * @memberof UserWebsiteSummary
     */
    website?: string;
    /**
     * Status of the verification process
     * @type {string}
     * @memberof UserWebsiteSummary
     */
    status?: string;
    /**
     * UTC timestamp when the verification happened - sometimes missing
     * @type {string}
     * @memberof UserWebsiteSummary
     */
    verified_at?: string;
}

/**
 * 
 * @export
 */
export type UserWebsiteVerificationCode = {
    /**
     * Code to check against the user claiming the website
     * @type {string}
     * @memberof UserWebsiteVerificationCode
     */
    verification_code?: string;
    /**
     * DNS TXT record to check against for the website to be claimed
     * @type {string}
     * @memberof UserWebsiteVerificationCode
     */
    dns_txt_record?: string;
    /**
     * Metatag the verification process searchs for the website to be claimed
     * @type {string}
     * @memberof UserWebsiteVerificationCode
     */
    metatag?: string;
    /**
     * File expected to find on the website being claimed
     * @type {string}
     * @memberof UserWebsiteVerificationCode
     */
    filename?: string;
    /**
     * A full html file to upload to the website in order for it to be claimed
     * @type {string}
     * @memberof UserWebsiteVerificationCode
     */
    file_content?: string;
}


            export type UserWebsiteVerifyRequestVerificationMethodEnum = 'FILENAME' | 'METATAG' | 'DNSTXT';
/**
 * User website verification request
 * @export
 */
export type UserWebsiteVerifyRequest = {
    /**
     * 
     * @type {string}
     * @memberof UserWebsiteVerifyRequest
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWebsiteVerifyRequest
     */
    verification_method?: UserWebsiteVerifyRequestVerificationMethodEnum;
}

/**
 * 
 * @export
 */
export type UserWebsitesGet200Response = {
    /**
     * 
     * @type {Array<UserWebsiteSummary>}
     * @memberof UserWebsitesGet200Response
     */
    items: Array<UserWebsiteSummary>;
    /**
     * 
     * @type {string}
     * @memberof UserWebsitesGet200Response
     */
    bookmark?: string;
}

/**
 * 
 * @export
 */
export type VideoMetadata = {
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    item_type?: string;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    cover_image_url?: string;
    /**
     * Video url (720p). </p><strong>Note:</strong> This field is limited and not available to all apps.
     * @type {string}
     * @memberof VideoMetadata
     */
    video_url?: string;
    /**
     * Duration (in milliseconds)
     * @type {number}
     * @memberof VideoMetadata
     */
    duration?: number;
    /**
     * Height (in pixels)
     * @type {number}
     * @memberof VideoMetadata
     */
    height?: number;
    /**
     * Width (in pixels)
     * @type {number}
     * @memberof VideoMetadata
     */
    width?: number;
}



/**
 * AdAccountsApi - fetch parameter creator
 * @export
 */
export const AdAccountsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
         * @summary Get ad account analytics
         * @throws {RequiredError}
         */
        adAccountAnalytics(adAccountId: string, startDate: Date, endDate: Date, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adAccountAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for an ad account
         * @throws {RequiredError}
         */
        adAccountTargetingAnalyticsGet(adAccountId: string, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountTargetingAnalyticsGet.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adAccountTargetingAnalyticsGet.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adAccountTargetingAnalyticsGet.');
            }
            // verify required parameter 'targetingTypes' is not null or undefined
            if (targetingTypes === null || targetingTypes === undefined) {
                throw new RequiredError('targetingTypes','Required parameter targetingTypes was null or undefined when calling adAccountTargetingAnalyticsGet.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adAccountTargetingAnalyticsGet.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adAccountTargetingAnalyticsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/targeting_analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (targetingTypes) {
                localVarQueryParameter['targeting_types'] = targetingTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            if (attributionTypes !== undefined) {
                localVarQueryParameter['attribution_types'] = ((attributionTypes:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
         * @summary Create ad account
         * @throws {RequiredError}
         */
        adAccountsCreate(adAccountCreateRequest: AdAccountCreateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountCreateRequest' is not null or undefined
            if (adAccountCreateRequest === null || adAccountCreateRequest === undefined) {
                throw new RequiredError('adAccountCreateRequest','Required parameter adAccountCreateRequest was null or undefined when calling adAccountsCreate.');
            }
            const localVarPath = `/ad_accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adAccountCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adAccountCreateRequest != null ? adAccountCreateRequest : {}) : (((adAccountCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an ad account
         * @summary Get ad account
         * @throws {RequiredError}
         */
        adAccountsGet(adAccountId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @throws {RequiredError}
         */
        adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options: RequestOptions): FetchArgs {
            const localVarPath = `/ad_accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (includeSharedAccounts !== undefined) {
                localVarQueryParameter['include_shared_accounts'] = ((includeSharedAccounts:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it\'s in beta release.
         * @summary Create a request for a Marketing Mix Modeling (MMM) report
         * @throws {RequiredError}
         */
        analyticsCreateMmmReport(adAccountId: string, createMMMReportRequest: CreateMMMReportRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsCreateMmmReport.');
            }
            // verify required parameter 'createMMMReportRequest' is not null or undefined
            if (createMMMReportRequest === null || createMMMReportRequest === undefined) {
                throw new RequiredError('createMMMReportRequest','Required parameter createMMMReportRequest was null or undefined when calling analyticsCreateMmmReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/mmm_reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createMMMReportRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createMMMReportRequest != null ? createMMMReportRequest : {}) : (((createMMMReportRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
         * @summary Create async request for an account analytics report
         * @throws {RequiredError}
         */
        analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsCreateReport.');
            }
            // verify required parameter 'adsAnalyticsCreateAsyncRequest' is not null or undefined
            if (adsAnalyticsCreateAsyncRequest === null || adsAnalyticsCreateAsyncRequest === undefined) {
                throw new RequiredError('adsAnalyticsCreateAsyncRequest','Required parameter adsAnalyticsCreateAsyncRequest was null or undefined when calling analyticsCreateReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adsAnalyticsCreateAsyncRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adsAnalyticsCreateAsyncRequest != null ? adsAnalyticsCreateAsyncRequest : {}) : (((adsAnalyticsCreateAsyncRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
         * @summary Create async request for an analytics report using a template
         * @throws {RequiredError}
         */
        analyticsCreateTemplateReport(adAccountId: string, templateId: string, startDate?: Date, endDate?: Date, granularity?: Granularity, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsCreateTemplateReport.');
            }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId','Required parameter templateId was null or undefined when calling analyticsCreateTemplateReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/templates/{template_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
         * @summary Get advertiser Marketing Mix Modeling (MMM) report.
         * @throws {RequiredError}
         */
        analyticsGetMmmReport(adAccountId: string, token: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsGetMmmReport.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling analyticsGetMmmReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/mmm_reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = ((token:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @throws {RequiredError}
         */
        analyticsGetReport(adAccountId: string, token: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsGetReport.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling analyticsGetReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = ((token:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an ad account and all the ads data associated with that account.  A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5).  Go to https://developers.pinterest.com/docs/dev-tools/sandbox/ for more information.
         * @summary Delete ads data for ad account in API Sandbox
         * @throws {RequiredError}
         */
        sandboxDelete(adAccountId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling sandboxDelete.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/sandbox`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all Templates associated with an ad account ID.
         * @summary List templates
         * @throws {RequiredError}
         */
        templatesList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling templatesList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/templates`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AdAccountsApiType = { 
    adAccountAnalytics(adAccountId: string, startDate: Date, endDate: Date, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<AdAccountAnalyticsResponseInner>>,

    adAccountTargetingAnalyticsGet(adAccountId: string, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions): Promise<MetricsResponse>,

    adAccountsCreate(adAccountCreateRequest: AdAccountCreateRequest, options?: RequestOptions): Promise<AdAccount>,

    adAccountsGet(adAccountId: string, options?: RequestOptions): Promise<AdAccount>,

    adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: RequestOptions): Promise<AdAccountsList200Response>,

    analyticsCreateMmmReport(adAccountId: string, createMMMReportRequest: CreateMMMReportRequest, options?: RequestOptions): Promise<CreateMMMReportResponse>,

    analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: RequestOptions): Promise<AdsAnalyticsCreateAsyncResponse>,

    analyticsCreateTemplateReport(adAccountId: string, templateId: string, startDate?: Date, endDate?: Date, granularity?: Granularity, options?: RequestOptions): Promise<AdsAnalyticsCreateAsyncResponse>,

    analyticsGetMmmReport(adAccountId: string, token: string, options?: RequestOptions): Promise<GetMMMReportResponse>,

    analyticsGetReport(adAccountId: string, token: string, options?: RequestOptions): Promise<AdsAnalyticsGetAsyncResponse>,

    sandboxDelete(adAccountId: string, options?: RequestOptions): Promise<string>,

    templatesList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<TemplatesList200Response>,
}

/**
 * AdAccountsApi - factory function to inject configuration 
 * @export
 */
export const AdAccountsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AdAccountsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
         * @summary Get ad account analytics
         * @throws {RequiredError}
         */
        adAccountAnalytics(adAccountId: string, startDate: Date, endDate: Date, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<AdAccountAnalyticsResponseInner>> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for an ad account
         * @throws {RequiredError}
         */
        adAccountTargetingAnalyticsGet(adAccountId: string, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions = {}): Promise<MetricsResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountTargetingAnalyticsGet(adAccountId, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
         * @summary Create ad account
         * @throws {RequiredError}
         */
        adAccountsCreate(adAccountCreateRequest: AdAccountCreateRequest, options?: RequestOptions = {}): Promise<AdAccount> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountsCreate(adAccountCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get an ad account
         * @summary Get ad account
         * @throws {RequiredError}
         */
        adAccountsGet(adAccountId: string, options?: RequestOptions = {}): Promise<AdAccount> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountsGet(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @throws {RequiredError}
         */
        adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: RequestOptions = {}): Promise<AdAccountsList200Response> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountsList(bookmark, pageSize, includeSharedAccounts, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it\'s in beta release.
         * @summary Create a request for a Marketing Mix Modeling (MMM) report
         * @throws {RequiredError}
         */
        analyticsCreateMmmReport(adAccountId: string, createMMMReportRequest: CreateMMMReportRequest, options?: RequestOptions = {}): Promise<CreateMMMReportResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsCreateMmmReport(adAccountId, createMMMReportRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
         * @summary Create async request for an account analytics report
         * @throws {RequiredError}
         */
        analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: RequestOptions = {}): Promise<AdsAnalyticsCreateAsyncResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
         * @summary Create async request for an analytics report using a template
         * @throws {RequiredError}
         */
        analyticsCreateTemplateReport(adAccountId: string, templateId: string, startDate?: Date, endDate?: Date, granularity?: Granularity, options?: RequestOptions = {}): Promise<AdsAnalyticsCreateAsyncResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsCreateTemplateReport(adAccountId, templateId, startDate, endDate, granularity, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
         * @summary Get advertiser Marketing Mix Modeling (MMM) report.
         * @throws {RequiredError}
         */
        analyticsGetMmmReport(adAccountId: string, token: string, options?: RequestOptions = {}): Promise<GetMMMReportResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsGetMmmReport(adAccountId, token, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @throws {RequiredError}
         */
        analyticsGetReport(adAccountId: string, token: string, options?: RequestOptions = {}): Promise<AdsAnalyticsGetAsyncResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsGetReport(adAccountId, token, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete an ad account and all the ads data associated with that account.  A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5).  Go to https://developers.pinterest.com/docs/dev-tools/sandbox/ for more information.
         * @summary Delete ads data for ad account in API Sandbox
         * @throws {RequiredError}
         */
        sandboxDelete(adAccountId: string, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).sandboxDelete(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets all Templates associated with an ad account ID.
         * @summary List templates
         * @throws {RequiredError}
         */
        templatesList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<TemplatesList200Response> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).templatesList(adAccountId, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * AdGroupsApi - fetch parameter creator
 * @export
 */
export const AdGroupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get ad group analytics
         * @throws {RequiredError}
         */
        adGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adGroupIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'adGroupIds' is not null or undefined
            if (adGroupIds === null || adGroupIds === undefined) {
                throw new RequiredError('adGroupIds','Required parameter adGroupIds was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adGroupsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
         * @summary Get audience sizing
         * @throws {RequiredError}
         */
        adGroupsAudienceSizing(adAccountId: string, adGroupAudienceSizingRequest?: AdGroupAudienceSizingRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsAudienceSizing.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups/audience_sizing`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adGroupAudienceSizingRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adGroupAudienceSizingRequest != null ? adGroupAudienceSizingRequest : {}) : (((adGroupAudienceSizingRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> For more on bid floors see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-your-bid\"> Set your bid</a>.
         * @summary Get bid floors
         * @throws {RequiredError}
         */
        adGroupsBidFloorGet(adAccountId: string, bidFloorRequest: BidFloorRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsBidFloorGet.');
            }
            // verify required parameter 'bidFloorRequest' is not null or undefined
            if (bidFloorRequest === null || bidFloorRequest === undefined) {
                throw new RequiredError('bidFloorRequest','Required parameter bidFloorRequest was null or undefined when calling adGroupsBidFloorGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/bid_floor`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof bidFloorRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bidFloorRequest != null ? bidFloorRequest : {}) : (((bidFloorRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href=\"https://help.pinterest.com/en/business/article/campaign-structure\" target=\"_blank\"> click here</a>.</p> <strong>Note:</strong> - \'bid_in_micro_currency\' and \'budget_in_micro_currency\' should be expressed in microcurrency amounts based on the currency field set in the advertiser\'s profile.<p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
         * @summary Create ad groups
         * @throws {RequiredError}
         */
        adGroupsCreate(adAccountId: string, adGroupCreateRequest: Array<AdGroupCreateRequest>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsCreate.');
            }
            // verify required parameter 'adGroupCreateRequest' is not null or undefined
            if (adGroupCreateRequest === null || adGroupCreateRequest === undefined) {
                throw new RequiredError('adGroupCreateRequest','Required parameter adGroupCreateRequest was null or undefined when calling adGroupsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adGroupCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adGroupCreateRequest != null ? adGroupCreateRequest : {}) : (((adGroupCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
         * @summary Get ad group
         * @throws {RequiredError}
         */
        adGroupsGet(adAccountId: string, adGroupId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsGet.');
            }
            // verify required parameter 'adGroupId' is not null or undefined
            if (adGroupId === null || adGroupId === undefined) {
                throw new RequiredError('adGroupId','Required parameter adGroupId was null or undefined when calling adGroupsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups/{ad_group_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"ad_group_id"}}`, encodeURIComponent(String(adGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id. Do not provide both.
         * @summary List ad groups
         * @throws {RequiredError}
         */
        adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (translateInterestsToNames !== undefined) {
                localVarQueryParameter['translate_interests_to_names'] = ((translateInterestsToNames:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for ad groups
         * @throws {RequiredError}
         */
        adGroupsTargetingAnalyticsGet(adAccountId: string, adGroupIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            // verify required parameter 'adGroupIds' is not null or undefined
            if (adGroupIds === null || adGroupIds === undefined) {
                throw new RequiredError('adGroupIds','Required parameter adGroupIds was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            // verify required parameter 'targetingTypes' is not null or undefined
            if (targetingTypes === null || targetingTypes === undefined) {
                throw new RequiredError('targetingTypes','Required parameter targetingTypes was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adGroupsTargetingAnalyticsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups/targeting_analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (targetingTypes) {
                localVarQueryParameter['targeting_types'] = targetingTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            if (attributionTypes !== undefined) {
                localVarQueryParameter['attribution_types'] = ((attributionTypes:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple existing ad groups.
         * @summary Update ad groups
         * @throws {RequiredError}
         */
        adGroupsUpdate(adAccountId: string, adGroupUpdateRequest: Array<AdGroupUpdateRequest>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsUpdate.');
            }
            // verify required parameter 'adGroupUpdateRequest' is not null or undefined
            if (adGroupUpdateRequest === null || adGroupUpdateRequest === undefined) {
                throw new RequiredError('adGroupUpdateRequest','Required parameter adGroupUpdateRequest was null or undefined when calling adGroupsUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adGroupUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adGroupUpdateRequest != null ? adGroupUpdateRequest : {}) : (((adGroupUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AdGroupsApiType = { 
    adGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adGroupIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<AdGroupsAnalyticsResponseInner>>,

    adGroupsAudienceSizing(adAccountId: string, adGroupAudienceSizingRequest?: AdGroupAudienceSizingRequest, options?: RequestOptions): Promise<AdGroupAudienceSizingResponse>,

    adGroupsBidFloorGet(adAccountId: string, bidFloorRequest: BidFloorRequest, options?: RequestOptions): Promise<BidFloor>,

    adGroupsCreate(adAccountId: string, adGroupCreateRequest: Array<AdGroupCreateRequest>, options?: RequestOptions): Promise<AdGroupArrayResponse>,

    adGroupsGet(adAccountId: string, adGroupId: string, options?: RequestOptions): Promise<AdGroupResponse>,

    adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: RequestOptions): Promise<AdGroupsList200Response>,

    adGroupsTargetingAnalyticsGet(adAccountId: string, adGroupIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions): Promise<MetricsResponse>,

    adGroupsUpdate(adAccountId: string, adGroupUpdateRequest: Array<AdGroupUpdateRequest>, options?: RequestOptions): Promise<AdGroupArrayResponse>,
}

/**
 * AdGroupsApi - factory function to inject configuration 
 * @export
 */
export const AdGroupsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AdGroupsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get ad group analytics
         * @throws {RequiredError}
         */
        adGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adGroupIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<AdGroupsAnalyticsResponseInner>> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get potential audience size for an ad group with given targeting criteria.  Potential audience size estimates the number of people you may be able to reach per month with your campaign.  It is based on historical advertising data and the targeting criteria you select. It does not guarantee results or take into account factors such as bid, budget, schedule, seasonality or product experiments.
         * @summary Get audience sizing
         * @throws {RequiredError}
         */
        adGroupsAudienceSizing(adAccountId: string, adGroupAudienceSizingRequest?: AdGroupAudienceSizingRequest, options?: RequestOptions = {}): Promise<AdGroupAudienceSizingResponse> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsAudienceSizing(adAccountId, adGroupAudienceSizingRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List bid floors for your campaign configuration. Bid floors are given in microcurrency values based on the currency in the bid floor specification. <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> For more on bid floors see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-your-bid\"> Set your bid</a>.
         * @summary Get bid floors
         * @throws {RequiredError}
         */
        adGroupsBidFloorGet(adAccountId: string, bidFloorRequest: BidFloorRequest, options?: RequestOptions = {}): Promise<BidFloor> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsBidFloorGet(adAccountId, bidFloorRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create multiple new ad groups. All ads in a given ad group will have the same budget, bid, run dates, targeting, and placement (search, browse, other). For more information, <a href=\"https://help.pinterest.com/en/business/article/campaign-structure\" target=\"_blank\"> click here</a>.</p> <strong>Note:</strong> - \'bid_in_micro_currency\' and \'budget_in_micro_currency\' should be expressed in microcurrency amounts based on the currency field set in the advertiser\'s profile.<p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul> - Ad groups belong to ad campaigns. Some types of campaigns (e.g. budget optimization) have limits on the number of ad groups they can hold. If you exceed those limits, you will get an error message. - Start and end time cannot be set for ad groups that belong to CBO campaigns. Currently, campaigns with the following objective types: TRAFFIC, AWARENESS, WEB_CONVERSIONS, and CATALOG_SALES will default to CBO.
         * @summary Create ad groups
         * @throws {RequiredError}
         */
        adGroupsCreate(adAccountId: string, adGroupCreateRequest: Array<AdGroupCreateRequest>, options?: RequestOptions = {}): Promise<AdGroupArrayResponse> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsCreate(adAccountId, adGroupCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
         * @summary Get ad group
         * @throws {RequiredError}
         */
        adGroupsGet(adAccountId: string, adGroupId: string, options?: RequestOptions = {}): Promise<AdGroupResponse> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsGet(adAccountId, adGroupId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List ad groups based on provided campaign IDs or ad group IDs.(campaign_ids or ad_group_ids). <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id. Do not provide both.
         * @summary List ad groups
         * @throws {RequiredError}
         */
        adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: RequestOptions = {}): Promise<AdGroupsList200Response> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsList(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get targeting analytics for one or more ad groups. For the requested ad group(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for ad groups
         * @throws {RequiredError}
         */
        adGroupsTargetingAnalyticsGet(adAccountId: string, adGroupIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions = {}): Promise<MetricsResponse> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsTargetingAnalyticsGet(adAccountId, adGroupIds, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update multiple existing ad groups.
         * @summary Update ad groups
         * @throws {RequiredError}
         */
        adGroupsUpdate(adAccountId: string, adGroupUpdateRequest: Array<AdGroupUpdateRequest>, options?: RequestOptions = {}): Promise<AdGroupArrayResponse> {
            const localVarFetchArgs = AdGroupsApiFetchParamCreator(configuration).adGroupsUpdate(adAccountId, adGroupUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * AdsApi - fetch parameter creator
 * @export
 */
export const AdsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. <p/> If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See <a href=\"https://help.pinterest.com/en/business/article/promoted-pins-overview\" target=\"_blank\">Ads Overview</a>.) <p/> You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires.
         * @summary Create ad preview with pin or image
         * @throws {RequiredError}
         */
        adPreviewsCreate(adAccountId: string, adPreviewRequest: AdPreviewRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adPreviewsCreate.');
            }
            // verify required parameter 'adPreviewRequest' is not null or undefined
            if (adPreviewRequest === null || adPreviewRequest === undefined) {
                throw new RequiredError('adPreviewRequest','Required parameter adPreviewRequest was null or undefined when calling adPreviewsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_previews`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adPreviewRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adPreviewRequest != null ? adPreviewRequest : {}) : (((adPreviewRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for ads
         * @throws {RequiredError}
         */
        adTargetingAnalyticsGet(adAccountId: string, adIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adTargetingAnalyticsGet.');
            }
            // verify required parameter 'adIds' is not null or undefined
            if (adIds === null || adIds === undefined) {
                throw new RequiredError('adIds','Required parameter adIds was null or undefined when calling adTargetingAnalyticsGet.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adTargetingAnalyticsGet.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adTargetingAnalyticsGet.');
            }
            // verify required parameter 'targetingTypes' is not null or undefined
            if (targetingTypes === null || targetingTypes === undefined) {
                throw new RequiredError('targetingTypes','Required parameter targetingTypes was null or undefined when calling adTargetingAnalyticsGet.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adTargetingAnalyticsGet.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adTargetingAnalyticsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads/targeting_analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (targetingTypes) {
                localVarQueryParameter['targeting_types'] = targetingTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            if (attributionTypes !== undefined) {
                localVarQueryParameter['attribution_types'] = ((attributionTypes:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get ad analytics
         * @throws {RequiredError}
         */
        adsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'adIds' is not null or undefined
            if (adIds === null || adIds === undefined) {
                throw new RequiredError('adIds','Required parameter adIds was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
         * @summary Create ads
         * @throws {RequiredError}
         */
        adsCreate(adAccountId: string, adCreateRequest: Array<AdCreateRequest>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsCreate.');
            }
            // verify required parameter 'adCreateRequest' is not null or undefined
            if (adCreateRequest === null || adCreateRequest === undefined) {
                throw new RequiredError('adCreateRequest','Required parameter adCreateRequest was null or undefined when calling adsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adCreateRequest != null ? adCreateRequest : {}) : (((adCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
         * @summary Get ad
         * @throws {RequiredError}
         */
        adsGet(adAccountId: string, adId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsGet.');
            }
            // verify required parameter 'adId' is not null or undefined
            if (adId === null || adId === undefined) {
                throw new RequiredError('adId','Required parameter adId was null or undefined when calling adsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads/{ad_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"ad_id"}}`, encodeURIComponent(String(adId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses <p/> If no filter is provided, all ads in the ad account are returned. <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. <p/> Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see <a href=\"https://policy.pinterest.com/en/advertising-guidelines\">Pinterest advertising standards</a>.
         * @summary List ads
         * @throws {RequiredError}
         */
        adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple existing ads
         * @summary Update ads
         * @throws {RequiredError}
         */
        adsUpdate(adAccountId: string, adUpdateRequest: Array<AdUpdateRequest>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsUpdate.');
            }
            // verify required parameter 'adUpdateRequest' is not null or undefined
            if (adUpdateRequest === null || adUpdateRequest === undefined) {
                throw new RequiredError('adUpdateRequest','Required parameter adUpdateRequest was null or undefined when calling adsUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adUpdateRequest != null ? adUpdateRequest : {}) : (((adUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AdsApiType = { 
    adPreviewsCreate(adAccountId: string, adPreviewRequest: AdPreviewRequest, options?: RequestOptions): Promise<AdPreviewURLResponse>,

    adTargetingAnalyticsGet(adAccountId: string, adIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions): Promise<MetricsResponse>,

    adsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<AdsAnalyticsResponseInner>>,

    adsCreate(adAccountId: string, adCreateRequest: Array<AdCreateRequest>, options?: RequestOptions): Promise<AdArrayResponse>,

    adsGet(adAccountId: string, adId: string, options?: RequestOptions): Promise<AdResponse>,

    adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<AdsList200Response>,

    adsUpdate(adAccountId: string, adUpdateRequest: Array<AdUpdateRequest>, options?: RequestOptions): Promise<AdArrayResponse>,
}

/**
 * AdsApi - factory function to inject configuration 
 * @export
 */
export const AdsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AdsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. <p/> If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See <a href=\"https://help.pinterest.com/en/business/article/promoted-pins-overview\" target=\"_blank\">Ads Overview</a>.) <p/> You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires.
         * @summary Create ad preview with pin or image
         * @throws {RequiredError}
         */
        adPreviewsCreate(adAccountId: string, adPreviewRequest: AdPreviewRequest, options?: RequestOptions = {}): Promise<AdPreviewURLResponse> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adPreviewsCreate(adAccountId, adPreviewRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for ads
         * @throws {RequiredError}
         */
        adTargetingAnalyticsGet(adAccountId: string, adIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions = {}): Promise<MetricsResponse> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adTargetingAnalyticsGet(adAccountId, adIds, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get ad analytics
         * @throws {RequiredError}
         */
        adsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<AdsAnalyticsResponseInner>> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
         * @summary Create ads
         * @throws {RequiredError}
         */
        adsCreate(adAccountId: string, adCreateRequest: Array<AdCreateRequest>, options?: RequestOptions = {}): Promise<AdArrayResponse> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adsCreate(adAccountId, adCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
         * @summary Get ad
         * @throws {RequiredError}
         */
        adsGet(adAccountId: string, adId: string, options?: RequestOptions = {}): Promise<AdResponse> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adsGet(adAccountId, adId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses <p/> If no filter is provided, all ads in the ad account are returned. <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. <p/> Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see <a href=\"https://policy.pinterest.com/en/advertising-guidelines\">Pinterest advertising standards</a>.
         * @summary List ads
         * @throws {RequiredError}
         */
        adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<AdsList200Response> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adsList(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update multiple existing ads
         * @summary Update ads
         * @throws {RequiredError}
         */
        adsUpdate(adAccountId: string, adUpdateRequest: Array<AdUpdateRequest>, options?: RequestOptions = {}): Promise<AdArrayResponse> {
            const localVarFetchArgs = AdsApiFetchParamCreator(configuration).adsUpdate(adAccountId, adUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * AudienceInsightsApi - fetch parameter creator
 * @export
 */
export const AudienceInsightsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Audience Insights for an ad account. The response will return insights for 3 types of audiences: the ad account\'s engaged audience on Pinterest, the ad account\'s total audience on Pinterest and Pinterest\'s total audience.<p/> <a href=\"https://help.pinterest.com/en/business/article/audience-insights\" target=\"_blank\">Learn more about Audience Insights</a>.
         * @summary Get audience insights
         * @throws {RequiredError}
         */
        audienceInsightsGet(adAccountId: string, audienceInsightType: AudienceInsightType, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audienceInsightsGet.');
            }
            // verify required parameter 'audienceInsightType' is not null or undefined
            if (audienceInsightType === null || audienceInsightType === undefined) {
                throw new RequiredError('audienceInsightType','Required parameter audienceInsightType was null or undefined when calling audienceInsightsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/audience_insights`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (audienceInsightType !== undefined) {
                localVarQueryParameter['audience_insight_type'] = ((audienceInsightType:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the scope and type of available audiences, which along with a date, is an audience that has recently had an interaction (referred to here as a type) on pins. Interacted pins can belong to at least the most common **partner** or **Pinterest** scopes. This means that user interactions made on advertiser or partner pins will have the **partner** scope. You can also have user interactions performed in general on Pinterest with the **Pinterest** scope. In that case, you can then use the returned type and scope values together on requests to other endpoints to retrieve insight metrics for a desired audience.
         * @summary Get audience insights scope and type
         * @throws {RequiredError}
         */
        audienceInsightsScopeAndTypeGet(adAccountId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audienceInsightsScopeAndTypeGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/insights/audiences`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AudienceInsightsApiType = { 
    audienceInsightsGet(adAccountId: string, audienceInsightType: AudienceInsightType, options?: RequestOptions): Promise<AudienceInsightsResponse>,

    audienceInsightsScopeAndTypeGet(adAccountId: string, options?: RequestOptions): Promise<AudienceDefinitionResponse>,
}

/**
 * AudienceInsightsApi - factory function to inject configuration 
 * @export
 */
export const AudienceInsightsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AudienceInsightsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Audience Insights for an ad account. The response will return insights for 3 types of audiences: the ad account\'s engaged audience on Pinterest, the ad account\'s total audience on Pinterest and Pinterest\'s total audience.<p/> <a href=\"https://help.pinterest.com/en/business/article/audience-insights\" target=\"_blank\">Learn more about Audience Insights</a>.
         * @summary Get audience insights
         * @throws {RequiredError}
         */
        audienceInsightsGet(adAccountId: string, audienceInsightType: AudienceInsightType, options?: RequestOptions = {}): Promise<AudienceInsightsResponse> {
            const localVarFetchArgs = AudienceInsightsApiFetchParamCreator(configuration).audienceInsightsGet(adAccountId, audienceInsightType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the scope and type of available audiences, which along with a date, is an audience that has recently had an interaction (referred to here as a type) on pins. Interacted pins can belong to at least the most common **partner** or **Pinterest** scopes. This means that user interactions made on advertiser or partner pins will have the **partner** scope. You can also have user interactions performed in general on Pinterest with the **Pinterest** scope. In that case, you can then use the returned type and scope values together on requests to other endpoints to retrieve insight metrics for a desired audience.
         * @summary Get audience insights scope and type
         * @throws {RequiredError}
         */
        audienceInsightsScopeAndTypeGet(adAccountId: string, options?: RequestOptions = {}): Promise<AudienceDefinitionResponse> {
            const localVarFetchArgs = AudienceInsightsApiFetchParamCreator(configuration).audienceInsightsScopeAndTypeGet(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * AudiencesApi - fetch parameter creator
 * @export
 */
export const AudiencesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
         * @summary Create audience
         * @throws {RequiredError}
         */
        audiencesCreate(adAccountId: string, audienceCreateRequest: AudienceCreateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audiencesCreate.');
            }
            // verify required parameter 'audienceCreateRequest' is not null or undefined
            if (audienceCreateRequest === null || audienceCreateRequest === undefined) {
                throw new RequiredError('audienceCreateRequest','Required parameter audienceCreateRequest was null or undefined when calling audiencesCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/audiences`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof audienceCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(audienceCreateRequest != null ? audienceCreateRequest : {}) : (((audienceCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a custom audience and find the audiences you want your ads to reach.
         * @summary Create custom audience
         * @throws {RequiredError}
         */
        audiencesCreateCustom(adAccountId: string, audienceCreateCustomRequest: AudienceCreateCustomRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audiencesCreateCustom.');
            }
            // verify required parameter 'audienceCreateCustomRequest' is not null or undefined
            if (audienceCreateCustomRequest === null || audienceCreateCustomRequest === undefined) {
                throw new RequiredError('audienceCreateCustomRequest','Required parameter audienceCreateCustomRequest was null or undefined when calling audiencesCreateCustom.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/audiences/custom`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof audienceCreateCustomRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(audienceCreateCustomRequest != null ? audienceCreateCustomRequest : {}) : (((audienceCreateCustomRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific audience given the audience ID.
         * @summary Get audience
         * @throws {RequiredError}
         */
        audiencesGet(adAccountId: string, audienceId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audiencesGet.');
            }
            // verify required parameter 'audienceId' is not null or undefined
            if (audienceId === null || audienceId === undefined) {
                throw new RequiredError('audienceId','Required parameter audienceId was null or undefined when calling audiencesGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/audiences/{audience_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of audiences for the ad account.
         * @summary List audiences
         * @throws {RequiredError}
         */
        audiencesList(adAccountId: string, bookmark?: string, order?: 'ASCENDING' | 'DESCENDING', pageSize?: number, ownershipType?: 'OWNED' | 'RECEIVED', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audiencesList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/audiences`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (ownershipType !== undefined) {
                localVarQueryParameter['ownership_type'] = ((ownershipType:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update (edit or remove) an existing targeting audience.
         * @summary Update audience
         * @throws {RequiredError}
         */
        audiencesUpdate(adAccountId: string, audienceId: string, audienceUpdateRequest?: AudienceUpdateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling audiencesUpdate.');
            }
            // verify required parameter 'audienceId' is not null or undefined
            if (audienceId === null || audienceId === undefined) {
                throw new RequiredError('audienceId','Required parameter audienceId was null or undefined when calling audiencesUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/audiences/{audience_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"audience_id"}}`, encodeURIComponent(String(audienceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof audienceUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(audienceUpdateRequest != null ? audienceUpdateRequest : {}) : (((audienceUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AudiencesApiType = { 
    audiencesCreate(adAccountId: string, audienceCreateRequest: AudienceCreateRequest, options?: RequestOptions): Promise<Audience>,

    audiencesCreateCustom(adAccountId: string, audienceCreateCustomRequest: AudienceCreateCustomRequest, options?: RequestOptions): Promise<Audience>,

    audiencesGet(adAccountId: string, audienceId: string, options?: RequestOptions): Promise<Audience>,

    audiencesList(adAccountId: string, bookmark?: string, order?: 'ASCENDING' | 'DESCENDING', pageSize?: number, ownershipType?: 'OWNED' | 'RECEIVED', options?: RequestOptions): Promise<AudiencesList200Response>,

    audiencesUpdate(adAccountId: string, audienceId: string, audienceUpdateRequest?: AudienceUpdateRequest, options?: RequestOptions): Promise<Audience>,
}

/**
 * AudiencesApi - factory function to inject configuration 
 * @export
 */
export const AudiencesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AudiencesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
         * @summary Create audience
         * @throws {RequiredError}
         */
        audiencesCreate(adAccountId: string, audienceCreateRequest: AudienceCreateRequest, options?: RequestOptions = {}): Promise<Audience> {
            const localVarFetchArgs = AudiencesApiFetchParamCreator(configuration).audiencesCreate(adAccountId, audienceCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a custom audience and find the audiences you want your ads to reach.
         * @summary Create custom audience
         * @throws {RequiredError}
         */
        audiencesCreateCustom(adAccountId: string, audienceCreateCustomRequest: AudienceCreateCustomRequest, options?: RequestOptions = {}): Promise<Audience> {
            const localVarFetchArgs = AudiencesApiFetchParamCreator(configuration).audiencesCreateCustom(adAccountId, audienceCreateCustomRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a specific audience given the audience ID.
         * @summary Get audience
         * @throws {RequiredError}
         */
        audiencesGet(adAccountId: string, audienceId: string, options?: RequestOptions = {}): Promise<Audience> {
            const localVarFetchArgs = AudiencesApiFetchParamCreator(configuration).audiencesGet(adAccountId, audienceId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get list of audiences for the ad account.
         * @summary List audiences
         * @throws {RequiredError}
         */
        audiencesList(adAccountId: string, bookmark?: string, order?: 'ASCENDING' | 'DESCENDING', pageSize?: number, ownershipType?: 'OWNED' | 'RECEIVED', options?: RequestOptions = {}): Promise<AudiencesList200Response> {
            const localVarFetchArgs = AudiencesApiFetchParamCreator(configuration).audiencesList(adAccountId, bookmark, order, pageSize, ownershipType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update (edit or remove) an existing targeting audience.
         * @summary Update audience
         * @throws {RequiredError}
         */
        audiencesUpdate(adAccountId: string, audienceId: string, audienceUpdateRequest?: AudienceUpdateRequest, options?: RequestOptions = {}): Promise<Audience> {
            const localVarFetchArgs = AudiencesApiFetchParamCreator(configuration).audiencesUpdate(adAccountId, audienceId, audienceUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BillingApi - fetch parameter creator
 * @export
 */
export const BillingApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Redeem ads credit on behalf of the ad account id and apply it towards billing.  <strong>This endpoint might not be available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Redeem ad credits
         * @throws {RequiredError}
         */
        adsCreditRedeem(adAccountId: string, adsCreditRedeemRequest: AdsCreditRedeemRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsCreditRedeem.');
            }
            // verify required parameter 'adsCreditRedeemRequest' is not null or undefined
            if (adsCreditRedeemRequest === null || adsCreditRedeemRequest === undefined) {
                throw new RequiredError('adsCreditRedeemRequest','Required parameter adsCreditRedeemRequest was null or undefined when calling adsCreditRedeem.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads_credit/redeem`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write", "billing:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adsCreditRedeemRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adsCreditRedeemRequest != null ? adsCreditRedeemRequest : {}) : (((adsCreditRedeemRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of discounts applied to the account.  <strong>This endpoint might not be available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get ads credit discounts
         * @throws {RequiredError}
         */
        adsCreditsDiscountsGet(adAccountId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsCreditsDiscountsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads_credit/discounts`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read", "billing:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get billing profiles in the advertiser account.  <strong>This endpoint might not be available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get billing profiles
         * @throws {RequiredError}
         */
        billingProfilesGet(adAccountId: string, isActive: boolean, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling billingProfilesGet.');
            }
            // verify required parameter 'isActive' is not null or undefined
            if (isActive === null || isActive === undefined) {
                throw new RequiredError('isActive','Required parameter isActive was null or undefined when calling billingProfilesGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/billing_profiles`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read", "billing:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = ((isActive:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Salesforce account details including bill-to information to be used in insertion orders process for <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get Salesforce account details including bill-to information.
         * @throws {RequiredError}
         */
        ssioAccountsGet(adAccountId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ssioAccountsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ssio/accounts`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create insertion order through SSIO for <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Create insertion order through SSIO.
         * @throws {RequiredError}
         */
        ssioInsertionOrderCreate(adAccountId: string, sSIOCreateInsertionOrderRequest: SSIOCreateInsertionOrderRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ssioInsertionOrderCreate.');
            }
            // verify required parameter 'sSIOCreateInsertionOrderRequest' is not null or undefined
            if (sSIOCreateInsertionOrderRequest === null || sSIOCreateInsertionOrderRequest === undefined) {
                throw new RequiredError('sSIOCreateInsertionOrderRequest','Required parameter sSIOCreateInsertionOrderRequest was null or undefined when calling ssioInsertionOrderCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ssio/insertion_orders`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof sSIOCreateInsertionOrderRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sSIOCreateInsertionOrderRequest != null ? sSIOCreateInsertionOrderRequest : {}) : (((sSIOCreateInsertionOrderRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit insertion order through SSIO for <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Edit insertion order through SSIO.
         * @throws {RequiredError}
         */
        ssioInsertionOrderEdit(adAccountId: string, sSIOEditInsertionOrderRequest: SSIOEditInsertionOrderRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ssioInsertionOrderEdit.');
            }
            // verify required parameter 'sSIOEditInsertionOrderRequest' is not null or undefined
            if (sSIOEditInsertionOrderRequest === null || sSIOEditInsertionOrderRequest === undefined) {
                throw new RequiredError('sSIOEditInsertionOrderRequest','Required parameter sSIOEditInsertionOrderRequest was null or undefined when calling ssioInsertionOrderEdit.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ssio/insertion_orders`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof sSIOEditInsertionOrderRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sSIOEditInsertionOrderRequest != null ? sSIOEditInsertionOrderRequest : {}) : (((sSIOEditInsertionOrderRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get insertion order status for account id <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get insertion order status by ad account id.
         * @throws {RequiredError}
         */
        ssioInsertionOrdersStatusGetByAdAccount(adAccountId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ssioInsertionOrdersStatusGetByAdAccount.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ssio/insertion_orders/status`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get insertion order status for pin order id <code>pin_order_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get insertion order status by pin order id.
         * @throws {RequiredError}
         */
        ssioInsertionOrdersStatusGetByPinOrderId(adAccountId: string, pinOrderId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ssioInsertionOrdersStatusGetByPinOrderId.');
            }
            // verify required parameter 'pinOrderId' is not null or undefined
            if (pinOrderId === null || pinOrderId === undefined) {
                throw new RequiredError('pinOrderId','Required parameter pinOrderId was null or undefined when calling ssioInsertionOrdersStatusGetByPinOrderId.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"pin_order_id"}}`, encodeURIComponent(String(pinOrderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Salesforce order lines for account id <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get Salesforce order lines by ad account id.
         * @throws {RequiredError}
         */
        ssioOrderLinesGetByAdAccount(adAccountId: string, bookmark?: string, pageSize?: number, pinOrderId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ssioOrderLinesGetByAdAccount.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ssio/order_lines`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (pinOrderId !== undefined) {
                localVarQueryParameter['pin_order_id'] = ((pinOrderId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BillingApiType = { 
    adsCreditRedeem(adAccountId: string, adsCreditRedeemRequest: AdsCreditRedeemRequest, options?: RequestOptions): Promise<AdsCreditRedeemResponse>,

    adsCreditsDiscountsGet(adAccountId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<AdsCreditsDiscountsGet200Response>,

    billingProfilesGet(adAccountId: string, isActive: boolean, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<BillingProfilesGet200Response>,

    ssioAccountsGet(adAccountId: string, options?: RequestOptions): Promise<SSIOAccountResponse>,

    ssioInsertionOrderCreate(adAccountId: string, sSIOCreateInsertionOrderRequest: SSIOCreateInsertionOrderRequest, options?: RequestOptions): Promise<SSIOCreateInsertionOrderResponse>,

    ssioInsertionOrderEdit(adAccountId: string, sSIOEditInsertionOrderRequest: SSIOEditInsertionOrderRequest, options?: RequestOptions): Promise<SSIOEditInsertionOrderResponse>,

    ssioInsertionOrdersStatusGetByAdAccount(adAccountId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<SsioInsertionOrdersStatusGetByAdAccount200Response>,

    ssioInsertionOrdersStatusGetByPinOrderId(adAccountId: string, pinOrderId: string, options?: RequestOptions): Promise<SSIOInsertionOrderStatusResponse>,

    ssioOrderLinesGetByAdAccount(adAccountId: string, bookmark?: string, pageSize?: number, pinOrderId?: string, options?: RequestOptions): Promise<SsioOrderLinesGetByAdAccount200Response>,
}

/**
 * BillingApi - factory function to inject configuration 
 * @export
 */
export const BillingApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BillingApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Redeem ads credit on behalf of the ad account id and apply it towards billing.  <strong>This endpoint might not be available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Redeem ad credits
         * @throws {RequiredError}
         */
        adsCreditRedeem(adAccountId: string, adsCreditRedeemRequest: AdsCreditRedeemRequest, options?: RequestOptions = {}): Promise<AdsCreditRedeemResponse> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).adsCreditRedeem(adAccountId, adsCreditRedeemRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns the list of discounts applied to the account.  <strong>This endpoint might not be available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get ads credit discounts
         * @throws {RequiredError}
         */
        adsCreditsDiscountsGet(adAccountId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<AdsCreditsDiscountsGet200Response> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).adsCreditsDiscountsGet(adAccountId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get billing profiles in the advertiser account.  <strong>This endpoint might not be available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get billing profiles
         * @throws {RequiredError}
         */
        billingProfilesGet(adAccountId: string, isActive: boolean, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<BillingProfilesGet200Response> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).billingProfilesGet(adAccountId, isActive, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Salesforce account details including bill-to information to be used in insertion orders process for <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get Salesforce account details including bill-to information.
         * @throws {RequiredError}
         */
        ssioAccountsGet(adAccountId: string, options?: RequestOptions = {}): Promise<SSIOAccountResponse> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).ssioAccountsGet(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create insertion order through SSIO for <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Create insertion order through SSIO.
         * @throws {RequiredError}
         */
        ssioInsertionOrderCreate(adAccountId: string, sSIOCreateInsertionOrderRequest: SSIOCreateInsertionOrderRequest, options?: RequestOptions = {}): Promise<SSIOCreateInsertionOrderResponse> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).ssioInsertionOrderCreate(adAccountId, sSIOCreateInsertionOrderRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Edit insertion order through SSIO for <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Edit insertion order through SSIO.
         * @throws {RequiredError}
         */
        ssioInsertionOrderEdit(adAccountId: string, sSIOEditInsertionOrderRequest: SSIOEditInsertionOrderRequest, options?: RequestOptions = {}): Promise<SSIOEditInsertionOrderResponse> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).ssioInsertionOrderEdit(adAccountId, sSIOEditInsertionOrderRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get insertion order status for account id <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get insertion order status by ad account id.
         * @throws {RequiredError}
         */
        ssioInsertionOrdersStatusGetByAdAccount(adAccountId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<SsioInsertionOrdersStatusGetByAdAccount200Response> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).ssioInsertionOrdersStatusGetByAdAccount(adAccountId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get insertion order status for pin order id <code>pin_order_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get insertion order status by pin order id.
         * @throws {RequiredError}
         */
        ssioInsertionOrdersStatusGetByPinOrderId(adAccountId: string, pinOrderId: string, options?: RequestOptions = {}): Promise<SSIOInsertionOrderStatusResponse> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).ssioInsertionOrdersStatusGetByPinOrderId(adAccountId, pinOrderId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Salesforce order lines for account id <code>ad_account_id</code>. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Finance, Campaign.
         * @summary Get Salesforce order lines by ad account id.
         * @throws {RequiredError}
         */
        ssioOrderLinesGetByAdAccount(adAccountId: string, bookmark?: string, pageSize?: number, pinOrderId?: string, options?: RequestOptions = {}): Promise<SsioOrderLinesGetByAdAccount200Response> {
            const localVarFetchArgs = BillingApiFetchParamCreator(configuration).ssioOrderLinesGetByAdAccount(adAccountId, bookmark, pageSize, pinOrderId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BoardsApi - fetch parameter creator
 * @export
 */
export const BoardsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @throws {RequiredError}
         */
        boardSectionsCreate(boardId: string, boardSection: BoardSection, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsCreate.');
            }
            // verify required parameter 'boardSection' is not null or undefined
            if (boardSection === null || boardSection === undefined) {
                throw new RequiredError('boardSection','Required parameter boardSection was null or undefined when calling boardSectionsCreate.');
            }
            const localVarPath = `/boards/{board_id}/sections`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof boardSection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(boardSection != null ? boardSection : {}) : (((boardSection:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @throws {RequiredError}
         */
        boardSectionsDelete(boardId: string, sectionId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsDelete.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling boardSectionsDelete.');
            }
            const localVarPath = `/boards/{board_id}/sections/{section_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @throws {RequiredError}
         */
        boardSectionsList(boardId: string, adAccountId?: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsList.');
            }
            const localVarPath = `/boards/{board_id}/sections`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @throws {RequiredError}
         */
        boardSectionsListPins(boardId: string, sectionId: string, adAccountId?: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsListPins.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling boardSectionsListPins.');
            }
            const localVarPath = `/boards/{board_id}/sections/{section_id}/pins`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @throws {RequiredError}
         */
        boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsUpdate.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling boardSectionsUpdate.');
            }
            // verify required parameter 'boardSection' is not null or undefined
            if (boardSection === null || boardSection === undefined) {
                throw new RequiredError('boardSection','Required parameter boardSection was null or undefined when calling boardSectionsUpdate.');
            }
            const localVarPath = `/boards/{board_id}/sections/{section_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof boardSection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(boardSection != null ? boardSection : {}) : (((boardSection:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @throws {RequiredError}
         */
        boardsCreate(board: Board, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'board' is not null or undefined
            if (board === null || board === undefined) {
                throw new RequiredError('board','Required parameter board was null or undefined when calling boardsCreate.');
            }
            const localVarPath = `/boards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof board !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(board != null ? board : {}) : (((board:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @throws {RequiredError}
         */
        boardsDelete(boardId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsDelete.');
            }
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @throws {RequiredError}
         */
        boardsGet(boardId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsGet.');
            }
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @throws {RequiredError}
         */
        boardsList(adAccountId?: string, bookmark?: string, pageSize?: number, privacy?: 'ALL' | 'PROTECTED' | 'PUBLIC' | 'SECRET' | 'PUBLIC_AND_SECRET', options: RequestOptions): FetchArgs {
            const localVarPath = `/boards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (privacy !== undefined) {
                localVarQueryParameter['privacy'] = ((privacy:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @throws {RequiredError}
         */
        boardsListPins(boardId: string, bookmark?: string, pageSize?: number, creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>, adAccountId?: string, pinMetrics?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsListPins.');
            }
            const localVarPath = `/boards/{board_id}/pins`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (creativeTypes) {
                localVarQueryParameter['creative_types'] = creativeTypes;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (pinMetrics !== undefined) {
                localVarQueryParameter['pin_metrics'] = ((pinMetrics:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board
         * @throws {RequiredError}
         */
        boardsUpdate(boardId: string, boardUpdate: BoardUpdate, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsUpdate.');
            }
            // verify required parameter 'boardUpdate' is not null or undefined
            if (boardUpdate === null || boardUpdate === undefined) {
                throw new RequiredError('boardUpdate','Required parameter boardUpdate was null or undefined when calling boardsUpdate.');
            }
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof boardUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(boardUpdate != null ? boardUpdate : {}) : (((boardUpdate:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BoardsApiType = { 
    boardSectionsCreate(boardId: string, boardSection: BoardSection, adAccountId?: string, options?: RequestOptions): Promise<BoardSection>,

    boardSectionsDelete(boardId: string, sectionId: string, adAccountId?: string, options?: RequestOptions): Promise<Response>,

    boardSectionsList(boardId: string, adAccountId?: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<BoardSectionsList200Response>,

    boardSectionsListPins(boardId: string, sectionId: string, adAccountId?: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<BoardsListPins200Response>,

    boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, adAccountId?: string, options?: RequestOptions): Promise<BoardSection>,

    boardsCreate(board: Board, adAccountId?: string, options?: RequestOptions): Promise<Board>,

    boardsDelete(boardId: string, adAccountId?: string, options?: RequestOptions): Promise<Response>,

    boardsGet(boardId: string, adAccountId?: string, options?: RequestOptions): Promise<Board>,

    boardsList(adAccountId?: string, bookmark?: string, pageSize?: number, privacy?: 'ALL' | 'PROTECTED' | 'PUBLIC' | 'SECRET' | 'PUBLIC_AND_SECRET', options?: RequestOptions): Promise<BoardsList200Response>,

    boardsListPins(boardId: string, bookmark?: string, pageSize?: number, creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>, adAccountId?: string, pinMetrics?: boolean, options?: RequestOptions): Promise<BoardsListPins200Response>,

    boardsUpdate(boardId: string, boardUpdate: BoardUpdate, adAccountId?: string, options?: RequestOptions): Promise<Board>,
}

/**
 * BoardsApi - factory function to inject configuration 
 * @export
 */
export const BoardsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BoardsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @throws {RequiredError}
         */
        boardSectionsCreate(boardId: string, boardSection: BoardSection, adAccountId?: string, options?: RequestOptions = {}): Promise<BoardSection> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsCreate(boardId, boardSection, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @throws {RequiredError}
         */
        boardSectionsDelete(boardId: string, sectionId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsDelete(boardId, sectionId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @throws {RequiredError}
         */
        boardSectionsList(boardId: string, adAccountId?: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<BoardSectionsList200Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsList(boardId, adAccountId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @throws {RequiredError}
         */
        boardSectionsListPins(boardId: string, sectionId: string, adAccountId?: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<BoardsListPins200Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsListPins(boardId, sectionId, adAccountId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @throws {RequiredError}
         */
        boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, adAccountId?: string, options?: RequestOptions = {}): Promise<BoardSection> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsUpdate(boardId, sectionId, boardSection, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a board owned by the \"operation user_account\". Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @throws {RequiredError}
         */
        boardsCreate(board: Board, adAccountId?: string, options?: RequestOptions = {}): Promise<Board> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsCreate(board, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a board owned by the \"operation user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @throws {RequiredError}
         */
        boardsDelete(boardId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsDelete(boardId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @throws {RequiredError}
         */
        boardsGet(boardId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Board> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsGet(boardId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @throws {RequiredError}
         */
        boardsList(adAccountId?: string, bookmark?: string, pageSize?: number, privacy?: 'ALL' | 'PROTECTED' | 'PUBLIC' | 'SECRET' | 'PUBLIC_AND_SECRET', options?: RequestOptions = {}): Promise<BoardsList200Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsList(adAccountId, bookmark, pageSize, privacy, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @throws {RequiredError}
         */
        boardsListPins(boardId: string, bookmark?: string, pageSize?: number, creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>, adAccountId?: string, pinMetrics?: boolean, options?: RequestOptions = {}): Promise<BoardsListPins200Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsListPins(boardId, bookmark, pageSize, creativeTypes, adAccountId, pinMetrics, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update a board owned by the \"operating user_account\". - Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board
         * @throws {RequiredError}
         */
        boardsUpdate(boardId: string, boardUpdate: BoardUpdate, adAccountId?: string, options?: RequestOptions = {}): Promise<Board> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsUpdate(boardId, boardUpdate, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BulkApi - fetch parameter creator
 * @export
 */
export const BulkApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
         * @summary Get advertiser entities in bulk
         * @throws {RequiredError}
         */
        bulkDownloadCreate(adAccountId: string, bulkDownloadRequest: BulkDownloadRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling bulkDownloadCreate.');
            }
            // verify required parameter 'bulkDownloadRequest' is not null or undefined
            if (bulkDownloadRequest === null || bulkDownloadRequest === undefined) {
                throw new RequiredError('bulkDownloadRequest','Required parameter bulkDownloadRequest was null or undefined when calling bulkDownloadCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/bulk/download`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof bulkDownloadRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bulkDownloadRequest != null ? bulkDownloadRequest : {}) : (((bulkDownloadRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
         * @summary Download advertiser entities in bulk
         * @throws {RequiredError}
         */
        bulkRequestGet(adAccountId: string, bulkRequestId: string, includeDetails?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling bulkRequestGet.');
            }
            // verify required parameter 'bulkRequestId' is not null or undefined
            if (bulkRequestId === null || bulkRequestId === undefined) {
                throw new RequiredError('bulkRequestId','Required parameter bulkRequestId was null or undefined when calling bulkRequestGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/bulk/{bulk_request_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"bulk_request_id"}}`, encodeURIComponent(String(bulkRequestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['include_details'] = ((includeDetails:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
         * @summary Create/update ad entities in bulk
         * @throws {RequiredError}
         */
        bulkUpsertCreate(adAccountId: string, bulkUpsertRequest: BulkUpsertRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling bulkUpsertCreate.');
            }
            // verify required parameter 'bulkUpsertRequest' is not null or undefined
            if (bulkUpsertRequest === null || bulkUpsertRequest === undefined) {
                throw new RequiredError('bulkUpsertRequest','Required parameter bulkUpsertRequest was null or undefined when calling bulkUpsertCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/bulk/upsert`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof bulkUpsertRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(bulkUpsertRequest != null ? bulkUpsertRequest : {}) : (((bulkUpsertRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BulkApiType = { 
    bulkDownloadCreate(adAccountId: string, bulkDownloadRequest: BulkDownloadRequest, options?: RequestOptions): Promise<BulkDownloadResponse>,

    bulkRequestGet(adAccountId: string, bulkRequestId: string, includeDetails?: boolean, options?: RequestOptions): Promise<BulkUpsertStatusResponse>,

    bulkUpsertCreate(adAccountId: string, bulkUpsertRequest: BulkUpsertRequest, options?: RequestOptions): Promise<BulkUpsertResponse>,
}

/**
 * BulkApi - factory function to inject configuration 
 * @export
 */
export const BulkApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BulkApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Create an asynchronous report that may include information on campaigns, ad groups, product groups, ads, and/or keywords; can filter by campaigns. Though the entities may be active, archived, or paused, only active entities will return data.
         * @summary Get advertiser entities in bulk
         * @throws {RequiredError}
         */
        bulkDownloadCreate(adAccountId: string, bulkDownloadRequest: BulkDownloadRequest, options?: RequestOptions = {}): Promise<BulkDownloadResponse> {
            const localVarFetchArgs = BulkApiFetchParamCreator(configuration).bulkDownloadCreate(adAccountId, bulkDownloadRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the status of a bulk request by <code>request_id</code>, along with a download URL that will allow you to download the new or updated entity data (campaigns, ad groups, product groups, ads, or keywords).
         * @summary Download advertiser entities in bulk
         * @throws {RequiredError}
         */
        bulkRequestGet(adAccountId: string, bulkRequestId: string, includeDetails?: boolean, options?: RequestOptions = {}): Promise<BulkUpsertStatusResponse> {
            const localVarFetchArgs = BulkApiFetchParamCreator(configuration).bulkRequestGet(adAccountId, bulkRequestId, includeDetails, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Either create or update any combination of campaigns, ad groups, product groups, ads, or keywords. Note that this request will be processed asynchronously; the response will include a <code>request_id</code> that can be used to obtain the status of the request.
         * @summary Create/update ad entities in bulk
         * @throws {RequiredError}
         */
        bulkUpsertCreate(adAccountId: string, bulkUpsertRequest: BulkUpsertRequest, options?: RequestOptions = {}): Promise<BulkUpsertResponse> {
            const localVarFetchArgs = BulkApiFetchParamCreator(configuration).bulkUpsertCreate(adAccountId, bulkUpsertRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CampaignsApi - fetch parameter creator
 * @export
 */
export const CampaignsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for campaigns
         * @throws {RequiredError}
         */
        campaignTargetingAnalyticsGet(adAccountId: string, campaignIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            // verify required parameter 'campaignIds' is not null or undefined
            if (campaignIds === null || campaignIds === undefined) {
                throw new RequiredError('campaignIds','Required parameter campaignIds was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            // verify required parameter 'targetingTypes' is not null or undefined
            if (targetingTypes === null || targetingTypes === undefined) {
                throw new RequiredError('targetingTypes','Required parameter targetingTypes was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling campaignTargetingAnalyticsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns/targeting_analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (targetingTypes) {
                localVarQueryParameter['targeting_types'] = targetingTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            if (attributionTypes !== undefined) {
                localVarQueryParameter['attribution_types'] = ((attributionTypes:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get campaign analytics
         * @throws {RequiredError}
         */
        campaignsAnalytics(adAccountId: string, startDate: Date, endDate: Date, campaignIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'campaignIds' is not null or undefined
            if (campaignIds === null || campaignIds === undefined) {
                throw new RequiredError('campaignIds','Required parameter campaignIds was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling campaignsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see <a href=\"https://help.pinterest.com/en/business/article/set-up-your-campaign/\">Set up your campaign</a>. <p/> <strong>Note:</strong> - The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
         * @summary Create campaigns
         * @throws {RequiredError}
         */
        campaignsCreate(adAccountId: string, campaignCreateRequest: Array<CampaignCreateRequest>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsCreate.');
            }
            // verify required parameter 'campaignCreateRequest' is not null or undefined
            if (campaignCreateRequest === null || campaignCreateRequest === undefined) {
                throw new RequiredError('campaignCreateRequest','Required parameter campaignCreateRequest was null or undefined when calling campaignsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof campaignCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(campaignCreateRequest != null ? campaignCreateRequest : {}) : (((campaignCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific campaign given the campaign ID.
         * @summary Get campaign
         * @throws {RequiredError}
         */
        campaignsGet(adAccountId: string, campaignId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsGet.');
            }
            // verify required parameter 'campaignId' is not null or undefined
            if (campaignId === null || campaignId === undefined) {
                throw new RequiredError('campaignId','Required parameter campaignId was null or undefined when calling campaignsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns/{campaign_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"campaign_id"}}`, encodeURIComponent(String(campaignId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @throws {RequiredError}
         */
        campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple ad campaigns based on campaign_ids. <p/> <strong>Note:</strong><p/> - <p>The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
         * @summary Update campaigns
         * @throws {RequiredError}
         */
        campaignsUpdate(adAccountId: string, campaignUpdateRequest: Array<CampaignUpdateRequest>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsUpdate.');
            }
            // verify required parameter 'campaignUpdateRequest' is not null or undefined
            if (campaignUpdateRequest === null || campaignUpdateRequest === undefined) {
                throw new RequiredError('campaignUpdateRequest','Required parameter campaignUpdateRequest was null or undefined when calling campaignsUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof campaignUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(campaignUpdateRequest != null ? campaignUpdateRequest : {}) : (((campaignUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CampaignsApiType = { 
    campaignTargetingAnalyticsGet(adAccountId: string, campaignIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions): Promise<MetricsResponse>,

    campaignsAnalytics(adAccountId: string, startDate: Date, endDate: Date, campaignIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<CampaignsAnalyticsResponseInner>>,

    campaignsCreate(adAccountId: string, campaignCreateRequest: Array<CampaignCreateRequest>, options?: RequestOptions): Promise<CampaignCreateResponse>,

    campaignsGet(adAccountId: string, campaignId: string, options?: RequestOptions): Promise<CampaignResponse>,

    campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<CampaignsList200Response>,

    campaignsUpdate(adAccountId: string, campaignUpdateRequest: Array<CampaignUpdateRequest>, options?: RequestOptions): Promise<CampaignUpdateResponse>,
}

/**
 * CampaignsApi - factory function to inject configuration 
 * @export
 */
export const CampaignsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CampaignsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get targeting analytics for campaigns
         * @throws {RequiredError}
         */
        campaignTargetingAnalyticsGet(adAccountId: string, campaignIds: Array<string>, startDate: Date, endDate: Date, targetingTypes: Array<AdsAnalyticsTargetingType>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', attributionTypes?: ConversionReportAttributionType, options?: RequestOptions = {}): Promise<MetricsResponse> {
            const localVarFetchArgs = CampaignsApiFetchParamCreator(configuration).campaignTargetingAnalyticsGet(adAccountId, campaignIds, startDate, endDate, targetingTypes, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, attributionTypes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get campaign analytics
         * @throws {RequiredError}
         */
        campaignsAnalytics(adAccountId: string, startDate: Date, endDate: Date, campaignIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<CampaignsAnalyticsResponseInner>> {
            const localVarFetchArgs = CampaignsApiFetchParamCreator(configuration).campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see <a href=\"https://help.pinterest.com/en/business/article/set-up-your-campaign/\">Set up your campaign</a>. <p/> <strong>Note:</strong> - The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
         * @summary Create campaigns
         * @throws {RequiredError}
         */
        campaignsCreate(adAccountId: string, campaignCreateRequest: Array<CampaignCreateRequest>, options?: RequestOptions = {}): Promise<CampaignCreateResponse> {
            const localVarFetchArgs = CampaignsApiFetchParamCreator(configuration).campaignsCreate(adAccountId, campaignCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a specific campaign given the campaign ID.
         * @summary Get campaign
         * @throws {RequiredError}
         */
        campaignsGet(adAccountId: string, campaignId: string, options?: RequestOptions = {}): Promise<CampaignResponse> {
            const localVarFetchArgs = CampaignsApiFetchParamCreator(configuration).campaignsGet(adAccountId, campaignId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @throws {RequiredError}
         */
        campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<CampaignsList200Response> {
            const localVarFetchArgs = CampaignsApiFetchParamCreator(configuration).campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update multiple ad campaigns based on campaign_ids. <p/> <strong>Note:</strong><p/> - <p>The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
         * @summary Update campaigns
         * @throws {RequiredError}
         */
        campaignsUpdate(adAccountId: string, campaignUpdateRequest: Array<CampaignUpdateRequest>, options?: RequestOptions = {}): Promise<CampaignUpdateResponse> {
            const localVarFetchArgs = CampaignsApiFetchParamCreator(configuration).campaignsUpdate(adAccountId, campaignUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CatalogsApi - fetch parameter creator
 * @export
 */
export const CatalogsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch catalogs owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List catalogs
         * @throws {RequiredError}
         */
        catalogsList(bookmark?: string, pageSize?: number, adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/catalogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of product pins for a given Catalogs Product Group Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List products for a Product Group
         * @throws {RequiredError}
         */
        catalogsProductGroupPinsList(productGroupId: string, bookmark?: string, pageSize?: number, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupPinsList.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}/products`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "catalogs:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create product group to use in Catalogs owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Create product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsCreate(catalogsProductGroupsCreateRequest: CatalogsProductGroupsCreateRequest, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'catalogsProductGroupsCreateRequest' is not null or undefined
            if (catalogsProductGroupsCreateRequest === null || catalogsProductGroupsCreateRequest === undefined) {
                throw new RequiredError('catalogsProductGroupsCreateRequest','Required parameter catalogsProductGroupsCreateRequest was null or undefined when calling catalogsProductGroupsCreate.');
            }
            const localVarPath = `/catalogs/product_groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsProductGroupsCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsProductGroupsCreateRequest != null ? catalogsProductGroupsCreateRequest : {}) : (((catalogsProductGroupsCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a product group owned by the \"operation user_account\" from being in use in Catalogs. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Delete product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsDelete(productGroupId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupsDelete.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a singe product group for a given Catalogs Product Group Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Get product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsGet(productGroupId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupsGet.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of product groups for a given Catalogs Feed Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List product groups
         * @throws {RequiredError}
         */
        catalogsProductGroupsList(feedId?: string, catalogId?: string, bookmark?: string, pageSize?: number, adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/catalogs/product_groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (feedId !== undefined) {
                localVarQueryParameter['feed_id'] = ((feedId:any):string);
            }

            if (catalogId !== undefined) {
                localVarQueryParameter['catalog_id'] = ((catalogId:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a product counts for a given Catalogs Product Group owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Get product counts for a Product Group
         * @throws {RequiredError}
         */
        catalogsProductGroupsProductCountsGet(productGroupId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupsProductCountsGet.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}/product_counts`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product group owned by the \"operation user_account\" to use in Catalogs. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Update product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupsUpdateRequest: CatalogsProductGroupsUpdateRequest, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupsUpdate.');
            }
            // verify required parameter 'catalogsProductGroupsUpdateRequest' is not null or undefined
            if (catalogsProductGroupsUpdateRequest === null || catalogsProductGroupsUpdateRequest === undefined) {
                throw new RequiredError('catalogsProductGroupsUpdateRequest','Required parameter catalogsProductGroupsUpdateRequest was null or undefined when calling catalogsProductGroupsUpdate.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsProductGroupsUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsProductGroupsUpdateRequest != null ? catalogsProductGroupsUpdateRequest : {}) : (((catalogsProductGroupsUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a feed processing results owned by the \"operation user_account\". Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List processing results for a given feed
         * @throws {RequiredError}
         */
        feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedProcessingResultsList.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}/processing_results`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Create feed
         * @throws {RequiredError}
         */
        feedsCreate(feedsCreateRequest: FeedsCreateRequest, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedsCreateRequest' is not null or undefined
            if (feedsCreateRequest === null || feedsCreateRequest === undefined) {
                throw new RequiredError('feedsCreateRequest','Required parameter feedsCreateRequest was null or undefined when calling feedsCreate.');
            }
            const localVarPath = `/catalogs/feeds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof feedsCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(feedsCreateRequest != null ? feedsCreateRequest : {}) : (((feedsCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a feed owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Delete feed
         * @throws {RequiredError}
         */
        feedsDelete(feedId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedsDelete.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Get feed
         * @throws {RequiredError}
         */
        feedsGet(feedId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedsGet.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feeds owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary List feeds
         * @throws {RequiredError}
         */
        feedsList(bookmark?: string, pageSize?: number, catalogId?: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/catalogs/feeds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (catalogId !== undefined) {
                localVarQueryParameter['catalog_id'] = ((catalogId:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Update feed
         * @throws {RequiredError}
         */
        feedsUpdate(feedId: string, feedsUpdateRequest: FeedsUpdateRequest, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedsUpdate.');
            }
            // verify required parameter 'feedsUpdateRequest' is not null or undefined
            if (feedsUpdateRequest === null || feedsUpdateRequest === undefined) {
                throw new RequiredError('feedsUpdateRequest','Required parameter feedsUpdateRequest was null or undefined when calling feedsUpdate.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof feedsUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(feedsUpdateRequest != null ? feedsUpdateRequest : {}) : (((feedsUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single catalogs items batch owned by the \"operating user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.
         * @summary Get catalogs item batch status
         * @throws {RequiredError}
         */
        itemsBatchGet(batchId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'batchId' is not null or undefined
            if (batchId === null || batchId === undefined) {
                throw new RequiredError('batchId','Required parameter batchId was null or undefined when calling itemsBatchGet.');
            }
            const localVarPath = `/catalogs/items/batch/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint supports multiple operations on a set of one or more catalog items owned by the \"operation user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.
         * @summary Operate on item batch
         * @throws {RequiredError}
         */
        itemsBatchPost(itemsBatchPostRequest: ItemsBatchPostRequest, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'itemsBatchPostRequest' is not null or undefined
            if (itemsBatchPostRequest === null || itemsBatchPostRequest === undefined) {
                throw new RequiredError('itemsBatchPostRequest','Required parameter itemsBatchPostRequest was null or undefined when calling itemsBatchPost.');
            }
            const localVarPath = `/catalogs/items/batch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof itemsBatchPostRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(itemsBatchPostRequest != null ? itemsBatchPostRequest : {}) : (((itemsBatchPostRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the items of the catalog owned by the \"operation user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.
         * @summary Get catalogs items
         * @throws {RequiredError}
         */
        itemsGet(country: string, language: string, adAccountId?: string, itemIds?: Array<string>, filters?: CatalogsItemsFilters, options: RequestOptions): FetchArgs {
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling itemsGet.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling itemsGet.');
            }
            const localVarPath = `/catalogs/items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = ((country:any):string);
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = ((language:any):string);
            }

            if (itemIds) {
                localVarQueryParameter['item_ids'] = itemIds;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = ((filters:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List item validation issues for a given feed processing result owned by the \"operation user_account\". Up to 20 random samples of affected items are returned for each error and warning code. Please note that for now query parameters \'item_numbers\' and \'item_validation_issue\' cannot be used simultaneously until it is implemented in some release in the future. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List item issues for a given processing result
         * @throws {RequiredError}
         */
        itemsIssuesList(processingResultId: string, bookmark?: string, pageSize?: number, itemNumbers?: Array<number>, itemValidationIssue?: CatalogsItemValidationIssue, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'processingResultId' is not null or undefined
            if (processingResultId === null || processingResultId === undefined) {
                throw new RequiredError('processingResultId','Required parameter processingResultId was null or undefined when calling itemsIssuesList.');
            }
            const localVarPath = `/catalogs/processing_results/{processing_result_id}/item_issues`
                .replace(`{${"processing_result_id"}}`, encodeURIComponent(String(processingResultId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (itemNumbers) {
                localVarQueryParameter['item_numbers'] = itemNumbers;
            }

            if (itemValidationIssue !== undefined) {
                localVarQueryParameter['item_validation_issue'] = ((itemValidationIssue:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List products Pins owned by the \"operation user_account\" that meet the criteria specified in the Catalogs Product Group Filter given in the request. - This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List filtered products
         * @throws {RequiredError}
         */
        productsByProductGroupFilterList(catalogsListProductsByFilterRequest: CatalogsListProductsByFilterRequest, bookmark?: string, pageSize?: number, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'catalogsListProductsByFilterRequest' is not null or undefined
            if (catalogsListProductsByFilterRequest === null || catalogsListProductsByFilterRequest === undefined) {
                throw new RequiredError('catalogsListProductsByFilterRequest','Required parameter catalogsListProductsByFilterRequest was null or undefined when calling productsByProductGroupFilterList.');
            }
            const localVarPath = `/catalogs/products/get_by_product_group_filters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "catalogs:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsListProductsByFilterRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsListProductsByFilterRequest != null ? catalogsListProductsByFilterRequest : {}) : (((catalogsListProductsByFilterRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CatalogsApiType = { 
    catalogsList(bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions): Promise<CatalogsList200Response>,

    catalogsProductGroupPinsList(productGroupId: string, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupPinsList200Response>,

    catalogsProductGroupsCreate(catalogsProductGroupsCreateRequest: CatalogsProductGroupsCreateRequest, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupsCreate201Response>,

    catalogsProductGroupsDelete(productGroupId: string, adAccountId?: string, options?: RequestOptions): Promise<Response>,

    catalogsProductGroupsGet(productGroupId: string, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupsCreate201Response>,

    catalogsProductGroupsList(feedId?: string, catalogId?: string, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupsList200Response>,

    catalogsProductGroupsProductCountsGet(productGroupId: string, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupProductCounts>,

    catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupsUpdateRequest: CatalogsProductGroupsUpdateRequest, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupsCreate201Response>,

    feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions): Promise<FeedProcessingResultsList200Response>,

    feedsCreate(feedsCreateRequest: FeedsCreateRequest, adAccountId?: string, options?: RequestOptions): Promise<CatalogsFeed>,

    feedsDelete(feedId: string, adAccountId?: string, options?: RequestOptions): Promise<Response>,

    feedsGet(feedId: string, adAccountId?: string, options?: RequestOptions): Promise<CatalogsFeed>,

    feedsList(bookmark?: string, pageSize?: number, catalogId?: string, adAccountId?: string, options?: RequestOptions): Promise<FeedsList200Response>,

    feedsUpdate(feedId: string, feedsUpdateRequest: FeedsUpdateRequest, adAccountId?: string, options?: RequestOptions): Promise<CatalogsFeed>,

    itemsBatchGet(batchId: string, adAccountId?: string, options?: RequestOptions): Promise<CatalogsItemsBatch>,

    itemsBatchPost(itemsBatchPostRequest: ItemsBatchPostRequest, adAccountId?: string, options?: RequestOptions): Promise<CatalogsItemsBatch>,

    itemsGet(country: string, language: string, adAccountId?: string, itemIds?: Array<string>, filters?: CatalogsItemsFilters, options?: RequestOptions): Promise<CatalogsItems>,

    itemsIssuesList(processingResultId: string, bookmark?: string, pageSize?: number, itemNumbers?: Array<number>, itemValidationIssue?: CatalogsItemValidationIssue, adAccountId?: string, options?: RequestOptions): Promise<ItemsIssuesList200Response>,

    productsByProductGroupFilterList(catalogsListProductsByFilterRequest: CatalogsListProductsByFilterRequest, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions): Promise<CatalogsProductGroupPinsList200Response>,
}

/**
 * CatalogsApi - factory function to inject configuration 
 * @export
 */
export const CatalogsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CatalogsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Fetch catalogs owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List catalogs
         * @throws {RequiredError}
         */
        catalogsList(bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsList(bookmark, pageSize, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of product pins for a given Catalogs Product Group Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List products for a Product Group
         * @throws {RequiredError}
         */
        catalogsProductGroupPinsList(productGroupId: string, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupPinsList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupPinsList(productGroupId, bookmark, pageSize, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create product group to use in Catalogs owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Create product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsCreate(catalogsProductGroupsCreateRequest: CatalogsProductGroupsCreateRequest, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupsCreate201Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsCreate(catalogsProductGroupsCreateRequest, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a product group owned by the \"operation user_account\" from being in use in Catalogs. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Delete product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsDelete(productGroupId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsDelete(productGroupId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a singe product group for a given Catalogs Product Group Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Get product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsGet(productGroupId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupsCreate201Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsGet(productGroupId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of product groups for a given Catalogs Feed Id owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List product groups
         * @throws {RequiredError}
         */
        catalogsProductGroupsList(feedId?: string, catalogId?: string, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupsList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsList(feedId, catalogId, bookmark, pageSize, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a product counts for a given Catalogs Product Group owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Get product counts for a Product Group
         * @throws {RequiredError}
         */
        catalogsProductGroupsProductCountsGet(productGroupId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupProductCounts> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsProductCountsGet(productGroupId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update product group owned by the \"operation user_account\" to use in Catalogs. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary Update product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupsUpdateRequest: CatalogsProductGroupsUpdateRequest, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupsCreate201Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsUpdate(productGroupId, catalogsProductGroupsUpdateRequest, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Fetch a feed processing results owned by the \"operation user_account\". Please note that for now the bookmark parameter is not functional and only the first page will be available until it is implemented in some release in the near future. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List processing results for a given feed
         * @throws {RequiredError}
         */
        feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions = {}): Promise<FeedProcessingResultsList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedProcessingResultsList(feedId, bookmark, pageSize, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a new feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Create feed
         * @throws {RequiredError}
         */
        feedsCreate(feedsCreateRequest: FeedsCreateRequest, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsFeed> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsCreate(feedsCreateRequest, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a feed owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Delete feed
         * @throws {RequiredError}
         */
        feedsDelete(feedId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsDelete(feedId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a single feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Get feed
         * @throws {RequiredError}
         */
        feedsGet(feedId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsFeed> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsGet(feedId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Fetch feeds owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary List feeds
         * @throws {RequiredError}
         */
        feedsList(bookmark?: string, pageSize?: number, catalogId?: string, adAccountId?: string, options?: RequestOptions = {}): Promise<FeedsList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsList(bookmark, pageSize, catalogId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update a feed owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  For Retail partners, refer to <a href=\'https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs\'>Before you get started with Catalogs</a>. For Hotel parterns, refer to <a href=\'/docs/shopping/catalog/\'>Pinterest API for shopping</a>.
         * @summary Update feed
         * @throws {RequiredError}
         */
        feedsUpdate(feedId: string, feedsUpdateRequest: FeedsUpdateRequest, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsFeed> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsUpdate(feedId, feedsUpdateRequest, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a single catalogs items batch owned by the \"operating user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.
         * @summary Get catalogs item batch status
         * @throws {RequiredError}
         */
        itemsBatchGet(batchId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsItemsBatch> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsBatchGet(batchId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This endpoint supports multiple operations on a set of one or more catalog items owned by the \"operation user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.
         * @summary Operate on item batch
         * @throws {RequiredError}
         */
        itemsBatchPost(itemsBatchPostRequest: ItemsBatchPostRequest, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsItemsBatch> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsBatchPost(itemsBatchPostRequest, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the items of the catalog owned by the \"operation user_account\". <a href=\"/docs/shopping/catalog/#Update%20items%20in%20batch\" target=\"_blank\">See detailed documentation here.</a> - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.
         * @summary Get catalogs items
         * @throws {RequiredError}
         */
        itemsGet(country: string, language: string, adAccountId?: string, itemIds?: Array<string>, filters?: CatalogsItemsFilters, options?: RequestOptions = {}): Promise<CatalogsItems> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsGet(country, language, adAccountId, itemIds, filters, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List item validation issues for a given feed processing result owned by the \"operation user_account\". Up to 20 random samples of affected items are returned for each error and warning code. Please note that for now query parameters \'item_numbers\' and \'item_validation_issue\' cannot be used simultaneously until it is implemented in some release in the future. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List item issues for a given processing result
         * @throws {RequiredError}
         */
        itemsIssuesList(processingResultId: string, bookmark?: string, pageSize?: number, itemNumbers?: Array<number>, itemValidationIssue?: CatalogsItemValidationIssue, adAccountId?: string, options?: RequestOptions = {}): Promise<ItemsIssuesList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsIssuesList(processingResultId, bookmark, pageSize, itemNumbers, itemValidationIssue, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List products Pins owned by the \"operation user_account\" that meet the criteria specified in the Catalogs Product Group Filter given in the request. - This endpoint has been implemented in POST to allow for complex filters. This specific POST endpoint is designed to be idempotent. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account: Owner, Admin, Catalogs Manager.  <a href=\'/docs/shopping/catalog/\'>Learn more</a>
         * @summary List filtered products
         * @throws {RequiredError}
         */
        productsByProductGroupFilterList(catalogsListProductsByFilterRequest: CatalogsListProductsByFilterRequest, bookmark?: string, pageSize?: number, adAccountId?: string, options?: RequestOptions = {}): Promise<CatalogsProductGroupPinsList200Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).productsByProductGroupFilterList(catalogsListProductsByFilterRequest, bookmark, pageSize, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ConversionEventsApi - fetch parameter creator
 * @export
 */
export const ConversionEventsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Pinterest API offers advertisers a way to send Pinterest their conversion information (including web conversions, in-app conversions, or even offline conversions) based on their <code>ad_account_id</code>. The request body should be a JSON object. - This endpoint requires an <code>access_token</code> be generated through Ads Manager. Review the <a href=\"/docs/conversions/conversions/\">Conversions Guide</a> for more details. - The token\'s <code>user_account</code> must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Audience, Campaign. (Note that the token can be used across multiple ad accounts under an user ID.) - This endpoint has a rate limit of 5,000 calls per minute per ad account. - If the merchant is submitting this information using both Pinterest conversion tags and the Pinterest API, Pinterest will remove duplicate information before reporting. (Note that events that took place offline cannot be deduplicated.)
         * @summary Send conversions
         * @throws {RequiredError}
         */
        eventsCreate(adAccountId: string, conversionEvents: ConversionEvents, test?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling eventsCreate.');
            }
            // verify required parameter 'conversionEvents' is not null or undefined
            if (conversionEvents === null || conversionEvents === undefined) {
                throw new RequiredError('conversionEvents','Required parameter conversionEvents was null or undefined when calling eventsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/events`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication conversion_token required

            if (test !== undefined) {
                localVarQueryParameter['test'] = ((test:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof conversionEvents !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(conversionEvents != null ? conversionEvents : {}) : (((conversionEvents:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ConversionEventsApiType = { 
    eventsCreate(adAccountId: string, conversionEvents: ConversionEvents, test?: boolean, options?: RequestOptions): Promise<ConversionApiResponse>,
}

/**
 * ConversionEventsApi - factory function to inject configuration 
 * @export
 */
export const ConversionEventsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ConversionEventsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * The Pinterest API offers advertisers a way to send Pinterest their conversion information (including web conversions, in-app conversions, or even offline conversions) based on their <code>ad_account_id</code>. The request body should be a JSON object. - This endpoint requires an <code>access_token</code> be generated through Ads Manager. Review the <a href=\"/docs/conversions/conversions/\">Conversions Guide</a> for more details. - The token\'s <code>user_account</code> must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Audience, Campaign. (Note that the token can be used across multiple ad accounts under an user ID.) - This endpoint has a rate limit of 5,000 calls per minute per ad account. - If the merchant is submitting this information using both Pinterest conversion tags and the Pinterest API, Pinterest will remove duplicate information before reporting. (Note that events that took place offline cannot be deduplicated.)
         * @summary Send conversions
         * @throws {RequiredError}
         */
        eventsCreate(adAccountId: string, conversionEvents: ConversionEvents, test?: boolean, options?: RequestOptions = {}): Promise<ConversionApiResponse> {
            const localVarFetchArgs = ConversionEventsApiFetchParamCreator(configuration).eventsCreate(adAccountId, conversionEvents, test, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ConversionTagsApi - fetch parameter creator
 * @export
 */
export const ConversionTagsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a conversion tag, also known as <a href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\" target=\"_blank\">Pinterest tag</a>, with the option to enable enhanced match.<p/> The Pinterest Tag tracks actions people take on the ad account’s website after they view the ad account\'s ad on Pinterest. The advertiser needs to customize this tag to track conversions.<p/> For more information, see:<p/> <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\">Set up the Pinterest tag</a><p/> <a class=\"reference external\" href=\"https://developers.pinterest.com/docs/conversions/pinterest-tag/\">Pinterest Tag</a><p/> <a class=\"reference external\" href=\"https://developers.pinterest.com/docs/conversions/enhanced-match/\">Enhanced match</a>
         * @summary Create conversion tag
         * @throws {RequiredError}
         */
        conversionTagsCreate(adAccountId: string, conversionTagCreate: ConversionTagCreate, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling conversionTagsCreate.');
            }
            // verify required parameter 'conversionTagCreate' is not null or undefined
            if (conversionTagCreate === null || conversionTagCreate === undefined) {
                throw new RequiredError('conversionTagCreate','Required parameter conversionTagCreate was null or undefined when calling conversionTagsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/conversion_tags`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof conversionTagCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(conversionTagCreate != null ? conversionTagCreate : {}) : (((conversionTagCreate:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about an existing conversion tag.
         * @summary Get conversion tag
         * @throws {RequiredError}
         */
        conversionTagsGet(adAccountId: string, conversionTagId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling conversionTagsGet.');
            }
            // verify required parameter 'conversionTagId' is not null or undefined
            if (conversionTagId === null || conversionTagId === undefined) {
                throw new RequiredError('conversionTagId','Required parameter conversionTagId was null or undefined when calling conversionTagsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"conversion_tag_id"}}`, encodeURIComponent(String(conversionTagId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List conversion tags associated with an ad account.
         * @summary Get conversion tags
         * @throws {RequiredError}
         */
        conversionTagsList(adAccountId: string, filterDeleted?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling conversionTagsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/conversion_tags`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (filterDeleted !== undefined) {
                localVarQueryParameter['filter_deleted'] = ((filterDeleted:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Ocpm eligible conversion tag events for an ad account.
         * @summary Get Ocpm eligible conversion tags
         * @throws {RequiredError}
         */
        ocpmEligibleConversionTagsGet(adAccountId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling ocpmEligibleConversionTagsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all page visit conversion tag events for an ad account.
         * @summary Get page visit conversion tags
         * @throws {RequiredError}
         */
        pageVisitConversionTagsGet(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling pageVisitConversionTagsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/conversion_tags/page_visit`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ConversionTagsApiType = { 
    conversionTagsCreate(adAccountId: string, conversionTagCreate: ConversionTagCreate, options?: RequestOptions): Promise<ConversionTagResponse>,

    conversionTagsGet(adAccountId: string, conversionTagId: string, options?: RequestOptions): Promise<ConversionTagResponse>,

    conversionTagsList(adAccountId: string, filterDeleted?: boolean, options?: RequestOptions): Promise<ConversionTagListResponse>,

    ocpmEligibleConversionTagsGet(adAccountId: string, options?: RequestOptions): Promise<{ [key: string]: Array<ConversionEventResponse>; }>,

    pageVisitConversionTagsGet(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<PageVisitConversionTagsGet200Response>,
}

/**
 * ConversionTagsApi - factory function to inject configuration 
 * @export
 */
export const ConversionTagsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ConversionTagsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Create a conversion tag, also known as <a href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\" target=\"_blank\">Pinterest tag</a>, with the option to enable enhanced match.<p/> The Pinterest Tag tracks actions people take on the ad account’s website after they view the ad account\'s ad on Pinterest. The advertiser needs to customize this tag to track conversions.<p/> For more information, see:<p/> <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/set-up-the-pinterest-tag\">Set up the Pinterest tag</a><p/> <a class=\"reference external\" href=\"https://developers.pinterest.com/docs/conversions/pinterest-tag/\">Pinterest Tag</a><p/> <a class=\"reference external\" href=\"https://developers.pinterest.com/docs/conversions/enhanced-match/\">Enhanced match</a>
         * @summary Create conversion tag
         * @throws {RequiredError}
         */
        conversionTagsCreate(adAccountId: string, conversionTagCreate: ConversionTagCreate, options?: RequestOptions = {}): Promise<ConversionTagResponse> {
            const localVarFetchArgs = ConversionTagsApiFetchParamCreator(configuration).conversionTagsCreate(adAccountId, conversionTagCreate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get information about an existing conversion tag.
         * @summary Get conversion tag
         * @throws {RequiredError}
         */
        conversionTagsGet(adAccountId: string, conversionTagId: string, options?: RequestOptions = {}): Promise<ConversionTagResponse> {
            const localVarFetchArgs = ConversionTagsApiFetchParamCreator(configuration).conversionTagsGet(adAccountId, conversionTagId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List conversion tags associated with an ad account.
         * @summary Get conversion tags
         * @throws {RequiredError}
         */
        conversionTagsList(adAccountId: string, filterDeleted?: boolean, options?: RequestOptions = {}): Promise<ConversionTagListResponse> {
            const localVarFetchArgs = ConversionTagsApiFetchParamCreator(configuration).conversionTagsList(adAccountId, filterDeleted, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Ocpm eligible conversion tag events for an ad account.
         * @summary Get Ocpm eligible conversion tags
         * @throws {RequiredError}
         */
        ocpmEligibleConversionTagsGet(adAccountId: string, options?: RequestOptions = {}): Promise<{ [key: string]: Array<ConversionEventResponse>; }> {
            const localVarFetchArgs = ConversionTagsApiFetchParamCreator(configuration).ocpmEligibleConversionTagsGet(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get all page visit conversion tag events for an ad account.
         * @summary Get page visit conversion tags
         * @throws {RequiredError}
         */
        pageVisitConversionTagsGet(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<PageVisitConversionTagsGet200Response> {
            const localVarFetchArgs = ConversionTagsApiFetchParamCreator(configuration).pageVisitConversionTagsGet(adAccountId, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CustomerListsApi - fetch parameter creator
 * @export
 */
export const CustomerListsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <p>Create a customer list from your records(hashed or plain-text email addresses, or hashed MAIDs or IDFAs).</p> <p>A customer list is one of the four types of Pinterest audiences: for more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/ads/targeting/#Audiences\" target=\"_blank\">Audiences</a> section of the ads management guide.<p/> <p><b>Please review our <u><a href=\"https://help.pinterest.com/en/business/article/audience-targeting#section-13341\" target=\"_blank\">requirements</a></u> for what type of information is allowed when uploading a customer list.</b></p> <p>When you create a customer list, the system scans the list for existing Pinterest accounts; the list must include at least 100 Pinterest accounts. Your original list will be deleted when the matching process is complete. The filtered list – containing only the Pinterest accounts that were included in your starting list – is what will be used to create the audience.</p> <p>Note that once you have created your customer list, you must convert it into an audience (of the “CUSTOMER_LIST” type) using the <a href=\"#operation/create_audience_handler\">create audience endpoint</a> before it can be used.</p>
         * @summary Create customer lists
         * @throws {RequiredError}
         */
        customerListsCreate(adAccountId: string, customerListRequest: CustomerListRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling customerListsCreate.');
            }
            // verify required parameter 'customerListRequest' is not null or undefined
            if (customerListRequest === null || customerListRequest === undefined) {
                throw new RequiredError('customerListRequest','Required parameter customerListRequest was null or undefined when calling customerListsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/customer_lists`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof customerListRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(customerListRequest != null ? customerListRequest : {}) : (((customerListRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a specific customer list given the customer list ID.
         * @summary Get customer list
         * @throws {RequiredError}
         */
        customerListsGet(adAccountId: string, customerListId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling customerListsGet.');
            }
            // verify required parameter 'customerListId' is not null or undefined
            if (customerListId === null || customerListId === undefined) {
                throw new RequiredError('customerListId','Required parameter customerListId was null or undefined when calling customerListsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"customer_list_id"}}`, encodeURIComponent(String(customerListId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get a set of customer lists including id and name based on the filters provided.</p> <p>(Customer lists are a type of audience.) For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>  or the <a href=\"/docs/ads/targeting/#Audiences\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
         * @summary Get customer lists
         * @throws {RequiredError}
         */
        customerListsList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling customerListsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/customer_lists`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Append or remove records to/from an existing customer list. (A customer list is one of the four types of Pinterest audiences.)</p> <p>When you add records to an existing customer list, the system scans the additions for existing Pinterest accounts; those are the records that will be added to your “CUSTOMER_LIST” audience. Your original list of records to add will be deleted when the matching process is complete.</p> <p>For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/ads/targeting/#Audiences\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
         * @summary Update customer list
         * @throws {RequiredError}
         */
        customerListsUpdate(adAccountId: string, customerListId: string, customerListUpdateRequest: CustomerListUpdateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling customerListsUpdate.');
            }
            // verify required parameter 'customerListId' is not null or undefined
            if (customerListId === null || customerListId === undefined) {
                throw new RequiredError('customerListId','Required parameter customerListId was null or undefined when calling customerListsUpdate.');
            }
            // verify required parameter 'customerListUpdateRequest' is not null or undefined
            if (customerListUpdateRequest === null || customerListUpdateRequest === undefined) {
                throw new RequiredError('customerListUpdateRequest','Required parameter customerListUpdateRequest was null or undefined when calling customerListsUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/customer_lists/{customer_list_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"customer_list_id"}}`, encodeURIComponent(String(customerListId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof customerListUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(customerListUpdateRequest != null ? customerListUpdateRequest : {}) : (((customerListUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CustomerListsApiType = { 
    customerListsCreate(adAccountId: string, customerListRequest: CustomerListRequest, options?: RequestOptions): Promise<CustomerList>,

    customerListsGet(adAccountId: string, customerListId: string, options?: RequestOptions): Promise<CustomerList>,

    customerListsList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<CustomerListsList200Response>,

    customerListsUpdate(adAccountId: string, customerListId: string, customerListUpdateRequest: CustomerListUpdateRequest, options?: RequestOptions): Promise<CustomerList>,
}

/**
 * CustomerListsApi - factory function to inject configuration 
 * @export
 */
export const CustomerListsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CustomerListsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * <p>Create a customer list from your records(hashed or plain-text email addresses, or hashed MAIDs or IDFAs).</p> <p>A customer list is one of the four types of Pinterest audiences: for more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/ads/targeting/#Audiences\" target=\"_blank\">Audiences</a> section of the ads management guide.<p/> <p><b>Please review our <u><a href=\"https://help.pinterest.com/en/business/article/audience-targeting#section-13341\" target=\"_blank\">requirements</a></u> for what type of information is allowed when uploading a customer list.</b></p> <p>When you create a customer list, the system scans the list for existing Pinterest accounts; the list must include at least 100 Pinterest accounts. Your original list will be deleted when the matching process is complete. The filtered list – containing only the Pinterest accounts that were included in your starting list – is what will be used to create the audience.</p> <p>Note that once you have created your customer list, you must convert it into an audience (of the “CUSTOMER_LIST” type) using the <a href=\"#operation/create_audience_handler\">create audience endpoint</a> before it can be used.</p>
         * @summary Create customer lists
         * @throws {RequiredError}
         */
        customerListsCreate(adAccountId: string, customerListRequest: CustomerListRequest, options?: RequestOptions = {}): Promise<CustomerList> {
            const localVarFetchArgs = CustomerListsApiFetchParamCreator(configuration).customerListsCreate(adAccountId, customerListRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets a specific customer list given the customer list ID.
         * @summary Get customer list
         * @throws {RequiredError}
         */
        customerListsGet(adAccountId: string, customerListId: string, options?: RequestOptions = {}): Promise<CustomerList> {
            const localVarFetchArgs = CustomerListsApiFetchParamCreator(configuration).customerListsGet(adAccountId, customerListId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Get a set of customer lists including id and name based on the filters provided.</p> <p>(Customer lists are a type of audience.) For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>  or the <a href=\"/docs/ads/targeting/#Audiences\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
         * @summary Get customer lists
         * @throws {RequiredError}
         */
        customerListsList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<CustomerListsList200Response> {
            const localVarFetchArgs = CustomerListsApiFetchParamCreator(configuration).customerListsList(adAccountId, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Append or remove records to/from an existing customer list. (A customer list is one of the four types of Pinterest audiences.)</p> <p>When you add records to an existing customer list, the system scans the additions for existing Pinterest accounts; those are the records that will be added to your “CUSTOMER_LIST” audience. Your original list of records to add will be deleted when the matching process is complete.</p> <p>For more information, see <a href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a> or the <a href=\"/docs/ads/targeting/#Audiences\" target=\"_blank\">Audiences</a> section of the ads management guide.</p>
         * @summary Update customer list
         * @throws {RequiredError}
         */
        customerListsUpdate(adAccountId: string, customerListId: string, customerListUpdateRequest: CustomerListUpdateRequest, options?: RequestOptions = {}): Promise<CustomerList> {
            const localVarFetchArgs = CustomerListsApiFetchParamCreator(configuration).customerListsUpdate(adAccountId, customerListId, customerListUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * IntegrationsApi - fetch parameter creator
 * @export
 */
export const IntegrationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete commerce integration metadata for the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Delete commerce integration
         * @throws {RequiredError}
         */
        integrationsCommerceDel(externalBusinessId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'externalBusinessId' is not null or undefined
            if (externalBusinessId === null || externalBusinessId === undefined) {
                throw new RequiredError('externalBusinessId','Required parameter externalBusinessId was null or undefined when calling integrationsCommerceDel.');
            }
            const localVarPath = `/integrations/commerce/{external_business_id}`
                .replace(`{${"external_business_id"}}`, encodeURIComponent(String(externalBusinessId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get commerce integration metadata associated with the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get commerce integration
         * @throws {RequiredError}
         */
        integrationsCommerceGet(externalBusinessId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'externalBusinessId' is not null or undefined
            if (externalBusinessId === null || externalBusinessId === undefined) {
                throw new RequiredError('externalBusinessId','Required parameter externalBusinessId was null or undefined when calling integrationsCommerceGet.');
            }
            const localVarPath = `/integrations/commerce/{external_business_id}`
                .replace(`{${"external_business_id"}}`, encodeURIComponent(String(externalBusinessId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update commerce integration metadata for the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Update commerce integration
         * @throws {RequiredError}
         */
        integrationsCommercePatch(externalBusinessId: string, integrationRequestPatch?: IntegrationRequestPatch, options: RequestOptions): FetchArgs {
            // verify required parameter 'externalBusinessId' is not null or undefined
            if (externalBusinessId === null || externalBusinessId === undefined) {
                throw new RequiredError('externalBusinessId','Required parameter externalBusinessId was null or undefined when calling integrationsCommercePatch.');
            }
            const localVarPath = `/integrations/commerce/{external_business_id}`
                .replace(`{${"external_business_id"}}`, encodeURIComponent(String(externalBusinessId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof integrationRequestPatch !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(integrationRequestPatch != null ? integrationRequestPatch : {}) : (((integrationRequestPatch:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Create commerce integration
         * @throws {RequiredError}
         */
        integrationsCommercePost(integrationRequest?: IntegrationRequest, options: RequestOptions): FetchArgs {
            const localVarPath = `/integrations/commerce`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof integrationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(integrationRequest != null ? integrationRequest : {}) : (((integrationRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get integration metadata by ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get integration metadata
         * @throws {RequiredError}
         */
        integrationsGetById(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling integrationsGetById.');
            }
            const localVarPath = `/integrations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get integration metadata list. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get integration metadata list
         * @throws {RequiredError}
         */
        integrationsGetList(bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/integrations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint receives batched logs from integration applications on partner platforms. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Receives batched logs from integration applications.
         * @throws {RequiredError}
         */
        integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'integrationLogsRequest' is not null or undefined
            if (integrationLogsRequest === null || integrationLogsRequest === undefined) {
                throw new RequiredError('integrationLogsRequest','Required parameter integrationLogsRequest was null or undefined when calling integrationsLogsPost.');
            }
            const localVarPath = `/integrations/logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof integrationLogsRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(integrationLogsRequest != null ? integrationLogsRequest : {}) : (((integrationLogsRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type IntegrationsApiType = { 
    integrationsCommerceDel(externalBusinessId: string, options?: RequestOptions): Promise<Response>,

    integrationsCommerceGet(externalBusinessId: string, options?: RequestOptions): Promise<IntegrationMetadata>,

    integrationsCommercePatch(externalBusinessId: string, integrationRequestPatch?: IntegrationRequestPatch, options?: RequestOptions): Promise<IntegrationMetadata>,

    integrationsCommercePost(integrationRequest?: IntegrationRequest, options?: RequestOptions): Promise<IntegrationMetadata>,

    integrationsGetById(id: string, options?: RequestOptions): Promise<IntegrationRecord>,

    integrationsGetList(bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<IntegrationsGetList200Response>,

    integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, options?: RequestOptions): Promise<IntegrationLogsSuccessResponse>,
}

/**
 * IntegrationsApi - factory function to inject configuration 
 * @export
 */
export const IntegrationsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): IntegrationsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Delete commerce integration metadata for the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Delete commerce integration
         * @throws {RequiredError}
         */
        integrationsCommerceDel(externalBusinessId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsCommerceDel(externalBusinessId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get commerce integration metadata associated with the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get commerce integration
         * @throws {RequiredError}
         */
        integrationsCommerceGet(externalBusinessId: string, options?: RequestOptions = {}): Promise<IntegrationMetadata> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsCommerceGet(externalBusinessId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update commerce integration metadata for the given external business ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Update commerce integration
         * @throws {RequiredError}
         */
        integrationsCommercePatch(externalBusinessId: string, integrationRequestPatch?: IntegrationRequestPatch, options?: RequestOptions = {}): Promise<IntegrationMetadata> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsCommercePatch(externalBusinessId, integrationRequestPatch, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Create commerce integration
         * @throws {RequiredError}
         */
        integrationsCommercePost(integrationRequest?: IntegrationRequest, options?: RequestOptions = {}): Promise<IntegrationMetadata> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsCommercePost(integrationRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get integration metadata by ID. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get integration metadata
         * @throws {RequiredError}
         */
        integrationsGetById(id: string, options?: RequestOptions = {}): Promise<IntegrationRecord> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsGetById(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get integration metadata list. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get integration metadata list
         * @throws {RequiredError}
         */
        integrationsGetList(bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<IntegrationsGetList200Response> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsGetList(bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This endpoint receives batched logs from integration applications on partner platforms. Note: If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Receives batched logs from integration applications.
         * @throws {RequiredError}
         */
        integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, options?: RequestOptions = {}): Promise<IntegrationLogsSuccessResponse> {
            const localVarFetchArgs = IntegrationsApiFetchParamCreator(configuration).integrationsLogsPost(integrationLogsRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * KeywordsApi - fetch parameter creator
 * @export
 */
export const KeywordsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * See keyword metrics for a specified country, aggregated across all of Pinterest. (Definitions are available from the \"Get delivery metrics definitions\" <a href=\"/docs/api/v5/#operation/delivery_metrics/get\">API endpoint</a>).
         * @summary Get country\'s keyword metrics
         * @throws {RequiredError}
         */
        countryKeywordsMetricsGet(adAccountId: string, countryCode: string, keywords: Array<string>, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling countryKeywordsMetricsGet.');
            }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode','Required parameter countryCode was null or undefined when calling countryKeywordsMetricsGet.');
            }
            // verify required parameter 'keywords' is not null or undefined
            if (keywords === null || keywords === undefined) {
                throw new RequiredError('keywords','Required parameter keywords was null or undefined when calling countryKeywordsMetricsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/keywords/metrics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = ((countryCode:any):string);
            }

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Create keywords for following entity types(advertiser, campaign, ad group or ad).</p> <p>For more information, see <a target=\"_blank\" href=\"https://help.pinterest.com/en/business/article/keyword-targeting\">Keyword targeting</a>.</p> <p><b>Notes:</b></p> <ul style=\"list-style-type: square;\"> <li>Advertisers and campaigns can only be assigned keywords with excluding (\'_NEGATIVE\').</li> <li>All keyword match types are available for ad groups.</li> </ul> <p>For more information on match types, see <a  target=\"_blank\" href=\"/docs/ads/targeting/#Match%20type%20and%20targeting%20level\">match type enums</a>.</p> <p><b>Returns:</b></p> <ul style=\"list-style-type: square;\"> <li><p>A successful call returns an object containing an array of new keyword objects and an empty &quot;errors&quot; object array.</p></li> <li><p>An unsuccessful call returns an empty keywords array, and, instead, inserts the entire object with nulled/negated properties into the &quot;errors&quot; object array:</p> <pre class=\"last literal-block\"> { \"keywords\": [], \"errors\": [ { \"data\": { \"archived\": null, \"match_type\": \"EXACT\", \"parent_type\": null, \"value\": \"foobar\", \"parent_id\": null, \"type\": \"keyword\", \"id\": null }, \"error_messages\": [ \"Advertisers and Campaigns only accept excluded targeting attributes.\" ] } } </pre></li> </ul> <p><b>Rate limit</b>: <a href=\"/docs/redoc/#tag/Rate-Limits\">WRITE</a>.</p>
         * @summary Create keywords
         * @throws {RequiredError}
         */
        keywordsCreate(adAccountId: string, keywordsRequest: KeywordsRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling keywordsCreate.');
            }
            // verify required parameter 'keywordsRequest' is not null or undefined
            if (keywordsRequest === null || keywordsRequest === undefined) {
                throw new RequiredError('keywordsRequest','Required parameter keywordsRequest was null or undefined when calling keywordsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/keywords`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof keywordsRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(keywordsRequest != null ? keywordsRequest : {}) : (((keywordsRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get a list of keywords based on the filters provided. If no filter is provided, it will default to the ad_account_id filter, which means it will only return keywords that specifically have parent_id set to the ad_account_id. Note: Keywords can have ad_account_ids, campaign_ids, and ad_group_ids set as their parent_ids. Keywords created through Ads Manager will have their parent_id set to an ad_group_id, not ad_account_id.</p> <p>For more information, see <a target=\"_blank\" href=\"https://help.pinterest.com/en/business/article/keyword-targeting\">Keyword targeting</a>.</p> <p><b>Notes:</b></p> <ul style=\"list-style-type: square;\"> <li>Advertisers and campaigns can only be assigned keywords with excluding (\'_NEGATIVE\').</li> <li>All keyword match types are available for ad groups.</li> </ul> <p>For more information on match types, see <a target=\"_blank\" href=\"/docs/ads/targeting/#Match%20type%20and%20targeting%20level\">match type enums</a>.</p> <p><b>Returns:</b></p> <ul style=\"list-style-type: square;\"> <li><p>A successful call returns an object containing an array of new keyword objects and an empty &quot;errors&quot; object array.</p></li> <li><p>An unsuccessful call returns an empty keywords array, and, instead, inserts the entire object with nulled/negated properties into the &quot;errors&quot; object array:</p> <pre class=\"last literal-block\"> { \"keywords\": [], \"errors\": [ { \"data\": { \"archived\": null, \"match_type\": \"EXACT\", \"parent_type\": null, \"value\": \"foobar\", \"parent_id\": null, \"type\": \"keyword\", \"id\": null }, \"error_messages\": [ \"Advertisers and Campaigns only accept excluded targeting attributes.\" ] } } </pre></li> </ul>
         * @summary Get keywords
         * @throws {RequiredError}
         */
        keywordsGet(adAccountId: string, campaignId?: string, adGroupId?: string, matchTypes?: Array<MatchType>, pageSize?: number, bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling keywordsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/keywords`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaign_id'] = ((campaignId:any):string);
            }

            if (adGroupId !== undefined) {
                localVarQueryParameter['ad_group_id'] = ((adGroupId:any):string);
            }

            if (matchTypes) {
                localVarQueryParameter['match_types'] = matchTypes;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Update one or more keywords\' bid and archived fields.</p> <p>Archiving a keyword effectively deletes it - keywords no longer receive metrics and no longer visible within the parent entity\'s keywords list.</p>
         * @summary Update keywords
         * @throws {RequiredError}
         */
        keywordsUpdate(adAccountId: string, keywordUpdateBody: KeywordUpdateBody, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling keywordsUpdate.');
            }
            // verify required parameter 'keywordUpdateBody' is not null or undefined
            if (keywordUpdateBody === null || keywordUpdateBody === undefined) {
                throw new RequiredError('keywordUpdateBody','Required parameter keywordUpdateBody was null or undefined when calling keywordsUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/keywords`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof keywordUpdateBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(keywordUpdateBody != null ? keywordUpdateBody : {}) : (((keywordUpdateBody:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get the top trending search keywords among the Pinterest user audience.</p> <p>Trending keywords can be used to inform ad targeting, budget strategy, and creative decisions about which products and Pins will resonate with your audience.</p> <p>Geographic, demographic and interest-based filters are available to narrow down to the top trends among a specific audience. Multiple trend types are supported that can be used to identify newly-popular, evergreen or seasonal keywords.</p> <p>For an interactive way to explore this data, please visit <a href=\"https://trends.pinterest.com\">trends.pinterest.com</a>.
         * @summary List trending keywords
         * @throws {RequiredError}
         */
        trendingKeywordsList(region: TrendsSupportedRegion, trendType: TrendType, interests?: Array<'animals' | 'architecture' | 'art' | 'beauty' | 'childrens_fashion' | 'design' | 'diy_and_crafts' | 'education' | 'electronics' | 'entertainment' | 'event_planning' | 'finance' | 'food_and_drinks' | 'gardening' | 'health' | 'home_decor' | 'mens_fashion' | 'parenting' | 'quotes' | 'sport' | 'travel' | 'vehicles' | 'wedding' | 'womens_fashion'>, genders?: Array<'female' | 'male' | 'unknown'>, ages?: Array<'18-24' | '25-34' | '35-44' | '45-49' | '50-54' | '55-64' | '65+'>, normalizeAgainstGroup?: boolean, limit?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'region' is not null or undefined
            if (region === null || region === undefined) {
                throw new RequiredError('region','Required parameter region was null or undefined when calling trendingKeywordsList.');
            }
            // verify required parameter 'trendType' is not null or undefined
            if (trendType === null || trendType === undefined) {
                throw new RequiredError('trendType','Required parameter trendType was null or undefined when calling trendingKeywordsList.');
            }
            const localVarPath = `/trends/keywords/{region}/top/{trend_type}`
                .replace(`{${"region"}}`, encodeURIComponent(String(region)))
                .replace(`{${"trend_type"}}`, encodeURIComponent(String(trendType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (interests) {
                localVarQueryParameter['interests'] = interests;
            }

            if (genders) {
                localVarQueryParameter['genders'] = genders;
            }

            if (ages) {
                localVarQueryParameter['ages'] = ages;
            }

            if (normalizeAgainstGroup !== undefined) {
                localVarQueryParameter['normalize_against_group'] = ((normalizeAgainstGroup:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type KeywordsApiType = { 
    countryKeywordsMetricsGet(adAccountId: string, countryCode: string, keywords: Array<string>, options?: RequestOptions): Promise<KeywordsMetricsArrayResponse>,

    keywordsCreate(adAccountId: string, keywordsRequest: KeywordsRequest, options?: RequestOptions): Promise<KeywordsResponse>,

    keywordsGet(adAccountId: string, campaignId?: string, adGroupId?: string, matchTypes?: Array<MatchType>, pageSize?: number, bookmark?: string, options?: RequestOptions): Promise<KeywordsGet200Response>,

    keywordsUpdate(adAccountId: string, keywordUpdateBody: KeywordUpdateBody, options?: RequestOptions): Promise<KeywordsResponse>,

    trendingKeywordsList(region: TrendsSupportedRegion, trendType: TrendType, interests?: Array<'animals' | 'architecture' | 'art' | 'beauty' | 'childrens_fashion' | 'design' | 'diy_and_crafts' | 'education' | 'electronics' | 'entertainment' | 'event_planning' | 'finance' | 'food_and_drinks' | 'gardening' | 'health' | 'home_decor' | 'mens_fashion' | 'parenting' | 'quotes' | 'sport' | 'travel' | 'vehicles' | 'wedding' | 'womens_fashion'>, genders?: Array<'female' | 'male' | 'unknown'>, ages?: Array<'18-24' | '25-34' | '35-44' | '45-49' | '50-54' | '55-64' | '65+'>, normalizeAgainstGroup?: boolean, limit?: number, options?: RequestOptions): Promise<TrendingKeywordsResponse>,
}

/**
 * KeywordsApi - factory function to inject configuration 
 * @export
 */
export const KeywordsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): KeywordsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * See keyword metrics for a specified country, aggregated across all of Pinterest. (Definitions are available from the \"Get delivery metrics definitions\" <a href=\"/docs/api/v5/#operation/delivery_metrics/get\">API endpoint</a>).
         * @summary Get country\'s keyword metrics
         * @throws {RequiredError}
         */
        countryKeywordsMetricsGet(adAccountId: string, countryCode: string, keywords: Array<string>, options?: RequestOptions = {}): Promise<KeywordsMetricsArrayResponse> {
            const localVarFetchArgs = KeywordsApiFetchParamCreator(configuration).countryKeywordsMetricsGet(adAccountId, countryCode, keywords, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Create keywords for following entity types(advertiser, campaign, ad group or ad).</p> <p>For more information, see <a target=\"_blank\" href=\"https://help.pinterest.com/en/business/article/keyword-targeting\">Keyword targeting</a>.</p> <p><b>Notes:</b></p> <ul style=\"list-style-type: square;\"> <li>Advertisers and campaigns can only be assigned keywords with excluding (\'_NEGATIVE\').</li> <li>All keyword match types are available for ad groups.</li> </ul> <p>For more information on match types, see <a  target=\"_blank\" href=\"/docs/ads/targeting/#Match%20type%20and%20targeting%20level\">match type enums</a>.</p> <p><b>Returns:</b></p> <ul style=\"list-style-type: square;\"> <li><p>A successful call returns an object containing an array of new keyword objects and an empty &quot;errors&quot; object array.</p></li> <li><p>An unsuccessful call returns an empty keywords array, and, instead, inserts the entire object with nulled/negated properties into the &quot;errors&quot; object array:</p> <pre class=\"last literal-block\"> { \"keywords\": [], \"errors\": [ { \"data\": { \"archived\": null, \"match_type\": \"EXACT\", \"parent_type\": null, \"value\": \"foobar\", \"parent_id\": null, \"type\": \"keyword\", \"id\": null }, \"error_messages\": [ \"Advertisers and Campaigns only accept excluded targeting attributes.\" ] } } </pre></li> </ul> <p><b>Rate limit</b>: <a href=\"/docs/redoc/#tag/Rate-Limits\">WRITE</a>.</p>
         * @summary Create keywords
         * @throws {RequiredError}
         */
        keywordsCreate(adAccountId: string, keywordsRequest: KeywordsRequest, options?: RequestOptions = {}): Promise<KeywordsResponse> {
            const localVarFetchArgs = KeywordsApiFetchParamCreator(configuration).keywordsCreate(adAccountId, keywordsRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Get a list of keywords based on the filters provided. If no filter is provided, it will default to the ad_account_id filter, which means it will only return keywords that specifically have parent_id set to the ad_account_id. Note: Keywords can have ad_account_ids, campaign_ids, and ad_group_ids set as their parent_ids. Keywords created through Ads Manager will have their parent_id set to an ad_group_id, not ad_account_id.</p> <p>For more information, see <a target=\"_blank\" href=\"https://help.pinterest.com/en/business/article/keyword-targeting\">Keyword targeting</a>.</p> <p><b>Notes:</b></p> <ul style=\"list-style-type: square;\"> <li>Advertisers and campaigns can only be assigned keywords with excluding (\'_NEGATIVE\').</li> <li>All keyword match types are available for ad groups.</li> </ul> <p>For more information on match types, see <a target=\"_blank\" href=\"/docs/ads/targeting/#Match%20type%20and%20targeting%20level\">match type enums</a>.</p> <p><b>Returns:</b></p> <ul style=\"list-style-type: square;\"> <li><p>A successful call returns an object containing an array of new keyword objects and an empty &quot;errors&quot; object array.</p></li> <li><p>An unsuccessful call returns an empty keywords array, and, instead, inserts the entire object with nulled/negated properties into the &quot;errors&quot; object array:</p> <pre class=\"last literal-block\"> { \"keywords\": [], \"errors\": [ { \"data\": { \"archived\": null, \"match_type\": \"EXACT\", \"parent_type\": null, \"value\": \"foobar\", \"parent_id\": null, \"type\": \"keyword\", \"id\": null }, \"error_messages\": [ \"Advertisers and Campaigns only accept excluded targeting attributes.\" ] } } </pre></li> </ul>
         * @summary Get keywords
         * @throws {RequiredError}
         */
        keywordsGet(adAccountId: string, campaignId?: string, adGroupId?: string, matchTypes?: Array<MatchType>, pageSize?: number, bookmark?: string, options?: RequestOptions = {}): Promise<KeywordsGet200Response> {
            const localVarFetchArgs = KeywordsApiFetchParamCreator(configuration).keywordsGet(adAccountId, campaignId, adGroupId, matchTypes, pageSize, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Update one or more keywords\' bid and archived fields.</p> <p>Archiving a keyword effectively deletes it - keywords no longer receive metrics and no longer visible within the parent entity\'s keywords list.</p>
         * @summary Update keywords
         * @throws {RequiredError}
         */
        keywordsUpdate(adAccountId: string, keywordUpdateBody: KeywordUpdateBody, options?: RequestOptions = {}): Promise<KeywordsResponse> {
            const localVarFetchArgs = KeywordsApiFetchParamCreator(configuration).keywordsUpdate(adAccountId, keywordUpdateBody, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Get the top trending search keywords among the Pinterest user audience.</p> <p>Trending keywords can be used to inform ad targeting, budget strategy, and creative decisions about which products and Pins will resonate with your audience.</p> <p>Geographic, demographic and interest-based filters are available to narrow down to the top trends among a specific audience. Multiple trend types are supported that can be used to identify newly-popular, evergreen or seasonal keywords.</p> <p>For an interactive way to explore this data, please visit <a href=\"https://trends.pinterest.com\">trends.pinterest.com</a>.
         * @summary List trending keywords
         * @throws {RequiredError}
         */
        trendingKeywordsList(region: TrendsSupportedRegion, trendType: TrendType, interests?: Array<'animals' | 'architecture' | 'art' | 'beauty' | 'childrens_fashion' | 'design' | 'diy_and_crafts' | 'education' | 'electronics' | 'entertainment' | 'event_planning' | 'finance' | 'food_and_drinks' | 'gardening' | 'health' | 'home_decor' | 'mens_fashion' | 'parenting' | 'quotes' | 'sport' | 'travel' | 'vehicles' | 'wedding' | 'womens_fashion'>, genders?: Array<'female' | 'male' | 'unknown'>, ages?: Array<'18-24' | '25-34' | '35-44' | '45-49' | '50-54' | '55-64' | '65+'>, normalizeAgainstGroup?: boolean, limit?: number, options?: RequestOptions = {}): Promise<TrendingKeywordsResponse> {
            const localVarFetchArgs = KeywordsApiFetchParamCreator(configuration).trendingKeywordsList(region, trendType, interests, genders, ages, normalizeAgainstGroup, limit, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * LeadAdsApi - fetch parameter creator
 * @export
 */
export const LeadAdsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Delete lead ads subscription
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsDelById(adAccountId: string, subscriptionId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountsSubscriptionsDelById.');
            }
            // verify required parameter 'subscriptionId' is not null or undefined
            if (subscriptionId === null || subscriptionId === undefined) {
                throw new RequiredError('subscriptionId','Required parameter subscriptionId was null or undefined when calling adAccountsSubscriptionsDelById.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get lead ads subscription
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsGetById(adAccountId: string, subscriptionId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountsSubscriptionsGetById.');
            }
            // verify required parameter 'subscriptionId' is not null or undefined
            if (subscriptionId === null || subscriptionId === undefined) {
                throw new RequiredError('subscriptionId','Required parameter subscriptionId was null or undefined when calling adAccountsSubscriptionsGetById.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the advertiser\'s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get lead ads subscriptions
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsGetList(adAccountId: string, pageSize?: number, bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountsSubscriptionsGetList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/leads/subscriptions`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a lead ads webhook subscription. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Create lead ads subscription
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsPost(adAccountId: string, adAccountCreateSubscriptionRequest: AdAccountCreateSubscriptionRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountsSubscriptionsPost.');
            }
            // verify required parameter 'adAccountCreateSubscriptionRequest' is not null or undefined
            if (adAccountCreateSubscriptionRequest === null || adAccountCreateSubscriptionRequest === undefined) {
                throw new RequiredError('adAccountCreateSubscriptionRequest','Required parameter adAccountCreateSubscriptionRequest was null or undefined when calling adAccountsSubscriptionsPost.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/leads/subscriptions`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adAccountCreateSubscriptionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adAccountCreateSubscriptionRequest != null ? adAccountCreateSubscriptionRequest : {}) : (((adAccountCreateSubscriptionRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type LeadAdsApiType = { 
    adAccountsSubscriptionsDelById(adAccountId: string, subscriptionId: string, options?: RequestOptions): Promise<Response>,

    adAccountsSubscriptionsGetById(adAccountId: string, subscriptionId: string, options?: RequestOptions): Promise<AdAccountGetSubscriptionResponse>,

    adAccountsSubscriptionsGetList(adAccountId: string, pageSize?: number, bookmark?: string, options?: RequestOptions): Promise<AdAccountsSubscriptionsGetList200Response>,

    adAccountsSubscriptionsPost(adAccountId: string, adAccountCreateSubscriptionRequest: AdAccountCreateSubscriptionRequest, options?: RequestOptions): Promise<AdAccountCreateSubscriptionResponse>,
}

/**
 * LeadAdsApi - factory function to inject configuration 
 * @export
 */
export const LeadAdsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): LeadAdsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Delete an existing lead ads webhook subscription by ID. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Delete lead ads subscription
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsDelById(adAccountId: string, subscriptionId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = LeadAdsApiFetchParamCreator(configuration).adAccountsSubscriptionsDelById(adAccountId, subscriptionId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a specific lead ads subscription record. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get lead ads subscription
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsGetById(adAccountId: string, subscriptionId: string, options?: RequestOptions = {}): Promise<AdAccountGetSubscriptionResponse> {
            const localVarFetchArgs = LeadAdsApiFetchParamCreator(configuration).adAccountsSubscriptionsGetById(adAccountId, subscriptionId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the advertiser\'s list of lead ads subscriptions. - Only requests for the OWNER or ADMIN of the ad_account will be allowed.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get lead ads subscriptions
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsGetList(adAccountId: string, pageSize?: number, bookmark?: string, options?: RequestOptions = {}): Promise<AdAccountsSubscriptionsGetList200Response> {
            const localVarFetchArgs = LeadAdsApiFetchParamCreator(configuration).adAccountsSubscriptionsGetList(adAccountId, pageSize, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a lead ads webhook subscription. - Only requests for the OWNER or ADMIN of the ad_account will be allowed. - Advertisers can set up multiple integrations using ad_account_id + lead_form_id but only one integration per unique records.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Create lead ads subscription
         * @throws {RequiredError}
         */
        adAccountsSubscriptionsPost(adAccountId: string, adAccountCreateSubscriptionRequest: AdAccountCreateSubscriptionRequest, options?: RequestOptions = {}): Promise<AdAccountCreateSubscriptionResponse> {
            const localVarFetchArgs = LeadAdsApiFetchParamCreator(configuration).adAccountsSubscriptionsPost(adAccountId, adAccountCreateSubscriptionRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * LeadFormsApi - fetch parameter creator
 * @export
 */
export const LeadFormsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a lead form given it\'s ID. It must also be associated with the provided ad account ID. Retrieving an advertiser\'s lead form will only contain results if you\'re a part of the Lead ads beta. If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get lead form by id
         * @throws {RequiredError}
         */
        leadFormGet(adAccountId: string, leadFormId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling leadFormGet.');
            }
            // verify required parameter 'leadFormId' is not null or undefined
            if (leadFormId === null || leadFormId === undefined) {
                throw new RequiredError('leadFormId','Required parameter leadFormId was null or undefined when calling leadFormGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"lead_form_id"}}`, encodeURIComponent(String(leadFormId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Create lead form test data
         * @throws {RequiredError}
         */
        leadFormTestCreate(adAccountId: string, leadFormId: string, leadFormTestRequest: LeadFormTestRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling leadFormTestCreate.');
            }
            // verify required parameter 'leadFormId' is not null or undefined
            if (leadFormId === null || leadFormId === undefined) {
                throw new RequiredError('leadFormId','Required parameter leadFormId was null or undefined when calling leadFormTestCreate.');
            }
            // verify required parameter 'leadFormTestRequest' is not null or undefined
            if (leadFormTestRequest === null || leadFormTestRequest === undefined) {
                throw new RequiredError('leadFormTestRequest','Required parameter leadFormTestRequest was null or undefined when calling leadFormTestCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"lead_form_id"}}`, encodeURIComponent(String(leadFormId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof leadFormTestRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(leadFormTestRequest != null ? leadFormTestRequest : {}) : (((leadFormTestRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all Lead Forms associated with an ad account ID. Retrieving an advertiser\'s list of lead forms will only contain results if you\'re a part of the Lead ads beta.  If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get lead forms
         * @throws {RequiredError}
         */
        leadFormsList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling leadFormsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/lead_forms`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type LeadFormsApiType = { 
    leadFormGet(adAccountId: string, leadFormId: string, options?: RequestOptions): Promise<LeadFormResponse>,

    leadFormTestCreate(adAccountId: string, leadFormId: string, leadFormTestRequest: LeadFormTestRequest, options?: RequestOptions): Promise<LeadFormTestResponse>,

    leadFormsList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<LeadFormsList200Response>,
}

/**
 * LeadFormsApi - factory function to inject configuration 
 * @export
 */
export const LeadFormsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): LeadFormsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Gets a lead form given it\'s ID. It must also be associated with the provided ad account ID. Retrieving an advertiser\'s lead form will only contain results if you\'re a part of the Lead ads beta. If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get lead form by id
         * @throws {RequiredError}
         */
        leadFormGet(adAccountId: string, leadFormId: string, options?: RequestOptions = {}): Promise<LeadFormResponse> {
            const localVarFetchArgs = LeadFormsApiFetchParamCreator(configuration).leadFormGet(adAccountId, leadFormId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Create lead form test data
         * @throws {RequiredError}
         */
        leadFormTestCreate(adAccountId: string, leadFormId: string, leadFormTestRequest: LeadFormTestRequest, options?: RequestOptions = {}): Promise<LeadFormTestResponse> {
            const localVarFetchArgs = LeadFormsApiFetchParamCreator(configuration).leadFormTestCreate(adAccountId, leadFormId, leadFormTestRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets all Lead Forms associated with an ad account ID. Retrieving an advertiser\'s list of lead forms will only contain results if you\'re a part of the Lead ads beta.  If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
         * @summary Get lead forms
         * @throws {RequiredError}
         */
        leadFormsList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<LeadFormsList200Response> {
            const localVarFetchArgs = LeadFormsApiFetchParamCreator(configuration).leadFormsList(adAccountId, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MediaApi - fetch parameter creator
 * @export
 */
export const MediaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @throws {RequiredError}
         */
        mediaCreate(mediaUploadRequest: MediaUploadRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'mediaUploadRequest' is not null or undefined
            if (mediaUploadRequest === null || mediaUploadRequest === undefined) {
                throw new RequiredError('mediaUploadRequest','Required parameter mediaUploadRequest was null or undefined when calling mediaCreate.');
            }
            const localVarPath = `/media`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof mediaUploadRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(mediaUploadRequest != null ? mediaUploadRequest : {}) : (((mediaUploadRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @throws {RequiredError}
         */
        mediaGet(mediaId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new RequiredError('mediaId','Required parameter mediaId was null or undefined when calling mediaGet.');
            }
            const localVarPath = `/media/{media_id}`
                .replace(`{${"media_id"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @throws {RequiredError}
         */
        mediaList(bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/media`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MediaApiType = { 
    mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: RequestOptions): Promise<MediaUpload>,

    mediaGet(mediaId: string, options?: RequestOptions): Promise<MediaUploadDetails>,

    mediaList(bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<MediaList200Response>,
}

/**
 * MediaApi - factory function to inject configuration 
 * @export
 */
export const MediaApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MediaApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @throws {RequiredError}
         */
        mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: RequestOptions = {}): Promise<MediaUpload> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).mediaCreate(mediaUploadRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @throws {RequiredError}
         */
        mediaGet(mediaId: string, options?: RequestOptions = {}): Promise<MediaUploadDetails> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).mediaGet(mediaId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @throws {RequiredError}
         */
        mediaList(bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<MediaList200Response> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).mediaList(bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * OauthApi - fetch parameter creator
 * @export
 */
export const OauthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  IMPORTANT: You need to start the OAuth flow via www.pinterest.com/oauth before calling this endpoint (or have an existing refresh token).  See <a href=\'/docs/getting-started/authentication/\'>Authentication</a> for more.  <strong>Parameter <i>refresh_on</i> and its corresponding response type <i>everlasting_refresh</i> are now available to all apps! Later this year, continuous refresh will become the default behavior (ie you will no longer need to send this parameter). <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Generate OAuth access token
         * @throws {RequiredError}
         */
        oauthToken(grantType: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling oauthToken.');
            }
            const localVarPath = `/oauth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', ((grantType:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type OauthApiType = { 
    oauthToken(grantType: string, options?: RequestOptions): Promise<OauthAccessTokenResponse>,
}

/**
 * OauthApi - factory function to inject configuration 
 * @export
 */
export const OauthApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): OauthApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  IMPORTANT: You need to start the OAuth flow via www.pinterest.com/oauth before calling this endpoint (or have an existing refresh token).  See <a href=\'/docs/getting-started/authentication/\'>Authentication</a> for more.  <strong>Parameter <i>refresh_on</i> and its corresponding response type <i>everlasting_refresh</i> are now available to all apps! Later this year, continuous refresh will become the default behavior (ie you will no longer need to send this parameter). <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Generate OAuth access token
         * @throws {RequiredError}
         */
        oauthToken(grantType: string, options?: RequestOptions = {}): Promise<OauthAccessTokenResponse> {
            const localVarFetchArgs = OauthApiFetchParamCreator(configuration).oauthToken(grantType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * OrderLinesApi - fetch parameter creator
 * @export
 */
export const OrderLinesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a specific existing order line associated with an ad account.
         * @summary Get order line
         * @throws {RequiredError}
         */
        orderLinesGet(adAccountId: string, orderLineId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling orderLinesGet.');
            }
            // verify required parameter 'orderLineId' is not null or undefined
            if (orderLineId === null || orderLineId === undefined) {
                throw new RequiredError('orderLineId','Required parameter orderLineId was null or undefined when calling orderLinesGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/order_lines/{order_line_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"order_line_id"}}`, encodeURIComponent(String(orderLineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List existing order lines associated with an ad account.
         * @summary Get order lines
         * @throws {RequiredError}
         */
        orderLinesList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling orderLinesList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/order_lines`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type OrderLinesApiType = { 
    orderLinesGet(adAccountId: string, orderLineId: string, options?: RequestOptions): Promise<OrderLine>,

    orderLinesList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<OrderLinesList200Response>,
}

/**
 * OrderLinesApi - factory function to inject configuration 
 * @export
 */
export const OrderLinesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): OrderLinesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get a specific existing order line associated with an ad account.
         * @summary Get order line
         * @throws {RequiredError}
         */
        orderLinesGet(adAccountId: string, orderLineId: string, options?: RequestOptions = {}): Promise<OrderLine> {
            const localVarFetchArgs = OrderLinesApiFetchParamCreator(configuration).orderLinesGet(adAccountId, orderLineId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List existing order lines associated with an ad account.
         * @summary Get order lines
         * @throws {RequiredError}
         */
        orderLinesList(adAccountId: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<OrderLinesList200Response> {
            const localVarFetchArgs = OrderLinesApiFetchParamCreator(configuration).orderLinesList(adAccountId, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PinsApi - fetch parameter creator
 * @export
 */
export const PinsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
         * @summary Get Pin analytics
         * @throws {RequiredError}
         */
        pinsAnalytics(pinId: string, startDate: Date, endDate: Date, metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling pinsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling pinsAnalytics.');
            }
            // verify required parameter 'metricTypes' is not null or undefined
            if (metricTypes === null || metricTypes === undefined) {
                throw new RequiredError('metricTypes','Required parameter metricTypes was null or undefined when calling pinsAnalytics.');
            }
            const localVarPath = `/pins/{pin_id}/analytics`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = ((appTypes:any):string);
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (splitField !== undefined) {
                localVarQueryParameter['split_field'] = ((splitField:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/content/content-creation/\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @throws {RequiredError}
         */
        pinsCreate(pinCreate: PinCreate, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinCreate' is not null or undefined
            if (pinCreate === null || pinCreate === undefined) {
                throw new RequiredError('pinCreate','Required parameter pinCreate was null or undefined when calling pinsCreate.');
            }
            const localVarPath = `/pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof pinCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(pinCreate != null ? pinCreate : {}) : (((pinCreate:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Delete Pin
         * @throws {RequiredError}
         */
        pinsDelete(pinId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsDelete.');
            }
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @throws {RequiredError}
         */
        pinsGet(pinId: string, pinMetrics?: boolean, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsGet.');
            }
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pinMetrics !== undefined) {
                localVarQueryParameter['pin_metrics'] = ((pinMetrics:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. - All Pins owned by the \"operation user_account\" are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary List Pins
         * @throws {RequiredError}
         */
        pinsList(bookmark?: string, pageSize?: number, pinFilter?: 'exclude_native' | 'exclude_repins' | 'has_been_promoted', includeProtectedPins?: boolean, pinType?: 'PRIVATE', creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>, adAccountId?: string, pinMetrics?: boolean, options: RequestOptions): FetchArgs {
            const localVarPath = `/pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (pinFilter !== undefined) {
                localVarQueryParameter['pin_filter'] = ((pinFilter:any):string);
            }

            if (includeProtectedPins !== undefined) {
                localVarQueryParameter['include_protected_pins'] = ((includeProtectedPins:any):string);
            }

            if (pinType !== undefined) {
                localVarQueryParameter['pin_type'] = ((pinType:any):string);
            }

            if (creativeTypes) {
                localVarQueryParameter['creative_types'] = creativeTypes;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (pinMetrics !== undefined) {
                localVarQueryParameter['pin_metrics'] = ((pinMetrics:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save a Pin on a board or board section owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
         * @summary Save Pin
         * @throws {RequiredError}
         */
        pinsSave(pinId: string, pinsSaveRequest: PinsSaveRequest, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsSave.');
            }
            // verify required parameter 'pinsSaveRequest' is not null or undefined
            if (pinsSaveRequest === null || pinsSaveRequest === undefined) {
                throw new RequiredError('pinsSaveRequest','Required parameter pinsSaveRequest was null or undefined when calling pinsSave.');
            }
            const localVarPath = `/pins/{pin_id}/save`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof pinsSaveRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(pinsSaveRequest != null ? pinsSaveRequest : {}) : (((pinsSaveRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pin owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Update Pin
         * @throws {RequiredError}
         */
        pinsUpdate(pinId: string, pinUpdate: PinUpdate, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsUpdate.');
            }
            // verify required parameter 'pinUpdate' is not null or undefined
            if (pinUpdate === null || pinUpdate === undefined) {
                throw new RequiredError('pinUpdate','Required parameter pinUpdate was null or undefined when calling pinsUpdate.');
            }
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof pinUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(pinUpdate != null ? pinUpdate : {}) : (((pinUpdate:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PinsApiType = { 
    pinsAnalytics(pinId: string, startDate: Date, endDate: Date, metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: RequestOptions): Promise<{ [key: string]: PinAnalyticsMetricsResponse; }>,

    pinsCreate(pinCreate: PinCreate, adAccountId?: string, options?: RequestOptions): Promise<Pin>,

    pinsDelete(pinId: string, adAccountId?: string, options?: RequestOptions): Promise<Response>,

    pinsGet(pinId: string, pinMetrics?: boolean, adAccountId?: string, options?: RequestOptions): Promise<Pin>,

    pinsList(bookmark?: string, pageSize?: number, pinFilter?: 'exclude_native' | 'exclude_repins' | 'has_been_promoted', includeProtectedPins?: boolean, pinType?: 'PRIVATE', creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>, adAccountId?: string, pinMetrics?: boolean, options?: RequestOptions): Promise<PinsList200Response>,

    pinsSave(pinId: string, pinsSaveRequest: PinsSaveRequest, adAccountId?: string, options?: RequestOptions): Promise<Pin>,

    pinsUpdate(pinId: string, pinUpdate: PinUpdate, adAccountId?: string, options?: RequestOptions): Promise<Pin>,
}

/**
 * PinsApi - factory function to inject configuration 
 * @export
 */
export const PinsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PinsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.  If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
         * @summary Get Pin analytics
         * @throws {RequiredError}
         */
        pinsAnalytics(pinId: string, startDate: Date, endDate: Date, metricTypes: Array<PinsAnalyticsMetricTypesParameterInner>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: RequestOptions = {}): Promise<{ [key: string]: PinAnalyticsMetricsResponse; }> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsAnalytics(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/content/content-creation/\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/content/content-creation/#Creating%20video%20Pins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @throws {RequiredError}
         */
        pinsCreate(pinCreate: PinCreate, adAccountId?: string, options?: RequestOptions = {}): Promise<Pin> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsCreate(pinCreate, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Delete Pin
         * @throws {RequiredError}
         */
        pinsDelete(pinId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsDelete(pinId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @throws {RequiredError}
         */
        pinsGet(pinId: string, pinMetrics?: boolean, adAccountId?: string, options?: RequestOptions = {}): Promise<Pin> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsGet(pinId, pinMetrics, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the Pins owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. - All Pins owned by the \"operation user_account\" are included, regardless of who owns the board they are on. Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary List Pins
         * @throws {RequiredError}
         */
        pinsList(bookmark?: string, pageSize?: number, pinFilter?: 'exclude_native' | 'exclude_repins' | 'has_been_promoted', includeProtectedPins?: boolean, pinType?: 'PRIVATE', creativeTypes?: Array<'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'COLLECTION' | 'IDEA'>, adAccountId?: string, pinMetrics?: boolean, options?: RequestOptions = {}): Promise<PinsList200Response> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsList(bookmark, pageSize, pinFilter, includeProtectedPins, pinType, creativeTypes, adAccountId, pinMetrics, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Save a Pin on a board or board section owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account. Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  - Any Pin type can be saved: image Pin, video Pin, Idea Pin, product Pin, etc. - Any public Pin can be saved given a pin ID.
         * @summary Save Pin
         * @throws {RequiredError}
         */
        pinsSave(pinId: string, pinsSaveRequest: PinsSaveRequest, adAccountId?: string, options?: RequestOptions = {}): Promise<Pin> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsSave(pinId, pinsSaveRequest, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update a pin owned by the \"operating user_account\". - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Update Pin
         * @throws {RequiredError}
         */
        pinsUpdate(pinId: string, pinUpdate: PinUpdate, adAccountId?: string, options?: RequestOptions = {}): Promise<Pin> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsUpdate(pinId, pinUpdate, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ProductGroupPromotionsApi - fetch parameter creator
 * @export
 */
export const ProductGroupPromotionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a \'product group promotion.\')
         * @summary Create product group promotions
         * @throws {RequiredError}
         */
        productGroupPromotionsCreate(adAccountId: string, productGroupPromotionCreateRequest: ProductGroupPromotionCreateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling productGroupPromotionsCreate.');
            }
            // verify required parameter 'productGroupPromotionCreateRequest' is not null or undefined
            if (productGroupPromotionCreateRequest === null || productGroupPromotionCreateRequest === undefined) {
                throw new RequiredError('productGroupPromotionCreateRequest','Required parameter productGroupPromotionCreateRequest was null or undefined when calling productGroupPromotionsCreate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_group_promotions`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof productGroupPromotionCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(productGroupPromotionCreateRequest != null ? productGroupPromotionCreateRequest : {}) : (((productGroupPromotionCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a product group promotion by id
         * @summary Get a product group promotion by id
         * @throws {RequiredError}
         */
        productGroupPromotionsGet(adAccountId: string, productGroupPromotionId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling productGroupPromotionsGet.');
            }
            // verify required parameter 'productGroupPromotionId' is not null or undefined
            if (productGroupPromotionId === null || productGroupPromotionId === undefined) {
                throw new RequiredError('productGroupPromotionId','Required parameter productGroupPromotionId was null or undefined when calling productGroupPromotionsGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)))
                .replace(`{${"product_group_promotion_id"}}`, encodeURIComponent(String(productGroupPromotionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List existing product group promotions associated with an ad account.  Include either ad_group_id or product_group_promotion_ids in your request.  <b>Note:</b> ad_group_ids and product_group_promotion_ids are mutually exclusive parameters. Only provide one. If multiple options are provided, product_group_promotion_ids takes precedence over ad_group_ids. If none are provided, the endpoint returns an error.
         * @summary Get product group promotions
         * @throws {RequiredError}
         */
        productGroupPromotionsList(adAccountId: string, productGroupPromotionIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, adGroupId?: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling productGroupPromotionsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_group_promotions`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (productGroupPromotionIds) {
                localVarQueryParameter['product_group_promotion_ids'] = productGroupPromotionIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (adGroupId !== undefined) {
                localVarQueryParameter['ad_group_id'] = ((adGroupId:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple existing Product Group Promotions (by product_group_id)
         * @summary Update product group promotions
         * @throws {RequiredError}
         */
        productGroupPromotionsUpdate(adAccountId: string, productGroupPromotionUpdateRequest: ProductGroupPromotionUpdateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling productGroupPromotionsUpdate.');
            }
            // verify required parameter 'productGroupPromotionUpdateRequest' is not null or undefined
            if (productGroupPromotionUpdateRequest === null || productGroupPromotionUpdateRequest === undefined) {
                throw new RequiredError('productGroupPromotionUpdateRequest','Required parameter productGroupPromotionUpdateRequest was null or undefined when calling productGroupPromotionsUpdate.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_group_promotions`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof productGroupPromotionUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(productGroupPromotionUpdateRequest != null ? productGroupPromotionUpdateRequest : {}) : (((productGroupPromotionUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get product group analytics
         * @throws {RequiredError}
         */
        productGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, productGroupIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'productGroupIds' is not null or undefined
            if (productGroupIds === null || productGroupIds === undefined) {
                throw new RequiredError('productGroupIds','Required parameter productGroupIds was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling productGroupsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_groups/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (productGroupIds) {
                localVarQueryParameter['product_group_ids'] = productGroupIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ProductGroupPromotionsApiType = { 
    productGroupPromotionsCreate(adAccountId: string, productGroupPromotionCreateRequest: ProductGroupPromotionCreateRequest, options?: RequestOptions): Promise<ProductGroupPromotionResponse>,

    productGroupPromotionsGet(adAccountId: string, productGroupPromotionId: string, options?: RequestOptions): Promise<ProductGroupPromotionResponse>,

    productGroupPromotionsList(adAccountId: string, productGroupPromotionIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, adGroupId?: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<ProductGroupPromotionsList200Response>,

    productGroupPromotionsUpdate(adAccountId: string, productGroupPromotionUpdateRequest: ProductGroupPromotionUpdateRequest, options?: RequestOptions): Promise<ProductGroupPromotionResponse>,

    productGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, productGroupIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<ProductGroupAnalyticsResponseInner>>,
}

/**
 * ProductGroupPromotionsApi - factory function to inject configuration 
 * @export
 */
export const ProductGroupPromotionsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ProductGroupPromotionsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Add one or more product groups from your catalog to an existing ad group. (Product groups added to an ad group are a \'product group promotion.\')
         * @summary Create product group promotions
         * @throws {RequiredError}
         */
        productGroupPromotionsCreate(adAccountId: string, productGroupPromotionCreateRequest: ProductGroupPromotionCreateRequest, options?: RequestOptions = {}): Promise<ProductGroupPromotionResponse> {
            const localVarFetchArgs = ProductGroupPromotionsApiFetchParamCreator(configuration).productGroupPromotionsCreate(adAccountId, productGroupPromotionCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a product group promotion by id
         * @summary Get a product group promotion by id
         * @throws {RequiredError}
         */
        productGroupPromotionsGet(adAccountId: string, productGroupPromotionId: string, options?: RequestOptions = {}): Promise<ProductGroupPromotionResponse> {
            const localVarFetchArgs = ProductGroupPromotionsApiFetchParamCreator(configuration).productGroupPromotionsGet(adAccountId, productGroupPromotionId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List existing product group promotions associated with an ad account.  Include either ad_group_id or product_group_promotion_ids in your request.  <b>Note:</b> ad_group_ids and product_group_promotion_ids are mutually exclusive parameters. Only provide one. If multiple options are provided, product_group_promotion_ids takes precedence over ad_group_ids. If none are provided, the endpoint returns an error.
         * @summary Get product group promotions
         * @throws {RequiredError}
         */
        productGroupPromotionsList(adAccountId: string, productGroupPromotionIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED' | 'DRAFT' | 'DELETED_DRAFT'>, adGroupId?: string, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<ProductGroupPromotionsList200Response> {
            const localVarFetchArgs = ProductGroupPromotionsApiFetchParamCreator(configuration).productGroupPromotionsList(adAccountId, productGroupPromotionIds, entityStatuses, adGroupId, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update multiple existing Product Group Promotions (by product_group_id)
         * @summary Update product group promotions
         * @throws {RequiredError}
         */
        productGroupPromotionsUpdate(adAccountId: string, productGroupPromotionUpdateRequest: ProductGroupPromotionUpdateRequest, options?: RequestOptions = {}): Promise<ProductGroupPromotionResponse> {
            const localVarFetchArgs = ProductGroupPromotionsApiFetchParamCreator(configuration).productGroupPromotionsUpdate(adAccountId, productGroupPromotionUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
         * @summary Get product group analytics
         * @throws {RequiredError}
         */
        productGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, productGroupIds: Array<string>, columns: Array<'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'SPEND_IN_DOLLAR' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPC_IN_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPE_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'EENGAGEMENT_RATE' | 'ECPM_IN_MICRO_DOLLAR' | 'REPIN_RATE' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_OBJECTIVE_TYPE' | 'CPM_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'AD_GROUP_ENTITY_STATUS' | 'ORDER_LINE_ID' | 'ORDER_LINE_NAME' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_IMPRESSION' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'COST_PER_OUTBOUND_CLICK_IN_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_SESSIONS' | 'WEB_SESSIONS_1' | 'WEB_SESSIONS_2' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT' | 'TOTAL_SIGNUP' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'CHECKOUT_ROAS' | 'CUSTOM_ROAS' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'ECPV_IN_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_REPIN_RATE' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'TOTAL_OFFLINE_CHECKOUT' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'LEADS' | 'COST_PER_LEAD' | 'QUIZ_COMPLETED' | 'QUIZ_COMPLETION_RATE' | 'SHOWCASE_PIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_CLICKTHROUGH' | 'SHOWCASE_SUBPIN_CLICKTHROUGH' | 'SHOWCASE_SUBPAGE_IMPRESSION' | 'SHOWCASE_SUBPIN_IMPRESSION' | 'SHOWCASE_SUBPAGE_SWIPE_LEFT' | 'SHOWCASE_SUBPAGE_SWIPE_RIGHT' | 'SHOWCASE_SUBPIN_SWIPE_LEFT' | 'SHOWCASE_SUBPIN_SWIPE_RIGHT' | 'SHOWCASE_SUBPAGE_REPIN' | 'SHOWCASE_SUBPIN_REPIN' | 'SHOWCASE_SUBPAGE_CLOSEUP' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD' | 'SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD' | 'SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION' | 'TOTAL_CHECKOUT_CONVERSION_RATE' | 'TOTAL_VIEW_CATEGORY_CONVERSION_RATE' | 'TOTAL_ADD_TO_CART_CONVERSION_RATE' | 'TOTAL_SIGNUP_CONVERSION_RATE' | 'TOTAL_PAGE_VISIT_CONVERSION_RATE' | 'TOTAL_LEAD_CONVERSION_RATE' | 'TOTAL_SEARCH_CONVERSION_RATE' | 'TOTAL_WATCH_VIDEO_CONVERSION_RATE' | 'TOTAL_UNKNOWN_CONVERSION_RATE' | 'TOTAL_CUSTOM_CONVERSION_RATE'>, granularity: Granularity, clickWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, engagementWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, viewWindowDays?: 0 | 1 | 7 | 14 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<ProductGroupAnalyticsResponseInner>> {
            const localVarFetchArgs = ProductGroupPromotionsApiFetchParamCreator(configuration).productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ProductGroupsApi - fetch parameter creator
 * @export
 */
export const ProductGroupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is completely deprecated. Please use <a href=\'/docs/api/v5/#operation/catalogs_product_groups/list\'>List product groups</a> from Catalogs API instead.
         * @summary Get catalog product groups
         * @throws {RequiredError}
         */
        adAccountsCatalogsProductGroupsList(adAccountId: string, feedProfileId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountsCatalogsProductGroupsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_groups/catalogs`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (feedProfileId !== undefined) {
                localVarQueryParameter['feed_profile_id'] = ((feedProfileId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ProductGroupsApiType = { 
    adAccountsCatalogsProductGroupsList(adAccountId: string, feedProfileId?: string, options?: RequestOptions): Promise<AdAccountsCatalogsProductGroupsList200Response>,
}

/**
 * ProductGroupsApi - factory function to inject configuration 
 * @export
 */
export const ProductGroupsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ProductGroupsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * This endpoint is completely deprecated. Please use <a href=\'/docs/api/v5/#operation/catalogs_product_groups/list\'>List product groups</a> from Catalogs API instead.
         * @summary Get catalog product groups
         * @throws {RequiredError}
         */
        adAccountsCatalogsProductGroupsList(adAccountId: string, feedProfileId?: string, options?: RequestOptions = {}): Promise<AdAccountsCatalogsProductGroupsList200Response> {
            const localVarFetchArgs = ProductGroupsApiFetchParamCreator(configuration).adAccountsCatalogsProductGroupsList(adAccountId, feedProfileId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ResourcesApi - fetch parameter creator
 * @export
 */
export const ResourcesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Ad Accounts countries
         * @summary Get ad accounts countries
         * @throws {RequiredError}
         */
        adAccountCountriesGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/resources/ad_account_countries`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/content/analytics/\'>Organic Analytics</a> and <a href=\'/docs/ads/ad-analytics-reporting/\'>Ads Analytics</a> for more information.
         * @summary Get available metrics\' definitions
         * @throws {RequiredError}
         */
        deliveryMetricsGet(reportType?: 'SYNC' | 'ASYNC', options: RequestOptions): FetchArgs {
            const localVarPath = `/resources/delivery_metrics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read", "pins:read", "user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (reportType !== undefined) {
                localVarQueryParameter['report_type'] = ((reportType:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
         * @summary Get interest details
         * @throws {RequiredError}
         */
        interestTargetingOptionsGet(interestId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'interestId' is not null or undefined
            if (interestId === null || interestId === undefined) {
                throw new RequiredError('interestId','Required parameter interestId was null or undefined when calling interestTargetingOptionsGet.');
            }
            const localVarPath = `/resources/targeting/interests/{interest_id}`
                .replace(`{${"interest_id"}}`, encodeURIComponent(String(interestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get lead form questions
         * @throws {RequiredError}
         */
        leadFormQuestionsGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/resources/lead_form_questions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Learn whether conversion or non-conversion metrics are finalized and ready to query.
         * @summary Get metrics ready state
         * @throws {RequiredError}
         */
        metricsReadyStateGet(_date: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_date' is not null or undefined
            if (_date === null || _date === undefined) {
                throw new RequiredError('_date','Required parameter _date was null or undefined when calling metricsReadyStateGet.');
            }
            const localVarPath = `/resources/metrics_ready_state`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (_date !== undefined) {
                localVarQueryParameter['date'] = ((_date:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
         * @summary Get targeting options
         * @throws {RequiredError}
         */
        targetingOptionsGet(targetingType: 'APPTYPE' | 'GENDER' | 'LOCALE' | 'AGE_BUCKET' | 'LOCATION' | 'GEO' | 'INTEREST' | 'KEYWORD' | 'AUDIENCE_INCLUDE' | 'AUDIENCE_EXCLUDE', clientId?: string, oauthSignature?: string, timestamp?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'targetingType' is not null or undefined
            if (targetingType === null || targetingType === undefined) {
                throw new RequiredError('targetingType','Required parameter targetingType was null or undefined when calling targetingOptionsGet.');
            }
            const localVarPath = `/resources/targeting/{targeting_type}`
                .replace(`{${"targeting_type"}}`, encodeURIComponent(String(targetingType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = ((clientId:any):string);
            }

            if (oauthSignature !== undefined) {
                localVarQueryParameter['oauth_signature'] = ((oauthSignature:any):string);
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = ((timestamp:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ResourcesApiType = { 
    adAccountCountriesGet(options?: RequestOptions): Promise<AdAccountsCountryResponse>,

    deliveryMetricsGet(reportType?: 'SYNC' | 'ASYNC', options?: RequestOptions): Promise<DeliveryMetricsResponse>,

    interestTargetingOptionsGet(interestId: string, options?: RequestOptions): Promise<SingleInterestTargetingOptionResponse>,

    leadFormQuestionsGet(options?: RequestOptions): Promise<Response>,

    metricsReadyStateGet(_date: string, options?: RequestOptions): Promise<BookClosedResponse>,

    targetingOptionsGet(targetingType: 'APPTYPE' | 'GENDER' | 'LOCALE' | 'AGE_BUCKET' | 'LOCATION' | 'GEO' | 'INTEREST' | 'KEYWORD' | 'AUDIENCE_INCLUDE' | 'AUDIENCE_EXCLUDE', clientId?: string, oauthSignature?: string, timestamp?: string, options?: RequestOptions): Promise<Array<Object>>,
}

/**
 * ResourcesApi - factory function to inject configuration 
 * @export
 */
export const ResourcesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ResourcesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Ad Accounts countries
         * @summary Get ad accounts countries
         * @throws {RequiredError}
         */
        adAccountCountriesGet(options?: RequestOptions = {}): Promise<AdAccountsCountryResponse> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).adAccountCountriesGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href=\'/docs/content/analytics/\'>Organic Analytics</a> and <a href=\'/docs/ads/ad-analytics-reporting/\'>Ads Analytics</a> for more information.
         * @summary Get available metrics\' definitions
         * @throws {RequiredError}
         */
        deliveryMetricsGet(reportType?: 'SYNC' | 'ASYNC', options?: RequestOptions = {}): Promise<DeliveryMetricsResponse> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).deliveryMetricsGet(reportType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
         * @summary Get interest details
         * @throws {RequiredError}
         */
        interestTargetingOptionsGet(interestId: string, options?: RequestOptions = {}): Promise<SingleInterestTargetingOptionResponse> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).interestTargetingOptionsGet(interestId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
         * @summary Get lead form questions
         * @throws {RequiredError}
         */
        leadFormQuestionsGet(options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).leadFormQuestionsGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Learn whether conversion or non-conversion metrics are finalized and ready to query.
         * @summary Get metrics ready state
         * @throws {RequiredError}
         */
        metricsReadyStateGet(_date: string, options?: RequestOptions = {}): Promise<BookClosedResponse> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).metricsReadyStateGet(_date, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
         * @summary Get targeting options
         * @throws {RequiredError}
         */
        targetingOptionsGet(targetingType: 'APPTYPE' | 'GENDER' | 'LOCALE' | 'AGE_BUCKET' | 'LOCATION' | 'GEO' | 'INTEREST' | 'KEYWORD' | 'AUDIENCE_INCLUDE' | 'AUDIENCE_EXCLUDE', clientId?: string, oauthSignature?: string, timestamp?: string, options?: RequestOptions = {}): Promise<Array<Object>> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).targetingOptionsGet(targetingType, clientId, oauthSignature, timestamp, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SearchApi - fetch parameter creator
 * @export
 */
export const SearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.
         * @summary Search pins by a given search term
         * @throws {RequiredError}
         */
        searchPartnerPins(term: string, countryCode: string, bookmark?: string, locale?: string, limit?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'term' is not null or undefined
            if (term === null || term === undefined) {
                throw new RequiredError('term','Required parameter term was null or undefined when calling searchPartnerPins.');
            }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode','Required parameter countryCode was null or undefined when calling searchPartnerPins.');
            }
            const localVarPath = `/search/partner/pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = ((term:any):string);
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = ((countryCode:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = ((locale:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/reference/business-access/\'>Understanding Business Access</a> for more information.
         * @summary Search user\'s boards
         * @throws {RequiredError}
         */
        searchUserBoardsGet(adAccountId?: string, bookmark?: string, pageSize?: number, query?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/search/boards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:read_secret"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = ((query:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/reference/business-access/\'>Understanding Business Access</a> for more information.
         * @summary Search user\'s Pins
         * @throws {RequiredError}
         */
        searchUserPinsList(query: string, adAccountId?: string, bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling searchUserPinsList.');
            }
            const localVarPath = `/search/pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:read_secret", "pins:read", "pins:read_secret"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = ((query:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SearchApiType = { 
    searchPartnerPins(term: string, countryCode: string, bookmark?: string, locale?: string, limit?: number, options?: RequestOptions): Promise<SearchPartnerPins200Response>,

    searchUserBoardsGet(adAccountId?: string, bookmark?: string, pageSize?: number, query?: string, options?: RequestOptions): Promise<SearchUserBoardsGet200Response>,

    searchUserPinsList(query: string, adAccountId?: string, bookmark?: string, options?: RequestOptions): Promise<PinsList200Response>,
}

/**
 * SearchApi - factory function to inject configuration 
 * @export
 */
export const SearchApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SearchApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>  Get the top 10 Pins by a given search term.
         * @summary Search pins by a given search term
         * @throws {RequiredError}
         */
        searchPartnerPins(term: string, countryCode: string, bookmark?: string, locale?: string, limit?: number, options?: RequestOptions = {}): Promise<SearchPartnerPins200Response> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchPartnerPins(term, countryCode, bookmark, locale, limit, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Search for boards for the \"operation user_account\". This includes boards of all board types. - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/reference/business-access/\'>Understanding Business Access</a> for more information.
         * @summary Search user\'s boards
         * @throws {RequiredError}
         */
        searchUserBoardsGet(adAccountId?: string, bookmark?: string, pageSize?: number, query?: string, options?: RequestOptions = {}): Promise<SearchUserBoardsGet200Response> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchUserBoardsGet(adAccountId, bookmark, pageSize, query, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Search for pins for the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/reference/business-access/\'>Understanding Business Access</a> for more information.
         * @summary Search user\'s Pins
         * @throws {RequiredError}
         */
        searchUserPinsList(query: string, adAccountId?: string, bookmark?: string, options?: RequestOptions = {}): Promise<PinsList200Response> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchUserPinsList(query, adAccountId, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TermsApi - fetch parameter creator
 * @export
 */
export const TermsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of terms logically related to each input term. <p/> Example: the term \'workout\' would list related terms like \'one song workout\', \'yoga workout\', \'workout motivation\', etc.
         * @summary List related terms
         * @throws {RequiredError}
         */
        termsRelatedList(terms: Array<string>, options: RequestOptions): FetchArgs {
            // verify required parameter 'terms' is not null or undefined
            if (terms === null || terms === undefined) {
                throw new RequiredError('terms','Required parameter terms was null or undefined when calling termsRelatedList.');
            }
            const localVarPath = `/terms/related`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (terms) {
                localVarQueryParameter['terms'] = terms;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get popular search terms that begin with your input term. <p/> Example: \'sport\' would return popular terms like \'sports bar\' and \'sportswear\', but not \'motor sports\' since the phrase does not begin with the given term.
         * @summary List suggested terms
         * @throws {RequiredError}
         */
        termsSuggestedList(term: string, limit?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'term' is not null or undefined
            if (term === null || term === undefined) {
                throw new RequiredError('term','Required parameter term was null or undefined when calling termsSuggestedList.');
            }
            const localVarPath = `/terms/suggested`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = ((term:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TermsApiType = { 
    termsRelatedList(terms: Array<string>, options?: RequestOptions): Promise<RelatedTerms>,

    termsSuggestedList(term: string, limit?: number, options?: RequestOptions): Promise<Array<string>>,
}

/**
 * TermsApi - factory function to inject configuration 
 * @export
 */
export const TermsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TermsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get a list of terms logically related to each input term. <p/> Example: the term \'workout\' would list related terms like \'one song workout\', \'yoga workout\', \'workout motivation\', etc.
         * @summary List related terms
         * @throws {RequiredError}
         */
        termsRelatedList(terms: Array<string>, options?: RequestOptions = {}): Promise<RelatedTerms> {
            const localVarFetchArgs = TermsApiFetchParamCreator(configuration).termsRelatedList(terms, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get popular search terms that begin with your input term. <p/> Example: \'sport\' would return popular terms like \'sports bar\' and \'sportswear\', but not \'motor sports\' since the phrase does not begin with the given term.
         * @summary List suggested terms
         * @throws {RequiredError}
         */
        termsSuggestedList(term: string, limit?: number, options?: RequestOptions = {}): Promise<Array<string>> {
            const localVarFetchArgs = TermsApiFetchParamCreator(configuration).termsSuggestedList(term, limit, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TermsOfServiceApi - fetch parameter creator
 * @export
 */
export const TermsOfServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the text of the terms of service and see whether the advertiser has accepted the terms of service.
         * @summary Get terms of service
         * @throws {RequiredError}
         */
        termsOfServiceGet(adAccountId: string, includeHtml?: boolean, tosType?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling termsOfServiceGet.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/terms_of_service`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (includeHtml !== undefined) {
                localVarQueryParameter['include_html'] = ((includeHtml:any):string);
            }

            if (tosType !== undefined) {
                localVarQueryParameter['tos_type'] = ((tosType:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TermsOfServiceApiType = { 
    termsOfServiceGet(adAccountId: string, includeHtml?: boolean, tosType?: string, options?: RequestOptions): Promise<TermsOfService>,
}

/**
 * TermsOfServiceApi - factory function to inject configuration 
 * @export
 */
export const TermsOfServiceApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TermsOfServiceApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get the text of the terms of service and see whether the advertiser has accepted the terms of service.
         * @summary Get terms of service
         * @throws {RequiredError}
         */
        termsOfServiceGet(adAccountId: string, includeHtml?: boolean, tosType?: string, options?: RequestOptions = {}): Promise<TermsOfService> {
            const localVarFetchArgs = TermsOfServiceApiFetchParamCreator(configuration).termsOfServiceGet(adAccountId, includeHtml, tosType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UserAccountApi - fetch parameter creator
 * @export
 */
export const UserAccountApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of the boards a user follows. The request returns a board summary object array.
         * @summary List following boards
         * @throws {RequiredError}
         */
        boardsUserFollowsList(bookmark?: string, pageSize?: number, explicitFollowing?: boolean, adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account/following/boards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (explicitFollowing !== undefined) {
                localVarQueryParameter['explicit_following'] = ((explicitFollowing:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>  Use this request, as a signed-in user, to follow another user.
         * @summary Follow user
         * @throws {RequiredError}
         */
        followUserUpdate(username: string, followUserRequest: FollowUserRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling followUserUpdate.');
            }
            // verify required parameter 'followUserRequest' is not null or undefined
            if (followUserRequest === null || followUserRequest === undefined) {
                throw new RequiredError('followUserRequest','Required parameter followUserRequest was null or undefined when calling followUserUpdate.');
            }
            const localVarPath = `/user_account/following/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof followUserRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(followUserRequest != null ? followUserRequest : {}) : (((followUserRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of your followers.
         * @summary List followers
         * @throws {RequiredError}
         */
        followersList(bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account/followers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of your linked business accounts.
         * @summary List linked businesses
         * @throws {RequiredError}
         */
        linkedBusinessAccountsGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account/businesses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unverifu a website verified by the signed-in user.
         * @summary Unverify website
         * @throws {RequiredError}
         */
        unverifyWebsiteDelete(website: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'website' is not null or undefined
            if (website === null || website === undefined) {
                throw new RequiredError('website','Required parameter website was null or undefined when calling unverifyWebsiteDelete.');
            }
            const localVarPath = `/user_account/websites`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (website !== undefined) {
                localVarQueryParameter['website'] = ((website:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @throws {RequiredError}
         */
        userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'SOURCE' | 'PIN_FORMAT', adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling userAccountAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling userAccountAnalytics.');
            }
            const localVarPath = `/user_account/analytics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (fromClaimedContent !== undefined) {
                localVarQueryParameter['from_claimed_content'] = ((fromClaimedContent:any):string);
            }

            if (pinFormat !== undefined) {
                localVarQueryParameter['pin_format'] = ((pinFormat:any):string);
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = ((appTypes:any):string);
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = ((contentType:any):string);
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = ((source:any):string);
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (splitField !== undefined) {
                localVarQueryParameter['split_field'] = ((splitField:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets analytics data about a user\'s top pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account top pins analytics
         * @throws {RequiredError}
         */
        userAccountAnalyticsTopPins(startDate: Date, endDate: Date, sortBy: 'ENGAGEMENT' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'PIN_CLICK' | 'SAVE', fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, numOfPins?: number, createdInLastNDays?: 30, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling userAccountAnalyticsTopPins.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling userAccountAnalyticsTopPins.');
            }
            // verify required parameter 'sortBy' is not null or undefined
            if (sortBy === null || sortBy === undefined) {
                throw new RequiredError('sortBy','Required parameter sortBy was null or undefined when calling userAccountAnalyticsTopPins.');
            }
            const localVarPath = `/user_account/analytics/top_pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read", "user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = ((sortBy:any):string);
            }

            if (fromClaimedContent !== undefined) {
                localVarQueryParameter['from_claimed_content'] = ((fromClaimedContent:any):string);
            }

            if (pinFormat !== undefined) {
                localVarQueryParameter['pin_format'] = ((pinFormat:any):string);
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = ((appTypes:any):string);
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = ((contentType:any):string);
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = ((source:any):string);
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (numOfPins !== undefined) {
                localVarQueryParameter['num_of_pins'] = ((numOfPins:any):string);
            }

            if (createdInLastNDays !== undefined) {
                localVarQueryParameter['created_in_last_n_days'] = ((createdInLastNDays:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets analytics data about a user\'s top video pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account top video pins analytics
         * @throws {RequiredError}
         */
        userAccountAnalyticsTopVideoPins(startDate: Date, endDate: Date, sortBy: 'IMPRESSION' | 'SAVE' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START', fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'IMPRESSION' | 'SAVE' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START' | 'OUTBOUND_CLICK'>, numOfPins?: number, createdInLastNDays?: 30, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling userAccountAnalyticsTopVideoPins.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling userAccountAnalyticsTopVideoPins.');
            }
            // verify required parameter 'sortBy' is not null or undefined
            if (sortBy === null || sortBy === undefined) {
                throw new RequiredError('sortBy','Required parameter sortBy was null or undefined when calling userAccountAnalyticsTopVideoPins.');
            }
            const localVarPath = `/user_account/analytics/top_video_pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read", "user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString().slice(0, 10);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString().slice(0, 10);
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = ((sortBy:any):string);
            }

            if (fromClaimedContent !== undefined) {
                localVarQueryParameter['from_claimed_content'] = ((fromClaimedContent:any):string);
            }

            if (pinFormat !== undefined) {
                localVarQueryParameter['pin_format'] = ((pinFormat:any):string);
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = ((appTypes:any):string);
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = ((contentType:any):string);
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = ((source:any):string);
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (numOfPins !== undefined) {
                localVarQueryParameter['num_of_pins'] = ((numOfPins:any):string);
            }

            if (createdInLastNDays !== undefined) {
                localVarQueryParameter['created_in_last_n_days'] = ((createdInLastNDays:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of a user\'s following interests in one place.
         * @summary List following interests
         * @throws {RequiredError}
         */
        userAccountFollowedInterests(username: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling userAccountFollowedInterests.');
            }
            const localVarPath = `/users/{username}/interests/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/reference/business-access/\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @throws {RequiredError}
         */
        userAccountGet(adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of who a certain user follows.
         * @summary List following
         * @throws {RequiredError}
         */
        userFollowingGet(bookmark?: string, pageSize?: number, feedType?: UserFollowingFeedType, explicitFollowing?: boolean, adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account/following`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (feedType !== undefined) {
                localVarQueryParameter['feed_type'] = ((feedType:any):string);
            }

            if (explicitFollowing !== undefined) {
                localVarQueryParameter['explicit_following'] = ((explicitFollowing:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user websites, claimed or not
         * @summary Get user websites
         * @throws {RequiredError}
         */
        userWebsitesGet(bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account/websites`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a website as a signed-in user.
         * @summary Verify website
         * @throws {RequiredError}
         */
        verifyWebsiteUpdate(userWebsiteVerifyRequest: UserWebsiteVerifyRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'userWebsiteVerifyRequest' is not null or undefined
            if (userWebsiteVerifyRequest === null || userWebsiteVerifyRequest === undefined) {
                throw new RequiredError('userWebsiteVerifyRequest','Required parameter userWebsiteVerifyRequest was null or undefined when calling verifyWebsiteUpdate.');
            }
            const localVarPath = `/user_account/websites`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof userWebsiteVerifyRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(userWebsiteVerifyRequest != null ? userWebsiteVerifyRequest : {}) : (((userWebsiteVerifyRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get verification code for user to install on the website to claim it.
         * @summary Get user verification code for website claiming
         * @throws {RequiredError}
         */
        websiteVerificationGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account/websites/verification`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UserAccountApiType = { 
    boardsUserFollowsList(bookmark?: string, pageSize?: number, explicitFollowing?: boolean, adAccountId?: string, options?: RequestOptions): Promise<BoardsUserFollowsList200Response>,

    followUserUpdate(username: string, followUserRequest: FollowUserRequest, options?: RequestOptions): Promise<UserSummary>,

    followersList(bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<FollowersList200Response>,

    linkedBusinessAccountsGet(options?: RequestOptions): Promise<Array<LinkedBusiness>>,

    unverifyWebsiteDelete(website: string, options?: RequestOptions): Promise<Response>,

    userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'SOURCE' | 'PIN_FORMAT', adAccountId?: string, options?: RequestOptions): Promise<{ [key: string]: AnalyticsMetricsResponse; }>,

    userAccountAnalyticsTopPins(startDate: Date, endDate: Date, sortBy: 'ENGAGEMENT' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'PIN_CLICK' | 'SAVE', fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, numOfPins?: number, createdInLastNDays?: 30, adAccountId?: string, options?: RequestOptions): Promise<TopPinsAnalyticsResponse>,

    userAccountAnalyticsTopVideoPins(startDate: Date, endDate: Date, sortBy: 'IMPRESSION' | 'SAVE' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START', fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'IMPRESSION' | 'SAVE' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START' | 'OUTBOUND_CLICK'>, numOfPins?: number, createdInLastNDays?: 30, adAccountId?: string, options?: RequestOptions): Promise<TopVideoPinsAnalyticsResponse>,

    userAccountFollowedInterests(username: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<UserAccountFollowedInterests200Response>,

    userAccountGet(adAccountId?: string, options?: RequestOptions): Promise<Account>,

    userFollowingGet(bookmark?: string, pageSize?: number, feedType?: UserFollowingFeedType, explicitFollowing?: boolean, adAccountId?: string, options?: RequestOptions): Promise<UserFollowingGet200Response>,

    userWebsitesGet(bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<UserWebsitesGet200Response>,

    verifyWebsiteUpdate(userWebsiteVerifyRequest: UserWebsiteVerifyRequest, options?: RequestOptions): Promise<UserWebsiteSummary>,

    websiteVerificationGet(options?: RequestOptions): Promise<UserWebsiteVerificationCode>,
}

/**
 * UserAccountApi - factory function to inject configuration 
 * @export
 */
export const UserAccountApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UserAccountApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get a list of the boards a user follows. The request returns a board summary object array.
         * @summary List following boards
         * @throws {RequiredError}
         */
        boardsUserFollowsList(bookmark?: string, pageSize?: number, explicitFollowing?: boolean, adAccountId?: string, options?: RequestOptions = {}): Promise<BoardsUserFollowsList200Response> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).boardsUserFollowsList(bookmark, pageSize, explicitFollowing, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>  Use this request, as a signed-in user, to follow another user.
         * @summary Follow user
         * @throws {RequiredError}
         */
        followUserUpdate(username: string, followUserRequest: FollowUserRequest, options?: RequestOptions = {}): Promise<UserSummary> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).followUserUpdate(username, followUserRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of your followers.
         * @summary List followers
         * @throws {RequiredError}
         */
        followersList(bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<FollowersList200Response> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).followersList(bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of your linked business accounts.
         * @summary List linked businesses
         * @throws {RequiredError}
         */
        linkedBusinessAccountsGet(options?: RequestOptions = {}): Promise<Array<LinkedBusiness>> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).linkedBusinessAccountsGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Unverifu a website verified by the signed-in user.
         * @summary Unverify website
         * @throws {RequiredError}
         */
        unverifyWebsiteDelete(website: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).unverifyWebsiteDelete(website, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @throws {RequiredError}
         */
        userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'SOURCE' | 'PIN_FORMAT', adAccountId?: string, options?: RequestOptions = {}): Promise<{ [key: string]: AnalyticsMetricsResponse; }> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, splitField, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets analytics data about a user\'s top pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account top pins analytics
         * @throws {RequiredError}
         */
        userAccountAnalyticsTopPins(startDate: Date, endDate: Date, sortBy: 'ENGAGEMENT' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'PIN_CLICK' | 'SAVE', fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, numOfPins?: number, createdInLastNDays?: 30, adAccountId?: string, options?: RequestOptions = {}): Promise<TopPinsAnalyticsResponse> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountAnalyticsTopPins(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets analytics data about a user\'s top video pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account top video pins analytics
         * @throws {RequiredError}
         */
        userAccountAnalyticsTopVideoPins(startDate: Date, endDate: Date, sortBy: 'IMPRESSION' | 'SAVE' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START', fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'ORGANIC_IMAGE' | 'ORGANIC_PRODUCT' | 'ORGANIC_VIDEO' | 'ADS_STANDARD' | 'ADS_PRODUCT' | 'ADS_VIDEO' | 'ADS_IDEA' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', contentType?: 'ALL' | 'PAID' | 'ORGANIC', source?: 'ALL' | 'YOUR_PINS' | 'OTHER_PINS', metricTypes?: Array<'IMPRESSION' | 'SAVE' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW' | 'VIDEO_10S_VIEW' | 'VIDEO_START' | 'OUTBOUND_CLICK'>, numOfPins?: number, createdInLastNDays?: 30, adAccountId?: string, options?: RequestOptions = {}): Promise<TopVideoPinsAnalyticsResponse> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountAnalyticsTopVideoPins(startDate, endDate, sortBy, fromClaimedContent, pinFormat, appTypes, contentType, source, metricTypes, numOfPins, createdInLastNDays, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of a user\'s following interests in one place.
         * @summary List following interests
         * @throws {RequiredError}
         */
        userAccountFollowedInterests(username: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<UserAccountFollowedInterests200Response> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountFollowedInterests(username, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/reference/business-access/\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @throws {RequiredError}
         */
        userAccountGet(adAccountId?: string, options?: RequestOptions = {}): Promise<Account> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountGet(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of who a certain user follows.
         * @summary List following
         * @throws {RequiredError}
         */
        userFollowingGet(bookmark?: string, pageSize?: number, feedType?: UserFollowingFeedType, explicitFollowing?: boolean, adAccountId?: string, options?: RequestOptions = {}): Promise<UserFollowingGet200Response> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userFollowingGet(bookmark, pageSize, feedType, explicitFollowing, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get user websites, claimed or not
         * @summary Get user websites
         * @throws {RequiredError}
         */
        userWebsitesGet(bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<UserWebsitesGet200Response> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userWebsitesGet(bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Verify a website as a signed-in user.
         * @summary Verify website
         * @throws {RequiredError}
         */
        verifyWebsiteUpdate(userWebsiteVerifyRequest: UserWebsiteVerifyRequest, options?: RequestOptions = {}): Promise<UserWebsiteSummary> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).verifyWebsiteUpdate(userWebsiteVerifyRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get verification code for user to install on the website to claim it.
         * @summary Get user verification code for website claiming
         * @throws {RequiredError}
         */
        websiteVerificationGet(options?: RequestOptions = {}): Promise<UserWebsiteVerificationCode> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).websiteVerificationGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    AdAccountsApi: AdAccountsApiType,

    AdGroupsApi: AdGroupsApiType,

    AdsApi: AdsApiType,

    AudienceInsightsApi: AudienceInsightsApiType,

    AudiencesApi: AudiencesApiType,

    BillingApi: BillingApiType,

    BoardsApi: BoardsApiType,

    BulkApi: BulkApiType,

    CampaignsApi: CampaignsApiType,

    CatalogsApi: CatalogsApiType,

    ConversionEventsApi: ConversionEventsApiType,

    ConversionTagsApi: ConversionTagsApiType,

    CustomerListsApi: CustomerListsApiType,

    IntegrationsApi: IntegrationsApiType,

    KeywordsApi: KeywordsApiType,

    LeadAdsApi: LeadAdsApiType,

    LeadFormsApi: LeadFormsApiType,

    MediaApi: MediaApiType,

    OauthApi: OauthApiType,

    OrderLinesApi: OrderLinesApiType,

    PinsApi: PinsApiType,

    ProductGroupPromotionsApi: ProductGroupPromotionsApiType,

    ProductGroupsApi: ProductGroupsApiType,

    ResourcesApi: ResourcesApiType,

    SearchApi: SearchApiType,

    TermsApi: TermsApiType,

    TermsOfServiceApi: TermsOfServiceApiType,

    UserAccountApi: UserAccountApiType,
 }
