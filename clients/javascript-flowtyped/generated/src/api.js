// @flow
/* eslint-disable no-use-before-define */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api.pinterest.com/v5".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}


            export type AccountAccountTypeEnum = 'PINNER' | 'BUSINESS';
/**
 * 
 * @export
 */
export type Account = {
    /**
     * Type of account
     * @type {string}
     * @memberof Account
     */
    account_type?: AccountAccountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    profile_image?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    website_url?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    username?: string;
}

/**
 * Ad group billable event type.
 * @export
 * @enum {string}
 */
export type ActionType = 'CLICKTHROUGH' | 'IMPRESSION' | 'VIDEO_V_50_MRC' | 'BILLABLE_ENGAGEMENT';

/**
 * 
 * @export
 */
export type AdAccount = {
    /**
     * 
     * @type {string}
     * @memberof AdAccount
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AdAccount
     */
    name?: string;
    /**
     * 
     * @type {AdAccountOwner}
     * @memberof AdAccount
     */
    owner?: AdAccountOwner;
    /**
     * 
     * @type {Country}
     * @memberof AdAccount
     */
    country?: Country;
    /**
     * 
     * @type {Currency}
     * @memberof AdAccount
     */
    currency?: Currency;
}

/**
 * 
 * @export
 */
export type AdAccountOwner = {
    /**
     * Public username for the user account
     * @type {string}
     * @memberof AdAccountOwner
     */
    username?: string;
}


            export type AdGroupResponseBudgetTypeEnum = 'DAILY' | 'LIFETIME' | 'CBO_ADGROUP';

            export type AdGroupResponseConversionLearningModeTypeEnum = 'NOT_ACTIVE' | 'ACTIVE' | 'null';
/**
 * 
 * @export
 */
export type AdGroupResponse = {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupResponse
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupResponse
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupResponse
     */
    budget_in_micro_currency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupResponse
     */
    bid_in_micro_currency?: number;
    /**
     * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     * @type {string}
     * @memberof AdGroupResponse
     */
    budget_type?: AdGroupResponseBudgetTypeEnum;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupResponse
     */
    start_time?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    end_time?: number;
    /**
     * Ad group targeting specification defining the ad group target audience. For example, \'{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}\'
     * @type {{ [key: string]: Array<string>; }}
     * @memberof AdGroupResponse
     */
    targeting_spec?: { [key: string]: Array<string>; };
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupResponse
     */
    lifetime_frequency_cap?: number;
    /**
     * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
     * @type {TrackingUrls}
     * @memberof AdGroupResponse
     */
    tracking_urls?: TrackingUrls;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupResponse
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupResponse
     */
    placement_group?: PlacementGroupType;
    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     * @type {PacingDeliveryType}
     * @memberof AdGroupResponse
     */
    pacing_delivery_type?: PacingDeliveryType;
    /**
     * oCPM learn mode
     * @type {string}
     * @memberof AdGroupResponse
     */
    conversion_learning_mode_type?: AdGroupResponseConversionLearningModeTypeEnum;
    /**
     * Ad group summary status.
     * @type {AdGroupSummaryStatus}
     * @memberof AdGroupResponse
     */
    summary_status?: AdGroupSummaryStatus;
    /**
     * Feed Profile ID associated to the adgroup.
     * @type {string}
     * @memberof AdGroupResponse
     */
    feed_profile_id?: string;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupResponse
     */
    campaign_id?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupResponse
     */
    billable_event?: ActionType;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    id?: string;
    /**
     * Always \"adgroup\".
     * @type {string}
     * @memberof AdGroupResponse
     */
    type?: string;
    /**
     * Advertiser ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    ad_account_id?: string;
    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    created_time?: number;
    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    updated_time?: number;
}


            export type AdGroupResponseAllOfBudgetTypeEnum = 'DAILY' | 'LIFETIME' | 'CBO_ADGROUP';

            export type AdGroupResponseAllOfConversionLearningModeTypeEnum = 'NOT_ACTIVE' | 'ACTIVE' | 'null';
/**
 * 
 * @export
 */
export type AdGroupResponseAllOf = {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupResponseAllOf
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    budget_in_micro_currency?: number;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    bid_in_micro_currency?: number;
    /**
     * Budget type. If DAILY, an ad group\'s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    budget_type?: AdGroupResponseAllOfBudgetTypeEnum;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    start_time?: number;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    end_time?: number;
    /**
     * Ad group targeting specification defining the ad group target audience. For example, \'{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}\'
     * @type {{ [key: string]: Array<string>; }}
     * @memberof AdGroupResponseAllOf
     */
    targeting_spec?: { [key: string]: Array<string>; };
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupResponseAllOf
     */
    lifetime_frequency_cap?: number;
    /**
     * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
     * @type {TrackingUrls}
     * @memberof AdGroupResponseAllOf
     */
    tracking_urls?: TrackingUrls;
    /**
     * Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     * @type {boolean}
     * @memberof AdGroupResponseAllOf
     */
    auto_targeting_enabled?: boolean;
    /**
     * <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupResponseAllOf
     */
    placement_group?: PlacementGroupType;
    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     * @type {PacingDeliveryType}
     * @memberof AdGroupResponseAllOf
     */
    pacing_delivery_type?: PacingDeliveryType;
    /**
     * oCPM learn mode
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    conversion_learning_mode_type?: AdGroupResponseAllOfConversionLearningModeTypeEnum;
    /**
     * Ad group summary status.
     * @type {AdGroupSummaryStatus}
     * @memberof AdGroupResponseAllOf
     */
    summary_status?: AdGroupSummaryStatus;
    /**
     * Feed Profile ID associated to the adgroup.
     * @type {string}
     * @memberof AdGroupResponseAllOf
     */
    feed_profile_id?: string;
}

/**
 * 
 * @export
 */
export type AdGroupResponseAllOf1 = {
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    campaign_id?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupResponseAllOf1
     */
    billable_event?: ActionType;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    id?: string;
    /**
     * Always \"adgroup\".
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    type?: string;
    /**
     * Advertiser ID.
     * @type {string}
     * @memberof AdGroupResponseAllOf1
     */
    ad_account_id?: string;
    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponseAllOf1
     */
    created_time?: number;
    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponseAllOf1
     */
    updated_time?: number;
}

/**
 * Summary status for ad group
 * @export
 * @enum {string}
 */
export type AdGroupSummaryStatus = 'RUNNING' | 'PAUSED' | 'NOT_STARTED' | 'COMPLETED' | 'ADVERTISER_DISABLED' | 'ARCHIVED';


            export type AdResponseCreativeTypeEnum = 'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'STORY';

            export type AdResponseRejectedReasonsEnum = 'HASHTAGS' | 'PROMOTIONS_AND_PRICES' | 'TARGETING' | 'LANDING_PAGE' | 'CAPS_AND_SYMBOLS' | 'SHOCKING' | 'WEIGHT_LOSS' | 'PROHIBITED_PRODUCT' | 'AUTHENTICITY' | 'NUDITY' | 'CONFUSING_DESIGN' | 'URGENCY' | 'RATINGS' | 'APP' | 'ALCOHOL' | 'CONTESTS' | 'POLITICAL' | 'OTHER' | 'IMAGE' | 'NAR' | 'INCONSISTENT' | 'CLICKBAIT' | 'NO_DESCRIPTION' | 'LOW_QUALITY' | 'EXAGGERATED_CLAIMS' | 'PINTEREST_BRAND' | 'ALCOHOL_NO_SALE' | 'LANDING_PAGE_SPEED' | 'LANDING_PAGE_HARDWALL' | 'LANDING_PAGE_BROKEN' | 'LANDING_PAGE_QUALITY' | 'OUT_OF_STOCK' | 'IMAGE_LOW_QUALITY' | 'IMAGE_BUSY' | 'IMAGE_POORLY_EDITED' | 'IMAGE_BEFORE_AFTER' | 'UGC' | 'FAKE_BUTTONS' | 'WEAPONS' | 'SENSITIVE' | 'UNACCEPTABLE_BUSINESS' | 'SUSPICIOUS_CLAIMS' | 'PHARMA' | 'SUSPICIOUS_SUPPLEMENTS' | 'ILLEGAL_RECREATIONAL_DRUG' | 'LOW_QUALITY_LANDING_PAGE' | 'RESTRICTED_HEALTHCARE' | 'INCONSISTENT_LANG_FR';

            export type AdResponseReviewStatusEnum = 'OTHER' | 'PENDING' | 'REJECTED' | 'APPROVED';
/**
 * 
 * @export
 */
export type AdResponse = {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdResponse
     */
    ad_group_id?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponse
     */
    android_deep_link?: string;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    carousel_android_deep_links?: Array<string>;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    carousel_destination_urls?: Array<string>;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdResponse
     */
    carousel_ios_deep_links?: Array<string>;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdResponse
     */
    click_tracking_url?: string;
    /**
     * Ad creative type enum
     * @type {string}
     * @memberof AdResponse
     */
    creative_type?: AdResponseCreativeTypeEnum;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdResponse
     */
    destination_url?: string;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponse
     */
    ios_deep_link?: string;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdResponse
     */
    is_pin_deleted?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdResponse
     */
    is_removable?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdResponse
     */
    name?: string;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdResponse
     */
    pin_id?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdResponse
     */
    status?: EntityStatus;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof AdResponse
     */
    tracking_urls?: TrackingUrls;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdResponse
     */
    view_tracking_url?: string;
    /**
     * The ID of the advertiser that this ad belongs to.
     * @type {string}
     * @memberof AdResponse
     */
    ad_account_id?: string;
    /**
     * ID of the ad campaign that contains this ad.
     * @type {string}
     * @memberof AdResponse
     */
    campaign_id?: string;
    /**
     * Destination URL template for all items within a collections drawer.
     * @type {string}
     * @memberof AdResponse
     */
    collection_items_destination_url_template?: string;
    /**
     * Pin creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponse
     */
    created_time?: number;
    /**
     * The ID of this ad.
     * @type {string}
     * @memberof AdResponse
     */
    id?: string;
    /**
     * Enum reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponse
     */
    rejected_reasons?: Array<AdResponseRejectedReasonsEnum>;
    /**
     * Text reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponse
     */
    rejection_labels?: Array<string>;
    /**
     * Ad review status
     * @type {string}
     * @memberof AdResponse
     */
    review_status?: AdResponseReviewStatusEnum;
    /**
     * Always \"ad\".
     * @type {string}
     * @memberof AdResponse
     */
    type?: string;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponse
     */
    updated_time?: number;
    /**
     * Ad summary status
     * @type {PinPromotionSummaryStatus}
     * @memberof AdResponse
     */
    summary_status?: PinPromotionSummaryStatus;
}


            export type AdResponseAllOfCreativeTypeEnum = 'REGULAR' | 'VIDEO' | 'SHOPPING' | 'CAROUSEL' | 'MAX_VIDEO' | 'SHOP_THE_PIN' | 'STORY';
/**
 * Creation fields
 * @export
 */
export type AdResponseAllOf = {
    /**
     * ID of the ad group that contains the ad.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    ad_group_id?: string;
    /**
     * Deep link URL for Android devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    android_deep_link?: string;
    /**
     * Comma-separated deep links for the carousel pin on Android.
     * @type {Array<string>}
     * @memberof AdResponseAllOf
     */
    carousel_android_deep_links?: Array<string>;
    /**
     * Comma-separated destination URLs for the carousel pin to promote.
     * @type {Array<string>}
     * @memberof AdResponseAllOf
     */
    carousel_destination_urls?: Array<string>;
    /**
     * Comma-separated deep links for the carousel pin on iOS.
     * @type {Array<string>}
     * @memberof AdResponseAllOf
     */
    carousel_ios_deep_links?: Array<string>;
    /**
     * Tracking url for the ad clicks.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    click_tracking_url?: string;
    /**
     * Ad creative type enum
     * @type {string}
     * @memberof AdResponseAllOf
     */
    creative_type?: AdResponseAllOfCreativeTypeEnum;
    /**
     * Destination URL.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    destination_url?: string;
    /**
     * Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    ios_deep_link?: string;
    /**
     * Is original pin deleted?
     * @type {boolean}
     * @memberof AdResponseAllOf
     */
    is_pin_deleted?: boolean;
    /**
     * Is pin repinnable?
     * @type {boolean}
     * @memberof AdResponseAllOf
     */
    is_removable?: boolean;
    /**
     * Name of the ad - 255 chars max.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    name?: string;
    /**
     * Pin ID.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    pin_id?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof AdResponseAllOf
     */
    status?: EntityStatus;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof AdResponseAllOf
     */
    tracking_urls?: TrackingUrls;
    /**
     * Tracking URL for ad impressions.
     * @type {string}
     * @memberof AdResponseAllOf
     */
    view_tracking_url?: string;
}


            export type AdResponseAllOf1RejectedReasonsEnum = 'HASHTAGS' | 'PROMOTIONS_AND_PRICES' | 'TARGETING' | 'LANDING_PAGE' | 'CAPS_AND_SYMBOLS' | 'SHOCKING' | 'WEIGHT_LOSS' | 'PROHIBITED_PRODUCT' | 'AUTHENTICITY' | 'NUDITY' | 'CONFUSING_DESIGN' | 'URGENCY' | 'RATINGS' | 'APP' | 'ALCOHOL' | 'CONTESTS' | 'POLITICAL' | 'OTHER' | 'IMAGE' | 'NAR' | 'INCONSISTENT' | 'CLICKBAIT' | 'NO_DESCRIPTION' | 'LOW_QUALITY' | 'EXAGGERATED_CLAIMS' | 'PINTEREST_BRAND' | 'ALCOHOL_NO_SALE' | 'LANDING_PAGE_SPEED' | 'LANDING_PAGE_HARDWALL' | 'LANDING_PAGE_BROKEN' | 'LANDING_PAGE_QUALITY' | 'OUT_OF_STOCK' | 'IMAGE_LOW_QUALITY' | 'IMAGE_BUSY' | 'IMAGE_POORLY_EDITED' | 'IMAGE_BEFORE_AFTER' | 'UGC' | 'FAKE_BUTTONS' | 'WEAPONS' | 'SENSITIVE' | 'UNACCEPTABLE_BUSINESS' | 'SUSPICIOUS_CLAIMS' | 'PHARMA' | 'SUSPICIOUS_SUPPLEMENTS' | 'ILLEGAL_RECREATIONAL_DRUG' | 'LOW_QUALITY_LANDING_PAGE' | 'RESTRICTED_HEALTHCARE' | 'INCONSISTENT_LANG_FR';

            export type AdResponseAllOf1ReviewStatusEnum = 'OTHER' | 'PENDING' | 'REJECTED' | 'APPROVED';
/**
 * 
 * @export
 */
export type AdResponseAllOf1 = {
    /**
     * The ID of the advertiser that this ad belongs to.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    ad_account_id?: string;
    /**
     * ID of the ad campaign that contains this ad.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    campaign_id?: string;
    /**
     * Destination URL template for all items within a collections drawer.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    collection_items_destination_url_template?: string;
    /**
     * Pin creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponseAllOf1
     */
    created_time?: number;
    /**
     * The ID of this ad.
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    id?: string;
    /**
     * Enum reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponseAllOf1
     */
    rejected_reasons?: Array<AdResponseAllOf1RejectedReasonsEnum>;
    /**
     * Text reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\".
     * @type {Array<string>}
     * @memberof AdResponseAllOf1
     */
    rejection_labels?: Array<string>;
    /**
     * Ad review status
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    review_status?: AdResponseAllOf1ReviewStatusEnum;
    /**
     * Always \"ad\".
     * @type {string}
     * @memberof AdResponseAllOf1
     */
    type?: string;
    /**
     * Last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdResponseAllOf1
     */
    updated_time?: number;
    /**
     * Ad summary status
     * @type {PinPromotionSummaryStatus}
     * @memberof AdResponseAllOf1
     */
    summary_status?: PinPromotionSummaryStatus;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsCreateAsyncRequest = {
    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    start_date: string;
    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    end_date: string;
    /**
     * TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @type {Granularity}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    granularity: Granularity;
    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    click_window_days?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    engagement_window_days?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    view_window_days?: ConversionAttributionWindowDays;
    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @type {ConversionReportTimeType}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    conversion_report_time?: ConversionReportTimeType;
    /**
     * List of types of attribution for the conversion report
     * @type {Array<ConversionReportAttributionType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    attribution_types?: Array<ConversionReportAttributionType>;
    /**
     * Metric and entity columns
     * @type {Array<ReportingColumnAsync>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    columns: Array<ReportingColumnAsync>;
    /**
     * Level of the report
     * @type {MetricsReportingLevel}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    level: MetricsReportingLevel;
    /**
     * Specification for formatting report data
     * @type {DataOutputFormat}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    report_format?: DataOutputFormat;
    /**
     * List of campaign ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    campaign_ids?: Array<string>;
    /**
     * List of status values for filtering
     * @type {Array<CampaignSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    campaign_statuses?: Array<CampaignSummaryStatus>;
    /**
     * List of values for filtering
     * @type {Array<ObjectiveType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    campaign_objective_types?: Array<ObjectiveType>;
    /**
     * List of ad group ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_group_ids?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<AdGroupSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_group_statuses?: Array<AdGroupSummaryStatus>;
    /**
     * List of ad ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_ids?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<PinPromotionSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    ad_statuses?: Array<PinPromotionSummaryStatus>;
    /**
     * List of product group ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    product_group_ids?: Array<string>;
    /**
     * List of values for filtering
     * @type {Array<ProductGroupSummaryStatus>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    product_group_statuses?: Array<ProductGroupSummaryStatus>;
    /**
     * List of product item ids
     * @type {Array<string>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    product_item_ids?: Array<string>;
    /**
     * List of targeting types
     * @type {Array<AdsAnalyticsTargetingType>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    targeting_types?: Array<AdsAnalyticsTargetingType>;
    /**
     * List of metrics filters
     * @type {Array<AdsAnalyticsMetricsFilter>}
     * @memberof AdsAnalyticsCreateAsyncRequest
     */
    metrics_filters?: Array<AdsAnalyticsMetricsFilter>;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsCreateAsyncRequestAllOf = {
    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    start_date: string;
    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    end_date: string;
    /**
     * TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     * @type {Granularity}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    granularity: Granularity;
    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    click_window_days?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    engagement_window_days?: ConversionAttributionWindowDays;
    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     * @type {ConversionAttributionWindowDays}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    view_window_days?: ConversionAttributionWindowDays;
    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     * @type {ConversionReportTimeType}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    conversion_report_time?: ConversionReportTimeType;
    /**
     * List of types of attribution for the conversion report
     * @type {Array<ConversionReportAttributionType>}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf
     */
    attribution_types?: Array<ConversionReportAttributionType>;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsCreateAsyncRequestAllOf1 = {
    /**
     * Metric and entity columns
     * @type {Array<ReportingColumnAsync>}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf1
     */
    columns: Array<ReportingColumnAsync>;
    /**
     * Level of the report
     * @type {MetricsReportingLevel}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf1
     */
    level: MetricsReportingLevel;
    /**
     * Specification for formatting report data
     * @type {DataOutputFormat}
     * @memberof AdsAnalyticsCreateAsyncRequestAllOf1
     */
    report_format?: DataOutputFormat;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsCreateAsyncResponse = {
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    report_status?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsCreateAsyncResponse
     */
    message?: string;
}

/**
 * Reporting columns for sync reporting data filter
 * @export
 * @enum {string}
 */
export type AdsAnalyticsFilterColumn = 'SPEND_IN_DOLLAR' | 'TOTAL_IMPRESSION';

/**
 * Filter operator for sync reporting
 * @export
 * @enum {string}
 */
export type AdsAnalyticsFilterOperator = 'LESS_THAN' | 'GREATER_THAN';

/**
 * 
 * @export
 */
export type AdsAnalyticsGetAsyncResponse = {
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    report_status?: string;
    /**
     * 
     * @type {string}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    url?: string;
    /**
     * 
     * @type {number}
     * @memberof AdsAnalyticsGetAsyncResponse
     */
    size?: number;
}

/**
 * 
 * @export
 */
export type AdsAnalyticsMetricsFilter = {
    /**
     * 
     * @type {AdsAnalyticsFilterColumn}
     * @memberof AdsAnalyticsMetricsFilter
     */
    field?: AdsAnalyticsFilterColumn;
    /**
     * 
     * @type {AdsAnalyticsFilterOperator}
     * @memberof AdsAnalyticsMetricsFilter
     */
    operator?: AdsAnalyticsFilterOperator;
    /**
     * List of values for filtering
     * @type {Array<number>}
     * @memberof AdsAnalyticsMetricsFilter
     */
    values?: Array<number>;
}

/**
 * Reporting targeting type
 * @export
 * @enum {string}
 */
export type AdsAnalyticsTargetingType = 'KEYWORD' | 'APPTYPE' | 'GENDER' | 'LOCATION' | 'PLACEMENT' | 'COUNTRY' | 'TARGETED_INTEREST' | 'PINNER_INTEREST' | 'AUDIENCE_INCLUDE' | 'AUDIENCE_EXCLUDE' | 'GEO' | 'AGE_BUCKET' | 'REGION';

/**
 * 
 * @export
 */
export type AnalyticsMetricsResponse = {
    /**
     * Array with the requested daily metric records
     * @type {Array<AnalyticsMetricsResponseDailyMetrics>}
     * @memberof AnalyticsMetricsResponse
     */
    daily_metrics?: Array<AnalyticsMetricsResponseDailyMetrics>;
    /**
     * The metric name and value over the requested period for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof AnalyticsMetricsResponse
     */
    summary_metrics?: { [key: string]: number; };
}


            export type AnalyticsMetricsResponseDailyMetricsDataStatusEnum = 'PROCESSING' | 'READY' | 'ESTIMATE' | 'BEFORE_BUSINESS_CREATED' | 'BEFORE_DATA_RETENTION_PERIOD' | 'BEFORE_PIN_DATA_RETENTION_PERIOD' | 'BEFORE_METRIC_START_DATE' | 'BEFORE_CORE_METRIC_START_DATE' | 'BEFORE_PIN_FORMAT_METRIC_START_DATE' | 'BEFORE_AUDIENCE_METRIC_START_DATE' | 'BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE' | 'BEFORE_VIDEO_METRIC_START_DATE' | 'BEFORE_CONVERSION_METRIC_START_DATE' | 'PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD' | 'IN_BAD_TAG_DATE' | 'BEFORE_PUBLISHED_METRIC_START_DATE' | 'BEFORE_ASSIST_METRIC_START_DATE' | 'BEFORE_PIN_CREATED' | 'BEFORE_ACCOUNT_CLAIMED' | 'BEFORE_DEMOGRAPHIC_FILTERS_START_DATE' | 'AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD' | 'AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD' | 'BEFORE_PRODUCT_GROUP_FILTER_START_DATE';
/**
 * 
 * @export
 */
export type AnalyticsMetricsResponseDailyMetrics = {
    /**
     * Metrics availablity, e.g., \"READY\".
     * @type {string}
     * @memberof AnalyticsMetricsResponseDailyMetrics
     */
    data_status?: AnalyticsMetricsResponseDailyMetricsDataStatusEnum;
    /**
     * Metrics date (UTC): YYYY-MM-DD.
     * @type {string}
     * @memberof AnalyticsMetricsResponseDailyMetrics
     */
    _date?: string;
    /**
     * The metric name and daily value for each requested metric
     * @type {{ [key: string]: number; }}
     * @memberof AnalyticsMetricsResponseDailyMetrics
     */
    metrics?: { [key: string]: number; };
}

/**
 * 
 * @export
 */
export type AvailabilityFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof AvailabilityFilter
     */
    AVAILABILITY: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * The operation performed by the batch
 * @export
 * @enum {string}
 */
export type BatchOperation = 'UPDATE' | 'CREATE' | 'UPSERT';

/**
 * The status of the operation performed by the batch
 * @export
 * @enum {string}
 */
export type BatchOperationStatus = 'PROCESSING' | 'COMPLETED';


            export type BoardPrivacyEnum = 'PUBLIC' | 'PROTECTED' | 'SECRET';
/**
 * Board
 * @export
 */
export type Board = {
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Board
     */
    description?: string;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Board
     */
    owner?: BoardOwner;
    /**
     * Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a>
     * @type {string}
     * @memberof Board
     */
    privacy?: BoardPrivacyEnum;
}

/**
 * 
 * @export
 */
export type BoardOwner = {
    /**
     * 
     * @type {string}
     * @memberof BoardOwner
     */
    username?: string;
}

/**
 * Sections help organize pins within a board.
 * @export
 */
export type BoardSection = {
    /**
     * 
     * @type {string}
     * @memberof BoardSection
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardSection
     */
    name?: string;
}


            export type BoardUpdatePrivacyEnum = 'PUBLIC' | 'SECRET';
/**
 * Board fields for updates
 * @export
 */
export type BoardUpdate = {
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardUpdate
     */
    privacy?: BoardUpdatePrivacyEnum;
}

/**
 * 
 * @export
 */
export type BrandFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof BrandFilter
     */
    BRAND: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * Campaign Data
 * @export
 */
export type CampaignCommon = {
    /**
     * Campaign\'s Advertiser ID.
     * @type {string}
     * @memberof CampaignCommon
     */
    ad_account_id: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignCommon
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignCommon
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap.
     * @type {number}
     * @memberof CampaignCommon
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap.
     * @type {number}
     * @memberof CampaignCommon
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignCommon
     */
    order_line_id?: string;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof CampaignCommon
     */
    tracking_urls?: TrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCommon
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignCommon
     */
    end_time?: number;
}

/**
 * 
 * @export
 */
export type CampaignResponse = {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignResponse
     */
    id: string;
    /**
     * Campaign\'s Advertiser ID.
     * @type {string}
     * @memberof CampaignResponse
     */
    ad_account_id: string;
    /**
     * Campaign name.
     * @type {string}
     * @memberof CampaignResponse
     */
    name?: string;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CampaignResponse
     */
    status?: EntityStatus;
    /**
     * Campaign total spending cap.
     * @type {number}
     * @memberof CampaignResponse
     */
    lifetime_spend_cap?: number;
    /**
     * Campaign daily spending cap.
     * @type {number}
     * @memberof CampaignResponse
     */
    daily_spend_cap?: number;
    /**
     * Order line ID that appears on the invoice.
     * @type {string}
     * @memberof CampaignResponse
     */
    order_line_id?: string;
    /**
     * 
     * @type {TrackingUrls}
     * @memberof CampaignResponse
     */
    tracking_urls?: TrackingUrls;
    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignResponse
     */
    start_time?: number;
    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     * @type {number}
     * @memberof CampaignResponse
     */
    end_time?: number;
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignResponse
     */
    objective_type?: ObjectiveType;
    /**
     * Campaign creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CampaignResponse
     */
    created_time?: number;
    /**
     * UTC timestamp. Last update time.
     * @type {number}
     * @memberof CampaignResponse
     */
    updated_time?: number;
    /**
     * Always \"campaign\".
     * @type {string}
     * @memberof CampaignResponse
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CampaignResponseAllOf = {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CampaignResponseAllOf
     */
    id: string;
}

/**
 * 
 * @export
 */
export type CampaignResponseAllOf1 = {
    /**
     * 
     * @type {ObjectiveType}
     * @memberof CampaignResponseAllOf1
     */
    objective_type?: ObjectiveType;
    /**
     * Campaign creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof CampaignResponseAllOf1
     */
    created_time?: number;
    /**
     * UTC timestamp. Last update time.
     * @type {number}
     * @memberof CampaignResponseAllOf1
     */
    updated_time?: number;
    /**
     * Always \"campaign\".
     * @type {string}
     * @memberof CampaignResponseAllOf1
     */
    type?: string;
}

/**
 * Summary status for campaign
 * @export
 * @enum {string}
 */
export type CampaignSummaryStatus = 'RUNNING' | 'PAUSED' | 'NOT_STARTED' | 'COMPLETED' | 'ADVERTISER_DISABLED' | 'ARCHIVED';

/**
 * 
 * @export
 */
export type CatalogsDbItem = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsDbItem
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsDbItem
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsDbItem
     */
    updated_at?: Date;
}

/**
 * Catalogs Catalogs Feed object
 * @export
 */
export type CatalogsFeed = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeed
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeed
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeed
     */
    updated_at?: Date;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeed
     */
    default_country: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeed
     */
    default_availability: ProductAvailabilityType;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeed
     */
    default_currency: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof CatalogsFeed
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeed
     */
    format: CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsFeed
     */
    default_locale: string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeed
     */
    credentials: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeed
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeed
     */
    preferred_processing_schedule: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeed
     */
    status: CatalogsStatus;
}

/**
 * Use this if your feed file requires username and password.
 * @export
 */
export type CatalogsFeedCredentials = {
    /**
     * The required password for downloading a feed.
     * @type {string}
     * @memberof CatalogsFeedCredentials
     */
    password: string;
    /**
     * The required username for downloading a feed.
     * @type {string}
     * @memberof CatalogsFeedCredentials
     */
    username: string;
}

/**
 * 
 * @export
 */
export type CatalogsFeedIngestionDetails = {
    /**
     * 
     * @type {CatalogsFeedIngestionErrors}
     * @memberof CatalogsFeedIngestionDetails
     */
    errors: CatalogsFeedIngestionErrors;
    /**
     * 
     * @type {CatalogsFeedIngestionInfo}
     * @memberof CatalogsFeedIngestionDetails
     */
    info: CatalogsFeedIngestionInfo;
}


            export type CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum = 1;
/**
 * 
 * @export
 */
export type CatalogsFeedIngestionErrors = {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    image_download_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    image_download_connection_timeout?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    image_format_unrecognize?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    line_level_internal_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    large_product_count_decrease?: CatalogsFeedIngestionErrorsLargeProductCountDecreaseEnum;
}

/**
 * 
 * @export
 */
export type CatalogsFeedIngestionInfo = {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    in_stock?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    out_of_stock?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedIngestionInfo
     */
    preorder?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedProcessingResult = {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeedProcessingResult
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeedProcessingResult
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeedProcessingResult
     */
    updated_at?: Date;
    /**
     * 
     * @type {CatalogsFeedIngestionDetails}
     * @memberof CatalogsFeedProcessingResult
     */
    ingestion_details: CatalogsFeedIngestionDetails;
    /**
     * 
     * @type {CatalogsFeedProcessingStatus}
     * @memberof CatalogsFeedProcessingResult
     */
    status: CatalogsFeedProcessingStatus;
    /**
     * 
     * @type {CatalogsFeedProductCounts}
     * @memberof CatalogsFeedProcessingResult
     */
    product_counts: CatalogsFeedProductCounts;
    /**
     * 
     * @type {CatalogsFeedValidationDetails}
     * @memberof CatalogsFeedProcessingResult
     */
    validation_details: CatalogsFeedValidationDetails;
}

/**
 * 
 * @export
 */
export type CatalogsFeedProcessingResultFields = {
    /**
     * 
     * @type {CatalogsFeedIngestionDetails}
     * @memberof CatalogsFeedProcessingResultFields
     */
    ingestion_details: CatalogsFeedIngestionDetails;
    /**
     * 
     * @type {CatalogsFeedProcessingStatus}
     * @memberof CatalogsFeedProcessingResultFields
     */
    status: CatalogsFeedProcessingStatus;
    /**
     * 
     * @type {CatalogsFeedProductCounts}
     * @memberof CatalogsFeedProcessingResultFields
     */
    product_counts: CatalogsFeedProductCounts;
    /**
     * 
     * @type {CatalogsFeedValidationDetails}
     * @memberof CatalogsFeedProcessingResultFields
     */
    validation_details: CatalogsFeedValidationDetails;
}


            export type CatalogsFeedProcessingScheduleTimezoneEnum = 'Africa/Abidjan' | 'Africa/Accra' | 'Africa/Algiers' | 'Africa/Bissau' | 'Africa/Cairo' | 'Africa/Casablanca' | 'Africa/Ceuta' | 'Africa/El_Aaiun' | 'Africa/Johannesburg' | 'Africa/Juba' | 'Africa/Khartoum' | 'Africa/Lagos' | 'Africa/Maputo' | 'Africa/Monrovia' | 'Africa/Nairobi' | 'Africa/Ndjamena' | 'Africa/Sao_Tome' | 'Africa/Tripoli' | 'Africa/Tunis' | 'Africa/Windhoek' | 'America/Adak' | 'America/Anchorage' | 'America/Araguaina' | 'America/Argentina/Buenos_Aires' | 'America/Argentina/Catamarca' | 'America/Argentina/Cordoba' | 'America/Argentina/Jujuy' | 'America/Argentina/La_Rioja' | 'America/Argentina/Mendoza' | 'America/Argentina/Rio_Gallegos' | 'America/Argentina/Salta' | 'America/Argentina/San_Juan' | 'America/Argentina/San_Luis' | 'America/Argentina/Tucuman' | 'America/Argentina/Ushuaia' | 'America/Asuncion' | 'America/Atikokan' | 'America/Bahia' | 'America/Bahia_Banderas' | 'America/Barbados' | 'America/Belem' | 'America/Belize' | 'America/Blanc-Sablon' | 'America/Boa_Vista' | 'America/Bogota' | 'America/Boise' | 'America/Cambridge_Bay' | 'America/Campo_Grande' | 'America/Cancun' | 'America/Caracas' | 'America/Cayenne' | 'America/Chicago' | 'America/Chihuahua' | 'America/Costa_Rica' | 'America/Creston' | 'America/Cuiaba' | 'America/Curacao' | 'America/Danmarkshavn' | 'America/Dawson' | 'America/Dawson_Creek' | 'America/Denver' | 'America/Detroit' | 'America/Edmonton' | 'America/Eirunepe' | 'America/El_Salvador' | 'America/Fort_Nelson' | 'America/Fortaleza' | 'America/Glace_Bay' | 'America/Goose_Bay' | 'America/Grand_Turk' | 'America/Guatemala' | 'America/Guayaquil' | 'America/Guyana' | 'America/Halifax' | 'America/Havana' | 'America/Hermosillo' | 'America/Indiana/Indianapolis' | 'America/Indiana/Knox' | 'America/Indiana/Marengo' | 'America/Indiana/Petersburg' | 'America/Indiana/Tell_City' | 'America/Indiana/Vevay' | 'America/Indiana/Vincennes' | 'America/Indiana/Winamac' | 'America/Inuvik' | 'America/Iqaluit' | 'America/Jamaica' | 'America/Juneau' | 'America/Kentucky/Louisville' | 'America/Kentucky/Monticello' | 'America/La_Paz' | 'America/Lima' | 'America/Los_Angeles' | 'America/Maceio' | 'America/Managua' | 'America/Manaus' | 'America/Martinique' | 'America/Matamoros' | 'America/Mazatlan' | 'America/Menominee' | 'America/Merida' | 'America/Metlakatla' | 'America/Mexico_City' | 'America/Miquelon' | 'America/Moncton' | 'America/Monterrey' | 'America/Montevideo' | 'America/Nassau' | 'America/New_York' | 'America/Nipigon' | 'America/Nome' | 'America/Noronha' | 'America/North_Dakota/Beulah' | 'America/North_Dakota/Center' | 'America/North_Dakota/New_Salem' | 'America/Nuuk' | 'America/Ojinaga' | 'America/Panama' | 'America/Pangnirtung' | 'America/Paramaribo' | 'America/Phoenix' | 'America/Port-au-Prince' | 'America/Port_of_Spain' | 'America/Porto_Velho' | 'America/Puerto_Rico' | 'America/Punta_Arenas' | 'America/Rainy_River' | 'America/Rankin_Inlet' | 'America/Recife' | 'America/Regina' | 'America/Resolute' | 'America/Rio_Branco' | 'America/Santarem' | 'America/Santiago' | 'America/Santo_Domingo' | 'America/Sao_Paulo' | 'America/Scoresbysund' | 'America/Sitka' | 'America/St_Johns' | 'America/Swift_Current' | 'America/Tegucigalpa' | 'America/Thule' | 'America/Thunder_Bay' | 'America/Tijuana' | 'America/Toronto' | 'America/Vancouver' | 'America/Whitehorse' | 'America/Winnipeg' | 'America/Yakutat' | 'America/Yellowknife' | 'Antarctica/Casey' | 'Antarctica/Davis' | 'Antarctica/DumontDUrville' | 'Antarctica/Macquarie' | 'Antarctica/Mawson' | 'Antarctica/Palmer' | 'Antarctica/Rothera' | 'Antarctica/Syowa' | 'Antarctica/Troll' | 'Antarctica/Vostok' | 'Asia/Almaty' | 'Asia/Amman' | 'Asia/Anadyr' | 'Asia/Aqtau' | 'Asia/Aqtobe' | 'Asia/Ashgabat' | 'Asia/Atyrau' | 'Asia/Baghdad' | 'Asia/Baku' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Beirut' | 'Asia/Bishkek' | 'Asia/Brunei' | 'Asia/Chita' | 'Asia/Choibalsan' | 'Asia/Colombo' | 'Asia/Damascus' | 'Asia/Dhaka' | 'Asia/Dili' | 'Asia/Dubai' | 'Asia/Dushanbe' | 'Asia/Famagusta' | 'Asia/Gaza' | 'Asia/Hebron' | 'Asia/Ho_Chi_Minh' | 'Asia/Hong_Kong' | 'Asia/Hovd' | 'Asia/Irkutsk' | 'Asia/Jakarta' | 'Asia/Jayapura' | 'Asia/Jerusalem' | 'Asia/Kabul' | 'Asia/Kamchatka' | 'Asia/Karachi' | 'Asia/Kathmandu' | 'Asia/Khandyga' | 'Asia/Kolkata' | 'Asia/Krasnoyarsk' | 'Asia/Kuala_Lumpur' | 'Asia/Kuching' | 'Asia/Macau' | 'Asia/Magadan' | 'Asia/Makassar' | 'Asia/Manila' | 'Asia/Nicosia' | 'Asia/Novokuznetsk' | 'Asia/Novosibirsk' | 'Asia/Omsk' | 'Asia/Oral' | 'Asia/Pontianak' | 'Asia/Pyongyang' | 'Asia/Qatar' | 'Asia/Qostanay' | 'Asia/Qyzylorda' | 'Asia/Riyadh' | 'Asia/Sakhalin' | 'Asia/Samarkand' | 'Asia/Seoul' | 'Asia/Shanghai' | 'Asia/Singapore' | 'Asia/Srednekolymsk' | 'Asia/Taipei' | 'Asia/Tashkent' | 'Asia/Tbilisi' | 'Asia/Tehran' | 'Asia/Thimphu' | 'Asia/Tokyo' | 'Asia/Tomsk' | 'Asia/Ulaanbaatar' | 'Asia/Urumqi' | 'Asia/Ust-Nera' | 'Asia/Vladivostok' | 'Asia/Yakutsk' | 'Asia/Yangon' | 'Asia/Yekaterinburg' | 'Asia/Yerevan' | 'Atlantic/Azores' | 'Atlantic/Bermuda' | 'Atlantic/Canary' | 'Atlantic/Cape_Verde' | 'Atlantic/Faroe' | 'Atlantic/Madeira' | 'Atlantic/Reykjavik' | 'Atlantic/South_Georgia' | 'Atlantic/Stanley' | 'Australia/Adelaide' | 'Australia/Brisbane' | 'Australia/Broken_Hill' | 'Australia/Currie' | 'Australia/Darwin' | 'Australia/Eucla' | 'Australia/Hobart' | 'Australia/Lindeman' | 'Australia/Lord_Howe' | 'Australia/Melbourne' | 'Australia/Perth' | 'Australia/Sydney' | 'CET' | 'CST6CDT' | 'EET' | 'EST' | 'EST5EDT' | 'Etc/GMT' | 'Etc/GMT+1' | 'Etc/GMT+10' | 'Etc/GMT+11' | 'Etc/GMT+12' | 'Etc/GMT+2' | 'Etc/GMT+3' | 'Etc/GMT+4' | 'Etc/GMT+5' | 'Etc/GMT+6' | 'Etc/GMT+7' | 'Etc/GMT+8' | 'Etc/GMT+9' | 'Etc/GMT-1' | 'Etc/GMT-10' | 'Etc/GMT-11' | 'Etc/GMT-12' | 'Etc/GMT-13' | 'Etc/GMT-14' | 'Etc/GMT-2' | 'Etc/GMT-3' | 'Etc/GMT-4' | 'Etc/GMT-5' | 'Etc/GMT-6' | 'Etc/GMT-7' | 'Etc/GMT-8' | 'Etc/GMT-9' | 'Etc/UTC' | 'Europe/Amsterdam' | 'Europe/Andorra' | 'Europe/Astrakhan' | 'Europe/Athens' | 'Europe/Belgrade' | 'Europe/Berlin' | 'Europe/Brussels' | 'Europe/Bucharest' | 'Europe/Budapest' | 'Europe/Chisinau' | 'Europe/Copenhagen' | 'Europe/Dublin' | 'Europe/Gibraltar' | 'Europe/Helsinki' | 'Europe/Istanbul' | 'Europe/Kaliningrad' | 'Europe/Kiev' | 'Europe/Kirov' | 'Europe/Lisbon' | 'Europe/London' | 'Europe/Luxembourg' | 'Europe/Madrid' | 'Europe/Malta' | 'Europe/Minsk' | 'Europe/Monaco' | 'Europe/Moscow' | 'Europe/Oslo' | 'Europe/Paris' | 'Europe/Prague' | 'Europe/Riga' | 'Europe/Rome' | 'Europe/Samara' | 'Europe/Saratov' | 'Europe/Simferopol' | 'Europe/Sofia' | 'Europe/Stockholm' | 'Europe/Tallinn' | 'Europe/Tirane' | 'Europe/Ulyanovsk' | 'Europe/Uzhgorod' | 'Europe/Vienna' | 'Europe/Vilnius' | 'Europe/Volgograd' | 'Europe/Warsaw' | 'Europe/Zaporozhye' | 'Europe/Zurich' | 'HST' | 'Indian/Chagos' | 'Indian/Christmas' | 'Indian/Cocos' | 'Indian/Kerguelen' | 'Indian/Mahe' | 'Indian/Maldives' | 'Indian/Mauritius' | 'Indian/Reunion' | 'MET' | 'MST' | 'MST7MDT' | 'PST8PDT' | 'Pacific/Apia' | 'Pacific/Auckland' | 'Pacific/Bougainville' | 'Pacific/Chatham' | 'Pacific/Chuuk' | 'Pacific/Easter' | 'Pacific/Efate' | 'Pacific/Enderbury' | 'Pacific/Fakaofo' | 'Pacific/Fiji' | 'Pacific/Funafuti' | 'Pacific/Galapagos' | 'Pacific/Gambier' | 'Pacific/Guadalcanal' | 'Pacific/Guam' | 'Pacific/Honolulu' | 'Pacific/Kiritimati' | 'Pacific/Kosrae' | 'Pacific/Kwajalein' | 'Pacific/Majuro' | 'Pacific/Marquesas' | 'Pacific/Nauru' | 'Pacific/Niue' | 'Pacific/Norfolk' | 'Pacific/Noumea' | 'Pacific/Pago_Pago' | 'Pacific/Palau' | 'Pacific/Pitcairn' | 'Pacific/Pohnpei' | 'Pacific/Port_Moresby' | 'Pacific/Rarotonga' | 'Pacific/Tahiti' | 'Pacific/Tarawa' | 'Pacific/Tongatapu' | 'Pacific/Wake' | 'Pacific/Wallis' | 'WET' | 'null';
/**
 * Optional daily processing schedule. Use this to configure the preferred time for processing a feed (otherwise random).
 * @export
 */
export type CatalogsFeedProcessingSchedule = {
    /**
     * A time in format HH:MM with leading 0 (zero)
     * @type {string}
     * @memberof CatalogsFeedProcessingSchedule
     */
    time: string;
    /**
     * The timezone considered for the processing schedule time.
     * @type {string}
     * @memberof CatalogsFeedProcessingSchedule
     */
    timezone: CatalogsFeedProcessingScheduleTimezoneEnum;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type CatalogsFeedProcessingStatus = 'COMPLETED' | 'COMPLETED_EARLY' | 'DISAPPROVED' | 'FAILED' | 'PROCESSING' | 'QUEUED_FOR_PROCESSING' | 'UNDER_APPEAL' | 'UNDER_REVIEW';

/**
 * The counts can be null early in the process.
 * @export
 */
export type CatalogsFeedProductCounts = {
    /**
     * The number of products in the feed file
     * @type {number}
     * @memberof CatalogsFeedProductCounts
     */
    original?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedValidationDetails = {
    /**
     * 
     * @type {CatalogsFeedValidationErrors}
     * @memberof CatalogsFeedValidationDetails
     */
    errors: CatalogsFeedValidationErrors;
    /**
     * 
     * @type {CatalogsFeedValidationWarnings}
     * @memberof CatalogsFeedValidationDetails
     */
    warnings: CatalogsFeedValidationWarnings;
}

/**
 * 
 * @export
 */
export type CatalogsFeedValidationErrors = {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    fetch_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    fetch_inactive_feed_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    encoding_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    delimiter_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    required_columns_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    image_link_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    itemid_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    title_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    description_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    product_category_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    product_link_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    image_link_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    availability_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    product_price_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    link_format_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    parse_line_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    adwords_format_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    product_category_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    internal_service_error?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    no_verified_domain?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    adult_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    invalid_domain?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    feed_length_too_long?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    link_length_too_long?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    malformed_xml?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    redirect_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    price_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    feed_too_small?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    condition_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    shopify_no_products?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    max_items_per_item_group_exceeded?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    item_main_image_download_failure?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    pinjoin_content_unsafe?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationErrors
     */
    blocklisted_image_signature?: number;
}

/**
 * 
 * @export
 */
export type CatalogsFeedValidationWarnings = {
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    title_length_too_long?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    description_length_too_long?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    gender_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    age_group_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    size_type_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    link_format_warning?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    duplicate_products?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    duplicate_links?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    sales_price_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    product_category_depth_warning?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    adwords_same_as_link?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    duplicate_headers?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    fetch_same_signature?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    adwords_format_warning?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    additional_image_link_warning?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    image_link_warning?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    shipping_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    tax_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    shipping_weight_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    expiration_date_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    availability_date_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    sale_date_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    weight_unit_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    is_bundle_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    updated_time_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    custom_label_length_too_long?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    product_type_length_too_long?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    too_many_additional_image_links?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    multipack_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    indexed_product_count_large_delta?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    item_additional_image_download_failure?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    optional_product_category_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    optional_product_category_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    optional_condition_missing?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    optional_condition_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    ios_deep_link_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    android_deep_link_invalid?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    availability_normalized?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    condition_normalized?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    gender_normalized?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    size_type_normalized?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    age_group_normalized?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    utm_source_auto_corrected?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    country_does_not_map_to_currency?: number;
    /**
     * 
     * @type {number}
     * @memberof CatalogsFeedValidationWarnings
     */
    min_ad_price_invalid?: number;
}

/**
 * Request object for creating a feed. Please, be aware that \"default_country\" and \"default_locale\" are not required in the spec for forward compatibility but for now the API will not accept requests without those fields.
 * @export
 */
export type CatalogsFeedsCreateRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_country?: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_availability?: ProductAvailabilityType;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeedsCreateRequest
     */
    format: CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    default_locale?: string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeedsCreateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeedsCreateRequest
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeedsCreateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
}

/**
 * Request object for updating a feed.
 * @export
 */
export type CatalogsFeedsUpdateRequest = {
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeedsUpdateRequest
     */
    default_availability?: ProductAvailabilityType;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeedsUpdateRequest
     */
    default_currency?: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed.
     * @type {string}
     * @memberof CatalogsFeedsUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeedsUpdateRequest
     */
    format?: CatalogsFormat;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeedsUpdateRequest
     */
    credentials?: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeedsUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeedsUpdateRequest
     */
    preferred_processing_schedule?: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeedsUpdateRequest
     */
    status?: CatalogsStatus;
}

/**
 * The file format of a feed.
 * @export
 * @enum {string}
 */
export type CatalogsFormat = 'TSV' | 'CSV' | 'XML';

/**
 * Response object of catalogs items
 * @export
 */
export type CatalogsItems = {
    /**
     * Array with catalogs items
     * @type {Array<ItemBatchRecord>}
     * @memberof CatalogsItems
     */
    items?: Array<ItemBatchRecord>;
}

/**
 * Object describing the catalogs items batch
 * @export
 */
export type CatalogsItemsBatch = {
    /**
     * Array with the catalogs items processing records part of the catalogs items batch
     * @type {Array<ItemProcessingRecord>}
     * @memberof CatalogsItemsBatch
     */
    items?: Array<ItemProcessingRecord>;
    /**
     * Id of the catalogs items batch
     * @type {string}
     * @memberof CatalogsItemsBatch
     */
    batch_id?: string;
    /**
     * Time of the batch creation: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsItemsBatch
     */
    created_time?: Date;
    /**
     * Time of the batch completion: YYYY-MM-DD\'T\'hh:mm:ssTZD
     * @type {Date}
     * @memberof CatalogsItemsBatch
     */
    completed_time?: Date;
    /**
     * 
     * @type {BatchOperationStatus}
     * @memberof CatalogsItemsBatch
     */
    status?: BatchOperationStatus;
}

/**
 * Request object of catalogs items batch
 * @export
 */
export type CatalogsItemsBatchRequest = {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsBatchRequest
     */
    country?: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsBatchRequest
     */
    language?: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsBatchRequest
     */
    operation?: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemBatchRecord>}
     * @memberof CatalogsItemsBatchRequest
     */
    items?: Array<ItemBatchRecord>;
}

/**
 * catalog product group entity
 * @export
 */
export type CatalogsProductGroup = {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroup
     */
    filters: CatalogsProductGroupFilters;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsProductGroup
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsProductGroup
     */
    status?: CatalogsProductGroupStatus;
    /**
     * id of the catalogs feed belonging to this catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    feed_id?: string;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    created_at?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    updated_at?: number;
}

/**
 * Request object for creating a product group.
 * @export
 */
export type CatalogsProductGroupCreateRequest = {
    /**
     * Catalog Feed id pertaining to the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    feed_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroupCreateRequest
     */
    filters: CatalogsProductGroupFilters;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupCurrencyCriteria = {
    /**
     * 
     * @type {NonNullableCatalogsCurrency}
     * @memberof CatalogsProductGroupCurrencyCriteria
     */
    values: NonNullableCatalogsCurrency;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupCurrencyCriteria
     */
    negated: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFilterKeys = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    MIN_PRICE: CatalogsProductGroupPricingCriteria;
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    MAX_PRICE: CatalogsProductGroupPricingCriteria;
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CURRENCY: CatalogsProductGroupCurrencyCriteria;
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    ITEM_ID: CatalogsProductGroupCurrencyCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    AVAILABILITY: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    BRAND: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CONDITION: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_0: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_1: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_2: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_3: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    CUSTOM_LABEL_4: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    ITEM_GROUP_ID: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GENDER: CatalogsProductGroupMultipleStringCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_4: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_3: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_2: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_1: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    PRODUCT_TYPE_0: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_6: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_5: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_4: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_3: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_2: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_1: CatalogsProductGroupMultipleStringListCriteria;
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof CatalogsProductGroupFilterKeys
     */
    GOOGLE_PRODUCT_CATEGORY_0: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * Object holding a group of filters for a catalog product group
 * @export
 */
export type CatalogsProductGroupFilters = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFilters
     */
    any_of?: Array<CatalogsProductGroupFilterKeys>;
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFilters
     */
    all_of?: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFiltersAllOf = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersAllOf
     */
    all_of?: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupFiltersAnyOf = {
    /**
     * 
     * @type {Array<CatalogsProductGroupFilterKeys>}
     * @memberof CatalogsProductGroupFiltersAnyOf
     */
    any_of?: Array<CatalogsProductGroupFilterKeys>;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupMultipleStringCriteria = {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogsProductGroupMultipleStringCriteria
     */
    values: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleStringCriteria
     */
    negated: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupMultipleStringListCriteria = {
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof CatalogsProductGroupMultipleStringListCriteria
     */
    values: Array<Array<string>>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupMultipleStringListCriteria
     */
    negated: boolean;
}

/**
 * 
 * @export
 */
export type CatalogsProductGroupPricingCriteria = {
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    inclusion: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    values: number;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogsProductGroupPricingCriteria
     */
    negated: boolean;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type CatalogsProductGroupStatus = 'ACTIVE' | 'INACTIVE';

/**
 * Catalog product group type
 * @export
 * @enum {string}
 */
export type CatalogsProductGroupType = 'MERCHANT_CREATED' | 'ALL_PRODUCTS' | 'BEST_DEALS' | 'PINNER_FAVORITES' | 'TOP_SELLERS' | 'BACK_IN_STOCK' | 'NEW_ARRIVALS';

/**
 * Request object for updating a product group.
 * @export
 */
export type CatalogsProductGroupUpdateRequest = {
    /**
     * Catalog Feed id pertaining to the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    feed_id: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroupUpdateRequest
     */
    filters: CatalogsProductGroupFilters;
}

/**
 * Status for catalogs entities. Present in catalogs_feed values. When a feed is deleted, the response will inform DELETED as status.
 * @export
 * @enum {string}
 */
export type CatalogsStatus = 'ACTIVE' | 'INACTIVE';

/**
 * 
 * @export
 */
export type ConditionFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ConditionFilter
     */
    CONDITION: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type ConversionAttributionWindowDays = 1 | 7 | 30 | 60;

/**
 * Attribution type. Refers to the Pinterest Tag endpoints
 * @export
 * @enum {string}
 */
export type ConversionReportAttributionType = 'INDIVIDUAL' | 'HOUSEHOLD';

/**
 * Conversion report time type
 * @export
 * @enum {string}
 */
export type ConversionReportTimeType = 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION';

/**
 * Country ID from ISO 3166-1 alpha-2.
 * @export
 * @enum {string}
 */
export type Country = 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AS' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FM' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MH' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MP' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PW' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VI' | 'VN' | 'VU' | 'WF' | 'WS' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW';

/**
 * Currency Codes from ISO 4217
 * @export
 * @enum {string}
 */
export type Currency = 'UNK' | 'USD' | 'GBP' | 'CAD' | 'EUR' | 'AUD' | 'NZD' | 'SEK' | 'ILS' | 'CHF' | 'HKD' | 'JPY' | 'SGD' | 'KRW' | 'NOK' | 'DKK' | 'PLN' | 'RON' | 'HUF' | 'CZK' | 'BRL' | 'MXN' | 'ARS' | 'CLP' | 'COP';

/**
 * 
 * @export
 */
export type CurrencyFilter = {
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof CurrencyFilter
     */
    CURRENCY: CatalogsProductGroupCurrencyCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel0Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel0Filter
     */
    CUSTOM_LABEL_0: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel1Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel1Filter
     */
    CUSTOM_LABEL_1: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel2Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel2Filter
     */
    CUSTOM_LABEL_2: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel3Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel3Filter
     */
    CUSTOM_LABEL_3: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type CustomLabel4Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof CustomLabel4Filter
     */
    CUSTOM_LABEL_4: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * Format of generated report
 * @export
 * @enum {string}
 */
export type DataOutputFormat = 'JSON' | 'CSV';

/**
 * Entity status
 * @export
 * @enum {string}
 */
export type EntityStatus = 'ACTIVE' | 'PAUSED' | 'ARCHIVED';

/**
 * 
 * @export
 */
export type Error = {
    /**
     * 
     * @type {number}
     * @memberof Error
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    message: string;
}

/**
 * 
 * @export
 */
export type FeedFields = {
    /**
     * 
     * @type {Country}
     * @memberof FeedFields
     */
    default_country: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof FeedFields
     */
    default_availability: ProductAvailabilityType;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof FeedFields
     */
    default_currency: NullableCurrency;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof FeedFields
     */
    name: string;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof FeedFields
     */
    format: CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof FeedFields
     */
    default_locale: string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof FeedFields
     */
    credentials: CatalogsFeedCredentials;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof FeedFields
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof FeedFields
     */
    preferred_processing_schedule: CatalogsFeedProcessingSchedule;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof FeedFields
     */
    status: CatalogsStatus;
}

/**
 * 
 * @export
 */
export type GenderFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof GenderFilter
     */
    GENDER: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory0Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory0Filter
     */
    GOOGLE_PRODUCT_CATEGORY_0: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory1Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory1Filter
     */
    GOOGLE_PRODUCT_CATEGORY_1: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory2Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory2Filter
     */
    GOOGLE_PRODUCT_CATEGORY_2: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory3Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory3Filter
     */
    GOOGLE_PRODUCT_CATEGORY_3: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory4Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory4Filter
     */
    GOOGLE_PRODUCT_CATEGORY_4: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory5Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory5Filter
     */
    GOOGLE_PRODUCT_CATEGORY_5: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type GoogleProductCategory6Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof GoogleProductCategory6Filter
     */
    GOOGLE_PRODUCT_CATEGORY_6: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type Granularity = 'TOTAL' | 'DAY' | 'HOUR' | 'WEEK' | 'MONTH';

/**
 * 
 * @export
 */
export type ImageDetails = {
    /**
     * 
     * @type {number}
     * @memberof ImageDetails
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof ImageDetails
     */
    height: number;
    /**
     * 
     * @type {string}
     * @memberof ImageDetails
     */
    url: string;
}

/**
 * 
 * @export
 */
export type ItemAttributes = {
    /**
     * Allows advertisers to specify a separate URL that can be used to track traffic coming from Pinterest shopping ads. Must send full URL including tracking—do not send tracking parameters only. At this time we do not support impression tracking. Must begin with http:// or https://.
     * @type {string}
     * @memberof ItemAttributes
     */
    ad_link?: string;
    /**
     * The links to additional images for your product. Up to five additional images can be used to show a product from different angles or to show different stages. Separate each additional image with a comma. We recommend enclosing the whole string with quotes. Must begin with http:// or https://
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    additional_image_link?: Array<string>;
    /**
     * Set this attribute to TRUE if you\'re submitting items that are considered “adult”. These will not be shown on Pinterest.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    adult?: boolean;
    /**
     * The age group to apply a demographic range to the product. Must be one of the following values: ‘newborn’, ‘infant’, ‘toddler’, ‘kids’, ‘adult’.
     * @type {string}
     * @memberof ItemAttributes
     */
    age_group?: string;
    /**
     * The availability of the product. Must be one of the following values: ‘in stock’, ‘out of stock’, ‘preorder’.
     * @type {string}
     * @memberof ItemAttributes
     */
    availability?: string;
    /**
     * Average reviews for the item. Can be a number from 1-5.
     * @type {number}
     * @memberof ItemAttributes
     */
    average_review_rating?: number;
    /**
     * The brand of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    brand?: string;
    /**
     * The primary color of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    color?: string;
    /**
     * The condition of the product. Must be one of the following values: ‘new’, ‘used’, ‘refurbished’.
     * @type {string}
     * @memberof ItemAttributes
     */
    condition?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_0?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_1?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_2?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_3?: string;
    /**
     * Custom grouping of products.
     * @type {string}
     * @memberof ItemAttributes
     */
    custom_label_4?: string;
    /**
     * The description of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    description?: string;
    /**
     * The item is free to ship.
     * @type {boolean}
     * @memberof ItemAttributes
     */
    free_shipping_label?: boolean;
    /**
     * The minimum order purchase necessary for the customer to get free shipping. Only relevant if free shipping is offered.
     * @type {string}
     * @memberof ItemAttributes
     */
    free_shipping_limit?: string;
    /**
     * The gender associated with the product. Must be one of the following values: ‘male’, ‘female’, ‘unisex’.
     * @type {string}
     * @memberof ItemAttributes
     */
    gender?: string;
    /**
     * The categorization of the product based on the standardized Google Product Taxonomy. This is a set taxonomy. Both the text values and numeric codes are accepted.
     * @type {string}
     * @memberof ItemAttributes
     */
    google_product_category?: string;
    /**
     * The unique universal product identifier.
     * @type {number}
     * @memberof ItemAttributes
     */
    gtin?: number;
    /**
     * The user-created unique ID that represents the product. Only Unicode characters are accepted.
     * @type {string}
     * @memberof ItemAttributes
     */
    id?: string;
    /**
     * The link to the main product images. Images should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your product. The URL of your image_link must be accessible by the Pinterest user-agent, and send the accurate images. Please make sure there are no template or placeholder images at the link. Must start with http:// or https://
     * @type {Array<string>}
     * @memberof ItemAttributes
     */
    image_link?: Array<string>;
    /**
     * The parent ID of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    item_group_id?: string;
    /**
     * The millisecond timestamp when the item was lastly modified by the merchant.
     * @type {number}
     * @memberof ItemAttributes
     */
    last_updated_time?: number;
    /**
     * The landing page for the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    link?: string;
    /**
     * The material used to make the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    material?: string;
    /**
     * The minimum advertised price of the product. It supports the following formats, \"19.99 USD\", \"19.99USD\" and \"19.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    min_ad_price?: string;
    /**
     * The mobile-optimized version of your landing page. Must begin with http:// or https://.
     * @type {string}
     * @memberof ItemAttributes
     */
    mobile_link?: string;
    /**
     * Manufacturer Part Number are alpha-numeric codes created by the manufacturer of a product to uniquely identify it among all products from the same manufacturer.
     * @type {string}
     * @memberof ItemAttributes
     */
    mpn?: string;
    /**
     * The number of ratings for the item.
     * @type {number}
     * @memberof ItemAttributes
     */
    number_of_ratings?: number;
    /**
     * The number of reviews available for the item.
     * @type {number}
     * @memberof ItemAttributes
     */
    number_of_reviews?: number;
    /**
     * The description of the pattern used for the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    pattern?: string;
    /**
     * The price of the product. It supports the following formats, \"24.99 USD\", \"24.99USD\" and \"24.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    price?: string;
    /**
     * The categorization of your product based on your custom product taxonomy. Subcategories must be sent separated by “ > “. The > must be wrapped by spaces. We do not recognize any other delimiters such as comma or pipe.
     * @type {string}
     * @memberof ItemAttributes
     */
    product_type?: string;
    /**
     * The discounted price of the product. The sale_price must be lower than the price. It supports the following formats, \"14.99 USD\", \"14.99USD\" and \"14.99\". If the currency is not included, we default to US dollars.
     * @type {string}
     * @memberof ItemAttributes
     */
    sale_price?: string;
    /**
     * Shipping consists of one group of up to four elements, country, region, service (all optional) and price (required). All colons, even for blank values, are required.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping?: string;
    /**
     * The height of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping_height?: string;
    /**
     * The weight of the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping_weight?: string;
    /**
     * The width of the package needed to ship the product. Ensure there is a space between the numeric string and the metric.
     * @type {string}
     * @memberof ItemAttributes
     */
    shipping_width?: string;
    /**
     * The size of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    size?: string;
    /**
     * Indicates the country’s sizing system in which you are submitting your product.
     * @type {string}
     * @memberof ItemAttributes
     */
    size_system?: string;
    /**
     * Additional description for the size. Must be one of the following values: ‘regular’, ‘petite’, ‘plus’, ‘big_and_tall’, ‘maternity’.
     * @type {string}
     * @memberof ItemAttributes
     */
    size_type?: string;
    /**
     * Tax consists of one group of up to four elements, country, region, rate (all required) and tax_ship (optional). All colons, even for blank values, are required.
     * @type {string}
     * @memberof ItemAttributes
     */
    tax?: string;
    /**
     * The name of the product.
     * @type {string}
     * @memberof ItemAttributes
     */
    title?: string;
}

/**
 * Object describing an item batch record
 * @export
 */
export type ItemBatchRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemBatchRecord
     */
    item_id?: string;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof ItemBatchRecord
     */
    attributes?: ItemAttributes;
}

/**
 * 
 * @export
 */
export type ItemGroupIdFilter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringCriteria}
     * @memberof ItemGroupIdFilter
     */
    ITEM_GROUP_ID: CatalogsProductGroupMultipleStringCriteria;
}

/**
 * 
 * @export
 */
export type ItemIdFilter = {
    /**
     * 
     * @type {CatalogsProductGroupCurrencyCriteria}
     * @memberof ItemIdFilter
     */
    ITEM_ID: CatalogsProductGroupCurrencyCriteria;
}

/**
 * Object describing an item processing record
 * @export
 */
export type ItemProcessingRecord = {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof ItemProcessingRecord
     */
    item_id?: string;
    /**
     * Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemProcessingRecord
     */
    errors?: Array<ItemValidationEvent>;
    /**
     * Array with the validation warnings for the item processing record
     * @type {Array<ItemValidationEvent>}
     * @memberof ItemProcessingRecord
     */
    warnings?: Array<ItemValidationEvent>;
    /**
     * 
     * @type {ItemProcessingStatus}
     * @memberof ItemProcessingRecord
     */
    status?: ItemProcessingStatus;
}

/**
 * The status of the item processing record
 * @export
 * @enum {string}
 */
export type ItemProcessingStatus = 'SUCCESS' | 'FAILURE' | 'PROCESSING';

/**
 * Object describing an item validation event
 * @export
 */
export type ItemValidationEvent = {
    /**
     * The attribute that the item validation event references
     * @type {string}
     * @memberof ItemValidationEvent
     */
    attribute?: string;
    /**
     * The event code that the item validation event references
     * @type {number}
     * @memberof ItemValidationEvent
     */
    code?: number;
    /**
     * Title message describing the item validation event
     * @type {string}
     * @memberof ItemValidationEvent
     */
    message?: string;
}

/**
 * Language code, which is among the offical ISO 639-1 language list.
 * @export
 * @enum {string}
 */
export type Language = 'AM' | 'AR' | 'AZ' | 'BG' | 'BN' | 'BS' | 'CA' | 'CS' | 'DA' | 'DV' | 'DZ' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'FA' | 'FI' | 'FR' | 'HE' | 'HI' | 'HR' | 'HU' | 'HY' | 'ID' | 'IN' | 'IS' | 'IT' | 'IW' | 'JA' | 'KA' | 'KM' | 'KO' | 'LO' | 'LT' | 'LV' | 'MK' | 'MN' | 'MS' | 'MY' | 'NB' | 'NE' | 'NL' | 'NO' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SQ' | 'SR' | 'SV' | 'TL' | 'UK' | 'VI' | 'TE' | 'TH' | 'TR' | 'XX' | 'ZH';

/**
 * 
 * @export
 */
export type MaxPriceFilter = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof MaxPriceFilter
     */
    MAX_PRICE: CatalogsProductGroupPricingCriteria;
}

/**
 * Media upload that has been registered but not uploaded/processed yet.
 * @export
 */
export type MediaUpload = {
    /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     * @type {string}
     * @memberof MediaUpload
     */
    media_id?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUpload
     */
    media_type?: MediaUploadType;
    /**
     * The URL where you will POST your media file.
     * @type {string}
     * @memberof MediaUpload
     */
    upload_url?: string;
    /**
     * 
     * @type {MediaUploadAllOfUploadParameters}
     * @memberof MediaUpload
     */
    upload_parameters?: MediaUploadAllOfUploadParameters;
}

/**
 * 
 * @export
 */
export type MediaUploadAllOf = {
    /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     * @type {string}
     * @memberof MediaUploadAllOf
     */
    media_id?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadAllOf
     */
    media_type?: MediaUploadType;
    /**
     * The URL where you will POST your media file.
     * @type {string}
     * @memberof MediaUploadAllOf
     */
    upload_url?: string;
    /**
     * 
     * @type {MediaUploadAllOfUploadParameters}
     * @memberof MediaUploadAllOf
     */
    upload_parameters?: MediaUploadAllOfUploadParameters;
}

/**
 * The list of parameter key/value pairs you will need to send with your POST request to upload your media file.
 * @export
 */
export type MediaUploadAllOfUploadParameters = {
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_date?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_signature?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_security_token?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_algorithm?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    policy?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    x_amz_credential?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUploadAllOfUploadParameters
     */
    Content_Type?: string;
}

/**
 * Media upload details
 * @export
 */
export type MediaUploadDetails = {
    /**
     * 
     * @type {string}
     * @memberof MediaUploadDetails
     */
    media_id?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadDetails
     */
    media_type?: MediaUploadType;
    /**
     * 
     * @type {MediaUploadStatus}
     * @memberof MediaUploadDetails
     */
    status?: MediaUploadStatus;
}

/**
 * Media upload request
 * @export
 */
export type MediaUploadRequest = {
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUploadRequest
     */
    media_type: MediaUploadType;
}

/**
 * Media upload status
 * @export
 * @enum {string}
 */
export type MediaUploadStatus = 'registered' | 'processing' | 'succeeded' | 'failed';

/**
 * 
 * @export
 * @enum {string}
 */
export type MediaUploadType = 'video';

/**
 * Level of the reporting request
 * @export
 * @enum {string}
 */
export type MetricsReportingLevel = 'ADVERTISER' | 'ADVERTISER_TARGETING' | 'CAMPAIGN' | 'CAMPAIGN_TARGETING' | 'AD_GROUP' | 'AD_GROUP_TARGETING' | 'PIN_PROMOTION' | 'PIN_PROMOTION_TARGETING' | 'KEYWORD' | 'PRODUCT_GROUP' | 'PRODUCT_GROUP_TARGETING' | 'PRODUCT_ITEM';

/**
 * 
 * @export
 */
export type MinPriceFilter = {
    /**
     * 
     * @type {CatalogsProductGroupPricingCriteria}
     * @memberof MinPriceFilter
     */
    MIN_PRICE: CatalogsProductGroupPricingCriteria;
}

/**
 * Currency Codes from ISO 4217.
 * @export
 * @enum {string}
 */
export type NonNullableCatalogsCurrency = 'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BYR' | 'BZD' | 'CAD' | 'CDF' | 'CHF' | 'CLP' | 'CNY' | 'COP' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GGP' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'IMP' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JEP' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRO' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SPL' | 'SRD' | 'STD' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TVD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'UYU' | 'UZS' | 'VEF' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XCD' | 'XDR' | 'XOF' | 'XPF' | 'YER' | 'ZAR' | 'ZMW' | 'ZWD';

/**
 * Currency Codes from ISO 4217.
 * @export
 * @enum {string}
 */
export type NullableCurrency = 'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BYR' | 'BZD' | 'CAD' | 'CDF' | 'CHF' | 'CLP' | 'CNY' | 'COP' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GGP' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'IMP' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JEP' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRO' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SPL' | 'SRD' | 'STD' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TVD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'UYU' | 'UZS' | 'VEF' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XCD' | 'XDR' | 'XOF' | 'XPF' | 'YER' | 'ZAR' | 'ZMW' | 'ZWD' | 'null';


            export type OauthAccessTokenRequestGrantTypeEnum = 'authorization_code' | 'refresh_token';
/**
 * Describes the valid schema for possible OAuth access token requests.
 * @export
 */
export type OauthAccessTokenRequest = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequest
     */
    grant_type: OauthAccessTokenRequestGrantTypeEnum;
}

/**
 * A request to exchange an authorization code for an access token.
 * @export
 */
export type OauthAccessTokenRequestCode = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCode
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCode
     */
    redirect_uri: string;
} & OauthAccessTokenRequest

/**
 * 
 * @export
 */
export type OauthAccessTokenRequestCodeAllOf = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCodeAllOf
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestCodeAllOf
     */
    redirect_uri: string;
}

/**
 * A request to exchange a refresh token for a new access token.
 * @export
 */
export type OauthAccessTokenRequestRefresh = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefresh
     */
    scope?: string;
} & OauthAccessTokenRequest

/**
 * 
 * @export
 */
export type OauthAccessTokenRequestRefreshAllOf = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefreshAllOf
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenRequestRefreshAllOf
     */
    scope?: string;
}


            export type OauthAccessTokenResponseResponseTypeEnum = 'authorization_code' | 'refresh_token';
/**
 * A successful OAuth access token response.
 * @export
 */
export type OauthAccessTokenResponse = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    response_type?: OauthAccessTokenResponseResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    token_type: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponse
     */
    expires_in: number;
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponse
     */
    scope: string;
}

/**
 * A successful OAuth access token response for the authorization code flow.
 * @export
 */
export type OauthAccessTokenResponseCode = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseCode
     */
    refresh_token: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseCode
     */
    refresh_token_expires_in: number;
} & OauthAccessTokenResponse

/**
 * 
 * @export
 */
export type OauthAccessTokenResponseCodeAllOf = {
    /**
     * 
     * @type {string}
     * @memberof OauthAccessTokenResponseCodeAllOf
     */
    refresh_token: string;
    /**
     * 
     * @type {number}
     * @memberof OauthAccessTokenResponseCodeAllOf
     */
    refresh_token_expires_in: number;
}

/**
 * A successful OAuth access token response for the refresh token flow.
 * @export
 */
export type OauthAccessTokenResponseRefresh = {
} & OauthAccessTokenResponse

/**
 * Campaign objective type.
 * @export
 * @enum {string}
 */
export type ObjectiveType = 'AWARENESS' | 'CONSIDERATION' | 'VIDEO_VIEW' | 'WEB_CONVERSION' | 'CATALOG_SALES' | 'WEB_SESSIONS' | 'AWARENESS_RESERVED' | 'ENGAGEMENT';

/**
 * Ad group pacing delivery type
 * @export
 * @enum {string}
 */
export type PacingDeliveryType = 'STANDARD' | 'ACCELERATED';

/**
 * 
 * @export
 */
export type Paginated = {
    /**
     * 
     * @type {Array<Object>}
     * @memberof Paginated
     */
    items: Array<Object>;
    /**
     * 
     * @type {string}
     * @memberof Paginated
     */
    bookmark?: string;
}

/**
 * Pin
 * @export
 */
export type Pin = {
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Pin
     */
    created_at?: Date;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Pin
     */
    alt_text?: string;
    /**
     * The board to which this Pin belongs.
     * @type {string}
     * @memberof Pin
     */
    board_id?: string;
    /**
     * The board section to which this Pin belongs.
     * @type {string}
     * @memberof Pin
     */
    board_section_id?: string;
    /**
     * 
     * @type {BoardOwner}
     * @memberof Pin
     */
    board_owner?: BoardOwner;
    /**
     * 
     * @type {PinMedia}
     * @memberof Pin
     */
    media?: PinMedia;
    /**
     * 
     * @type {PinMediaSource}
     * @memberof Pin
     */
    media_source?: PinMediaSource;
}

/**
 * Pin media objects.
 * @export
 */
export type PinMedia = {
    /**
     * 
     * @type {string}
     * @memberof PinMedia
     */
    media_type?: string;
}


            export type PinMediaSourceSourceTypeEnum = 'video_id';

            export type PinMediaSourceContentTypeEnum = 'image/jpeg' | 'image/png';
/**
 * Pin media source.
 * @export
 */
export type PinMediaSource = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    source_type: PinMediaSourceSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    content_type: PinMediaSourceContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    data: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    cover_image_url: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSource
     */
    media_id: string;
}


            export type PinMediaSourceImageBase64SourceTypeEnum = 'image_base64';

            export type PinMediaSourceImageBase64ContentTypeEnum = 'image/jpeg' | 'image/png';
/**
 * Base64-encoded image media source
 * @export
 */
export type PinMediaSourceImageBase64 = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    source_type: PinMediaSourceImageBase64SourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    content_type: PinMediaSourceImageBase64ContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageBase64
     */
    data: string;
}


            export type PinMediaSourceImageURLSourceTypeEnum = 'image_url';
/**
 * Image URL-based media source
 * @export
 */
export type PinMediaSourceImageURL = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageURL
     */
    source_type: PinMediaSourceImageURLSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceImageURL
     */
    url: string;
}


            export type PinMediaSourceVideoIDSourceTypeEnum = 'video_id';
/**
 * Video ID-based media source
 * @export
 */
export type PinMediaSourceVideoID = {
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    source_type: PinMediaSourceVideoIDSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    cover_image_url: string;
    /**
     * 
     * @type {string}
     * @memberof PinMediaSourceVideoID
     */
    media_id: string;
}

/**
 * Pin with image.
 * @export
 */
export type PinMediaWithImage = {
    /**
     * 
     * @type {{ [key: string]: ImageDetails; }}
     * @memberof PinMediaWithImage
     */
    images?: { [key: string]: ImageDetails; };
} & PinMedia

/**
 * 
 * @export
 */
export type PinMediaWithImageAllOf = {
    /**
     * 
     * @type {{ [key: string]: ImageDetails; }}
     * @memberof PinMediaWithImageAllOf
     */
    images?: { [key: string]: ImageDetails; };
}

/**
 * Summary status for pin promotions
 * @export
 * @enum {string}
 */
export type PinPromotionSummaryStatus = 'APPROVED' | 'PAUSED' | 'PENDING' | 'REJECTED' | 'ADVERTISER_DISABLED' | 'ARCHIVED';

/**
 * Campaign placement group type
 * @export
 * @enum {string}
 */
export type PlacementGroupType = 'ALL' | 'SEARCH' | 'BROWSE' | 'OTHER';

/**
 * Default availability for products in a feed.
 * @export
 * @enum {string}
 */
export type ProductAvailabilityType = 'IN_STOCK' | 'OUT_OF_STOCK' | 'PREORDER' | 'null';

/**
 * Summary status for product group
 * @export
 * @enum {string}
 */
export type ProductGroupSummaryStatus = 'RUNNING' | 'PAUSED' | 'EXCLUDED' | 'ARCHIVED';

/**
 * 
 * @export
 */
export type ProductType0Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType0Filter
     */
    PRODUCT_TYPE_0: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType1Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType1Filter
     */
    PRODUCT_TYPE_1: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType2Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType2Filter
     */
    PRODUCT_TYPE_2: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType3Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType3Filter
     */
    PRODUCT_TYPE_3: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * 
 * @export
 */
export type ProductType4Filter = {
    /**
     * 
     * @type {CatalogsProductGroupMultipleStringListCriteria}
     * @memberof ProductType4Filter
     */
    PRODUCT_TYPE_4: CatalogsProductGroupMultipleStringListCriteria;
}

/**
 * Reporting columns
 * @export
 * @enum {string}
 */
export type ReportingColumnAsync = 'SPEND_IN_MICRO_DOLLAR' | 'PAID_IMPRESSION' | 'CPC_IN_MICRO_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'CTR' | 'ECTR' | 'CAMPAIGN_NAME' | 'CAMPAIGN_STATUS' | 'AD_STATUS' | 'PIN_PROMOTION_STATUS' | 'PIN_ID' | 'TOTAL_ENGAGEMENT' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ECPM_IN_MICRO_DOLLAR' | 'CTR_2' | 'CAMPAIGN_ID' | 'ADVERTISER_ID' | 'AD_ACCOUNT_ID' | 'PIN_PROMOTION_ID' | 'AD_ID' | 'AD_GROUP_ID' | 'CAMPAIGN_MANAGED_STATUS' | 'CPM_IN_MICRO_DOLLAR' | 'AD_GROUP_NAME' | 'AD_GROUP_STATUS' | 'PRODUCT_GROUP_ID' | 'CLICKTHROUGH_1' | 'REPIN_1' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'CLICKTHROUGH_1_GROSS' | 'OUTBOUND_CLICK_1' | 'CLICKTHROUGH_2' | 'REPIN_2' | 'IMPRESSION_2' | 'OUTBOUND_CLICK_2' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_ENGAGEMENT_PAGE_VISIT' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CUSTOM' | 'TOTAL_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SEARCH' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY' | 'TOTAL_ENGAGEMENT_APP_INSTALL' | 'TOTAL_ENGAGEMENT_UNKNOWN' | 'TOTAL_CLICK_PAGE_VISIT' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CUSTOM' | 'TOTAL_CLICK_ADD_TO_CART' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SEARCH' | 'TOTAL_CLICK_WATCH_VIDEO' | 'TOTAL_CLICK_VIEW_CATEGORY' | 'TOTAL_CLICK_APP_INSTALL' | 'TOTAL_CLICK_UNKNOWN' | 'TOTAL_VIEW_PAGE_VISIT' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CUSTOM' | 'TOTAL_VIEW_ADD_TO_CART' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SEARCH' | 'TOTAL_VIEW_WATCH_VIDEO' | 'TOTAL_VIEW_VIEW_CATEGORY' | 'TOTAL_VIEW_APP_INSTALL' | 'TOTAL_VIEW_UNKNOWN' | 'TOTAL_CONVERSIONS' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_PAGE_VISIT_QUANTITY' | 'TOTAL_ENGAGEMENT_SIGNUP_QUANTITY' | 'TOTAL_ENGAGEMENT_CHECKOUT_QUANTITY' | 'TOTAL_ENGAGEMENT_CUSTOM_QUANTITY' | 'TOTAL_ENGAGEMENT_ADD_TO_CART_QUANTITY' | 'TOTAL_ENGAGEMENT_LEAD_QUANTITY' | 'TOTAL_ENGAGEMENT_SEARCH_QUANTITY' | 'TOTAL_ENGAGEMENT_WATCH_VIDEO_QUANTITY' | 'TOTAL_ENGAGEMENT_VIEW_CATEGORY_QUANTITY' | 'TOTAL_ENGAGEMENT_UNKNOWN_QUANTITY' | 'TOTAL_CLICK_PAGE_VISIT_QUANTITY' | 'TOTAL_CLICK_SIGNUP_QUANTITY' | 'TOTAL_CLICK_CHECKOUT_QUANTITY' | 'TOTAL_CLICK_CUSTOM_QUANTITY' | 'TOTAL_CLICK_ADD_TO_CART_QUANTITY' | 'TOTAL_CLICK_LEAD_QUANTITY' | 'TOTAL_CLICK_SEARCH_QUANTITY' | 'TOTAL_CLICK_WATCH_VIDEO_QUANTITY' | 'TOTAL_CLICK_VIEW_CATEGORY_QUANTITY' | 'TOTAL_CLICK_UNKNOWN_QUANTITY' | 'TOTAL_VIEW_PAGE_VISIT_QUANTITY' | 'TOTAL_VIEW_SIGNUP_QUANTITY' | 'TOTAL_VIEW_CHECKOUT_QUANTITY' | 'TOTAL_VIEW_CUSTOM_QUANTITY' | 'TOTAL_VIEW_ADD_TO_CART_QUANTITY' | 'TOTAL_VIEW_LEAD_QUANTITY' | 'TOTAL_VIEW_SEARCH_QUANTITY' | 'TOTAL_VIEW_WATCH_VIDEO_QUANTITY' | 'TOTAL_VIEW_VIEW_CATEGORY_QUANTITY' | 'TOTAL_VIEW_UNKNOWN_QUANTITY' | 'TOTAL_CONVERSIONS_QUANTITY' | 'ONSITE_CHECKOUTS_1' | 'PIN_PROMOTION_NAME' | 'AD_NAME' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_PAGE_VISIT_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SIGNUP_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CHECKOUT_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_CUSTOM_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_ADD_TO_CART_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_LEAD_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_SEARCH_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_WATCH_VIDEO_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_VIEW_CATEGORY_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_APP_INSTALL_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_DESKTOP_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_MOBILE_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_DESKTOP_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_MOBILE_CONVERSION' | 'TOTAL_UNKNOWN_TABLET_ACTION_TO_TABLET_CONVERSION' | 'TOTAL_CHECKOUT' | 'TOTAL_CUSTOM' | 'TOTAL_LEAD' | 'TOTAL_APP_INSTALL' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT_QUANTITY' | 'APP_INSTALL_COST_PER_ACTION' | 'VIDEO_3SEC_VIEWS_1' | 'VIDEO_P100_COMPLETE_1' | 'VIDEO_P0_COMBINED_1' | 'VIDEO_P25_COMBINED_1' | 'VIDEO_P50_COMBINED_1' | 'VIDEO_P75_COMBINED_1' | 'VIDEO_P95_COMBINED_1' | 'VIDEO_MRC_VIEWS_1' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_LENGTH' | 'CPV_IN_MICRO_DOLLAR' | 'CPCV_IN_MICRO_DOLLAR' | 'CPCV_P95_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'VIDEO_AVG_WATCHTIME_IN_SECOND_1' | 'VIDEO_AVG_WATCHTIME_IN_SECOND_2' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'INAPP_CHECKOUT_ROAS' | 'TOTAL_INAPP_CHECKOUT' | 'TOTAL_INAPP_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_CHECKOUT' | 'TOTAL_INAPP_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT' | 'TOTAL_INAPP_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_CHECKOUT' | 'TOTAL_INAPP_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_CHECKOUT_COST_PER_ACTION' | 'OFFLINE_CHECKOUT_ROAS' | 'TOTAL_OFFLINE_CHECKOUT' | 'TOTAL_OFFLINE_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CHECKOUT' | 'TOTAL_OFFLINE_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT' | 'TOTAL_OFFLINE_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CHECKOUT' | 'TOTAL_OFFLINE_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'WEB_ADD_TO_CART_COST_PER_ACTION' | 'WEB_ADD_TO_CART_ROAS' | 'TOTAL_WEB_ADD_TO_CART' | 'TOTAL_WEB_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_ADD_TO_CART' | 'TOTAL_WEB_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_WEB_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_ADD_TO_CART' | 'TOTAL_WEB_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'INAPP_ADD_TO_CART_COST_PER_ACTION' | 'INAPP_ADD_TO_CART_ROAS' | 'TOTAL_INAPP_ADD_TO_CART' | 'TOTAL_INAPP_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_ADD_TO_CART' | 'TOTAL_INAPP_CLICK_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART' | 'TOTAL_INAPP_ENGAGEMENT_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_ADD_TO_CART' | 'TOTAL_INAPP_VIEW_ADD_TO_CART_VALUE_IN_MICRO_DOLLAR' | 'WEB_PAGE_VISIT_COST_PER_ACTION' | 'WEB_PAGE_VISIT_ROAS' | 'TOTAL_WEB_PAGE_VISIT' | 'TOTAL_WEB_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_PAGE_VISIT' | 'TOTAL_WEB_CLICK_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT' | 'TOTAL_WEB_ENGAGEMENT_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_PAGE_VISIT' | 'TOTAL_WEB_VIEW_PAGE_VISIT_VALUE_IN_MICRO_DOLLAR' | 'WEB_SIGNUP_COST_PER_ACTION' | 'WEB_SIGNUP_ROAS' | 'TOTAL_WEB_SIGNUP' | 'TOTAL_WEB_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_SIGNUP' | 'TOTAL_WEB_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP' | 'TOTAL_WEB_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_SIGNUP' | 'TOTAL_WEB_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'INAPP_SIGNUP_COST_PER_ACTION' | 'INAPP_SIGNUP_ROAS' | 'TOTAL_INAPP_SIGNUP' | 'TOTAL_INAPP_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_SIGNUP' | 'TOTAL_INAPP_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP' | 'TOTAL_INAPP_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_SIGNUP' | 'TOTAL_INAPP_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_SIGNUP_COST_PER_ACTION' | 'OFFLINE_SIGNUP_ROAS' | 'TOTAL_OFFLINE_SIGNUP' | 'TOTAL_OFFLINE_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_SIGNUP' | 'TOTAL_OFFLINE_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP' | 'TOTAL_OFFLINE_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_SIGNUP' | 'TOTAL_OFFLINE_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'WEB_WATCH_VIDEO_COST_PER_ACTION' | 'WEB_WATCH_VIDEO_ROAS' | 'TOTAL_WEB_WATCH_VIDEO' | 'TOTAL_WEB_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_WATCH_VIDEO' | 'TOTAL_WEB_CLICK_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO' | 'TOTAL_WEB_ENGAGEMENT_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_WATCH_VIDEO' | 'TOTAL_WEB_VIEW_WATCH_VIDEO_VALUE_IN_MICRO_DOLLAR' | 'WEB_LEAD_COST_PER_ACTION' | 'WEB_LEAD_ROAS' | 'TOTAL_WEB_LEAD' | 'TOTAL_WEB_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_LEAD' | 'TOTAL_WEB_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_LEAD' | 'TOTAL_WEB_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_LEAD' | 'TOTAL_WEB_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_LEAD_COST_PER_ACTION' | 'OFFLINE_LEAD_ROAS' | 'TOTAL_OFFLINE_LEAD' | 'TOTAL_OFFLINE_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_LEAD' | 'TOTAL_OFFLINE_CLICK_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD' | 'TOTAL_OFFLINE_ENGAGEMENT_LEAD_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_LEAD' | 'TOTAL_OFFLINE_VIEW_LEAD_VALUE_IN_MICRO_DOLLAR' | 'WEB_SEARCH_COST_PER_ACTION' | 'WEB_SEARCH_ROAS' | 'TOTAL_WEB_SEARCH' | 'TOTAL_WEB_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_SEARCH' | 'TOTAL_WEB_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_SEARCH' | 'TOTAL_WEB_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_SEARCH' | 'TOTAL_WEB_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'INAPP_SEARCH_COST_PER_ACTION' | 'INAPP_SEARCH_ROAS' | 'TOTAL_INAPP_SEARCH' | 'TOTAL_INAPP_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_SEARCH' | 'TOTAL_INAPP_CLICK_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH' | 'TOTAL_INAPP_ENGAGEMENT_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_SEARCH' | 'TOTAL_INAPP_VIEW_SEARCH_VALUE_IN_MICRO_DOLLAR' | 'WEB_VIEW_CATEGORY_COST_PER_ACTION' | 'WEB_VIEW_CATEGORY_ROAS' | 'TOTAL_WEB_VIEW_CATEGORY' | 'TOTAL_WEB_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY' | 'TOTAL_WEB_CLICK_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY' | 'TOTAL_WEB_ENGAGEMENT_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY' | 'TOTAL_WEB_VIEW_VIEW_CATEGORY_VALUE_IN_MICRO_DOLLAR' | 'WEB_CUSTOM_COST_PER_ACTION' | 'WEB_CUSTOM_ROAS' | 'TOTAL_WEB_CUSTOM' | 'TOTAL_WEB_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CUSTOM' | 'TOTAL_WEB_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM' | 'TOTAL_WEB_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CUSTOM' | 'TOTAL_WEB_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_CUSTOM_COST_PER_ACTION' | 'OFFLINE_CUSTOM_ROAS' | 'TOTAL_OFFLINE_CUSTOM' | 'TOTAL_OFFLINE_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_CUSTOM' | 'TOTAL_OFFLINE_CLICK_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM' | 'TOTAL_OFFLINE_ENGAGEMENT_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_CUSTOM' | 'TOTAL_OFFLINE_VIEW_CUSTOM_VALUE_IN_MICRO_DOLLAR' | 'WEB_UNKNOWN_COST_PER_ACTION' | 'WEB_UNKNOWN_ROAS' | 'TOTAL_WEB_UNKNOWN' | 'TOTAL_WEB_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_UNKNOWN' | 'TOTAL_WEB_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN' | 'TOTAL_WEB_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_UNKNOWN' | 'TOTAL_WEB_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'INAPP_UNKNOWN_COST_PER_ACTION' | 'INAPP_UNKNOWN_ROAS' | 'TOTAL_INAPP_UNKNOWN' | 'TOTAL_INAPP_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_UNKNOWN' | 'TOTAL_INAPP_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN' | 'TOTAL_INAPP_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_UNKNOWN' | 'TOTAL_INAPP_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'OFFLINE_UNKNOWN_COST_PER_ACTION' | 'OFFLINE_UNKNOWN_ROAS' | 'TOTAL_OFFLINE_UNKNOWN' | 'TOTAL_OFFLINE_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_CLICK_UNKNOWN' | 'TOTAL_OFFLINE_CLICK_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN' | 'TOTAL_OFFLINE_ENGAGEMENT_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_OFFLINE_VIEW_UNKNOWN' | 'TOTAL_OFFLINE_VIEW_UNKNOWN_VALUE_IN_MICRO_DOLLAR' | 'INAPP_APP_INSTALL_COST_PER_ACTION' | 'INAPP_APP_INSTALL_ROAS' | 'TOTAL_INAPP_APP_INSTALL' | 'TOTAL_INAPP_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_CLICK_APP_INSTALL' | 'TOTAL_INAPP_CLICK_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL' | 'TOTAL_INAPP_ENGAGEMENT_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_INAPP_VIEW_APP_INSTALL' | 'TOTAL_INAPP_VIEW_APP_INSTALL_VALUE_IN_MICRO_DOLLAR' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'REPIN_RATE' | 'TOTAL_VIDEO_P95_COMBINED' | 'AD_GROUP_ENTITY_STATUS' | 'ECPCV_P95_IN_DOLLAR' | 'ENGAGEMENT_RATE' | 'PAGE_VISIT_COST_PER_ACTION' | 'TOTAL_PAGE_VISIT' | 'CHECKOUT_ROAS' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'ECPCV_IN_DOLLAR' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_SIGNUP' | 'TOTAL_VIDEO_P0_COMBINED' | 'SPEND_IN_DOLLAR' | 'EENGAGEMENT_RATE' | 'TOTAL_VIDEO_P25_COMBINED' | 'CPM_IN_DOLLAR' | 'ECPV_IN_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'ECPE_IN_DOLLAR' | 'TOTAL_VIDEO_P100_COMPLETE' | 'CAMPAIGN_ENTITY_STATUS' | 'PAGE_VISIT_ROAS' | 'TOTAL_REPIN_RATE' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'ECPC_IN_DOLLAR';

/**
 * 
 * @export
 */
export type TargetingTypeFilter = {
    /**
     * List of targeting types
     * @type {Array<AdsAnalyticsTargetingType>}
     * @memberof TargetingTypeFilter
     */
    targeting_types?: Array<AdsAnalyticsTargetingType>;
}

/**
 * Third-party tracking URLs. Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @export
 */
export type TrackingUrls = {
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    impression?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    click?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    engagement?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    buyable_button?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackingUrls
     */
    audience_verification?: Array<string>;
}



/**
 * AdAccountsApi - fetch parameter creator
 * @export
 */
export const AdAccountsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad account analytics
         * @throws {RequiredError}
         */
        adAccountAnalytics(adAccountId: string, startDate: Date, endDate: Date, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adAccountAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adAccountAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @throws {RequiredError}
         */
        adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options: RequestOptions): FetchArgs {
            const localVarPath = `/ad_accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (includeSharedAccounts !== undefined) {
                localVarQueryParameter['include_shared_accounts'] = ((includeSharedAccounts:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad group analytics
         * @throws {RequiredError}
         */
        adGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'adGroupIds' is not null or undefined
            if (adGroupIds === null || adGroupIds === undefined) {
                throw new RequiredError('adGroupIds','Required parameter adGroupIds was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adGroupsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adGroupsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ad groups
         * @throws {RequiredError}
         */
        adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adGroupsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ad_groups`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (translateInterestsToNames !== undefined) {
                localVarQueryParameter['translate_interests_to_names'] = ((translateInterestsToNames:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad analytics
         * @throws {RequiredError}
         */
        adsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'adIds' is not null or undefined
            if (adIds === null || adIds === undefined) {
                throw new RequiredError('adIds','Required parameter adIds was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling adsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling adsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ads
         * @throws {RequiredError}
         */
        adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling adsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/ads`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (adGroupIds) {
                localVarQueryParameter['ad_group_ids'] = adGroupIds;
            }

            if (adIds) {
                localVarQueryParameter['ad_ids'] = adIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Create async request for an account analytics report
         * @throws {RequiredError}
         */
        analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsCreateReport.');
            }
            // verify required parameter 'adsAnalyticsCreateAsyncRequest' is not null or undefined
            if (adsAnalyticsCreateAsyncRequest === null || adsAnalyticsCreateAsyncRequest === undefined) {
                throw new RequiredError('adsAnalyticsCreateAsyncRequest','Required parameter adsAnalyticsCreateAsyncRequest was null or undefined when calling analyticsCreateReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof adsAnalyticsCreateAsyncRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(adsAnalyticsCreateAsyncRequest != null ? adsAnalyticsCreateAsyncRequest : {}) : (((adsAnalyticsCreateAsyncRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @throws {RequiredError}
         */
        analyticsGetReport(adAccountId: string, token: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling analyticsGetReport.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling analyticsGetReport.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/reports`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = ((token:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get campaign analytics
         * @throws {RequiredError}
         */
        campaignsAnalytics(adAccountId: string, startDate: Date, endDate: Date, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'campaignIds' is not null or undefined
            if (campaignIds === null || campaignIds === undefined) {
                throw new RequiredError('campaignIds','Required parameter campaignIds was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling campaignsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling campaignsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @throws {RequiredError}
         */
        campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling campaignsList.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/campaigns`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (campaignIds) {
                localVarQueryParameter['campaign_ids'] = campaignIds;
            }

            if (entityStatuses) {
                localVarQueryParameter['entity_statuses'] = entityStatuses;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = ((order:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get product group analytics
         * @throws {RequiredError}
         */
        productGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options: RequestOptions): FetchArgs {
            // verify required parameter 'adAccountId' is not null or undefined
            if (adAccountId === null || adAccountId === undefined) {
                throw new RequiredError('adAccountId','Required parameter adAccountId was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'productGroupIds' is not null or undefined
            if (productGroupIds === null || productGroupIds === undefined) {
                throw new RequiredError('productGroupIds','Required parameter productGroupIds was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'columns' is not null or undefined
            if (columns === null || columns === undefined) {
                throw new RequiredError('columns','Required parameter columns was null or undefined when calling productGroupsAnalytics.');
            }
            // verify required parameter 'granularity' is not null or undefined
            if (granularity === null || granularity === undefined) {
                throw new RequiredError('granularity','Required parameter granularity was null or undefined when calling productGroupsAnalytics.');
            }
            const localVarPath = `/ad_accounts/{ad_account_id}/product_groups/analytics`
                .replace(`{${"ad_account_id"}}`, encodeURIComponent(String(adAccountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["ads:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (productGroupIds) {
                localVarQueryParameter['product_group_ids'] = productGroupIds;
            }

            if (columns) {
                localVarQueryParameter['columns'] = columns.join(COLLECTION_FORMATS["csv"]);
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = ((granularity:any):string);
            }

            if (clickWindowDays !== undefined) {
                localVarQueryParameter['click_window_days'] = ((clickWindowDays:any):string);
            }

            if (engagementWindowDays !== undefined) {
                localVarQueryParameter['engagement_window_days'] = ((engagementWindowDays:any):string);
            }

            if (viewWindowDays !== undefined) {
                localVarQueryParameter['view_window_days'] = ((viewWindowDays:any):string);
            }

            if (conversionReportTime !== undefined) {
                localVarQueryParameter['conversion_report_time'] = ((conversionReportTime:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AdAccountsApiType = { 
    adAccountAnalytics(adAccountId: string, startDate: Date, endDate: Date, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<{ [key: string]: Object; }>>,

    adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: RequestOptions): Promise<Paginated & Object>,

    adGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<{ [key: string]: Object; }>>,

    adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: RequestOptions): Promise<Paginated & Object>,

    adsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<{ [key: string]: Object; }>>,

    adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<Paginated & Object>,

    analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: RequestOptions): Promise<AdsAnalyticsCreateAsyncResponse>,

    analyticsGetReport(adAccountId: string, token: string, options?: RequestOptions): Promise<AdsAnalyticsGetAsyncResponse>,

    campaignsAnalytics(adAccountId: string, startDate: Date, endDate: Date, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<{ [key: string]: Object; }>>,

    campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions): Promise<Paginated & Object>,

    productGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions): Promise<Array<{ [key: string]: Object; }>>,
}

/**
 * AdAccountsApi - factory function to inject configuration 
 * @export
 */
export const AdAccountsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AdAccountsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad account analytics
         * @throws {RequiredError}
         */
        adAccountAnalytics(adAccountId: string, startDate: Date, endDate: Date, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<{ [key: string]: Object; }>> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountAnalytics(adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
         * @summary List ad accounts
         * @throws {RequiredError}
         */
        adAccountsList(bookmark?: string, pageSize?: number, includeSharedAccounts?: boolean, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adAccountsList(bookmark, pageSize, includeSharedAccounts, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad group analytics
         * @throws {RequiredError}
         */
        adGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<{ [key: string]: Object; }>> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adGroupsAnalytics(adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ad groups
         * @throws {RequiredError}
         */
        adGroupsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, translateInterestsToNames?: boolean, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adGroupsList(adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get ad analytics
         * @throws {RequiredError}
         */
        adsAnalytics(adAccountId: string, startDate: Date, endDate: Date, adIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<{ [key: string]: Object; }>> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adsAnalytics(adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List ads
         * @throws {RequiredError}
         */
        adsList(adAccountId: string, campaignIds?: Array<string>, adGroupIds?: Array<string>, adIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).adsList(adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Create async request for an account analytics report
         * @throws {RequiredError}
         */
        analyticsCreateReport(adAccountId: string, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, options?: RequestOptions = {}): Promise<AdsAnalyticsCreateAsyncResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsCreateReport(adAccountId, adsAnalyticsCreateAsyncRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get the account analytics report created by the async call
         * @throws {RequiredError}
         */
        analyticsGetReport(adAccountId: string, token: string, options?: RequestOptions = {}): Promise<AdsAnalyticsGetAsyncResponse> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).analyticsGetReport(adAccountId, token, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get campaign analytics
         * @throws {RequiredError}
         */
        campaignsAnalytics(adAccountId: string, startDate: Date, endDate: Date, campaignIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<{ [key: string]: Object; }>> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).campaignsAnalytics(adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary List campaigns
         * @throws {RequiredError}
         */
        campaignsList(adAccountId: string, campaignIds?: Array<string>, entityStatuses?: Array<'ACTIVE' | 'PAUSED' | 'ARCHIVED'>, pageSize?: number, order?: 'ASCENDING' | 'DESCENDING', bookmark?: string, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).campaignsList(adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
         * @summary Get product group analytics
         * @throws {RequiredError}
         */
        productGroupsAnalytics(adAccountId: string, startDate: Date, endDate: Date, productGroupIds: Array<string>, columns: Array<'AD_ACCOUNT_ID' | 'AD_GROUP_ENTITY_STATUS' | 'AD_GROUP_ID' | 'AD_ID' | 'CAMPAIGN_DAILY_SPEND_CAP' | 'CAMPAIGN_ENTITY_STATUS' | 'CAMPAIGN_ID' | 'CAMPAIGN_LIFETIME_SPEND_CAP' | 'CAMPAIGN_NAME' | 'CHECKOUT_ROAS' | 'CLICKTHROUGH_1' | 'CLICKTHROUGH_1_GROSS' | 'CLICKTHROUGH_2' | 'CPC_IN_MICRO_DOLLAR' | 'CPM_IN_DOLLAR' | 'CPM_IN_MICRO_DOLLAR' | 'CTR' | 'CTR_2' | 'ECPCV_IN_DOLLAR' | 'ECPCV_P95_IN_DOLLAR' | 'ECPC_IN_DOLLAR' | 'ECPC_IN_MICRO_DOLLAR' | 'ECPE_IN_DOLLAR' | 'ECPM_IN_MICRO_DOLLAR' | 'ECPV_IN_DOLLAR' | 'ECTR' | 'EENGAGEMENT_RATE' | 'ENGAGEMENT_1' | 'ENGAGEMENT_2' | 'ENGAGEMENT_RATE' | 'IDEA_PIN_PRODUCT_TAG_VISIT_1' | 'IDEA_PIN_PRODUCT_TAG_VISIT_2' | 'IMPRESSION_1' | 'IMPRESSION_1_GROSS' | 'IMPRESSION_2' | 'INAPP_CHECKOUT_COST_PER_ACTION' | 'OUTBOUND_CLICK_1' | 'OUTBOUND_CLICK_2' | 'PAGE_VISIT_COST_PER_ACTION' | 'PAGE_VISIT_ROAS' | 'PAID_IMPRESSION' | 'PIN_ID' | 'REPIN_1' | 'REPIN_2' | 'REPIN_RATE' | 'SPEND_IN_DOLLAR' | 'SPEND_IN_MICRO_DOLLAR' | 'TOTAL_CHECKOUT' | 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICKTHROUGH' | 'TOTAL_CLICK_CHECKOUT' | 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CLICK_LEAD' | 'TOTAL_CLICK_SIGNUP' | 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_CONVERSIONS' | 'TOTAL_CUSTOM' | 'TOTAL_ENGAGEMENT' | 'TOTAL_ENGAGEMENT_CHECKOUT' | 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_ENGAGEMENT_LEAD' | 'TOTAL_ENGAGEMENT_SIGNUP' | 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT' | 'TOTAL_IMPRESSION_FREQUENCY' | 'TOTAL_IMPRESSION_USER' | 'TOTAL_LEAD' | 'TOTAL_PAGE_VISIT' | 'TOTAL_REPIN_RATE' | 'TOTAL_SIGNUP' | 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIDEO_3SEC_VIEWS' | 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND' | 'TOTAL_VIDEO_MRC_VIEWS' | 'TOTAL_VIDEO_P0_COMBINED' | 'TOTAL_VIDEO_P100_COMPLETE' | 'TOTAL_VIDEO_P25_COMBINED' | 'TOTAL_VIDEO_P50_COMBINED' | 'TOTAL_VIDEO_P75_COMBINED' | 'TOTAL_VIDEO_P95_COMBINED' | 'TOTAL_VIEW_CHECKOUT' | 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_VIEW_LEAD' | 'TOTAL_VIEW_SIGNUP' | 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CHECKOUT' | 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_CLICK_CHECKOUT' | 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT' | 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'TOTAL_WEB_VIEW_CHECKOUT' | 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR' | 'VIDEO_3SEC_VIEWS_2' | 'VIDEO_LENGTH' | 'VIDEO_MRC_VIEWS_2' | 'VIDEO_P0_COMBINED_2' | 'VIDEO_P100_COMPLETE_2' | 'VIDEO_P25_COMBINED_2' | 'VIDEO_P50_COMBINED_2' | 'VIDEO_P75_COMBINED_2' | 'VIDEO_P95_COMBINED_2' | 'WEB_CHECKOUT_COST_PER_ACTION' | 'WEB_CHECKOUT_ROAS'>, granularity: Granularity, clickWindowDays?: 1 | 7 | 30 | 60, engagementWindowDays?: 1 | 7 | 30 | 60, viewWindowDays?: 1 | 7 | 30 | 60, conversionReportTime?: 'TIME_OF_AD_ACTION' | 'TIME_OF_CONVERSION', options?: RequestOptions = {}): Promise<Array<{ [key: string]: Object; }>> {
            const localVarFetchArgs = AdAccountsApiFetchParamCreator(configuration).productGroupsAnalytics(adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BoardsApi - fetch parameter creator
 * @export
 */
export const BoardsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @throws {RequiredError}
         */
        boardSectionsCreate(boardId: string, boardSection: BoardSection, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsCreate.');
            }
            // verify required parameter 'boardSection' is not null or undefined
            if (boardSection === null || boardSection === undefined) {
                throw new RequiredError('boardSection','Required parameter boardSection was null or undefined when calling boardSectionsCreate.');
            }
            const localVarPath = `/boards/{board_id}/sections`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof boardSection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(boardSection != null ? boardSection : {}) : (((boardSection:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @throws {RequiredError}
         */
        boardSectionsDelete(boardId: string, sectionId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsDelete.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling boardSectionsDelete.');
            }
            const localVarPath = `/boards/{board_id}/sections/{section_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @throws {RequiredError}
         */
        boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsList.');
            }
            const localVarPath = `/boards/{board_id}/sections`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @throws {RequiredError}
         */
        boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsListPins.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling boardSectionsListPins.');
            }
            const localVarPath = `/boards/{board_id}/sections/{section_id}/pins`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @throws {RequiredError}
         */
        boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardSectionsUpdate.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling boardSectionsUpdate.');
            }
            // verify required parameter 'boardSection' is not null or undefined
            if (boardSection === null || boardSection === undefined) {
                throw new RequiredError('boardSection','Required parameter boardSection was null or undefined when calling boardSectionsUpdate.');
            }
            const localVarPath = `/boards/{board_id}/sections/{section_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof boardSection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(boardSection != null ? boardSection : {}) : (((boardSection:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @throws {RequiredError}
         */
        boardsCreate(board: Board, options: RequestOptions): FetchArgs {
            // verify required parameter 'board' is not null or undefined
            if (board === null || board === undefined) {
                throw new RequiredError('board','Required parameter board was null or undefined when calling boardsCreate.');
            }
            const localVarPath = `/boards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof board !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(board != null ? board : {}) : (((board:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @throws {RequiredError}
         */
        boardsDelete(boardId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsDelete.');
            }
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @throws {RequiredError}
         */
        boardsGet(boardId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsGet.');
            }
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @throws {RequiredError}
         */
        boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options: RequestOptions): FetchArgs {
            const localVarPath = `/boards`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (privacy !== undefined) {
                localVarQueryParameter['privacy'] = ((privacy:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @throws {RequiredError}
         */
        boardsListPins(boardId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsListPins.');
            }
            const localVarPath = `/boards/{board_id}/pins`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a board owned by the \"operating user_account\".
         * @summary Update board
         * @throws {RequiredError}
         */
        boardsUpdate(boardId: string, boardUpdate: BoardUpdate, options: RequestOptions): FetchArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling boardsUpdate.');
            }
            // verify required parameter 'boardUpdate' is not null or undefined
            if (boardUpdate === null || boardUpdate === undefined) {
                throw new RequiredError('boardUpdate','Required parameter boardUpdate was null or undefined when calling boardsUpdate.');
            }
            const localVarPath = `/boards/{board_id}`
                .replace(`{${"board_id"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof boardUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(boardUpdate != null ? boardUpdate : {}) : (((boardUpdate:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BoardsApiType = { 
    boardSectionsCreate(boardId: string, boardSection: BoardSection, options?: RequestOptions): Promise<BoardSection>,

    boardSectionsDelete(boardId: string, sectionId: string, options?: RequestOptions): Promise<Response>,

    boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,

    boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,

    boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, options?: RequestOptions): Promise<BoardSection>,

    boardsCreate(board: Board, options?: RequestOptions): Promise<Board>,

    boardsDelete(boardId: string, options?: RequestOptions): Promise<Response>,

    boardsGet(boardId: string, options?: RequestOptions): Promise<Board>,

    boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options?: RequestOptions): Promise<Paginated & Object>,

    boardsListPins(boardId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,

    boardsUpdate(boardId: string, boardUpdate: BoardUpdate, options?: RequestOptions): Promise<Board>,
}

/**
 * BoardsApi - factory function to inject configuration 
 * @export
 */
export const BoardsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BoardsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board section
         * @throws {RequiredError}
         */
        boardSectionsCreate(boardId: string, boardSection: BoardSection, options?: RequestOptions = {}): Promise<BoardSection> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsCreate(boardId, boardSection, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board section
         * @throws {RequiredError}
         */
        boardSectionsDelete(boardId: string, sectionId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsDelete(boardId, sectionId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List board sections
         * @throws {RequiredError}
         */
        boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsList(boardId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board section
         * @throws {RequiredError}
         */
        boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsListPins(boardId, sectionId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Update board section
         * @throws {RequiredError}
         */
        boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, options?: RequestOptions = {}): Promise<BoardSection> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardSectionsUpdate(boardId, sectionId, boardSection, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Create board
         * @throws {RequiredError}
         */
        boardsCreate(board: Board, options?: RequestOptions = {}): Promise<Board> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsCreate(board, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete board
         * @throws {RequiredError}
         */
        boardsDelete(boardId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsDelete(boardId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Get board
         * @throws {RequiredError}
         */
        boardsGet(boardId: string, options?: RequestOptions = {}): Promise<Board> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsGet(boardId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
         * @summary List boards
         * @throws {RequiredError}
         */
        boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsList(bookmark, pageSize, privacy, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary List Pins on board
         * @throws {RequiredError}
         */
        boardsListPins(boardId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsListPins(boardId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update a board owned by the \"operating user_account\".
         * @summary Update board
         * @throws {RequiredError}
         */
        boardsUpdate(boardId: string, boardUpdate: BoardUpdate, options?: RequestOptions = {}): Promise<Board> {
            const localVarFetchArgs = BoardsApiFetchParamCreator(configuration).boardsUpdate(boardId, boardUpdate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CatalogsApi - fetch parameter creator
 * @export
 */
export const CatalogsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
         * @summary Create product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'catalogsProductGroupCreateRequest' is not null or undefined
            if (catalogsProductGroupCreateRequest === null || catalogsProductGroupCreateRequest === undefined) {
                throw new RequiredError('catalogsProductGroupCreateRequest','Required parameter catalogsProductGroupCreateRequest was null or undefined when calling catalogsProductGroupsCreate.');
            }
            const localVarPath = `/catalogs/product_groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsProductGroupCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsProductGroupCreateRequest != null ? catalogsProductGroupCreateRequest : {}) : (((catalogsProductGroupCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
         * @summary Delete product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsDelete(productGroupId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupsDelete.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
         * @summary Get product groups list
         * @throws {RequiredError}
         */
        catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling catalogsProductGroupsList.');
            }
            const localVarPath = `/catalogs/product_groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (feedId !== undefined) {
                localVarQueryParameter['feed_id'] = ((feedId:any):string);
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
         * @summary Update product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroupId' is not null or undefined
            if (productGroupId === null || productGroupId === undefined) {
                throw new RequiredError('productGroupId','Required parameter productGroupId was null or undefined when calling catalogsProductGroupsUpdate.');
            }
            // verify required parameter 'catalogsProductGroupUpdateRequest' is not null or undefined
            if (catalogsProductGroupUpdateRequest === null || catalogsProductGroupUpdateRequest === undefined) {
                throw new RequiredError('catalogsProductGroupUpdateRequest','Required parameter catalogsProductGroupUpdateRequest was null or undefined when calling catalogsProductGroupsUpdate.');
            }
            const localVarPath = `/catalogs/product_groups/{product_group_id}`
                .replace(`{${"product_group_id"}}`, encodeURIComponent(String(productGroupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsProductGroupUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsProductGroupUpdateRequest != null ? catalogsProductGroupUpdateRequest : {}) : (((catalogsProductGroupUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
         * @summary List processing results for a given feed
         * @throws {RequiredError}
         */
        feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedProcessingResultsList.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}/processing_results`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
         * @summary Create feed
         * @throws {RequiredError}
         */
        feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'catalogsFeedsCreateRequest' is not null or undefined
            if (catalogsFeedsCreateRequest === null || catalogsFeedsCreateRequest === undefined) {
                throw new RequiredError('catalogsFeedsCreateRequest','Required parameter catalogsFeedsCreateRequest was null or undefined when calling feedsCreate.');
            }
            const localVarPath = `/catalogs/feeds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsFeedsCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsFeedsCreateRequest != null ? catalogsFeedsCreateRequest : {}) : (((catalogsFeedsCreateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
         * @summary Delete feed
         * @throws {RequiredError}
         */
        feedsDelete(feedId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedsDelete.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
         * @summary Get feed
         * @throws {RequiredError}
         */
        feedsGet(feedId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedsGet.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
         * @summary List feeds
         * @throws {RequiredError}
         */
        feedsList(bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/catalogs/feeds`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
         * @summary Update feed
         * @throws {RequiredError}
         */
        feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'feedId' is not null or undefined
            if (feedId === null || feedId === undefined) {
                throw new RequiredError('feedId','Required parameter feedId was null or undefined when calling feedsUpdate.');
            }
            // verify required parameter 'catalogsFeedsUpdateRequest' is not null or undefined
            if (catalogsFeedsUpdateRequest === null || catalogsFeedsUpdateRequest === undefined) {
                throw new RequiredError('catalogsFeedsUpdateRequest','Required parameter catalogsFeedsUpdateRequest was null or undefined when calling feedsUpdate.');
            }
            const localVarPath = `/catalogs/feeds/{feed_id}`
                .replace(`{${"feed_id"}}`, encodeURIComponent(String(feedId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsFeedsUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsFeedsUpdateRequest != null ? catalogsFeedsUpdateRequest : {}) : (((catalogsFeedsUpdateRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
         * @summary Get catalogs items batch
         * @throws {RequiredError}
         */
        itemsBatchGet(batchId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'batchId' is not null or undefined
            if (batchId === null || batchId === undefined) {
                throw new RequiredError('batchId','Required parameter batchId was null or undefined when calling itemsBatchGet.');
            }
            const localVarPath = `/catalogs/items/batch/{batch_id}`
                .replace(`{${"batch_id"}}`, encodeURIComponent(String(batchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
         * @summary Perform an operation on an item batch
         * @throws {RequiredError}
         */
        itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'catalogsItemsBatchRequest' is not null or undefined
            if (catalogsItemsBatchRequest === null || catalogsItemsBatchRequest === undefined) {
                throw new RequiredError('catalogsItemsBatchRequest','Required parameter catalogsItemsBatchRequest was null or undefined when calling itemsBatchPost.');
            }
            const localVarPath = `/catalogs/items/batch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof catalogsItemsBatchRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(catalogsItemsBatchRequest != null ? catalogsItemsBatchRequest : {}) : (((catalogsItemsBatchRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the items of the catalog created by the \"operating user_account\"
         * @summary Get catalogs items
         * @throws {RequiredError}
         */
        itemsGet(country: string, itemIds: Array<string>, language: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling itemsGet.');
            }
            // verify required parameter 'itemIds' is not null or undefined
            if (itemIds === null || itemIds === undefined) {
                throw new RequiredError('itemIds','Required parameter itemIds was null or undefined when calling itemsGet.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling itemsGet.');
            }
            const localVarPath = `/catalogs/items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["catalogs:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = ((country:any):string);
            }

            if (itemIds) {
                localVarQueryParameter['item_ids'] = itemIds;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = ((language:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CatalogsApiType = { 
    catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options?: RequestOptions): Promise<Object>,

    catalogsProductGroupsDelete(productGroupId: string, options?: RequestOptions): Promise<Response>,

    catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,

    catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options?: RequestOptions): Promise<CatalogsProductGroup>,

    feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,

    feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options?: RequestOptions): Promise<CatalogsFeed>,

    feedsDelete(feedId: string, options?: RequestOptions): Promise<Response>,

    feedsGet(feedId: string, options?: RequestOptions): Promise<CatalogsFeed>,

    feedsList(bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,

    feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options?: RequestOptions): Promise<CatalogsFeed>,

    itemsBatchGet(batchId: string, options?: RequestOptions): Promise<CatalogsItemsBatch>,

    itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options?: RequestOptions): Promise<CatalogsItemsBatch>,

    itemsGet(country: string, itemIds: Array<string>, language: string, options?: RequestOptions): Promise<CatalogsItems>,
}

/**
 * CatalogsApi - factory function to inject configuration 
 * @export
 */
export const CatalogsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CatalogsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
         * @summary Create product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, options?: RequestOptions = {}): Promise<Object> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsCreate(catalogsProductGroupCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
         * @summary Delete product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsDelete(productGroupId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsDelete(productGroupId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
         * @summary Get product groups list
         * @throws {RequiredError}
         */
        catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsList(feedId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
         * @summary Update product group
         * @throws {RequiredError}
         */
        catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, options?: RequestOptions = {}): Promise<CatalogsProductGroup> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).catalogsProductGroupsUpdate(productGroupId, catalogsProductGroupUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
         * @summary List processing results for a given feed
         * @throws {RequiredError}
         */
        feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedProcessingResultsList(feedId, bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
         * @summary Create feed
         * @throws {RequiredError}
         */
        feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, options?: RequestOptions = {}): Promise<CatalogsFeed> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsCreate(catalogsFeedsCreateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
         * @summary Delete feed
         * @throws {RequiredError}
         */
        feedsDelete(feedId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsDelete(feedId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
         * @summary Get feed
         * @throws {RequiredError}
         */
        feedsGet(feedId: string, options?: RequestOptions = {}): Promise<CatalogsFeed> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsGet(feedId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
         * @summary List feeds
         * @throws {RequiredError}
         */
        feedsList(bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsList(bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
         * @summary Update feed
         * @throws {RequiredError}
         */
        feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, options?: RequestOptions = {}): Promise<CatalogsFeed> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).feedsUpdate(feedId, catalogsFeedsUpdateRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
         * @summary Get catalogs items batch
         * @throws {RequiredError}
         */
        itemsBatchGet(batchId: string, options?: RequestOptions = {}): Promise<CatalogsItemsBatch> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsBatchGet(batchId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
         * @summary Perform an operation on an item batch
         * @throws {RequiredError}
         */
        itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, options?: RequestOptions = {}): Promise<CatalogsItemsBatch> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsBatchPost(catalogsItemsBatchRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the items of the catalog created by the \"operating user_account\"
         * @summary Get catalogs items
         * @throws {RequiredError}
         */
        itemsGet(country: string, itemIds: Array<string>, language: string, options?: RequestOptions = {}): Promise<CatalogsItems> {
            const localVarFetchArgs = CatalogsApiFetchParamCreator(configuration).itemsGet(country, itemIds, language, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MediaApi - fetch parameter creator
 * @export
 */
export const MediaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @throws {RequiredError}
         */
        mediaCreate(mediaUploadRequest: MediaUploadRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'mediaUploadRequest' is not null or undefined
            if (mediaUploadRequest === null || mediaUploadRequest === undefined) {
                throw new RequiredError('mediaUploadRequest','Required parameter mediaUploadRequest was null or undefined when calling mediaCreate.');
            }
            const localVarPath = `/media`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof mediaUploadRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(mediaUploadRequest != null ? mediaUploadRequest : {}) : (((mediaUploadRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @throws {RequiredError}
         */
        mediaGet(mediaId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new RequiredError('mediaId','Required parameter mediaId was null or undefined when calling mediaGet.');
            }
            const localVarPath = `/media/{media_id}`
                .replace(`{${"media_id"}}`, encodeURIComponent(String(mediaId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @throws {RequiredError}
         */
        mediaList(bookmark?: string, pageSize?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/media`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (bookmark !== undefined) {
                localVarQueryParameter['bookmark'] = ((bookmark:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MediaApiType = { 
    mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: RequestOptions): Promise<MediaUpload>,

    mediaGet(mediaId: string, options?: RequestOptions): Promise<MediaUploadDetails>,

    mediaList(bookmark?: string, pageSize?: number, options?: RequestOptions): Promise<Paginated & Object>,
}

/**
 * MediaApi - factory function to inject configuration 
 * @export
 */
export const MediaApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MediaApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file\'s contents as the request\'s <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Register media upload
         * @throws {RequiredError}
         */
        mediaCreate(mediaUploadRequest: MediaUploadRequest, options?: RequestOptions = {}): Promise<MediaUpload> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).mediaCreate(mediaUploadRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get details for a registered media upload, including its current status.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Get media upload details
         * @throws {RequiredError}
         */
        mediaGet(mediaId: string, options?: RequestOptions = {}): Promise<MediaUploadDetails> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).mediaGet(mediaId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List media uploads filtered by given parameters.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary List media uploads
         * @throws {RequiredError}
         */
        mediaList(bookmark?: string, pageSize?: number, options?: RequestOptions = {}): Promise<Paginated & Object> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).mediaList(bookmark, pageSize, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * OauthApi - fetch parameter creator
 * @export
 */
export const OauthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  See <a href=\'/docs/api/v5/#tag/Authentication\'>Authentication</a> for more.
         * @summary Generate OAuth access token
         * @throws {RequiredError}
         */
        oauthToken(grantType: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling oauthToken.');
            }
            const localVarPath = `/oauth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', ((grantType:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type OauthApiType = { 
    oauthToken(grantType: string, options?: RequestOptions): Promise<OauthAccessTokenResponse>,
}

/**
 * OauthApi - factory function to inject configuration 
 * @export
 */
export const OauthApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): OauthApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Generate an OAuth access token by using an authorization code or a refresh token.  See <a href=\'/docs/api/v5/#tag/Authentication\'>Authentication</a> for more.
         * @summary Generate OAuth access token
         * @throws {RequiredError}
         */
        oauthToken(grantType: string, options?: RequestOptions = {}): Promise<OauthAccessTokenResponse> {
            const localVarFetchArgs = OauthApiFetchParamCreator(configuration).oauthToken(grantType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PinsApi - fetch parameter creator
 * @export
 */
export const PinsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
         * @summary Get Pin analytics
         * @throws {RequiredError}
         */
        pinsAnalytics(pinId: string, startDate: Date, endDate: Date, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsAnalytics.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling pinsAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling pinsAnalytics.');
            }
            // verify required parameter 'metricTypes' is not null or undefined
            if (metricTypes === null || metricTypes === undefined) {
                throw new RequiredError('metricTypes','Required parameter metricTypes was null or undefined when calling pinsAnalytics.');
            }
            const localVarPath = `/pins/{pin_id}/analytics`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = ((appTypes:any):string);
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (splitField !== undefined) {
                localVarQueryParameter['split_field'] = ((splitField:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @throws {RequiredError}
         */
        pinsCreate(pin: Pin, options: RequestOptions): FetchArgs {
            // verify required parameter 'pin' is not null or undefined
            if (pin === null || pin === undefined) {
                throw new RequiredError('pin','Required parameter pin was null or undefined when calling pinsCreate.');
            }
            const localVarPath = `/pins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof pin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(pin != null ? pin : {}) : (((pin:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete Pin
         * @throws {RequiredError}
         */
        pinsDelete(pinId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsDelete.');
            }
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "boards:write", "pins:read", "pins:write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @throws {RequiredError}
         */
        pinsGet(pinId: string, adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'pinId' is not null or undefined
            if (pinId === null || pinId === undefined) {
                throw new RequiredError('pinId','Required parameter pinId was null or undefined when calling pinsGet.');
            }
            const localVarPath = `/pins/{pin_id}`
                .replace(`{${"pin_id"}}`, encodeURIComponent(String(pinId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["boards:read", "pins:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PinsApiType = { 
    pinsAnalytics(pinId: string, startDate: Date, endDate: Date, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: RequestOptions): Promise<{ [key: string]: AnalyticsMetricsResponse; }>,

    pinsCreate(pin: Pin, options?: RequestOptions): Promise<Pin>,

    pinsDelete(pinId: string, options?: RequestOptions): Promise<Response>,

    pinsGet(pinId: string, adAccountId?: string, options?: RequestOptions): Promise<Pin>,
}

/**
 * PinsApi - factory function to inject configuration 
 * @export
 */
export const PinsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PinsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
         * @summary Get Pin analytics
         * @throws {RequiredError}
         */
        pinsAnalytics(pinId: string, startDate: Date, endDate: Date, metricTypes: Array<'IMPRESSION' | 'SAVE' | 'PIN_CLICK' | 'OUTBOUND_CLICK' | 'VIDEO_MRC_VIEW' | 'VIDEO_AVG_WATCH_TIME' | 'VIDEO_V50_WATCH_TIME' | 'QUARTILE_95_PERCENT_VIEW'>, appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', splitField?: 'NO_SPLIT' | 'APP_TYPE', adAccountId?: string, options?: RequestOptions = {}): Promise<{ [key: string]: AnalyticsMetricsResponse; }> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsAnalytics(pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
         * @summary Create Pin
         * @throws {RequiredError}
         */
        pinsCreate(pin: Pin, options?: RequestOptions = {}): Promise<Pin> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsCreate(pin, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
         * @summary Delete Pin
         * @throws {RequiredError}
         */
        pinsDelete(pinId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsDelete(pinId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
         * @summary Get Pin
         * @throws {RequiredError}
         */
        pinsGet(pinId: string, adAccountId?: string, options?: RequestOptions = {}): Promise<Pin> {
            const localVarFetchArgs = PinsApiFetchParamCreator(configuration).pinsGet(pinId, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UserAccountApi - fetch parameter creator
 * @export
 */
export const UserAccountApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @throws {RequiredError}
         */
        userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling userAccountAnalytics.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling userAccountAnalytics.');
            }
            const localVarPath = `/user_account/analytics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = ((endDate:any):Date).toISOString();
            }

            if (fromClaimedContent !== undefined) {
                localVarQueryParameter['from_claimed_content'] = ((fromClaimedContent:any):string);
            }

            if (pinFormat !== undefined) {
                localVarQueryParameter['pin_format'] = ((pinFormat:any):string);
            }

            if (appTypes !== undefined) {
                localVarQueryParameter['app_types'] = ((appTypes:any):string);
            }

            if (metricTypes) {
                localVarQueryParameter['metric_types'] = metricTypes.join(COLLECTION_FORMATS["csv"]);
            }

            if (splitField !== undefined) {
                localVarQueryParameter['split_field'] = ((splitField:any):string);
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @throws {RequiredError}
         */
        userAccountGet(adAccountId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/user_account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication pinterest_oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("pinterest_oauth2", ["user_accounts:read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (adAccountId !== undefined) {
                localVarQueryParameter['ad_account_id'] = ((adAccountId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UserAccountApiType = { 
    userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options?: RequestOptions): Promise<{ [key: string]: AnalyticsMetricsResponse; }>,

    userAccountGet(adAccountId?: string, options?: RequestOptions): Promise<Account>,
}

/**
 * UserAccountApi - factory function to inject configuration 
 * @export
 */
export const UserAccountApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UserAccountApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
         * @summary Get user account analytics
         * @throws {RequiredError}
         */
        userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent?: 'OTHER' | 'CLAIMED' | 'BOTH', pinFormat?: 'ALL' | 'PRODUCT' | 'REGULAR' | 'VIDEO', appTypes?: 'ALL' | 'MOBILE' | 'TABLET' | 'WEB', metricTypes?: Array<'ENGAGEMENT' | 'ENGAGEMENT_RATE' | 'IMPRESSION' | 'OUTBOUND_CLICK' | 'OUTBOUND_CLICK_RATE' | 'PIN_CLICK' | 'PIN_CLICK_RATE' | 'SAVE' | 'SAVE_RATE'>, splitField?: 'NO_SPLIT' | 'APP_TYPE' | 'OWNED_CONTENT' | 'PIN_FORMAT', adAccountId?: string, options?: RequestOptions = {}): Promise<{ [key: string]: AnalyticsMetricsResponse; }> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountAnalytics(startDate, endDate, fromClaimedContent, pinFormat, appTypes, metricTypes, splitField, adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
         * @summary Get user account
         * @throws {RequiredError}
         */
        userAccountGet(adAccountId?: string, options?: RequestOptions = {}): Promise<Account> {
            const localVarFetchArgs = UserAccountApiFetchParamCreator(configuration).userAccountGet(adAccountId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    AdAccountsApi: AdAccountsApiType,

    BoardsApi: BoardsApiType,

    CatalogsApi: CatalogsApiType,

    MediaApi: MediaApiType,

    OauthApi: OauthApiType,

    PinsApi: PinsApiType,

    UserAccountApi: UserAccountApiType,
 }
