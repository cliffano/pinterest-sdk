# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.3.0
#Contact: blah@cliffano.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.4.0
#

require "json"
require "time"

module 
  class AdGroupResponseAllOf
    include JSON::Serializable

    # Optional properties
    # Ad group name.
    @[JSON::Field(key: "name", type: String?, nillable: true, emit_null: false)]
    property name : String?

    # Ad group/entity status.
    @[JSON::Field(key: "status", type: EntityStatus?, nillable: true, emit_null: false)]
    property status : EntityStatus?

    # Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    @[JSON::Field(key: "budget_in_micro_currency", type: Int32?, nillable: true, emit_null: false)]
    property budget_in_micro_currency : Int32?

    # Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    @[JSON::Field(key: "bid_in_micro_currency", type: Int32?, nillable: true, emit_null: false)]
    property bid_in_micro_currency : Int32?

    # Budget type. If DAILY, an ad group's daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
    @[JSON::Field(key: "budget_type", type: String?, nillable: true, emit_null: false)]
    property budget_type : String?

    # Ad group start time. Unix timestamp in seconds. Defaults to current time.
    @[JSON::Field(key: "start_time", type: Int32?, nillable: true, emit_null: false)]
    property start_time : Int32?

    # Ad group end time. Unix timestamp in seconds.
    @[JSON::Field(key: "end_time", type: Int32?, nillable: true, emit_null: false)]
    property end_time : Int32?

    # Ad group targeting specification defining the ad group target audience. For example, '{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}'
    @[JSON::Field(key: "targeting_spec", type: Hash(String, Array(String))?, nillable: true, emit_null: false)]
    property targeting_spec : Hash(String, Array(String))?

    # Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
    @[JSON::Field(key: "lifetime_frequency_cap", type: Int32?, nillable: true, emit_null: false)]
    property lifetime_frequency_cap : Int32?

    # Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
    @[JSON::Field(key: "tracking_urls", type: TrackingUrls?, nillable: true, emit_null: false)]
    property tracking_urls : TrackingUrls?

    # Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    @[JSON::Field(key: "auto_targeting_enabled", type: Bool?, nillable: true, emit_null: false)]
    property auto_targeting_enabled : Bool?

    # <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>.
    @[JSON::Field(key: "placement_group", type: PlacementGroupType?, nillable: true, emit_null: false)]
    property placement_group : PlacementGroupType?

    # Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
    @[JSON::Field(key: "pacing_delivery_type", type: PacingDeliveryType?, nillable: true, emit_null: false)]
    property pacing_delivery_type : PacingDeliveryType?

    # oCPM learn mode
    @[JSON::Field(key: "conversion_learning_mode_type", type: String?, nillable: true, emit_null: false)]
    property conversion_learning_mode_type : String?

    # Ad group summary status.
    @[JSON::Field(key: "summary_status", type: AdGroupSummaryStatus?, nillable: true, emit_null: false)]
    property summary_status : AdGroupSummaryStatus?

    # Feed Profile ID associated to the adgroup.
    @[JSON::Field(key: "feed_profile_id", type: String?, nillable: true, emit_null: false)]
    property feed_profile_id : String?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@name : String?, @status : EntityStatus?, @budget_in_micro_currency : Int32?, @bid_in_micro_currency : Int32?, @budget_type : String?, @start_time : Int32?, @end_time : Int32?, @targeting_spec : Hash(String, Array(String))?, @lifetime_frequency_cap : Int32?, @tracking_urls : TrackingUrls?, @auto_targeting_enabled : Bool?, @placement_group : PlacementGroupType?, @pacing_delivery_type : PacingDeliveryType?, @conversion_learning_mode_type : String?, @summary_status : AdGroupSummaryStatus?, @feed_profile_id : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      budget_type_validator = EnumAttributeValidator.new("String", ["DAILY", "LIFETIME", "CBO_ADGROUP"])
      return false unless budget_type_validator.valid?(@budget_type)
      conversion_learning_mode_type_validator = EnumAttributeValidator.new("String", ["NOT_ACTIVE", "ACTIVE", "null"])
      return false unless conversion_learning_mode_type_validator.valid?(@conversion_learning_mode_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] budget_type Object to be assigned
    def budget_type=(budget_type)
      validator = EnumAttributeValidator.new("String", ["DAILY", "LIFETIME", "CBO_ADGROUP"])
      unless validator.valid?(budget_type)
        raise ArgumentError.new("invalid value for \"budget_type\", must be one of #{validator.allowable_values}.")
      end
      @budget_type = budget_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] conversion_learning_mode_type Object to be assigned
    def conversion_learning_mode_type=(conversion_learning_mode_type)
      validator = EnumAttributeValidator.new("String", ["NOT_ACTIVE", "ACTIVE", "null"])
      unless validator.valid?(conversion_learning_mode_type)
        raise ArgumentError.new("invalid value for \"conversion_learning_mode_type\", must be one of #{validator.allowable_values}.")
      end
      @conversion_learning_mode_type = conversion_learning_mode_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          name == o.name &&
          status == o.status &&
          budget_in_micro_currency == o.budget_in_micro_currency &&
          bid_in_micro_currency == o.bid_in_micro_currency &&
          budget_type == o.budget_type &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          targeting_spec == o.targeting_spec &&
          lifetime_frequency_cap == o.lifetime_frequency_cap &&
          tracking_urls == o.tracking_urls &&
          auto_targeting_enabled == o.auto_targeting_enabled &&
          placement_group == o.placement_group &&
          pacing_delivery_type == o.pacing_delivery_type &&
          conversion_learning_mode_type == o.conversion_learning_mode_type &&
          summary_status == o.summary_status &&
          feed_profile_id == o.feed_profile_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, status, budget_in_micro_currency, bid_in_micro_currency, budget_type, start_time, end_time, targeting_spec, lifetime_frequency_cap, tracking_urls, auto_targeting_enabled, placement_group, pacing_delivery_type, conversion_learning_mode_type, summary_status, feed_profile_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
