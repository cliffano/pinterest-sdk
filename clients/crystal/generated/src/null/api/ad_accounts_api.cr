# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.3.0
#Contact: blah@cliffano.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.4.0
#

require "uri"

module 
  class AdAccountsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get ad account analytics
    # Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array(Hash(String, Object))]
    def ad_account_analytics(ad_account_id : String, start_date : Time, end_date : Time, columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = ad_account_analytics_with_http_info(ad_account_id, start_date, end_date, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get ad account analytics
    # Get analytics for the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array<(Array(Hash(String, Object)), Integer, Hash)>] Array(Hash(String, Object)) data, response status code and response headers
    def ad_account_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_account_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ad_account_analytics")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_account_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.ad_account_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.ad_account_analytics")
      end
      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.ad_account_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.ad_account_analytics")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Hash(String, Object))"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_account_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_account_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Hash(String, Object)).from_json(data), status_code, headers
    end

    # List ad accounts
    # Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
    # @return [Paginated]
    def ad_accounts_list(bookmark : String?, page_size : Int32?, include_shared_accounts : Bool?)
      data, _status_code, _headers = ad_accounts_list_with_http_info(bookmark, page_size, include_shared_accounts)
      data
    end

    # List ad accounts
    # Get a list of the ad_accounts that the \&quot;operation user_account\&quot; has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def ad_accounts_list_with_http_info(bookmark : String?, page_size : Int32?, include_shared_accounts : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_accounts_list ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ad_accounts_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ad_accounts_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/ad_accounts"

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["include_shared_accounts"] = include_shared_accounts.to_s unless include_shared_accounts.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_accounts_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_accounts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Get ad group analytics
    # Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param ad_group_ids [Array(String)] List of Ad group Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array(Hash(String, Object))]
    def ad_groups_analytics(ad_account_id : String, start_date : Time, end_date : Time, ad_group_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = ad_groups_analytics_with_http_info(ad_account_id, start_date, end_date, ad_group_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get ad group analytics
    # Get analytics for the specified ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param ad_group_ids [Array(String)] List of Ad group Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array<(Array(Hash(String, Object)), Integer, Hash)>] Array(Hash(String, Object)) data, response status code and response headers
    def ad_groups_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, ad_group_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_groups_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ad_groups_analytics")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_groups_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.ad_groups_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.ad_groups_analytics")
      end
      # verify the required parameter "ad_group_ids" is set
      if @api_client.config.client_side_validation && ad_group_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_group_ids' when calling AdAccountsApi.ad_groups_analytics")
      end
      if @api_client.config.client_side_validation && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdAccountsApi.ad_groups_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdAccountsApi.ad_groups_analytics, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.ad_groups_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.ad_groups_analytics")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Hash(String, Object))"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_groups_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_groups_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Hash(String, Object)).from_json(data), status_code, headers
    end

    # List ad groups
    # Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Paginated]
    def ad_groups_list(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?, translate_interests_to_names : Bool?)
      data, _status_code, _headers = ad_groups_list_with_http_info(ad_account_id, campaign_ids, ad_group_ids, entity_statuses, page_size, order, bookmark, translate_interests_to_names)
      data
    end

    # List ad groups
    # Get a list of the ad groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def ad_groups_list_with_http_info(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?, translate_interests_to_names : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ad_groups_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ad_groups_list")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ad_groups_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.ad_groups_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.ad_groups_list, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdAccountsApi.ad_groups_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdAccountsApi.ad_groups_list, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "PAUSED", "ARCHIVED"]
      if @api_client.config.client_side_validation && entity_statuses && entity_statuses.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"entity_statuses\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ad_groups_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ad_groups_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ad_groups".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["entity_statuses"] = @api_client.build_collection_param(entity_statuses, :multi)
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["translate_interests_to_names"] = translate_interests_to_names.to_s unless translate_interests_to_names.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ad_groups_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ad_groups_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Get ad analytics
    # Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param ad_ids [Array(String)] List of Ad Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array(Hash(String, Object))]
    def ads_analytics(ad_account_id : String, start_date : Time, end_date : Time, ad_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = ads_analytics_with_http_info(ad_account_id, start_date, end_date, ad_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get ad analytics
    # Get analytics for the specified ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param ad_ids [Array(String)] List of Ad Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array<(Array(Hash(String, Object)), Integer, Hash)>] Array(Hash(String, Object)) data, response status code and response headers
    def ads_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, ad_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ads_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ads_analytics")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ads_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.ads_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.ads_analytics")
      end
      # verify the required parameter "ad_ids" is set
      if @api_client.config.client_side_validation && ad_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_ids' when calling AdAccountsApi.ads_analytics")
      end
      if @api_client.config.client_side_validation && ad_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdAccountsApi.ads_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdAccountsApi.ads_analytics, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.ads_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.ads_analytics")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["ad_ids"] = @api_client.build_collection_param(ad_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Hash(String, Object))"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ads_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ads_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Hash(String, Object)).from_json(data), status_code, headers
    end

    # List ads
    # Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Paginated]
    def ads_list(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, ad_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      data, _status_code, _headers = ads_list_with_http_info(ad_account_id, campaign_ids, ad_group_ids, ad_ids, entity_statuses, page_size, order, bookmark)
      data
    end

    # List ads
    # Get a list of the ads in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def ads_list_with_http_info(ad_account_id : String, campaign_ids : Array(String)?, ad_group_ids : Array(String)?, ad_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.ads_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.ads_list")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.ads_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.ads_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.ads_list, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdAccountsApi.ads_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_group_ids.nil? && ad_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_group_ids\" when calling AdAccountsApi.ads_list, number of items must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && ad_ids.nil? && ad_ids.size > 100
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdAccountsApi.ads_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && ad_ids.nil? && ad_ids.size < 1
        raise ArgumentError.new("invalid value for \"ad_ids\" when calling AdAccountsApi.ads_list, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "PAUSED", "ARCHIVED"]
      if @api_client.config.client_side_validation && entity_statuses && entity_statuses.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"entity_statuses\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ads_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.ads_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/ads".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["ad_group_ids"] = @api_client.build_collection_param(ad_group_ids, :multi)
      query_params["ad_ids"] = @api_client.build_collection_param(ad_ids, :multi)
      query_params["entity_statuses"] = @api_client.build_collection_param(entity_statuses, :multi)
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.ads_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#ads_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Create async request for an account analytics report
    # This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ads_analytics_create_async_request [AdsAnalyticsCreateAsyncRequest] 
    # @return [AdsAnalyticsCreateAsyncResponse]
    def analytics_create_report(ad_account_id : String, ads_analytics_create_async_request : AdsAnalyticsCreateAsyncRequest)
      data, _status_code, _headers = analytics_create_report_with_http_info(ad_account_id, ads_analytics_create_async_request)
      data
    end

    # Create async request for an account analytics report
    # This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param ads_analytics_create_async_request [AdsAnalyticsCreateAsyncRequest] 
    # @return [Array<(AdsAnalyticsCreateAsyncResponse, Integer, Hash)>] AdsAnalyticsCreateAsyncResponse data, response status code and response headers
    def analytics_create_report_with_http_info(ad_account_id : String, ads_analytics_create_async_request : AdsAnalyticsCreateAsyncRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_create_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_create_report")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_create_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "ads_analytics_create_async_request" is set
      if @api_client.config.client_side_validation && ads_analytics_create_async_request.nil?
        raise ArgumentError.new("Missing the required parameter 'ads_analytics_create_async_request' when calling AdAccountsApi.analytics_create_report")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = ads_analytics_create_async_request.to_json

      # return_type
      return_type = "AdsAnalyticsCreateAsyncResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_create_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_create_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdsAnalyticsCreateAsyncResponse.from_json(data), status_code, headers
    end

    # Get the account analytics report created by the async call
    # This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it's valid for an hour. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param token [String] Token returned from the post request creation call
    # @return [AdsAnalyticsGetAsyncResponse]
    def analytics_get_report(ad_account_id : String, token : String)
      data, _status_code, _headers = analytics_get_report_with_http_info(ad_account_id, token)
      data
    end

    # Get the account analytics report created by the async call
    # This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it&#39;s valid for an hour. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param token [String] Token returned from the post request creation call
    # @return [Array<(AdsAnalyticsGetAsyncResponse, Integer, Hash)>] AdsAnalyticsGetAsyncResponse data, response status code and response headers
    def analytics_get_report_with_http_info(ad_account_id : String, token : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.analytics_get_report ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.analytics_get_report")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.analytics_get_report, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "token" is set
      if @api_client.config.client_side_validation && token.nil?
        raise ArgumentError.new("Missing the required parameter 'token' when calling AdAccountsApi.analytics_get_report")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/reports".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["token"] = token.to_s unless token.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AdsAnalyticsGetAsyncResponse"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.analytics_get_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#analytics_get_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AdsAnalyticsGetAsyncResponse.from_json(data), status_code, headers
    end

    # Get campaign analytics
    # Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param campaign_ids [Array(String)] List of Campaign Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array(Hash(String, Object))]
    def campaigns_analytics(ad_account_id : String, start_date : Time, end_date : Time, campaign_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = campaigns_analytics_with_http_info(ad_account_id, start_date, end_date, campaign_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get campaign analytics
    # Get analytics for the specified campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param campaign_ids [Array(String)] List of Campaign Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array<(Array(Hash(String, Object)), Integer, Hash)>] Array(Hash(String, Object)) data, response status code and response headers
    def campaigns_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, campaign_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.campaigns_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.campaigns_analytics")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.campaigns_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.campaigns_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.campaigns_analytics")
      end
      # verify the required parameter "campaign_ids" is set
      if @api_client.config.client_side_validation && campaign_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_ids' when calling AdAccountsApi.campaigns_analytics")
      end
      if @api_client.config.client_side_validation && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.campaigns_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.campaigns_analytics, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.campaigns_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.campaigns_analytics")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Hash(String, Object))"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.campaigns_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#campaigns_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Hash(String, Object)).from_json(data), status_code, headers
    end

    # List campaigns
    # Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Paginated]
    def campaigns_list(ad_account_id : String, campaign_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      data, _status_code, _headers = campaigns_list_with_http_info(ad_account_id, campaign_ids, entity_statuses, page_size, order, bookmark)
      data
    end

    # List campaigns
    # Get a list of the campaigns in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def campaigns_list_with_http_info(ad_account_id : String, campaign_ids : Array(String)?, entity_statuses : Array(String)?, page_size : Int32?, order : String?, bookmark : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.campaigns_list ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.campaigns_list")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.campaigns_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size > 100
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.campaigns_list, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && campaign_ids.nil? && campaign_ids.size < 1
        raise ArgumentError.new("invalid value for \"campaign_ids\" when calling AdAccountsApi.campaigns_list, number of items must be greater than or equal to 1.")
      end

      allowable_values = ["ACTIVE", "PAUSED", "ARCHIVED"]
      if @api_client.config.client_side_validation && entity_statuses && entity_statuses.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"entity_statuses\", must include one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.campaigns_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling AdAccountsApi.campaigns_list, must be greater than or equal to 1.")
      end

      allowable_values = ["ASCENDING", "DESCENDING"]
      if @api_client.config.client_side_validation && order && !allowable_values.includes?(order)
        raise ArgumentError.new("invalid value for \"order\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/campaigns".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["campaign_ids"] = @api_client.build_collection_param(campaign_ids, :multi)
      query_params["entity_statuses"] = @api_client.build_collection_param(entity_statuses, :multi)
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["order"] = order.to_s unless order.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.campaigns_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#campaigns_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Get product group analytics
    # Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param product_group_ids [Array(String)] List of Product group Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array(Hash(String, Object))]
    def product_groups_analytics(ad_account_id : String, start_date : Time, end_date : Time, product_group_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      data, _status_code, _headers = product_groups_analytics_with_http_info(ad_account_id, start_date, end_date, product_group_ids, columns, granularity, click_window_days, engagement_window_days, view_window_days, conversion_report_time)
      data
    end

    # Get product group analytics
    # Get analytics for the specified product groups in the specified &lt;code&gt;ad_account_id&lt;/code&gt;, filtered by the specified options. - The token&#39;s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\&quot;&gt;Business Access&lt;/a&gt;: Admin, Analyst, Campaign Manager.
    # @param ad_account_id [String] Unique identifier of an ad account.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @param product_group_ids [Array(String)] List of Product group Ids to use to filter the results.
    # @param columns [Array(String)] Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned
    # @param granularity [Granularity] Granularity
    # @return [Array<(Array(Hash(String, Object)), Integer, Hash)>] Array(Hash(String, Object)) data, response status code and response headers
    def product_groups_analytics_with_http_info(ad_account_id : String, start_date : Time, end_date : Time, product_group_ids : Array(String), columns : Array(String), granularity : Granularity, click_window_days : Int32?, engagement_window_days : Int32?, view_window_days : Int32?, conversion_report_time : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AdAccountsApi.product_groups_analytics ..."}
      end
      # verify the required parameter "ad_account_id" is set
      if @api_client.config.client_side_validation && ad_account_id.nil?
        raise ArgumentError.new("Missing the required parameter 'ad_account_id' when calling AdAccountsApi.product_groups_analytics")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling AdAccountsApi.product_groups_analytics, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling AdAccountsApi.product_groups_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling AdAccountsApi.product_groups_analytics")
      end
      # verify the required parameter "product_group_ids" is set
      if @api_client.config.client_side_validation && product_group_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'product_group_ids' when calling AdAccountsApi.product_groups_analytics")
      end
      if @api_client.config.client_side_validation && product_group_ids.size > 100
        raise ArgumentError.new("invalid value for \"product_group_ids\" when calling AdAccountsApi.product_groups_analytics, number of items must be less than or equal to 100.")
      end

      if @api_client.config.client_side_validation && product_group_ids.size < 1
        raise ArgumentError.new("invalid value for \"product_group_ids\" when calling AdAccountsApi.product_groups_analytics, number of items must be greater than or equal to 1.")
      end

      # verify the required parameter "columns" is set
      if @api_client.config.client_side_validation && columns.nil?
        raise ArgumentError.new("Missing the required parameter 'columns' when calling AdAccountsApi.product_groups_analytics")
      end
      # verify the required parameter "granularity" is set
      if @api_client.config.client_side_validation && granularity.nil?
        raise ArgumentError.new("Missing the required parameter 'granularity' when calling AdAccountsApi.product_groups_analytics")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && click_window_days && !allowable_values.includes?(click_window_days)
        raise ArgumentError.new("invalid value for \"click_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && engagement_window_days && !allowable_values.includes?(engagement_window_days)
        raise ArgumentError.new("invalid value for \"engagement_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "7", "30", "60"]
      if @api_client.config.client_side_validation && view_window_days && !allowable_values.includes?(view_window_days)
        raise ArgumentError.new("invalid value for \"view_window_days\", must be one of #{allowable_values}")
      end
      allowable_values = ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
      if @api_client.config.client_side_validation && conversion_report_time && !allowable_values.includes?(conversion_report_time)
        raise ArgumentError.new("invalid value for \"conversion_report_time\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ad_accounts/{ad_account_id}/product_groups/analytics".sub("{" + "ad_account_id" + "}", URI.encode_path(ad_account_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["product_group_ids"] = @api_client.build_collection_param(product_group_ids, :multi)
      query_params["columns"] = @api_client.build_collection_param(columns, :csv)
      query_params["granularity"] = granularity.to_s unless granularity.nil?
      query_params["click_window_days"] = click_window_days.to_s unless click_window_days.nil?
      query_params["engagement_window_days"] = engagement_window_days.to_s unless engagement_window_days.nil?
      query_params["view_window_days"] = view_window_days.to_s unless view_window_days.nil?
      query_params["conversion_report_time"] = conversion_report_time.to_s unless conversion_report_time.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Hash(String, Object))"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AdAccountsApi.product_groups_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AdAccountsApi#product_groups_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Hash(String, Object)).from_json(data), status_code, headers
    end
  end
end
