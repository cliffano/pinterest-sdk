# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.3.0
#Contact: pinterest-api@pinterest.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.4.0
#

require "uri"

module 
  class CatalogsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create product group
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create product group to use in Catalogs.
    # @param catalogs_product_group_create_request [CatalogsProductGroupCreateRequest] Request object used to created a catalogs product group.
    # @return [Object]
    def catalogs_product_groups_create(catalogs_product_group_create_request : CatalogsProductGroupCreateRequest)
      data, _status_code, _headers = catalogs_product_groups_create_with_http_info(catalogs_product_group_create_request)
      data
    end

    # Create product group
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
    # @param catalogs_product_group_create_request [CatalogsProductGroupCreateRequest] Request object used to created a catalogs product group.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def catalogs_product_groups_create_with_http_info(catalogs_product_group_create_request : CatalogsProductGroupCreateRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.catalogs_product_groups_create ..."}
      end
      # verify the required parameter "catalogs_product_group_create_request" is set
      if @api_client.config.client_side_validation && catalogs_product_group_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'catalogs_product_group_create_request' when calling CatalogsApi.catalogs_product_groups_create")
      end
      # resource path
      local_var_path = "/catalogs/product_groups"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = catalogs_product_group_create_request.to_json

      # return_type
      return_type = "Object"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"CatalogsApi.catalogs_product_groups_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#catalogs_product_groups_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Object.from_json(data), status_code, headers
    end

    # Delete product group
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
    # @param product_group_id [String] Unique identifier of a product group
    # @return [nil]
    def catalogs_product_groups_delete(product_group_id : String)
      catalogs_product_groups_delete_with_http_info(product_group_id)
      nil
    end

    # Delete product group
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
    # @param product_group_id [String] Unique identifier of a product group
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def catalogs_product_groups_delete_with_http_info(product_group_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.catalogs_product_groups_delete ..."}
      end
      # verify the required parameter "product_group_id" is set
      if @api_client.config.client_side_validation && product_group_id.nil?
        raise ArgumentError.new("Missing the required parameter 'product_group_id' when calling CatalogsApi.catalogs_product_groups_delete")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && product_group_id !~ pattern
        raise ArgumentError.new("invalid value for \"product_group_id\" when calling CatalogsApi.catalogs_product_groups_delete, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/catalogs/product_groups/{product_group_id}".sub("{" + "product_group_id" + "}", URI.encode_path(product_group_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"CatalogsApi.catalogs_product_groups_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#catalogs_product_groups_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get product groups list
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
    # @param feed_id [String] Unique identifier of a feed
    # @return [Paginated]
    def catalogs_product_groups_list(feed_id : String, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = catalogs_product_groups_list_with_http_info(feed_id, bookmark, page_size)
      data
    end

    # Get product groups list
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
    # @param feed_id [String] Unique identifier of a feed
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def catalogs_product_groups_list_with_http_info(feed_id : String, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.catalogs_product_groups_list ..."}
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling CatalogsApi.catalogs_product_groups_list")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && feed_id !~ pattern
        raise ArgumentError.new("invalid value for \"feed_id\" when calling CatalogsApi.catalogs_product_groups_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling CatalogsApi.catalogs_product_groups_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling CatalogsApi.catalogs_product_groups_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/catalogs/product_groups"

      # query parameters
      query_params = Hash(String, String).new
      query_params["feed_id"] = feed_id.to_s unless feed_id.nil?
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CatalogsApi.catalogs_product_groups_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#catalogs_product_groups_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Update product group
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update product group to use in Catalogs.
    # @param product_group_id [String] Unique identifier of a product group
    # @param catalogs_product_group_update_request [CatalogsProductGroupUpdateRequest] Request object used to Update a catalogs product group.
    # @return [CatalogsProductGroup]
    def catalogs_product_groups_update(product_group_id : String, catalogs_product_group_update_request : CatalogsProductGroupUpdateRequest)
      data, _status_code, _headers = catalogs_product_groups_update_with_http_info(product_group_id, catalogs_product_group_update_request)
      data
    end

    # Update product group
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
    # @param product_group_id [String] Unique identifier of a product group
    # @param catalogs_product_group_update_request [CatalogsProductGroupUpdateRequest] Request object used to Update a catalogs product group.
    # @return [Array<(CatalogsProductGroup, Integer, Hash)>] CatalogsProductGroup data, response status code and response headers
    def catalogs_product_groups_update_with_http_info(product_group_id : String, catalogs_product_group_update_request : CatalogsProductGroupUpdateRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.catalogs_product_groups_update ..."}
      end
      # verify the required parameter "product_group_id" is set
      if @api_client.config.client_side_validation && product_group_id.nil?
        raise ArgumentError.new("Missing the required parameter 'product_group_id' when calling CatalogsApi.catalogs_product_groups_update")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && product_group_id !~ pattern
        raise ArgumentError.new("invalid value for \"product_group_id\" when calling CatalogsApi.catalogs_product_groups_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "catalogs_product_group_update_request" is set
      if @api_client.config.client_side_validation && catalogs_product_group_update_request.nil?
        raise ArgumentError.new("Missing the required parameter 'catalogs_product_group_update_request' when calling CatalogsApi.catalogs_product_groups_update")
      end
      # resource path
      local_var_path = "/catalogs/product_groups/{product_group_id}".sub("{" + "product_group_id" + "}", URI.encode_path(product_group_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = catalogs_product_group_update_request.to_json

      # return_type
      return_type = "CatalogsProductGroup"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"CatalogsApi.catalogs_product_groups_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#catalogs_product_groups_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsProductGroup.from_json(data), status_code, headers
    end

    # List processing results for a given feed
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
    # @param feed_id [String] Unique identifier of a feed
    # @return [Paginated]
    def feed_processing_results_list(feed_id : String, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = feed_processing_results_list_with_http_info(feed_id, bookmark, page_size)
      data
    end

    # List processing results for a given feed
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
    # @param feed_id [String] Unique identifier of a feed
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def feed_processing_results_list_with_http_info(feed_id : String, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.feed_processing_results_list ..."}
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling CatalogsApi.feed_processing_results_list")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && feed_id !~ pattern
        raise ArgumentError.new("invalid value for \"feed_id\" when calling CatalogsApi.feed_processing_results_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling CatalogsApi.feed_processing_results_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling CatalogsApi.feed_processing_results_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/catalogs/feeds/{feed_id}/processing_results".sub("{" + "feed_id" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CatalogsApi.feed_processing_results_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#feed_processing_results_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Create feed
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
    # @param catalogs_feeds_create_request [CatalogsFeedsCreateRequest] Request object used to created a feed.
    # @return [CatalogsFeed]
    def feeds_create(catalogs_feeds_create_request : CatalogsFeedsCreateRequest)
      data, _status_code, _headers = feeds_create_with_http_info(catalogs_feeds_create_request)
      data
    end

    # Create feed
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
    # @param catalogs_feeds_create_request [CatalogsFeedsCreateRequest] Request object used to created a feed.
    # @return [Array<(CatalogsFeed, Integer, Hash)>] CatalogsFeed data, response status code and response headers
    def feeds_create_with_http_info(catalogs_feeds_create_request : CatalogsFeedsCreateRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.feeds_create ..."}
      end
      # verify the required parameter "catalogs_feeds_create_request" is set
      if @api_client.config.client_side_validation && catalogs_feeds_create_request.nil?
        raise ArgumentError.new("Missing the required parameter 'catalogs_feeds_create_request' when calling CatalogsApi.feeds_create")
      end
      # resource path
      local_var_path = "/catalogs/feeds"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = catalogs_feeds_create_request.to_json

      # return_type
      return_type = "CatalogsFeed"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"CatalogsApi.feeds_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#feeds_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsFeed.from_json(data), status_code, headers
    end

    # Delete feed
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
    # @param feed_id [String] Unique identifier of a feed
    # @return [nil]
    def feeds_delete(feed_id : String)
      feeds_delete_with_http_info(feed_id)
      nil
    end

    # Delete feed
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
    # @param feed_id [String] Unique identifier of a feed
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def feeds_delete_with_http_info(feed_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.feeds_delete ..."}
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling CatalogsApi.feeds_delete")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && feed_id !~ pattern
        raise ArgumentError.new("invalid value for \"feed_id\" when calling CatalogsApi.feeds_delete, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/catalogs/feeds/{feed_id}".sub("{" + "feed_id" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"CatalogsApi.feeds_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#feeds_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get feed
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
    # @param feed_id [String] Unique identifier of a feed
    # @return [CatalogsFeed]
    def feeds_get(feed_id : String)
      data, _status_code, _headers = feeds_get_with_http_info(feed_id)
      data
    end

    # Get feed
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
    # @param feed_id [String] Unique identifier of a feed
    # @return [Array<(CatalogsFeed, Integer, Hash)>] CatalogsFeed data, response status code and response headers
    def feeds_get_with_http_info(feed_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.feeds_get ..."}
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling CatalogsApi.feeds_get")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && feed_id !~ pattern
        raise ArgumentError.new("invalid value for \"feed_id\" when calling CatalogsApi.feeds_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/catalogs/feeds/{feed_id}".sub("{" + "feed_id" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CatalogsFeed"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CatalogsApi.feeds_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#feeds_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsFeed.from_json(data), status_code, headers
    end

    # List feeds
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
    # @return [Paginated]
    def feeds_list(bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = feeds_list_with_http_info(bookmark, page_size)
      data
    end

    # List feeds
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def feeds_list_with_http_info(bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.feeds_list ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling CatalogsApi.feeds_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling CatalogsApi.feeds_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/catalogs/feeds"

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CatalogsApi.feeds_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#feeds_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Update feed
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
    # @param feed_id [String] Unique identifier of a feed
    # @param catalogs_feeds_update_request [CatalogsFeedsUpdateRequest] Request object used to update a feed.
    # @return [CatalogsFeed]
    def feeds_update(feed_id : String, catalogs_feeds_update_request : CatalogsFeedsUpdateRequest)
      data, _status_code, _headers = feeds_update_with_http_info(feed_id, catalogs_feeds_update_request)
      data
    end

    # Update feed
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
    # @param feed_id [String] Unique identifier of a feed
    # @param catalogs_feeds_update_request [CatalogsFeedsUpdateRequest] Request object used to update a feed.
    # @return [Array<(CatalogsFeed, Integer, Hash)>] CatalogsFeed data, response status code and response headers
    def feeds_update_with_http_info(feed_id : String, catalogs_feeds_update_request : CatalogsFeedsUpdateRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.feeds_update ..."}
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling CatalogsApi.feeds_update")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && feed_id !~ pattern
        raise ArgumentError.new("invalid value for \"feed_id\" when calling CatalogsApi.feeds_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "catalogs_feeds_update_request" is set
      if @api_client.config.client_side_validation && catalogs_feeds_update_request.nil?
        raise ArgumentError.new("Missing the required parameter 'catalogs_feeds_update_request' when calling CatalogsApi.feeds_update")
      end
      # resource path
      local_var_path = "/catalogs/feeds/{feed_id}".sub("{" + "feed_id" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = catalogs_feeds_update_request.to_json

      # return_type
      return_type = "CatalogsFeed"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"CatalogsApi.feeds_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#feeds_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsFeed.from_json(data), status_code, headers
    end

    # Get catalogs items batch
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
    # @param batch_id [String] Id of a catalogs items batch to fetch
    # @return [CatalogsItemsBatch]
    def items_batch_get(batch_id : String)
      data, _status_code, _headers = items_batch_get_with_http_info(batch_id)
      data
    end

    # Get catalogs items batch
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
    # @param batch_id [String] Id of a catalogs items batch to fetch
    # @return [Array<(CatalogsItemsBatch, Integer, Hash)>] CatalogsItemsBatch data, response status code and response headers
    def items_batch_get_with_http_info(batch_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.items_batch_get ..."}
      end
      # verify the required parameter "batch_id" is set
      if @api_client.config.client_side_validation && batch_id.nil?
        raise ArgumentError.new("Missing the required parameter 'batch_id' when calling CatalogsApi.items_batch_get")
      end
      # resource path
      local_var_path = "/catalogs/items/batch/{batch_id}".sub("{" + "batch_id" + "}", URI.encode_path(batch_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CatalogsItemsBatch"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CatalogsApi.items_batch_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#items_batch_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsItemsBatch.from_json(data), status_code, headers
    end

    # Perform an operation on an item batch
    # <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
    # @param catalogs_items_batch_request [CatalogsItemsBatchRequest] Request object used to create catalogs items in a batch
    # @return [CatalogsItemsBatch]
    def items_batch_post(catalogs_items_batch_request : CatalogsItemsBatchRequest)
      data, _status_code, _headers = items_batch_post_with_http_info(catalogs_items_batch_request)
      data
    end

    # Perform an operation on an item batch
    # &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
    # @param catalogs_items_batch_request [CatalogsItemsBatchRequest] Request object used to create catalogs items in a batch
    # @return [Array<(CatalogsItemsBatch, Integer, Hash)>] CatalogsItemsBatch data, response status code and response headers
    def items_batch_post_with_http_info(catalogs_items_batch_request : CatalogsItemsBatchRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.items_batch_post ..."}
      end
      # verify the required parameter "catalogs_items_batch_request" is set
      if @api_client.config.client_side_validation && catalogs_items_batch_request.nil?
        raise ArgumentError.new("Missing the required parameter 'catalogs_items_batch_request' when calling CatalogsApi.items_batch_post")
      end
      # resource path
      local_var_path = "/catalogs/items/batch"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = catalogs_items_batch_request.to_json

      # return_type
      return_type = "CatalogsItemsBatch"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"CatalogsApi.items_batch_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#items_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsItemsBatch.from_json(data), status_code, headers
    end

    # Get catalogs items
    # Get the items of the catalog created by the \"operating user_account\"
    # @param country [String] Country for the Catalogs Items
    # @param item_ids [Array(String)] Catalos Item ids
    # @param language [String] Language for the Catalogs Items
    # @return [CatalogsItems]
    def items_get(country : String, item_ids : Array(String), language : String)
      data, _status_code, _headers = items_get_with_http_info(country, item_ids, language)
      data
    end

    # Get catalogs items
    # Get the items of the catalog created by the \&quot;operating user_account\&quot;
    # @param country [String] Country for the Catalogs Items
    # @param item_ids [Array(String)] Catalos Item ids
    # @param language [String] Language for the Catalogs Items
    # @return [Array<(CatalogsItems, Integer, Hash)>] CatalogsItems data, response status code and response headers
    def items_get_with_http_info(country : String, item_ids : Array(String), language : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: CatalogsApi.items_get ..."}
      end
      # verify the required parameter "country" is set
      if @api_client.config.client_side_validation && country.nil?
        raise ArgumentError.new("Missing the required parameter 'country' when calling CatalogsApi.items_get")
      end
      # verify the required parameter "item_ids" is set
      if @api_client.config.client_side_validation && item_ids.nil?
        raise ArgumentError.new("Missing the required parameter 'item_ids' when calling CatalogsApi.items_get")
      end
      # verify the required parameter "language" is set
      if @api_client.config.client_side_validation && language.nil?
        raise ArgumentError.new("Missing the required parameter 'language' when calling CatalogsApi.items_get")
      end
      # resource path
      local_var_path = "/catalogs/items"

      # query parameters
      query_params = Hash(String, String).new
      query_params["country"] = country.to_s unless country.nil?
      query_params["item_ids"] = @api_client.build_collection_param(item_ids, :multi)
      query_params["language"] = language.to_s unless language.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CatalogsItems"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CatalogsApi.items_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CatalogsApi#items_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CatalogsItems.from_json(data), status_code, headers
    end
  end
end
