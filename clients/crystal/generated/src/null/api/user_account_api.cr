# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.3.0
#Contact: pinterest-api@pinterest.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.4.0
#

require "uri"

module 
  class UserAccountApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get user account analytics
    # Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @return [Hash(String, AnalyticsMetricsResponse)]
    def user_account_analytics(start_date : Time, end_date : Time, from_claimed_content : String?, pin_format : String?, app_types : String?, metric_types : Array(String)?, split_field : String?, ad_account_id : String?)
      data, _status_code, _headers = user_account_analytics_with_http_info(start_date, end_date, from_claimed_content, pin_format, app_types, metric_types, split_field, ad_account_id)
      data
    end

    # Get user account analytics
    # Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
    # @param start_date [Time] Metric report start date (UTC). Format: YYYY-MM-DD
    # @param end_date [Time] Metric report end date (UTC). Format: YYYY-MM-DD
    # @return [Array<(Hash(String, AnalyticsMetricsResponse), Integer, Hash)>] Hash(String, AnalyticsMetricsResponse) data, response status code and response headers
    def user_account_analytics_with_http_info(start_date : Time, end_date : Time, from_claimed_content : String?, pin_format : String?, app_types : String?, metric_types : Array(String)?, split_field : String?, ad_account_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UserAccountApi.user_account_analytics ..."}
      end
      # verify the required parameter "start_date" is set
      if @api_client.config.client_side_validation && start_date.nil?
        raise ArgumentError.new("Missing the required parameter 'start_date' when calling UserAccountApi.user_account_analytics")
      end
      # verify the required parameter "end_date" is set
      if @api_client.config.client_side_validation && end_date.nil?
        raise ArgumentError.new("Missing the required parameter 'end_date' when calling UserAccountApi.user_account_analytics")
      end
      allowable_values = ["OTHER", "CLAIMED", "BOTH"]
      if @api_client.config.client_side_validation && from_claimed_content && !allowable_values.includes?(from_claimed_content)
        raise ArgumentError.new("invalid value for \"from_claimed_content\", must be one of #{allowable_values}")
      end
      allowable_values = ["ALL", "PRODUCT", "REGULAR", "VIDEO"]
      if @api_client.config.client_side_validation && pin_format && !allowable_values.includes?(pin_format)
        raise ArgumentError.new("invalid value for \"pin_format\", must be one of #{allowable_values}")
      end
      allowable_values = ["ALL", "MOBILE", "TABLET", "WEB"]
      if @api_client.config.client_side_validation && app_types && !allowable_values.includes?(app_types)
        raise ArgumentError.new("invalid value for \"app_types\", must be one of #{allowable_values}")
      end
      allowable_values = ["ENGAGEMENT", "ENGAGEMENT_RATE", "IMPRESSION", "OUTBOUND_CLICK", "OUTBOUND_CLICK_RATE", "PIN_CLICK", "PIN_CLICK_RATE", "SAVE", "SAVE_RATE"]
      if @api_client.config.client_side_validation && metric_types && metric_types.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"metric_types\", must include one of #{allowable_values}")
      end
      allowable_values = ["NO_SPLIT", "APP_TYPE", "OWNED_CONTENT", "PIN_FORMAT"]
      if @api_client.config.client_side_validation && split_field && !allowable_values.includes?(split_field)
        raise ArgumentError.new("invalid value for \"split_field\", must be one of #{allowable_values}")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id.nil? && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling UserAccountApi.user_account_analytics, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/user_account/analytics"

      # query parameters
      query_params = Hash(String, String).new
      query_params["start_date"] = start_date.to_s unless start_date.nil?
      query_params["end_date"] = end_date.to_s unless end_date.nil?
      query_params["from_claimed_content"] = from_claimed_content.to_s unless from_claimed_content.nil?
      query_params["pin_format"] = pin_format.to_s unless pin_format.nil?
      query_params["app_types"] = app_types.to_s unless app_types.nil?
      query_params["metric_types"] = @api_client.build_collection_param(metric_types, :csv)
      query_params["split_field"] = split_field.to_s unless split_field.nil?
      query_params["ad_account_id"] = ad_account_id.to_s unless ad_account_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Hash(String, AnalyticsMetricsResponse)"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UserAccountApi.user_account_analytics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserAccountApi#user_account_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Hash(String, AnalyticsMetricsResponse).from_json(data), status_code, headers
    end

    # Get user account
    # Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/api/v5/#tag/Understanding-business-access'>Understanding Business Access</a> for more information.
    # @return [Account]
    def user_account_get(ad_account_id : String?)
      data, _status_code, _headers = user_account_get_with_http_info(ad_account_id)
      data
    end

    # Get user account
    # Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
    # @return [Array<(Account, Integer, Hash)>] Account data, response status code and response headers
    def user_account_get_with_http_info(ad_account_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UserAccountApi.user_account_get ..."}
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && ad_account_id.nil? && ad_account_id !~ pattern
        raise ArgumentError.new("invalid value for \"ad_account_id\" when calling UserAccountApi.user_account_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/user_account"

      # query parameters
      query_params = Hash(String, String).new
      query_params["ad_account_id"] = ad_account_id.to_s unless ad_account_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Account"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UserAccountApi.user_account_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserAccountApi#user_account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Account.from_json(data), status_code, headers
    end
  end
end
