# #Pinterest REST API
#
##Pinterest's REST API
#
#The version of the OpenAPI document: 5.3.0
#Contact: blah@cliffano.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.4.0
#

require "uri"

module 
  class BoardsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create board section
    # Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param board_section [BoardSection] Create a board section.
    # @return [BoardSection]
    def board_sections_create(board_id : String, board_section : BoardSection)
      data, _status_code, _headers = board_sections_create_with_http_info(board_id, board_section)
      data
    end

    # Create board section
    # Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param board_section [BoardSection] Create a board section.
    # @return [Array<(BoardSection, Integer, Hash)>] BoardSection data, response status code and response headers
    def board_sections_create_with_http_info(board_id : String, board_section : BoardSection)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.board_sections_create ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.board_sections_create")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.board_sections_create, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "board_section" is set
      if @api_client.config.client_side_validation && board_section.nil?
        raise ArgumentError.new("Missing the required parameter 'board_section' when calling BoardsApi.board_sections_create")
      end
      # resource path
      local_var_path = "/boards/{board_id}/sections".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = board_section.to_json

      # return_type
      return_type = "BoardSection"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BoardsApi.board_sections_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#board_sections_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BoardSection.from_json(data), status_code, headers
    end

    # Delete board section
    # Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param section_id [String] Unique identifier of a board section.
    # @return [nil]
    def board_sections_delete(board_id : String, section_id : String)
      board_sections_delete_with_http_info(board_id, section_id)
      nil
    end

    # Delete board section
    # Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param section_id [String] Unique identifier of a board section.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def board_sections_delete_with_http_info(board_id : String, section_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.board_sections_delete ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.board_sections_delete")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.board_sections_delete, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling BoardsApi.board_sections_delete")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && section_id !~ pattern
        raise ArgumentError.new("invalid value for \"section_id\" when calling BoardsApi.board_sections_delete, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/boards/{board_id}/sections/{section_id}".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BoardsApi.board_sections_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#board_sections_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # List board sections
    # Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Paginated]
    def board_sections_list(board_id : String, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = board_sections_list_with_http_info(board_id, bookmark, page_size)
      data
    end

    # List board sections
    # Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def board_sections_list_with_http_info(board_id : String, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.board_sections_list ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.board_sections_list")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.board_sections_list, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.board_sections_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.board_sections_list, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/boards/{board_id}/sections".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BoardsApi.board_sections_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#board_sections_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # List Pins on board section
    # Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param section_id [String] Unique identifier of a board section.
    # @return [Paginated]
    def board_sections_list_pins(board_id : String, section_id : String, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = board_sections_list_pins_with_http_info(board_id, section_id, bookmark, page_size)
      data
    end

    # List Pins on board section
    # Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param section_id [String] Unique identifier of a board section.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def board_sections_list_pins_with_http_info(board_id : String, section_id : String, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.board_sections_list_pins ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.board_sections_list_pins")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.board_sections_list_pins, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling BoardsApi.board_sections_list_pins")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && section_id !~ pattern
        raise ArgumentError.new("invalid value for \"section_id\" when calling BoardsApi.board_sections_list_pins, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.board_sections_list_pins, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.board_sections_list_pins, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/boards/{board_id}/sections/{section_id}/pins".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BoardsApi.board_sections_list_pins",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#board_sections_list_pins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Update board section
    # Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param section_id [String] Unique identifier of a board section.
    # @param board_section [BoardSection] Update a board section.
    # @return [BoardSection]
    def board_sections_update(board_id : String, section_id : String, board_section : BoardSection)
      data, _status_code, _headers = board_sections_update_with_http_info(board_id, section_id, board_section)
      data
    end

    # Update board section
    # Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @param section_id [String] Unique identifier of a board section.
    # @param board_section [BoardSection] Update a board section.
    # @return [Array<(BoardSection, Integer, Hash)>] BoardSection data, response status code and response headers
    def board_sections_update_with_http_info(board_id : String, section_id : String, board_section : BoardSection)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.board_sections_update ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.board_sections_update")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.board_sections_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "section_id" is set
      if @api_client.config.client_side_validation && section_id.nil?
        raise ArgumentError.new("Missing the required parameter 'section_id' when calling BoardsApi.board_sections_update")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && section_id !~ pattern
        raise ArgumentError.new("invalid value for \"section_id\" when calling BoardsApi.board_sections_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "board_section" is set
      if @api_client.config.client_side_validation && board_section.nil?
        raise ArgumentError.new("Missing the required parameter 'board_section' when calling BoardsApi.board_sections_update")
      end
      # resource path
      local_var_path = "/boards/{board_id}/sections/{section_id}".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s)).sub("{" + "section_id" + "}", URI.encode_path(section_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = board_section.to_json

      # return_type
      return_type = "BoardSection"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"BoardsApi.board_sections_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#board_sections_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BoardSection.from_json(data), status_code, headers
    end

    # Create board
    # Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
    # @param board [Board] Create a board using a single board json object.
    # @return [Board]
    def boards_create(board : Board)
      data, _status_code, _headers = boards_create_with_http_info(board)
      data
    end

    # Create board
    # Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board [Board] Create a board using a single board json object.
    # @return [Array<(Board, Integer, Hash)>] Board data, response status code and response headers
    def boards_create_with_http_info(board : Board)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.boards_create ..."}
      end
      # verify the required parameter "board" is set
      if @api_client.config.client_side_validation && board.nil?
        raise ArgumentError.new("Missing the required parameter 'board' when calling BoardsApi.boards_create")
      end
      # resource path
      local_var_path = "/boards"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = board.to_json

      # return_type
      return_type = "Board"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BoardsApi.boards_create",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#boards_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Board.from_json(data), status_code, headers
    end

    # Delete board
    # Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [nil]
    def boards_delete(board_id : String)
      boards_delete_with_http_info(board_id)
      nil
    end

    # Delete board
    # Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def boards_delete_with_http_info(board_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.boards_delete ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.boards_delete")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.boards_delete, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/boards/{board_id}".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BoardsApi.boards_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#boards_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get board
    # Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Board]
    def boards_get(board_id : String)
      data, _status_code, _headers = boards_get_with_http_info(board_id)
      data
    end

    # Get board
    # Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Array<(Board, Integer, Hash)>] Board data, response status code and response headers
    def boards_get_with_http_info(board_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.boards_get ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.boards_get")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.boards_get, must conform to the pattern #{pattern}.")
      end

      # resource path
      local_var_path = "/boards/{board_id}".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Board"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BoardsApi.boards_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#boards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Board.from_json(data), status_code, headers
    end

    # List boards
    # Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
    # @return [Paginated]
    def boards_list(bookmark : String?, page_size : Int32?, privacy : String?)
      data, _status_code, _headers = boards_list_with_http_info(bookmark, page_size, privacy)
      data
    end

    # List boards
    # Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def boards_list_with_http_info(bookmark : String?, page_size : Int32?, privacy : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.boards_list ..."}
      end
      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.boards_list, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.boards_list, must be greater than or equal to 1.")
      end

      allowable_values = ["PUBLIC", "PROTECTED", "SECRET"]
      if @api_client.config.client_side_validation && privacy && !allowable_values.includes?(privacy)
        raise ArgumentError.new("invalid value for \"privacy\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/boards"

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?
      query_params["privacy"] = privacy.to_s unless privacy.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BoardsApi.boards_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#boards_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # List Pins on board
    # Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Paginated]
    def boards_list_pins(board_id : String, bookmark : String?, page_size : Int32?)
      data, _status_code, _headers = boards_list_pins_with_http_info(board_id, bookmark, page_size)
      data
    end

    # List Pins on board
    # Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
    # @param board_id [String] Unique identifier of a board.
    # @return [Array<(Paginated, Integer, Hash)>] Paginated data, response status code and response headers
    def boards_list_pins_with_http_info(board_id : String, bookmark : String?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.boards_list_pins ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.boards_list_pins")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.boards_list_pins, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size > 100
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.boards_list_pins, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !page_size.nil? && page_size < 1
        raise ArgumentError.new("invalid value for \"page_size\" when calling BoardsApi.boards_list_pins, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/boards/{board_id}/pins".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["bookmark"] = bookmark.to_s unless bookmark.nil?
      query_params["page_size"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Paginated"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BoardsApi.boards_list_pins",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#boards_list_pins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Paginated.from_json(data), status_code, headers
    end

    # Update board
    # Update a board owned by the \"operating user_account\".
    # @param board_id [String] Unique identifier of a board.
    # @param board_update [BoardUpdate] Update a board.
    # @return [Board]
    def boards_update(board_id : String, board_update : BoardUpdate)
      data, _status_code, _headers = boards_update_with_http_info(board_id, board_update)
      data
    end

    # Update board
    # Update a board owned by the \&quot;operating user_account\&quot;.
    # @param board_id [String] Unique identifier of a board.
    # @param board_update [BoardUpdate] Update a board.
    # @return [Array<(Board, Integer, Hash)>] Board data, response status code and response headers
    def boards_update_with_http_info(board_id : String, board_update : BoardUpdate)
      if @api_client.config.debugging
        Log.debug {"Calling API: BoardsApi.boards_update ..."}
      end
      # verify the required parameter "board_id" is set
      if @api_client.config.client_side_validation && board_id.nil?
        raise ArgumentError.new("Missing the required parameter 'board_id' when calling BoardsApi.boards_update")
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && board_id !~ pattern
        raise ArgumentError.new("invalid value for \"board_id\" when calling BoardsApi.boards_update, must conform to the pattern #{pattern}.")
      end

      # verify the required parameter "board_update" is set
      if @api_client.config.client_side_validation && board_update.nil?
        raise ArgumentError.new("Missing the required parameter 'board_update' when calling BoardsApi.boards_update")
      end
      # resource path
      local_var_path = "/boards/{board_id}".sub("{" + "board_id" + "}", URI.encode_path(board_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = board_update.to_json

      # return_type
      return_type = "Board"

      # auth_names
      auth_names = ["pinterest_oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"BoardsApi.boards_update",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BoardsApi#boards_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Board.from_json(data), status_code, headers
    end
  end
end
