/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * OpenAPI spec version: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ItemAttributes } from '../models/ItemAttributes';
import { ItemCreateBatchRecord } from '../models/ItemCreateBatchRecord';
import { ItemDeleteBatchRecord } from '../models/ItemDeleteBatchRecord';
import { ItemDeleteDiscontinuedBatchRecord } from '../models/ItemDeleteDiscontinuedBatchRecord';
import { ItemUpdateBatchRecord } from '../models/ItemUpdateBatchRecord';
import { ItemUpsertBatchRecord } from '../models/ItemUpsertBatchRecord';
import { UpdateMaskFieldType } from '../models/UpdateMaskFieldType';
import { HttpFile } from '../http/http';

/**
* Object describing an item batch record
*/
export class ItemBatchRecord {
    /**
    * The catalog item id in the merchant namespace
    */
    'itemId'?: string;
    'attributes'?: ItemAttributes;
    /**
    * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
    */
    'updateMask'?: Array<UpdateMaskFieldType> | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "ItemAttributes",
            "format": ""
        },
        {
            "name": "updateMask",
            "baseName": "update_mask",
            "type": "Array<UpdateMaskFieldType>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ItemBatchRecord.attributeTypeMap;
    }

    public constructor() {
    }
}

