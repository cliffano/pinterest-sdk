// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CatalogsFeed,
    CatalogsFeedsCreateRequest,
    CatalogsFeedsUpdateRequest,
    CatalogsItems,
    CatalogsItemsBatch,
    CatalogsItemsBatchRequest,
    CatalogsProductGroup,
    CatalogsProductGroupCreateRequest,
    CatalogsProductGroupUpdateRequest,
    Paginated,
} from '../models';

export interface CatalogsProductGroupsCreateRequest {
    catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest;
}

export interface CatalogsProductGroupsDeleteRequest {
    productGroupId: string;
}

export interface CatalogsProductGroupsListRequest {
    feedId: string;
    bookmark?: string;
    pageSize?: number;
}

export interface CatalogsProductGroupsUpdateRequest {
    productGroupId: string;
    catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest;
}

export interface FeedProcessingResultsListRequest {
    feedId: string;
    bookmark?: string;
    pageSize?: number;
}

export interface FeedsCreateRequest {
    catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest;
}

export interface FeedsDeleteRequest {
    feedId: string;
}

export interface FeedsGetRequest {
    feedId: string;
}

export interface FeedsListRequest {
    bookmark?: string;
    pageSize?: number;
}

export interface FeedsUpdateRequest {
    feedId: string;
    catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest;
}

export interface ItemsBatchGetRequest {
    batchId: string;
}

export interface ItemsBatchPostRequest {
    catalogsItemsBatchRequest: CatalogsItemsBatchRequest;
}

export interface ItemsGetRequest {
    country: string;
    itemIds: Array<string>;
    language: string;
}

/**
 * no description
 */
export class CatalogsApi extends BaseAPI {

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
     * Create product group
     */
    catalogsProductGroupsCreate({ catalogsProductGroupCreateRequest }: CatalogsProductGroupsCreateRequest): Observable<object>
    catalogsProductGroupsCreate({ catalogsProductGroupCreateRequest }: CatalogsProductGroupsCreateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<object>>
    catalogsProductGroupsCreate({ catalogsProductGroupCreateRequest }: CatalogsProductGroupsCreateRequest, opts?: OperationOpts): Observable<object | RawAjaxResponse<object>> {
        throwIfNullOrUndefined(catalogsProductGroupCreateRequest, 'catalogsProductGroupCreateRequest', 'catalogsProductGroupsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<object>({
            url: '/catalogs/product_groups',
            method: 'POST',
            headers,
            body: catalogsProductGroupCreateRequest,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
     * Delete product group
     */
    catalogsProductGroupsDelete({ productGroupId }: CatalogsProductGroupsDeleteRequest): Observable<void>
    catalogsProductGroupsDelete({ productGroupId }: CatalogsProductGroupsDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    catalogsProductGroupsDelete({ productGroupId }: CatalogsProductGroupsDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(productGroupId, 'productGroupId', 'catalogsProductGroupsDelete');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/catalogs/product_groups/{product_group_id}'.replace('{product_group_id}', encodeURI(productGroupId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
     * Get product groups list
     */
    catalogsProductGroupsList({ feedId, bookmark, pageSize }: CatalogsProductGroupsListRequest): Observable<Paginated & object>
    catalogsProductGroupsList({ feedId, bookmark, pageSize }: CatalogsProductGroupsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    catalogsProductGroupsList({ feedId, bookmark, pageSize }: CatalogsProductGroupsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {
        throwIfNullOrUndefined(feedId, 'feedId', 'catalogsProductGroupsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'feed_id': feedId,
        };

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<Paginated & object>({
            url: '/catalogs/product_groups',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
     * Update product group
     */
    catalogsProductGroupsUpdate({ productGroupId, catalogsProductGroupUpdateRequest }: CatalogsProductGroupsUpdateRequest): Observable<CatalogsProductGroup>
    catalogsProductGroupsUpdate({ productGroupId, catalogsProductGroupUpdateRequest }: CatalogsProductGroupsUpdateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsProductGroup>>
    catalogsProductGroupsUpdate({ productGroupId, catalogsProductGroupUpdateRequest }: CatalogsProductGroupsUpdateRequest, opts?: OperationOpts): Observable<CatalogsProductGroup | RawAjaxResponse<CatalogsProductGroup>> {
        throwIfNullOrUndefined(productGroupId, 'productGroupId', 'catalogsProductGroupsUpdate');
        throwIfNullOrUndefined(catalogsProductGroupUpdateRequest, 'catalogsProductGroupUpdateRequest', 'catalogsProductGroupsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CatalogsProductGroup>({
            url: '/catalogs/product_groups/{product_group_id}'.replace('{product_group_id}', encodeURI(productGroupId)),
            method: 'PATCH',
            headers,
            body: catalogsProductGroupUpdateRequest,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
     * List processing results for a given feed
     */
    feedProcessingResultsList({ feedId, bookmark, pageSize }: FeedProcessingResultsListRequest): Observable<Paginated & object>
    feedProcessingResultsList({ feedId, bookmark, pageSize }: FeedProcessingResultsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    feedProcessingResultsList({ feedId, bookmark, pageSize }: FeedProcessingResultsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {
        throwIfNullOrUndefined(feedId, 'feedId', 'feedProcessingResultsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<Paginated & object>({
            url: '/catalogs/feeds/{feed_id}/processing_results'.replace('{feed_id}', encodeURI(feedId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
     * Create feed
     */
    feedsCreate({ catalogsFeedsCreateRequest }: FeedsCreateRequest): Observable<CatalogsFeed>
    feedsCreate({ catalogsFeedsCreateRequest }: FeedsCreateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsFeed>>
    feedsCreate({ catalogsFeedsCreateRequest }: FeedsCreateRequest, opts?: OperationOpts): Observable<CatalogsFeed | RawAjaxResponse<CatalogsFeed>> {
        throwIfNullOrUndefined(catalogsFeedsCreateRequest, 'catalogsFeedsCreateRequest', 'feedsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read', 'catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CatalogsFeed>({
            url: '/catalogs/feeds',
            method: 'POST',
            headers,
            body: catalogsFeedsCreateRequest,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
     * Delete feed
     */
    feedsDelete({ feedId }: FeedsDeleteRequest): Observable<void>
    feedsDelete({ feedId }: FeedsDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    feedsDelete({ feedId }: FeedsDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(feedId, 'feedId', 'feedsDelete');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read', 'catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/catalogs/feeds/{feed_id}'.replace('{feed_id}', encodeURI(feedId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
     * Get feed
     */
    feedsGet({ feedId }: FeedsGetRequest): Observable<CatalogsFeed>
    feedsGet({ feedId }: FeedsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsFeed>>
    feedsGet({ feedId }: FeedsGetRequest, opts?: OperationOpts): Observable<CatalogsFeed | RawAjaxResponse<CatalogsFeed>> {
        throwIfNullOrUndefined(feedId, 'feedId', 'feedsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CatalogsFeed>({
            url: '/catalogs/feeds/{feed_id}'.replace('{feed_id}', encodeURI(feedId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
     * List feeds
     */
    feedsList({ bookmark, pageSize }: FeedsListRequest): Observable<Paginated & object>
    feedsList({ bookmark, pageSize }: FeedsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    feedsList({ bookmark, pageSize }: FeedsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }

        return this.request<Paginated & object>({
            url: '/catalogs/feeds',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
     * Update feed
     */
    feedsUpdate({ feedId, catalogsFeedsUpdateRequest }: FeedsUpdateRequest): Observable<CatalogsFeed>
    feedsUpdate({ feedId, catalogsFeedsUpdateRequest }: FeedsUpdateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsFeed>>
    feedsUpdate({ feedId, catalogsFeedsUpdateRequest }: FeedsUpdateRequest, opts?: OperationOpts): Observable<CatalogsFeed | RawAjaxResponse<CatalogsFeed>> {
        throwIfNullOrUndefined(feedId, 'feedId', 'feedsUpdate');
        throwIfNullOrUndefined(catalogsFeedsUpdateRequest, 'catalogsFeedsUpdateRequest', 'feedsUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read', 'catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CatalogsFeed>({
            url: '/catalogs/feeds/{feed_id}'.replace('{feed_id}', encodeURI(feedId)),
            method: 'PATCH',
            headers,
            body: catalogsFeedsUpdateRequest,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
     * Get catalogs items batch
     */
    itemsBatchGet({ batchId }: ItemsBatchGetRequest): Observable<CatalogsItemsBatch>
    itemsBatchGet({ batchId }: ItemsBatchGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsItemsBatch>>
    itemsBatchGet({ batchId }: ItemsBatchGetRequest, opts?: OperationOpts): Observable<CatalogsItemsBatch | RawAjaxResponse<CatalogsItemsBatch>> {
        throwIfNullOrUndefined(batchId, 'batchId', 'itemsBatchGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CatalogsItemsBatch>({
            url: '/catalogs/items/batch/{batch_id}'.replace('{batch_id}', encodeURI(batchId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
     * Perform an operation on an item batch
     */
    itemsBatchPost({ catalogsItemsBatchRequest }: ItemsBatchPostRequest): Observable<CatalogsItemsBatch>
    itemsBatchPost({ catalogsItemsBatchRequest }: ItemsBatchPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsItemsBatch>>
    itemsBatchPost({ catalogsItemsBatchRequest }: ItemsBatchPostRequest, opts?: OperationOpts): Observable<CatalogsItemsBatch | RawAjaxResponse<CatalogsItemsBatch>> {
        throwIfNullOrUndefined(catalogsItemsBatchRequest, 'catalogsItemsBatchRequest', 'itemsBatchPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read', 'catalogs:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CatalogsItemsBatch>({
            url: '/catalogs/items/batch',
            method: 'POST',
            headers,
            body: catalogsItemsBatchRequest,
        }, opts?.responseOpts);
    };

    /**
     * Get the items of the catalog created by the \"operating user_account\"
     * Get catalogs items
     */
    itemsGet({ country, itemIds, language }: ItemsGetRequest): Observable<CatalogsItems>
    itemsGet({ country, itemIds, language }: ItemsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<CatalogsItems>>
    itemsGet({ country, itemIds, language }: ItemsGetRequest, opts?: OperationOpts): Observable<CatalogsItems | RawAjaxResponse<CatalogsItems>> {
        throwIfNullOrUndefined(country, 'country', 'itemsGet');
        throwIfNullOrUndefined(itemIds, 'itemIds', 'itemsGet');
        throwIfNullOrUndefined(language, 'language', 'itemsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['catalogs:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'country': country,
            'item_ids': itemIds,
            'language': language,
        };

        return this.request<CatalogsItems>({
            url: '/catalogs/items',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
