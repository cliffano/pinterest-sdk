// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AnalyticsMetricsResponse,
    Pin,
} from '../models';

export interface PinsAnalyticsRequest {
    pinId: string;
    startDate: string;
    endDate: string;
    metricTypes: Array<PinsAnalyticsMetricTypesEnum>;
    appTypes?: PinsAnalyticsAppTypesEnum;
    splitField?: PinsAnalyticsSplitFieldEnum;
    adAccountId?: string;
}

export interface PinsCreateRequest {
    pin: Pin;
}

export interface PinsDeleteRequest {
    pinId: string;
}

export interface PinsGetRequest {
    pinId: string;
    adAccountId?: string;
}

/**
 * no description
 */
export class PinsApi extends BaseAPI {

    /**
     * Get analytics for a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\"https://developers.pinterest.com/docs/api/v5/#operation/ad_accounts/list\">List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Admin, Analyst. - For Pins on secret boards: Admin.
     * Get Pin analytics
     */
    pinsAnalytics({ pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId }: PinsAnalyticsRequest): Observable<{ [key: string]: AnalyticsMetricsResponse; }>
    pinsAnalytics({ pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId }: PinsAnalyticsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<{ [key: string]: AnalyticsMetricsResponse; }>>
    pinsAnalytics({ pinId, startDate, endDate, metricTypes, appTypes, splitField, adAccountId }: PinsAnalyticsRequest, opts?: OperationOpts): Observable<{ [key: string]: AnalyticsMetricsResponse; } | RawAjaxResponse<{ [key: string]: AnalyticsMetricsResponse; }>> {
        throwIfNullOrUndefined(pinId, 'pinId', 'pinsAnalytics');
        throwIfNullOrUndefined(startDate, 'startDate', 'pinsAnalytics');
        throwIfNullOrUndefined(endDate, 'endDate', 'pinsAnalytics');
        throwIfNullOrUndefined(metricTypes, 'metricTypes', 'pinsAnalytics');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['boards:read', 'pins:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start_date': (startDate as any).toISOString().split('T')[0],
            'end_date': (endDate as any).toISOString().split('T')[0],
            'metric_types': metricTypes.join(COLLECTION_FORMATS['csv']),
        };

        if (appTypes != null) { query['app_types'] = appTypes; }
        if (splitField != null) { query['split_field'] = splitField; }
        if (adAccountId != null) { query['ad_account_id'] = adAccountId; }

        return this.request<{ [key: string]: AnalyticsMetricsResponse; }>({
            url: '/pins/{pin_id}/analytics'.replace('{pin_id}', encodeURI(pinId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create a Pin on a board or board section owned by the \"operation user_account\".  Note: If the current \"operation user_account\" (defined by the access token) has access to another user\'s Ad Accounts via Pinterest Business Access, you can modify your request to make use of the current operation_user_account\'s permissions to those Ad Accounts by including the ad_account_id in the path parameters for the request (e.g. .../?ad_account_id=12345&...).  - This function is intended solely for publishing new content created by the user. If you are interested in saving content created by others to your Pinterest boards, sometimes called \'curated content\', please use our <a href=\'/docs/add-ons/save-button\'>Save button</a> instead. For more tips on creating fresh content for Pinterest, review our <a href=\'/docs/solutions/content-apps\'>Content App Solutions Guide</a>.  <strong><a href=\'/docs/solutions/content-apps/#creatingvideopins\'>Learn more</a></strong> about video Pin creation.
     * Create Pin
     */
    pinsCreate({ pin }: PinsCreateRequest): Observable<Pin>
    pinsCreate({ pin }: PinsCreateRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Pin>>
    pinsCreate({ pin }: PinsCreateRequest, opts?: OperationOpts): Observable<Pin | RawAjaxResponse<Pin>> {
        throwIfNullOrUndefined(pin, 'pin', 'pinsCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['boards:read', 'boards:write', 'pins:read', 'pins:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Pin>({
            url: '/pins',
            method: 'POST',
            headers,
            body: pin,
        }, opts?.responseOpts);
    };

    /**
     * Delete a Pins owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     * Delete Pin
     */
    pinsDelete({ pinId }: PinsDeleteRequest): Observable<void>
    pinsDelete({ pinId }: PinsDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    pinsDelete({ pinId }: PinsDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(pinId, 'pinId', 'pinsDelete');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['boards:read', 'boards:write', 'pins:read', 'pins:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/pins/{pin_id}'.replace('{pin_id}', encodeURI(pinId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a Pin owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an <code>ad_account_id</code> (obtained via <a href=\'/docs/api/v5/#operation/ad_accounts/list\'>List ad accounts</a>) to use the owner of that ad_account as the \"operation user_account\". In order to do this, the token user_account must have one of the following <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a> roles on the ad_account:  - For Pins on public or protected boards: Owner, Admin, Analyst, Campaign Manager. - For Pins on secret boards: Owner, Admin.
     * Get Pin
     */
    pinsGet({ pinId, adAccountId }: PinsGetRequest): Observable<Pin>
    pinsGet({ pinId, adAccountId }: PinsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Pin>>
    pinsGet({ pinId, adAccountId }: PinsGetRequest, opts?: OperationOpts): Observable<Pin | RawAjaxResponse<Pin>> {
        throwIfNullOrUndefined(pinId, 'pinId', 'pinsGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['boards:read', 'pins:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (adAccountId != null) { query['ad_account_id'] = adAccountId; }

        return this.request<Pin>({
            url: '/pins/{pin_id}'.replace('{pin_id}', encodeURI(pinId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum PinsAnalyticsMetricTypesEnum {
    Impression = 'IMPRESSION',
    Save = 'SAVE',
    PinClick = 'PIN_CLICK',
    OutboundClick = 'OUTBOUND_CLICK',
    VideoMrcView = 'VIDEO_MRC_VIEW',
    VideoAvgWatchTime = 'VIDEO_AVG_WATCH_TIME',
    VideoV50WatchTime = 'VIDEO_V50_WATCH_TIME',
    Quartile95PercentView = 'QUARTILE_95_PERCENT_VIEW'
}
/**
 * @export
 * @enum {string}
 */
export enum PinsAnalyticsAppTypesEnum {
    All = 'ALL',
    Mobile = 'MOBILE',
    Tablet = 'TABLET',
    Web = 'WEB'
}
/**
 * @export
 * @enum {string}
 */
export enum PinsAnalyticsSplitFieldEnum {
    NoSplit = 'NO_SPLIT',
    AppType = 'APP_TYPE'
}
