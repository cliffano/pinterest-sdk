// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AdsAnalyticsCreateAsyncRequest,
    AdsAnalyticsCreateAsyncResponse,
    AdsAnalyticsGetAsyncResponse,
    Granularity,
    Paginated,
} from '../models';

export interface AdAccountAnalyticsRequest {
    adAccountId: string;
    startDate: string;
    endDate: string;
    columns: Array<AdAccountAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdAccountAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdAccountAnalyticsConversionReportTimeEnum;
}

export interface AdAccountsListRequest {
    bookmark?: string;
    pageSize?: number;
    includeSharedAccounts?: boolean;
}

export interface AdGroupsAnalyticsRequest {
    adAccountId: string;
    startDate: string;
    endDate: string;
    adGroupIds: Array<string>;
    columns: Array<AdGroupsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdGroupsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdGroupsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdGroupsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdGroupsAnalyticsConversionReportTimeEnum;
}

export interface AdGroupsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    adGroupIds?: Array<string>;
    entityStatuses?: Array<AdGroupsListEntityStatusesEnum>;
    pageSize?: number;
    order?: AdGroupsListOrderEnum;
    bookmark?: string;
    translateInterestsToNames?: boolean;
}

export interface AdsAnalyticsRequest {
    adAccountId: string;
    startDate: string;
    endDate: string;
    adIds: Array<string>;
    columns: Array<AdsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdsAnalyticsConversionReportTimeEnum;
}

export interface AdsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    adGroupIds?: Array<string>;
    adIds?: Array<string>;
    entityStatuses?: Array<AdsListEntityStatusesEnum>;
    pageSize?: number;
    order?: AdsListOrderEnum;
    bookmark?: string;
}

export interface AnalyticsCreateReportRequest {
    adAccountId: string;
    adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest;
}

export interface AnalyticsGetReportRequest {
    adAccountId: string;
    token: string;
}

export interface CampaignsAnalyticsRequest {
    adAccountId: string;
    startDate: string;
    endDate: string;
    campaignIds: Array<string>;
    columns: Array<CampaignsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: CampaignsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: CampaignsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: CampaignsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: CampaignsAnalyticsConversionReportTimeEnum;
}

export interface CampaignsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    entityStatuses?: Array<CampaignsListEntityStatusesEnum>;
    pageSize?: number;
    order?: CampaignsListOrderEnum;
    bookmark?: string;
}

export interface ProductGroupsAnalyticsRequest {
    adAccountId: string;
    startDate: string;
    endDate: string;
    productGroupIds: Array<string>;
    columns: Array<ProductGroupsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: ProductGroupsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: ProductGroupsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: ProductGroupsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: ProductGroupsAnalyticsConversionReportTimeEnum;
}

/**
 * no description
 */
export class AdAccountsApi extends BaseAPI {

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad account analytics
     */
    adAccountAnalytics({ adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdAccountAnalyticsRequest): Observable<Array<{ [key: string]: object; }>>
    adAccountAnalytics({ adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdAccountAnalyticsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<{ [key: string]: object; }>>>
    adAccountAnalytics({ adAccountId, startDate, endDate, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdAccountAnalyticsRequest, opts?: OperationOpts): Observable<Array<{ [key: string]: object; }> | RawAjaxResponse<Array<{ [key: string]: object; }>>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'adAccountAnalytics');
        throwIfNullOrUndefined(startDate, 'startDate', 'adAccountAnalytics');
        throwIfNullOrUndefined(endDate, 'endDate', 'adAccountAnalytics');
        throwIfNullOrUndefined(columns, 'columns', 'adAccountAnalytics');
        throwIfNullOrUndefined(granularity, 'granularity', 'adAccountAnalytics');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start_date': (startDate as any).toISOString().split('T')[0],
            'end_date': (endDate as any).toISOString().split('T')[0],
            'columns': columns.join(COLLECTION_FORMATS['csv']),
            'granularity': granularity,
        };

        if (clickWindowDays != null) { query['click_window_days'] = clickWindowDays; }
        if (engagementWindowDays != null) { query['engagement_window_days'] = engagementWindowDays; }
        if (viewWindowDays != null) { query['view_window_days'] = viewWindowDays; }
        if (conversionReportTime != null) { query['conversion_report_time'] = conversionReportTime; }

        return this.request<Array<{ [key: string]: object; }>>({
            url: '/ad_accounts/{ad_account_id}/analytics'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    adAccountsList({ bookmark, pageSize, includeSharedAccounts }: AdAccountsListRequest): Observable<Paginated & object>
    adAccountsList({ bookmark, pageSize, includeSharedAccounts }: AdAccountsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    adAccountsList({ bookmark, pageSize, includeSharedAccounts }: AdAccountsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (includeSharedAccounts != null) { query['include_shared_accounts'] = includeSharedAccounts; }

        return this.request<Paginated & object>({
            url: '/ad_accounts',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad group analytics
     */
    adGroupsAnalytics({ adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdGroupsAnalyticsRequest): Observable<Array<{ [key: string]: object; }>>
    adGroupsAnalytics({ adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdGroupsAnalyticsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<{ [key: string]: object; }>>>
    adGroupsAnalytics({ adAccountId, startDate, endDate, adGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdGroupsAnalyticsRequest, opts?: OperationOpts): Observable<Array<{ [key: string]: object; }> | RawAjaxResponse<Array<{ [key: string]: object; }>>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'adGroupsAnalytics');
        throwIfNullOrUndefined(startDate, 'startDate', 'adGroupsAnalytics');
        throwIfNullOrUndefined(endDate, 'endDate', 'adGroupsAnalytics');
        throwIfNullOrUndefined(adGroupIds, 'adGroupIds', 'adGroupsAnalytics');
        throwIfNullOrUndefined(columns, 'columns', 'adGroupsAnalytics');
        throwIfNullOrUndefined(granularity, 'granularity', 'adGroupsAnalytics');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start_date': (startDate as any).toISOString().split('T')[0],
            'end_date': (endDate as any).toISOString().split('T')[0],
            'ad_group_ids': adGroupIds,
            'columns': columns.join(COLLECTION_FORMATS['csv']),
            'granularity': granularity,
        };

        if (clickWindowDays != null) { query['click_window_days'] = clickWindowDays; }
        if (engagementWindowDays != null) { query['engagement_window_days'] = engagementWindowDays; }
        if (viewWindowDays != null) { query['view_window_days'] = viewWindowDays; }
        if (conversionReportTime != null) { query['conversion_report_time'] = conversionReportTime; }

        return this.request<Array<{ [key: string]: object; }>>({
            url: '/ad_accounts/{ad_account_id}/ad_groups/analytics'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List ad groups
     */
    adGroupsList({ adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames }: AdGroupsListRequest): Observable<Paginated & object>
    adGroupsList({ adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames }: AdGroupsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    adGroupsList({ adAccountId, campaignIds, adGroupIds, entityStatuses, pageSize, order, bookmark, translateInterestsToNames }: AdGroupsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'adGroupsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (campaignIds != null) { query['campaign_ids'] = campaignIds; }
        if (adGroupIds != null) { query['ad_group_ids'] = adGroupIds; }
        if (entityStatuses != null) { query['entity_statuses'] = entityStatuses; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (order != null) { query['order'] = order; }
        if (bookmark != null) { query['bookmark'] = bookmark; }
        if (translateInterestsToNames != null) { query['translate_interests_to_names'] = translateInterestsToNames; }

        return this.request<Paginated & object>({
            url: '/ad_accounts/{ad_account_id}/ad_groups'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad analytics
     */
    adsAnalytics({ adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdsAnalyticsRequest): Observable<Array<{ [key: string]: object; }>>
    adsAnalytics({ adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdsAnalyticsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<{ [key: string]: object; }>>>
    adsAnalytics({ adAccountId, startDate, endDate, adIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: AdsAnalyticsRequest, opts?: OperationOpts): Observable<Array<{ [key: string]: object; }> | RawAjaxResponse<Array<{ [key: string]: object; }>>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'adsAnalytics');
        throwIfNullOrUndefined(startDate, 'startDate', 'adsAnalytics');
        throwIfNullOrUndefined(endDate, 'endDate', 'adsAnalytics');
        throwIfNullOrUndefined(adIds, 'adIds', 'adsAnalytics');
        throwIfNullOrUndefined(columns, 'columns', 'adsAnalytics');
        throwIfNullOrUndefined(granularity, 'granularity', 'adsAnalytics');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start_date': (startDate as any).toISOString().split('T')[0],
            'end_date': (endDate as any).toISOString().split('T')[0],
            'ad_ids': adIds,
            'columns': columns.join(COLLECTION_FORMATS['csv']),
            'granularity': granularity,
        };

        if (clickWindowDays != null) { query['click_window_days'] = clickWindowDays; }
        if (engagementWindowDays != null) { query['engagement_window_days'] = engagementWindowDays; }
        if (viewWindowDays != null) { query['view_window_days'] = viewWindowDays; }
        if (conversionReportTime != null) { query['conversion_report_time'] = conversionReportTime; }

        return this.request<Array<{ [key: string]: object; }>>({
            url: '/ad_accounts/{ad_account_id}/ads/analytics'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List ads
     */
    adsList({ adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark }: AdsListRequest): Observable<Paginated & object>
    adsList({ adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark }: AdsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    adsList({ adAccountId, campaignIds, adGroupIds, adIds, entityStatuses, pageSize, order, bookmark }: AdsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'adsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (campaignIds != null) { query['campaign_ids'] = campaignIds; }
        if (adGroupIds != null) { query['ad_group_ids'] = adGroupIds; }
        if (adIds != null) { query['ad_ids'] = adIds; }
        if (entityStatuses != null) { query['entity_statuses'] = entityStatuses; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (order != null) { query['order'] = order; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<Paginated & object>({
            url: '/ad_accounts/{ad_account_id}/ads'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Create async request for an account analytics report
     */
    analyticsCreateReport({ adAccountId, adsAnalyticsCreateAsyncRequest }: AnalyticsCreateReportRequest): Observable<AdsAnalyticsCreateAsyncResponse>
    analyticsCreateReport({ adAccountId, adsAnalyticsCreateAsyncRequest }: AnalyticsCreateReportRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AdsAnalyticsCreateAsyncResponse>>
    analyticsCreateReport({ adAccountId, adsAnalyticsCreateAsyncRequest }: AnalyticsCreateReportRequest, opts?: OperationOpts): Observable<AdsAnalyticsCreateAsyncResponse | RawAjaxResponse<AdsAnalyticsCreateAsyncResponse>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'analyticsCreateReport');
        throwIfNullOrUndefined(adsAnalyticsCreateAsyncRequest, 'adsAnalyticsCreateAsyncRequest', 'analyticsCreateReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<AdsAnalyticsCreateAsyncResponse>({
            url: '/ad_accounts/{ad_account_id}/reports'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'POST',
            headers,
            body: adsAnalyticsCreateAsyncRequest,
        }, opts?.responseOpts);
    };

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    analyticsGetReport({ adAccountId, token }: AnalyticsGetReportRequest): Observable<AdsAnalyticsGetAsyncResponse>
    analyticsGetReport({ adAccountId, token }: AnalyticsGetReportRequest, opts?: OperationOpts): Observable<RawAjaxResponse<AdsAnalyticsGetAsyncResponse>>
    analyticsGetReport({ adAccountId, token }: AnalyticsGetReportRequest, opts?: OperationOpts): Observable<AdsAnalyticsGetAsyncResponse | RawAjaxResponse<AdsAnalyticsGetAsyncResponse>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'analyticsGetReport');
        throwIfNullOrUndefined(token, 'token', 'analyticsGetReport');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'token': token,
        };

        return this.request<AdsAnalyticsGetAsyncResponse>({
            url: '/ad_accounts/{ad_account_id}/reports'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get campaign analytics
     */
    campaignsAnalytics({ adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: CampaignsAnalyticsRequest): Observable<Array<{ [key: string]: object; }>>
    campaignsAnalytics({ adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: CampaignsAnalyticsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<{ [key: string]: object; }>>>
    campaignsAnalytics({ adAccountId, startDate, endDate, campaignIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: CampaignsAnalyticsRequest, opts?: OperationOpts): Observable<Array<{ [key: string]: object; }> | RawAjaxResponse<Array<{ [key: string]: object; }>>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'campaignsAnalytics');
        throwIfNullOrUndefined(startDate, 'startDate', 'campaignsAnalytics');
        throwIfNullOrUndefined(endDate, 'endDate', 'campaignsAnalytics');
        throwIfNullOrUndefined(campaignIds, 'campaignIds', 'campaignsAnalytics');
        throwIfNullOrUndefined(columns, 'columns', 'campaignsAnalytics');
        throwIfNullOrUndefined(granularity, 'granularity', 'campaignsAnalytics');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start_date': (startDate as any).toISOString().split('T')[0],
            'end_date': (endDate as any).toISOString().split('T')[0],
            'campaign_ids': campaignIds,
            'columns': columns.join(COLLECTION_FORMATS['csv']),
            'granularity': granularity,
        };

        if (clickWindowDays != null) { query['click_window_days'] = clickWindowDays; }
        if (engagementWindowDays != null) { query['engagement_window_days'] = engagementWindowDays; }
        if (viewWindowDays != null) { query['view_window_days'] = viewWindowDays; }
        if (conversionReportTime != null) { query['conversion_report_time'] = conversionReportTime; }

        return this.request<Array<{ [key: string]: object; }>>({
            url: '/ad_accounts/{ad_account_id}/campaigns/analytics'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List campaigns
     */
    campaignsList({ adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark }: CampaignsListRequest): Observable<Paginated & object>
    campaignsList({ adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark }: CampaignsListRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Paginated & object>>
    campaignsList({ adAccountId, campaignIds, entityStatuses, pageSize, order, bookmark }: CampaignsListRequest, opts?: OperationOpts): Observable<Paginated & object | RawAjaxResponse<Paginated & object>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'campaignsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (campaignIds != null) { query['campaign_ids'] = campaignIds; }
        if (entityStatuses != null) { query['entity_statuses'] = entityStatuses; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (order != null) { query['order'] = order; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<Paginated & object>({
            url: '/ad_accounts/{ad_account_id}/campaigns'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get product group analytics
     */
    productGroupsAnalytics({ adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: ProductGroupsAnalyticsRequest): Observable<Array<{ [key: string]: object; }>>
    productGroupsAnalytics({ adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: ProductGroupsAnalyticsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<{ [key: string]: object; }>>>
    productGroupsAnalytics({ adAccountId, startDate, endDate, productGroupIds, columns, granularity, clickWindowDays, engagementWindowDays, viewWindowDays, conversionReportTime }: ProductGroupsAnalyticsRequest, opts?: OperationOpts): Observable<Array<{ [key: string]: object; }> | RawAjaxResponse<Array<{ [key: string]: object; }>>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'productGroupsAnalytics');
        throwIfNullOrUndefined(startDate, 'startDate', 'productGroupsAnalytics');
        throwIfNullOrUndefined(endDate, 'endDate', 'productGroupsAnalytics');
        throwIfNullOrUndefined(productGroupIds, 'productGroupIds', 'productGroupsAnalytics');
        throwIfNullOrUndefined(columns, 'columns', 'productGroupsAnalytics');
        throwIfNullOrUndefined(granularity, 'granularity', 'productGroupsAnalytics');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'start_date': (startDate as any).toISOString().split('T')[0],
            'end_date': (endDate as any).toISOString().split('T')[0],
            'product_group_ids': productGroupIds,
            'columns': columns.join(COLLECTION_FORMATS['csv']),
            'granularity': granularity,
        };

        if (clickWindowDays != null) { query['click_window_days'] = clickWindowDays; }
        if (engagementWindowDays != null) { query['engagement_window_days'] = engagementWindowDays; }
        if (viewWindowDays != null) { query['view_window_days'] = viewWindowDays; }
        if (conversionReportTime != null) { query['conversion_report_time'] = conversionReportTime; }

        return this.request<Array<{ [key: string]: object; }>>({
            url: '/ad_accounts/{ad_account_id}/product_groups/analytics'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum AdAccountAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
 * @export
 * @enum {string}
 */
export enum AdAccountAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdAccountAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdAccountAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdAccountAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsListEntityStatusesEnum {
    Active = 'ACTIVE',
    Paused = 'PAUSED',
    Archived = 'ARCHIVED'
}
/**
 * @export
 * @enum {string}
 */
export enum AdGroupsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
 * @export
 * @enum {string}
 */
export enum AdsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
 * @export
 * @enum {string}
 */
export enum AdsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum AdsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
 * @export
 * @enum {string}
 */
export enum AdsListEntityStatusesEnum {
    Active = 'ACTIVE',
    Paused = 'PAUSED',
    Archived = 'ARCHIVED'
}
/**
 * @export
 * @enum {string}
 */
export enum AdsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsListEntityStatusesEnum {
    Active = 'ACTIVE',
    Paused = 'PAUSED',
    Archived = 'ARCHIVED'
}
/**
 * @export
 * @enum {string}
 */
export enum CampaignsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
 * @export
 * @enum {string}
 */
export enum ProductGroupsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
 * @export
 * @enum {string}
 */
export enum ProductGroupsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum ProductGroupsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum ProductGroupsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
 * @export
 * @enum {string}
 */
export enum ProductGroupsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
