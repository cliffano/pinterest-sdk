// tslint:disable
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    LeadFormResponse,
    LeadFormTestRequest,
    LeadFormTestResponse,
    LeadFormsList200Response,
} from '../models';

export interface LeadFormGetRequest {
    adAccountId: string;
    leadFormId: string;
}

export interface LeadFormTestCreateRequest {
    adAccountId: string;
    leadFormId: string;
    leadFormTestRequest: LeadFormTestRequest;
}

export interface LeadFormsListRequest {
    adAccountId: string;
    pageSize?: number;
    order?: LeadFormsListOrderEnum;
    bookmark?: string;
}

/**
 * no description
 */
export class LeadFormsApi extends BaseAPI {

    /**
     * Gets a lead form given it\'s ID. It must also be associated with the provided ad account ID. Retrieving an advertiser\'s lead form will only contain results if you\'re a part of the Lead ads beta. If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Get lead form by id
     */
    leadFormGet({ adAccountId, leadFormId }: LeadFormGetRequest): Observable<LeadFormResponse>
    leadFormGet({ adAccountId, leadFormId }: LeadFormGetRequest, opts?: OperationOpts): Observable<AjaxResponse<LeadFormResponse>>
    leadFormGet({ adAccountId, leadFormId }: LeadFormGetRequest, opts?: OperationOpts): Observable<LeadFormResponse | AjaxResponse<LeadFormResponse>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'leadFormGet');
        throwIfNullOrUndefined(leadFormId, 'leadFormId', 'leadFormGet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<LeadFormResponse>({
            url: '/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{lead_form_id}', encodeURI(leadFormId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create lead form test data based on the list of answers provided as part of the body. - List of answers should follow the questions creation order.  <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/new/about-beta-access/\'>Learn more</a>.</strong>
     * Create lead form test data
     */
    leadFormTestCreate({ adAccountId, leadFormId, leadFormTestRequest }: LeadFormTestCreateRequest): Observable<LeadFormTestResponse>
    leadFormTestCreate({ adAccountId, leadFormId, leadFormTestRequest }: LeadFormTestCreateRequest, opts?: OperationOpts): Observable<AjaxResponse<LeadFormTestResponse>>
    leadFormTestCreate({ adAccountId, leadFormId, leadFormTestRequest }: LeadFormTestCreateRequest, opts?: OperationOpts): Observable<LeadFormTestResponse | AjaxResponse<LeadFormTestResponse>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'leadFormTestCreate');
        throwIfNullOrUndefined(leadFormId, 'leadFormId', 'leadFormTestCreate');
        throwIfNullOrUndefined(leadFormTestRequest, 'leadFormTestRequest', 'leadFormTestCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:write'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<LeadFormTestResponse>({
            url: '/ad_accounts/{ad_account_id}/lead_forms/{lead_form_id}/test'.replace('{ad_account_id}', encodeURI(adAccountId)).replace('{lead_form_id}', encodeURI(leadFormId)),
            method: 'POST',
            headers,
            body: leadFormTestRequest,
        }, opts?.responseOpts);
    };

    /**
     * Gets all Lead Forms associated with an ad account ID. Retrieving an advertiser\'s list of lead forms will only contain results if you\'re a part of the Lead ads beta.  If you\'re interested in joining the beta, please reach out to your Pinterest account manager.
     * Get lead forms
     */
    leadFormsList({ adAccountId, pageSize, order, bookmark }: LeadFormsListRequest): Observable<LeadFormsList200Response>
    leadFormsList({ adAccountId, pageSize, order, bookmark }: LeadFormsListRequest, opts?: OperationOpts): Observable<AjaxResponse<LeadFormsList200Response>>
    leadFormsList({ adAccountId, pageSize, order, bookmark }: LeadFormsListRequest, opts?: OperationOpts): Observable<LeadFormsList200Response | AjaxResponse<LeadFormsList200Response>> {
        throwIfNullOrUndefined(adAccountId, 'adAccountId', 'leadFormsList');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('pinterest_oauth2', ['ads:read'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageSize != null) { query['page_size'] = pageSize; }
        if (order != null) { query['order'] = order; }
        if (bookmark != null) { query['bookmark'] = bookmark; }

        return this.request<LeadFormsList200Response>({
            url: '/ad_accounts/{ad_account_id}/lead_forms'.replace('{ad_account_id}', encodeURI(adAccountId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum LeadFormsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
