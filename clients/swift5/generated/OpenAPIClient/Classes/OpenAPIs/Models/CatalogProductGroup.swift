//
// CatalogProductGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** non-promoted catalog product group entity */
public struct CatalogProductGroup: Codable, JSONEncodable, Hashable {

    static let merchantIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let feedProfileIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** ID of the catalog product group. */
    public var id: String?
    /** Merchant ID pertaining to the owner of the catalog product group. */
    public var merchantId: String?
    /** Name of catalog product group */
    public var name: String?
    /** Object holding a list of filters */
    public var filters: AnyCodable?
    /** Object holding a list of filters */
    public var filterV2: AnyCodable?
    public var type: Board?
    public var status: EntityStatus?
    /** id of the feed profile belonging to this catalog product group */
    public var feedProfileId: String?
    /** Unix timestamp in seconds of when catalog product group was created. */
    public var createdAt: Int?
    /** Unix timestamp in seconds of last time catalog product group was updated. */
    public var lastUpdate: Int?
    /** Amount of products in the catalog product group */
    public var productCount: Int?
    /** index of the featured position of the catalog product group */
    public var featuredPosition: Int?

    public init(id: String? = nil, merchantId: String? = nil, name: String? = nil, filters: AnyCodable? = nil, filterV2: AnyCodable? = nil, type: Board? = nil, status: EntityStatus? = nil, feedProfileId: String? = nil, createdAt: Int? = nil, lastUpdate: Int? = nil, productCount: Int? = nil, featuredPosition: Int? = nil) {
        self.id = id
        self.merchantId = merchantId
        self.name = name
        self.filters = filters
        self.filterV2 = filterV2
        self.type = type
        self.status = status
        self.feedProfileId = feedProfileId
        self.createdAt = createdAt
        self.lastUpdate = lastUpdate
        self.productCount = productCount
        self.featuredPosition = featuredPosition
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case merchantId = "merchant_id"
        case name
        case filters
        case filterV2 = "filter_v2"
        case type
        case status
        case feedProfileId = "feed_profile_id"
        case createdAt = "created_at"
        case lastUpdate = "last_update"
        case productCount = "product_count"
        case featuredPosition = "featured_position"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(filters, forKey: .filters)
        try container.encodeIfPresent(filterV2, forKey: .filterV2)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(feedProfileId, forKey: .feedProfileId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
        try container.encodeIfPresent(productCount, forKey: .productCount)
        try container.encodeIfPresent(featuredPosition, forKey: .featuredPosition)
    }
}

