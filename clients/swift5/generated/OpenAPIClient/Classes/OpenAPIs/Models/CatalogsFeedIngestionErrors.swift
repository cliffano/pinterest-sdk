//
// CatalogsFeedIngestionErrors.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsFeedIngestionErrors: Codable, JSONEncodable, Hashable {

    public enum LargeProductCountDecrease: Int, Codable, CaseIterable {
        case _1 = 1
    }
    public var imageDownloadError: Int?
    public var imageDownloadConnectionTimeout: Int?
    public var imageFormatUnrecognize: Int?
    public var lineLevelInternalError: Int?
    public var largeProductCountDecrease: LargeProductCountDecrease?

    public init(imageDownloadError: Int? = nil, imageDownloadConnectionTimeout: Int? = nil, imageFormatUnrecognize: Int? = nil, lineLevelInternalError: Int? = nil, largeProductCountDecrease: LargeProductCountDecrease? = nil) {
        self.imageDownloadError = imageDownloadError
        self.imageDownloadConnectionTimeout = imageDownloadConnectionTimeout
        self.imageFormatUnrecognize = imageFormatUnrecognize
        self.lineLevelInternalError = lineLevelInternalError
        self.largeProductCountDecrease = largeProductCountDecrease
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imageDownloadError = "image_download_error"
        case imageDownloadConnectionTimeout = "image_download_connection_timeout"
        case imageFormatUnrecognize = "image_format_unrecognize"
        case lineLevelInternalError = "line_level_internal_error"
        case largeProductCountDecrease = "large_product_count_decrease"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imageDownloadError, forKey: .imageDownloadError)
        try container.encodeIfPresent(imageDownloadConnectionTimeout, forKey: .imageDownloadConnectionTimeout)
        try container.encodeIfPresent(imageFormatUnrecognize, forKey: .imageFormatUnrecognize)
        try container.encodeIfPresent(lineLevelInternalError, forKey: .lineLevelInternalError)
        try container.encodeIfPresent(largeProductCountDecrease, forKey: .largeProductCountDecrease)
    }
}

