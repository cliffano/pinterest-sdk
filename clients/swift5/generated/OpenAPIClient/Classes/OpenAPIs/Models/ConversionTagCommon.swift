//
// ConversionTagCommon.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConversionTagCommon: Codable, JSONEncodable, Hashable {

    /** Ad account ID. */
    public var adAccountId: String?
    /** Tag code snippet. */
    public var codeSnippet: String?
    public var enhancedMatchStatus: EnhancedMatchStatusType?
    /** Tag ID. */
    public var id: String?
    /** Time for the last event fired. */
    public var lastFiredTimeMs: Double?
    /** Conversion tag name. */
    public var name: String?
    public var status: EntityStatus?
    /** Version number. */
    public var version: String?
    public var configs: ConversionTagConfigs?

    public init(adAccountId: String? = nil, codeSnippet: String? = nil, enhancedMatchStatus: EnhancedMatchStatusType? = nil, id: String? = nil, lastFiredTimeMs: Double? = nil, name: String? = nil, status: EntityStatus? = nil, version: String? = nil, configs: ConversionTagConfigs? = nil) {
        self.adAccountId = adAccountId
        self.codeSnippet = codeSnippet
        self.enhancedMatchStatus = enhancedMatchStatus
        self.id = id
        self.lastFiredTimeMs = lastFiredTimeMs
        self.name = name
        self.status = status
        self.version = version
        self.configs = configs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case adAccountId = "ad_account_id"
        case codeSnippet = "code_snippet"
        case enhancedMatchStatus = "enhanced_match_status"
        case id
        case lastFiredTimeMs = "last_fired_time_ms"
        case name
        case status
        case version
        case configs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(adAccountId, forKey: .adAccountId)
        try container.encodeIfPresent(codeSnippet, forKey: .codeSnippet)
        try container.encodeIfPresent(enhancedMatchStatus, forKey: .enhancedMatchStatus)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastFiredTimeMs, forKey: .lastFiredTimeMs)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(configs, forKey: .configs)
    }
}

