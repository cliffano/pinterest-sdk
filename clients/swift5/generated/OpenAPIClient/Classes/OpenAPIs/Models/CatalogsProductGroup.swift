//
// CatalogsProductGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** catalog product group entity */
public struct CatalogsProductGroup: Codable, JSONEncodable, Hashable {

    /** ID of the catalog product group. */
    public var id: String
    /** Name of catalog product group */
    public var name: String?
    public var description: String?
    public var filters: CatalogsProductGroupFilters
    public var type: CatalogsProductGroupType?
    public var status: CatalogsProductGroupStatus?
    /** id of the catalogs feed belonging to this catalog product group */
    public var feedId: String?
    /** Unix timestamp in seconds of when catalog product group was created. */
    public var createdAt: Int?
    /** Unix timestamp in seconds of last time catalog product group was updated. */
    public var updatedAt: Int?

    public init(id: String, name: String? = nil, description: String? = nil, filters: CatalogsProductGroupFilters, type: CatalogsProductGroupType? = nil, status: CatalogsProductGroupStatus? = nil, feedId: String? = nil, createdAt: Int? = nil, updatedAt: Int? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.filters = filters
        self.type = type
        self.status = status
        self.feedId = feedId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case filters
        case type
        case status
        case feedId = "feed_id"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(filters, forKey: .filters)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(feedId, forKey: .feedId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

