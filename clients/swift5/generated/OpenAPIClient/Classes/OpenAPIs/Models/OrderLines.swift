//
// OrderLines.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Order Line */
public struct OrderLines: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** Order line ID. */
    public var id: String?
    /** Always \"orderline\". */
    public var type: String?
    /** Ad account ID. */
    public var adAccountId: String?
    /** Purchase order ID. */
    public var purchaseOrderId: String?
    /** Start time. Unix timestamp. */
    public var startTime: Double?
    /** End time. Unix timestamp. */
    public var endTime: Double?
    /** Order line budget in micro currency. */
    public var budget: Double?
    /** Order line paid budget in micro currency. */
    public var paidBudget: Double?
    /** Order line status. */
    public var status: OrderLineStatus?
    /** Order line name. */
    public var name: String?
    /** Order line paid type. */
    public var paidType: OrderLinePaidType?

    public init(id: String? = nil, type: String? = nil, adAccountId: String? = nil, purchaseOrderId: String? = nil, startTime: Double? = nil, endTime: Double? = nil, budget: Double? = nil, paidBudget: Double? = nil, status: OrderLineStatus? = nil, name: String? = nil, paidType: OrderLinePaidType? = nil) {
        self.id = id
        self.type = type
        self.adAccountId = adAccountId
        self.purchaseOrderId = purchaseOrderId
        self.startTime = startTime
        self.endTime = endTime
        self.budget = budget
        self.paidBudget = paidBudget
        self.status = status
        self.name = name
        self.paidType = paidType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case adAccountId = "ad_account_id"
        case purchaseOrderId = "purchase_order_id"
        case startTime = "start_time"
        case endTime = "end_time"
        case budget
        case paidBudget = "paid_budget"
        case status
        case name
        case paidType = "paid_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(adAccountId, forKey: .adAccountId)
        try container.encodeIfPresent(purchaseOrderId, forKey: .purchaseOrderId)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(budget, forKey: .budget)
        try container.encodeIfPresent(paidBudget, forKey: .paidBudget)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(paidType, forKey: .paidType)
    }
}

