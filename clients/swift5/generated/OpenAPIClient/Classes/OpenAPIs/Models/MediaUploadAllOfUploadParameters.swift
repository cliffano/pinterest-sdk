//
// MediaUploadAllOfUploadParameters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The list of parameter key/value pairs you will need to send with your POST request to upload your media file. */
public struct MediaUploadAllOfUploadParameters: Codable, JSONEncodable, Hashable {

    public var xAmzDate: String?
    public var xAmzSignature: String?
    public var xAmzSecurityToken: String?
    public var xAmzAlgorithm: String?
    public var key: String?
    public var policy: String?
    public var xAmzCredential: String?
    public var contentType: String?

    public init(xAmzDate: String? = nil, xAmzSignature: String? = nil, xAmzSecurityToken: String? = nil, xAmzAlgorithm: String? = nil, key: String? = nil, policy: String? = nil, xAmzCredential: String? = nil, contentType: String? = nil) {
        self.xAmzDate = xAmzDate
        self.xAmzSignature = xAmzSignature
        self.xAmzSecurityToken = xAmzSecurityToken
        self.xAmzAlgorithm = xAmzAlgorithm
        self.key = key
        self.policy = policy
        self.xAmzCredential = xAmzCredential
        self.contentType = contentType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case xAmzDate = "x-amz-date"
        case xAmzSignature = "x-amz-signature"
        case xAmzSecurityToken = "x-amz-security-token"
        case xAmzAlgorithm = "x-amz-algorithm"
        case key
        case policy
        case xAmzCredential = "x-amz-credential"
        case contentType = "Content-Type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(xAmzDate, forKey: .xAmzDate)
        try container.encodeIfPresent(xAmzSignature, forKey: .xAmzSignature)
        try container.encodeIfPresent(xAmzSecurityToken, forKey: .xAmzSecurityToken)
        try container.encodeIfPresent(xAmzAlgorithm, forKey: .xAmzAlgorithm)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(policy, forKey: .policy)
        try container.encodeIfPresent(xAmzCredential, forKey: .xAmzCredential)
        try container.encodeIfPresent(contentType, forKey: .contentType)
    }
}

