//
// AnalyticsMetricsResponseDailyMetrics.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AnalyticsMetricsResponseDailyMetrics: Codable, JSONEncodable, Hashable {

    public enum DataStatus: String, Codable, CaseIterable {
        case processing = "PROCESSING"
        case ready = "READY"
        case estimate = "ESTIMATE"
        case beforeBusinessCreated = "BEFORE_BUSINESS_CREATED"
        case beforeDataRetentionPeriod = "BEFORE_DATA_RETENTION_PERIOD"
        case beforePinDataRetentionPeriod = "BEFORE_PIN_DATA_RETENTION_PERIOD"
        case beforeMetricStartDate = "BEFORE_METRIC_START_DATE"
        case beforeCoreMetricStartDate = "BEFORE_CORE_METRIC_START_DATE"
        case beforePinFormatMetricStartDate = "BEFORE_PIN_FORMAT_METRIC_START_DATE"
        case beforeAudienceMetricStartDate = "BEFORE_AUDIENCE_METRIC_START_DATE"
        case beforeAudienceMonthlyMetricStartDate = "BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE"
        case beforeVideoMetricStartDate = "BEFORE_VIDEO_METRIC_START_DATE"
        case beforeConversionMetricStartDate = "BEFORE_CONVERSION_METRIC_START_DATE"
        case purchasersMetricSmallerThanThreshold = "PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD"
        case inBadTagDate = "IN_BAD_TAG_DATE"
        case beforePublishedMetricStartDate = "BEFORE_PUBLISHED_METRIC_START_DATE"
        case beforeAssistMetricStartDate = "BEFORE_ASSIST_METRIC_START_DATE"
        case beforePinCreated = "BEFORE_PIN_CREATED"
        case beforeAccountClaimed = "BEFORE_ACCOUNT_CLAIMED"
        case beforeDemographicFiltersStartDate = "BEFORE_DEMOGRAPHIC_FILTERS_START_DATE"
        case audienceSegmentSmallerThanThreshold = "AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD"
        case audienceTotalSmallerThanThreshold = "AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD"
        case beforeProductGroupFilterStartDate = "BEFORE_PRODUCT_GROUP_FILTER_START_DATE"
    }
    /** Metrics availablity, e.g., \"READY\". */
    public var dataStatus: DataStatus?
    /** Metrics date (UTC): YYYY-MM-DD. */
    public var date: String?
    /** The metric name and daily value for each requested metric */
    public var metrics: [String: Double]?

    public init(dataStatus: DataStatus? = nil, date: String? = nil, metrics: [String: Double]? = nil) {
        self.dataStatus = dataStatus
        self.date = date
        self.metrics = metrics
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dataStatus = "data_status"
        case date
        case metrics
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dataStatus, forKey: .dataStatus)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(metrics, forKey: .metrics)
    }
}

