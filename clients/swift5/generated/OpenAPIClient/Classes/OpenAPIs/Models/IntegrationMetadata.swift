//
// IntegrationMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Integration metadata */
public struct IntegrationMetadata: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    public var id: String?
    public var externalBusinessId: String?
    public var connectedMerchantId: String?
    public var connectedUserId: String?
    public var connectedAdvertiserId: String?
    public var connectedLbaId: String?
    public var connectedTagId: String?
    public var partnerAccessTokenExpiry: Double?
    public var partnerRefreshTokenExpiry: Double?
    public var scopes: String?
    public var createdTimestamp: Double?
    public var updatedTimestamp: Double?
    public var additionalId1: String?
    public var partnerMetadata: String?

    public init(id: String? = nil, externalBusinessId: String? = nil, connectedMerchantId: String? = nil, connectedUserId: String? = nil, connectedAdvertiserId: String? = nil, connectedLbaId: String? = nil, connectedTagId: String? = nil, partnerAccessTokenExpiry: Double? = nil, partnerRefreshTokenExpiry: Double? = nil, scopes: String? = nil, createdTimestamp: Double? = nil, updatedTimestamp: Double? = nil, additionalId1: String? = nil, partnerMetadata: String? = nil) {
        self.id = id
        self.externalBusinessId = externalBusinessId
        self.connectedMerchantId = connectedMerchantId
        self.connectedUserId = connectedUserId
        self.connectedAdvertiserId = connectedAdvertiserId
        self.connectedLbaId = connectedLbaId
        self.connectedTagId = connectedTagId
        self.partnerAccessTokenExpiry = partnerAccessTokenExpiry
        self.partnerRefreshTokenExpiry = partnerRefreshTokenExpiry
        self.scopes = scopes
        self.createdTimestamp = createdTimestamp
        self.updatedTimestamp = updatedTimestamp
        self.additionalId1 = additionalId1
        self.partnerMetadata = partnerMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case externalBusinessId = "external_business_id"
        case connectedMerchantId = "connected_merchant_id"
        case connectedUserId = "connected_user_id"
        case connectedAdvertiserId = "connected_advertiser_id"
        case connectedLbaId = "connected_lba_id"
        case connectedTagId = "connected_tag_id"
        case partnerAccessTokenExpiry = "partner_access_token_expiry"
        case partnerRefreshTokenExpiry = "partner_refresh_token_expiry"
        case scopes
        case createdTimestamp = "created_timestamp"
        case updatedTimestamp = "updated_timestamp"
        case additionalId1 = "additional_id_1"
        case partnerMetadata = "partner_metadata"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(externalBusinessId, forKey: .externalBusinessId)
        try container.encodeIfPresent(connectedMerchantId, forKey: .connectedMerchantId)
        try container.encodeIfPresent(connectedUserId, forKey: .connectedUserId)
        try container.encodeIfPresent(connectedAdvertiserId, forKey: .connectedAdvertiserId)
        try container.encodeIfPresent(connectedLbaId, forKey: .connectedLbaId)
        try container.encodeIfPresent(connectedTagId, forKey: .connectedTagId)
        try container.encodeIfPresent(partnerAccessTokenExpiry, forKey: .partnerAccessTokenExpiry)
        try container.encodeIfPresent(partnerRefreshTokenExpiry, forKey: .partnerRefreshTokenExpiry)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(createdTimestamp, forKey: .createdTimestamp)
        try container.encodeIfPresent(updatedTimestamp, forKey: .updatedTimestamp)
        try container.encodeIfPresent(additionalId1, forKey: .additionalId1)
        try container.encodeIfPresent(partnerMetadata, forKey: .partnerMetadata)
    }
}

