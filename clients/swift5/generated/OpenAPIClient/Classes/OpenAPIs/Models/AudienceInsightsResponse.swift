//
// AudienceInsightsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Audience interests and demographics. */
public struct AudienceInsightsResponse: Codable, JSONEncodable, Hashable {

    static let dateRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d{4}-\\d{2}-\\d{2}$/")
    /** Category interest distribution */
    public var categories: [AudienceCategory]?
    public var demographics: AudienceDemographics?
    public var type: AudienceInsightType?
    /** Generation date */
    public var date: String?
    /** Population count. */
    public var size: Int?
    /** Indicates whether the audience size has been rounded up to the next highest upper boundary. */
    public var sizeIsUpperBound: Bool?

    public init(categories: [AudienceCategory]? = nil, demographics: AudienceDemographics? = nil, type: AudienceInsightType? = nil, date: String? = nil, size: Int? = nil, sizeIsUpperBound: Bool? = nil) {
        self.categories = categories
        self.demographics = demographics
        self.type = type
        self.date = date
        self.size = size
        self.sizeIsUpperBound = sizeIsUpperBound
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case categories
        case demographics
        case type
        case date
        case size
        case sizeIsUpperBound = "size_is_upper_bound"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(demographics, forKey: .demographics)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(sizeIsUpperBound, forKey: .sizeIsUpperBound)
    }
}

