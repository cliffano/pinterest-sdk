//
// CampaignsAnalyticsResponseInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CampaignsAnalyticsResponseInner: Codable, JSONEncodable, Hashable {

    static let CAMPAIGN_IDRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** The ID of the campaing that this metrics belongs to. */
    public var CAMPAIGN_ID: String
    /** Current metrics date. Only returned when granularity is a time-based value (`DAY`, `HOUR`, `WEEK`, `MONTH`) */
    public var DATE: Date?

    public init(CAMPAIGN_ID: String, DATE: Date? = nil) {
        self.CAMPAIGN_ID = CAMPAIGN_ID
        self.DATE = DATE
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case CAMPAIGN_ID
        case DATE
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(CAMPAIGN_ID, forKey: .CAMPAIGN_ID)
        try container.encodeIfPresent(DATE, forKey: .DATE)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        CAMPAIGN_ID = try container.decode(String.self, forKey: .CAMPAIGN_ID)
        DATE = try container.decodeIfPresent(Date.self, forKey: .DATE)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("CAMPAIGN_ID")
        nonAdditionalPropertyKeys.insert("DATE")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

