//
// AdGroupResponseAllOf1.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdGroupResponseAllOf1: Codable, JSONEncodable, Hashable {

    /** Campaign ID of the ad group. */
    public var campaignId: String?
    public var billableEvent: ActionType?
    /** Ad group ID. */
    public var id: String?
    /** Always \"adgroup\". */
    public var type: String?
    /** Advertiser ID. */
    public var adAccountId: String?
    /** Ad group creation time. Unix timestamp in seconds. */
    public var createdTime: Int?
    /** Ad group last update time. Unix timestamp in seconds. */
    public var updatedTime: Int?

    public init(campaignId: String? = nil, billableEvent: ActionType? = nil, id: String? = nil, type: String? = nil, adAccountId: String? = nil, createdTime: Int? = nil, updatedTime: Int? = nil) {
        self.campaignId = campaignId
        self.billableEvent = billableEvent
        self.id = id
        self.type = type
        self.adAccountId = adAccountId
        self.createdTime = createdTime
        self.updatedTime = updatedTime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case campaignId = "campaign_id"
        case billableEvent = "billable_event"
        case id
        case type
        case adAccountId = "ad_account_id"
        case createdTime = "created_time"
        case updatedTime = "updated_time"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(campaignId, forKey: .campaignId)
        try container.encodeIfPresent(billableEvent, forKey: .billableEvent)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(adAccountId, forKey: .adAccountId)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(updatedTime, forKey: .updatedTime)
    }
}

