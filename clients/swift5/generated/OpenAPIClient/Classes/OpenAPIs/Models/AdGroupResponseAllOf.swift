//
// AdGroupResponseAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdGroupResponseAllOf: Codable, JSONEncodable, Hashable {

    public enum BudgetType: String, Codable, CaseIterable {
        case daily = "DAILY"
        case lifetime = "LIFETIME"
        case cboAdgroup = "CBO_ADGROUP"
    }
    public enum ConversionLearningModeType: String, Codable, CaseIterable {
        case notActive = "NOT_ACTIVE"
        case active = "ACTIVE"
        case null = "null"
    }
    /** Ad group name. */
    public var name: String?
    /** Ad group/entity status. */
    public var status: EntityStatus?
    /** Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups. */
    public var budgetInMicroCurrency: Int?
    /** Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC. */
    public var bidInMicroCurrency: Int?
    /** Budget type. If DAILY, an ad group's daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. */
    public var budgetType: BudgetType?
    /** Ad group start time. Unix timestamp in seconds. Defaults to current time. */
    public var startTime: Int?
    /** Ad group end time. Unix timestamp in seconds. */
    public var endTime: Int?
    /** Ad group targeting specification defining the ad group target audience. For example, '{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}' */
    public var targetingSpec: [String: [String]]?
    /** Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field. */
    public var lifetimeFrequencyCap: Int?
    /** Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>. */
    public var trackingUrls: TrackingUrls?
    /** Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    public var autoTargetingEnabled: Bool?
    /** <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>. */
    public var placementGroup: PlacementGroupType?
    /** Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day. */
    public var pacingDeliveryType: PacingDeliveryType?
    /** oCPM learn mode */
    public var conversionLearningModeType: ConversionLearningModeType?
    /** Ad group summary status. */
    public var summaryStatus: AdGroupSummaryStatus?
    /** Feed Profile ID associated to the adgroup. */
    public var feedProfileId: String?

    public init(name: String? = nil, status: EntityStatus? = nil, budgetInMicroCurrency: Int? = nil, bidInMicroCurrency: Int? = nil, budgetType: BudgetType? = nil, startTime: Int? = nil, endTime: Int? = nil, targetingSpec: [String: [String]]? = nil, lifetimeFrequencyCap: Int? = nil, trackingUrls: TrackingUrls? = nil, autoTargetingEnabled: Bool? = nil, placementGroup: PlacementGroupType? = nil, pacingDeliveryType: PacingDeliveryType? = nil, conversionLearningModeType: ConversionLearningModeType? = nil, summaryStatus: AdGroupSummaryStatus? = nil, feedProfileId: String? = nil) {
        self.name = name
        self.status = status
        self.budgetInMicroCurrency = budgetInMicroCurrency
        self.bidInMicroCurrency = bidInMicroCurrency
        self.budgetType = budgetType
        self.startTime = startTime
        self.endTime = endTime
        self.targetingSpec = targetingSpec
        self.lifetimeFrequencyCap = lifetimeFrequencyCap
        self.trackingUrls = trackingUrls
        self.autoTargetingEnabled = autoTargetingEnabled
        self.placementGroup = placementGroup
        self.pacingDeliveryType = pacingDeliveryType
        self.conversionLearningModeType = conversionLearningModeType
        self.summaryStatus = summaryStatus
        self.feedProfileId = feedProfileId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case status
        case budgetInMicroCurrency = "budget_in_micro_currency"
        case bidInMicroCurrency = "bid_in_micro_currency"
        case budgetType = "budget_type"
        case startTime = "start_time"
        case endTime = "end_time"
        case targetingSpec = "targeting_spec"
        case lifetimeFrequencyCap = "lifetime_frequency_cap"
        case trackingUrls = "tracking_urls"
        case autoTargetingEnabled = "auto_targeting_enabled"
        case placementGroup = "placement_group"
        case pacingDeliveryType = "pacing_delivery_type"
        case conversionLearningModeType = "conversion_learning_mode_type"
        case summaryStatus = "summary_status"
        case feedProfileId = "feed_profile_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(budgetInMicroCurrency, forKey: .budgetInMicroCurrency)
        try container.encodeIfPresent(bidInMicroCurrency, forKey: .bidInMicroCurrency)
        try container.encodeIfPresent(budgetType, forKey: .budgetType)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(targetingSpec, forKey: .targetingSpec)
        try container.encodeIfPresent(lifetimeFrequencyCap, forKey: .lifetimeFrequencyCap)
        try container.encodeIfPresent(trackingUrls, forKey: .trackingUrls)
        try container.encodeIfPresent(autoTargetingEnabled, forKey: .autoTargetingEnabled)
        try container.encodeIfPresent(placementGroup, forKey: .placementGroup)
        try container.encodeIfPresent(pacingDeliveryType, forKey: .pacingDeliveryType)
        try container.encodeIfPresent(conversionLearningModeType, forKey: .conversionLearningModeType)
        try container.encodeIfPresent(summaryStatus, forKey: .summaryStatus)
        try container.encodeIfPresent(feedProfileId, forKey: .feedProfileId)
    }
}

