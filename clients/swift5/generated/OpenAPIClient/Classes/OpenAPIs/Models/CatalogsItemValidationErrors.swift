//
// CatalogsItemValidationErrors.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsItemValidationErrors: Codable, JSONEncodable, Hashable {

    public var ADULT_INVALID: CatalogsItemValidationDetails?
    public var ADWORDS_FORMAT_INVALID: CatalogsItemValidationDetails?
    public var AVAILABILITY_INVALID: CatalogsItemValidationDetails?
    public var BLOCKLISTED_IMAGE_SIGNATURE: CatalogsItemValidationDetails?
    public var DESCRIPTION_MISSING: CatalogsItemValidationDetails?
    public var DUPLICATE_PRODUCTS: CatalogsItemValidationDetails?
    public var IMAGE_LINK_INVALID: CatalogsItemValidationDetails?
    public var IMAGE_LINK_LENGTH_TOO_LONG: CatalogsItemValidationDetails?
    public var IMAGE_LINK_MISSING: CatalogsItemValidationDetails?
    public var INVALID_DOMAIN: CatalogsItemValidationDetails?
    public var ITEMID_MISSING: CatalogsItemValidationDetails?
    public var ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE: CatalogsItemValidationDetails?
    public var LINK_FORMAT_INVALID: CatalogsItemValidationDetails?
    public var LINK_LENGTH_TOO_LONG: CatalogsItemValidationDetails?
    public var LIST_PRICE_INVALID: CatalogsItemValidationDetails?
    public var MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED: CatalogsItemValidationDetails?
    public var PARSE_LINE_ERROR: CatalogsItemValidationDetails?
    public var PINJOIN_CONTENT_UNSAFE: CatalogsItemValidationDetails?
    public var PRICE_CANNOT_BE_DETERMINED: CatalogsItemValidationDetails?
    public var PRICE_MISSING: CatalogsItemValidationDetails?
    public var PRODUCT_LINK_MISSING: CatalogsItemValidationDetails?
    public var PRODUCT_PRICE_INVALID: CatalogsItemValidationDetails?
    public var TITLE_MISSING: CatalogsItemValidationDetails?

    public init(ADULT_INVALID: CatalogsItemValidationDetails? = nil, ADWORDS_FORMAT_INVALID: CatalogsItemValidationDetails? = nil, AVAILABILITY_INVALID: CatalogsItemValidationDetails? = nil, BLOCKLISTED_IMAGE_SIGNATURE: CatalogsItemValidationDetails? = nil, DESCRIPTION_MISSING: CatalogsItemValidationDetails? = nil, DUPLICATE_PRODUCTS: CatalogsItemValidationDetails? = nil, IMAGE_LINK_INVALID: CatalogsItemValidationDetails? = nil, IMAGE_LINK_LENGTH_TOO_LONG: CatalogsItemValidationDetails? = nil, IMAGE_LINK_MISSING: CatalogsItemValidationDetails? = nil, INVALID_DOMAIN: CatalogsItemValidationDetails? = nil, ITEMID_MISSING: CatalogsItemValidationDetails? = nil, ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE: CatalogsItemValidationDetails? = nil, LINK_FORMAT_INVALID: CatalogsItemValidationDetails? = nil, LINK_LENGTH_TOO_LONG: CatalogsItemValidationDetails? = nil, LIST_PRICE_INVALID: CatalogsItemValidationDetails? = nil, MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED: CatalogsItemValidationDetails? = nil, PARSE_LINE_ERROR: CatalogsItemValidationDetails? = nil, PINJOIN_CONTENT_UNSAFE: CatalogsItemValidationDetails? = nil, PRICE_CANNOT_BE_DETERMINED: CatalogsItemValidationDetails? = nil, PRICE_MISSING: CatalogsItemValidationDetails? = nil, PRODUCT_LINK_MISSING: CatalogsItemValidationDetails? = nil, PRODUCT_PRICE_INVALID: CatalogsItemValidationDetails? = nil, TITLE_MISSING: CatalogsItemValidationDetails? = nil) {
        self.ADULT_INVALID = ADULT_INVALID
        self.ADWORDS_FORMAT_INVALID = ADWORDS_FORMAT_INVALID
        self.AVAILABILITY_INVALID = AVAILABILITY_INVALID
        self.BLOCKLISTED_IMAGE_SIGNATURE = BLOCKLISTED_IMAGE_SIGNATURE
        self.DESCRIPTION_MISSING = DESCRIPTION_MISSING
        self.DUPLICATE_PRODUCTS = DUPLICATE_PRODUCTS
        self.IMAGE_LINK_INVALID = IMAGE_LINK_INVALID
        self.IMAGE_LINK_LENGTH_TOO_LONG = IMAGE_LINK_LENGTH_TOO_LONG
        self.IMAGE_LINK_MISSING = IMAGE_LINK_MISSING
        self.INVALID_DOMAIN = INVALID_DOMAIN
        self.ITEMID_MISSING = ITEMID_MISSING
        self.ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE = ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
        self.LINK_FORMAT_INVALID = LINK_FORMAT_INVALID
        self.LINK_LENGTH_TOO_LONG = LINK_LENGTH_TOO_LONG
        self.LIST_PRICE_INVALID = LIST_PRICE_INVALID
        self.MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED = MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
        self.PARSE_LINE_ERROR = PARSE_LINE_ERROR
        self.PINJOIN_CONTENT_UNSAFE = PINJOIN_CONTENT_UNSAFE
        self.PRICE_CANNOT_BE_DETERMINED = PRICE_CANNOT_BE_DETERMINED
        self.PRICE_MISSING = PRICE_MISSING
        self.PRODUCT_LINK_MISSING = PRODUCT_LINK_MISSING
        self.PRODUCT_PRICE_INVALID = PRODUCT_PRICE_INVALID
        self.TITLE_MISSING = TITLE_MISSING
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ADULT_INVALID
        case ADWORDS_FORMAT_INVALID
        case AVAILABILITY_INVALID
        case BLOCKLISTED_IMAGE_SIGNATURE
        case DESCRIPTION_MISSING
        case DUPLICATE_PRODUCTS
        case IMAGE_LINK_INVALID
        case IMAGE_LINK_LENGTH_TOO_LONG
        case IMAGE_LINK_MISSING
        case INVALID_DOMAIN
        case ITEMID_MISSING
        case ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE
        case LINK_FORMAT_INVALID
        case LINK_LENGTH_TOO_LONG
        case LIST_PRICE_INVALID
        case MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED
        case PARSE_LINE_ERROR
        case PINJOIN_CONTENT_UNSAFE
        case PRICE_CANNOT_BE_DETERMINED
        case PRICE_MISSING
        case PRODUCT_LINK_MISSING
        case PRODUCT_PRICE_INVALID
        case TITLE_MISSING
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ADULT_INVALID, forKey: .ADULT_INVALID)
        try container.encodeIfPresent(ADWORDS_FORMAT_INVALID, forKey: .ADWORDS_FORMAT_INVALID)
        try container.encodeIfPresent(AVAILABILITY_INVALID, forKey: .AVAILABILITY_INVALID)
        try container.encodeIfPresent(BLOCKLISTED_IMAGE_SIGNATURE, forKey: .BLOCKLISTED_IMAGE_SIGNATURE)
        try container.encodeIfPresent(DESCRIPTION_MISSING, forKey: .DESCRIPTION_MISSING)
        try container.encodeIfPresent(DUPLICATE_PRODUCTS, forKey: .DUPLICATE_PRODUCTS)
        try container.encodeIfPresent(IMAGE_LINK_INVALID, forKey: .IMAGE_LINK_INVALID)
        try container.encodeIfPresent(IMAGE_LINK_LENGTH_TOO_LONG, forKey: .IMAGE_LINK_LENGTH_TOO_LONG)
        try container.encodeIfPresent(IMAGE_LINK_MISSING, forKey: .IMAGE_LINK_MISSING)
        try container.encodeIfPresent(INVALID_DOMAIN, forKey: .INVALID_DOMAIN)
        try container.encodeIfPresent(ITEMID_MISSING, forKey: .ITEMID_MISSING)
        try container.encodeIfPresent(ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE, forKey: .ITEM_MAIN_IMAGE_DOWNLOAD_FAILURE)
        try container.encodeIfPresent(LINK_FORMAT_INVALID, forKey: .LINK_FORMAT_INVALID)
        try container.encodeIfPresent(LINK_LENGTH_TOO_LONG, forKey: .LINK_LENGTH_TOO_LONG)
        try container.encodeIfPresent(LIST_PRICE_INVALID, forKey: .LIST_PRICE_INVALID)
        try container.encodeIfPresent(MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED, forKey: .MAX_ITEMS_PER_ITEM_GROUP_EXCEEDED)
        try container.encodeIfPresent(PARSE_LINE_ERROR, forKey: .PARSE_LINE_ERROR)
        try container.encodeIfPresent(PINJOIN_CONTENT_UNSAFE, forKey: .PINJOIN_CONTENT_UNSAFE)
        try container.encodeIfPresent(PRICE_CANNOT_BE_DETERMINED, forKey: .PRICE_CANNOT_BE_DETERMINED)
        try container.encodeIfPresent(PRICE_MISSING, forKey: .PRICE_MISSING)
        try container.encodeIfPresent(PRODUCT_LINK_MISSING, forKey: .PRODUCT_LINK_MISSING)
        try container.encodeIfPresent(PRODUCT_PRICE_INVALID, forKey: .PRODUCT_PRICE_INVALID)
        try container.encodeIfPresent(TITLE_MISSING, forKey: .TITLE_MISSING)
    }
}

