//
// IntegrationLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Schema for log sent from an integration application. */
public struct IntegrationLog: Codable, JSONEncodable, Hashable {

    public enum EventType: String, Codable, CaseIterable {
        case app = "APP"
        case api = "API"
    }
    public enum LogLevel: String, Codable, CaseIterable {
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
    }
    static let externalBusinessIdRule = StringRule(minLength: nil, maxLength: 2048, pattern: nil)
    static let advertiserIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    static let merchantIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    static let tagIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    static let feedProfileIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    static let messageRule = StringRule(minLength: nil, maxLength: 2048, pattern: nil)
    static let appVersionNumberRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    static let platformVersionNumberRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    /** Timestamp in milliseconds of when the log was executed at the client. */
    public var clientTimestamp: Int
    /** Log event type */
    public var eventType: EventType
    /** Log level type */
    public var logLevel: LogLevel
    public var externalBusinessId: String?
    public var advertiserId: String?
    public var merchantId: String?
    public var tagId: String?
    public var feedProfileId: String?
    /** Explanation of the event that occured. */
    public var message: String?
    /** Version number of the integration application. */
    public var appVersionNumber: String?
    /** Version number of the platform the integration application is running on. */
    public var platformVersionNumber: String?
    public var error: IntegrationLogClientError?
    public var request: IntegrationLogClientRequest?

    public init(clientTimestamp: Int, eventType: EventType, logLevel: LogLevel, externalBusinessId: String? = nil, advertiserId: String? = nil, merchantId: String? = nil, tagId: String? = nil, feedProfileId: String? = nil, message: String? = nil, appVersionNumber: String? = nil, platformVersionNumber: String? = nil, error: IntegrationLogClientError? = nil, request: IntegrationLogClientRequest? = nil) {
        self.clientTimestamp = clientTimestamp
        self.eventType = eventType
        self.logLevel = logLevel
        self.externalBusinessId = externalBusinessId
        self.advertiserId = advertiserId
        self.merchantId = merchantId
        self.tagId = tagId
        self.feedProfileId = feedProfileId
        self.message = message
        self.appVersionNumber = appVersionNumber
        self.platformVersionNumber = platformVersionNumber
        self.error = error
        self.request = request
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientTimestamp = "client_timestamp"
        case eventType = "event_type"
        case logLevel = "log_level"
        case externalBusinessId = "external_business_id"
        case advertiserId = "advertiser_id"
        case merchantId = "merchant_id"
        case tagId = "tag_id"
        case feedProfileId = "feed_profile_id"
        case message
        case appVersionNumber = "app_version_number"
        case platformVersionNumber = "platform_version_number"
        case error
        case request
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(clientTimestamp, forKey: .clientTimestamp)
        try container.encode(eventType, forKey: .eventType)
        try container.encode(logLevel, forKey: .logLevel)
        try container.encodeIfPresent(externalBusinessId, forKey: .externalBusinessId)
        try container.encodeIfPresent(advertiserId, forKey: .advertiserId)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(tagId, forKey: .tagId)
        try container.encodeIfPresent(feedProfileId, forKey: .feedProfileId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(appVersionNumber, forKey: .appVersionNumber)
        try container.encodeIfPresent(platformVersionNumber, forKey: .platformVersionNumber)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(request, forKey: .request)
    }
}

