//
// CatalogsItemsBatchRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request object of catalogs items batch */
public enum CatalogsItemsBatchRequest: Codable, JSONEncodable, Hashable {
    case typeCatalogsItemsCreateBatchRequest(CatalogsItemsCreateBatchRequest)
    case typeCatalogsItemsDeleteBatchRequest(CatalogsItemsDeleteBatchRequest)
    case typeCatalogsItemsDeleteDiscontinuedBatchRequest(CatalogsItemsDeleteDiscontinuedBatchRequest)
    case typeCatalogsItemsUpdateBatchRequest(CatalogsItemsUpdateBatchRequest)
    case typeCatalogsItemsUpsertBatchRequest(CatalogsItemsUpsertBatchRequest)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeCatalogsItemsCreateBatchRequest(let value):
            try container.encode(value)
        case .typeCatalogsItemsDeleteBatchRequest(let value):
            try container.encode(value)
        case .typeCatalogsItemsDeleteDiscontinuedBatchRequest(let value):
            try container.encode(value)
        case .typeCatalogsItemsUpdateBatchRequest(let value):
            try container.encode(value)
        case .typeCatalogsItemsUpsertBatchRequest(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(CatalogsItemsCreateBatchRequest.self) {
            self = .typeCatalogsItemsCreateBatchRequest(value)
        } else if let value = try? container.decode(CatalogsItemsDeleteBatchRequest.self) {
            self = .typeCatalogsItemsDeleteBatchRequest(value)
        } else if let value = try? container.decode(CatalogsItemsDeleteDiscontinuedBatchRequest.self) {
            self = .typeCatalogsItemsDeleteDiscontinuedBatchRequest(value)
        } else if let value = try? container.decode(CatalogsItemsUpdateBatchRequest.self) {
            self = .typeCatalogsItemsUpdateBatchRequest(value)
        } else if let value = try? container.decode(CatalogsItemsUpsertBatchRequest.self) {
            self = .typeCatalogsItemsUpsertBatchRequest(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of CatalogsItemsBatchRequest"))
        }
    }
}

