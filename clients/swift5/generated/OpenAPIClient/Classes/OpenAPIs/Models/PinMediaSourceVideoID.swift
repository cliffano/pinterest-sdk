//
// PinMediaSourceVideoID.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Video ID-based media source */
public struct PinMediaSourceVideoID: Codable, JSONEncodable, Hashable {

    public enum SourceType: String, Codable, CaseIterable {
        case videoId = "video_id"
    }
    public enum CoverImageContentType: String, Codable, CaseIterable {
        case jpeg = "image/jpeg"
        case png = "image/png"
    }
    static let mediaIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    public var sourceType: SourceType
    /** Cover image url. */
    public var coverImageUrl: String?
    /** Content type for cover image Base64. */
    public var coverImageContentType: CoverImageContentType?
    /** Cover image Base64. */
    public var coverImageData: String?
    public var mediaId: String
    /** Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users. */
    public var isStandard: Bool? = true

    public init(sourceType: SourceType, coverImageUrl: String? = nil, coverImageContentType: CoverImageContentType? = nil, coverImageData: String? = nil, mediaId: String, isStandard: Bool? = true) {
        self.sourceType = sourceType
        self.coverImageUrl = coverImageUrl
        self.coverImageContentType = coverImageContentType
        self.coverImageData = coverImageData
        self.mediaId = mediaId
        self.isStandard = isStandard
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceType = "source_type"
        case coverImageUrl = "cover_image_url"
        case coverImageContentType = "cover_image_content_type"
        case coverImageData = "cover_image_data"
        case mediaId = "media_id"
        case isStandard = "is_standard"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sourceType, forKey: .sourceType)
        try container.encodeIfPresent(coverImageUrl, forKey: .coverImageUrl)
        try container.encodeIfPresent(coverImageContentType, forKey: .coverImageContentType)
        try container.encodeIfPresent(coverImageData, forKey: .coverImageData)
        try container.encode(mediaId, forKey: .mediaId)
        try container.encodeIfPresent(isStandard, forKey: .isStandard)
    }
}

