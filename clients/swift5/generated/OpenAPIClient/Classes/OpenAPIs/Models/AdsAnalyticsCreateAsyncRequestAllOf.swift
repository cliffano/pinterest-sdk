//
// AdsAnalyticsCreateAsyncRequestAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdsAnalyticsCreateAsyncRequestAllOf: Codable, JSONEncodable, Hashable {

    /** Metric report start date (UTC). Format: YYYY-MM-DD */
    public var startDate: String
    /** Metric report end date (UTC). Format: YYYY-MM-DD */
    public var endDate: String
    /** TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly */
    public var granularity: Granularity
    /** Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */
    public var clickWindowDays: ConversionAttributionWindowDays? = 30
    /** Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */
    public var engagementWindowDays: ConversionAttributionWindowDays? = 30
    /** Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. */
    public var viewWindowDays: ConversionAttributionWindowDays? = 1
    /** The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. */
    public var conversionReportTime: ConversionReportTimeType? = "TIME_OF_AD_ACTION"
    /** List of types of attribution for the conversion report */
    public var attributionTypes: [ConversionReportAttributionType]?

    public init(startDate: String, endDate: String, granularity: Granularity, clickWindowDays: ConversionAttributionWindowDays? = 30, engagementWindowDays: ConversionAttributionWindowDays? = 30, viewWindowDays: ConversionAttributionWindowDays? = 1, conversionReportTime: ConversionReportTimeType? = "TIME_OF_AD_ACTION", attributionTypes: [ConversionReportAttributionType]? = nil) {
        self.startDate = startDate
        self.endDate = endDate
        self.granularity = granularity
        self.clickWindowDays = clickWindowDays
        self.engagementWindowDays = engagementWindowDays
        self.viewWindowDays = viewWindowDays
        self.conversionReportTime = conversionReportTime
        self.attributionTypes = attributionTypes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startDate = "start_date"
        case endDate = "end_date"
        case granularity
        case clickWindowDays = "click_window_days"
        case engagementWindowDays = "engagement_window_days"
        case viewWindowDays = "view_window_days"
        case conversionReportTime = "conversion_report_time"
        case attributionTypes = "attribution_types"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(endDate, forKey: .endDate)
        try container.encode(granularity, forKey: .granularity)
        try container.encodeIfPresent(clickWindowDays, forKey: .clickWindowDays)
        try container.encodeIfPresent(engagementWindowDays, forKey: .engagementWindowDays)
        try container.encodeIfPresent(viewWindowDays, forKey: .viewWindowDays)
        try container.encodeIfPresent(conversionReportTime, forKey: .conversionReportTime)
        try container.encodeIfPresent(attributionTypes, forKey: .attributionTypes)
    }
}

