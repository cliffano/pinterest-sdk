//
// PinMediaSource.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Pin media source. */
public enum PinMediaSource: Codable, JSONEncodable, Hashable {
    case typePinMediaSourceImageBase64(PinMediaSourceImageBase64)
    case typePinMediaSourceImageURL(PinMediaSourceImageURL)
    case typePinMediaSourceImagesBase64(PinMediaSourceImagesBase64)
    case typePinMediaSourceImagesURL(PinMediaSourceImagesURL)
    case typePinMediaSourcePinURL(PinMediaSourcePinURL)
    case typePinMediaSourceVideoID(PinMediaSourceVideoID)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typePinMediaSourceImageBase64(let value):
            try container.encode(value)
        case .typePinMediaSourceImageURL(let value):
            try container.encode(value)
        case .typePinMediaSourceImagesBase64(let value):
            try container.encode(value)
        case .typePinMediaSourceImagesURL(let value):
            try container.encode(value)
        case .typePinMediaSourcePinURL(let value):
            try container.encode(value)
        case .typePinMediaSourceVideoID(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(PinMediaSourceImageBase64.self) {
            self = .typePinMediaSourceImageBase64(value)
        } else if let value = try? container.decode(PinMediaSourceImageURL.self) {
            self = .typePinMediaSourceImageURL(value)
        } else if let value = try? container.decode(PinMediaSourceImagesBase64.self) {
            self = .typePinMediaSourceImagesBase64(value)
        } else if let value = try? container.decode(PinMediaSourceImagesURL.self) {
            self = .typePinMediaSourceImagesURL(value)
        } else if let value = try? container.decode(PinMediaSourcePinURL.self) {
            self = .typePinMediaSourcePinURL(value)
        } else if let value = try? container.decode(PinMediaSourceVideoID.self) {
            self = .typePinMediaSourceVideoID(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of PinMediaSource"))
        }
    }
}

