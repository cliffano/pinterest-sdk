//
// CatalogsProductGroupPricingCurrencyCriteria.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsProductGroupPricingCurrencyCriteria: Codable, JSONEncodable, Hashable {

    public enum Operator: String, Codable, CaseIterable {
        case greaterThan = "GREATER_THAN"
        case greaterThanOrEquals = "GREATER_THAN_OR_EQUALS"
        case lessThan = "LESS_THAN"
        case lessThanOrEquals = "LESS_THAN_OR_EQUALS"
    }
    static let valueRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var _operator: Operator
    public var value: Double
    public var currency: NonNullableCatalogsCurrency
    public var negated: Bool? = false

    public init(_operator: Operator, value: Double, currency: NonNullableCatalogsCurrency, negated: Bool? = false) {
        self._operator = _operator
        self.value = value
        self.currency = currency
        self.negated = negated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _operator = "operator"
        case value
        case currency
        case negated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_operator, forKey: ._operator)
        try container.encode(value, forKey: .value)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(negated, forKey: .negated)
    }
}

