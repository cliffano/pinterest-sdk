//
// PinUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Pin fields for updates */
public struct PinUpdate: Codable, JSONEncodable, Hashable {

    static let altTextRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let boardIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let boardSectionIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let descriptionRule = StringRule(minLength: nil, maxLength: 800, pattern: nil)
    static let linkRule = StringRule(minLength: nil, maxLength: 2048, pattern: nil)
    static let titleRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    /** Pin's alternative text. */
    public var altText: String?
    /** The id of the board to move the Pin onto. */
    public var boardId: String?
    /** <a href=\"https://help.pinterest.com/en/article/create-a-board-section\">Board section</a> ID. */
    public var boardSectionId: String?
    /** Pin description - 800 characters maximum. */
    public var description: String?
    /** URL viewer is taken to when they click pin. */
    public var link: String?
    /** The native pin title that creators explicitly prefer to display. */
    public var title: String?
    /** Carousel Pin slots data. */
    public var carouselSlots: [PinUpdateCarouselSlotsInner]?
    /** Private note for this Pin. <a href=\"https://help.pinterest.com/en/article/add-notes-to-your-pins\">Learn more</a>. */
    public var note: String?

    public init(altText: String? = nil, boardId: String? = nil, boardSectionId: String? = nil, description: String? = nil, link: String? = nil, title: String? = nil, carouselSlots: [PinUpdateCarouselSlotsInner]? = nil, note: String? = nil) {
        self.altText = altText
        self.boardId = boardId
        self.boardSectionId = boardSectionId
        self.description = description
        self.link = link
        self.title = title
        self.carouselSlots = carouselSlots
        self.note = note
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case altText = "alt_text"
        case boardId = "board_id"
        case boardSectionId = "board_section_id"
        case description
        case link
        case title
        case carouselSlots = "carousel_slots"
        case note
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(altText, forKey: .altText)
        try container.encodeIfPresent(boardId, forKey: .boardId)
        try container.encodeIfPresent(boardSectionId, forKey: .boardSectionId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(link, forKey: .link)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(carouselSlots, forKey: .carouselSlots)
        try container.encodeIfPresent(note, forKey: .note)
    }
}

