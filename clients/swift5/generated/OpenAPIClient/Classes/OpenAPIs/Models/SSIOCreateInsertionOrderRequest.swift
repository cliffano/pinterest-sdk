//
// SSIOCreateInsertionOrderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SSIOCreateInsertionOrderRequest: Codable, JSONEncodable, Hashable {

    public enum OrderLineType: String, Codable, CaseIterable {
        case budget = "BUDGET"
        case perpetuals = "PERPETUALS"
    }
    static let startDateRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(\\d{4})-(\\d{2})-(\\d{2})$/")
    static let endDateRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(\\d{4})-(\\d{2})-(\\d{2})$/")
    /** Starting date of time period. Format: YYYY-MM-DD */
    public var startDate: String
    /** End date of time period. Format: YYYY-MM-DD */
    public var endDate: String?
    /** The po number */
    public var poNumber: String
    /** If Budget order line, the budget amount. */
    public var budgetAmount: Double?
    /** The billing contact first name */
    public var billingContactFirstname: String
    /** The billing contact last name */
    public var billingContactLastname: String
    /** The billing contact email */
    public var billingContactEmail: String
    /** The media contact first name */
    public var mediaContactFirstname: String
    /** The media contact last name */
    public var mediaContactLastname: String
    /** The media contact email */
    public var mediaContactEmail: String
    /** URL link for agency */
    public var agencyLink: String?
    /** The email of user submitting the insertion order */
    public var userEmail: String?
    /** The UTC timestamp (to the nearest sec) of when terms were accepted */
    public var acceptedTermsTime: Int?
    /** The pmp id */
    public var pmpId: String
    /** The order name */
    public var orderName: String
    /** Type can be Budget or Perpetual */
    public var orderLineType: OrderLineType
    /** The SFDC id for the terms */
    public var acceptedTermsId: String
    /** The bill-to company id */
    public var billtoCompanyId: String
    /** The bill-to business address id */
    public var billtoBusinessAddressId: String
    /** The bill-to billing address id */
    public var billtoBillingAddressId: String
    /** If Ongoing (perpetual) order line, the estimated monthly spend */
    public var estimatedMonthlySpend: Double?
    public var currencyInfo: Currency

    public init(startDate: String, endDate: String? = nil, poNumber: String, budgetAmount: Double? = nil, billingContactFirstname: String, billingContactLastname: String, billingContactEmail: String, mediaContactFirstname: String, mediaContactLastname: String, mediaContactEmail: String, agencyLink: String? = nil, userEmail: String? = nil, acceptedTermsTime: Int? = nil, pmpId: String, orderName: String, orderLineType: OrderLineType, acceptedTermsId: String, billtoCompanyId: String, billtoBusinessAddressId: String, billtoBillingAddressId: String, estimatedMonthlySpend: Double? = nil, currencyInfo: Currency) {
        self.startDate = startDate
        self.endDate = endDate
        self.poNumber = poNumber
        self.budgetAmount = budgetAmount
        self.billingContactFirstname = billingContactFirstname
        self.billingContactLastname = billingContactLastname
        self.billingContactEmail = billingContactEmail
        self.mediaContactFirstname = mediaContactFirstname
        self.mediaContactLastname = mediaContactLastname
        self.mediaContactEmail = mediaContactEmail
        self.agencyLink = agencyLink
        self.userEmail = userEmail
        self.acceptedTermsTime = acceptedTermsTime
        self.pmpId = pmpId
        self.orderName = orderName
        self.orderLineType = orderLineType
        self.acceptedTermsId = acceptedTermsId
        self.billtoCompanyId = billtoCompanyId
        self.billtoBusinessAddressId = billtoBusinessAddressId
        self.billtoBillingAddressId = billtoBillingAddressId
        self.estimatedMonthlySpend = estimatedMonthlySpend
        self.currencyInfo = currencyInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startDate = "start_date"
        case endDate = "end_date"
        case poNumber = "po_number"
        case budgetAmount = "budget_amount"
        case billingContactFirstname = "billing_contact_firstname"
        case billingContactLastname = "billing_contact_lastname"
        case billingContactEmail = "billing_contact_email"
        case mediaContactFirstname = "media_contact_firstname"
        case mediaContactLastname = "media_contact_lastname"
        case mediaContactEmail = "media_contact_email"
        case agencyLink = "agency_link"
        case userEmail = "user_email"
        case acceptedTermsTime = "accepted_terms_time"
        case pmpId = "pmp_id"
        case orderName = "order_name"
        case orderLineType = "order_line_type"
        case acceptedTermsId = "accepted_terms_id"
        case billtoCompanyId = "billto_company_id"
        case billtoBusinessAddressId = "billto_business_address_id"
        case billtoBillingAddressId = "billto_billing_address_id"
        case estimatedMonthlySpend = "estimated_monthly_spend"
        case currencyInfo = "currency_info"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encode(poNumber, forKey: .poNumber)
        try container.encodeIfPresent(budgetAmount, forKey: .budgetAmount)
        try container.encode(billingContactFirstname, forKey: .billingContactFirstname)
        try container.encode(billingContactLastname, forKey: .billingContactLastname)
        try container.encode(billingContactEmail, forKey: .billingContactEmail)
        try container.encode(mediaContactFirstname, forKey: .mediaContactFirstname)
        try container.encode(mediaContactLastname, forKey: .mediaContactLastname)
        try container.encode(mediaContactEmail, forKey: .mediaContactEmail)
        try container.encodeIfPresent(agencyLink, forKey: .agencyLink)
        try container.encodeIfPresent(userEmail, forKey: .userEmail)
        try container.encodeIfPresent(acceptedTermsTime, forKey: .acceptedTermsTime)
        try container.encode(pmpId, forKey: .pmpId)
        try container.encode(orderName, forKey: .orderName)
        try container.encode(orderLineType, forKey: .orderLineType)
        try container.encode(acceptedTermsId, forKey: .acceptedTermsId)
        try container.encode(billtoCompanyId, forKey: .billtoCompanyId)
        try container.encode(billtoBusinessAddressId, forKey: .billtoBusinessAddressId)
        try container.encode(billtoBillingAddressId, forKey: .billtoBillingAddressId)
        try container.encodeIfPresent(estimatedMonthlySpend, forKey: .estimatedMonthlySpend)
        try container.encode(currencyInfo, forKey: .currencyInfo)
    }
}

