//
// CatalogsFeedValidationErrors.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsFeedValidationErrors: Codable, JSONEncodable, Hashable {

    public var fetchError: Int?
    public var fetchInactiveFeedError: Int?
    public var encodingError: Int?
    public var delimiterError: Int?
    public var requiredColumnsMissing: Int?
    public var imageLinkInvalid: Int?
    public var itemidMissing: Int?
    public var titleMissing: Int?
    public var descriptionMissing: Int?
    public var productCategoryInvalid: Int?
    public var productLinkMissing: Int?
    public var imageLinkMissing: Int?
    public var availabilityInvalid: Int?
    public var productPriceInvalid: Int?
    public var linkFormatInvalid: Int?
    public var parseLineError: Int?
    public var adwordsFormatInvalid: Int?
    public var productCategoryMissing: Int?
    public var internalServiceError: Int?
    public var noVerifiedDomain: Int?
    public var adultInvalid: Int?
    public var invalidDomain: Int?
    public var feedLengthTooLong: Int?
    public var linkLengthTooLong: Int?
    public var malformedXml: Int?
    public var redirectInvalid: Int?
    public var priceMissing: Int?
    public var feedTooSmall: Int?
    public var conditionInvalid: Int?
    public var shopifyNoProducts: Int?
    public var maxItemsPerItemGroupExceeded: Int?
    public var itemMainImageDownloadFailure: Int?
    public var pinjoinContentUnsafe: Int?
    public var blocklistedImageSignature: Int?

    public init(fetchError: Int? = nil, fetchInactiveFeedError: Int? = nil, encodingError: Int? = nil, delimiterError: Int? = nil, requiredColumnsMissing: Int? = nil, imageLinkInvalid: Int? = nil, itemidMissing: Int? = nil, titleMissing: Int? = nil, descriptionMissing: Int? = nil, productCategoryInvalid: Int? = nil, productLinkMissing: Int? = nil, imageLinkMissing: Int? = nil, availabilityInvalid: Int? = nil, productPriceInvalid: Int? = nil, linkFormatInvalid: Int? = nil, parseLineError: Int? = nil, adwordsFormatInvalid: Int? = nil, productCategoryMissing: Int? = nil, internalServiceError: Int? = nil, noVerifiedDomain: Int? = nil, adultInvalid: Int? = nil, invalidDomain: Int? = nil, feedLengthTooLong: Int? = nil, linkLengthTooLong: Int? = nil, malformedXml: Int? = nil, redirectInvalid: Int? = nil, priceMissing: Int? = nil, feedTooSmall: Int? = nil, conditionInvalid: Int? = nil, shopifyNoProducts: Int? = nil, maxItemsPerItemGroupExceeded: Int? = nil, itemMainImageDownloadFailure: Int? = nil, pinjoinContentUnsafe: Int? = nil, blocklistedImageSignature: Int? = nil) {
        self.fetchError = fetchError
        self.fetchInactiveFeedError = fetchInactiveFeedError
        self.encodingError = encodingError
        self.delimiterError = delimiterError
        self.requiredColumnsMissing = requiredColumnsMissing
        self.imageLinkInvalid = imageLinkInvalid
        self.itemidMissing = itemidMissing
        self.titleMissing = titleMissing
        self.descriptionMissing = descriptionMissing
        self.productCategoryInvalid = productCategoryInvalid
        self.productLinkMissing = productLinkMissing
        self.imageLinkMissing = imageLinkMissing
        self.availabilityInvalid = availabilityInvalid
        self.productPriceInvalid = productPriceInvalid
        self.linkFormatInvalid = linkFormatInvalid
        self.parseLineError = parseLineError
        self.adwordsFormatInvalid = adwordsFormatInvalid
        self.productCategoryMissing = productCategoryMissing
        self.internalServiceError = internalServiceError
        self.noVerifiedDomain = noVerifiedDomain
        self.adultInvalid = adultInvalid
        self.invalidDomain = invalidDomain
        self.feedLengthTooLong = feedLengthTooLong
        self.linkLengthTooLong = linkLengthTooLong
        self.malformedXml = malformedXml
        self.redirectInvalid = redirectInvalid
        self.priceMissing = priceMissing
        self.feedTooSmall = feedTooSmall
        self.conditionInvalid = conditionInvalid
        self.shopifyNoProducts = shopifyNoProducts
        self.maxItemsPerItemGroupExceeded = maxItemsPerItemGroupExceeded
        self.itemMainImageDownloadFailure = itemMainImageDownloadFailure
        self.pinjoinContentUnsafe = pinjoinContentUnsafe
        self.blocklistedImageSignature = blocklistedImageSignature
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fetchError = "fetch_error"
        case fetchInactiveFeedError = "fetch_inactive_feed_error"
        case encodingError = "encoding_error"
        case delimiterError = "delimiter_error"
        case requiredColumnsMissing = "required_columns_missing"
        case imageLinkInvalid = "image_link_invalid"
        case itemidMissing = "itemid_missing"
        case titleMissing = "title_missing"
        case descriptionMissing = "description_missing"
        case productCategoryInvalid = "product_category_invalid"
        case productLinkMissing = "product_link_missing"
        case imageLinkMissing = "image_link_missing"
        case availabilityInvalid = "availability_invalid"
        case productPriceInvalid = "product_price_invalid"
        case linkFormatInvalid = "link_format_invalid"
        case parseLineError = "parse_line_error"
        case adwordsFormatInvalid = "adwords_format_invalid"
        case productCategoryMissing = "product_category_missing"
        case internalServiceError = "internal_service_error"
        case noVerifiedDomain = "no_verified_domain"
        case adultInvalid = "adult_invalid"
        case invalidDomain = "invalid_domain"
        case feedLengthTooLong = "feed_length_too_long"
        case linkLengthTooLong = "link_length_too_long"
        case malformedXml = "malformed_xml"
        case redirectInvalid = "redirect_invalid"
        case priceMissing = "price_missing"
        case feedTooSmall = "feed_too_small"
        case conditionInvalid = "condition_invalid"
        case shopifyNoProducts = "shopify_no_products"
        case maxItemsPerItemGroupExceeded = "max_items_per_item_group_exceeded"
        case itemMainImageDownloadFailure = "item_main_image_download_failure"
        case pinjoinContentUnsafe = "pinjoin_content_unsafe"
        case blocklistedImageSignature = "blocklisted_image_signature"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fetchError, forKey: .fetchError)
        try container.encodeIfPresent(fetchInactiveFeedError, forKey: .fetchInactiveFeedError)
        try container.encodeIfPresent(encodingError, forKey: .encodingError)
        try container.encodeIfPresent(delimiterError, forKey: .delimiterError)
        try container.encodeIfPresent(requiredColumnsMissing, forKey: .requiredColumnsMissing)
        try container.encodeIfPresent(imageLinkInvalid, forKey: .imageLinkInvalid)
        try container.encodeIfPresent(itemidMissing, forKey: .itemidMissing)
        try container.encodeIfPresent(titleMissing, forKey: .titleMissing)
        try container.encodeIfPresent(descriptionMissing, forKey: .descriptionMissing)
        try container.encodeIfPresent(productCategoryInvalid, forKey: .productCategoryInvalid)
        try container.encodeIfPresent(productLinkMissing, forKey: .productLinkMissing)
        try container.encodeIfPresent(imageLinkMissing, forKey: .imageLinkMissing)
        try container.encodeIfPresent(availabilityInvalid, forKey: .availabilityInvalid)
        try container.encodeIfPresent(productPriceInvalid, forKey: .productPriceInvalid)
        try container.encodeIfPresent(linkFormatInvalid, forKey: .linkFormatInvalid)
        try container.encodeIfPresent(parseLineError, forKey: .parseLineError)
        try container.encodeIfPresent(adwordsFormatInvalid, forKey: .adwordsFormatInvalid)
        try container.encodeIfPresent(productCategoryMissing, forKey: .productCategoryMissing)
        try container.encodeIfPresent(internalServiceError, forKey: .internalServiceError)
        try container.encodeIfPresent(noVerifiedDomain, forKey: .noVerifiedDomain)
        try container.encodeIfPresent(adultInvalid, forKey: .adultInvalid)
        try container.encodeIfPresent(invalidDomain, forKey: .invalidDomain)
        try container.encodeIfPresent(feedLengthTooLong, forKey: .feedLengthTooLong)
        try container.encodeIfPresent(linkLengthTooLong, forKey: .linkLengthTooLong)
        try container.encodeIfPresent(malformedXml, forKey: .malformedXml)
        try container.encodeIfPresent(redirectInvalid, forKey: .redirectInvalid)
        try container.encodeIfPresent(priceMissing, forKey: .priceMissing)
        try container.encodeIfPresent(feedTooSmall, forKey: .feedTooSmall)
        try container.encodeIfPresent(conditionInvalid, forKey: .conditionInvalid)
        try container.encodeIfPresent(shopifyNoProducts, forKey: .shopifyNoProducts)
        try container.encodeIfPresent(maxItemsPerItemGroupExceeded, forKey: .maxItemsPerItemGroupExceeded)
        try container.encodeIfPresent(itemMainImageDownloadFailure, forKey: .itemMainImageDownloadFailure)
        try container.encodeIfPresent(pinjoinContentUnsafe, forKey: .pinjoinContentUnsafe)
        try container.encodeIfPresent(blocklistedImageSignature, forKey: .blocklistedImageSignature)
    }
}

