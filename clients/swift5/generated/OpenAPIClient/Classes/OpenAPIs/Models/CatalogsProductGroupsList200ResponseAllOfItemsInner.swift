//
// CatalogsProductGroupsList200ResponseAllOfItemsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsProductGroupsList200ResponseAllOfItemsInner: Codable, JSONEncodable, Hashable {

    public enum FeedId: String, Codable, CaseIterable {
        case null = "null"
    }
    public enum CatalogType: String, Codable, CaseIterable {
        case retail = "RETAIL"
    }
    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let catalogIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** ID of the catalog product group. */
    public var id: String
    /** Name of catalog product group */
    public var name: String?
    public var description: String?
    public var filters: CatalogsProductGroupFilters
    /** boolean indicator of whether the product group is being featured or not */
    public var isFeatured: Bool?
    public var type: CatalogsProductGroupType?
    public var status: CatalogsProductGroupStatus?
    /** Unix timestamp in seconds of when catalog product group was created. */
    public var createdAt: Int?
    /** Unix timestamp in seconds of last time catalog product group was updated. */
    public var updatedAt: Int?
    public var feedId: FeedId?
    public var catalogType: CatalogType
    public var catalogId: String

    public init(id: String, name: String? = nil, description: String? = nil, filters: CatalogsProductGroupFilters, isFeatured: Bool? = nil, type: CatalogsProductGroupType? = nil, status: CatalogsProductGroupStatus? = nil, createdAt: Int? = nil, updatedAt: Int? = nil, feedId: FeedId?, catalogType: CatalogType, catalogId: String) {
        self.id = id
        self.name = name
        self.description = description
        self.filters = filters
        self.isFeatured = isFeatured
        self.type = type
        self.status = status
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.feedId = feedId
        self.catalogType = catalogType
        self.catalogId = catalogId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case filters
        case isFeatured = "is_featured"
        case type
        case status
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case feedId = "feed_id"
        case catalogType = "catalog_type"
        case catalogId = "catalog_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(filters, forKey: .filters)
        try container.encodeIfPresent(isFeatured, forKey: .isFeatured)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(feedId, forKey: .feedId)
        try container.encode(catalogType, forKey: .catalogType)
        try container.encode(catalogId, forKey: .catalogId)
    }
}

