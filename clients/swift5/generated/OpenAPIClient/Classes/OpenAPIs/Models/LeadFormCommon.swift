//
// LeadFormCommon.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Creation fields */
public struct LeadFormCommon: Codable, JSONEncodable, Hashable {

    /** Internal name of the lead form. */
    public var name: String?
    /** A link to the advertiser's privacy policy. This will be included in the lead form's disclosure language. */
    public var privacyPolicyLink: String?
    /** Whether the advertiser has accepted Pinterest's terms of service for creating a lead ad. */
    public var hasAcceptedTerms: Bool?
    /** A message for people who complete the form to let them know what happens next. */
    public var completionMessage: String?
    public var status: LeadFormStatus?
    /** Additional disclosure language to be included in the lead form. */
    public var disclosureLanguage: String?
    /** List of questions to be displayed on the lead form. */
    public var questions: [LeadFormQuestion]?

    public init(name: String? = nil, privacyPolicyLink: String? = nil, hasAcceptedTerms: Bool? = nil, completionMessage: String? = nil, status: LeadFormStatus? = nil, disclosureLanguage: String? = nil, questions: [LeadFormQuestion]? = nil) {
        self.name = name
        self.privacyPolicyLink = privacyPolicyLink
        self.hasAcceptedTerms = hasAcceptedTerms
        self.completionMessage = completionMessage
        self.status = status
        self.disclosureLanguage = disclosureLanguage
        self.questions = questions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case privacyPolicyLink = "privacy_policy_link"
        case hasAcceptedTerms = "has_accepted_terms"
        case completionMessage = "completion_message"
        case status
        case disclosureLanguage = "disclosure_language"
        case questions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(privacyPolicyLink, forKey: .privacyPolicyLink)
        try container.encodeIfPresent(hasAcceptedTerms, forKey: .hasAcceptedTerms)
        try container.encodeIfPresent(completionMessage, forKey: .completionMessage)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(disclosureLanguage, forKey: .disclosureLanguage)
        try container.encodeIfPresent(questions, forKey: .questions)
    }
}

