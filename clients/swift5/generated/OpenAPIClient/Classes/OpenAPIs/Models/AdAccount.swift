//
// AdAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdAccount: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var name: String?
    public var owner: AdAccountOwner?
    public var country: Country?
    public var currency: Currency?
    public var permissions: [BusinessAccessRole]?
    /** Creation time. Unix timestamp in seconds. */
    public var createdTime: Int?
    /** Last update time. Unix timestamp in seconds. */
    public var updatedTime: Int?

    public init(id: String? = nil, name: String? = nil, owner: AdAccountOwner? = nil, country: Country? = nil, currency: Currency? = nil, permissions: [BusinessAccessRole]? = nil, createdTime: Int? = nil, updatedTime: Int? = nil) {
        self.id = id
        self.name = name
        self.owner = owner
        self.country = country
        self.currency = currency
        self.permissions = permissions
        self.createdTime = createdTime
        self.updatedTime = updatedTime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case owner
        case country
        case currency
        case permissions
        case createdTime = "created_time"
        case updatedTime = "updated_time"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(updatedTime, forKey: .updatedTime)
    }
}

