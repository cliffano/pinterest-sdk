//
// OptimizationGoalMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OptimizationGoalMetadata: Codable, JSONEncodable, Hashable {

    public var conversionTagV3GoalMetadata: OptimizationGoalMetadataConversionTagV3GoalMetadata?
    public var frequencyGoalMetadata: OptimizationGoalMetadataFrequencyGoalMetadata?
    public var scrollupGoalMetadata: OptimizationGoalMetadataScrollupGoalMetadata?

    public init(conversionTagV3GoalMetadata: OptimizationGoalMetadataConversionTagV3GoalMetadata? = nil, frequencyGoalMetadata: OptimizationGoalMetadataFrequencyGoalMetadata? = nil, scrollupGoalMetadata: OptimizationGoalMetadataScrollupGoalMetadata? = nil) {
        self.conversionTagV3GoalMetadata = conversionTagV3GoalMetadata
        self.frequencyGoalMetadata = frequencyGoalMetadata
        self.scrollupGoalMetadata = scrollupGoalMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case conversionTagV3GoalMetadata = "conversion_tag_v3_goal_metadata"
        case frequencyGoalMetadata = "frequency_goal_metadata"
        case scrollupGoalMetadata = "scrollup_goal_metadata"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(conversionTagV3GoalMetadata, forKey: .conversionTagV3GoalMetadata)
        try container.encodeIfPresent(frequencyGoalMetadata, forKey: .frequencyGoalMetadata)
        try container.encodeIfPresent(scrollupGoalMetadata, forKey: .scrollupGoalMetadata)
    }
}

