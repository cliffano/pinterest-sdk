//
// LineItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LineItem: Codable, JSONEncodable, Hashable {

    /** Product brand. For example, \"Parker\". */
    public var productBrand: String?
    /** Product category. For example, \"Shoes\". */
    public var productCategory: String?
    /** Product ID. For example, 1414. */
    public var productId: Int?
    /** Product name. For example, \"Parker Boots\". */
    public var productName: String?
    /** Product price. For example, \"99.99\". */
    public var productPrice: String?
    /** Product quantity. For example, 2. */
    public var productQuantity: Int?
    /** Product variant. For example, \"Red\". */
    public var productVariant: String?
    /** Product variant ID. For example, \"1414-34832\". */
    public var productVariantId: String?

    public init(productBrand: String? = nil, productCategory: String? = nil, productId: Int? = nil, productName: String? = nil, productPrice: String? = nil, productQuantity: Int? = nil, productVariant: String? = nil, productVariantId: String? = nil) {
        self.productBrand = productBrand
        self.productCategory = productCategory
        self.productId = productId
        self.productName = productName
        self.productPrice = productPrice
        self.productQuantity = productQuantity
        self.productVariant = productVariant
        self.productVariantId = productVariantId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case productBrand = "product_brand"
        case productCategory = "product_category"
        case productId = "product_id"
        case productName = "product_name"
        case productPrice = "product_price"
        case productQuantity = "product_quantity"
        case productVariant = "product_variant"
        case productVariantId = "product_variant_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(productBrand, forKey: .productBrand)
        try container.encodeIfPresent(productCategory, forKey: .productCategory)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(productPrice, forKey: .productPrice)
        try container.encodeIfPresent(productQuantity, forKey: .productQuantity)
        try container.encodeIfPresent(productVariant, forKey: .productVariant)
        try container.encodeIfPresent(productVariantId, forKey: .productVariantId)
    }
}

