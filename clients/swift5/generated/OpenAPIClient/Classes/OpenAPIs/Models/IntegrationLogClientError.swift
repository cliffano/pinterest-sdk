//
// IntegrationLogClientError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** System error details included in the log sent by the client. */
public struct IntegrationLogClientError: Codable, JSONEncodable, Hashable {

    static let causeRule = StringRule(minLength: nil, maxLength: 512, pattern: nil)
    static let fileNameRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let messageRule = StringRule(minLength: nil, maxLength: 512, pattern: nil)
    static let messageDetailRule = StringRule(minLength: nil, maxLength: 1024, pattern: nil)
    static let nameRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    /** Original cause of the error. */
    public var cause: String?
    /** Column number in the line of the file that raised the error. */
    public var columnNumber: Int?
    /** Filename where the error happened. */
    public var fileName: String?
    /** Line number where the error happened. */
    public var lineNumber: Int?
    /** Human-readable description of the error. */
    public var message: String?
    /** More detail about the message. */
    public var messageDetail: String?
    /** Filename where the error happened. */
    public var name: String?
    /** Integer that specifies the error code. */
    public var number: Int?
    /** Stack trace of where the error happened. */
    public var stackTrace: String?

    public init(cause: String? = nil, columnNumber: Int? = nil, fileName: String? = nil, lineNumber: Int? = nil, message: String? = nil, messageDetail: String? = nil, name: String? = nil, number: Int? = nil, stackTrace: String? = nil) {
        self.cause = cause
        self.columnNumber = columnNumber
        self.fileName = fileName
        self.lineNumber = lineNumber
        self.message = message
        self.messageDetail = messageDetail
        self.name = name
        self.number = number
        self.stackTrace = stackTrace
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cause
        case columnNumber = "column_number"
        case fileName = "file_name"
        case lineNumber = "line_number"
        case message
        case messageDetail = "message_detail"
        case name
        case number
        case stackTrace = "stack_trace"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cause, forKey: .cause)
        try container.encodeIfPresent(columnNumber, forKey: .columnNumber)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(lineNumber, forKey: .lineNumber)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(messageDetail, forKey: .messageDetail)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(stackTrace, forKey: .stackTrace)
    }
}

