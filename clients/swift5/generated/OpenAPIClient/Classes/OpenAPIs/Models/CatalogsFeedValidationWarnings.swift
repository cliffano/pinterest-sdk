//
// CatalogsFeedValidationWarnings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsFeedValidationWarnings: Codable, JSONEncodable, Hashable {

    public var titleLengthTooLong: Int?
    public var descriptionLengthTooLong: Int?
    public var genderInvalid: Int?
    public var ageGroupInvalid: Int?
    public var sizeTypeInvalid: Int?
    public var linkFormatWarning: Int?
    public var duplicateProducts: Int?
    public var duplicateLinks: Int?
    public var salesPriceInvalid: Int?
    public var productCategoryDepthWarning: Int?
    public var adwordsSameAsLink: Int?
    public var duplicateHeaders: Int?
    public var fetchSameSignature: Int?
    public var adwordsFormatWarning: Int?
    public var additionalImageLinkWarning: Int?
    public var imageLinkWarning: Int?
    public var shippingInvalid: Int?
    public var taxInvalid: Int?
    public var shippingWeightInvalid: Int?
    public var expirationDateInvalid: Int?
    public var availabilityDateInvalid: Int?
    public var saleDateInvalid: Int?
    public var weightUnitInvalid: Int?
    public var isBundleInvalid: Int?
    public var updatedTimeInvalid: Int?
    public var customLabelLengthTooLong: Int?
    public var productTypeLengthTooLong: Int?
    public var tooManyAdditionalImageLinks: Int?
    public var multipackInvalid: Int?
    public var indexedProductCountLargeDelta: Int?
    public var itemAdditionalImageDownloadFailure: Int?
    public var optionalProductCategoryMissing: Int?
    public var optionalProductCategoryInvalid: Int?
    public var optionalConditionMissing: Int?
    public var optionalConditionInvalid: Int?
    public var iosDeepLinkInvalid: Int?
    public var androidDeepLinkInvalid: Int?
    public var availabilityNormalized: Int?
    public var conditionNormalized: Int?
    public var genderNormalized: Int?
    public var sizeTypeNormalized: Int?
    public var ageGroupNormalized: Int?
    public var utmSourceAutoCorrected: Int?
    public var countryDoesNotMapToCurrency: Int?
    public var minAdPriceInvalid: Int?

    public init(titleLengthTooLong: Int? = nil, descriptionLengthTooLong: Int? = nil, genderInvalid: Int? = nil, ageGroupInvalid: Int? = nil, sizeTypeInvalid: Int? = nil, linkFormatWarning: Int? = nil, duplicateProducts: Int? = nil, duplicateLinks: Int? = nil, salesPriceInvalid: Int? = nil, productCategoryDepthWarning: Int? = nil, adwordsSameAsLink: Int? = nil, duplicateHeaders: Int? = nil, fetchSameSignature: Int? = nil, adwordsFormatWarning: Int? = nil, additionalImageLinkWarning: Int? = nil, imageLinkWarning: Int? = nil, shippingInvalid: Int? = nil, taxInvalid: Int? = nil, shippingWeightInvalid: Int? = nil, expirationDateInvalid: Int? = nil, availabilityDateInvalid: Int? = nil, saleDateInvalid: Int? = nil, weightUnitInvalid: Int? = nil, isBundleInvalid: Int? = nil, updatedTimeInvalid: Int? = nil, customLabelLengthTooLong: Int? = nil, productTypeLengthTooLong: Int? = nil, tooManyAdditionalImageLinks: Int? = nil, multipackInvalid: Int? = nil, indexedProductCountLargeDelta: Int? = nil, itemAdditionalImageDownloadFailure: Int? = nil, optionalProductCategoryMissing: Int? = nil, optionalProductCategoryInvalid: Int? = nil, optionalConditionMissing: Int? = nil, optionalConditionInvalid: Int? = nil, iosDeepLinkInvalid: Int? = nil, androidDeepLinkInvalid: Int? = nil, availabilityNormalized: Int? = nil, conditionNormalized: Int? = nil, genderNormalized: Int? = nil, sizeTypeNormalized: Int? = nil, ageGroupNormalized: Int? = nil, utmSourceAutoCorrected: Int? = nil, countryDoesNotMapToCurrency: Int? = nil, minAdPriceInvalid: Int? = nil) {
        self.titleLengthTooLong = titleLengthTooLong
        self.descriptionLengthTooLong = descriptionLengthTooLong
        self.genderInvalid = genderInvalid
        self.ageGroupInvalid = ageGroupInvalid
        self.sizeTypeInvalid = sizeTypeInvalid
        self.linkFormatWarning = linkFormatWarning
        self.duplicateProducts = duplicateProducts
        self.duplicateLinks = duplicateLinks
        self.salesPriceInvalid = salesPriceInvalid
        self.productCategoryDepthWarning = productCategoryDepthWarning
        self.adwordsSameAsLink = adwordsSameAsLink
        self.duplicateHeaders = duplicateHeaders
        self.fetchSameSignature = fetchSameSignature
        self.adwordsFormatWarning = adwordsFormatWarning
        self.additionalImageLinkWarning = additionalImageLinkWarning
        self.imageLinkWarning = imageLinkWarning
        self.shippingInvalid = shippingInvalid
        self.taxInvalid = taxInvalid
        self.shippingWeightInvalid = shippingWeightInvalid
        self.expirationDateInvalid = expirationDateInvalid
        self.availabilityDateInvalid = availabilityDateInvalid
        self.saleDateInvalid = saleDateInvalid
        self.weightUnitInvalid = weightUnitInvalid
        self.isBundleInvalid = isBundleInvalid
        self.updatedTimeInvalid = updatedTimeInvalid
        self.customLabelLengthTooLong = customLabelLengthTooLong
        self.productTypeLengthTooLong = productTypeLengthTooLong
        self.tooManyAdditionalImageLinks = tooManyAdditionalImageLinks
        self.multipackInvalid = multipackInvalid
        self.indexedProductCountLargeDelta = indexedProductCountLargeDelta
        self.itemAdditionalImageDownloadFailure = itemAdditionalImageDownloadFailure
        self.optionalProductCategoryMissing = optionalProductCategoryMissing
        self.optionalProductCategoryInvalid = optionalProductCategoryInvalid
        self.optionalConditionMissing = optionalConditionMissing
        self.optionalConditionInvalid = optionalConditionInvalid
        self.iosDeepLinkInvalid = iosDeepLinkInvalid
        self.androidDeepLinkInvalid = androidDeepLinkInvalid
        self.availabilityNormalized = availabilityNormalized
        self.conditionNormalized = conditionNormalized
        self.genderNormalized = genderNormalized
        self.sizeTypeNormalized = sizeTypeNormalized
        self.ageGroupNormalized = ageGroupNormalized
        self.utmSourceAutoCorrected = utmSourceAutoCorrected
        self.countryDoesNotMapToCurrency = countryDoesNotMapToCurrency
        self.minAdPriceInvalid = minAdPriceInvalid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case titleLengthTooLong = "title_length_too_long"
        case descriptionLengthTooLong = "description_length_too_long"
        case genderInvalid = "gender_invalid"
        case ageGroupInvalid = "age_group_invalid"
        case sizeTypeInvalid = "size_type_invalid"
        case linkFormatWarning = "link_format_warning"
        case duplicateProducts = "duplicate_products"
        case duplicateLinks = "duplicate_links"
        case salesPriceInvalid = "sales_price_invalid"
        case productCategoryDepthWarning = "product_category_depth_warning"
        case adwordsSameAsLink = "adwords_same_as_link"
        case duplicateHeaders = "duplicate_headers"
        case fetchSameSignature = "fetch_same_signature"
        case adwordsFormatWarning = "adwords_format_warning"
        case additionalImageLinkWarning = "additional_image_link_warning"
        case imageLinkWarning = "image_link_warning"
        case shippingInvalid = "shipping_invalid"
        case taxInvalid = "tax_invalid"
        case shippingWeightInvalid = "shipping_weight_invalid"
        case expirationDateInvalid = "expiration_date_invalid"
        case availabilityDateInvalid = "availability_date_invalid"
        case saleDateInvalid = "sale_date_invalid"
        case weightUnitInvalid = "weight_unit_invalid"
        case isBundleInvalid = "is_bundle_invalid"
        case updatedTimeInvalid = "updated_time_invalid"
        case customLabelLengthTooLong = "custom_label_length_too_long"
        case productTypeLengthTooLong = "product_type_length_too_long"
        case tooManyAdditionalImageLinks = "too_many_additional_image_links"
        case multipackInvalid = "multipack_invalid"
        case indexedProductCountLargeDelta = "indexed_product_count_large_delta"
        case itemAdditionalImageDownloadFailure = "item_additional_image_download_failure"
        case optionalProductCategoryMissing = "optional_product_category_missing"
        case optionalProductCategoryInvalid = "optional_product_category_invalid"
        case optionalConditionMissing = "optional_condition_missing"
        case optionalConditionInvalid = "optional_condition_invalid"
        case iosDeepLinkInvalid = "ios_deep_link_invalid"
        case androidDeepLinkInvalid = "android_deep_link_invalid"
        case availabilityNormalized = "availability_normalized"
        case conditionNormalized = "condition_normalized"
        case genderNormalized = "gender_normalized"
        case sizeTypeNormalized = "size_type_normalized"
        case ageGroupNormalized = "age_group_normalized"
        case utmSourceAutoCorrected = "utm_source_auto_corrected"
        case countryDoesNotMapToCurrency = "country_does_not_map_to_currency"
        case minAdPriceInvalid = "min_ad_price_invalid"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(titleLengthTooLong, forKey: .titleLengthTooLong)
        try container.encodeIfPresent(descriptionLengthTooLong, forKey: .descriptionLengthTooLong)
        try container.encodeIfPresent(genderInvalid, forKey: .genderInvalid)
        try container.encodeIfPresent(ageGroupInvalid, forKey: .ageGroupInvalid)
        try container.encodeIfPresent(sizeTypeInvalid, forKey: .sizeTypeInvalid)
        try container.encodeIfPresent(linkFormatWarning, forKey: .linkFormatWarning)
        try container.encodeIfPresent(duplicateProducts, forKey: .duplicateProducts)
        try container.encodeIfPresent(duplicateLinks, forKey: .duplicateLinks)
        try container.encodeIfPresent(salesPriceInvalid, forKey: .salesPriceInvalid)
        try container.encodeIfPresent(productCategoryDepthWarning, forKey: .productCategoryDepthWarning)
        try container.encodeIfPresent(adwordsSameAsLink, forKey: .adwordsSameAsLink)
        try container.encodeIfPresent(duplicateHeaders, forKey: .duplicateHeaders)
        try container.encodeIfPresent(fetchSameSignature, forKey: .fetchSameSignature)
        try container.encodeIfPresent(adwordsFormatWarning, forKey: .adwordsFormatWarning)
        try container.encodeIfPresent(additionalImageLinkWarning, forKey: .additionalImageLinkWarning)
        try container.encodeIfPresent(imageLinkWarning, forKey: .imageLinkWarning)
        try container.encodeIfPresent(shippingInvalid, forKey: .shippingInvalid)
        try container.encodeIfPresent(taxInvalid, forKey: .taxInvalid)
        try container.encodeIfPresent(shippingWeightInvalid, forKey: .shippingWeightInvalid)
        try container.encodeIfPresent(expirationDateInvalid, forKey: .expirationDateInvalid)
        try container.encodeIfPresent(availabilityDateInvalid, forKey: .availabilityDateInvalid)
        try container.encodeIfPresent(saleDateInvalid, forKey: .saleDateInvalid)
        try container.encodeIfPresent(weightUnitInvalid, forKey: .weightUnitInvalid)
        try container.encodeIfPresent(isBundleInvalid, forKey: .isBundleInvalid)
        try container.encodeIfPresent(updatedTimeInvalid, forKey: .updatedTimeInvalid)
        try container.encodeIfPresent(customLabelLengthTooLong, forKey: .customLabelLengthTooLong)
        try container.encodeIfPresent(productTypeLengthTooLong, forKey: .productTypeLengthTooLong)
        try container.encodeIfPresent(tooManyAdditionalImageLinks, forKey: .tooManyAdditionalImageLinks)
        try container.encodeIfPresent(multipackInvalid, forKey: .multipackInvalid)
        try container.encodeIfPresent(indexedProductCountLargeDelta, forKey: .indexedProductCountLargeDelta)
        try container.encodeIfPresent(itemAdditionalImageDownloadFailure, forKey: .itemAdditionalImageDownloadFailure)
        try container.encodeIfPresent(optionalProductCategoryMissing, forKey: .optionalProductCategoryMissing)
        try container.encodeIfPresent(optionalProductCategoryInvalid, forKey: .optionalProductCategoryInvalid)
        try container.encodeIfPresent(optionalConditionMissing, forKey: .optionalConditionMissing)
        try container.encodeIfPresent(optionalConditionInvalid, forKey: .optionalConditionInvalid)
        try container.encodeIfPresent(iosDeepLinkInvalid, forKey: .iosDeepLinkInvalid)
        try container.encodeIfPresent(androidDeepLinkInvalid, forKey: .androidDeepLinkInvalid)
        try container.encodeIfPresent(availabilityNormalized, forKey: .availabilityNormalized)
        try container.encodeIfPresent(conditionNormalized, forKey: .conditionNormalized)
        try container.encodeIfPresent(genderNormalized, forKey: .genderNormalized)
        try container.encodeIfPresent(sizeTypeNormalized, forKey: .sizeTypeNormalized)
        try container.encodeIfPresent(ageGroupNormalized, forKey: .ageGroupNormalized)
        try container.encodeIfPresent(utmSourceAutoCorrected, forKey: .utmSourceAutoCorrected)
        try container.encodeIfPresent(countryDoesNotMapToCurrency, forKey: .countryDoesNotMapToCurrency)
        try container.encodeIfPresent(minAdPriceInvalid, forKey: .minAdPriceInvalid)
    }
}

