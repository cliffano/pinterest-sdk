//
// AdAccountsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AdAccountsAPI {

    /**
     * enum for parameter columns
     */
    public enum Columns_adAccountAnalytics: String, CaseIterable {
        case adAccountId = "AD_ACCOUNT_ID"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case adGroupId = "AD_GROUP_ID"
        case adId = "AD_ID"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignId = "CAMPAIGN_ID"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignName = "CAMPAIGN_NAME"
        case checkoutRoas = "CHECKOUT_ROAS"
        case clickthrough1 = "CLICKTHROUGH_1"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case clickthrough2 = "CLICKTHROUGH_2"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case ctr = "CTR"
        case ctr2 = "CTR_2"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ectr = "ECTR"
        case eengagementRate = "EENGAGEMENT_RATE"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case engagementRate = "ENGAGEMENT_RATE"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case impression2 = "IMPRESSION_2"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case paidImpression = "PAID_IMPRESSION"
        case pinId = "PIN_ID"
        case repin1 = "REPIN_1"
        case repin2 = "REPIN_2"
        case repinRate = "REPIN_RATE"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalCustom = "TOTAL_CUSTOM"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalLead = "TOTAL_LEAD"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case totalSignup = "TOTAL_SIGNUP"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoLength = "VIDEO_LENGTH"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adAccountAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adAccountAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adAccountAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adAccountAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get ad account analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountAnalytics(adAccountId: String, startDate: Date, endDate: Date, columns: [Columns_adAccountAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adAccountAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adAccountAnalytics? = nil, viewWindowDays: ViewWindowDays_adAccountAnalytics? = nil, conversionReportTime: ConversionReportTime_adAccountAnalytics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [[String: AnyCodable]]?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad account analytics
     - GET /ad_accounts/{ad_account_id}/analytics
     - Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - returns: RequestBuilder<[[String: AnyCodable]]> 
     */
    open class func adAccountAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, columns: [Columns_adAccountAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adAccountAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adAccountAnalytics? = nil, viewWindowDays: ViewWindowDays_adAccountAnalytics? = nil, conversionReportTime: ConversionReportTime_adAccountAnalytics? = nil) -> RequestBuilder<[[String: AnyCodable]]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": startDate.encodeToJSON(),
            "end_date": endDate.encodeToJSON(),
            "columns": columns.encodeToJSON(),
            "granularity": granularity.encodeToJSON(),
            "click_window_days": clickWindowDays?.encodeToJSON(),
            "engagement_window_days": engagementWindowDays?.encodeToJSON(),
            "view_window_days": viewWindowDays?.encodeToJSON(),
            "conversion_report_time": conversionReportTime?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[[String: AnyCodable]]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List ad accounts
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter includeSharedAccounts: (query) Include shared ad accounts (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountsList(bookmark: String? = nil, pageSize: Int? = nil, includeSharedAccounts: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountsListWithRequestBuilder(bookmark: bookmark, pageSize: pageSize, includeSharedAccounts: includeSharedAccounts).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List ad accounts
     - GET /ad_accounts
     - Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter includeSharedAccounts: (query) Include shared ad accounts (optional, default to true)
     - returns: RequestBuilder<Paginated> 
     */
    open class func adAccountsListWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil, includeSharedAccounts: Bool? = nil) -> RequestBuilder<Paginated> {
        let localVariablePath = "/ad_accounts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": bookmark?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "include_shared_accounts": includeSharedAccounts?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_adGroupsAnalytics: String, CaseIterable {
        case adAccountId = "AD_ACCOUNT_ID"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case adGroupId = "AD_GROUP_ID"
        case adId = "AD_ID"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignId = "CAMPAIGN_ID"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignName = "CAMPAIGN_NAME"
        case checkoutRoas = "CHECKOUT_ROAS"
        case clickthrough1 = "CLICKTHROUGH_1"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case clickthrough2 = "CLICKTHROUGH_2"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case ctr = "CTR"
        case ctr2 = "CTR_2"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ectr = "ECTR"
        case eengagementRate = "EENGAGEMENT_RATE"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case engagementRate = "ENGAGEMENT_RATE"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case impression2 = "IMPRESSION_2"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case paidImpression = "PAID_IMPRESSION"
        case pinId = "PIN_ID"
        case repin1 = "REPIN_1"
        case repin2 = "REPIN_2"
        case repinRate = "REPIN_RATE"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalCustom = "TOTAL_CUSTOM"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalLead = "TOTAL_LEAD"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case totalSignup = "TOTAL_SIGNUP"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoLength = "VIDEO_LENGTH"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adGroupsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adGroupsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adGroupsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adGroupsAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get ad group analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupsAnalytics(adAccountId: String, startDate: Date, endDate: Date, adGroupIds: [String], columns: [Columns_adGroupsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adGroupsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adGroupsAnalytics? = nil, viewWindowDays: ViewWindowDays_adGroupsAnalytics? = nil, conversionReportTime: ConversionReportTime_adGroupsAnalytics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [[String: AnyCodable]]?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupsAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, adGroupIds: adGroupIds, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad group analytics
     - GET /ad_accounts/{ad_account_id}/ad_groups/analytics
     - Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - returns: RequestBuilder<[[String: AnyCodable]]> 
     */
    open class func adGroupsAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, adGroupIds: [String], columns: [Columns_adGroupsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adGroupsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adGroupsAnalytics? = nil, viewWindowDays: ViewWindowDays_adGroupsAnalytics? = nil, conversionReportTime: ConversionReportTime_adGroupsAnalytics? = nil) -> RequestBuilder<[[String: AnyCodable]]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ad_groups/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": startDate.encodeToJSON(),
            "end_date": endDate.encodeToJSON(),
            "ad_group_ids": adGroupIds.encodeToJSON(),
            "columns": columns.encodeToJSON(),
            "granularity": granularity.encodeToJSON(),
            "click_window_days": clickWindowDays?.encodeToJSON(),
            "engagement_window_days": engagementWindowDays?.encodeToJSON(),
            "view_window_days": viewWindowDays?.encodeToJSON(),
            "conversion_report_time": conversionReportTime?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[[String: AnyCodable]]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter entityStatuses
     */
    public enum EntityStatuses_adGroupsList: String, CaseIterable {
        case active = "ACTIVE"
        case paused = "PAUSED"
        case archived = "ARCHIVED"
    }

    /**
     * enum for parameter order
     */
    public enum Order_adGroupsList: String, CaseIterable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     List ad groups
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter translateInterestsToNames: (query) Return interests as text names (if value is true) rather than topic IDs. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adGroupsList(adAccountId: String, campaignIds: [String]? = nil, adGroupIds: [String]? = nil, entityStatuses: [EntityStatuses_adGroupsList]? = nil, pageSize: Int? = nil, order: Order_adGroupsList? = nil, bookmark: String? = nil, translateInterestsToNames: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return adGroupsListWithRequestBuilder(adAccountId: adAccountId, campaignIds: campaignIds, adGroupIds: adGroupIds, entityStatuses: entityStatuses, pageSize: pageSize, order: order, bookmark: bookmark, translateInterestsToNames: translateInterestsToNames).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List ad groups
     - GET /ad_accounts/{ad_account_id}/ad_groups
     - Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter translateInterestsToNames: (query) Return interests as text names (if value is true) rather than topic IDs. (optional, default to false)
     - returns: RequestBuilder<Paginated> 
     */
    open class func adGroupsListWithRequestBuilder(adAccountId: String, campaignIds: [String]? = nil, adGroupIds: [String]? = nil, entityStatuses: [EntityStatuses_adGroupsList]? = nil, pageSize: Int? = nil, order: Order_adGroupsList? = nil, bookmark: String? = nil, translateInterestsToNames: Bool? = nil) -> RequestBuilder<Paginated> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ad_groups"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "campaign_ids": campaignIds?.encodeToJSON(),
            "ad_group_ids": adGroupIds?.encodeToJSON(),
            "entity_statuses": entityStatuses?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "bookmark": bookmark?.encodeToJSON(),
            "translate_interests_to_names": translateInterestsToNames?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_adsAnalytics: String, CaseIterable {
        case adAccountId = "AD_ACCOUNT_ID"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case adGroupId = "AD_GROUP_ID"
        case adId = "AD_ID"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignId = "CAMPAIGN_ID"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignName = "CAMPAIGN_NAME"
        case checkoutRoas = "CHECKOUT_ROAS"
        case clickthrough1 = "CLICKTHROUGH_1"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case clickthrough2 = "CLICKTHROUGH_2"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case ctr = "CTR"
        case ctr2 = "CTR_2"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ectr = "ECTR"
        case eengagementRate = "EENGAGEMENT_RATE"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case engagementRate = "ENGAGEMENT_RATE"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case impression2 = "IMPRESSION_2"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case paidImpression = "PAID_IMPRESSION"
        case pinId = "PIN_ID"
        case repin1 = "REPIN_1"
        case repin2 = "REPIN_2"
        case repinRate = "REPIN_RATE"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalCustom = "TOTAL_CUSTOM"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalLead = "TOTAL_LEAD"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case totalSignup = "TOTAL_SIGNUP"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoLength = "VIDEO_LENGTH"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adsAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get ad analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter adIds: (query) List of Ad Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsAnalytics(adAccountId: String, startDate: Date, endDate: Date, adIds: [String], columns: [Columns_adsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adsAnalytics? = nil, viewWindowDays: ViewWindowDays_adsAnalytics? = nil, conversionReportTime: ConversionReportTime_adsAnalytics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [[String: AnyCodable]]?, _ error: Error?) -> Void)) -> RequestTask {
        return adsAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, adIds: adIds, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad analytics
     - GET /ad_accounts/{ad_account_id}/ads/analytics
     - Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter adIds: (query) List of Ad Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - returns: RequestBuilder<[[String: AnyCodable]]> 
     */
    open class func adsAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, adIds: [String], columns: [Columns_adsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adsAnalytics? = nil, viewWindowDays: ViewWindowDays_adsAnalytics? = nil, conversionReportTime: ConversionReportTime_adsAnalytics? = nil) -> RequestBuilder<[[String: AnyCodable]]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": startDate.encodeToJSON(),
            "end_date": endDate.encodeToJSON(),
            "ad_ids": adIds.encodeToJSON(),
            "columns": columns.encodeToJSON(),
            "granularity": granularity.encodeToJSON(),
            "click_window_days": clickWindowDays?.encodeToJSON(),
            "engagement_window_days": engagementWindowDays?.encodeToJSON(),
            "view_window_days": viewWindowDays?.encodeToJSON(),
            "conversion_report_time": conversionReportTime?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[[String: AnyCodable]]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter entityStatuses
     */
    public enum EntityStatuses_adsList: String, CaseIterable {
        case active = "ACTIVE"
        case paused = "PAUSED"
        case archived = "ARCHIVED"
    }

    /**
     * enum for parameter order
     */
    public enum Order_adsList: String, CaseIterable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     List ads
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. (optional)
     - parameter adIds: (query) List of Ad Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsList(adAccountId: String, campaignIds: [String]? = nil, adGroupIds: [String]? = nil, adIds: [String]? = nil, entityStatuses: [EntityStatuses_adsList]? = nil, pageSize: Int? = nil, order: Order_adsList? = nil, bookmark: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return adsListWithRequestBuilder(adAccountId: adAccountId, campaignIds: campaignIds, adGroupIds: adGroupIds, adIds: adIds, entityStatuses: entityStatuses, pageSize: pageSize, order: order, bookmark: bookmark).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List ads
     - GET /ad_accounts/{ad_account_id}/ads
     - Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. (optional)
     - parameter adIds: (query) List of Ad Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - returns: RequestBuilder<Paginated> 
     */
    open class func adsListWithRequestBuilder(adAccountId: String, campaignIds: [String]? = nil, adGroupIds: [String]? = nil, adIds: [String]? = nil, entityStatuses: [EntityStatuses_adsList]? = nil, pageSize: Int? = nil, order: Order_adsList? = nil, bookmark: String? = nil) -> RequestBuilder<Paginated> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "campaign_ids": campaignIds?.encodeToJSON(),
            "ad_group_ids": adGroupIds?.encodeToJSON(),
            "ad_ids": adIds?.encodeToJSON(),
            "entity_statuses": entityStatuses?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "bookmark": bookmark?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create async request for an account analytics report
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adsAnalyticsCreateAsyncRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsCreateReport(adAccountId: String, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdsAnalyticsCreateAsyncResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsCreateReportWithRequestBuilder(adAccountId: adAccountId, adsAnalyticsCreateAsyncRequest: adsAnalyticsCreateAsyncRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create async request for an account analytics report
     - POST /ad_accounts/{ad_account_id}/reports
     - This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adsAnalyticsCreateAsyncRequest: (body)  
     - returns: RequestBuilder<AdsAnalyticsCreateAsyncResponse> 
     */
    open class func analyticsCreateReportWithRequestBuilder(adAccountId: String, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest) -> RequestBuilder<AdsAnalyticsCreateAsyncResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: adsAnalyticsCreateAsyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdsAnalyticsCreateAsyncResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the account analytics report created by the async call
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter token: (query) Token returned from the post request creation call 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsGetReport(adAccountId: String, token: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdsAnalyticsGetAsyncResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsGetReportWithRequestBuilder(adAccountId: adAccountId, token: token).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the account analytics report created by the async call
     - GET /ad_accounts/{ad_account_id}/reports
     - This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it's valid for an hour. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter token: (query) Token returned from the post request creation call 
     - returns: RequestBuilder<AdsAnalyticsGetAsyncResponse> 
     */
    open class func analyticsGetReportWithRequestBuilder(adAccountId: String, token: String) -> RequestBuilder<AdsAnalyticsGetAsyncResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdsAnalyticsGetAsyncResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_campaignsAnalytics: String, CaseIterable {
        case adAccountId = "AD_ACCOUNT_ID"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case adGroupId = "AD_GROUP_ID"
        case adId = "AD_ID"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignId = "CAMPAIGN_ID"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignName = "CAMPAIGN_NAME"
        case checkoutRoas = "CHECKOUT_ROAS"
        case clickthrough1 = "CLICKTHROUGH_1"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case clickthrough2 = "CLICKTHROUGH_2"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case ctr = "CTR"
        case ctr2 = "CTR_2"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ectr = "ECTR"
        case eengagementRate = "EENGAGEMENT_RATE"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case engagementRate = "ENGAGEMENT_RATE"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case impression2 = "IMPRESSION_2"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case paidImpression = "PAID_IMPRESSION"
        case pinId = "PIN_ID"
        case repin1 = "REPIN_1"
        case repin2 = "REPIN_2"
        case repinRate = "REPIN_RATE"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalCustom = "TOTAL_CUSTOM"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalLead = "TOTAL_LEAD"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case totalSignup = "TOTAL_SIGNUP"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoLength = "VIDEO_LENGTH"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_campaignsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_campaignsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_campaignsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_campaignsAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get campaign analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func campaignsAnalytics(adAccountId: String, startDate: Date, endDate: Date, campaignIds: [String], columns: [Columns_campaignsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_campaignsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_campaignsAnalytics? = nil, viewWindowDays: ViewWindowDays_campaignsAnalytics? = nil, conversionReportTime: ConversionReportTime_campaignsAnalytics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [[String: AnyCodable]]?, _ error: Error?) -> Void)) -> RequestTask {
        return campaignsAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, campaignIds: campaignIds, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get campaign analytics
     - GET /ad_accounts/{ad_account_id}/campaigns/analytics
     - Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - returns: RequestBuilder<[[String: AnyCodable]]> 
     */
    open class func campaignsAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, campaignIds: [String], columns: [Columns_campaignsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_campaignsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_campaignsAnalytics? = nil, viewWindowDays: ViewWindowDays_campaignsAnalytics? = nil, conversionReportTime: ConversionReportTime_campaignsAnalytics? = nil) -> RequestBuilder<[[String: AnyCodable]]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/campaigns/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": startDate.encodeToJSON(),
            "end_date": endDate.encodeToJSON(),
            "campaign_ids": campaignIds.encodeToJSON(),
            "columns": columns.encodeToJSON(),
            "granularity": granularity.encodeToJSON(),
            "click_window_days": clickWindowDays?.encodeToJSON(),
            "engagement_window_days": engagementWindowDays?.encodeToJSON(),
            "view_window_days": viewWindowDays?.encodeToJSON(),
            "conversion_report_time": conversionReportTime?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[[String: AnyCodable]]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter entityStatuses
     */
    public enum EntityStatuses_campaignsList: String, CaseIterable {
        case active = "ACTIVE"
        case paused = "PAUSED"
        case archived = "ARCHIVED"
    }

    /**
     * enum for parameter order
     */
    public enum Order_campaignsList: String, CaseIterable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     List campaigns
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func campaignsList(adAccountId: String, campaignIds: [String]? = nil, entityStatuses: [EntityStatuses_campaignsList]? = nil, pageSize: Int? = nil, order: Order_campaignsList? = nil, bookmark: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return campaignsListWithRequestBuilder(adAccountId: adAccountId, campaignIds: campaignIds, entityStatuses: entityStatuses, pageSize: pageSize, order: order, bookmark: bookmark).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List campaigns
     - GET /ad_accounts/{ad_account_id}/campaigns
     - Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - returns: RequestBuilder<Paginated> 
     */
    open class func campaignsListWithRequestBuilder(adAccountId: String, campaignIds: [String]? = nil, entityStatuses: [EntityStatuses_campaignsList]? = nil, pageSize: Int? = nil, order: Order_campaignsList? = nil, bookmark: String? = nil) -> RequestBuilder<Paginated> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/campaigns"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "campaign_ids": campaignIds?.encodeToJSON(),
            "entity_statuses": entityStatuses?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "bookmark": bookmark?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_productGroupsAnalytics: String, CaseIterable {
        case adAccountId = "AD_ACCOUNT_ID"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case adGroupId = "AD_GROUP_ID"
        case adId = "AD_ID"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignId = "CAMPAIGN_ID"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignName = "CAMPAIGN_NAME"
        case checkoutRoas = "CHECKOUT_ROAS"
        case clickthrough1 = "CLICKTHROUGH_1"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case clickthrough2 = "CLICKTHROUGH_2"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case ctr = "CTR"
        case ctr2 = "CTR_2"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ectr = "ECTR"
        case eengagementRate = "EENGAGEMENT_RATE"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case engagementRate = "ENGAGEMENT_RATE"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case impression2 = "IMPRESSION_2"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case paidImpression = "PAID_IMPRESSION"
        case pinId = "PIN_ID"
        case repin1 = "REPIN_1"
        case repin2 = "REPIN_2"
        case repinRate = "REPIN_RATE"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalCustom = "TOTAL_CUSTOM"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalLead = "TOTAL_LEAD"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case totalSignup = "TOTAL_SIGNUP"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoLength = "VIDEO_LENGTH"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_productGroupsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_productGroupsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_productGroupsAnalytics: Int, CaseIterable {
        case _1 = 1
        case _7 = 7
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_productGroupsAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get product group analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter productGroupIds: (query) List of Product group Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productGroupsAnalytics(adAccountId: String, startDate: Date, endDate: Date, productGroupIds: [String], columns: [Columns_productGroupsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_productGroupsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_productGroupsAnalytics? = nil, viewWindowDays: ViewWindowDays_productGroupsAnalytics? = nil, conversionReportTime: ConversionReportTime_productGroupsAnalytics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [[String: AnyCodable]]?, _ error: Error?) -> Void)) -> RequestTask {
        return productGroupsAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, productGroupIds: productGroupIds, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get product group analytics
     - GET /ad_accounts/{ad_account_id}/product_groups/analytics
     - Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD 
     - parameter productGroupIds: (query) List of Product group Ids to use to filter the results. 
     - parameter columns: (query) Columns to retrieve. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) Granularity 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - returns: RequestBuilder<[[String: AnyCodable]]> 
     */
    open class func productGroupsAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, productGroupIds: [String], columns: [Columns_productGroupsAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_productGroupsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_productGroupsAnalytics? = nil, viewWindowDays: ViewWindowDays_productGroupsAnalytics? = nil, conversionReportTime: ConversionReportTime_productGroupsAnalytics? = nil) -> RequestBuilder<[[String: AnyCodable]]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/product_groups/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": startDate.encodeToJSON(),
            "end_date": endDate.encodeToJSON(),
            "product_group_ids": productGroupIds.encodeToJSON(),
            "columns": columns.encodeToJSON(),
            "granularity": granularity.encodeToJSON(),
            "click_window_days": clickWindowDays?.encodeToJSON(),
            "engagement_window_days": engagementWindowDays?.encodeToJSON(),
            "view_window_days": viewWindowDays?.encodeToJSON(),
            "conversion_report_time": conversionReportTime?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[[String: AnyCodable]]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
