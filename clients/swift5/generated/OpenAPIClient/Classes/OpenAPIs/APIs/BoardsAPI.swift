//
// BoardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BoardsAPI {

    /**
     Create board section
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter boardSection: (body) Create a board section. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardSectionsCreate(boardId: String, boardSection: BoardSection, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BoardSection?, _ error: Error?) -> Void)) -> RequestTask {
        return boardSectionsCreateWithRequestBuilder(boardId: boardId, boardSection: boardSection).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create board section
     - POST /boards/{board_id}/sections
     - Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter boardSection: (body) Create a board section. 
     - returns: RequestBuilder<BoardSection> 
     */
    open class func boardSectionsCreateWithRequestBuilder(boardId: String, boardSection: BoardSection) -> RequestBuilder<BoardSection> {
        var localVariablePath = "/boards/{board_id}/sections"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: boardSection)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BoardSection>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete board section
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter sectionId: (path) Unique identifier of a board section. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardSectionsDelete(boardId: String, sectionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return boardSectionsDeleteWithRequestBuilder(boardId: boardId, sectionId: sectionId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete board section
     - DELETE /boards/{board_id}/sections/{section_id}
     - Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter sectionId: (path) Unique identifier of a board section. 
     - returns: RequestBuilder<Void> 
     */
    open class func boardSectionsDeleteWithRequestBuilder(boardId: String, sectionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/boards/{board_id}/sections/{section_id}"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let sectionIdPreEscape = "\(APIHelper.mapValueToPathItem(sectionId))"
        let sectionIdPostEscape = sectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{section_id}", with: sectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List board sections
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardSectionsList(boardId: String, bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return boardSectionsListWithRequestBuilder(boardId: boardId, bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List board sections
     - GET /boards/{board_id}/sections
     - Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<Paginated> 
     */
    open class func boardSectionsListWithRequestBuilder(boardId: String, bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<Paginated> {
        var localVariablePath = "/boards/{board_id}/sections"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": bookmark?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Pins on board section
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter sectionId: (path) Unique identifier of a board section. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardSectionsListPins(boardId: String, sectionId: String, bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return boardSectionsListPinsWithRequestBuilder(boardId: boardId, sectionId: sectionId, bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Pins on board section
     - GET /boards/{board_id}/sections/{section_id}/pins
     - Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter sectionId: (path) Unique identifier of a board section. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<Paginated> 
     */
    open class func boardSectionsListPinsWithRequestBuilder(boardId: String, sectionId: String, bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<Paginated> {
        var localVariablePath = "/boards/{board_id}/sections/{section_id}/pins"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let sectionIdPreEscape = "\(APIHelper.mapValueToPathItem(sectionId))"
        let sectionIdPostEscape = sectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{section_id}", with: sectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": bookmark?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update board section
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter sectionId: (path) Unique identifier of a board section. 
     - parameter boardSection: (body) Update a board section. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardSectionsUpdate(boardId: String, sectionId: String, boardSection: BoardSection, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BoardSection?, _ error: Error?) -> Void)) -> RequestTask {
        return boardSectionsUpdateWithRequestBuilder(boardId: boardId, sectionId: sectionId, boardSection: boardSection).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update board section
     - PATCH /boards/{board_id}/sections/{section_id}
     - Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter sectionId: (path) Unique identifier of a board section. 
     - parameter boardSection: (body) Update a board section. 
     - returns: RequestBuilder<BoardSection> 
     */
    open class func boardSectionsUpdateWithRequestBuilder(boardId: String, sectionId: String, boardSection: BoardSection) -> RequestBuilder<BoardSection> {
        var localVariablePath = "/boards/{board_id}/sections/{section_id}"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let sectionIdPreEscape = "\(APIHelper.mapValueToPathItem(sectionId))"
        let sectionIdPostEscape = sectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{section_id}", with: sectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: boardSection)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BoardSection>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create board
     
     - parameter board: (body) Create a board using a single board json object. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsCreate(board: Board, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Board?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsCreateWithRequestBuilder(board: board).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create board
     - POST /boards
     - Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter board: (body) Create a board using a single board json object. 
     - returns: RequestBuilder<Board> 
     */
    open class func boardsCreateWithRequestBuilder(board: Board) -> RequestBuilder<Board> {
        let localVariablePath = "/boards"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: board)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Board>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete board
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsDelete(boardId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsDeleteWithRequestBuilder(boardId: boardId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete board
     - DELETE /boards/{board_id}
     - Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - returns: RequestBuilder<Void> 
     */
    open class func boardsDeleteWithRequestBuilder(boardId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/boards/{board_id}"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get board
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsGet(boardId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Board?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsGetWithRequestBuilder(boardId: boardId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get board
     - GET /boards/{board_id}
     - Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - returns: RequestBuilder<Board> 
     */
    open class func boardsGetWithRequestBuilder(boardId: String) -> RequestBuilder<Board> {
        var localVariablePath = "/boards/{board_id}"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Board>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter privacy
     */
    public enum Privacy_boardsList: String, CaseIterable {
        case _public = "PUBLIC"
        case protected = "PROTECTED"
        case secret = "SECRET"
    }

    /**
     List boards
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter privacy: (query) Privacy setting for a board. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsList(bookmark: String? = nil, pageSize: Int? = nil, privacy: Privacy_boardsList? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsListWithRequestBuilder(bookmark: bookmark, pageSize: pageSize, privacy: privacy).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List boards
     - GET /boards
     - Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter privacy: (query) Privacy setting for a board. (optional)
     - returns: RequestBuilder<Paginated> 
     */
    open class func boardsListWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil, privacy: Privacy_boardsList? = nil) -> RequestBuilder<Paginated> {
        let localVariablePath = "/boards"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": bookmark?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Pins on board
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsListPins(boardId: String, bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Paginated?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsListPinsWithRequestBuilder(boardId: boardId, bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Pins on board
     - GET /boards/{board_id}/pins
     - Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<Paginated> 
     */
    open class func boardsListPinsWithRequestBuilder(boardId: String, bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<Paginated> {
        var localVariablePath = "/boards/{board_id}/pins"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": bookmark?.encodeToJSON(),
            "page_size": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Paginated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update board
     
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter boardUpdate: (body) Update a board. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsUpdate(boardId: String, boardUpdate: BoardUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Board?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsUpdateWithRequestBuilder(boardId: boardId, boardUpdate: boardUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update board
     - PATCH /boards/{board_id}
     - Update a board owned by the \"operating user_account\".
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter boardId: (path) Unique identifier of a board. 
     - parameter boardUpdate: (body) Update a board. 
     - returns: RequestBuilder<Board> 
     */
    open class func boardsUpdateWithRequestBuilder(boardId: String, boardUpdate: BoardUpdate) -> RequestBuilder<Board> {
        var localVariablePath = "/boards/{board_id}"
        let boardIdPreEscape = "\(APIHelper.mapValueToPathItem(boardId))"
        let boardIdPostEscape = boardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{board_id}", with: boardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: boardUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Board>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
