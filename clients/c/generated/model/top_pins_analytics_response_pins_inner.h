/*
 * top_pins_analytics_response_pins_inner.h
 *
 * Array with metrics, status, and pin id for the requested metric
 */

#ifndef _top_pins_analytics_response_pins_inner_H_
#define _top_pins_analytics_response_pins_inner_H_

#include <string.h>
#include "../external/cJSON.h"
#include "../include/list.h"
#include "../include/keyValuePair.h"
#include "../include/binary.h"

typedef struct top_pins_analytics_response_pins_inner_t top_pins_analytics_response_pins_inner_t;

#include "data_status.h"

// Enum  for top_pins_analytics_response_pins_inner

typedef enum  { pinterest_rest_api_top_pins_analytics_response_pins_inner__NULL = 0, pinterest_rest_api_top_pins_analytics_response_pins_inner__PROCESSING, pinterest_rest_api_top_pins_analytics_response_pins_inner__READY, pinterest_rest_api_top_pins_analytics_response_pins_inner__ESTIMATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_BUSINESS_CREATED, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_DATA_RETENTION_PERIOD, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_PIN_DATA_RETENTION_PERIOD, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_CORE_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_PIN_FORMAT_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_AUDIENCE_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_AUDIENCE_MONTHLY_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_VIDEO_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_CONVERSION_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__PURCHASERS_METRIC_SMALLER_THAN_THRESHOLD, pinterest_rest_api_top_pins_analytics_response_pins_inner__IN_BAD_TAG_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_PUBLISHED_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_ASSIST_METRIC_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_PIN_CREATED, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_ACCOUNT_CLAIMED, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_DEMOGRAPHIC_FILTERS_START_DATE, pinterest_rest_api_top_pins_analytics_response_pins_inner__AUDIENCE_SEGMENT_SMALLER_THAN_THRESHOLD, pinterest_rest_api_top_pins_analytics_response_pins_inner__AUDIENCE_TOTAL_SMALLER_THAN_THRESHOLD, pinterest_rest_api_top_pins_analytics_response_pins_inner__BEFORE_PRODUCT_GROUP_FILTER_START_DATE } pinterest_rest_api_top_pins_analytics_response_pins_inner__e;

char* top_pins_analytics_response_pins_inner_inner_ToString(pinterest_rest_api_top_pins_analytics_response_pins_inner__e inner);

pinterest_rest_api_top_pins_analytics_response_pins_inner__e top_pins_analytics_response_pins_inner_inner_FromString(char* inner);



typedef struct top_pins_analytics_response_pins_inner_t {
    list_t* metrics; //map
    list_t* data_status; //map
    char *pin_id; // string

} top_pins_analytics_response_pins_inner_t;

top_pins_analytics_response_pins_inner_t *top_pins_analytics_response_pins_inner_create(
    list_t* metrics,
    list_t* data_status,
    char *pin_id
);

void top_pins_analytics_response_pins_inner_free(top_pins_analytics_response_pins_inner_t *top_pins_analytics_response_pins_inner);

top_pins_analytics_response_pins_inner_t *top_pins_analytics_response_pins_inner_parseFromJSON(cJSON *top_pins_analytics_response_pins_innerJSON);

cJSON *top_pins_analytics_response_pins_inner_convertToJSON(top_pins_analytics_response_pins_inner_t *top_pins_analytics_response_pins_inner);

#endif /* _top_pins_analytics_response_pins_inner_H_ */

