/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MediaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MediaApiTests
    {
        private MediaApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MediaApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MediaApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MediaApi
            //Assert.IsInstanceOf(typeof(MediaApi), instance);
        }

        
        /// <summary>
        /// Test MediaCreate
        /// </summary>
        [Test]
        public void MediaCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MediaUploadRequest mediaUploadRequest = null;
            //var response = instance.MediaCreate(mediaUploadRequest);
            //Assert.IsInstanceOf(typeof(MediaUpload), response, "response is MediaUpload");
        }
        
        /// <summary>
        /// Test MediaGet
        /// </summary>
        [Test]
        public void MediaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mediaId = null;
            //var response = instance.MediaGet(mediaId);
            //Assert.IsInstanceOf(typeof(MediaUploadDetails), response, "response is MediaUploadDetails");
        }
        
        /// <summary>
        /// Test MediaList
        /// </summary>
        [Test]
        public void MediaListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bookmark = null;
            //int? pageSize = null;
            //var response = instance.MediaList(bookmark, pageSize);
            //Assert.IsInstanceOf(typeof(Paginated), response, "response is Paginated");
        }
        
    }

}
