/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdsAnalyticsCreateAsyncRequestAllOf
    /// </summary>
    [DataContract]
    public partial class AdsAnalyticsCreateAsyncRequestAllOf :  IEquatable<AdsAnalyticsCreateAsyncRequestAllOf>, IValidatableObject
    {
        /// <summary>
        /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
        /// </summary>
        /// <value>TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly</value>
        [DataMember(Name="granularity", EmitDefaultValue=true)]
        public Granularity Granularity { get; set; }
        /// <summary>
        /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
        /// </summary>
        /// <value>Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</value>
        [DataMember(Name="click_window_days", EmitDefaultValue=false)]
        public ConversionAttributionWindowDays? ClickWindowDays { get; set; }
        /// <summary>
        /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
        /// </summary>
        /// <value>Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</value>
        [DataMember(Name="engagement_window_days", EmitDefaultValue=false)]
        public ConversionAttributionWindowDays? EngagementWindowDays { get; set; }
        /// <summary>
        /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
        /// </summary>
        /// <value>Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.</value>
        [DataMember(Name="view_window_days", EmitDefaultValue=false)]
        public ConversionAttributionWindowDays? ViewWindowDays { get; set; }
        /// <summary>
        /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
        /// </summary>
        /// <value>The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.</value>
        [DataMember(Name="conversion_report_time", EmitDefaultValue=false)]
        public ConversionReportTimeType? ConversionReportTime { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsAnalyticsCreateAsyncRequestAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdsAnalyticsCreateAsyncRequestAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsAnalyticsCreateAsyncRequestAllOf" /> class.
        /// </summary>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="granularity">TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly (required).</param>
        /// <param name="clickWindowDays">Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (default to 30).</param>
        /// <param name="engagementWindowDays">Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (default to 30).</param>
        /// <param name="viewWindowDays">Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (default to 1).</param>
        /// <param name="conversionReportTime">The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to &quot;TIME_OF_AD_ACTION&quot;).</param>
        /// <param name="attributionTypes">List of types of attribution for the conversion report.</param>
        public AdsAnalyticsCreateAsyncRequestAllOf(string startDate = default(string), string endDate = default(string), Granularity granularity = default(Granularity), ConversionAttributionWindowDays? clickWindowDays = 30, ConversionAttributionWindowDays? engagementWindowDays = 30, ConversionAttributionWindowDays? viewWindowDays = 1, ConversionReportTimeType? conversionReportTime = "TIME_OF_AD_ACTION", List<ConversionReportAttributionType> attributionTypes = default(List<ConversionReportAttributionType>))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for AdsAnalyticsCreateAsyncRequestAllOf and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }

            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for AdsAnalyticsCreateAsyncRequestAllOf and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }

            // to ensure "granularity" is required (not null)
            if (granularity == null)
            {
                throw new InvalidDataException("granularity is a required property for AdsAnalyticsCreateAsyncRequestAllOf and cannot be null");
            }
            else
            {
                this.Granularity = granularity;
            }

            // use default value if no "clickWindowDays" provided
            if (clickWindowDays == null)
            {
                this.ClickWindowDays = 30;
            }
            else
            {
                this.ClickWindowDays = clickWindowDays;
            }
            // use default value if no "engagementWindowDays" provided
            if (engagementWindowDays == null)
            {
                this.EngagementWindowDays = 30;
            }
            else
            {
                this.EngagementWindowDays = engagementWindowDays;
            }
            // use default value if no "viewWindowDays" provided
            if (viewWindowDays == null)
            {
                this.ViewWindowDays = 1;
            }
            else
            {
                this.ViewWindowDays = viewWindowDays;
            }
            // use default value if no "conversionReportTime" provided
            if (conversionReportTime == null)
            {
                this.ConversionReportTime = "TIME_OF_AD_ACTION";
            }
            else
            {
                this.ConversionReportTime = conversionReportTime;
            }
            this.AttributionTypes = attributionTypes;
        }

        /// <summary>
        /// Metric report start date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report start date (UTC). Format: YYYY-MM-DD</value>
        [DataMember(Name="start_date", EmitDefaultValue=true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Metric report end date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report end date (UTC). Format: YYYY-MM-DD</value>
        [DataMember(Name="end_date", EmitDefaultValue=true)]
        public string EndDate { get; set; }






        /// <summary>
        /// List of types of attribution for the conversion report
        /// </summary>
        /// <value>List of types of attribution for the conversion report</value>
        [DataMember(Name="attribution_types", EmitDefaultValue=false)]
        public List<ConversionReportAttributionType> AttributionTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdsAnalyticsCreateAsyncRequestAllOf {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  ClickWindowDays: ").Append(ClickWindowDays).Append("\n");
            sb.Append("  EngagementWindowDays: ").Append(EngagementWindowDays).Append("\n");
            sb.Append("  ViewWindowDays: ").Append(ViewWindowDays).Append("\n");
            sb.Append("  ConversionReportTime: ").Append(ConversionReportTime).Append("\n");
            sb.Append("  AttributionTypes: ").Append(AttributionTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdsAnalyticsCreateAsyncRequestAllOf);
        }

        /// <summary>
        /// Returns true if AdsAnalyticsCreateAsyncRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of AdsAnalyticsCreateAsyncRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdsAnalyticsCreateAsyncRequestAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    (this.Granularity != null &&
                    this.Granularity.Equals(input.Granularity))
                ) && 
                (
                    this.ClickWindowDays == input.ClickWindowDays ||
                    (this.ClickWindowDays != null &&
                    this.ClickWindowDays.Equals(input.ClickWindowDays))
                ) && 
                (
                    this.EngagementWindowDays == input.EngagementWindowDays ||
                    (this.EngagementWindowDays != null &&
                    this.EngagementWindowDays.Equals(input.EngagementWindowDays))
                ) && 
                (
                    this.ViewWindowDays == input.ViewWindowDays ||
                    (this.ViewWindowDays != null &&
                    this.ViewWindowDays.Equals(input.ViewWindowDays))
                ) && 
                (
                    this.ConversionReportTime == input.ConversionReportTime ||
                    (this.ConversionReportTime != null &&
                    this.ConversionReportTime.Equals(input.ConversionReportTime))
                ) && 
                (
                    this.AttributionTypes == input.AttributionTypes ||
                    this.AttributionTypes != null &&
                    input.AttributionTypes != null &&
                    this.AttributionTypes.SequenceEqual(input.AttributionTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Granularity != null)
                    hashCode = hashCode * 59 + this.Granularity.GetHashCode();
                if (this.ClickWindowDays != null)
                    hashCode = hashCode * 59 + this.ClickWindowDays.GetHashCode();
                if (this.EngagementWindowDays != null)
                    hashCode = hashCode * 59 + this.EngagementWindowDays.GetHashCode();
                if (this.ViewWindowDays != null)
                    hashCode = hashCode * 59 + this.ViewWindowDays.GetHashCode();
                if (this.ConversionReportTime != null)
                    hashCode = hashCode * 59 + this.ConversionReportTime.GetHashCode();
                if (this.AttributionTypes != null)
                    hashCode = hashCode * 59 + this.AttributionTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // StartDate (string) pattern
            Regex regexStartDate = new Regex(@"^(\\d{4})-(\\d{2})-(\\d{2})$", RegexOptions.CultureInvariant);
            if (false == regexStartDate.Match(this.StartDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new [] { "StartDate" });
            }



            // EndDate (string) pattern
            Regex regexEndDate = new Regex(@"^(\\d{4})-(\\d{2})-(\\d{2})$", RegexOptions.CultureInvariant);
            if (false == regexEndDate.Match(this.EndDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new [] { "EndDate" });
            }

            yield break;
        }
    }

}
