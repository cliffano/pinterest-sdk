/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
    /// </summary>
    [DataContract(Name = "OauthAccessTokenResponseEverlastingRefresh")]
    [JsonConverter(typeof(JsonSubtypes), "ResponseType")]
    public partial class OauthAccessTokenResponseEverlastingRefresh : OauthAccessTokenResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessTokenResponseEverlastingRefresh" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OauthAccessTokenResponseEverlastingRefresh() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessTokenResponseEverlastingRefresh" /> class.
        /// </summary>
        /// <param name="refreshToken">refreshToken (required).</param>
        /// <param name="refreshTokenExpiresIn">refreshTokenExpiresIn (required).</param>
        /// <param name="refreshTokenExpiresAt">refreshTokenExpiresAt (required).</param>
        /// <param name="responseType">responseType (default to &quot;OauthAccessTokenResponseEverlastingRefresh&quot;).</param>
        /// <param name="accessToken">accessToken (required).</param>
        /// <param name="tokenType">tokenType (required) (default to &quot;bearer&quot;).</param>
        /// <param name="expiresIn">expiresIn (required).</param>
        /// <param name="scope">scope (required).</param>
        public OauthAccessTokenResponseEverlastingRefresh(string refreshToken = default(string), int refreshTokenExpiresIn = default(int), int refreshTokenExpiresAt = default(int), ResponseTypeEnum? responseType = "OauthAccessTokenResponseEverlastingRefresh", string accessToken = default(string), string tokenType = @"bearer", int expiresIn = default(int), string scope = default(string)) : base(responseType, accessToken, tokenType, expiresIn, scope)
        {
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null)
            {
                throw new ArgumentNullException("refreshToken is a required property for OauthAccessTokenResponseEverlastingRefresh and cannot be null");
            }
            this.RefreshToken = refreshToken;
            this.RefreshTokenExpiresIn = refreshTokenExpiresIn;
            this.RefreshTokenExpiresAt = refreshTokenExpiresAt;
        }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name = "refresh_token", IsRequired = true, EmitDefaultValue = true)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpiresIn
        /// </summary>
        [DataMember(Name = "refresh_token_expires_in", IsRequired = true, EmitDefaultValue = true)]
        public int RefreshTokenExpiresIn { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpiresAt
        /// </summary>
        [DataMember(Name = "refresh_token_expires_at", IsRequired = true, EmitDefaultValue = true)]
        public int RefreshTokenExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OauthAccessTokenResponseEverlastingRefresh {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  RefreshTokenExpiresIn: ").Append(RefreshTokenExpiresIn).Append("\n");
            sb.Append("  RefreshTokenExpiresAt: ").Append(RefreshTokenExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
