/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnalyticsMetricsResponse
    /// </summary>
    [DataContract]
    public partial class AnalyticsMetricsResponse :  IEquatable<AnalyticsMetricsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsMetricsResponse" /> class.
        /// </summary>
        /// <param name="dailyMetrics">Array with the requested daily metric records.</param>
        /// <param name="summaryMetrics">The metric name and value over the requested period for each requested metric.</param>
        public AnalyticsMetricsResponse(List<AnalyticsMetricsResponseDailyMetrics> dailyMetrics = default(List<AnalyticsMetricsResponseDailyMetrics>), Dictionary<string, decimal> summaryMetrics = default(Dictionary<string, decimal>))
        {
            this.DailyMetrics = dailyMetrics;
            this.SummaryMetrics = summaryMetrics;
        }

        /// <summary>
        /// Array with the requested daily metric records
        /// </summary>
        /// <value>Array with the requested daily metric records</value>
        [DataMember(Name="daily_metrics", EmitDefaultValue=false)]
        public List<AnalyticsMetricsResponseDailyMetrics> DailyMetrics { get; set; }

        /// <summary>
        /// The metric name and value over the requested period for each requested metric
        /// </summary>
        /// <value>The metric name and value over the requested period for each requested metric</value>
        [DataMember(Name="summary_metrics", EmitDefaultValue=false)]
        public Dictionary<string, decimal> SummaryMetrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsMetricsResponse {\n");
            sb.Append("  DailyMetrics: ").Append(DailyMetrics).Append("\n");
            sb.Append("  SummaryMetrics: ").Append(SummaryMetrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsMetricsResponse);
        }

        /// <summary>
        /// Returns true if AnalyticsMetricsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsMetricsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsMetricsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DailyMetrics == input.DailyMetrics ||
                    this.DailyMetrics != null &&
                    input.DailyMetrics != null &&
                    this.DailyMetrics.SequenceEqual(input.DailyMetrics)
                ) && 
                (
                    this.SummaryMetrics == input.SummaryMetrics ||
                    this.SummaryMetrics != null &&
                    input.SummaryMetrics != null &&
                    this.SummaryMetrics.SequenceEqual(input.SummaryMetrics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DailyMetrics != null)
                    hashCode = hashCode * 59 + this.DailyMetrics.GetHashCode();
                if (this.SummaryMetrics != null)
                    hashCode = hashCode * 59 + this.SummaryMetrics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
