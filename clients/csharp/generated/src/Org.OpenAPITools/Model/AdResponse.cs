/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdResponse
    /// </summary>
    [DataContract]
    public partial class AdResponse :  IEquatable<AdResponse>, IValidatableObject
    {
        /// <summary>
        /// Ad creative type enum
        /// </summary>
        /// <value>Ad creative type enum</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreativeTypeEnum
        {
            /// <summary>
            /// Enum REGULAR for value: REGULAR
            /// </summary>
            [EnumMember(Value = "REGULAR")]
            REGULAR = 1,

            /// <summary>
            /// Enum VIDEO for value: VIDEO
            /// </summary>
            [EnumMember(Value = "VIDEO")]
            VIDEO = 2,

            /// <summary>
            /// Enum SHOPPING for value: SHOPPING
            /// </summary>
            [EnumMember(Value = "SHOPPING")]
            SHOPPING = 3,

            /// <summary>
            /// Enum CAROUSEL for value: CAROUSEL
            /// </summary>
            [EnumMember(Value = "CAROUSEL")]
            CAROUSEL = 4,

            /// <summary>
            /// Enum MAXVIDEO for value: MAX_VIDEO
            /// </summary>
            [EnumMember(Value = "MAX_VIDEO")]
            MAXVIDEO = 5,

            /// <summary>
            /// Enum SHOPTHEPIN for value: SHOP_THE_PIN
            /// </summary>
            [EnumMember(Value = "SHOP_THE_PIN")]
            SHOPTHEPIN = 6,

            /// <summary>
            /// Enum STORY for value: STORY
            /// </summary>
            [EnumMember(Value = "STORY")]
            STORY = 7

        }

        /// <summary>
        /// Ad creative type enum
        /// </summary>
        /// <value>Ad creative type enum</value>
        [DataMember(Name="creative_type", EmitDefaultValue=false)]
        public CreativeTypeEnum? CreativeType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public EntityStatus? Status { get; set; }
        /// <summary>
        /// ad disapproval reasons
        /// </summary>
        /// <value>ad disapproval reasons</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RejectedReasonsEnum
        {
            /// <summary>
            /// Enum HASHTAGS for value: HASHTAGS
            /// </summary>
            [EnumMember(Value = "HASHTAGS")]
            HASHTAGS = 1,

            /// <summary>
            /// Enum PROMOTIONSANDPRICES for value: PROMOTIONS_AND_PRICES
            /// </summary>
            [EnumMember(Value = "PROMOTIONS_AND_PRICES")]
            PROMOTIONSANDPRICES = 2,

            /// <summary>
            /// Enum TARGETING for value: TARGETING
            /// </summary>
            [EnumMember(Value = "TARGETING")]
            TARGETING = 3,

            /// <summary>
            /// Enum LANDINGPAGE for value: LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE")]
            LANDINGPAGE = 4,

            /// <summary>
            /// Enum CAPSANDSYMBOLS for value: CAPS_AND_SYMBOLS
            /// </summary>
            [EnumMember(Value = "CAPS_AND_SYMBOLS")]
            CAPSANDSYMBOLS = 5,

            /// <summary>
            /// Enum SHOCKING for value: SHOCKING
            /// </summary>
            [EnumMember(Value = "SHOCKING")]
            SHOCKING = 6,

            /// <summary>
            /// Enum WEIGHTLOSS for value: WEIGHT_LOSS
            /// </summary>
            [EnumMember(Value = "WEIGHT_LOSS")]
            WEIGHTLOSS = 7,

            /// <summary>
            /// Enum PROHIBITEDPRODUCT for value: PROHIBITED_PRODUCT
            /// </summary>
            [EnumMember(Value = "PROHIBITED_PRODUCT")]
            PROHIBITEDPRODUCT = 8,

            /// <summary>
            /// Enum AUTHENTICITY for value: AUTHENTICITY
            /// </summary>
            [EnumMember(Value = "AUTHENTICITY")]
            AUTHENTICITY = 9,

            /// <summary>
            /// Enum NUDITY for value: NUDITY
            /// </summary>
            [EnumMember(Value = "NUDITY")]
            NUDITY = 10,

            /// <summary>
            /// Enum CONFUSINGDESIGN for value: CONFUSING_DESIGN
            /// </summary>
            [EnumMember(Value = "CONFUSING_DESIGN")]
            CONFUSINGDESIGN = 11,

            /// <summary>
            /// Enum URGENCY for value: URGENCY
            /// </summary>
            [EnumMember(Value = "URGENCY")]
            URGENCY = 12,

            /// <summary>
            /// Enum RATINGS for value: RATINGS
            /// </summary>
            [EnumMember(Value = "RATINGS")]
            RATINGS = 13,

            /// <summary>
            /// Enum APP for value: APP
            /// </summary>
            [EnumMember(Value = "APP")]
            APP = 14,

            /// <summary>
            /// Enum ALCOHOL for value: ALCOHOL
            /// </summary>
            [EnumMember(Value = "ALCOHOL")]
            ALCOHOL = 15,

            /// <summary>
            /// Enum CONTESTS for value: CONTESTS
            /// </summary>
            [EnumMember(Value = "CONTESTS")]
            CONTESTS = 16,

            /// <summary>
            /// Enum POLITICAL for value: POLITICAL
            /// </summary>
            [EnumMember(Value = "POLITICAL")]
            POLITICAL = 17,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 18,

            /// <summary>
            /// Enum IMAGE for value: IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGE = 19,

            /// <summary>
            /// Enum NAR for value: NAR
            /// </summary>
            [EnumMember(Value = "NAR")]
            NAR = 20,

            /// <summary>
            /// Enum INCONSISTENT for value: INCONSISTENT
            /// </summary>
            [EnumMember(Value = "INCONSISTENT")]
            INCONSISTENT = 21,

            /// <summary>
            /// Enum CLICKBAIT for value: CLICKBAIT
            /// </summary>
            [EnumMember(Value = "CLICKBAIT")]
            CLICKBAIT = 22,

            /// <summary>
            /// Enum NODESCRIPTION for value: NO_DESCRIPTION
            /// </summary>
            [EnumMember(Value = "NO_DESCRIPTION")]
            NODESCRIPTION = 23,

            /// <summary>
            /// Enum LOWQUALITY for value: LOW_QUALITY
            /// </summary>
            [EnumMember(Value = "LOW_QUALITY")]
            LOWQUALITY = 24,

            /// <summary>
            /// Enum EXAGGERATEDCLAIMS for value: EXAGGERATED_CLAIMS
            /// </summary>
            [EnumMember(Value = "EXAGGERATED_CLAIMS")]
            EXAGGERATEDCLAIMS = 25,

            /// <summary>
            /// Enum PINTERESTBRAND for value: PINTEREST_BRAND
            /// </summary>
            [EnumMember(Value = "PINTEREST_BRAND")]
            PINTERESTBRAND = 26,

            /// <summary>
            /// Enum ALCOHOLNOSALE for value: ALCOHOL_NO_SALE
            /// </summary>
            [EnumMember(Value = "ALCOHOL_NO_SALE")]
            ALCOHOLNOSALE = 27,

            /// <summary>
            /// Enum LANDINGPAGESPEED for value: LANDING_PAGE_SPEED
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_SPEED")]
            LANDINGPAGESPEED = 28,

            /// <summary>
            /// Enum LANDINGPAGEHARDWALL for value: LANDING_PAGE_HARDWALL
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_HARDWALL")]
            LANDINGPAGEHARDWALL = 29,

            /// <summary>
            /// Enum LANDINGPAGEBROKEN for value: LANDING_PAGE_BROKEN
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_BROKEN")]
            LANDINGPAGEBROKEN = 30,

            /// <summary>
            /// Enum LANDINGPAGEQUALITY for value: LANDING_PAGE_QUALITY
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE_QUALITY")]
            LANDINGPAGEQUALITY = 31,

            /// <summary>
            /// Enum OUTOFSTOCK for value: OUT_OF_STOCK
            /// </summary>
            [EnumMember(Value = "OUT_OF_STOCK")]
            OUTOFSTOCK = 32,

            /// <summary>
            /// Enum IMAGELOWQUALITY for value: IMAGE_LOW_QUALITY
            /// </summary>
            [EnumMember(Value = "IMAGE_LOW_QUALITY")]
            IMAGELOWQUALITY = 33,

            /// <summary>
            /// Enum IMAGEBUSY for value: IMAGE_BUSY
            /// </summary>
            [EnumMember(Value = "IMAGE_BUSY")]
            IMAGEBUSY = 34,

            /// <summary>
            /// Enum IMAGEPOORLYEDITED for value: IMAGE_POORLY_EDITED
            /// </summary>
            [EnumMember(Value = "IMAGE_POORLY_EDITED")]
            IMAGEPOORLYEDITED = 35,

            /// <summary>
            /// Enum IMAGEBEFOREAFTER for value: IMAGE_BEFORE_AFTER
            /// </summary>
            [EnumMember(Value = "IMAGE_BEFORE_AFTER")]
            IMAGEBEFOREAFTER = 36,

            /// <summary>
            /// Enum UGC for value: UGC
            /// </summary>
            [EnumMember(Value = "UGC")]
            UGC = 37,

            /// <summary>
            /// Enum FAKEBUTTONS for value: FAKE_BUTTONS
            /// </summary>
            [EnumMember(Value = "FAKE_BUTTONS")]
            FAKEBUTTONS = 38,

            /// <summary>
            /// Enum WEAPONS for value: WEAPONS
            /// </summary>
            [EnumMember(Value = "WEAPONS")]
            WEAPONS = 39,

            /// <summary>
            /// Enum SENSITIVE for value: SENSITIVE
            /// </summary>
            [EnumMember(Value = "SENSITIVE")]
            SENSITIVE = 40,

            /// <summary>
            /// Enum UNACCEPTABLEBUSINESS for value: UNACCEPTABLE_BUSINESS
            /// </summary>
            [EnumMember(Value = "UNACCEPTABLE_BUSINESS")]
            UNACCEPTABLEBUSINESS = 41,

            /// <summary>
            /// Enum SUSPICIOUSCLAIMS for value: SUSPICIOUS_CLAIMS
            /// </summary>
            [EnumMember(Value = "SUSPICIOUS_CLAIMS")]
            SUSPICIOUSCLAIMS = 42,

            /// <summary>
            /// Enum PHARMA for value: PHARMA
            /// </summary>
            [EnumMember(Value = "PHARMA")]
            PHARMA = 43,

            /// <summary>
            /// Enum SUSPICIOUSSUPPLEMENTS for value: SUSPICIOUS_SUPPLEMENTS
            /// </summary>
            [EnumMember(Value = "SUSPICIOUS_SUPPLEMENTS")]
            SUSPICIOUSSUPPLEMENTS = 44,

            /// <summary>
            /// Enum ILLEGALRECREATIONALDRUG for value: ILLEGAL_RECREATIONAL_DRUG
            /// </summary>
            [EnumMember(Value = "ILLEGAL_RECREATIONAL_DRUG")]
            ILLEGALRECREATIONALDRUG = 45,

            /// <summary>
            /// Enum LOWQUALITYLANDINGPAGE for value: LOW_QUALITY_LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LOW_QUALITY_LANDING_PAGE")]
            LOWQUALITYLANDINGPAGE = 46,

            /// <summary>
            /// Enum RESTRICTEDHEALTHCARE for value: RESTRICTED_HEALTHCARE
            /// </summary>
            [EnumMember(Value = "RESTRICTED_HEALTHCARE")]
            RESTRICTEDHEALTHCARE = 47,

            /// <summary>
            /// Enum INCONSISTENTLANGFR for value: INCONSISTENT_LANG_FR
            /// </summary>
            [EnumMember(Value = "INCONSISTENT_LANG_FR")]
            INCONSISTENTLANGFR = 48

        }


        /// <summary>
        /// Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
        /// </summary>
        /// <value>Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.</value>
        [DataMember(Name="rejected_reasons", EmitDefaultValue=false)]
        public List<RejectedReasonsEnum> RejectedReasons { get; set; }
        /// <summary>
        /// Ad review status
        /// </summary>
        /// <value>Ad review status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReviewStatusEnum
        {
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 1,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 2,

            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 3,

            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 4

        }

        /// <summary>
        /// Ad review status
        /// </summary>
        /// <value>Ad review status</value>
        [DataMember(Name="review_status", EmitDefaultValue=false)]
        public ReviewStatusEnum? ReviewStatus { get; set; }
        /// <summary>
        /// Ad summary status
        /// </summary>
        /// <value>Ad summary status</value>
        [DataMember(Name="summary_status", EmitDefaultValue=false)]
        public PinPromotionSummaryStatus? SummaryStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdResponse" /> class.
        /// </summary>
        /// <param name="adGroupId">ID of the ad group that contains the ad..</param>
        /// <param name="androidDeepLink">Deep link URL for Android devices. Not currently available. Using this field will generate an error..</param>
        /// <param name="carouselAndroidDeepLinks">Comma-separated deep links for the carousel pin on Android..</param>
        /// <param name="carouselDestinationUrls">Comma-separated destination URLs for the carousel pin to promote..</param>
        /// <param name="carouselIosDeepLinks">Comma-separated deep links for the carousel pin on iOS..</param>
        /// <param name="clickTrackingUrl">Tracking url for the ad clicks..</param>
        /// <param name="creativeType">Ad creative type enum.</param>
        /// <param name="destinationUrl">Destination URL..</param>
        /// <param name="iosDeepLink">Deep link URL for iOS devices. Not currently available. Using this field will generate an error..</param>
        /// <param name="isPinDeleted">Is original pin deleted?.</param>
        /// <param name="isRemovable">Is pin repinnable?.</param>
        /// <param name="name">Name of the ad - 255 chars max..</param>
        /// <param name="pinId">Pin ID..</param>
        /// <param name="status">status.</param>
        /// <param name="trackingUrls">trackingUrls.</param>
        /// <param name="viewTrackingUrl">Tracking URL for ad impressions..</param>
        /// <param name="adAccountId">The ID of the advertiser that this ad belongs to..</param>
        /// <param name="campaignId">ID of the ad campaign that contains this ad..</param>
        /// <param name="collectionItemsDestinationUrlTemplate">Destination URL template for all items within a collections drawer..</param>
        /// <param name="createdTime">Pin creation time. Unix timestamp in seconds..</param>
        /// <param name="id">The ID of this ad..</param>
        /// <param name="rejectedReasons">Enum reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;..</param>
        /// <param name="rejectionLabels">Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;..</param>
        /// <param name="reviewStatus">Ad review status.</param>
        /// <param name="type">Always \&quot;ad\&quot;..</param>
        /// <param name="updatedTime">Last update time. Unix timestamp in seconds..</param>
        /// <param name="summaryStatus">Ad summary status.</param>
        public AdResponse(string adGroupId = default(string), string androidDeepLink = default(string), List<string> carouselAndroidDeepLinks = default(List<string>), List<string> carouselDestinationUrls = default(List<string>), List<string> carouselIosDeepLinks = default(List<string>), string clickTrackingUrl = default(string), CreativeTypeEnum? creativeType = default(CreativeTypeEnum?), string destinationUrl = default(string), string iosDeepLink = default(string), bool isPinDeleted = default(bool), bool isRemovable = default(bool), string name = default(string), string pinId = default(string), EntityStatus? status = default(EntityStatus?), TrackingUrls trackingUrls = default(TrackingUrls), string viewTrackingUrl = default(string), string adAccountId = default(string), string campaignId = default(string), string collectionItemsDestinationUrlTemplate = default(string), int createdTime = default(int), string id = default(string), List<RejectedReasonsEnum> rejectedReasons = default(List<RejectedReasonsEnum>), List<string> rejectionLabels = default(List<string>), ReviewStatusEnum? reviewStatus = default(ReviewStatusEnum?), string type = default(string), int updatedTime = default(int), PinPromotionSummaryStatus? summaryStatus = default(PinPromotionSummaryStatus?))
        {
            this.AndroidDeepLink = androidDeepLink;
            this.CarouselAndroidDeepLinks = carouselAndroidDeepLinks;
            this.CarouselDestinationUrls = carouselDestinationUrls;
            this.CarouselIosDeepLinks = carouselIosDeepLinks;
            this.ClickTrackingUrl = clickTrackingUrl;
            this.DestinationUrl = destinationUrl;
            this.IosDeepLink = iosDeepLink;
            this.Name = name;
            this.TrackingUrls = trackingUrls;
            this.ViewTrackingUrl = viewTrackingUrl;
            this.CollectionItemsDestinationUrlTemplate = collectionItemsDestinationUrlTemplate;
            this.AdGroupId = adGroupId;
            this.AndroidDeepLink = androidDeepLink;
            this.CarouselAndroidDeepLinks = carouselAndroidDeepLinks;
            this.CarouselDestinationUrls = carouselDestinationUrls;
            this.CarouselIosDeepLinks = carouselIosDeepLinks;
            this.ClickTrackingUrl = clickTrackingUrl;
            this.CreativeType = creativeType;
            this.DestinationUrl = destinationUrl;
            this.IosDeepLink = iosDeepLink;
            this.IsPinDeleted = isPinDeleted;
            this.IsRemovable = isRemovable;
            this.Name = name;
            this.PinId = pinId;
            this.Status = status;
            this.TrackingUrls = trackingUrls;
            this.ViewTrackingUrl = viewTrackingUrl;
            this.AdAccountId = adAccountId;
            this.CampaignId = campaignId;
            this.CollectionItemsDestinationUrlTemplate = collectionItemsDestinationUrlTemplate;
            this.CreatedTime = createdTime;
            this.Id = id;
            this.RejectedReasons = rejectedReasons;
            this.RejectionLabels = rejectionLabels;
            this.ReviewStatus = reviewStatus;
            this.Type = type;
            this.UpdatedTime = updatedTime;
            this.SummaryStatus = summaryStatus;
        }

        /// <summary>
        /// ID of the ad group that contains the ad.
        /// </summary>
        /// <value>ID of the ad group that contains the ad.</value>
        [DataMember(Name="ad_group_id", EmitDefaultValue=false)]
        public string AdGroupId { get; set; }

        /// <summary>
        /// Deep link URL for Android devices. Not currently available. Using this field will generate an error.
        /// </summary>
        /// <value>Deep link URL for Android devices. Not currently available. Using this field will generate an error.</value>
        [DataMember(Name="android_deep_link", EmitDefaultValue=true)]
        public string AndroidDeepLink { get; set; }

        /// <summary>
        /// Comma-separated deep links for the carousel pin on Android.
        /// </summary>
        /// <value>Comma-separated deep links for the carousel pin on Android.</value>
        [DataMember(Name="carousel_android_deep_links", EmitDefaultValue=true)]
        public List<string> CarouselAndroidDeepLinks { get; set; }

        /// <summary>
        /// Comma-separated destination URLs for the carousel pin to promote.
        /// </summary>
        /// <value>Comma-separated destination URLs for the carousel pin to promote.</value>
        [DataMember(Name="carousel_destination_urls", EmitDefaultValue=true)]
        public List<string> CarouselDestinationUrls { get; set; }

        /// <summary>
        /// Comma-separated deep links for the carousel pin on iOS.
        /// </summary>
        /// <value>Comma-separated deep links for the carousel pin on iOS.</value>
        [DataMember(Name="carousel_ios_deep_links", EmitDefaultValue=true)]
        public List<string> CarouselIosDeepLinks { get; set; }

        /// <summary>
        /// Tracking url for the ad clicks.
        /// </summary>
        /// <value>Tracking url for the ad clicks.</value>
        [DataMember(Name="click_tracking_url", EmitDefaultValue=true)]
        public string ClickTrackingUrl { get; set; }


        /// <summary>
        /// Destination URL.
        /// </summary>
        /// <value>Destination URL.</value>
        [DataMember(Name="destination_url", EmitDefaultValue=true)]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Deep link URL for iOS devices. Not currently available. Using this field will generate an error.
        /// </summary>
        /// <value>Deep link URL for iOS devices. Not currently available. Using this field will generate an error.</value>
        [DataMember(Name="ios_deep_link", EmitDefaultValue=true)]
        public string IosDeepLink { get; set; }

        /// <summary>
        /// Is original pin deleted?
        /// </summary>
        /// <value>Is original pin deleted?</value>
        [DataMember(Name="is_pin_deleted", EmitDefaultValue=false)]
        public bool IsPinDeleted { get; set; }

        /// <summary>
        /// Is pin repinnable?
        /// </summary>
        /// <value>Is pin repinnable?</value>
        [DataMember(Name="is_removable", EmitDefaultValue=false)]
        public bool IsRemovable { get; set; }

        /// <summary>
        /// Name of the ad - 255 chars max.
        /// </summary>
        /// <value>Name of the ad - 255 chars max.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Pin ID.
        /// </summary>
        /// <value>Pin ID.</value>
        [DataMember(Name="pin_id", EmitDefaultValue=false)]
        public string PinId { get; set; }


        /// <summary>
        /// Gets or Sets TrackingUrls
        /// </summary>
        [DataMember(Name="tracking_urls", EmitDefaultValue=true)]
        public TrackingUrls TrackingUrls { get; set; }

        /// <summary>
        /// Tracking URL for ad impressions.
        /// </summary>
        /// <value>Tracking URL for ad impressions.</value>
        [DataMember(Name="view_tracking_url", EmitDefaultValue=true)]
        public string ViewTrackingUrl { get; set; }

        /// <summary>
        /// The ID of the advertiser that this ad belongs to.
        /// </summary>
        /// <value>The ID of the advertiser that this ad belongs to.</value>
        [DataMember(Name="ad_account_id", EmitDefaultValue=false)]
        public string AdAccountId { get; set; }

        /// <summary>
        /// ID of the ad campaign that contains this ad.
        /// </summary>
        /// <value>ID of the ad campaign that contains this ad.</value>
        [DataMember(Name="campaign_id", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Destination URL template for all items within a collections drawer.
        /// </summary>
        /// <value>Destination URL template for all items within a collections drawer.</value>
        [DataMember(Name="collection_items_destination_url_template", EmitDefaultValue=true)]
        public string CollectionItemsDestinationUrlTemplate { get; set; }

        /// <summary>
        /// Pin creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Pin creation time. Unix timestamp in seconds.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// The ID of this ad.
        /// </summary>
        /// <value>The ID of this ad.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.
        /// </summary>
        /// <value>Text reason why the pin was rejected. Returned if &lt;code&gt;review_status&lt;/code&gt; is \&quot;REJECTED\&quot;.</value>
        [DataMember(Name="rejection_labels", EmitDefaultValue=false)]
        public List<string> RejectionLabels { get; set; }


        /// <summary>
        /// Always \&quot;ad\&quot;.
        /// </summary>
        /// <value>Always \&quot;ad\&quot;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Last update time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Last update time. Unix timestamp in seconds.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public int UpdatedTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdResponse {\n");
            sb.Append("  AdGroupId: ").Append(AdGroupId).Append("\n");
            sb.Append("  AndroidDeepLink: ").Append(AndroidDeepLink).Append("\n");
            sb.Append("  CarouselAndroidDeepLinks: ").Append(CarouselAndroidDeepLinks).Append("\n");
            sb.Append("  CarouselDestinationUrls: ").Append(CarouselDestinationUrls).Append("\n");
            sb.Append("  CarouselIosDeepLinks: ").Append(CarouselIosDeepLinks).Append("\n");
            sb.Append("  ClickTrackingUrl: ").Append(ClickTrackingUrl).Append("\n");
            sb.Append("  CreativeType: ").Append(CreativeType).Append("\n");
            sb.Append("  DestinationUrl: ").Append(DestinationUrl).Append("\n");
            sb.Append("  IosDeepLink: ").Append(IosDeepLink).Append("\n");
            sb.Append("  IsPinDeleted: ").Append(IsPinDeleted).Append("\n");
            sb.Append("  IsRemovable: ").Append(IsRemovable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PinId: ").Append(PinId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingUrls: ").Append(TrackingUrls).Append("\n");
            sb.Append("  ViewTrackingUrl: ").Append(ViewTrackingUrl).Append("\n");
            sb.Append("  AdAccountId: ").Append(AdAccountId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CollectionItemsDestinationUrlTemplate: ").Append(CollectionItemsDestinationUrlTemplate).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RejectedReasons: ").Append(RejectedReasons).Append("\n");
            sb.Append("  RejectionLabels: ").Append(RejectionLabels).Append("\n");
            sb.Append("  ReviewStatus: ").Append(ReviewStatus).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  SummaryStatus: ").Append(SummaryStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdResponse);
        }

        /// <summary>
        /// Returns true if AdResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdGroupId == input.AdGroupId ||
                    (this.AdGroupId != null &&
                    this.AdGroupId.Equals(input.AdGroupId))
                ) && 
                (
                    this.AndroidDeepLink == input.AndroidDeepLink ||
                    (this.AndroidDeepLink != null &&
                    this.AndroidDeepLink.Equals(input.AndroidDeepLink))
                ) && 
                (
                    this.CarouselAndroidDeepLinks == input.CarouselAndroidDeepLinks ||
                    this.CarouselAndroidDeepLinks != null &&
                    input.CarouselAndroidDeepLinks != null &&
                    this.CarouselAndroidDeepLinks.SequenceEqual(input.CarouselAndroidDeepLinks)
                ) && 
                (
                    this.CarouselDestinationUrls == input.CarouselDestinationUrls ||
                    this.CarouselDestinationUrls != null &&
                    input.CarouselDestinationUrls != null &&
                    this.CarouselDestinationUrls.SequenceEqual(input.CarouselDestinationUrls)
                ) && 
                (
                    this.CarouselIosDeepLinks == input.CarouselIosDeepLinks ||
                    this.CarouselIosDeepLinks != null &&
                    input.CarouselIosDeepLinks != null &&
                    this.CarouselIosDeepLinks.SequenceEqual(input.CarouselIosDeepLinks)
                ) && 
                (
                    this.ClickTrackingUrl == input.ClickTrackingUrl ||
                    (this.ClickTrackingUrl != null &&
                    this.ClickTrackingUrl.Equals(input.ClickTrackingUrl))
                ) && 
                (
                    this.CreativeType == input.CreativeType ||
                    (this.CreativeType != null &&
                    this.CreativeType.Equals(input.CreativeType))
                ) && 
                (
                    this.DestinationUrl == input.DestinationUrl ||
                    (this.DestinationUrl != null &&
                    this.DestinationUrl.Equals(input.DestinationUrl))
                ) && 
                (
                    this.IosDeepLink == input.IosDeepLink ||
                    (this.IosDeepLink != null &&
                    this.IosDeepLink.Equals(input.IosDeepLink))
                ) && 
                (
                    this.IsPinDeleted == input.IsPinDeleted ||
                    (this.IsPinDeleted != null &&
                    this.IsPinDeleted.Equals(input.IsPinDeleted))
                ) && 
                (
                    this.IsRemovable == input.IsRemovable ||
                    (this.IsRemovable != null &&
                    this.IsRemovable.Equals(input.IsRemovable))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PinId == input.PinId ||
                    (this.PinId != null &&
                    this.PinId.Equals(input.PinId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrackingUrls == input.TrackingUrls ||
                    (this.TrackingUrls != null &&
                    this.TrackingUrls.Equals(input.TrackingUrls))
                ) && 
                (
                    this.ViewTrackingUrl == input.ViewTrackingUrl ||
                    (this.ViewTrackingUrl != null &&
                    this.ViewTrackingUrl.Equals(input.ViewTrackingUrl))
                ) && 
                (
                    this.AdAccountId == input.AdAccountId ||
                    (this.AdAccountId != null &&
                    this.AdAccountId.Equals(input.AdAccountId))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.CollectionItemsDestinationUrlTemplate == input.CollectionItemsDestinationUrlTemplate ||
                    (this.CollectionItemsDestinationUrlTemplate != null &&
                    this.CollectionItemsDestinationUrlTemplate.Equals(input.CollectionItemsDestinationUrlTemplate))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RejectedReasons == input.RejectedReasons ||
                    this.RejectedReasons != null &&
                    input.RejectedReasons != null &&
                    this.RejectedReasons.SequenceEqual(input.RejectedReasons)
                ) && 
                (
                    this.RejectionLabels == input.RejectionLabels ||
                    this.RejectionLabels != null &&
                    input.RejectionLabels != null &&
                    this.RejectionLabels.SequenceEqual(input.RejectionLabels)
                ) && 
                (
                    this.ReviewStatus == input.ReviewStatus ||
                    (this.ReviewStatus != null &&
                    this.ReviewStatus.Equals(input.ReviewStatus))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedTime == input.UpdatedTime ||
                    (this.UpdatedTime != null &&
                    this.UpdatedTime.Equals(input.UpdatedTime))
                ) && 
                (
                    this.SummaryStatus == input.SummaryStatus ||
                    (this.SummaryStatus != null &&
                    this.SummaryStatus.Equals(input.SummaryStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdGroupId != null)
                    hashCode = hashCode * 59 + this.AdGroupId.GetHashCode();
                if (this.AndroidDeepLink != null)
                    hashCode = hashCode * 59 + this.AndroidDeepLink.GetHashCode();
                if (this.CarouselAndroidDeepLinks != null)
                    hashCode = hashCode * 59 + this.CarouselAndroidDeepLinks.GetHashCode();
                if (this.CarouselDestinationUrls != null)
                    hashCode = hashCode * 59 + this.CarouselDestinationUrls.GetHashCode();
                if (this.CarouselIosDeepLinks != null)
                    hashCode = hashCode * 59 + this.CarouselIosDeepLinks.GetHashCode();
                if (this.ClickTrackingUrl != null)
                    hashCode = hashCode * 59 + this.ClickTrackingUrl.GetHashCode();
                if (this.CreativeType != null)
                    hashCode = hashCode * 59 + this.CreativeType.GetHashCode();
                if (this.DestinationUrl != null)
                    hashCode = hashCode * 59 + this.DestinationUrl.GetHashCode();
                if (this.IosDeepLink != null)
                    hashCode = hashCode * 59 + this.IosDeepLink.GetHashCode();
                if (this.IsPinDeleted != null)
                    hashCode = hashCode * 59 + this.IsPinDeleted.GetHashCode();
                if (this.IsRemovable != null)
                    hashCode = hashCode * 59 + this.IsRemovable.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PinId != null)
                    hashCode = hashCode * 59 + this.PinId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrackingUrls != null)
                    hashCode = hashCode * 59 + this.TrackingUrls.GetHashCode();
                if (this.ViewTrackingUrl != null)
                    hashCode = hashCode * 59 + this.ViewTrackingUrl.GetHashCode();
                if (this.AdAccountId != null)
                    hashCode = hashCode * 59 + this.AdAccountId.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.CollectionItemsDestinationUrlTemplate != null)
                    hashCode = hashCode * 59 + this.CollectionItemsDestinationUrlTemplate.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RejectedReasons != null)
                    hashCode = hashCode * 59 + this.RejectedReasons.GetHashCode();
                if (this.RejectionLabels != null)
                    hashCode = hashCode * 59 + this.RejectionLabels.GetHashCode();
                if (this.ReviewStatus != null)
                    hashCode = hashCode * 59 + this.ReviewStatus.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedTime != null)
                    hashCode = hashCode * 59 + this.UpdatedTime.GetHashCode();
                if (this.SummaryStatus != null)
                    hashCode = hashCode * 59 + this.SummaryStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // AdGroupId (string) pattern
            Regex regexAdGroupId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexAdGroupId.Match(this.AdGroupId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdGroupId, must match a pattern of " + regexAdGroupId, new [] { "AdGroupId" });
            }



            // PinId (string) pattern
            Regex regexPinId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexPinId.Match(this.PinId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PinId, must match a pattern of " + regexPinId, new [] { "PinId" });
            }



            // AdAccountId (string) pattern
            Regex regexAdAccountId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexAdAccountId.Match(this.AdAccountId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdAccountId, must match a pattern of " + regexAdAccountId, new [] { "AdAccountId" });
            }



            // CampaignId (string) pattern
            Regex regexCampaignId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexCampaignId.Match(this.CampaignId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CampaignId, must match a pattern of " + regexCampaignId, new [] { "CampaignId" });
            }



            // Id (string) pattern
            Regex regexId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}
