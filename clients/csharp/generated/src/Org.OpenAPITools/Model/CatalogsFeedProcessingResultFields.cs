/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CatalogsFeedProcessingResultFields
    /// </summary>
    [DataContract]
    public partial class CatalogsFeedProcessingResultFields :  IEquatable<CatalogsFeedProcessingResultFields>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public CatalogsFeedProcessingStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsFeedProcessingResultFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsFeedProcessingResultFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsFeedProcessingResultFields" /> class.
        /// </summary>
        /// <param name="ingestionDetails">ingestionDetails (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="productCounts">productCounts (required).</param>
        /// <param name="validationDetails">validationDetails (required).</param>
        public CatalogsFeedProcessingResultFields(CatalogsFeedIngestionDetails ingestionDetails = default(CatalogsFeedIngestionDetails), CatalogsFeedProcessingStatus status = default(CatalogsFeedProcessingStatus), CatalogsFeedProductCounts productCounts = default(CatalogsFeedProductCounts), CatalogsFeedValidationDetails validationDetails = default(CatalogsFeedValidationDetails))
        {
            // to ensure "ingestionDetails" is required (not null)
            if (ingestionDetails == null)
            {
                throw new InvalidDataException("ingestionDetails is a required property for CatalogsFeedProcessingResultFields and cannot be null");
            }
            else
            {
                this.IngestionDetails = ingestionDetails;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for CatalogsFeedProcessingResultFields and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "productCounts" is required (not null)
            if (productCounts == null)
            {
                throw new InvalidDataException("productCounts is a required property for CatalogsFeedProcessingResultFields and cannot be null");
            }
            else
            {
                this.ProductCounts = productCounts;
            }

            this.ProductCounts = productCounts;
            // to ensure "validationDetails" is required (not null)
            if (validationDetails == null)
            {
                throw new InvalidDataException("validationDetails is a required property for CatalogsFeedProcessingResultFields and cannot be null");
            }
            else
            {
                this.ValidationDetails = validationDetails;
            }

        }

        /// <summary>
        /// Gets or Sets IngestionDetails
        /// </summary>
        [DataMember(Name="ingestion_details", EmitDefaultValue=true)]
        public CatalogsFeedIngestionDetails IngestionDetails { get; set; }


        /// <summary>
        /// Gets or Sets ProductCounts
        /// </summary>
        [DataMember(Name="product_counts", EmitDefaultValue=true)]
        public CatalogsFeedProductCounts ProductCounts { get; set; }

        /// <summary>
        /// Gets or Sets ValidationDetails
        /// </summary>
        [DataMember(Name="validation_details", EmitDefaultValue=true)]
        public CatalogsFeedValidationDetails ValidationDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsFeedProcessingResultFields {\n");
            sb.Append("  IngestionDetails: ").Append(IngestionDetails).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProductCounts: ").Append(ProductCounts).Append("\n");
            sb.Append("  ValidationDetails: ").Append(ValidationDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogsFeedProcessingResultFields);
        }

        /// <summary>
        /// Returns true if CatalogsFeedProcessingResultFields instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogsFeedProcessingResultFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsFeedProcessingResultFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IngestionDetails == input.IngestionDetails ||
                    (this.IngestionDetails != null &&
                    this.IngestionDetails.Equals(input.IngestionDetails))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ProductCounts == input.ProductCounts ||
                    (this.ProductCounts != null &&
                    this.ProductCounts.Equals(input.ProductCounts))
                ) && 
                (
                    this.ValidationDetails == input.ValidationDetails ||
                    (this.ValidationDetails != null &&
                    this.ValidationDetails.Equals(input.ValidationDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IngestionDetails != null)
                    hashCode = hashCode * 59 + this.IngestionDetails.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ProductCounts != null)
                    hashCode = hashCode * 59 + this.ProductCounts.GetHashCode();
                if (this.ValidationDetails != null)
                    hashCode = hashCode * 59 + this.ValidationDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
