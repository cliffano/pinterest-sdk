/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdsAnalyticsCreateAsyncRequest
    /// </summary>
    [DataContract]
    public partial class AdsAnalyticsCreateAsyncRequest :  IEquatable<AdsAnalyticsCreateAsyncRequest>, IValidatableObject
    {
        /// <summary>
        /// TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
        /// </summary>
        /// <value>TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly</value>
        [DataMember(Name="granularity", EmitDefaultValue=true)]
        public Granularity Granularity { get; set; }
        /// <summary>
        /// Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
        /// </summary>
        /// <value>Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</value>
        [DataMember(Name="click_window_days", EmitDefaultValue=false)]
        public ConversionAttributionWindowDays? ClickWindowDays { get; set; }
        /// <summary>
        /// Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
        /// </summary>
        /// <value>Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.</value>
        [DataMember(Name="engagement_window_days", EmitDefaultValue=false)]
        public ConversionAttributionWindowDays? EngagementWindowDays { get; set; }
        /// <summary>
        /// Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
        /// </summary>
        /// <value>Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.</value>
        [DataMember(Name="view_window_days", EmitDefaultValue=false)]
        public ConversionAttributionWindowDays? ViewWindowDays { get; set; }
        /// <summary>
        /// The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
        /// </summary>
        /// <value>The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.</value>
        [DataMember(Name="conversion_report_time", EmitDefaultValue=false)]
        public ConversionReportTimeType? ConversionReportTime { get; set; }
        /// <summary>
        /// Level of the report
        /// </summary>
        /// <value>Level of the report</value>
        [DataMember(Name="level", EmitDefaultValue=true)]
        public MetricsReportingLevel Level { get; set; }
        /// <summary>
        /// Specification for formatting report data
        /// </summary>
        /// <value>Specification for formatting report data</value>
        [DataMember(Name="report_format", EmitDefaultValue=false)]
        public DataOutputFormat? ReportFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsAnalyticsCreateAsyncRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdsAnalyticsCreateAsyncRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdsAnalyticsCreateAsyncRequest" /> class.
        /// </summary>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD (required).</param>
        /// <param name="granularity">TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly (required).</param>
        /// <param name="clickWindowDays">Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (default to 30).</param>
        /// <param name="engagementWindowDays">Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (default to 30).</param>
        /// <param name="viewWindowDays">Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (default to 1).</param>
        /// <param name="conversionReportTime">The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (default to &quot;TIME_OF_AD_ACTION&quot;).</param>
        /// <param name="attributionTypes">List of types of attribution for the conversion report.</param>
        /// <param name="columns">Metric and entity columns (required).</param>
        /// <param name="level">Level of the report (required).</param>
        /// <param name="reportFormat">Specification for formatting report data (default to &quot;JSON&quot;).</param>
        /// <param name="campaignIds">List of campaign ids.</param>
        /// <param name="campaignStatuses">List of status values for filtering.</param>
        /// <param name="campaignObjectiveTypes">List of values for filtering.</param>
        /// <param name="adGroupIds">List of ad group ids.</param>
        /// <param name="adGroupStatuses">List of values for filtering.</param>
        /// <param name="adIds">List of ad ids.</param>
        /// <param name="adStatuses">List of values for filtering.</param>
        /// <param name="productGroupIds">List of product group ids.</param>
        /// <param name="productGroupStatuses">List of values for filtering.</param>
        /// <param name="productItemIds">List of product item ids.</param>
        /// <param name="targetingTypes">List of targeting types.</param>
        /// <param name="metricsFilters">List of metrics filters.</param>
        public AdsAnalyticsCreateAsyncRequest(string startDate = default(string), string endDate = default(string), Granularity granularity = default(Granularity), ConversionAttributionWindowDays? clickWindowDays = 30, ConversionAttributionWindowDays? engagementWindowDays = 30, ConversionAttributionWindowDays? viewWindowDays = 1, ConversionReportTimeType? conversionReportTime = "TIME_OF_AD_ACTION", List<ConversionReportAttributionType> attributionTypes = default(List<ConversionReportAttributionType>), List<ReportingColumnAsync> columns = default(List<ReportingColumnAsync>), MetricsReportingLevel level = default(MetricsReportingLevel), DataOutputFormat? reportFormat = "JSON", List<string> campaignIds = default(List<string>), List<CampaignSummaryStatus> campaignStatuses = default(List<CampaignSummaryStatus>), List<ObjectiveType> campaignObjectiveTypes = default(List<ObjectiveType>), List<string> adGroupIds = default(List<string>), List<AdGroupSummaryStatus> adGroupStatuses = default(List<AdGroupSummaryStatus>), List<string> adIds = default(List<string>), List<PinPromotionSummaryStatus> adStatuses = default(List<PinPromotionSummaryStatus>), List<string> productGroupIds = default(List<string>), List<ProductGroupSummaryStatus> productGroupStatuses = default(List<ProductGroupSummaryStatus>), List<string> productItemIds = default(List<string>), List<AdsAnalyticsTargetingType> targetingTypes = default(List<AdsAnalyticsTargetingType>), List<AdsAnalyticsMetricsFilter> metricsFilters = default(List<AdsAnalyticsMetricsFilter>))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for AdsAnalyticsCreateAsyncRequest and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }

            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for AdsAnalyticsCreateAsyncRequest and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }

            // to ensure "granularity" is required (not null)
            if (granularity == null)
            {
                throw new InvalidDataException("granularity is a required property for AdsAnalyticsCreateAsyncRequest and cannot be null");
            }
            else
            {
                this.Granularity = granularity;
            }

            // to ensure "columns" is required (not null)
            if (columns == null)
            {
                throw new InvalidDataException("columns is a required property for AdsAnalyticsCreateAsyncRequest and cannot be null");
            }
            else
            {
                this.Columns = columns;
            }

            // to ensure "level" is required (not null)
            if (level == null)
            {
                throw new InvalidDataException("level is a required property for AdsAnalyticsCreateAsyncRequest and cannot be null");
            }
            else
            {
                this.Level = level;
            }

            // use default value if no "clickWindowDays" provided
            if (clickWindowDays == null)
            {
                this.ClickWindowDays = 30;
            }
            else
            {
                this.ClickWindowDays = clickWindowDays;
            }
            // use default value if no "engagementWindowDays" provided
            if (engagementWindowDays == null)
            {
                this.EngagementWindowDays = 30;
            }
            else
            {
                this.EngagementWindowDays = engagementWindowDays;
            }
            // use default value if no "viewWindowDays" provided
            if (viewWindowDays == null)
            {
                this.ViewWindowDays = 1;
            }
            else
            {
                this.ViewWindowDays = viewWindowDays;
            }
            // use default value if no "conversionReportTime" provided
            if (conversionReportTime == null)
            {
                this.ConversionReportTime = "TIME_OF_AD_ACTION";
            }
            else
            {
                this.ConversionReportTime = conversionReportTime;
            }
            this.AttributionTypes = attributionTypes;
            // use default value if no "reportFormat" provided
            if (reportFormat == null)
            {
                this.ReportFormat = "JSON";
            }
            else
            {
                this.ReportFormat = reportFormat;
            }
            this.CampaignIds = campaignIds;
            this.CampaignStatuses = campaignStatuses;
            this.CampaignObjectiveTypes = campaignObjectiveTypes;
            this.AdGroupIds = adGroupIds;
            this.AdGroupStatuses = adGroupStatuses;
            this.AdIds = adIds;
            this.AdStatuses = adStatuses;
            this.ProductGroupIds = productGroupIds;
            this.ProductGroupStatuses = productGroupStatuses;
            this.ProductItemIds = productItemIds;
            this.TargetingTypes = targetingTypes;
            this.MetricsFilters = metricsFilters;
        }

        /// <summary>
        /// Metric report start date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report start date (UTC). Format: YYYY-MM-DD</value>
        [DataMember(Name="start_date", EmitDefaultValue=true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Metric report end date (UTC). Format: YYYY-MM-DD
        /// </summary>
        /// <value>Metric report end date (UTC). Format: YYYY-MM-DD</value>
        [DataMember(Name="end_date", EmitDefaultValue=true)]
        public string EndDate { get; set; }






        /// <summary>
        /// List of types of attribution for the conversion report
        /// </summary>
        /// <value>List of types of attribution for the conversion report</value>
        [DataMember(Name="attribution_types", EmitDefaultValue=false)]
        public List<ConversionReportAttributionType> AttributionTypes { get; set; }

        /// <summary>
        /// Metric and entity columns
        /// </summary>
        /// <value>Metric and entity columns</value>
        [DataMember(Name="columns", EmitDefaultValue=true)]
        public List<ReportingColumnAsync> Columns { get; set; }



        /// <summary>
        /// List of campaign ids
        /// </summary>
        /// <value>List of campaign ids</value>
        [DataMember(Name="campaign_ids", EmitDefaultValue=false)]
        public List<string> CampaignIds { get; set; }

        /// <summary>
        /// List of status values for filtering
        /// </summary>
        /// <value>List of status values for filtering</value>
        [DataMember(Name="campaign_statuses", EmitDefaultValue=false)]
        public List<CampaignSummaryStatus> CampaignStatuses { get; set; }

        /// <summary>
        /// List of values for filtering
        /// </summary>
        /// <value>List of values for filtering</value>
        [DataMember(Name="campaign_objective_types", EmitDefaultValue=false)]
        public List<ObjectiveType> CampaignObjectiveTypes { get; set; }

        /// <summary>
        /// List of ad group ids
        /// </summary>
        /// <value>List of ad group ids</value>
        [DataMember(Name="ad_group_ids", EmitDefaultValue=false)]
        public List<string> AdGroupIds { get; set; }

        /// <summary>
        /// List of values for filtering
        /// </summary>
        /// <value>List of values for filtering</value>
        [DataMember(Name="ad_group_statuses", EmitDefaultValue=false)]
        public List<AdGroupSummaryStatus> AdGroupStatuses { get; set; }

        /// <summary>
        /// List of ad ids
        /// </summary>
        /// <value>List of ad ids</value>
        [DataMember(Name="ad_ids", EmitDefaultValue=false)]
        public List<string> AdIds { get; set; }

        /// <summary>
        /// List of values for filtering
        /// </summary>
        /// <value>List of values for filtering</value>
        [DataMember(Name="ad_statuses", EmitDefaultValue=false)]
        public List<PinPromotionSummaryStatus> AdStatuses { get; set; }

        /// <summary>
        /// List of product group ids
        /// </summary>
        /// <value>List of product group ids</value>
        [DataMember(Name="product_group_ids", EmitDefaultValue=false)]
        public List<string> ProductGroupIds { get; set; }

        /// <summary>
        /// List of values for filtering
        /// </summary>
        /// <value>List of values for filtering</value>
        [DataMember(Name="product_group_statuses", EmitDefaultValue=false)]
        public List<ProductGroupSummaryStatus> ProductGroupStatuses { get; set; }

        /// <summary>
        /// List of product item ids
        /// </summary>
        /// <value>List of product item ids</value>
        [DataMember(Name="product_item_ids", EmitDefaultValue=false)]
        public List<string> ProductItemIds { get; set; }

        /// <summary>
        /// List of targeting types
        /// </summary>
        /// <value>List of targeting types</value>
        [DataMember(Name="targeting_types", EmitDefaultValue=false)]
        public List<AdsAnalyticsTargetingType> TargetingTypes { get; set; }

        /// <summary>
        /// List of metrics filters
        /// </summary>
        /// <value>List of metrics filters</value>
        [DataMember(Name="metrics_filters", EmitDefaultValue=false)]
        public List<AdsAnalyticsMetricsFilter> MetricsFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdsAnalyticsCreateAsyncRequest {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  ClickWindowDays: ").Append(ClickWindowDays).Append("\n");
            sb.Append("  EngagementWindowDays: ").Append(EngagementWindowDays).Append("\n");
            sb.Append("  ViewWindowDays: ").Append(ViewWindowDays).Append("\n");
            sb.Append("  ConversionReportTime: ").Append(ConversionReportTime).Append("\n");
            sb.Append("  AttributionTypes: ").Append(AttributionTypes).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ReportFormat: ").Append(ReportFormat).Append("\n");
            sb.Append("  CampaignIds: ").Append(CampaignIds).Append("\n");
            sb.Append("  CampaignStatuses: ").Append(CampaignStatuses).Append("\n");
            sb.Append("  CampaignObjectiveTypes: ").Append(CampaignObjectiveTypes).Append("\n");
            sb.Append("  AdGroupIds: ").Append(AdGroupIds).Append("\n");
            sb.Append("  AdGroupStatuses: ").Append(AdGroupStatuses).Append("\n");
            sb.Append("  AdIds: ").Append(AdIds).Append("\n");
            sb.Append("  AdStatuses: ").Append(AdStatuses).Append("\n");
            sb.Append("  ProductGroupIds: ").Append(ProductGroupIds).Append("\n");
            sb.Append("  ProductGroupStatuses: ").Append(ProductGroupStatuses).Append("\n");
            sb.Append("  ProductItemIds: ").Append(ProductItemIds).Append("\n");
            sb.Append("  TargetingTypes: ").Append(TargetingTypes).Append("\n");
            sb.Append("  MetricsFilters: ").Append(MetricsFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdsAnalyticsCreateAsyncRequest);
        }

        /// <summary>
        /// Returns true if AdsAnalyticsCreateAsyncRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AdsAnalyticsCreateAsyncRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdsAnalyticsCreateAsyncRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    (this.Granularity != null &&
                    this.Granularity.Equals(input.Granularity))
                ) && 
                (
                    this.ClickWindowDays == input.ClickWindowDays ||
                    (this.ClickWindowDays != null &&
                    this.ClickWindowDays.Equals(input.ClickWindowDays))
                ) && 
                (
                    this.EngagementWindowDays == input.EngagementWindowDays ||
                    (this.EngagementWindowDays != null &&
                    this.EngagementWindowDays.Equals(input.EngagementWindowDays))
                ) && 
                (
                    this.ViewWindowDays == input.ViewWindowDays ||
                    (this.ViewWindowDays != null &&
                    this.ViewWindowDays.Equals(input.ViewWindowDays))
                ) && 
                (
                    this.ConversionReportTime == input.ConversionReportTime ||
                    (this.ConversionReportTime != null &&
                    this.ConversionReportTime.Equals(input.ConversionReportTime))
                ) && 
                (
                    this.AttributionTypes == input.AttributionTypes ||
                    this.AttributionTypes != null &&
                    input.AttributionTypes != null &&
                    this.AttributionTypes.SequenceEqual(input.AttributionTypes)
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.ReportFormat == input.ReportFormat ||
                    (this.ReportFormat != null &&
                    this.ReportFormat.Equals(input.ReportFormat))
                ) && 
                (
                    this.CampaignIds == input.CampaignIds ||
                    this.CampaignIds != null &&
                    input.CampaignIds != null &&
                    this.CampaignIds.SequenceEqual(input.CampaignIds)
                ) && 
                (
                    this.CampaignStatuses == input.CampaignStatuses ||
                    this.CampaignStatuses != null &&
                    input.CampaignStatuses != null &&
                    this.CampaignStatuses.SequenceEqual(input.CampaignStatuses)
                ) && 
                (
                    this.CampaignObjectiveTypes == input.CampaignObjectiveTypes ||
                    this.CampaignObjectiveTypes != null &&
                    input.CampaignObjectiveTypes != null &&
                    this.CampaignObjectiveTypes.SequenceEqual(input.CampaignObjectiveTypes)
                ) && 
                (
                    this.AdGroupIds == input.AdGroupIds ||
                    this.AdGroupIds != null &&
                    input.AdGroupIds != null &&
                    this.AdGroupIds.SequenceEqual(input.AdGroupIds)
                ) && 
                (
                    this.AdGroupStatuses == input.AdGroupStatuses ||
                    this.AdGroupStatuses != null &&
                    input.AdGroupStatuses != null &&
                    this.AdGroupStatuses.SequenceEqual(input.AdGroupStatuses)
                ) && 
                (
                    this.AdIds == input.AdIds ||
                    this.AdIds != null &&
                    input.AdIds != null &&
                    this.AdIds.SequenceEqual(input.AdIds)
                ) && 
                (
                    this.AdStatuses == input.AdStatuses ||
                    this.AdStatuses != null &&
                    input.AdStatuses != null &&
                    this.AdStatuses.SequenceEqual(input.AdStatuses)
                ) && 
                (
                    this.ProductGroupIds == input.ProductGroupIds ||
                    this.ProductGroupIds != null &&
                    input.ProductGroupIds != null &&
                    this.ProductGroupIds.SequenceEqual(input.ProductGroupIds)
                ) && 
                (
                    this.ProductGroupStatuses == input.ProductGroupStatuses ||
                    this.ProductGroupStatuses != null &&
                    input.ProductGroupStatuses != null &&
                    this.ProductGroupStatuses.SequenceEqual(input.ProductGroupStatuses)
                ) && 
                (
                    this.ProductItemIds == input.ProductItemIds ||
                    this.ProductItemIds != null &&
                    input.ProductItemIds != null &&
                    this.ProductItemIds.SequenceEqual(input.ProductItemIds)
                ) && 
                (
                    this.TargetingTypes == input.TargetingTypes ||
                    this.TargetingTypes != null &&
                    input.TargetingTypes != null &&
                    this.TargetingTypes.SequenceEqual(input.TargetingTypes)
                ) && 
                (
                    this.MetricsFilters == input.MetricsFilters ||
                    this.MetricsFilters != null &&
                    input.MetricsFilters != null &&
                    this.MetricsFilters.SequenceEqual(input.MetricsFilters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Granularity != null)
                    hashCode = hashCode * 59 + this.Granularity.GetHashCode();
                if (this.ClickWindowDays != null)
                    hashCode = hashCode * 59 + this.ClickWindowDays.GetHashCode();
                if (this.EngagementWindowDays != null)
                    hashCode = hashCode * 59 + this.EngagementWindowDays.GetHashCode();
                if (this.ViewWindowDays != null)
                    hashCode = hashCode * 59 + this.ViewWindowDays.GetHashCode();
                if (this.ConversionReportTime != null)
                    hashCode = hashCode * 59 + this.ConversionReportTime.GetHashCode();
                if (this.AttributionTypes != null)
                    hashCode = hashCode * 59 + this.AttributionTypes.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.ReportFormat != null)
                    hashCode = hashCode * 59 + this.ReportFormat.GetHashCode();
                if (this.CampaignIds != null)
                    hashCode = hashCode * 59 + this.CampaignIds.GetHashCode();
                if (this.CampaignStatuses != null)
                    hashCode = hashCode * 59 + this.CampaignStatuses.GetHashCode();
                if (this.CampaignObjectiveTypes != null)
                    hashCode = hashCode * 59 + this.CampaignObjectiveTypes.GetHashCode();
                if (this.AdGroupIds != null)
                    hashCode = hashCode * 59 + this.AdGroupIds.GetHashCode();
                if (this.AdGroupStatuses != null)
                    hashCode = hashCode * 59 + this.AdGroupStatuses.GetHashCode();
                if (this.AdIds != null)
                    hashCode = hashCode * 59 + this.AdIds.GetHashCode();
                if (this.AdStatuses != null)
                    hashCode = hashCode * 59 + this.AdStatuses.GetHashCode();
                if (this.ProductGroupIds != null)
                    hashCode = hashCode * 59 + this.ProductGroupIds.GetHashCode();
                if (this.ProductGroupStatuses != null)
                    hashCode = hashCode * 59 + this.ProductGroupStatuses.GetHashCode();
                if (this.ProductItemIds != null)
                    hashCode = hashCode * 59 + this.ProductItemIds.GetHashCode();
                if (this.TargetingTypes != null)
                    hashCode = hashCode * 59 + this.TargetingTypes.GetHashCode();
                if (this.MetricsFilters != null)
                    hashCode = hashCode * 59 + this.MetricsFilters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // StartDate (string) pattern
            Regex regexStartDate = new Regex(@"^(\\d{4})-(\\d{2})-(\\d{2})$", RegexOptions.CultureInvariant);
            if (false == regexStartDate.Match(this.StartDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new [] { "StartDate" });
            }



            // EndDate (string) pattern
            Regex regexEndDate = new Regex(@"^(\\d{4})-(\\d{2})-(\\d{2})$", RegexOptions.CultureInvariant);
            if (false == regexEndDate.Match(this.EndDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new [] { "EndDate" });
            }

























            yield break;
        }
    }

}
