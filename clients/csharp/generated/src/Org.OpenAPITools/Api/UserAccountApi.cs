/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        Dictionary<string, AnalyticsMetricsResponse> UserAccountAnalytics (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string));

        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsWithHttpInfo (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string));
        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>Account</returns>
        Account UserAccountGet (string adAccountId = default(string));

        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> UserAccountGetWithHttpInfo (string adAccountId = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsAsync (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>
        /// Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, AnalyticsMetricsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, AnalyticsMetricsResponse>>> UserAccountAnalyticsWithHttpInfoAsync (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> UserAccountGetAsync (string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>
        /// Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> UserAccountGetWithHttpInfoAsync (string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserAccountApi : IUserAccountApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserAccountApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserAccountApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserAccountApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        public Dictionary<string, AnalyticsMetricsResponse> UserAccountAnalytics (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string))
        {
             ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> localVarResponse = UserAccountAnalyticsWithHttpInfo(startDate, endDate, fromClaimedContent, pinFormat, appTypes, metricTypes, splitField, adAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        public ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsWithHttpInfo (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling UserAccountApi->UserAccountAnalytics");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling UserAccountApi->UserAccountAnalytics");

            var localVarPath = "/user_account/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (fromClaimedContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_claimed_content", fromClaimedContent)); // query parameter
            if (pinFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pin_format", pinFormat)); // query parameter
            if (appTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_types", appTypes)); // query parameter
            if (metricTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "metric_types", metricTypes)); // query parameter
            if (splitField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "split_field", splitField)); // query parameter
            if (adAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ad_account_id", adAccountId)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserAccountAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, AnalyticsMetricsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, AnalyticsMetricsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, AnalyticsMetricsResponse>)));
        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary&lt;string, AnalyticsMetricsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, AnalyticsMetricsResponse>> UserAccountAnalyticsAsync (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, AnalyticsMetricsResponse>> localVarResponse = await UserAccountAnalyticsWithHttpInfoAsync(startDate, endDate, fromClaimedContent, pinFormat, appTypes, metricTypes, splitField, adAccountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user account analytics Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain. (optional, default to BOTH)</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all. (optional, default to ALL)</param>
        /// <param name="metricTypes">Metric types to get data for, default is all.  (optional)</param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)</param>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, AnalyticsMetricsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, AnalyticsMetricsResponse>>> UserAccountAnalyticsWithHttpInfoAsync (DateTime startDate, DateTime endDate, string fromClaimedContent = default(string), string pinFormat = default(string), string appTypes = default(string), List<string> metricTypes = default(List<string>), string splitField = default(string), string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling UserAccountApi->UserAccountAnalytics");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling UserAccountApi->UserAccountAnalytics");

            var localVarPath = "/user_account/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (fromClaimedContent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from_claimed_content", fromClaimedContent)); // query parameter
            if (pinFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pin_format", pinFormat)); // query parameter
            if (appTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "app_types", appTypes)); // query parameter
            if (metricTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "metric_types", metricTypes)); // query parameter
            if (splitField != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "split_field", splitField)); // query parameter
            if (adAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ad_account_id", adAccountId)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserAccountAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, AnalyticsMetricsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, AnalyticsMetricsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, AnalyticsMetricsResponse>)));
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>Account</returns>
        public Account UserAccountGet (string adAccountId = default(string))
        {
             ApiResponse<Account> localVarResponse = UserAccountGetWithHttpInfo(adAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse<Account> UserAccountGetWithHttpInfo (string adAccountId = default(string))
        {

            var localVarPath = "/user_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (adAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ad_account_id", adAccountId)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> UserAccountGetAsync (string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Account> localVarResponse = await UserAccountGetWithHttpInfoAsync(adAccountId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user account Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adAccountId">Unique identifier of an ad account. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> UserAccountGetWithHttpInfoAsync (string adAccountId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/user_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (adAccountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ad_account_id", adAccountId)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserAccountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

    }
}
