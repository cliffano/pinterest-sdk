/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBoardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create board section
        /// </summary>
        /// <remarks>
        /// Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <returns>BoardSection</returns>
        BoardSection BoardSectionsCreate (string boardId, BoardSection boardSection);

        /// <summary>
        /// Create board section
        /// </summary>
        /// <remarks>
        /// Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <returns>ApiResponse of BoardSection</returns>
        ApiResponse<BoardSection> BoardSectionsCreateWithHttpInfo (string boardId, BoardSection boardSection);
        /// <summary>
        /// Delete board section
        /// </summary>
        /// <remarks>
        /// Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <returns></returns>
        void BoardSectionsDelete (string boardId, string sectionId);

        /// <summary>
        /// Delete board section
        /// </summary>
        /// <remarks>
        /// Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BoardSectionsDeleteWithHttpInfo (string boardId, string sectionId);
        /// <summary>
        /// List board sections
        /// </summary>
        /// <remarks>
        /// Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        Paginated BoardSectionsList (string boardId, string bookmark = default(string), int? pageSize = default(int?));

        /// <summary>
        /// List board sections
        /// </summary>
        /// <remarks>
        /// Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> BoardSectionsListWithHttpInfo (string boardId, string bookmark = default(string), int? pageSize = default(int?));
        /// <summary>
        /// List Pins on board section
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        Paginated BoardSectionsListPins (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?));

        /// <summary>
        /// List Pins on board section
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> BoardSectionsListPinsWithHttpInfo (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?));
        /// <summary>
        /// Update board section
        /// </summary>
        /// <remarks>
        /// Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <returns>BoardSection</returns>
        BoardSection BoardSectionsUpdate (string boardId, string sectionId, BoardSection boardSection);

        /// <summary>
        /// Update board section
        /// </summary>
        /// <remarks>
        /// Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <returns>ApiResponse of BoardSection</returns>
        ApiResponse<BoardSection> BoardSectionsUpdateWithHttpInfo (string boardId, string sectionId, BoardSection boardSection);
        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <returns>Board</returns>
        Board BoardsCreate (Board board);

        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <returns>ApiResponse of Board</returns>
        ApiResponse<Board> BoardsCreateWithHttpInfo (Board board);
        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns></returns>
        void BoardsDelete (string boardId);

        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BoardsDeleteWithHttpInfo (string boardId);
        /// <summary>
        /// Get board
        /// </summary>
        /// <remarks>
        /// Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns>Board</returns>
        Board BoardsGet (string boardId);

        /// <summary>
        /// Get board
        /// </summary>
        /// <remarks>
        /// Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns>ApiResponse of Board</returns>
        ApiResponse<Board> BoardsGetWithHttpInfo (string boardId);
        /// <summary>
        /// List boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <returns>Paginated</returns>
        Paginated BoardsList (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string));

        /// <summary>
        /// List boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> BoardsListWithHttpInfo (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string));
        /// <summary>
        /// List Pins on board
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        Paginated BoardsListPins (string boardId, string bookmark = default(string), int? pageSize = default(int?));

        /// <summary>
        /// List Pins on board
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> BoardsListPinsWithHttpInfo (string boardId, string bookmark = default(string), int? pageSize = default(int?));
        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Update a board owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <returns>Board</returns>
        Board BoardsUpdate (string boardId, BoardUpdate boardUpdate);

        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Update a board owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <returns>ApiResponse of Board</returns>
        ApiResponse<Board> BoardsUpdateWithHttpInfo (string boardId, BoardUpdate boardUpdate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create board section
        /// </summary>
        /// <remarks>
        /// Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BoardSection</returns>
        System.Threading.Tasks.Task<BoardSection> BoardSectionsCreateAsync (string boardId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create board section
        /// </summary>
        /// <remarks>
        /// Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BoardSection)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardSection>> BoardSectionsCreateWithHttpInfoAsync (string boardId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete board section
        /// </summary>
        /// <remarks>
        /// Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BoardSectionsDeleteAsync (string boardId, string sectionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete board section
        /// </summary>
        /// <remarks>
        /// Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BoardSectionsDeleteWithHttpInfoAsync (string boardId, string sectionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List board sections
        /// </summary>
        /// <remarks>
        /// Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> BoardSectionsListAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List board sections
        /// </summary>
        /// <remarks>
        /// Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardSectionsListWithHttpInfoAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Pins on board section
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> BoardSectionsListPinsAsync (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Pins on board section
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardSectionsListPinsWithHttpInfoAsync (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update board section
        /// </summary>
        /// <remarks>
        /// Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BoardSection</returns>
        System.Threading.Tasks.Task<BoardSection> BoardSectionsUpdateAsync (string boardId, string sectionId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update board section
        /// </summary>
        /// <remarks>
        /// Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BoardSection)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoardSection>> BoardSectionsUpdateWithHttpInfoAsync (string boardId, string sectionId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Board</returns>
        System.Threading.Tasks.Task<Board> BoardsCreateAsync (Board board, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create board
        /// </summary>
        /// <remarks>
        /// Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Board)</returns>
        System.Threading.Tasks.Task<ApiResponse<Board>> BoardsCreateWithHttpInfoAsync (Board board, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BoardsDeleteAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete board
        /// </summary>
        /// <remarks>
        /// Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BoardsDeleteWithHttpInfoAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get board
        /// </summary>
        /// <remarks>
        /// Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Board</returns>
        System.Threading.Tasks.Task<Board> BoardsGetAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get board
        /// </summary>
        /// <remarks>
        /// Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Board)</returns>
        System.Threading.Tasks.Task<ApiResponse<Board>> BoardsGetWithHttpInfoAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> BoardsListAsync (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List boards
        /// </summary>
        /// <remarks>
        /// Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardsListWithHttpInfoAsync (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Pins on board
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> BoardsListPinsAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Pins on board
        /// </summary>
        /// <remarks>
        /// Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardsListPinsWithHttpInfoAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Update a board owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Board</returns>
        System.Threading.Tasks.Task<Board> BoardsUpdateAsync (string boardId, BoardUpdate boardUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update board
        /// </summary>
        /// <remarks>
        /// Update a board owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Board)</returns>
        System.Threading.Tasks.Task<ApiResponse<Board>> BoardsUpdateWithHttpInfoAsync (string boardId, BoardUpdate boardUpdate, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BoardsApi : IBoardsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BoardsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public BoardsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BoardsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create board section Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <returns>BoardSection</returns>
        public BoardSection BoardSectionsCreate (string boardId, BoardSection boardSection)
        {
             ApiResponse<BoardSection> localVarResponse = BoardSectionsCreateWithHttpInfo(boardId, boardSection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create board section Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <returns>ApiResponse of BoardSection</returns>
        public ApiResponse<BoardSection> BoardSectionsCreateWithHttpInfo (string boardId, BoardSection boardSection)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsCreate");
            // verify the required parameter 'boardSection' is set
            if (boardSection == null)
                throw new ApiException(400, "Missing required parameter 'boardSection' when calling BoardsApi->BoardSectionsCreate");

            var localVarPath = "/boards/{board_id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardSection != null && boardSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(boardSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = boardSection; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardSection)));
        }

        /// <summary>
        /// Create board section Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BoardSection</returns>
        public async System.Threading.Tasks.Task<BoardSection> BoardSectionsCreateAsync (string boardId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BoardSection> localVarResponse = await BoardSectionsCreateWithHttpInfoAsync(boardId, boardSection, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create board section Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardSection">Create a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BoardSection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardSection>> BoardSectionsCreateWithHttpInfoAsync (string boardId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsCreate");
            // verify the required parameter 'boardSection' is set
            if (boardSection == null)
                throw new ApiException(400, "Missing required parameter 'boardSection' when calling BoardsApi->BoardSectionsCreate");

            var localVarPath = "/boards/{board_id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardSection != null && boardSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(boardSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = boardSection; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardSection)));
        }

        /// <summary>
        /// Delete board section Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <returns></returns>
        public void BoardSectionsDelete (string boardId, string sectionId)
        {
             BoardSectionsDeleteWithHttpInfo(boardId, sectionId);
        }

        /// <summary>
        /// Delete board section Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BoardSectionsDeleteWithHttpInfo (string boardId, string sectionId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsDelete");
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling BoardsApi->BoardSectionsDelete");

            var localVarPath = "/boards/{board_id}/sections/{section_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete board section Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BoardSectionsDeleteAsync (string boardId, string sectionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await BoardSectionsDeleteWithHttpInfoAsync(boardId, sectionId, cancellationToken);

        }

        /// <summary>
        /// Delete board section Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BoardSectionsDeleteWithHttpInfoAsync (string boardId, string sectionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsDelete");
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling BoardsApi->BoardSectionsDelete");

            var localVarPath = "/boards/{board_id}/sections/{section_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List board sections Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        public Paginated BoardSectionsList (string boardId, string bookmark = default(string), int? pageSize = default(int?))
        {
             ApiResponse<Paginated> localVarResponse = BoardSectionsListWithHttpInfo(boardId, bookmark, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List board sections Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> BoardSectionsListWithHttpInfo (string boardId, string bookmark = default(string), int? pageSize = default(int?))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsList");

            var localVarPath = "/boards/{board_id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List board sections Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> BoardSectionsListAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await BoardSectionsListWithHttpInfoAsync(boardId, bookmark, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List board sections Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardSectionsListWithHttpInfoAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsList");

            var localVarPath = "/boards/{board_id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List Pins on board section Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        public Paginated BoardSectionsListPins (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?))
        {
             ApiResponse<Paginated> localVarResponse = BoardSectionsListPinsWithHttpInfo(boardId, sectionId, bookmark, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Pins on board section Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> BoardSectionsListPinsWithHttpInfo (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsListPins");
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling BoardsApi->BoardSectionsListPins");

            var localVarPath = "/boards/{board_id}/sections/{section_id}/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsListPins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List Pins on board section Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> BoardSectionsListPinsAsync (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await BoardSectionsListPinsWithHttpInfoAsync(boardId, sectionId, bookmark, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Pins on board section Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardSectionsListPinsWithHttpInfoAsync (string boardId, string sectionId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsListPins");
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling BoardsApi->BoardSectionsListPins");

            var localVarPath = "/boards/{board_id}/sections/{section_id}/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsListPins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// Update board section Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <returns>BoardSection</returns>
        public BoardSection BoardSectionsUpdate (string boardId, string sectionId, BoardSection boardSection)
        {
             ApiResponse<BoardSection> localVarResponse = BoardSectionsUpdateWithHttpInfo(boardId, sectionId, boardSection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update board section Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <returns>ApiResponse of BoardSection</returns>
        public ApiResponse<BoardSection> BoardSectionsUpdateWithHttpInfo (string boardId, string sectionId, BoardSection boardSection)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsUpdate");
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling BoardsApi->BoardSectionsUpdate");
            // verify the required parameter 'boardSection' is set
            if (boardSection == null)
                throw new ApiException(400, "Missing required parameter 'boardSection' when calling BoardsApi->BoardSectionsUpdate");

            var localVarPath = "/boards/{board_id}/sections/{section_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter
            if (boardSection != null && boardSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(boardSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = boardSection; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardSection)));
        }

        /// <summary>
        /// Update board section Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BoardSection</returns>
        public async System.Threading.Tasks.Task<BoardSection> BoardSectionsUpdateAsync (string boardId, string sectionId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BoardSection> localVarResponse = await BoardSectionsUpdateWithHttpInfoAsync(boardId, sectionId, boardSection, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update board section Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="sectionId">Unique identifier of a board section.</param>
        /// <param name="boardSection">Update a board section.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BoardSection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoardSection>> BoardSectionsUpdateWithHttpInfoAsync (string boardId, string sectionId, BoardSection boardSection, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardSectionsUpdate");
            // verify the required parameter 'sectionId' is set
            if (sectionId == null)
                throw new ApiException(400, "Missing required parameter 'sectionId' when calling BoardsApi->BoardSectionsUpdate");
            // verify the required parameter 'boardSection' is set
            if (boardSection == null)
                throw new ApiException(400, "Missing required parameter 'boardSection' when calling BoardsApi->BoardSectionsUpdate");

            var localVarPath = "/boards/{board_id}/sections/{section_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (sectionId != null) localVarPathParams.Add("section_id", this.Configuration.ApiClient.ParameterToString(sectionId)); // path parameter
            if (boardSection != null && boardSection.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(boardSection); // http body (model) parameter
            }
            else
            {
                localVarPostBody = boardSection; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardSectionsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoardSection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BoardSection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoardSection)));
        }

        /// <summary>
        /// Create board Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <returns>Board</returns>
        public Board BoardsCreate (Board board)
        {
             ApiResponse<Board> localVarResponse = BoardsCreateWithHttpInfo(board);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create board Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <returns>ApiResponse of Board</returns>
        public ApiResponse<Board> BoardsCreateWithHttpInfo (Board board)
        {
            // verify the required parameter 'board' is set
            if (board == null)
                throw new ApiException(400, "Missing required parameter 'board' when calling BoardsApi->BoardsCreate");

            var localVarPath = "/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (board != null && board.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(board); // http body (model) parameter
            }
            else
            {
                localVarPostBody = board; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Board>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Board) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Board)));
        }

        /// <summary>
        /// Create board Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Board</returns>
        public async System.Threading.Tasks.Task<Board> BoardsCreateAsync (Board board, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Board> localVarResponse = await BoardsCreateWithHttpInfoAsync(board, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create board Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="board">Create a board using a single board json object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Board)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Board>> BoardsCreateWithHttpInfoAsync (Board board, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'board' is set
            if (board == null)
                throw new ApiException(400, "Missing required parameter 'board' when calling BoardsApi->BoardsCreate");

            var localVarPath = "/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (board != null && board.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(board); // http body (model) parameter
            }
            else
            {
                localVarPostBody = board; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Board>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Board) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Board)));
        }

        /// <summary>
        /// Delete board Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns></returns>
        public void BoardsDelete (string boardId)
        {
             BoardsDeleteWithHttpInfo(boardId);
        }

        /// <summary>
        /// Delete board Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BoardsDeleteWithHttpInfo (string boardId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsDelete");

            var localVarPath = "/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete board Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BoardsDeleteAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await BoardsDeleteWithHttpInfoAsync(boardId, cancellationToken);

        }

        /// <summary>
        /// Delete board Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BoardsDeleteWithHttpInfoAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsDelete");

            var localVarPath = "/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get board Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns>Board</returns>
        public Board BoardsGet (string boardId)
        {
             ApiResponse<Board> localVarResponse = BoardsGetWithHttpInfo(boardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get board Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <returns>ApiResponse of Board</returns>
        public ApiResponse<Board> BoardsGetWithHttpInfo (string boardId)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsGet");

            var localVarPath = "/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Board>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Board) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Board)));
        }

        /// <summary>
        /// Get board Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Board</returns>
        public async System.Threading.Tasks.Task<Board> BoardsGetAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Board> localVarResponse = await BoardsGetWithHttpInfoAsync(boardId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get board Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Board)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Board>> BoardsGetWithHttpInfoAsync (string boardId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsGet");

            var localVarPath = "/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Board>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Board) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Board)));
        }

        /// <summary>
        /// List boards Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <returns>Paginated</returns>
        public Paginated BoardsList (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string))
        {
             ApiResponse<Paginated> localVarResponse = BoardsListWithHttpInfo(bookmark, pageSize, privacy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List boards Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> BoardsListWithHttpInfo (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string))
        {

            var localVarPath = "/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (privacy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "privacy", privacy)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List boards Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> BoardsListAsync (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await BoardsListWithHttpInfoAsync(bookmark, pageSize, privacy, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List boards Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="privacy">Privacy setting for a board. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardsListWithHttpInfoAsync (string bookmark = default(string), int? pageSize = default(int?), string privacy = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/boards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (privacy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "privacy", privacy)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List Pins on board Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        public Paginated BoardsListPins (string boardId, string bookmark = default(string), int? pageSize = default(int?))
        {
             ApiResponse<Paginated> localVarResponse = BoardsListPinsWithHttpInfo(boardId, bookmark, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Pins on board Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> BoardsListPinsWithHttpInfo (string boardId, string bookmark = default(string), int? pageSize = default(int?))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsListPins");

            var localVarPath = "/boards/{board_id}/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsListPins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List Pins on board Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> BoardsListPinsAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await BoardsListPinsWithHttpInfoAsync(boardId, bookmark, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Pins on board Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> BoardsListPinsWithHttpInfoAsync (string boardId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsListPins");

            var localVarPath = "/boards/{board_id}/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsListPins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// Update board Update a board owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <returns>Board</returns>
        public Board BoardsUpdate (string boardId, BoardUpdate boardUpdate)
        {
             ApiResponse<Board> localVarResponse = BoardsUpdateWithHttpInfo(boardId, boardUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update board Update a board owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <returns>ApiResponse of Board</returns>
        public ApiResponse<Board> BoardsUpdateWithHttpInfo (string boardId, BoardUpdate boardUpdate)
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsUpdate");
            // verify the required parameter 'boardUpdate' is set
            if (boardUpdate == null)
                throw new ApiException(400, "Missing required parameter 'boardUpdate' when calling BoardsApi->BoardsUpdate");

            var localVarPath = "/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardUpdate != null && boardUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(boardUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = boardUpdate; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Board>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Board) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Board)));
        }

        /// <summary>
        /// Update board Update a board owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Board</returns>
        public async System.Threading.Tasks.Task<Board> BoardsUpdateAsync (string boardId, BoardUpdate boardUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Board> localVarResponse = await BoardsUpdateWithHttpInfoAsync(boardId, boardUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update board Update a board owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boardId">Unique identifier of a board.</param>
        /// <param name="boardUpdate">Update a board.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Board)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Board>> BoardsUpdateWithHttpInfoAsync (string boardId, BoardUpdate boardUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'boardId' is set
            if (boardId == null)
                throw new ApiException(400, "Missing required parameter 'boardId' when calling BoardsApi->BoardsUpdate");
            // verify the required parameter 'boardUpdate' is set
            if (boardUpdate == null)
                throw new ApiException(400, "Missing required parameter 'boardUpdate' when calling BoardsApi->BoardsUpdate");

            var localVarPath = "/boards/{board_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boardId != null) localVarPathParams.Add("board_id", this.Configuration.ApiClient.ParameterToString(boardId)); // path parameter
            if (boardUpdate != null && boardUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(boardUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = boardUpdate; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BoardsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Board>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Board) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Board)));
        }

    }
}
