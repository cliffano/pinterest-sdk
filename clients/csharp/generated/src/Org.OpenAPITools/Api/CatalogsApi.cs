/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <returns>Object</returns>
        Object CatalogsProductGroupsCreate (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest);

        /// <summary>
        /// Create product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CatalogsProductGroupsCreateWithHttpInfo (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest);
        /// <summary>
        /// Delete product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <returns></returns>
        void CatalogsProductGroupsDelete (string productGroupId);

        /// <summary>
        /// Delete product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CatalogsProductGroupsDeleteWithHttpInfo (string productGroupId);
        /// <summary>
        /// Get product groups list
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        Paginated CatalogsProductGroupsList (string feedId, string bookmark = default(string), int? pageSize = default(int?));

        /// <summary>
        /// Get product groups list
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> CatalogsProductGroupsListWithHttpInfo (string feedId, string bookmark = default(string), int? pageSize = default(int?));
        /// <summary>
        /// Update product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <returns>CatalogsProductGroup</returns>
        CatalogsProductGroup CatalogsProductGroupsUpdate (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest);

        /// <summary>
        /// Update product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <returns>ApiResponse of CatalogsProductGroup</returns>
        ApiResponse<CatalogsProductGroup> CatalogsProductGroupsUpdateWithHttpInfo (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest);
        /// <summary>
        /// List processing results for a given feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        Paginated FeedProcessingResultsList (string feedId, string bookmark = default(string), int? pageSize = default(int?));

        /// <summary>
        /// List processing results for a given feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> FeedProcessingResultsListWithHttpInfo (string feedId, string bookmark = default(string), int? pageSize = default(int?));
        /// <summary>
        /// Create feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <returns>CatalogsFeed</returns>
        CatalogsFeed FeedsCreate (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest);

        /// <summary>
        /// Create feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <returns>ApiResponse of CatalogsFeed</returns>
        ApiResponse<CatalogsFeed> FeedsCreateWithHttpInfo (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest);
        /// <summary>
        /// Delete feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns></returns>
        void FeedsDelete (string feedId);

        /// <summary>
        /// Delete feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FeedsDeleteWithHttpInfo (string feedId);
        /// <summary>
        /// Get feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns>CatalogsFeed</returns>
        CatalogsFeed FeedsGet (string feedId);

        /// <summary>
        /// Get feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns>ApiResponse of CatalogsFeed</returns>
        ApiResponse<CatalogsFeed> FeedsGetWithHttpInfo (string feedId);
        /// <summary>
        /// List feeds
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        Paginated FeedsList (string bookmark = default(string), int? pageSize = default(int?));

        /// <summary>
        /// List feeds
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        ApiResponse<Paginated> FeedsListWithHttpInfo (string bookmark = default(string), int? pageSize = default(int?));
        /// <summary>
        /// Update feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <returns>CatalogsFeed</returns>
        CatalogsFeed FeedsUpdate (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest);

        /// <summary>
        /// Update feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <returns>ApiResponse of CatalogsFeed</returns>
        ApiResponse<CatalogsFeed> FeedsUpdateWithHttpInfo (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest);
        /// <summary>
        /// Get catalogs items batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <returns>CatalogsItemsBatch</returns>
        CatalogsItemsBatch ItemsBatchGet (string batchId);

        /// <summary>
        /// Get catalogs items batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <returns>ApiResponse of CatalogsItemsBatch</returns>
        ApiResponse<CatalogsItemsBatch> ItemsBatchGetWithHttpInfo (string batchId);
        /// <summary>
        /// Perform an operation on an item batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <returns>CatalogsItemsBatch</returns>
        CatalogsItemsBatch ItemsBatchPost (CatalogsItemsBatchRequest catalogsItemsBatchRequest);

        /// <summary>
        /// Perform an operation on an item batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <returns>ApiResponse of CatalogsItemsBatch</returns>
        ApiResponse<CatalogsItemsBatch> ItemsBatchPostWithHttpInfo (CatalogsItemsBatchRequest catalogsItemsBatchRequest);
        /// <summary>
        /// Get catalogs items
        /// </summary>
        /// <remarks>
        /// Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <returns>CatalogsItems</returns>
        CatalogsItems ItemsGet (string country, List<string> itemIds, string language);

        /// <summary>
        /// Get catalogs items
        /// </summary>
        /// <remarks>
        /// Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <returns>ApiResponse of CatalogsItems</returns>
        ApiResponse<CatalogsItems> ItemsGetWithHttpInfo (string country, List<string> itemIds, string language);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CatalogsProductGroupsCreateAsync (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CatalogsProductGroupsCreateWithHttpInfoAsync (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CatalogsProductGroupsDeleteAsync (string productGroupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CatalogsProductGroupsDeleteWithHttpInfoAsync (string productGroupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get product groups list
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> CatalogsProductGroupsListAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get product groups list
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> CatalogsProductGroupsListWithHttpInfoAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsProductGroup</returns>
        System.Threading.Tasks.Task<CatalogsProductGroup> CatalogsProductGroupsUpdateAsync (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update product group
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsProductGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsProductGroup>> CatalogsProductGroupsUpdateWithHttpInfoAsync (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List processing results for a given feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> FeedProcessingResultsListAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List processing results for a given feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> FeedProcessingResultsListWithHttpInfoAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsFeed</returns>
        System.Threading.Tasks.Task<CatalogsFeed> FeedsCreateAsync (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsFeed)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsFeed>> FeedsCreateWithHttpInfoAsync (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FeedsDeleteAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FeedsDeleteWithHttpInfoAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsFeed</returns>
        System.Threading.Tasks.Task<CatalogsFeed> FeedsGetAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsFeed)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsFeed>> FeedsGetWithHttpInfoAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List feeds
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        System.Threading.Tasks.Task<Paginated> FeedsListAsync (string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List feeds
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<Paginated>> FeedsListWithHttpInfoAsync (string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsFeed</returns>
        System.Threading.Tasks.Task<CatalogsFeed> FeedsUpdateAsync (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update feed
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsFeed)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsFeed>> FeedsUpdateWithHttpInfoAsync (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get catalogs items batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsItemsBatch</returns>
        System.Threading.Tasks.Task<CatalogsItemsBatch> ItemsBatchGetAsync (string batchId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get catalogs items batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsItemsBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsItemsBatch>> ItemsBatchGetWithHttpInfoAsync (string batchId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Perform an operation on an item batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsItemsBatch</returns>
        System.Threading.Tasks.Task<CatalogsItemsBatch> ItemsBatchPostAsync (CatalogsItemsBatchRequest catalogsItemsBatchRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Perform an operation on an item batch
        /// </summary>
        /// <remarks>
        /// &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsItemsBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsItemsBatch>> ItemsBatchPostWithHttpInfoAsync (CatalogsItemsBatchRequest catalogsItemsBatchRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get catalogs items
        /// </summary>
        /// <remarks>
        /// Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsItems</returns>
        System.Threading.Tasks.Task<CatalogsItems> ItemsGetAsync (string country, List<string> itemIds, string language, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get catalogs items
        /// </summary>
        /// <remarks>
        /// Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogsItems>> ItemsGetWithHttpInfoAsync (string country, List<string> itemIds, string language, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogsApi : ICatalogsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CatalogsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <returns>Object</returns>
        public Object CatalogsProductGroupsCreate (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest)
        {
             ApiResponse<Object> localVarResponse = CatalogsProductGroupsCreateWithHttpInfo(catalogsProductGroupCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CatalogsProductGroupsCreateWithHttpInfo (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest)
        {
            // verify the required parameter 'catalogsProductGroupCreateRequest' is set
            if (catalogsProductGroupCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsProductGroupCreateRequest' when calling CatalogsApi->CatalogsProductGroupsCreate");

            var localVarPath = "/catalogs/product_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogsProductGroupCreateRequest != null && catalogsProductGroupCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsProductGroupCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsProductGroupCreateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CatalogsProductGroupsCreateAsync (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CatalogsProductGroupsCreateWithHttpInfoAsync(catalogsProductGroupCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CatalogsProductGroupsCreateWithHttpInfoAsync (CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'catalogsProductGroupCreateRequest' is set
            if (catalogsProductGroupCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsProductGroupCreateRequest' when calling CatalogsApi->CatalogsProductGroupsCreate");

            var localVarPath = "/catalogs/product_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogsProductGroupCreateRequest != null && catalogsProductGroupCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsProductGroupCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsProductGroupCreateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <returns></returns>
        public void CatalogsProductGroupsDelete (string productGroupId)
        {
             CatalogsProductGroupsDeleteWithHttpInfo(productGroupId);
        }

        /// <summary>
        /// Delete product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CatalogsProductGroupsDeleteWithHttpInfo (string productGroupId)
        {
            // verify the required parameter 'productGroupId' is set
            if (productGroupId == null)
                throw new ApiException(400, "Missing required parameter 'productGroupId' when calling CatalogsApi->CatalogsProductGroupsDelete");

            var localVarPath = "/catalogs/product_groups/{product_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productGroupId != null) localVarPathParams.Add("product_group_id", this.Configuration.ApiClient.ParameterToString(productGroupId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CatalogsProductGroupsDeleteAsync (string productGroupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await CatalogsProductGroupsDeleteWithHttpInfoAsync(productGroupId, cancellationToken);

        }

        /// <summary>
        /// Delete product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CatalogsProductGroupsDeleteWithHttpInfoAsync (string productGroupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'productGroupId' is set
            if (productGroupId == null)
                throw new ApiException(400, "Missing required parameter 'productGroupId' when calling CatalogsApi->CatalogsProductGroupsDelete");

            var localVarPath = "/catalogs/product_groups/{product_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productGroupId != null) localVarPathParams.Add("product_group_id", this.Configuration.ApiClient.ParameterToString(productGroupId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get product groups list &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        public Paginated CatalogsProductGroupsList (string feedId, string bookmark = default(string), int? pageSize = default(int?))
        {
             ApiResponse<Paginated> localVarResponse = CatalogsProductGroupsListWithHttpInfo(feedId, bookmark, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get product groups list &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> CatalogsProductGroupsListWithHttpInfo (string feedId, string bookmark = default(string), int? pageSize = default(int?))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->CatalogsProductGroupsList");

            var localVarPath = "/catalogs/product_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "feed_id", feedId)); // query parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// Get product groups list &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> CatalogsProductGroupsListAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await CatalogsProductGroupsListWithHttpInfoAsync(feedId, bookmark, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get product groups list &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> CatalogsProductGroupsListWithHttpInfoAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->CatalogsProductGroupsList");

            var localVarPath = "/catalogs/product_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "feed_id", feedId)); // query parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// Update product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <returns>CatalogsProductGroup</returns>
        public CatalogsProductGroup CatalogsProductGroupsUpdate (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest)
        {
             ApiResponse<CatalogsProductGroup> localVarResponse = CatalogsProductGroupsUpdateWithHttpInfo(productGroupId, catalogsProductGroupUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <returns>ApiResponse of CatalogsProductGroup</returns>
        public ApiResponse<CatalogsProductGroup> CatalogsProductGroupsUpdateWithHttpInfo (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest)
        {
            // verify the required parameter 'productGroupId' is set
            if (productGroupId == null)
                throw new ApiException(400, "Missing required parameter 'productGroupId' when calling CatalogsApi->CatalogsProductGroupsUpdate");
            // verify the required parameter 'catalogsProductGroupUpdateRequest' is set
            if (catalogsProductGroupUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsProductGroupUpdateRequest' when calling CatalogsApi->CatalogsProductGroupsUpdate");

            var localVarPath = "/catalogs/product_groups/{product_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productGroupId != null) localVarPathParams.Add("product_group_id", this.Configuration.ApiClient.ParameterToString(productGroupId)); // path parameter
            if (catalogsProductGroupUpdateRequest != null && catalogsProductGroupUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsProductGroupUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsProductGroupUpdateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsProductGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsProductGroup)));
        }

        /// <summary>
        /// Update product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsProductGroup</returns>
        public async System.Threading.Tasks.Task<CatalogsProductGroup> CatalogsProductGroupsUpdateAsync (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsProductGroup> localVarResponse = await CatalogsProductGroupsUpdateWithHttpInfoAsync(productGroupId, catalogsProductGroupUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update product group &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsProductGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsProductGroup>> CatalogsProductGroupsUpdateWithHttpInfoAsync (string productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'productGroupId' is set
            if (productGroupId == null)
                throw new ApiException(400, "Missing required parameter 'productGroupId' when calling CatalogsApi->CatalogsProductGroupsUpdate");
            // verify the required parameter 'catalogsProductGroupUpdateRequest' is set
            if (catalogsProductGroupUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsProductGroupUpdateRequest' when calling CatalogsApi->CatalogsProductGroupsUpdate");

            var localVarPath = "/catalogs/product_groups/{product_group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productGroupId != null) localVarPathParams.Add("product_group_id", this.Configuration.ApiClient.ParameterToString(productGroupId)); // path parameter
            if (catalogsProductGroupUpdateRequest != null && catalogsProductGroupUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsProductGroupUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsProductGroupUpdateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsProductGroupsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsProductGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsProductGroup)));
        }

        /// <summary>
        /// List processing results for a given feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        public Paginated FeedProcessingResultsList (string feedId, string bookmark = default(string), int? pageSize = default(int?))
        {
             ApiResponse<Paginated> localVarResponse = FeedProcessingResultsListWithHttpInfo(feedId, bookmark, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List processing results for a given feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> FeedProcessingResultsListWithHttpInfo (string feedId, string bookmark = default(string), int? pageSize = default(int?))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedProcessingResultsList");

            var localVarPath = "/catalogs/feeds/{feed_id}/processing_results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedProcessingResultsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List processing results for a given feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> FeedProcessingResultsListAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await FeedProcessingResultsListWithHttpInfoAsync(feedId, bookmark, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List processing results for a given feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> FeedProcessingResultsListWithHttpInfoAsync (string feedId, string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedProcessingResultsList");

            var localVarPath = "/catalogs/feeds/{feed_id}/processing_results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter
            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedProcessingResultsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// Create feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <returns>CatalogsFeed</returns>
        public CatalogsFeed FeedsCreate (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest)
        {
             ApiResponse<CatalogsFeed> localVarResponse = FeedsCreateWithHttpInfo(catalogsFeedsCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <returns>ApiResponse of CatalogsFeed</returns>
        public ApiResponse<CatalogsFeed> FeedsCreateWithHttpInfo (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest)
        {
            // verify the required parameter 'catalogsFeedsCreateRequest' is set
            if (catalogsFeedsCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsFeedsCreateRequest' when calling CatalogsApi->FeedsCreate");

            var localVarPath = "/catalogs/feeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogsFeedsCreateRequest != null && catalogsFeedsCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsFeedsCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsFeedsCreateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsFeed>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsFeed) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsFeed)));
        }

        /// <summary>
        /// Create feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsFeed</returns>
        public async System.Threading.Tasks.Task<CatalogsFeed> FeedsCreateAsync (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsFeed> localVarResponse = await FeedsCreateWithHttpInfoAsync(catalogsFeedsCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsFeed)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsFeed>> FeedsCreateWithHttpInfoAsync (CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'catalogsFeedsCreateRequest' is set
            if (catalogsFeedsCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsFeedsCreateRequest' when calling CatalogsApi->FeedsCreate");

            var localVarPath = "/catalogs/feeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogsFeedsCreateRequest != null && catalogsFeedsCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsFeedsCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsFeedsCreateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsFeed>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsFeed) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsFeed)));
        }

        /// <summary>
        /// Delete feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns></returns>
        public void FeedsDelete (string feedId)
        {
             FeedsDeleteWithHttpInfo(feedId);
        }

        /// <summary>
        /// Delete feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FeedsDeleteWithHttpInfo (string feedId)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedsDelete");

            var localVarPath = "/catalogs/feeds/{feed_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FeedsDeleteAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await FeedsDeleteWithHttpInfoAsync(feedId, cancellationToken);

        }

        /// <summary>
        /// Delete feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FeedsDeleteWithHttpInfoAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedsDelete");

            var localVarPath = "/catalogs/feeds/{feed_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns>CatalogsFeed</returns>
        public CatalogsFeed FeedsGet (string feedId)
        {
             ApiResponse<CatalogsFeed> localVarResponse = FeedsGetWithHttpInfo(feedId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <returns>ApiResponse of CatalogsFeed</returns>
        public ApiResponse<CatalogsFeed> FeedsGetWithHttpInfo (string feedId)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedsGet");

            var localVarPath = "/catalogs/feeds/{feed_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsFeed>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsFeed) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsFeed)));
        }

        /// <summary>
        /// Get feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsFeed</returns>
        public async System.Threading.Tasks.Task<CatalogsFeed> FeedsGetAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsFeed> localVarResponse = await FeedsGetWithHttpInfoAsync(feedId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsFeed)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsFeed>> FeedsGetWithHttpInfoAsync (string feedId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedsGet");

            var localVarPath = "/catalogs/feeds/{feed_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsFeed>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsFeed) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsFeed)));
        }

        /// <summary>
        /// List feeds &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>Paginated</returns>
        public Paginated FeedsList (string bookmark = default(string), int? pageSize = default(int?))
        {
             ApiResponse<Paginated> localVarResponse = FeedsListWithHttpInfo(bookmark, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List feeds &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <returns>ApiResponse of Paginated</returns>
        public ApiResponse<Paginated> FeedsListWithHttpInfo (string bookmark = default(string), int? pageSize = default(int?))
        {

            var localVarPath = "/catalogs/feeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// List feeds &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Paginated</returns>
        public async System.Threading.Tasks.Task<Paginated> FeedsListAsync (string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Paginated> localVarResponse = await FeedsListWithHttpInfoAsync(bookmark, pageSize, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List feeds &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmark">Cursor used to fetch the next page of items (optional)</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Paginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Paginated>> FeedsListWithHttpInfoAsync (string bookmark = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/catalogs/feeds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bookmark != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bookmark", bookmark)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Paginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Paginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Paginated)));
        }

        /// <summary>
        /// Update feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <returns>CatalogsFeed</returns>
        public CatalogsFeed FeedsUpdate (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest)
        {
             ApiResponse<CatalogsFeed> localVarResponse = FeedsUpdateWithHttpInfo(feedId, catalogsFeedsUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <returns>ApiResponse of CatalogsFeed</returns>
        public ApiResponse<CatalogsFeed> FeedsUpdateWithHttpInfo (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest)
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedsUpdate");
            // verify the required parameter 'catalogsFeedsUpdateRequest' is set
            if (catalogsFeedsUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsFeedsUpdateRequest' when calling CatalogsApi->FeedsUpdate");

            var localVarPath = "/catalogs/feeds/{feed_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter
            if (catalogsFeedsUpdateRequest != null && catalogsFeedsUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsFeedsUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsFeedsUpdateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsFeed>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsFeed) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsFeed)));
        }

        /// <summary>
        /// Update feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsFeed</returns>
        public async System.Threading.Tasks.Task<CatalogsFeed> FeedsUpdateAsync (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsFeed> localVarResponse = await FeedsUpdateWithHttpInfoAsync(feedId, catalogsFeedsUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update feed &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsFeed)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsFeed>> FeedsUpdateWithHttpInfoAsync (string feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'feedId' is set
            if (feedId == null)
                throw new ApiException(400, "Missing required parameter 'feedId' when calling CatalogsApi->FeedsUpdate");
            // verify the required parameter 'catalogsFeedsUpdateRequest' is set
            if (catalogsFeedsUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsFeedsUpdateRequest' when calling CatalogsApi->FeedsUpdate");

            var localVarPath = "/catalogs/feeds/{feed_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feedId != null) localVarPathParams.Add("feed_id", this.Configuration.ApiClient.ParameterToString(feedId)); // path parameter
            if (catalogsFeedsUpdateRequest != null && catalogsFeedsUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsFeedsUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsFeedsUpdateRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeedsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsFeed>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsFeed) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsFeed)));
        }

        /// <summary>
        /// Get catalogs items batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <returns>CatalogsItemsBatch</returns>
        public CatalogsItemsBatch ItemsBatchGet (string batchId)
        {
             ApiResponse<CatalogsItemsBatch> localVarResponse = ItemsBatchGetWithHttpInfo(batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get catalogs items batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <returns>ApiResponse of CatalogsItemsBatch</returns>
        public ApiResponse<CatalogsItemsBatch> ItemsBatchGetWithHttpInfo (string batchId)
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling CatalogsApi->ItemsBatchGet");

            var localVarPath = "/catalogs/items/batch/{batch_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchId != null) localVarPathParams.Add("batch_id", this.Configuration.ApiClient.ParameterToString(batchId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsBatchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsItemsBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsItemsBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsItemsBatch)));
        }

        /// <summary>
        /// Get catalogs items batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsItemsBatch</returns>
        public async System.Threading.Tasks.Task<CatalogsItemsBatch> ItemsBatchGetAsync (string batchId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsItemsBatch> localVarResponse = await ItemsBatchGetWithHttpInfoAsync(batchId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get catalogs items batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsItemsBatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsItemsBatch>> ItemsBatchGetWithHttpInfoAsync (string batchId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling CatalogsApi->ItemsBatchGet");

            var localVarPath = "/catalogs/items/batch/{batch_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchId != null) localVarPathParams.Add("batch_id", this.Configuration.ApiClient.ParameterToString(batchId)); // path parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsBatchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsItemsBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsItemsBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsItemsBatch)));
        }

        /// <summary>
        /// Perform an operation on an item batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <returns>CatalogsItemsBatch</returns>
        public CatalogsItemsBatch ItemsBatchPost (CatalogsItemsBatchRequest catalogsItemsBatchRequest)
        {
             ApiResponse<CatalogsItemsBatch> localVarResponse = ItemsBatchPostWithHttpInfo(catalogsItemsBatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform an operation on an item batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <returns>ApiResponse of CatalogsItemsBatch</returns>
        public ApiResponse<CatalogsItemsBatch> ItemsBatchPostWithHttpInfo (CatalogsItemsBatchRequest catalogsItemsBatchRequest)
        {
            // verify the required parameter 'catalogsItemsBatchRequest' is set
            if (catalogsItemsBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsItemsBatchRequest' when calling CatalogsApi->ItemsBatchPost");

            var localVarPath = "/catalogs/items/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogsItemsBatchRequest != null && catalogsItemsBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsItemsBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsItemsBatchRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsBatchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsItemsBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsItemsBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsItemsBatch)));
        }

        /// <summary>
        /// Perform an operation on an item batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsItemsBatch</returns>
        public async System.Threading.Tasks.Task<CatalogsItemsBatch> ItemsBatchPostAsync (CatalogsItemsBatchRequest catalogsItemsBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsItemsBatch> localVarResponse = await ItemsBatchPostWithHttpInfoAsync(catalogsItemsBatchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform an operation on an item batch &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsItemsBatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsItemsBatch>> ItemsBatchPostWithHttpInfoAsync (CatalogsItemsBatchRequest catalogsItemsBatchRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'catalogsItemsBatchRequest' is set
            if (catalogsItemsBatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogsItemsBatchRequest' when calling CatalogsApi->ItemsBatchPost");

            var localVarPath = "/catalogs/items/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catalogsItemsBatchRequest != null && catalogsItemsBatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogsItemsBatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogsItemsBatchRequest; // byte array
            }

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsBatchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsItemsBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsItemsBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsItemsBatch)));
        }

        /// <summary>
        /// Get catalogs items Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <returns>CatalogsItems</returns>
        public CatalogsItems ItemsGet (string country, List<string> itemIds, string language)
        {
             ApiResponse<CatalogsItems> localVarResponse = ItemsGetWithHttpInfo(country, itemIds, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get catalogs items Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <returns>ApiResponse of CatalogsItems</returns>
        public ApiResponse<CatalogsItems> ItemsGetWithHttpInfo (string country, List<string> itemIds, string language)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling CatalogsApi->ItemsGet");
            // verify the required parameter 'itemIds' is set
            if (itemIds == null)
                throw new ApiException(400, "Missing required parameter 'itemIds' when calling CatalogsApi->ItemsGet");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling CatalogsApi->ItemsGet");

            var localVarPath = "/catalogs/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "item_ids", itemIds)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsItems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsItems) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsItems)));
        }

        /// <summary>
        /// Get catalogs items Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CatalogsItems</returns>
        public async System.Threading.Tasks.Task<CatalogsItems> ItemsGetAsync (string country, List<string> itemIds, string language, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CatalogsItems> localVarResponse = await ItemsGetWithHttpInfoAsync(country, itemIds, language, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get catalogs items Get the items of the catalog created by the \&quot;operating user_account\&quot;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CatalogsItems)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogsItems>> ItemsGetWithHttpInfoAsync (string country, List<string> itemIds, string language, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling CatalogsApi->ItemsGet");
            // verify the required parameter 'itemIds' is set
            if (itemIds == null)
                throw new ApiException(400, "Missing required parameter 'itemIds' when calling CatalogsApi->ItemsGet");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling CatalogsApi->ItemsGet");

            var localVarPath = "/catalogs/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "item_ids", itemIds)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // authentication (pinterest_oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatalogsItems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CatalogsItems) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogsItems)));
        }

    }
}
