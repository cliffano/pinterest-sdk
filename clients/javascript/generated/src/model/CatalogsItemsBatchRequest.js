/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchOperation from './BatchOperation';
import Country from './Country';
import ItemBatchRecord from './ItemBatchRecord';
import Language from './Language';

/**
 * The CatalogsItemsBatchRequest model module.
 * @module model/CatalogsItemsBatchRequest
 * @version 1.0.0-pre.0
 */
class CatalogsItemsBatchRequest {
    /**
     * Constructs a new <code>CatalogsItemsBatchRequest</code>.
     * Request object of catalogs items batch
     * @alias module:model/CatalogsItemsBatchRequest
     */
    constructor() { 
        
        CatalogsItemsBatchRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogsItemsBatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsItemsBatchRequest} obj Optional instance to populate.
     * @return {module:model/CatalogsItemsBatchRequest} The populated <code>CatalogsItemsBatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsItemsBatchRequest();

            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = Language.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = BatchOperation.constructFromObject(data['operation']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ItemBatchRecord]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Country} country
 */
CatalogsItemsBatchRequest.prototype['country'] = undefined;

/**
 * @member {module:model/Language} language
 */
CatalogsItemsBatchRequest.prototype['language'] = undefined;

/**
 * @member {module:model/BatchOperation} operation
 */
CatalogsItemsBatchRequest.prototype['operation'] = undefined;

/**
 * Array with catalogs items
 * @member {Array.<module:model/ItemBatchRecord>} items
 */
CatalogsItemsBatchRequest.prototype['items'] = undefined;






export default CatalogsItemsBatchRequest;

