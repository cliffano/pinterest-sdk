/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogsProductMetadata from './CatalogsProductMetadata';
import Pin from './Pin';

/**
 * The CatalogsProduct model module.
 * @module model/CatalogsProduct
 * @version 1.1.1-pre.0
 */
class CatalogsProduct {
    /**
     * Constructs a new <code>CatalogsProduct</code>.
     * @alias module:model/CatalogsProduct
     * @param metadata {module:model/CatalogsProductMetadata} 
     * @param pin {module:model/Pin} 
     */
    constructor(metadata, pin) { 
        
        CatalogsProduct.initialize(this, metadata, pin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metadata, pin) { 
        obj['metadata'] = metadata;
        obj['pin'] = pin;
    }

    /**
     * Constructs a <code>CatalogsProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogsProduct} obj Optional instance to populate.
     * @return {module:model/CatalogsProduct} The populated <code>CatalogsProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogsProduct();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = CatalogsProductMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = Pin.constructFromObject(data['pin']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogsProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogsProduct</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogsProduct.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          CatalogsProductMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `pin`
        if (data['pin']) { // data not null
          Pin.validateJSON(data['pin']);
        }

        return true;
    }


}

CatalogsProduct.RequiredProperties = ["metadata", "pin"];

/**
 * @member {module:model/CatalogsProductMetadata} metadata
 */
CatalogsProduct.prototype['metadata'] = undefined;

/**
 * @member {module:model/Pin} pin
 */
CatalogsProduct.prototype['pin'] = undefined;






export default CatalogsProduct;

