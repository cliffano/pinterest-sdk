/*
  Pinterest REST API

  Pinterest's REST API

  The version of the OpenAPI document: 5.12.0

  Contact: blah+oapicf@cliffano.com

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.catalogsservice;

import "google/protobuf/empty.proto";
import public "models/catalogs_feed.proto";
import public "models/catalogs_item_validation_issue.proto";
import public "models/catalogs_items.proto";
import public "models/catalogs_items_batch.proto";
import public "models/catalogs_items_filters.proto";
import public "models/catalogs_list200_response.proto";
import public "models/catalogs_list_products_by_filter_request.proto";
import public "models/catalogs_product_group_pins_list200_response.proto";
import public "models/catalogs_product_group_product_counts.proto";
import public "models/catalogs_product_groups_create201_response.proto";
import public "models/catalogs_product_groups_create_request.proto";
import public "models/catalogs_product_groups_list200_response.proto";
import public "models/catalogs_product_groups_update_request.proto";
import public "models/error.proto";
import public "models/feed_processing_results_list200_response.proto";
import public "models/feeds_create_request.proto";
import public "models/feeds_list200_response.proto";
import public "models/feeds_update_request.proto";
import public "models/items_batch_post_request.proto";
import public "models/items_issues_list200_response.proto";

service CatalogsService {
  rpc CatalogsList (CatalogsListRequest) returns (CatalogsList200Response);

  rpc CatalogsProductGroupPinsList (CatalogsProductGroupPinsListRequest) returns (CatalogsProductGroupPinsList200Response);

  rpc CatalogsProductGroupsCreate (CatalogsProductGroupsCreateRequest) returns (CatalogsProductGroupsCreate201Response);

  rpc CatalogsProductGroupsDelete (CatalogsProductGroupsDeleteRequest) returns (google.protobuf.Empty);

  rpc CatalogsProductGroupsGet (CatalogsProductGroupsGetRequest) returns (CatalogsProductGroupsCreate201Response);

  rpc CatalogsProductGroupsList (CatalogsProductGroupsListRequest) returns (CatalogsProductGroupsList200Response);

  rpc CatalogsProductGroupsProductCountsGet (CatalogsProductGroupsProductCountsGetRequest) returns (CatalogsProductGroupProductCounts);

  rpc CatalogsProductGroupsUpdate (CatalogsProductGroupsUpdateRequest) returns (CatalogsProductGroupsCreate201Response);

  rpc FeedProcessingResultsList (FeedProcessingResultsListRequest) returns (FeedProcessingResultsList200Response);

  rpc FeedsCreate (FeedsCreateRequest) returns (CatalogsFeed);

  rpc FeedsDelete (FeedsDeleteRequest) returns (google.protobuf.Empty);

  rpc FeedsGet (FeedsGetRequest) returns (CatalogsFeed);

  rpc FeedsList (FeedsListRequest) returns (FeedsList200Response);

  rpc FeedsUpdate (FeedsUpdateRequest) returns (CatalogsFeed);

  rpc ItemsBatchGet (ItemsBatchGetRequest) returns (CatalogsItemsBatch);

  rpc ItemsBatchPost (ItemsBatchPostRequest) returns (CatalogsItemsBatch);

  rpc ItemsGet (ItemsGetRequest) returns (CatalogsItems);

  rpc ItemsIssuesList (ItemsIssuesListRequest) returns (ItemsIssuesList200Response);

  rpc ProductsByProductGroupFilterList (ProductsByProductGroupFilterListRequest) returns (CatalogsProductGroupPinsList200Response);

}

message CatalogsListRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;

}

message CatalogsProductGroupPinsListRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

message CatalogsProductGroupsCreateRequest {
  // Request object used to created a catalogs product group.
  CatalogsProductGroupsCreateRequest catalogsProductGroupsCreateRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsDeleteRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsGetRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsListRequest {
  // Filter entities for a given feed_id. If not given, all feeds are considered.
  string feedId = 1;
  // Filter entities for a given catalog_id. If not given, all catalogs are considered.
  string catalogId = 2;
  // Cursor used to fetch the next page of items
  string bookmark = 3;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 4;
  // Unique identifier of an ad account.
  string adAccountId = 5;

}

message CatalogsProductGroupsProductCountsGetRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message CatalogsProductGroupsUpdateRequest {
  // Unique identifier of a product group
  string productGroupId = 1;
  // Request object used to Update a catalogs product group.
  CatalogsProductGroupsUpdateRequest catalogsProductGroupsUpdateRequest = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;

}

message FeedProcessingResultsListRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

message FeedsCreateRequest {
  // Request object used to created a feed.
  FeedsCreateRequest feedsCreateRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsDeleteRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsGetRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message FeedsListRequest {
  // Cursor used to fetch the next page of items
  string bookmark = 1;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 2;
  // Filter entities for a given catalog_id. If not given, all catalogs are considered.
  string catalogId = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

message FeedsUpdateRequest {
  // Unique identifier of a feed
  string feedId = 1;
  // Request object used to update a feed.
  FeedsUpdateRequest feedsUpdateRequest = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;

}

message ItemsBatchGetRequest {
  // Id of a catalogs items batch to fetch
  string batchId = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ItemsBatchPostRequest {
  // Request object used to create catalogs items in a batch
  ItemsBatchPostRequest itemsBatchPostRequest = 1;
  // Unique identifier of an ad account.
  string adAccountId = 2;

}

message ItemsGetRequest {
  // Country for the Catalogs Items
  string country = 1;
  // Language for the Catalogs Items
  string language = 2;
  // Unique identifier of an ad account.
  string adAccountId = 3;
  // This parameter is deprecated. Use filters instead.
  repeated string itemIds = 4;
  // Identifies items to be retrieved. This is a required parameter.
  CatalogsItemsFilters filters = 5;

}

message ItemsIssuesListRequest {
  // Unique identifier of a feed processing result. It can be acquired from the \"id\" field of the \"items\" array within the response of the [List processing results for a given feed](https://developers.pinterest.com/docs/api/v5/#operation/feed_processing_results/list).
  string processingResultId = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Item number based on order of appearance in the Catalogs Feed. For example, '0' refers to first item found in a feed that was downloaded from a 'location' specified during feed creation.
  repeated int32 itemNumbers = 4;
  // Filter item validation issues that have a given type of item validation issue.
  CatalogsItemValidationIssue itemValidationIssue = 5;
  // Unique identifier of an ad account.
  string adAccountId = 6;

}

message ProductsByProductGroupFilterListRequest {
  // Object holding a group of filters for a catalog product group
  CatalogsListProductsByFilterRequest catalogsListProductsByFilterRequest = 1;
  // Cursor used to fetch the next page of items
  string bookmark = 2;
  // Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/getting-started/pagination/'>Pagination</a> for more information.
  int32 pageSize = 3;
  // Unique identifier of an ad account.
  string adAccountId = 4;

}

