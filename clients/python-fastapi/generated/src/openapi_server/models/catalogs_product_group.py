# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from openapi_server.models.catalogs_product_group_filters import CatalogsProductGroupFilters
from openapi_server.models.catalogs_product_group_status import CatalogsProductGroupStatus
from openapi_server.models.catalogs_product_group_type import CatalogsProductGroupType


class CatalogsProductGroup(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    CatalogsProductGroup - a model defined in OpenAPI

        id: The id of this CatalogsProductGroup.
        name: The name of this CatalogsProductGroup [Optional].
        description: The description of this CatalogsProductGroup [Optional].
        filters: The filters of this CatalogsProductGroup.
        type: The type of this CatalogsProductGroup [Optional].
        status: The status of this CatalogsProductGroup [Optional].
        feed_id: The feed_id of this CatalogsProductGroup [Optional].
        created_at: The created_at of this CatalogsProductGroup [Optional].
        updated_at: The updated_at of this CatalogsProductGroup [Optional].
    """

    id: str
    name: Optional[str] = None
    description: Optional[str] = None
    filters: CatalogsProductGroupFilters
    type: Optional[CatalogsProductGroupType] = None
    status: Optional[CatalogsProductGroupStatus] = None
    feed_id: Optional[str] = None
    created_at: Optional[int] = None
    updated_at: Optional[int] = None

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

    @validator("feed_id")
    def feed_id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

CatalogsProductGroup.update_forward_refs()
