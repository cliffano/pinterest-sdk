# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from openapi_server.models.action_type import ActionType


class AdGroupResponseAllOf1(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AdGroupResponseAllOf1 - a model defined in OpenAPI

        campaign_id: The campaign_id of this AdGroupResponseAllOf1 [Optional].
        billable_event: The billable_event of this AdGroupResponseAllOf1 [Optional].
        id: The id of this AdGroupResponseAllOf1 [Optional].
        type: The type of this AdGroupResponseAllOf1 [Optional].
        ad_account_id: The ad_account_id of this AdGroupResponseAllOf1 [Optional].
        created_time: The created_time of this AdGroupResponseAllOf1 [Optional].
        updated_time: The updated_time of this AdGroupResponseAllOf1 [Optional].
    """

    campaign_id: Optional[str] = None
    billable_event: Optional[ActionType] = None
    id: Optional[str] = None
    type: Optional[str] = None
    ad_account_id: Optional[str] = None
    created_time: Optional[int] = None
    updated_time: Optional[int] = None

    @validator("campaign_id")
    def campaign_id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

    @validator("ad_account_id")
    def ad_account_id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

AdGroupResponseAllOf1.update_forward_refs()
