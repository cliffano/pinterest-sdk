# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from openapi_server.models.action_type import ActionType
from openapi_server.models.ad_group_response_all_of import AdGroupResponseAllOf
from openapi_server.models.ad_group_response_all_of1 import AdGroupResponseAllOf1
from openapi_server.models.ad_group_summary_status import AdGroupSummaryStatus
from openapi_server.models.entity_status import EntityStatus
from openapi_server.models.pacing_delivery_type import PacingDeliveryType
from openapi_server.models.placement_group_type import PlacementGroupType
from openapi_server.models.tracking_urls import TrackingUrls


class AdGroupResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AdGroupResponse - a model defined in OpenAPI

        name: The name of this AdGroupResponse [Optional].
        status: The status of this AdGroupResponse [Optional].
        budget_in_micro_currency: The budget_in_micro_currency of this AdGroupResponse [Optional].
        bid_in_micro_currency: The bid_in_micro_currency of this AdGroupResponse [Optional].
        budget_type: The budget_type of this AdGroupResponse [Optional].
        start_time: The start_time of this AdGroupResponse [Optional].
        end_time: The end_time of this AdGroupResponse [Optional].
        targeting_spec: The targeting_spec of this AdGroupResponse [Optional].
        lifetime_frequency_cap: The lifetime_frequency_cap of this AdGroupResponse [Optional].
        tracking_urls: The tracking_urls of this AdGroupResponse [Optional].
        auto_targeting_enabled: The auto_targeting_enabled of this AdGroupResponse [Optional].
        placement_group: The placement_group of this AdGroupResponse [Optional].
        pacing_delivery_type: The pacing_delivery_type of this AdGroupResponse [Optional].
        conversion_learning_mode_type: The conversion_learning_mode_type of this AdGroupResponse [Optional].
        summary_status: The summary_status of this AdGroupResponse [Optional].
        feed_profile_id: The feed_profile_id of this AdGroupResponse [Optional].
        campaign_id: The campaign_id of this AdGroupResponse [Optional].
        billable_event: The billable_event of this AdGroupResponse [Optional].
        id: The id of this AdGroupResponse [Optional].
        type: The type of this AdGroupResponse [Optional].
        ad_account_id: The ad_account_id of this AdGroupResponse [Optional].
        created_time: The created_time of this AdGroupResponse [Optional].
        updated_time: The updated_time of this AdGroupResponse [Optional].
    """

    name: Optional[str] = None
    status: Optional[EntityStatus] = None
    budget_in_micro_currency: Optional[int] = None
    bid_in_micro_currency: Optional[int] = None
    budget_type: Optional[str] = None
    start_time: Optional[int] = None
    end_time: Optional[int] = None
    targeting_spec: Optional[Dict[str, List[str]]] = None
    lifetime_frequency_cap: Optional[int] = None
    tracking_urls: Optional[TrackingUrls] = None
    auto_targeting_enabled: Optional[bool] = None
    placement_group: Optional[PlacementGroupType] = None
    pacing_delivery_type: Optional[PacingDeliveryType] = None
    conversion_learning_mode_type: Optional[str] = None
    summary_status: Optional[AdGroupSummaryStatus] = None
    feed_profile_id: Optional[str] = None
    campaign_id: Optional[str] = None
    billable_event: Optional[ActionType] = None
    id: Optional[str] = None
    type: Optional[str] = None
    ad_account_id: Optional[str] = None
    created_time: Optional[int] = None
    updated_time: Optional[int] = None

    @validator("campaign_id")
    def campaign_id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

    @validator("ad_account_id")
    def ad_account_id_pattern(cls, value):
        assert value is not None and re.match(r"^\d+$", value)
        return value

AdGroupResponse.update_forward_refs()
