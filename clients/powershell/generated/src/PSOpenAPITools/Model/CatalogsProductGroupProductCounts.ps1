#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.12.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Product counts for a CatalogsProductGroup

.PARAMETER InStock
No description available.
.PARAMETER OutOfStock
No description available.
.PARAMETER Preorder
No description available.
.PARAMETER Total
No description available.
.OUTPUTS

CatalogsProductGroupProductCounts<PSCustomObject>
#>

function Initialize-CatalogsProductGroupProductCounts {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${InStock},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${OutOfStock},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Preorder},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Total}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsProductGroupProductCounts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $InStock) {
            throw "invalid value for 'InStock', 'InStock' cannot be null."
        }

        if ($InStock -lt 0) {
          throw "invalid value for 'InStock', must be greater than or equal to 0."
        }

        if ($null -eq $OutOfStock) {
            throw "invalid value for 'OutOfStock', 'OutOfStock' cannot be null."
        }

        if ($OutOfStock -lt 0) {
          throw "invalid value for 'OutOfStock', must be greater than or equal to 0."
        }

        if ($null -eq $Preorder) {
            throw "invalid value for 'Preorder', 'Preorder' cannot be null."
        }

        if ($Preorder -lt 0) {
          throw "invalid value for 'Preorder', must be greater than or equal to 0."
        }

        if ($null -eq $Total) {
            throw "invalid value for 'Total', 'Total' cannot be null."
        }

        if ($Total -lt 0) {
          throw "invalid value for 'Total', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "in_stock" = ${InStock}
            "out_of_stock" = ${OutOfStock}
            "preorder" = ${Preorder}
            "total" = ${Total}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsProductGroupProductCounts<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsProductGroupProductCounts<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsProductGroupProductCounts<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsProductGroupProductCounts {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsProductGroupProductCounts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsProductGroupProductCounts
        $AllProperties = ("in_stock", "out_of_stock", "preorder", "total")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'in_stock' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "in_stock"))) {
            throw "Error! JSON cannot be serialized due to the required property 'in_stock' missing."
        } else {
            $InStock = $JsonParameters.PSobject.Properties["in_stock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "out_of_stock"))) {
            throw "Error! JSON cannot be serialized due to the required property 'out_of_stock' missing."
        } else {
            $OutOfStock = $JsonParameters.PSobject.Properties["out_of_stock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preorder"))) {
            throw "Error! JSON cannot be serialized due to the required property 'preorder' missing."
        } else {
            $Preorder = $JsonParameters.PSobject.Properties["preorder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total' missing."
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        $PSO = [PSCustomObject]@{
            "in_stock" = ${InStock}
            "out_of_stock" = ${OutOfStock}
            "preorder" = ${Preorder}
            "total" = ${Total}
        }

        return $PSO
    }

}

