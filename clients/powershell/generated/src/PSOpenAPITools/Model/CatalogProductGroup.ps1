#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.12.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

non-promoted catalog product group entity

.PARAMETER Id
ID of the catalog product group.
.PARAMETER MerchantId
Merchant ID pertaining to the owner of the catalog product group.
.PARAMETER Name
Name of catalog product group
.PARAMETER Filters
Object holding a list of filters
.PARAMETER FilterV2
Object holding a list of filters
.PARAMETER Type
No description available.
.PARAMETER Status
No description available.
.PARAMETER FeedProfileId
id of the feed profile belonging to this catalog product group
.PARAMETER CreatedAt
Unix timestamp in seconds of when catalog product group was created.
.PARAMETER LastUpdate
Unix timestamp in seconds of last time catalog product group was updated.
.PARAMETER ProductCount
Amount of products in the catalog product group
.PARAMETER FeaturedPosition
index of the featured position of the catalog product group
.OUTPUTS

CatalogProductGroup<PSCustomObject>
#>

function Initialize-CatalogProductGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${MerchantId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Filters},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FilterV2},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "PAUSED", "ARCHIVED", "DRAFT", "DELETED_DRAFT")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${FeedProfileId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CreatedAt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LastUpdate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProductCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FeaturedPosition}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogProductGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "merchant_id" = ${MerchantId}
            "name" = ${Name}
            "filters" = ${Filters}
            "filter_v2" = ${FilterV2}
            "type" = ${Type}
            "status" = ${Status}
            "feed_profile_id" = ${FeedProfileId}
            "created_at" = ${CreatedAt}
            "last_update" = ${LastUpdate}
            "product_count" = ${ProductCount}
            "featured_position" = ${FeaturedPosition}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogProductGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogProductGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogProductGroup<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogProductGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogProductGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogProductGroup
        $AllProperties = ("id", "merchant_id", "name", "filters", "filter_v2", "type", "status", "feed_profile_id", "created_at", "last_update", "product_count", "featured_position")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "merchant_id"))) { #optional property not found
            $MerchantId = $null
        } else {
            $MerchantId = $JsonParameters.PSobject.Properties["merchant_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filters"))) { #optional property not found
            $Filters = $null
        } else {
            $Filters = $JsonParameters.PSobject.Properties["filters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filter_v2"))) { #optional property not found
            $FilterV2 = $null
        } else {
            $FilterV2 = $JsonParameters.PSobject.Properties["filter_v2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "feed_profile_id"))) { #optional property not found
            $FeedProfileId = $null
        } else {
            $FeedProfileId = $JsonParameters.PSobject.Properties["feed_profile_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_update"))) { #optional property not found
            $LastUpdate = $null
        } else {
            $LastUpdate = $JsonParameters.PSobject.Properties["last_update"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "product_count"))) { #optional property not found
            $ProductCount = $null
        } else {
            $ProductCount = $JsonParameters.PSobject.Properties["product_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "featured_position"))) { #optional property not found
            $FeaturedPosition = $null
        } else {
            $FeaturedPosition = $JsonParameters.PSobject.Properties["featured_position"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "merchant_id" = ${MerchantId}
            "name" = ${Name}
            "filters" = ${Filters}
            "filter_v2" = ${FilterV2}
            "type" = ${Type}
            "status" = ${Status}
            "feed_profile_id" = ${FeedProfileId}
            "created_at" = ${CreatedAt}
            "last_update" = ${LastUpdate}
            "product_count" = ${ProductCount}
            "featured_position" = ${FeaturedPosition}
        }

        return $PSO
    }

}

