/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * non-promoted catalog product group entity
 * @param id ID of the catalog product group.
 * @param merchantId Merchant ID pertaining to the owner of the catalog product group.
 * @param name Name of catalog product group
 * @param filters Object holding a list of filters
 * @param filterV2 Object holding a list of filters
 * @param type 
 * @param status 
 * @param feedProfileId id of the feed profile belonging to this catalog product group
 * @param createdAt Unix timestamp in seconds of when catalog product group was created.
 * @param lastUpdate Unix timestamp in seconds of last time catalog product group was updated.
 * @param productCount Amount of products in the catalog product group
 * @param featuredPosition index of the featured position of the catalog product group
 */
object CatalogProductGroups : BaseTable<CatalogProductGroup>("CatalogProductGroup") {
    val id = text("id") /* null */ /* ID of the catalog product group. */
    val merchantId = text("merchant_id") /* null */ /* Merchant ID pertaining to the owner of the catalog product group. */
    val name = text("name") /* null */ /* Name of catalog product group */
    val filters = blob("filters") /* null */ /* Object holding a list of filters */
    val filterV2 = blob("filter_v2") /* null */ /* Object holding a list of filters */
    val type = long("type") /* null */
    val status = long("status") /* null */
    val feedProfileId = text("feed_profile_id") /* null */ /* id of the feed profile belonging to this catalog product group */
    val createdAt = int("created_at") /* null */ /* Unix timestamp in seconds of when catalog product group was created. */
    val lastUpdate = int("last_update") /* null */ /* Unix timestamp in seconds of last time catalog product group was updated. */
    val productCount = int("product_count") /* null */ /* Amount of products in the catalog product group */
    val featuredPosition = int("featured_position") /* null */ /* index of the featured position of the catalog product group */

    /**
     * Create an entity of type CatalogProductGroup from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogProductGroup(
        id = row[id]  /* kotlin.String? */ /* ID of the catalog product group. */,
        merchantId = row[merchantId]  /* kotlin.String? */ /* Merchant ID pertaining to the owner of the catalog product group. */,
        name = row[name]  /* kotlin.String? */ /* Name of catalog product group */,
        filters = row[filters]  /* kotlin.Any? */ /* Object holding a list of filters */,
        filterV2 = row[filterV2]  /* kotlin.Any? */ /* Object holding a list of filters */,
        type = Boards.createEntity(row, withReferences) /* Board? */,
        status = EntityStatuss.createEntity(row, withReferences) /* EntityStatus? */,
        feedProfileId = row[feedProfileId]  /* kotlin.String? */ /* id of the feed profile belonging to this catalog product group */,
        createdAt = row[createdAt]  /* kotlin.Int? */ /* Unix timestamp in seconds of when catalog product group was created. */,
        lastUpdate = row[lastUpdate]  /* kotlin.Int? */ /* Unix timestamp in seconds of last time catalog product group was updated. */,
        productCount = row[productCount]  /* kotlin.Int? */ /* Amount of products in the catalog product group */,
        featuredPosition = row[featuredPosition]  /* kotlin.Int? */ /* index of the featured position of the catalog product group */
    )

    /**
    * Assign all the columns from the entity of type CatalogProductGroup to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogProductGroup()
    * database.update(CatalogProductGroups, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogProductGroup) {
        this.apply {
            set(CatalogProductGroups.id, entity.id)
            set(CatalogProductGroups.merchantId, entity.merchantId)
            set(CatalogProductGroups.name, entity.name)
            set(CatalogProductGroups.filters, entity.filters)
            set(CatalogProductGroups.filterV2, entity.filterV2)
            set(CatalogProductGroups.type, entity.type)
            set(CatalogProductGroups.status, entity.status)
            set(CatalogProductGroups.feedProfileId, entity.feedProfileId)
            set(CatalogProductGroups.createdAt, entity.createdAt)
            set(CatalogProductGroups.lastUpdate, entity.lastUpdate)
            set(CatalogProductGroups.productCount, entity.productCount)
            set(CatalogProductGroups.featuredPosition, entity.featuredPosition)
        }
    }

}


