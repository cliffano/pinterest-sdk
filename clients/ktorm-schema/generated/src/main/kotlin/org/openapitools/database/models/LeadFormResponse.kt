/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name Internal name of the lead form.
 * @param privacyPolicyLink A link to the advertiser's privacy policy. This will be included in the lead form's disclosure language.
 * @param hasAcceptedTerms Whether the advertiser has accepted Pinterest's terms of service for creating a lead ad.
 * @param completionMessage A message for people who complete the form to let them know what happens next.
 * @param status 
 * @param disclosureLanguage Additional disclosure language to be included in the lead form.
 * @param questions List of questions to be displayed on the lead form.
 * @param id The ID of this lead form
 * @param adAccountId The Ad Account ID that this lead form belongs to.
 * @param createdTime Lead form creation time. Unix timestamp in seconds.
 * @param updatedTime Last update time. Unix timestamp in seconds.
 */
object LeadFormResponses : BaseTable<LeadFormResponse>("LeadFormResponse") {
    val name = text("name") /* null */ /* Internal name of the lead form. */
    val privacyPolicyLink = text("privacy_policy_link") /* null */ /* A link to the advertiser's privacy policy. This will be included in the lead form's disclosure language. */
    val hasAcceptedTerms = boolean("has_accepted_terms") /* null */ /* Whether the advertiser has accepted Pinterest's terms of service for creating a lead ad. */
    val completionMessage = text("completion_message") /* null */ /* A message for people who complete the form to let them know what happens next. */
    val status = long("status") /* null */
    val disclosureLanguage = text("disclosure_language") /* null */ /* Additional disclosure language to be included in the lead form. */
    val id = text("id") /* null */ /* The ID of this lead form */
    val adAccountId = text("ad_account_id") /* null */ /* The Ad Account ID that this lead form belongs to. */
    val createdTime = int("created_time") /* null */ /* Lead form creation time. Unix timestamp in seconds. */
    val updatedTime = int("updated_time") /* null */ /* Last update time. Unix timestamp in seconds. */

    /**
     * Create an entity of type LeadFormResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = LeadFormResponse(
        name = row[name]  /* kotlin.String? */ /* Internal name of the lead form. */,
        privacyPolicyLink = row[privacyPolicyLink]  /* kotlin.String? */ /* A link to the advertiser's privacy policy. This will be included in the lead form's disclosure language. */,
        hasAcceptedTerms = row[hasAcceptedTerms]  /* kotlin.Boolean? */ /* Whether the advertiser has accepted Pinterest's terms of service for creating a lead ad. */,
        completionMessage = row[completionMessage]  /* kotlin.String? */ /* A message for people who complete the form to let them know what happens next. */,
        status = LeadFormStatuss.createEntity(row, withReferences) /* LeadFormStatus? */,
        disclosureLanguage = row[disclosureLanguage]  /* kotlin.String? */ /* Additional disclosure language to be included in the lead form. */,
        questions = emptyList() /* kotlin.Array<LeadFormQuestion>? */ /* List of questions to be displayed on the lead form. */,
        id = row[id]  /* kotlin.String? */ /* The ID of this lead form */,
        adAccountId = row[adAccountId]  /* kotlin.String? */ /* The Ad Account ID that this lead form belongs to. */,
        createdTime = row[createdTime]  /* kotlin.Int? */ /* Lead form creation time. Unix timestamp in seconds. */,
        updatedTime = row[updatedTime]  /* kotlin.Int? */ /* Last update time. Unix timestamp in seconds. */
    )

    /**
    * Assign all the columns from the entity of type LeadFormResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = LeadFormResponse()
    * database.update(LeadFormResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: LeadFormResponse) {
        this.apply {
            set(LeadFormResponses.name, entity.name)
            set(LeadFormResponses.privacyPolicyLink, entity.privacyPolicyLink)
            set(LeadFormResponses.hasAcceptedTerms, entity.hasAcceptedTerms)
            set(LeadFormResponses.completionMessage, entity.completionMessage)
            set(LeadFormResponses.status, entity.status)
            set(LeadFormResponses.disclosureLanguage, entity.disclosureLanguage)
            set(LeadFormResponses.id, entity.id)
            set(LeadFormResponses.adAccountId, entity.adAccountId)
            set(LeadFormResponses.createdTime, entity.createdTime)
            set(LeadFormResponses.updatedTime, entity.updatedTime)
        }
    }

}


object LeadFormResponseLeadFormQuestion : BaseTable<Pair<kotlin.Long, kotlin.Long>>("LeadFormResponseLeadFormQuestion") {
    val leadFormResponse = long("leadFormResponse")
    val leadFormQuestion = long("leadFormQuestion")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[leadFormResponse] ?: 0, row[leadFormQuestion] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(LeadFormResponseLeadFormQuestion.leadFormResponse, entity.first)
            set(LeadFormResponseLeadFormQuestion.leadFormQuestion, entity.second)
        }
    }

}

