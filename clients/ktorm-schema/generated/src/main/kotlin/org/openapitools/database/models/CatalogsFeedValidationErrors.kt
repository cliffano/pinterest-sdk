/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param fetchError 
 * @param fetchInactiveFeedError 
 * @param encodingError 
 * @param delimiterError 
 * @param requiredColumnsMissing 
 * @param imageLinkInvalid 
 * @param itemidMissing 
 * @param titleMissing 
 * @param descriptionMissing 
 * @param productCategoryInvalid 
 * @param productLinkMissing 
 * @param imageLinkMissing 
 * @param availabilityInvalid 
 * @param productPriceInvalid 
 * @param linkFormatInvalid 
 * @param parseLineError 
 * @param adwordsFormatInvalid 
 * @param productCategoryMissing 
 * @param internalServiceError 
 * @param noVerifiedDomain 
 * @param adultInvalid 
 * @param invalidDomain 
 * @param feedLengthTooLong 
 * @param linkLengthTooLong 
 * @param malformedXml 
 * @param redirectInvalid 
 * @param priceMissing 
 * @param feedTooSmall 
 * @param conditionInvalid 
 * @param shopifyNoProducts 
 * @param maxItemsPerItemGroupExceeded 
 * @param itemMainImageDownloadFailure 
 * @param pinjoinContentUnsafe 
 * @param blocklistedImageSignature 
 */
object CatalogsFeedValidationErrorss : BaseTable<CatalogsFeedValidationErrors>("CatalogsFeedValidationErrors") {
    val fetchError = int("fetch_error") /* null */
    val fetchInactiveFeedError = int("fetch_inactive_feed_error") /* null */
    val encodingError = int("encoding_error") /* null */
    val delimiterError = int("delimiter_error") /* null */
    val requiredColumnsMissing = int("required_columns_missing") /* null */
    val imageLinkInvalid = int("image_link_invalid") /* null */
    val itemidMissing = int("itemid_missing") /* null */
    val titleMissing = int("title_missing") /* null */
    val descriptionMissing = int("description_missing") /* null */
    val productCategoryInvalid = int("product_category_invalid") /* null */
    val productLinkMissing = int("product_link_missing") /* null */
    val imageLinkMissing = int("image_link_missing") /* null */
    val availabilityInvalid = int("availability_invalid") /* null */
    val productPriceInvalid = int("product_price_invalid") /* null */
    val linkFormatInvalid = int("link_format_invalid") /* null */
    val parseLineError = int("parse_line_error") /* null */
    val adwordsFormatInvalid = int("adwords_format_invalid") /* null */
    val productCategoryMissing = int("product_category_missing") /* null */
    val internalServiceError = int("internal_service_error") /* null */
    val noVerifiedDomain = int("no_verified_domain") /* null */
    val adultInvalid = int("adult_invalid") /* null */
    val invalidDomain = int("invalid_domain") /* null */
    val feedLengthTooLong = int("feed_length_too_long") /* null */
    val linkLengthTooLong = int("link_length_too_long") /* null */
    val malformedXml = int("malformed_xml") /* null */
    val redirectInvalid = int("redirect_invalid") /* null */
    val priceMissing = int("price_missing") /* null */
    val feedTooSmall = int("feed_too_small") /* null */
    val conditionInvalid = int("condition_invalid") /* null */
    val shopifyNoProducts = int("shopify_no_products") /* null */
    val maxItemsPerItemGroupExceeded = int("max_items_per_item_group_exceeded") /* null */
    val itemMainImageDownloadFailure = int("item_main_image_download_failure") /* null */
    val pinjoinContentUnsafe = int("pinjoin_content_unsafe") /* null */
    val blocklistedImageSignature = int("blocklisted_image_signature") /* null */

    /**
     * Create an entity of type CatalogsFeedValidationErrors from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsFeedValidationErrors(
        fetchError = row[fetchError]  /* kotlin.Int? */,
        fetchInactiveFeedError = row[fetchInactiveFeedError]  /* kotlin.Int? */,
        encodingError = row[encodingError]  /* kotlin.Int? */,
        delimiterError = row[delimiterError]  /* kotlin.Int? */,
        requiredColumnsMissing = row[requiredColumnsMissing]  /* kotlin.Int? */,
        imageLinkInvalid = row[imageLinkInvalid]  /* kotlin.Int? */,
        itemidMissing = row[itemidMissing]  /* kotlin.Int? */,
        titleMissing = row[titleMissing]  /* kotlin.Int? */,
        descriptionMissing = row[descriptionMissing]  /* kotlin.Int? */,
        productCategoryInvalid = row[productCategoryInvalid]  /* kotlin.Int? */,
        productLinkMissing = row[productLinkMissing]  /* kotlin.Int? */,
        imageLinkMissing = row[imageLinkMissing]  /* kotlin.Int? */,
        availabilityInvalid = row[availabilityInvalid]  /* kotlin.Int? */,
        productPriceInvalid = row[productPriceInvalid]  /* kotlin.Int? */,
        linkFormatInvalid = row[linkFormatInvalid]  /* kotlin.Int? */,
        parseLineError = row[parseLineError]  /* kotlin.Int? */,
        adwordsFormatInvalid = row[adwordsFormatInvalid]  /* kotlin.Int? */,
        productCategoryMissing = row[productCategoryMissing]  /* kotlin.Int? */,
        internalServiceError = row[internalServiceError]  /* kotlin.Int? */,
        noVerifiedDomain = row[noVerifiedDomain]  /* kotlin.Int? */,
        adultInvalid = row[adultInvalid]  /* kotlin.Int? */,
        invalidDomain = row[invalidDomain]  /* kotlin.Int? */,
        feedLengthTooLong = row[feedLengthTooLong]  /* kotlin.Int? */,
        linkLengthTooLong = row[linkLengthTooLong]  /* kotlin.Int? */,
        malformedXml = row[malformedXml]  /* kotlin.Int? */,
        redirectInvalid = row[redirectInvalid]  /* kotlin.Int? */,
        priceMissing = row[priceMissing]  /* kotlin.Int? */,
        feedTooSmall = row[feedTooSmall]  /* kotlin.Int? */,
        conditionInvalid = row[conditionInvalid]  /* kotlin.Int? */,
        shopifyNoProducts = row[shopifyNoProducts]  /* kotlin.Int? */,
        maxItemsPerItemGroupExceeded = row[maxItemsPerItemGroupExceeded]  /* kotlin.Int? */,
        itemMainImageDownloadFailure = row[itemMainImageDownloadFailure]  /* kotlin.Int? */,
        pinjoinContentUnsafe = row[pinjoinContentUnsafe]  /* kotlin.Int? */,
        blocklistedImageSignature = row[blocklistedImageSignature]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsFeedValidationErrors to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsFeedValidationErrors()
    * database.update(CatalogsFeedValidationErrorss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsFeedValidationErrors) {
        this.apply {
            set(CatalogsFeedValidationErrorss.fetchError, entity.fetchError)
            set(CatalogsFeedValidationErrorss.fetchInactiveFeedError, entity.fetchInactiveFeedError)
            set(CatalogsFeedValidationErrorss.encodingError, entity.encodingError)
            set(CatalogsFeedValidationErrorss.delimiterError, entity.delimiterError)
            set(CatalogsFeedValidationErrorss.requiredColumnsMissing, entity.requiredColumnsMissing)
            set(CatalogsFeedValidationErrorss.imageLinkInvalid, entity.imageLinkInvalid)
            set(CatalogsFeedValidationErrorss.itemidMissing, entity.itemidMissing)
            set(CatalogsFeedValidationErrorss.titleMissing, entity.titleMissing)
            set(CatalogsFeedValidationErrorss.descriptionMissing, entity.descriptionMissing)
            set(CatalogsFeedValidationErrorss.productCategoryInvalid, entity.productCategoryInvalid)
            set(CatalogsFeedValidationErrorss.productLinkMissing, entity.productLinkMissing)
            set(CatalogsFeedValidationErrorss.imageLinkMissing, entity.imageLinkMissing)
            set(CatalogsFeedValidationErrorss.availabilityInvalid, entity.availabilityInvalid)
            set(CatalogsFeedValidationErrorss.productPriceInvalid, entity.productPriceInvalid)
            set(CatalogsFeedValidationErrorss.linkFormatInvalid, entity.linkFormatInvalid)
            set(CatalogsFeedValidationErrorss.parseLineError, entity.parseLineError)
            set(CatalogsFeedValidationErrorss.adwordsFormatInvalid, entity.adwordsFormatInvalid)
            set(CatalogsFeedValidationErrorss.productCategoryMissing, entity.productCategoryMissing)
            set(CatalogsFeedValidationErrorss.internalServiceError, entity.internalServiceError)
            set(CatalogsFeedValidationErrorss.noVerifiedDomain, entity.noVerifiedDomain)
            set(CatalogsFeedValidationErrorss.adultInvalid, entity.adultInvalid)
            set(CatalogsFeedValidationErrorss.invalidDomain, entity.invalidDomain)
            set(CatalogsFeedValidationErrorss.feedLengthTooLong, entity.feedLengthTooLong)
            set(CatalogsFeedValidationErrorss.linkLengthTooLong, entity.linkLengthTooLong)
            set(CatalogsFeedValidationErrorss.malformedXml, entity.malformedXml)
            set(CatalogsFeedValidationErrorss.redirectInvalid, entity.redirectInvalid)
            set(CatalogsFeedValidationErrorss.priceMissing, entity.priceMissing)
            set(CatalogsFeedValidationErrorss.feedTooSmall, entity.feedTooSmall)
            set(CatalogsFeedValidationErrorss.conditionInvalid, entity.conditionInvalid)
            set(CatalogsFeedValidationErrorss.shopifyNoProducts, entity.shopifyNoProducts)
            set(CatalogsFeedValidationErrorss.maxItemsPerItemGroupExceeded, entity.maxItemsPerItemGroupExceeded)
            set(CatalogsFeedValidationErrorss.itemMainImageDownloadFailure, entity.itemMainImageDownloadFailure)
            set(CatalogsFeedValidationErrorss.pinjoinContentUnsafe, entity.pinjoinContentUnsafe)
            set(CatalogsFeedValidationErrorss.blocklistedImageSignature, entity.blocklistedImageSignature)
        }
    }

}


