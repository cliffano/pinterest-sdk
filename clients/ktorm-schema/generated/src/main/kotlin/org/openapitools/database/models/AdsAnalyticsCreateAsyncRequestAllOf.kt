/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param startDate Metric report start date (UTC). Format: YYYY-MM-DD
 * @param endDate Metric report end date (UTC). Format: YYYY-MM-DD
 * @param granularity TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
 * @param clickWindowDays Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
 * @param engagementWindowDays Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
 * @param viewWindowDays Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
 * @param conversionReportTime The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
 * @param attributionTypes List of types of attribution for the conversion report
 */
object AdsAnalyticsCreateAsyncRequestAllOfs : BaseTable<AdsAnalyticsCreateAsyncRequestAllOf>("AdsAnalyticsCreateAsyncRequest_allOf") {
    val startDate = text("start_date") /* Metric report start date (UTC). Format: YYYY-MM-DD */
    val endDate = text("end_date") /* Metric report end date (UTC). Format: YYYY-MM-DD */
    val granularity = long("granularity") /* TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly */
    val clickWindowDays = long("click_window_days") /* null */ /* Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */
    val engagementWindowDays = long("engagement_window_days") /* null */ /* Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */
    val viewWindowDays = long("view_window_days") /* null */ /* Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. */
    val conversionReportTime = long("conversion_report_time") /* null */ /* The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. */

    /**
     * Create an entity of type AdsAnalyticsCreateAsyncRequestAllOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdsAnalyticsCreateAsyncRequestAllOf(
        startDate = row[startDate] ?: "" /* kotlin.String */ /* Metric report start date (UTC). Format: YYYY-MM-DD */,
        endDate = row[endDate] ?: "" /* kotlin.String */ /* Metric report end date (UTC). Format: YYYY-MM-DD */,
        granularity = Granularitys.createEntity(row, withReferences) /* Granularity */ /* TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly */,
        clickWindowDays = ConversionAttributionWindowDayss.createEntity(row, withReferences) /* ConversionAttributionWindowDays? */ /* Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */,
        engagementWindowDays = ConversionAttributionWindowDayss.createEntity(row, withReferences) /* ConversionAttributionWindowDays? */ /* Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */,
        viewWindowDays = ConversionAttributionWindowDayss.createEntity(row, withReferences) /* ConversionAttributionWindowDays? */ /* Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. */,
        conversionReportTime = ConversionReportTimeTypes.createEntity(row, withReferences) /* ConversionReportTimeType? */ /* The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. */,
        attributionTypes = emptyList() /* kotlin.Array<ConversionReportAttributionType>? */ /* List of types of attribution for the conversion report */
    )

    /**
    * Assign all the columns from the entity of type AdsAnalyticsCreateAsyncRequestAllOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdsAnalyticsCreateAsyncRequestAllOf()
    * database.update(AdsAnalyticsCreateAsyncRequestAllOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdsAnalyticsCreateAsyncRequestAllOf) {
        this.apply {
            set(AdsAnalyticsCreateAsyncRequestAllOfs.startDate, entity.startDate)
            set(AdsAnalyticsCreateAsyncRequestAllOfs.endDate, entity.endDate)
            set(AdsAnalyticsCreateAsyncRequestAllOfs.granularity, entity.granularity)
            set(AdsAnalyticsCreateAsyncRequestAllOfs.clickWindowDays, entity.clickWindowDays)
            set(AdsAnalyticsCreateAsyncRequestAllOfs.engagementWindowDays, entity.engagementWindowDays)
            set(AdsAnalyticsCreateAsyncRequestAllOfs.viewWindowDays, entity.viewWindowDays)
            set(AdsAnalyticsCreateAsyncRequestAllOfs.conversionReportTime, entity.conversionReportTime)
        }
    }

}


object AdsAnalyticsCreateAsyncRequestAllOfConversionReportAttributionType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("AdsAnalyticsCreateAsyncRequestAllOfConversionReportAttributionType") {
    val adsAnalyticsCreateAsyncRequestAllOf = long("adsAnalyticsCreateAsyncRequestAllOf")
    val conversionReportAttributionType = long("conversionReportAttributionType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[adsAnalyticsCreateAsyncRequestAllOf] ?: 0, row[conversionReportAttributionType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(AdsAnalyticsCreateAsyncRequestAllOfConversionReportAttributionType.adsAnalyticsCreateAsyncRequestAllOf, entity.first)
            set(AdsAnalyticsCreateAsyncRequestAllOfConversionReportAttributionType.conversionReportAttributionType, entity.second)
        }
    }

}

