/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param titleLengthTooLong 
 * @param descriptionLengthTooLong 
 * @param genderInvalid 
 * @param ageGroupInvalid 
 * @param sizeTypeInvalid 
 * @param linkFormatWarning 
 * @param duplicateProducts 
 * @param duplicateLinks 
 * @param salesPriceInvalid 
 * @param productCategoryDepthWarning 
 * @param adwordsSameAsLink 
 * @param duplicateHeaders 
 * @param fetchSameSignature 
 * @param adwordsFormatWarning 
 * @param additionalImageLinkWarning 
 * @param imageLinkWarning 
 * @param shippingInvalid 
 * @param taxInvalid 
 * @param shippingWeightInvalid 
 * @param expirationDateInvalid 
 * @param availabilityDateInvalid 
 * @param saleDateInvalid 
 * @param weightUnitInvalid 
 * @param isBundleInvalid 
 * @param updatedTimeInvalid 
 * @param customLabelLengthTooLong 
 * @param productTypeLengthTooLong 
 * @param tooManyAdditionalImageLinks 
 * @param multipackInvalid 
 * @param indexedProductCountLargeDelta 
 * @param itemAdditionalImageDownloadFailure 
 * @param optionalProductCategoryMissing 
 * @param optionalProductCategoryInvalid 
 * @param optionalConditionMissing 
 * @param optionalConditionInvalid 
 * @param iosDeepLinkInvalid 
 * @param androidDeepLinkInvalid 
 * @param availabilityNormalized 
 * @param conditionNormalized 
 * @param genderNormalized 
 * @param sizeTypeNormalized 
 * @param ageGroupNormalized 
 * @param utmSourceAutoCorrected 
 * @param countryDoesNotMapToCurrency 
 * @param minAdPriceInvalid 
 */
object CatalogsFeedValidationWarningss : BaseTable<CatalogsFeedValidationWarnings>("CatalogsFeedValidationWarnings") {
    val titleLengthTooLong = int("title_length_too_long") /* null */
    val descriptionLengthTooLong = int("description_length_too_long") /* null */
    val genderInvalid = int("gender_invalid") /* null */
    val ageGroupInvalid = int("age_group_invalid") /* null */
    val sizeTypeInvalid = int("size_type_invalid") /* null */
    val linkFormatWarning = int("link_format_warning") /* null */
    val duplicateProducts = int("duplicate_products") /* null */
    val duplicateLinks = int("duplicate_links") /* null */
    val salesPriceInvalid = int("sales_price_invalid") /* null */
    val productCategoryDepthWarning = int("product_category_depth_warning") /* null */
    val adwordsSameAsLink = int("adwords_same_as_link") /* null */
    val duplicateHeaders = int("duplicate_headers") /* null */
    val fetchSameSignature = int("fetch_same_signature") /* null */
    val adwordsFormatWarning = int("adwords_format_warning") /* null */
    val additionalImageLinkWarning = int("additional_image_link_warning") /* null */
    val imageLinkWarning = int("image_link_warning") /* null */
    val shippingInvalid = int("shipping_invalid") /* null */
    val taxInvalid = int("tax_invalid") /* null */
    val shippingWeightInvalid = int("shipping_weight_invalid") /* null */
    val expirationDateInvalid = int("expiration_date_invalid") /* null */
    val availabilityDateInvalid = int("availability_date_invalid") /* null */
    val saleDateInvalid = int("sale_date_invalid") /* null */
    val weightUnitInvalid = int("weight_unit_invalid") /* null */
    val isBundleInvalid = int("is_bundle_invalid") /* null */
    val updatedTimeInvalid = int("updated_time_invalid") /* null */
    val customLabelLengthTooLong = int("custom_label_length_too_long") /* null */
    val productTypeLengthTooLong = int("product_type_length_too_long") /* null */
    val tooManyAdditionalImageLinks = int("too_many_additional_image_links") /* null */
    val multipackInvalid = int("multipack_invalid") /* null */
    val indexedProductCountLargeDelta = int("indexed_product_count_large_delta") /* null */
    val itemAdditionalImageDownloadFailure = int("item_additional_image_download_failure") /* null */
    val optionalProductCategoryMissing = int("optional_product_category_missing") /* null */
    val optionalProductCategoryInvalid = int("optional_product_category_invalid") /* null */
    val optionalConditionMissing = int("optional_condition_missing") /* null */
    val optionalConditionInvalid = int("optional_condition_invalid") /* null */
    val iosDeepLinkInvalid = int("ios_deep_link_invalid") /* null */
    val androidDeepLinkInvalid = int("android_deep_link_invalid") /* null */
    val availabilityNormalized = int("availability_normalized") /* null */
    val conditionNormalized = int("condition_normalized") /* null */
    val genderNormalized = int("gender_normalized") /* null */
    val sizeTypeNormalized = int("size_type_normalized") /* null */
    val ageGroupNormalized = int("age_group_normalized") /* null */
    val utmSourceAutoCorrected = int("utm_source_auto_corrected") /* null */
    val countryDoesNotMapToCurrency = int("country_does_not_map_to_currency") /* null */
    val minAdPriceInvalid = int("min_ad_price_invalid") /* null */

    /**
     * Create an entity of type CatalogsFeedValidationWarnings from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsFeedValidationWarnings(
        titleLengthTooLong = row[titleLengthTooLong]  /* kotlin.Int? */,
        descriptionLengthTooLong = row[descriptionLengthTooLong]  /* kotlin.Int? */,
        genderInvalid = row[genderInvalid]  /* kotlin.Int? */,
        ageGroupInvalid = row[ageGroupInvalid]  /* kotlin.Int? */,
        sizeTypeInvalid = row[sizeTypeInvalid]  /* kotlin.Int? */,
        linkFormatWarning = row[linkFormatWarning]  /* kotlin.Int? */,
        duplicateProducts = row[duplicateProducts]  /* kotlin.Int? */,
        duplicateLinks = row[duplicateLinks]  /* kotlin.Int? */,
        salesPriceInvalid = row[salesPriceInvalid]  /* kotlin.Int? */,
        productCategoryDepthWarning = row[productCategoryDepthWarning]  /* kotlin.Int? */,
        adwordsSameAsLink = row[adwordsSameAsLink]  /* kotlin.Int? */,
        duplicateHeaders = row[duplicateHeaders]  /* kotlin.Int? */,
        fetchSameSignature = row[fetchSameSignature]  /* kotlin.Int? */,
        adwordsFormatWarning = row[adwordsFormatWarning]  /* kotlin.Int? */,
        additionalImageLinkWarning = row[additionalImageLinkWarning]  /* kotlin.Int? */,
        imageLinkWarning = row[imageLinkWarning]  /* kotlin.Int? */,
        shippingInvalid = row[shippingInvalid]  /* kotlin.Int? */,
        taxInvalid = row[taxInvalid]  /* kotlin.Int? */,
        shippingWeightInvalid = row[shippingWeightInvalid]  /* kotlin.Int? */,
        expirationDateInvalid = row[expirationDateInvalid]  /* kotlin.Int? */,
        availabilityDateInvalid = row[availabilityDateInvalid]  /* kotlin.Int? */,
        saleDateInvalid = row[saleDateInvalid]  /* kotlin.Int? */,
        weightUnitInvalid = row[weightUnitInvalid]  /* kotlin.Int? */,
        isBundleInvalid = row[isBundleInvalid]  /* kotlin.Int? */,
        updatedTimeInvalid = row[updatedTimeInvalid]  /* kotlin.Int? */,
        customLabelLengthTooLong = row[customLabelLengthTooLong]  /* kotlin.Int? */,
        productTypeLengthTooLong = row[productTypeLengthTooLong]  /* kotlin.Int? */,
        tooManyAdditionalImageLinks = row[tooManyAdditionalImageLinks]  /* kotlin.Int? */,
        multipackInvalid = row[multipackInvalid]  /* kotlin.Int? */,
        indexedProductCountLargeDelta = row[indexedProductCountLargeDelta]  /* kotlin.Int? */,
        itemAdditionalImageDownloadFailure = row[itemAdditionalImageDownloadFailure]  /* kotlin.Int? */,
        optionalProductCategoryMissing = row[optionalProductCategoryMissing]  /* kotlin.Int? */,
        optionalProductCategoryInvalid = row[optionalProductCategoryInvalid]  /* kotlin.Int? */,
        optionalConditionMissing = row[optionalConditionMissing]  /* kotlin.Int? */,
        optionalConditionInvalid = row[optionalConditionInvalid]  /* kotlin.Int? */,
        iosDeepLinkInvalid = row[iosDeepLinkInvalid]  /* kotlin.Int? */,
        androidDeepLinkInvalid = row[androidDeepLinkInvalid]  /* kotlin.Int? */,
        availabilityNormalized = row[availabilityNormalized]  /* kotlin.Int? */,
        conditionNormalized = row[conditionNormalized]  /* kotlin.Int? */,
        genderNormalized = row[genderNormalized]  /* kotlin.Int? */,
        sizeTypeNormalized = row[sizeTypeNormalized]  /* kotlin.Int? */,
        ageGroupNormalized = row[ageGroupNormalized]  /* kotlin.Int? */,
        utmSourceAutoCorrected = row[utmSourceAutoCorrected]  /* kotlin.Int? */,
        countryDoesNotMapToCurrency = row[countryDoesNotMapToCurrency]  /* kotlin.Int? */,
        minAdPriceInvalid = row[minAdPriceInvalid]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsFeedValidationWarnings to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsFeedValidationWarnings()
    * database.update(CatalogsFeedValidationWarningss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsFeedValidationWarnings) {
        this.apply {
            set(CatalogsFeedValidationWarningss.titleLengthTooLong, entity.titleLengthTooLong)
            set(CatalogsFeedValidationWarningss.descriptionLengthTooLong, entity.descriptionLengthTooLong)
            set(CatalogsFeedValidationWarningss.genderInvalid, entity.genderInvalid)
            set(CatalogsFeedValidationWarningss.ageGroupInvalid, entity.ageGroupInvalid)
            set(CatalogsFeedValidationWarningss.sizeTypeInvalid, entity.sizeTypeInvalid)
            set(CatalogsFeedValidationWarningss.linkFormatWarning, entity.linkFormatWarning)
            set(CatalogsFeedValidationWarningss.duplicateProducts, entity.duplicateProducts)
            set(CatalogsFeedValidationWarningss.duplicateLinks, entity.duplicateLinks)
            set(CatalogsFeedValidationWarningss.salesPriceInvalid, entity.salesPriceInvalid)
            set(CatalogsFeedValidationWarningss.productCategoryDepthWarning, entity.productCategoryDepthWarning)
            set(CatalogsFeedValidationWarningss.adwordsSameAsLink, entity.adwordsSameAsLink)
            set(CatalogsFeedValidationWarningss.duplicateHeaders, entity.duplicateHeaders)
            set(CatalogsFeedValidationWarningss.fetchSameSignature, entity.fetchSameSignature)
            set(CatalogsFeedValidationWarningss.adwordsFormatWarning, entity.adwordsFormatWarning)
            set(CatalogsFeedValidationWarningss.additionalImageLinkWarning, entity.additionalImageLinkWarning)
            set(CatalogsFeedValidationWarningss.imageLinkWarning, entity.imageLinkWarning)
            set(CatalogsFeedValidationWarningss.shippingInvalid, entity.shippingInvalid)
            set(CatalogsFeedValidationWarningss.taxInvalid, entity.taxInvalid)
            set(CatalogsFeedValidationWarningss.shippingWeightInvalid, entity.shippingWeightInvalid)
            set(CatalogsFeedValidationWarningss.expirationDateInvalid, entity.expirationDateInvalid)
            set(CatalogsFeedValidationWarningss.availabilityDateInvalid, entity.availabilityDateInvalid)
            set(CatalogsFeedValidationWarningss.saleDateInvalid, entity.saleDateInvalid)
            set(CatalogsFeedValidationWarningss.weightUnitInvalid, entity.weightUnitInvalid)
            set(CatalogsFeedValidationWarningss.isBundleInvalid, entity.isBundleInvalid)
            set(CatalogsFeedValidationWarningss.updatedTimeInvalid, entity.updatedTimeInvalid)
            set(CatalogsFeedValidationWarningss.customLabelLengthTooLong, entity.customLabelLengthTooLong)
            set(CatalogsFeedValidationWarningss.productTypeLengthTooLong, entity.productTypeLengthTooLong)
            set(CatalogsFeedValidationWarningss.tooManyAdditionalImageLinks, entity.tooManyAdditionalImageLinks)
            set(CatalogsFeedValidationWarningss.multipackInvalid, entity.multipackInvalid)
            set(CatalogsFeedValidationWarningss.indexedProductCountLargeDelta, entity.indexedProductCountLargeDelta)
            set(CatalogsFeedValidationWarningss.itemAdditionalImageDownloadFailure, entity.itemAdditionalImageDownloadFailure)
            set(CatalogsFeedValidationWarningss.optionalProductCategoryMissing, entity.optionalProductCategoryMissing)
            set(CatalogsFeedValidationWarningss.optionalProductCategoryInvalid, entity.optionalProductCategoryInvalid)
            set(CatalogsFeedValidationWarningss.optionalConditionMissing, entity.optionalConditionMissing)
            set(CatalogsFeedValidationWarningss.optionalConditionInvalid, entity.optionalConditionInvalid)
            set(CatalogsFeedValidationWarningss.iosDeepLinkInvalid, entity.iosDeepLinkInvalid)
            set(CatalogsFeedValidationWarningss.androidDeepLinkInvalid, entity.androidDeepLinkInvalid)
            set(CatalogsFeedValidationWarningss.availabilityNormalized, entity.availabilityNormalized)
            set(CatalogsFeedValidationWarningss.conditionNormalized, entity.conditionNormalized)
            set(CatalogsFeedValidationWarningss.genderNormalized, entity.genderNormalized)
            set(CatalogsFeedValidationWarningss.sizeTypeNormalized, entity.sizeTypeNormalized)
            set(CatalogsFeedValidationWarningss.ageGroupNormalized, entity.ageGroupNormalized)
            set(CatalogsFeedValidationWarningss.utmSourceAutoCorrected, entity.utmSourceAutoCorrected)
            set(CatalogsFeedValidationWarningss.countryDoesNotMapToCurrency, entity.countryDoesNotMapToCurrency)
            set(CatalogsFeedValidationWarningss.minAdPriceInvalid, entity.minAdPriceInvalid)
        }
    }

}


