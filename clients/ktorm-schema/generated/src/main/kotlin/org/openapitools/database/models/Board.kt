/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Board
 * @param name 
 * @param id 
 * @param description 
 * @param owner 
 * @param privacy Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a>
 */
object Boards : BaseTable<Board>("Board") {
    val name = text("name")
    val id = text("id") /* null */
    val description = text("description") /* null */
    val owner = long("owner") /* null */
    val privacy = text("privacy").transform({ Board.Privacy.valueOf(it ?: "PUBLIC") }, { it.value }) /* null */ /* Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a> */


    /**
     * Create an entity of type Board from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Board(
        name = row[name] ?: "" /* kotlin.String */,
        id = row[id]  /* kotlin.String? */,
        description = row[description]  /* kotlin.String? */,
        owner = BoardOwners.createEntity(row, withReferences) /* BoardOwner? */,
        privacy = row[privacy] ?: Privacy.pUBLIC /* kotlin.String? */ /* Privacy setting for a board. Learn more about <a href=\"https://help.pinterest.com/en/article/secret-boards\">secret boards</a> and <a href=\"https://help.pinterest.com/en/business/article/protected-boards\">protected boards</a> */
    )

    /**
    * Assign all the columns from the entity of type Board to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Board()
    * database.update(Boards, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Board) {
        this.apply {
            set(Boards.name, entity.name)
            set(Boards.id, entity.id)
            set(Boards.description, entity.description)
            set(Boards.owner, entity.owner)
            set(Boards.privacy, entity.privacy)
        }
    }

}


