/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param imageDownloadError 
 * @param imageDownloadConnectionTimeout 
 * @param imageFormatUnrecognize 
 * @param lineLevelInternalError 
 * @param largeProductCountDecrease 
 */
object CatalogsFeedIngestionErrorss : BaseTable<CatalogsFeedIngestionErrors>("CatalogsFeedIngestionErrors") {
    val imageDownloadError = int("image_download_error") /* null */
    val imageDownloadConnectionTimeout = int("image_download_connection_timeout") /* null */
    val imageFormatUnrecognize = int("image_format_unrecognize") /* null */
    val lineLevelInternalError = int("line_level_internal_error") /* null */
    val largeProductCountDecrease = int("large_product_count_decrease").transform({ CatalogsFeedIngestionErrors.LargeProductCountDecrease.valueOf(it ?: 1) }, { it.value }) /* null */


    /**
     * Create an entity of type CatalogsFeedIngestionErrors from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsFeedIngestionErrors(
        imageDownloadError = row[imageDownloadError]  /* kotlin.Int? */,
        imageDownloadConnectionTimeout = row[imageDownloadConnectionTimeout]  /* kotlin.Int? */,
        imageFormatUnrecognize = row[imageFormatUnrecognize]  /* kotlin.Int? */,
        lineLevelInternalError = row[lineLevelInternalError]  /* kotlin.Int? */,
        largeProductCountDecrease = row[largeProductCountDecrease]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsFeedIngestionErrors to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsFeedIngestionErrors()
    * database.update(CatalogsFeedIngestionErrorss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsFeedIngestionErrors) {
        this.apply {
            set(CatalogsFeedIngestionErrorss.imageDownloadError, entity.imageDownloadError)
            set(CatalogsFeedIngestionErrorss.imageDownloadConnectionTimeout, entity.imageDownloadConnectionTimeout)
            set(CatalogsFeedIngestionErrorss.imageFormatUnrecognize, entity.imageFormatUnrecognize)
            set(CatalogsFeedIngestionErrorss.lineLevelInternalError, entity.lineLevelInternalError)
            set(CatalogsFeedIngestionErrorss.largeProductCountDecrease, entity.largeProductCountDecrease)
        }
    }

}


