/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
 * @param impression 
 * @param click 
 * @param engagement 
 * @param buyableButton 
 * @param audienceVerification 
 */
object AdGroupCommonTrackingUrlss : BaseTable<AdGroupCommonTrackingUrls>("AdGroupCommon_tracking_urls") {

    /**
     * Create an entity of type AdGroupCommonTrackingUrls from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdGroupCommonTrackingUrls(
        impression = emptyList() /* kotlin.Array<kotlin.String>? */,
        click = emptyList() /* kotlin.Array<kotlin.String>? */,
        engagement = emptyList() /* kotlin.Array<kotlin.String>? */,
        buyableButton = emptyList() /* kotlin.Array<kotlin.String>? */,
        audienceVerification = emptyList() /* kotlin.Array<kotlin.String>? */
    )

    /**
    * Assign all the columns from the entity of type AdGroupCommonTrackingUrls to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdGroupCommonTrackingUrls()
    * database.update(AdGroupCommonTrackingUrlss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdGroupCommonTrackingUrls) {
        this.apply {
        }
    }

}


object AdGroupCommonTrackingUrlsImpression : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupCommonTrackingUrlsImpression") {
    val adGroupCommonTrackingUrls = long("adGroupCommonTrackingUrls")
    val impression = text("impression")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupCommonTrackingUrls] ?: 0, row[impression] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupCommonTrackingUrlsImpression.adGroupCommonTrackingUrls, entity.first)
            set(AdGroupCommonTrackingUrlsImpression.impression, entity.second)
        }
    }

}

object AdGroupCommonTrackingUrlsClick : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupCommonTrackingUrlsClick") {
    val adGroupCommonTrackingUrls = long("adGroupCommonTrackingUrls")
    val click = text("click")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupCommonTrackingUrls] ?: 0, row[click] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupCommonTrackingUrlsClick.adGroupCommonTrackingUrls, entity.first)
            set(AdGroupCommonTrackingUrlsClick.click, entity.second)
        }
    }

}

object AdGroupCommonTrackingUrlsEngagement : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupCommonTrackingUrlsEngagement") {
    val adGroupCommonTrackingUrls = long("adGroupCommonTrackingUrls")
    val engagement = text("engagement")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupCommonTrackingUrls] ?: 0, row[engagement] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupCommonTrackingUrlsEngagement.adGroupCommonTrackingUrls, entity.first)
            set(AdGroupCommonTrackingUrlsEngagement.engagement, entity.second)
        }
    }

}

object AdGroupCommonTrackingUrlsBuyableButton : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupCommonTrackingUrlsBuyableButton") {
    val adGroupCommonTrackingUrls = long("adGroupCommonTrackingUrls")
    val buyableButton = text("buyableButton")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupCommonTrackingUrls] ?: 0, row[buyableButton] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupCommonTrackingUrlsBuyableButton.adGroupCommonTrackingUrls, entity.first)
            set(AdGroupCommonTrackingUrlsBuyableButton.buyableButton, entity.second)
        }
    }

}

object AdGroupCommonTrackingUrlsAudienceVerification : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdGroupCommonTrackingUrlsAudienceVerification") {
    val adGroupCommonTrackingUrls = long("adGroupCommonTrackingUrls")
    val audienceVerification = text("audienceVerification")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adGroupCommonTrackingUrls] ?: 0, row[audienceVerification] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdGroupCommonTrackingUrlsAudienceVerification.adGroupCommonTrackingUrls, entity.first)
            set(AdGroupCommonTrackingUrlsAudienceVerification.audienceVerification, entity.second)
        }
    }

}

