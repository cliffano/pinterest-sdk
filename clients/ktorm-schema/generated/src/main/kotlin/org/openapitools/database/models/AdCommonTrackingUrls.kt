/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.12.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param impression 
 * @param click 
 * @param engagement 
 * @param buyableButton 
 * @param audienceVerification 
 */
object AdCommonTrackingUrlss : BaseTable<AdCommonTrackingUrls>("AdCommon_tracking_urls") {

    /**
     * Create an entity of type AdCommonTrackingUrls from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AdCommonTrackingUrls(
        impression = emptyList() /* kotlin.Array<kotlin.String>? */,
        click = emptyList() /* kotlin.Array<kotlin.String>? */,
        engagement = emptyList() /* kotlin.Array<kotlin.String>? */,
        buyableButton = emptyList() /* kotlin.Array<kotlin.String>? */,
        audienceVerification = emptyList() /* kotlin.Array<kotlin.String>? */
    )

    /**
    * Assign all the columns from the entity of type AdCommonTrackingUrls to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AdCommonTrackingUrls()
    * database.update(AdCommonTrackingUrlss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AdCommonTrackingUrls) {
        this.apply {
        }
    }

}


object AdCommonTrackingUrlsImpression : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdCommonTrackingUrlsImpression") {
    val adCommonTrackingUrls = long("adCommonTrackingUrls")
    val impression = text("impression")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adCommonTrackingUrls] ?: 0, row[impression] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdCommonTrackingUrlsImpression.adCommonTrackingUrls, entity.first)
            set(AdCommonTrackingUrlsImpression.impression, entity.second)
        }
    }

}

object AdCommonTrackingUrlsClick : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdCommonTrackingUrlsClick") {
    val adCommonTrackingUrls = long("adCommonTrackingUrls")
    val click = text("click")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adCommonTrackingUrls] ?: 0, row[click] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdCommonTrackingUrlsClick.adCommonTrackingUrls, entity.first)
            set(AdCommonTrackingUrlsClick.click, entity.second)
        }
    }

}

object AdCommonTrackingUrlsEngagement : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdCommonTrackingUrlsEngagement") {
    val adCommonTrackingUrls = long("adCommonTrackingUrls")
    val engagement = text("engagement")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adCommonTrackingUrls] ?: 0, row[engagement] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdCommonTrackingUrlsEngagement.adCommonTrackingUrls, entity.first)
            set(AdCommonTrackingUrlsEngagement.engagement, entity.second)
        }
    }

}

object AdCommonTrackingUrlsBuyableButton : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdCommonTrackingUrlsBuyableButton") {
    val adCommonTrackingUrls = long("adCommonTrackingUrls")
    val buyableButton = text("buyableButton")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adCommonTrackingUrls] ?: 0, row[buyableButton] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdCommonTrackingUrlsBuyableButton.adCommonTrackingUrls, entity.first)
            set(AdCommonTrackingUrlsBuyableButton.buyableButton, entity.second)
        }
    }

}

object AdCommonTrackingUrlsAudienceVerification : BaseTable<Pair<kotlin.Long, kotlin.String>>("AdCommonTrackingUrlsAudienceVerification") {
    val adCommonTrackingUrls = long("adCommonTrackingUrls")
    val audienceVerification = text("audienceVerification")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[adCommonTrackingUrls] ?: 0, row[audienceVerification] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AdCommonTrackingUrlsAudienceVerification.adCommonTrackingUrls, entity.first)
            set(AdCommonTrackingUrlsAudienceVerification.audienceVerification, entity.second)
        }
    }

}

