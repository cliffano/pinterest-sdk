/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param ingestionDetails 
 * @param status 
 * @param productCounts 
 * @param validationDetails 
 * @param createdAt 
 * @param id 
 * @param updatedAt 
 */
object CatalogsFeedProcessingResults : BaseTable<CatalogsFeedProcessingResult>("CatalogsFeedProcessingResult") {
    val ingestionDetails = long("ingestion_details")
    val status = long("status")
    val productCounts = long("product_counts")
    val validationDetails = long("validation_details")
    val createdAt = datetime("created_at") /* null */
    val id = text("id") /* null */
    val updatedAt = datetime("updated_at") /* null */

    /**
     * Create an entity of type CatalogsFeedProcessingResult from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CatalogsFeedProcessingResult(
        ingestionDetails = CatalogsFeedIngestionDetailss.createEntity(row, withReferences) /* CatalogsFeedIngestionDetails */,
        status = CatalogsFeedProcessingStatuss.createEntity(row, withReferences) /* CatalogsFeedProcessingStatus */,
        productCounts = CatalogsFeedProductCountss.createEntity(row, withReferences) /* CatalogsFeedProductCounts */,
        validationDetails = CatalogsFeedValidationDetailss.createEntity(row, withReferences) /* CatalogsFeedValidationDetails */,
        createdAt = row[createdAt]  /* java.time.LocalDateTime? */,
        id = row[id]  /* kotlin.String? */,
        updatedAt = row[updatedAt]  /* java.time.LocalDateTime? */
    )

    /**
    * Assign all the columns from the entity of type CatalogsFeedProcessingResult to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CatalogsFeedProcessingResult()
    * database.update(CatalogsFeedProcessingResults, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CatalogsFeedProcessingResult) {
        this.apply {
            set(CatalogsFeedProcessingResults.ingestionDetails, entity.ingestionDetails)
            set(CatalogsFeedProcessingResults.status, entity.status)
            set(CatalogsFeedProcessingResults.productCounts, entity.productCounts)
            set(CatalogsFeedProcessingResults.validationDetails, entity.validationDetails)
            set(CatalogsFeedProcessingResults.createdAt, entity.createdAt)
            set(CatalogsFeedProcessingResults.id, entity.id)
            set(CatalogsFeedProcessingResults.updatedAt, entity.updatedAt)
        }
    }

}


