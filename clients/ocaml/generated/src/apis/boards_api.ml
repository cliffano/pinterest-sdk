(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let board_sections_create ~board_id ~board_section_t =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}/sections" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let body = Request.write_as_json_body Board_section.to_yojson board_section_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Board_section.of_yojson) resp body

let board_sections_delete ~board_id ~section_id =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}/sections/{section_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let uri = Request.replace_path_param uri "section_id" (fun x -> x) section_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let board_sections_list ~board_id ?bookmark ?(page_size = 25l) () =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}/sections" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let uri = Request.maybe_add_query_param uri "bookmark" (fun x -> x) bookmark in
    let uri = Request.add_query_param uri "page_size" Int32.to_string page_size in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Paginated.of_yojson) resp body

let board_sections_list_pins ~board_id ~section_id ?bookmark ?(page_size = 25l) () =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}/sections/{section_id}/pins" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let uri = Request.replace_path_param uri "section_id" (fun x -> x) section_id in
    let uri = Request.maybe_add_query_param uri "bookmark" (fun x -> x) bookmark in
    let uri = Request.add_query_param uri "page_size" Int32.to_string page_size in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Paginated.of_yojson) resp body

let board_sections_update ~board_id ~section_id ~board_section_t =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}/sections/{section_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let uri = Request.replace_path_param uri "section_id" (fun x -> x) section_id in
    let body = Request.write_as_json_body Board_section.to_yojson board_section_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Board_section.of_yojson) resp body

let boards_create ~board_t =
    let open Lwt in
    let uri = Request.build_uri "/boards" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Board.to_yojson board_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Board.of_yojson) resp body

let boards_delete ~board_id =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let boards_get ~board_id =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Board.of_yojson) resp body

let boards_list ?bookmark ?(page_size = 25l) ?privacy () =
    let open Lwt in
    let uri = Request.build_uri "/boards" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "bookmark" (fun x -> x) bookmark in
    let uri = Request.add_query_param uri "page_size" Int32.to_string page_size in
    let uri = Request.maybe_add_query_param uri "privacy" Enums.show_board_privacy privacy in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Paginated.of_yojson) resp body

let boards_list_pins ~board_id ?bookmark ?(page_size = 25l) () =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}/pins" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let uri = Request.maybe_add_query_param uri "bookmark" (fun x -> x) bookmark in
    let uri = Request.add_query_param uri "page_size" Int32.to_string page_size in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Paginated.of_yojson) resp body

let boards_update ~board_id ~board_update_t =
    let open Lwt in
    let uri = Request.build_uri "/boards/{board_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "board_id" (fun x -> x) board_id in
    let body = Request.write_as_json_body Board_update.to_yojson board_update_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Board.of_yojson) resp body

