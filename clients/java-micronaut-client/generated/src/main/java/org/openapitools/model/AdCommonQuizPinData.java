/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.QuizPinQuestion;
import org.openapitools.model.QuizPinResult;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved.
 */
@JsonPropertyOrder({
  AdCommonQuizPinData.JSON_PROPERTY_QUESTIONS,
  AdCommonQuizPinData.JSON_PROPERTY_RESULTS
})
@JsonTypeName("AdCommon_quiz_pin_data")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-03-14T23:01:49.950286870Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class AdCommonQuizPinData {
    public static final String JSON_PROPERTY_QUESTIONS = "questions";
    private List<@Valid QuizPinQuestion> questions = null;

    public static final String JSON_PROPERTY_RESULTS = "results";
    private List<@Valid QuizPinResult> results = null;

    public AdCommonQuizPinData() {
    }

    public AdCommonQuizPinData questions(List<@Valid QuizPinQuestion> questions) {
        this.questions = questions;
        return this;
    }

    public AdCommonQuizPinData addQuestionsItem(QuizPinQuestion questionsItem) {
        if (this.questions == null) {
            this.questions = new ArrayList<>();
        }
        this.questions.add(questionsItem);
        return this;
    }

    /**
     * Get questions
     * @return questions
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_QUESTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid QuizPinQuestion> getQuestions() {
        return questions;
    }

    @JsonProperty(JSON_PROPERTY_QUESTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuestions(List<@Valid QuizPinQuestion> questions) {
        this.questions = questions;
    }

    public AdCommonQuizPinData results(List<@Valid QuizPinResult> results) {
        this.results = results;
        return this;
    }

    public AdCommonQuizPinData addResultsItem(QuizPinResult resultsItem) {
        if (this.results == null) {
            this.results = new ArrayList<>();
        }
        this.results.add(resultsItem);
        return this;
    }

    /**
     * Get results
     * @return results
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_RESULTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid QuizPinResult> getResults() {
        return results;
    }

    @JsonProperty(JSON_PROPERTY_RESULTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setResults(List<@Valid QuizPinResult> results) {
        this.results = results;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdCommonQuizPinData adCommonQuizPinData = (AdCommonQuizPinData) o;
        return Objects.equals(this.questions, adCommonQuizPinData.questions) &&
            Objects.equals(this.results, adCommonQuizPinData.results);
    }

    @Override
    public int hashCode() {
        return Objects.hash(questions, results);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AdCommonQuizPinData {\n");
        sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
        sb.append("    results: ").append(toIndentedString(results)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

