/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.model.CatalogsProductGroupFilters;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Request object to list products for a given feed_id and product group filter.
 */
@JsonPropertyOrder({
  CatalogsListProductsByFilterRequestOneOf.JSON_PROPERTY_FEED_ID,
  CatalogsListProductsByFilterRequestOneOf.JSON_PROPERTY_FILTERS
})
@JsonTypeName("CatalogsListProductsByFilterRequest_oneOf")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-03-14T23:01:49.950286870Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class CatalogsListProductsByFilterRequestOneOf {
    public static final String JSON_PROPERTY_FEED_ID = "feed_id";
    private String feedId;

    public static final String JSON_PROPERTY_FILTERS = "filters";
    private CatalogsProductGroupFilters filters;

    public CatalogsListProductsByFilterRequestOneOf(String feedId, CatalogsProductGroupFilters filters) {
        this.feedId = feedId;
        this.filters = filters;
    }

    public CatalogsListProductsByFilterRequestOneOf feedId(String feedId) {
        this.feedId = feedId;
        return this;
    }

    /**
     * Catalog Feed id pertaining to the catalog product group filter.
     * @return feedId
     **/
    @NotNull
    @Pattern(regexp="^\\d+$")
    @JsonProperty(JSON_PROPERTY_FEED_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFeedId() {
        return feedId;
    }

    @JsonProperty(JSON_PROPERTY_FEED_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFeedId(String feedId) {
        this.feedId = feedId;
    }

    public CatalogsListProductsByFilterRequestOneOf filters(CatalogsProductGroupFilters filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get filters
     * @return filters
     **/
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_FILTERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CatalogsProductGroupFilters getFilters() {
        return filters;
    }

    @JsonProperty(JSON_PROPERTY_FILTERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFilters(CatalogsProductGroupFilters filters) {
        this.filters = filters;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsListProductsByFilterRequestOneOf catalogsListProductsByFilterRequestOneOf = (CatalogsListProductsByFilterRequestOneOf) o;
        return Objects.equals(this.feedId, catalogsListProductsByFilterRequestOneOf.feedId) &&
            Objects.equals(this.filters, catalogsListProductsByFilterRequestOneOf.filters);
    }

    @Override
    public int hashCode() {
        return Objects.hash(feedId, filters);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsListProductsByFilterRequestOneOf {\n");
        sb.append("    feedId: ").append(toIndentedString(feedId)).append("\n");
        sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

