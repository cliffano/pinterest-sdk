/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.model.PinMediaSourceImageBase64;
import org.openapitools.model.PinMediaSourceImageURL;
import org.openapitools.model.PinMediaSourceVideoID;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Pin media source.
 */
@ApiModel(description = "Pin media source.")
@JsonPropertyOrder({
  PinMediaSource.JSON_PROPERTY_SOURCE_TYPE,
  PinMediaSource.JSON_PROPERTY_CONTENT_TYPE,
  PinMediaSource.JSON_PROPERTY_DATA,
  PinMediaSource.JSON_PROPERTY_URL,
  PinMediaSource.JSON_PROPERTY_COVER_IMAGE_URL,
  PinMediaSource.JSON_PROPERTY_MEDIA_ID
})
@JsonTypeName("PinMediaSource")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-07-01T11:59:24.863123Z[Etc/UTC]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "source_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = PinMediaSourceImageBase64.class, name = "image_base64"),
  @JsonSubTypes.Type(value = PinMediaSourceImageURL.class, name = "image_url"),
  @JsonSubTypes.Type(value = PinMediaSourceVideoID.class, name = "video_id"),
})

@Introspected
public class PinMediaSource {
    /**
     * Gets or Sets sourceType
     */
    public enum SourceTypeEnum {
        VIDEO_ID("video_id");

        private String value;

        SourceTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SourceTypeEnum fromValue(String value) {
            for (SourceTypeEnum b : SourceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_SOURCE_TYPE = "source_type";
    protected SourceTypeEnum sourceType;

    /**
     * Gets or Sets contentType
     */
    public enum ContentTypeEnum {
        JPEG("image/jpeg"),
        PNG("image/png");

        private String value;

        ContentTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ContentTypeEnum fromValue(String value) {
            for (ContentTypeEnum b : ContentTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
    private ContentTypeEnum contentType;

    public static final String JSON_PROPERTY_DATA = "data";
    private String data;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_COVER_IMAGE_URL = "cover_image_url";
    private String coverImageUrl;

    public static final String JSON_PROPERTY_MEDIA_ID = "media_id";
    private String mediaId;

    public PinMediaSource(SourceTypeEnum sourceType, ContentTypeEnum contentType, String data, String url, String coverImageUrl, String mediaId) {
        this.sourceType = sourceType;
        this.contentType = contentType;
        this.data = data;
        this.url = url;
        this.coverImageUrl = coverImageUrl;
        this.mediaId = mediaId;
    }

    public PinMediaSource sourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get sourceType
     * @return sourceType
     **/
    @NotNull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public SourceTypeEnum getSourceType() {
        return sourceType;
    }

    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public void setSourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
    }

    public PinMediaSource contentType(ContentTypeEnum contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get contentType
     * @return contentType
     **/
    @NotNull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public ContentTypeEnum getContentType() {
        return contentType;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public void setContentType(ContentTypeEnum contentType) {
        this.contentType = contentType;
    }

    public PinMediaSource data(String data) {
        this.data = data;
        return this;
    }

    /**
     * Get data
     * @return data
     **/
    @NotNull
    @Pattern(regexp="[a-zA-Z0-9+/=]+")
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public String getData() {
        return data;
    }

    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public void setData(String data) {
        this.data = data;
    }

    public PinMediaSource url(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get url
     * @return url
     **/
    @NotNull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public void setUrl(String url) {
        this.url = url;
    }

    public PinMediaSource coverImageUrl(String coverImageUrl) {
        this.coverImageUrl = coverImageUrl;
        return this;
    }

    /**
     * Get coverImageUrl
     * @return coverImageUrl
     **/
    @NotNull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public String getCoverImageUrl() {
        return coverImageUrl;
    }

    @JsonProperty(JSON_PROPERTY_COVER_IMAGE_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public void setCoverImageUrl(String coverImageUrl) {
        this.coverImageUrl = coverImageUrl;
    }

    public PinMediaSource mediaId(String mediaId) {
        this.mediaId = mediaId;
        return this;
    }

    /**
     * Get mediaId
     * @return mediaId
     **/
    @NotNull
    @Pattern(regexp="^\\d+$")
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_MEDIA_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public String getMediaId() {
        return mediaId;
    }

    @JsonProperty(JSON_PROPERTY_MEDIA_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
       public void setMediaId(String mediaId) {
        this.mediaId = mediaId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PinMediaSource pinMediaSource = (PinMediaSource) o;
        return Objects.equals(this.sourceType, pinMediaSource.sourceType) &&
            Objects.equals(this.contentType, pinMediaSource.contentType) &&
            Objects.equals(this.data, pinMediaSource.data) &&
            Objects.equals(this.url, pinMediaSource.url) &&
            Objects.equals(this.coverImageUrl, pinMediaSource.coverImageUrl) &&
            Objects.equals(this.mediaId, pinMediaSource.mediaId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceType, contentType, data, url, coverImageUrl, mediaId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PinMediaSource {\n");
        sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    coverImageUrl: ").append(toIndentedString(coverImageUrl)).append("\n");
        sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
