/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CatalogsFeed } from '../model/catalogsFeed';
import { CatalogsFeedsCreateRequest } from '../model/catalogsFeedsCreateRequest';
import { CatalogsFeedsUpdateRequest } from '../model/catalogsFeedsUpdateRequest';
import { CatalogsItems } from '../model/catalogsItems';
import { CatalogsItemsBatch } from '../model/catalogsItemsBatch';
import { CatalogsItemsBatchRequest } from '../model/catalogsItemsBatchRequest';
import { CatalogsProductGroup } from '../model/catalogsProductGroup';
import { CatalogsProductGroupCreateRequest } from '../model/catalogsProductGroupCreateRequest';
import { CatalogsProductGroupUpdateRequest } from '../model/catalogsProductGroupUpdateRequest';
import { Paginated } from '../model/paginated';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class CatalogsService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Create product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group.
     
     */
    public catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, observe?: 'body', headers?: Headers): Observable<object>;
    public catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<object>>;
    public catalogsProductGroupsCreate(catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (catalogsProductGroupCreateRequest === null || catalogsProductGroupCreateRequest === undefined){
            throw new Error('Required parameter catalogsProductGroupCreateRequest was null or undefined when calling catalogsProductGroupsCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<object>> = this.httpClient.post(`${this.basePath}/catalogs/product_groups`, catalogsProductGroupCreateRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
     * @param productGroupId Unique identifier of a product group
     
     */
    public catalogsProductGroupsDelete(productGroupId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public catalogsProductGroupsDelete(productGroupId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public catalogsProductGroupsDelete(productGroupId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (productGroupId === null || productGroupId === undefined){
            throw new Error('Required parameter productGroupId was null or undefined when calling catalogsProductGroupsDelete.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/catalogs/product_groups/${encodeURIComponent(String(productGroupId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get product groups list
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
     * @param feedId Unique identifier of a feed
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public catalogsProductGroupsList(feedId: string, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (feedId === null || feedId === undefined){
            throw new Error('Required parameter feedId was null or undefined when calling catalogsProductGroupsList.');
        }

        let queryParameters: string[] = [];
        if (feedId !== undefined) {
            queryParameters.push('feedId='+encodeURIComponent(String(feedId)));
        }
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/catalogs/product_groups?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
     * @param productGroupId Unique identifier of a product group
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group.
     
     */
    public catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, observe?: 'body', headers?: Headers): Observable<CatalogsProductGroup>;
    public catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsProductGroup>>;
    public catalogsProductGroupsUpdate(productGroupId: string, catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (productGroupId === null || productGroupId === undefined){
            throw new Error('Required parameter productGroupId was null or undefined when calling catalogsProductGroupsUpdate.');
        }

        if (catalogsProductGroupUpdateRequest === null || catalogsProductGroupUpdateRequest === undefined){
            throw new Error('Required parameter catalogsProductGroupUpdateRequest was null or undefined when calling catalogsProductGroupsUpdate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsProductGroup>> = this.httpClient.patch(`${this.basePath}/catalogs/product_groups/${encodeURIComponent(String(productGroupId))}`, catalogsProductGroupUpdateRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsProductGroup>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List processing results for a given feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
     * @param feedId Unique identifier of a feed
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public feedProcessingResultsList(feedId: string, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (feedId === null || feedId === undefined){
            throw new Error('Required parameter feedId was null or undefined when calling feedProcessingResultsList.');
        }

        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/catalogs/feeds/${encodeURIComponent(String(feedId))}/processing_results?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
     * @param catalogsFeedsCreateRequest Request object used to created a feed.
     
     */
    public feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, observe?: 'body', headers?: Headers): Observable<CatalogsFeed>;
    public feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsFeed>>;
    public feedsCreate(catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (catalogsFeedsCreateRequest === null || catalogsFeedsCreateRequest === undefined){
            throw new Error('Required parameter catalogsFeedsCreateRequest was null or undefined when calling feedsCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsFeed>> = this.httpClient.post(`${this.basePath}/catalogs/feeds`, catalogsFeedsCreateRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsFeed>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed
     
     */
    public feedsDelete(feedId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public feedsDelete(feedId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public feedsDelete(feedId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (feedId === null || feedId === undefined){
            throw new Error('Required parameter feedId was null or undefined when calling feedsDelete.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/catalogs/feeds/${encodeURIComponent(String(feedId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed
     
     */
    public feedsGet(feedId: string, observe?: 'body', headers?: Headers): Observable<CatalogsFeed>;
    public feedsGet(feedId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsFeed>>;
    public feedsGet(feedId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (feedId === null || feedId === undefined){
            throw new Error('Required parameter feedId was null or undefined when calling feedsGet.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsFeed>> = this.httpClient.get(`${this.basePath}/catalogs/feeds/${encodeURIComponent(String(feedId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsFeed>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List feeds
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public feedsList(bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public feedsList(bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public feedsList(bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/catalogs/feeds?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed
     * @param catalogsFeedsUpdateRequest Request object used to update a feed.
     
     */
    public feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, observe?: 'body', headers?: Headers): Observable<CatalogsFeed>;
    public feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsFeed>>;
    public feedsUpdate(feedId: string, catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (feedId === null || feedId === undefined){
            throw new Error('Required parameter feedId was null or undefined when calling feedsUpdate.');
        }

        if (catalogsFeedsUpdateRequest === null || catalogsFeedsUpdateRequest === undefined){
            throw new Error('Required parameter catalogsFeedsUpdateRequest was null or undefined when calling feedsUpdate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsFeed>> = this.httpClient.patch(`${this.basePath}/catalogs/feeds/${encodeURIComponent(String(feedId))}`, catalogsFeedsUpdateRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsFeed>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get catalogs items batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
     * @param batchId Id of a catalogs items batch to fetch
     
     */
    public itemsBatchGet(batchId: string, observe?: 'body', headers?: Headers): Observable<CatalogsItemsBatch>;
    public itemsBatchGet(batchId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsItemsBatch>>;
    public itemsBatchGet(batchId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (batchId === null || batchId === undefined){
            throw new Error('Required parameter batchId was null or undefined when calling itemsBatchGet.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsItemsBatch>> = this.httpClient.get(`${this.basePath}/catalogs/items/batch/${encodeURIComponent(String(batchId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsItemsBatch>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Perform an operation on an item batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Understanding-catalog-management\&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch
     
     */
    public itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, observe?: 'body', headers?: Headers): Observable<CatalogsItemsBatch>;
    public itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsItemsBatch>>;
    public itemsBatchPost(catalogsItemsBatchRequest: CatalogsItemsBatchRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (catalogsItemsBatchRequest === null || catalogsItemsBatchRequest === undefined){
            throw new Error('Required parameter catalogsItemsBatchRequest was null or undefined when calling itemsBatchPost.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsItemsBatch>> = this.httpClient.post(`${this.basePath}/catalogs/items/batch`, catalogsItemsBatchRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsItemsBatch>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get catalogs items
     * Get the items of the catalog created by the \&quot;operating user_account\&quot;
     * @param country Country for the Catalogs Items
     * @param itemIds Catalos Item ids
     * @param language Language for the Catalogs Items
     
     */
    public itemsGet(country: string, itemIds: Array<string>, language: string, observe?: 'body', headers?: Headers): Observable<CatalogsItems>;
    public itemsGet(country: string, itemIds: Array<string>, language: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CatalogsItems>>;
    public itemsGet(country: string, itemIds: Array<string>, language: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (country === null || country === undefined){
            throw new Error('Required parameter country was null or undefined when calling itemsGet.');
        }

        if (itemIds === null || itemIds === undefined){
            throw new Error('Required parameter itemIds was null or undefined when calling itemsGet.');
        }

        if (language === null || language === undefined){
            throw new Error('Required parameter language was null or undefined when calling itemsGet.');
        }

        let queryParameters: string[] = [];
        if (country !== undefined) {
            queryParameters.push('country='+encodeURIComponent(String(country)));
        }
        if (itemIds) {
            itemIds.forEach((element) => {
                queryParameters.push('itemIds='+encodeURIComponent(String(element)));
            })
        }
        if (language !== undefined) {
            queryParameters.push('language='+encodeURIComponent(String(language)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CatalogsItems>> = this.httpClient.get(`${this.basePath}/catalogs/items?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CatalogsItems>(httpResponse.response))
               );
        }
        return response;
    }

}
