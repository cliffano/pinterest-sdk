/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { Board } from '../model/board';
import { BoardSection } from '../model/boardSection';
import { BoardUpdate } from '../model/boardUpdate';
import { Paginated } from '../model/paginated';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BoardsService {
    private basePath: string = 'https://api.pinterest.com/v5';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Create board section
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     * @param boardSection Create a board section.
     
     */
    public boardSectionsCreate(boardId: string, boardSection: BoardSection, observe?: 'body', headers?: Headers): Observable<BoardSection>;
    public boardSectionsCreate(boardId: string, boardSection: BoardSection, observe?: 'response', headers?: Headers): Observable<HttpResponse<BoardSection>>;
    public boardSectionsCreate(boardId: string, boardSection: BoardSection, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardSectionsCreate.');
        }

        if (boardSection === null || boardSection === undefined){
            throw new Error('Required parameter boardSection was null or undefined when calling boardSectionsCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<BoardSection>> = this.httpClient.post(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}/sections`, boardSection , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <BoardSection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete board section
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     * @param sectionId Unique identifier of a board section.
     
     */
    public boardSectionsDelete(boardId: string, sectionId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public boardSectionsDelete(boardId: string, sectionId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public boardSectionsDelete(boardId: string, sectionId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardSectionsDelete.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling boardSectionsDelete.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}/sections/${encodeURIComponent(String(sectionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public boardSectionsList(boardId: string, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardSectionsList.');
        }

        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}/sections?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     * @param sectionId Unique identifier of a board section.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public boardSectionsListPins(boardId: string, sectionId: string, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardSectionsListPins.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling boardSectionsListPins.');
        }

        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}/sections/${encodeURIComponent(String(sectionId))}/pins?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update board section
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     * @param sectionId Unique identifier of a board section.
     * @param boardSection Update a board section.
     
     */
    public boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, observe?: 'body', headers?: Headers): Observable<BoardSection>;
    public boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, observe?: 'response', headers?: Headers): Observable<HttpResponse<BoardSection>>;
    public boardSectionsUpdate(boardId: string, sectionId: string, boardSection: BoardSection, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardSectionsUpdate.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling boardSectionsUpdate.');
        }

        if (boardSection === null || boardSection === undefined){
            throw new Error('Required parameter boardSection was null or undefined when calling boardSectionsUpdate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<BoardSection>> = this.httpClient.patch(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}/sections/${encodeURIComponent(String(sectionId))}`, boardSection , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <BoardSection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create board
     * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param board Create a board using a single board json object.
     
     */
    public boardsCreate(board: Board, observe?: 'body', headers?: Headers): Observable<Board>;
    public boardsCreate(board: Board, observe?: 'response', headers?: Headers): Observable<HttpResponse<Board>>;
    public boardsCreate(board: Board, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (board === null || board === undefined){
            throw new Error('Required parameter board was null or undefined when calling boardsCreate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Board>> = this.httpClient.post(`${this.basePath}/boards`, board , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Board>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete board
     * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     
     */
    public boardsDelete(boardId: string, observe?: 'body', headers?: Headers): Observable<any>;
    public boardsDelete(boardId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public boardsDelete(boardId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardsDelete.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     
     */
    public boardsGet(boardId: string, observe?: 'body', headers?: Headers): Observable<Board>;
    public boardsGet(boardId: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Board>>;
    public boardsGet(boardId: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardsGet.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Board>> = this.httpClient.get(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Board>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List boards
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     * @param privacy Privacy setting for a board.
     
     */
    public boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public boardsList(bookmark?: string, pageSize?: number, privacy?: 'PUBLIC' | 'PROTECTED' | 'SECRET', observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (privacy !== undefined) {
            queryParameters.push('privacy='+encodeURIComponent(String(privacy)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/boards?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     * @param boardId Unique identifier of a board.
     * @param bookmark Cursor used to fetch the next page of items
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;\&#39;/docs/api/v5/#tag/Pagination\&#39;&gt;Pagination&lt;/a&gt; for more information.
     
     */
    public boardsListPins(boardId: string, bookmark?: string, pageSize?: number, observe?: 'body', headers?: Headers): Observable<Paginated & object>;
    public boardsListPins(boardId: string, bookmark?: string, pageSize?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Paginated & object>>;
    public boardsListPins(boardId: string, bookmark?: string, pageSize?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardsListPins.');
        }

        let queryParameters: string[] = [];
        if (bookmark !== undefined) {
            queryParameters.push('bookmark='+encodeURIComponent(String(bookmark)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Paginated & object>> = this.httpClient.get(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}/pins?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Paginated & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update board
     * Update a board owned by the \&quot;operating user_account\&quot;.
     * @param boardId Unique identifier of a board.
     * @param boardUpdate Update a board.
     
     */
    public boardsUpdate(boardId: string, boardUpdate: BoardUpdate, observe?: 'body', headers?: Headers): Observable<Board>;
    public boardsUpdate(boardId: string, boardUpdate: BoardUpdate, observe?: 'response', headers?: Headers): Observable<HttpResponse<Board>>;
    public boardsUpdate(boardId: string, boardUpdate: BoardUpdate, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (boardId === null || boardId === undefined){
            throw new Error('Required parameter boardId was null or undefined when calling boardsUpdate.');
        }

        if (boardUpdate === null || boardUpdate === undefined){
            throw new Error('Required parameter boardUpdate was null or undefined when calling boardsUpdate.');
        }

        // authentication (pinterest_oauth2) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Board>> = this.httpClient.patch(`${this.basePath}/boards/${encodeURIComponent(String(boardId))}`, boardUpdate , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Board>(httpResponse.response))
               );
        }
        return response;
    }

}
