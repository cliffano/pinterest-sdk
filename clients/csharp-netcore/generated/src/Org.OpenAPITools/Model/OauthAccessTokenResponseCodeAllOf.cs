/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OauthAccessTokenResponseCodeAllOf
    /// </summary>
    [DataContract(Name = "OauthAccessTokenResponseCode_allOf")]
    public partial class OauthAccessTokenResponseCodeAllOf : IEquatable<OauthAccessTokenResponseCodeAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessTokenResponseCodeAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OauthAccessTokenResponseCodeAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OauthAccessTokenResponseCodeAllOf" /> class.
        /// </summary>
        /// <param name="refreshToken">refreshToken (required).</param>
        /// <param name="refreshTokenExpiresIn">refreshTokenExpiresIn (required).</param>
        public OauthAccessTokenResponseCodeAllOf(string refreshToken = default(string), int refreshTokenExpiresIn = default(int))
        {
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null) {
                throw new ArgumentNullException("refreshToken is a required property for OauthAccessTokenResponseCodeAllOf and cannot be null");
            }
            this.RefreshToken = refreshToken;
            this.RefreshTokenExpiresIn = refreshTokenExpiresIn;
        }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [DataMember(Name = "refresh_token", IsRequired = true, EmitDefaultValue = false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenExpiresIn
        /// </summary>
        [DataMember(Name = "refresh_token_expires_in", IsRequired = true, EmitDefaultValue = false)]
        public int RefreshTokenExpiresIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OauthAccessTokenResponseCodeAllOf {\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  RefreshTokenExpiresIn: ").Append(RefreshTokenExpiresIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OauthAccessTokenResponseCodeAllOf);
        }

        /// <summary>
        /// Returns true if OauthAccessTokenResponseCodeAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of OauthAccessTokenResponseCodeAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OauthAccessTokenResponseCodeAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.RefreshTokenExpiresIn == input.RefreshTokenExpiresIn ||
                    this.RefreshTokenExpiresIn.Equals(input.RefreshTokenExpiresIn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefreshToken != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RefreshTokenExpiresIn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
