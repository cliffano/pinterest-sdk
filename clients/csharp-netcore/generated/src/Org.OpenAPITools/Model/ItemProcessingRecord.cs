/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object describing an item processing record
    /// </summary>
    [DataContract(Name = "ItemProcessingRecord")]
    public partial class ItemProcessingRecord : IEquatable<ItemProcessingRecord>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ItemProcessingStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemProcessingRecord" /> class.
        /// </summary>
        /// <param name="itemId">The catalog item id in the merchant namespace.</param>
        /// <param name="errors">Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail..</param>
        /// <param name="warnings">Array with the validation warnings for the item processing record.</param>
        /// <param name="status">status.</param>
        public ItemProcessingRecord(string itemId = default(string), List<ItemValidationEvent> errors = default(List<ItemValidationEvent>), List<ItemValidationEvent> warnings = default(List<ItemValidationEvent>), ItemProcessingStatus? status = default(ItemProcessingStatus?))
        {
            this.ItemId = itemId;
            this.Errors = errors;
            this.Warnings = warnings;
            this.Status = status;
        }

        /// <summary>
        /// The catalog item id in the merchant namespace
        /// </summary>
        /// <value>The catalog item id in the merchant namespace</value>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.
        /// </summary>
        /// <value>Array with the validation errors for the item processing record. A non empty errors list causes the item processing to fail.</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<ItemValidationEvent> Errors { get; set; }

        /// <summary>
        /// Array with the validation warnings for the item processing record
        /// </summary>
        /// <value>Array with the validation warnings for the item processing record</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<ItemValidationEvent> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemProcessingRecord {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemProcessingRecord);
        }

        /// <summary>
        /// Returns true if ItemProcessingRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemProcessingRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemProcessingRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
