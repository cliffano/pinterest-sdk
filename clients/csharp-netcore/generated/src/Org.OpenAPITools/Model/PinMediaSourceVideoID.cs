/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Video ID-based media source
    /// </summary>
    [DataContract(Name = "PinMediaSourceVideoID")]
    public partial class PinMediaSourceVideoID : IEquatable<PinMediaSourceVideoID>, IValidatableObject
    {
        /// <summary>
        /// Defines SourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceTypeEnum
        {
            /// <summary>
            /// Enum VideoId for value: video_id
            /// </summary>
            [EnumMember(Value = "video_id")]
            VideoId = 1

        }


        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name = "source_type", IsRequired = true, EmitDefaultValue = false)]
        public SourceTypeEnum SourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PinMediaSourceVideoID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PinMediaSourceVideoID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PinMediaSourceVideoID" /> class.
        /// </summary>
        /// <param name="sourceType">sourceType (required).</param>
        /// <param name="coverImageUrl">coverImageUrl (required).</param>
        /// <param name="mediaId">mediaId (required).</param>
        public PinMediaSourceVideoID(SourceTypeEnum sourceType = default(SourceTypeEnum), string coverImageUrl = default(string), string mediaId = default(string))
        {
            this.SourceType = sourceType;
            // to ensure "coverImageUrl" is required (not null)
            if (coverImageUrl == null) {
                throw new ArgumentNullException("coverImageUrl is a required property for PinMediaSourceVideoID and cannot be null");
            }
            this.CoverImageUrl = coverImageUrl;
            // to ensure "mediaId" is required (not null)
            if (mediaId == null) {
                throw new ArgumentNullException("mediaId is a required property for PinMediaSourceVideoID and cannot be null");
            }
            this.MediaId = mediaId;
        }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [DataMember(Name = "cover_image_url", IsRequired = true, EmitDefaultValue = false)]
        public string CoverImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets MediaId
        /// </summary>
        [DataMember(Name = "media_id", IsRequired = true, EmitDefaultValue = false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PinMediaSourceVideoID {\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PinMediaSourceVideoID);
        }

        /// <summary>
        /// Returns true if PinMediaSourceVideoID instances are equal
        /// </summary>
        /// <param name="input">Instance of PinMediaSourceVideoID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinMediaSourceVideoID input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceType == input.SourceType ||
                    this.SourceType.Equals(input.SourceType)
                ) && 
                (
                    this.CoverImageUrl == input.CoverImageUrl ||
                    (this.CoverImageUrl != null &&
                    this.CoverImageUrl.Equals(input.CoverImageUrl))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SourceType.GetHashCode();
                if (this.CoverImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CoverImageUrl.GetHashCode();
                }
                if (this.MediaId != null)
                {
                    hashCode = (hashCode * 59) + this.MediaId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MediaId (string) pattern
            Regex regexMediaId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexMediaId.Match(this.MediaId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MediaId, must match a pattern of " + regexMediaId, new [] { "MediaId" });
            }

            yield break;
        }
    }

}
