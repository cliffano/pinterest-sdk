/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Request object for creating a product group.
    /// </summary>
    [DataContract(Name = "CatalogsProductGroupCreateRequest")]
    public partial class CatalogsProductGroupCreateRequest : IEquatable<CatalogsProductGroupCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsProductGroupCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogsProductGroupCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsProductGroupCreateRequest" /> class.
        /// </summary>
        /// <param name="feedId">Catalog Feed id pertaining to the catalog product group. (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="filters">filters (required).</param>
        public CatalogsProductGroupCreateRequest(string feedId = default(string), string name = default(string), string description = default(string), CatalogsProductGroupFilters filters = default(CatalogsProductGroupFilters))
        {
            // to ensure "feedId" is required (not null)
            if (feedId == null) {
                throw new ArgumentNullException("feedId is a required property for CatalogsProductGroupCreateRequest and cannot be null");
            }
            this.FeedId = feedId;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CatalogsProductGroupCreateRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "filters" is required (not null)
            if (filters == null) {
                throw new ArgumentNullException("filters is a required property for CatalogsProductGroupCreateRequest and cannot be null");
            }
            this.Filters = filters;
            this.Description = description;
        }

        /// <summary>
        /// Catalog Feed id pertaining to the catalog product group.
        /// </summary>
        /// <value>Catalog Feed id pertaining to the catalog product group.</value>
        [DataMember(Name = "feed_id", IsRequired = true, EmitDefaultValue = false)]
        public string FeedId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", IsRequired = true, EmitDefaultValue = false)]
        public CatalogsProductGroupFilters Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogsProductGroupCreateRequest {\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogsProductGroupCreateRequest);
        }

        /// <summary>
        /// Returns true if CatalogsProductGroupCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogsProductGroupCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsProductGroupCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeedId == input.FeedId ||
                    (this.FeedId != null &&
                    this.FeedId.Equals(input.FeedId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Filters == input.Filters ||
                    (this.Filters != null &&
                    this.Filters.Equals(input.Filters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedId != null)
                {
                    hashCode = (hashCode * 59) + this.FeedId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FeedId (string) pattern
            Regex regexFeedId = new Regex(@"^\\d+$", RegexOptions.CultureInvariant);
            if (false == regexFeedId.Match(this.FeedId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeedId, must match a pattern of " + regexFeedId, new [] { "FeedId" });
            }

            yield break;
        }
    }

}
