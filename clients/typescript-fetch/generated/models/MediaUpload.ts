/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaUploadAllOfUploadParameters } from './MediaUploadAllOfUploadParameters';
import {
    MediaUploadAllOfUploadParametersFromJSON,
    MediaUploadAllOfUploadParametersFromJSONTyped,
    MediaUploadAllOfUploadParametersToJSON,
} from './MediaUploadAllOfUploadParameters';
import type { MediaUploadType } from './MediaUploadType';
import {
    MediaUploadTypeFromJSON,
    MediaUploadTypeFromJSONTyped,
    MediaUploadTypeToJSON,
} from './MediaUploadType';

/**
 * Media upload that has been registered but not uploaded/processed yet.
 * @export
 * @interface MediaUpload
 */
export interface MediaUpload {
    /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     * @type {string}
     * @memberof MediaUpload
     */
    mediaId?: string;
    /**
     * 
     * @type {MediaUploadType}
     * @memberof MediaUpload
     */
    mediaType?: MediaUploadType;
    /**
     * The URL where you will POST your media file.
     * @type {string}
     * @memberof MediaUpload
     */
    uploadUrl?: string;
    /**
     * 
     * @type {MediaUploadAllOfUploadParameters}
     * @memberof MediaUpload
     */
    uploadParameters?: MediaUploadAllOfUploadParameters;
}

/**
 * Check if a given object implements the MediaUpload interface.
 */
export function instanceOfMediaUpload(value: object): boolean {
    return true;
}

export function MediaUploadFromJSON(json: any): MediaUpload {
    return MediaUploadFromJSONTyped(json, false);
}

export function MediaUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaUpload {
    if (json == null) {
        return json;
    }
    return {
        
        'mediaId': json['media_id'] == null ? undefined : json['media_id'],
        'mediaType': json['media_type'] == null ? undefined : MediaUploadTypeFromJSON(json['media_type']),
        'uploadUrl': json['upload_url'] == null ? undefined : json['upload_url'],
        'uploadParameters': json['upload_parameters'] == null ? undefined : MediaUploadAllOfUploadParametersFromJSON(json['upload_parameters']),
    };
}

export function MediaUploadToJSON(value?: MediaUpload | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'media_id': value['mediaId'],
        'media_type': MediaUploadTypeToJSON(value['mediaType']),
        'upload_url': value['uploadUrl'],
        'upload_parameters': MediaUploadAllOfUploadParametersToJSON(value['uploadParameters']),
    };
}

