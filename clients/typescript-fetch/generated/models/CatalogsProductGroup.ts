/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CatalogsProductGroupFilters,
    CatalogsProductGroupFiltersFromJSON,
    CatalogsProductGroupFiltersFromJSONTyped,
    CatalogsProductGroupFiltersToJSON,
} from './CatalogsProductGroupFilters';
import {
    CatalogsProductGroupStatus,
    CatalogsProductGroupStatusFromJSON,
    CatalogsProductGroupStatusFromJSONTyped,
    CatalogsProductGroupStatusToJSON,
} from './CatalogsProductGroupStatus';
import {
    CatalogsProductGroupType,
    CatalogsProductGroupTypeFromJSON,
    CatalogsProductGroupTypeFromJSONTyped,
    CatalogsProductGroupTypeToJSON,
} from './CatalogsProductGroupType';

/**
 * catalog product group entity
 * @export
 * @interface CatalogsProductGroup
 */
export interface CatalogsProductGroup {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    id: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    description?: string | null;
    /**
     * 
     * @type {CatalogsProductGroupFilters}
     * @memberof CatalogsProductGroup
     */
    filters: CatalogsProductGroupFilters;
    /**
     * 
     * @type {CatalogsProductGroupType}
     * @memberof CatalogsProductGroup
     */
    type?: CatalogsProductGroupType;
    /**
     * 
     * @type {CatalogsProductGroupStatus}
     * @memberof CatalogsProductGroup
     */
    status?: CatalogsProductGroupStatus;
    /**
     * id of the catalogs feed belonging to this catalog product group
     * @type {string}
     * @memberof CatalogsProductGroup
     */
    feedId?: string;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    createdAt?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogsProductGroup
     */
    updatedAt?: number;
}

export function CatalogsProductGroupFromJSON(json: any): CatalogsProductGroup {
    return CatalogsProductGroupFromJSONTyped(json, false);
}

export function CatalogsProductGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsProductGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'filters': CatalogsProductGroupFiltersFromJSON(json['filters']),
        'type': !exists(json, 'type') ? undefined : CatalogsProductGroupTypeFromJSON(json['type']),
        'status': !exists(json, 'status') ? undefined : CatalogsProductGroupStatusFromJSON(json['status']),
        'feedId': !exists(json, 'feed_id') ? undefined : json['feed_id'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
    };
}

export function CatalogsProductGroupToJSON(value?: CatalogsProductGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'filters': CatalogsProductGroupFiltersToJSON(value.filters),
        'type': CatalogsProductGroupTypeToJSON(value.type),
        'status': CatalogsProductGroupStatusToJSON(value.status),
        'feed_id': value.feedId,
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
    };
}

