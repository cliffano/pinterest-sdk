/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ActionType,
    ActionTypeFromJSON,
    ActionTypeFromJSONTyped,
    ActionTypeToJSON,
} from './ActionType';
import {
    AdGroupResponseAllOf,
    AdGroupResponseAllOfFromJSON,
    AdGroupResponseAllOfFromJSONTyped,
    AdGroupResponseAllOfToJSON,
} from './AdGroupResponseAllOf';
import {
    AdGroupResponseAllOf1,
    AdGroupResponseAllOf1FromJSON,
    AdGroupResponseAllOf1FromJSONTyped,
    AdGroupResponseAllOf1ToJSON,
} from './AdGroupResponseAllOf1';
import {
    AdGroupSummaryStatus,
    AdGroupSummaryStatusFromJSON,
    AdGroupSummaryStatusFromJSONTyped,
    AdGroupSummaryStatusToJSON,
} from './AdGroupSummaryStatus';
import {
    EntityStatus,
    EntityStatusFromJSON,
    EntityStatusFromJSONTyped,
    EntityStatusToJSON,
} from './EntityStatus';
import {
    PacingDeliveryType,
    PacingDeliveryTypeFromJSON,
    PacingDeliveryTypeFromJSONTyped,
    PacingDeliveryTypeToJSON,
} from './PacingDeliveryType';
import {
    PlacementGroupType,
    PlacementGroupTypeFromJSON,
    PlacementGroupTypeFromJSONTyped,
    PlacementGroupTypeToJSON,
} from './PlacementGroupType';
import {
    TrackingUrls,
    TrackingUrlsFromJSON,
    TrackingUrlsFromJSONTyped,
    TrackingUrlsToJSON,
} from './TrackingUrls';

/**
 * 
 * @export
 * @interface AdGroupResponse
 */
export interface AdGroupResponse {
    /**
     * Ad group name.
     * @type {string}
     * @memberof AdGroupResponse
     */
    name?: string;
    /**
     * Ad group/entity status.
     * @type {EntityStatus}
     * @memberof AdGroupResponse
     */
    status?: EntityStatus;
    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     * @type {number}
     * @memberof AdGroupResponse
     */
    budgetInMicroCurrency?: number | null;
    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     * @type {number}
     * @memberof AdGroupResponse
     */
    bidInMicroCurrency?: number | null;
    /**
     * Budget type. If DAILY, an ad group's daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     * @type {string}
     * @memberof AdGroupResponse
     */
    budgetType?: AdGroupResponseBudgetTypeEnum;
    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     * @type {number}
     * @memberof AdGroupResponse
     */
    startTime?: number | null;
    /**
     * Ad group end time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    endTime?: number | null;
    /**
     * Ad group targeting specification defining the ad group target audience. For example, '{"APPTYPE":["iphone"], "GENDER":["male"], "LOCALE":["en-US"], "LOCATION":["501"], "AGE_BUCKET":["25-34"]}'
     * @type {{ [key: string]: Array<string>; }}
     * @memberof AdGroupResponse
     */
    targetingSpec?: { [key: string]: Array<string>; };
    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     * @type {number}
     * @memberof AdGroupResponse
     */
    lifetimeFrequencyCap?: number;
    /**
     * Third-party tracking URLs.<br> JSON object with the format: {"<a href="https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event">Tracking event enum</a>":[URL string array],...}<br> For example: {"impression": ["URL1", "URL2"], "click": ["URL1", "URL2", "URL3"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href="https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking" target="_blank">Third-party and dynamic tracking</a>.
     * @type {TrackingUrls}
     * @memberof AdGroupResponse
     */
    trackingUrls?: TrackingUrls | null;
    /**
     * Enable auto-targeting for ad group. Also known as <a href="https://help.pinterest.com/en/business/article/expanded-targeting" target="_blank">"expanded targeting"</a>.
     * @type {boolean}
     * @memberof AdGroupResponse
     */
    autoTargetingEnabled?: boolean | null;
    /**
     * <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
     * @type {PlacementGroupType}
     * @memberof AdGroupResponse
     */
    placementGroup?: PlacementGroupType;
    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     * @type {PacingDeliveryType}
     * @memberof AdGroupResponse
     */
    pacingDeliveryType?: PacingDeliveryType;
    /**
     * oCPM learn mode
     * @type {string}
     * @memberof AdGroupResponse
     */
    conversionLearningModeType?: AdGroupResponseConversionLearningModeTypeEnum;
    /**
     * Ad group summary status.
     * @type {AdGroupSummaryStatus}
     * @memberof AdGroupResponse
     */
    summaryStatus?: AdGroupSummaryStatus;
    /**
     * Feed Profile ID associated to the adgroup.
     * @type {string}
     * @memberof AdGroupResponse
     */
    feedProfileId?: string;
    /**
     * Campaign ID of the ad group.
     * @type {string}
     * @memberof AdGroupResponse
     */
    campaignId?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AdGroupResponse
     */
    billableEvent?: ActionType;
    /**
     * Ad group ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    id?: string;
    /**
     * Always "adgroup".
     * @type {string}
     * @memberof AdGroupResponse
     */
    type?: string;
    /**
     * Advertiser ID.
     * @type {string}
     * @memberof AdGroupResponse
     */
    adAccountId?: string;
    /**
     * Ad group creation time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    createdTime?: number;
    /**
     * Ad group last update time. Unix timestamp in seconds.
     * @type {number}
     * @memberof AdGroupResponse
     */
    updatedTime?: number;
}

/**
* @export
* @enum {string}
*/
export enum AdGroupResponseBudgetTypeEnum {
    Daily = 'DAILY',
    Lifetime = 'LIFETIME',
    CboAdgroup = 'CBO_ADGROUP'
}/**
* @export
* @enum {string}
*/
export enum AdGroupResponseConversionLearningModeTypeEnum {
    NotActive = 'NOT_ACTIVE',
    Active = 'ACTIVE',
    Null = 'null'
}

export function AdGroupResponseFromJSON(json: any): AdGroupResponse {
    return AdGroupResponseFromJSONTyped(json, false);
}

export function AdGroupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdGroupResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'status': !exists(json, 'status') ? undefined : EntityStatusFromJSON(json['status']),
        'budgetInMicroCurrency': !exists(json, 'budget_in_micro_currency') ? undefined : json['budget_in_micro_currency'],
        'bidInMicroCurrency': !exists(json, 'bid_in_micro_currency') ? undefined : json['bid_in_micro_currency'],
        'budgetType': !exists(json, 'budget_type') ? undefined : json['budget_type'],
        'startTime': !exists(json, 'start_time') ? undefined : json['start_time'],
        'endTime': !exists(json, 'end_time') ? undefined : json['end_time'],
        'targetingSpec': !exists(json, 'targeting_spec') ? undefined : json['targeting_spec'],
        'lifetimeFrequencyCap': !exists(json, 'lifetime_frequency_cap') ? undefined : json['lifetime_frequency_cap'],
        'trackingUrls': !exists(json, 'tracking_urls') ? undefined : (json['tracking_urls'] === null ? null : mapValues(json['tracking_urls'], FromJSON)),
        'autoTargetingEnabled': !exists(json, 'auto_targeting_enabled') ? undefined : json['auto_targeting_enabled'],
        'placementGroup': !exists(json, 'placement_group') ? undefined : PlacementGroupTypeFromJSON(json['placement_group']),
        'pacingDeliveryType': !exists(json, 'pacing_delivery_type') ? undefined : PacingDeliveryTypeFromJSON(json['pacing_delivery_type']),
        'conversionLearningModeType': !exists(json, 'conversion_learning_mode_type') ? undefined : json['conversion_learning_mode_type'],
        'summaryStatus': !exists(json, 'summary_status') ? undefined : AdGroupSummaryStatusFromJSON(json['summary_status']),
        'feedProfileId': !exists(json, 'feed_profile_id') ? undefined : json['feed_profile_id'],
        'campaignId': !exists(json, 'campaign_id') ? undefined : json['campaign_id'],
        'billableEvent': !exists(json, 'billable_event') ? undefined : ActionTypeFromJSON(json['billable_event']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'adAccountId': !exists(json, 'ad_account_id') ? undefined : json['ad_account_id'],
        'createdTime': !exists(json, 'created_time') ? undefined : json['created_time'],
        'updatedTime': !exists(json, 'updated_time') ? undefined : json['updated_time'],
    };
}

export function AdGroupResponseToJSON(value?: AdGroupResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'status': EntityStatusToJSON(value.status),
        'budget_in_micro_currency': value.budgetInMicroCurrency,
        'bid_in_micro_currency': value.bidInMicroCurrency,
        'budget_type': value.budgetType,
        'start_time': value.startTime,
        'end_time': value.endTime,
        'targeting_spec': value.targetingSpec,
        'lifetime_frequency_cap': value.lifetimeFrequencyCap,
        'tracking_urls': value.trackingUrls === undefined ? undefined : (value.trackingUrls === null ? null : mapValues(value.trackingUrls, ToJSON)),
        'auto_targeting_enabled': value.autoTargetingEnabled,
        'placement_group': PlacementGroupTypeToJSON(value.placementGroup),
        'pacing_delivery_type': PacingDeliveryTypeToJSON(value.pacingDeliveryType),
        'conversion_learning_mode_type': value.conversionLearningModeType,
        'summary_status': AdGroupSummaryStatusToJSON(value.summaryStatus),
        'feed_profile_id': value.feedProfileId,
        'campaign_id': value.campaignId,
        'billable_event': ActionTypeToJSON(value.billableEvent),
        'id': value.id,
        'type': value.type,
        'ad_account_id': value.adAccountId,
        'created_time': value.createdTime,
        'updated_time': value.updatedTime,
    };
}

