/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Board } from './Board';
import {
    BoardFromJSON,
    BoardFromJSONTyped,
    BoardToJSON,
} from './Board';
import type { EntityStatus } from './EntityStatus';
import {
    EntityStatusFromJSON,
    EntityStatusFromJSONTyped,
    EntityStatusToJSON,
} from './EntityStatus';

/**
 * non-promoted catalog product group entity
 * @export
 * @interface CatalogProductGroup
 */
export interface CatalogProductGroup {
    /**
     * ID of the catalog product group.
     * @type {string}
     * @memberof CatalogProductGroup
     */
    id?: string;
    /**
     * Merchant ID pertaining to the owner of the catalog product group.
     * @type {string}
     * @memberof CatalogProductGroup
     */
    merchantId?: string;
    /**
     * Name of catalog product group
     * @type {string}
     * @memberof CatalogProductGroup
     */
    name?: string;
    /**
     * Object holding a list of filters
     * @type {object}
     * @memberof CatalogProductGroup
     */
    filters?: object;
    /**
     * Object holding a list of filters
     * @type {object}
     * @memberof CatalogProductGroup
     */
    filterV2?: object;
    /**
     * 
     * @type {Board}
     * @memberof CatalogProductGroup
     */
    type?: Board;
    /**
     * 
     * @type {EntityStatus}
     * @memberof CatalogProductGroup
     */
    status?: EntityStatus;
    /**
     * id of the feed profile belonging to this catalog product group
     * @type {string}
     * @memberof CatalogProductGroup
     */
    feedProfileId?: string;
    /**
     * Unix timestamp in seconds of when catalog product group was created.
     * @type {number}
     * @memberof CatalogProductGroup
     */
    createdAt?: number;
    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     * @type {number}
     * @memberof CatalogProductGroup
     */
    lastUpdate?: number;
    /**
     * Amount of products in the catalog product group
     * @type {number}
     * @memberof CatalogProductGroup
     */
    productCount?: number;
    /**
     * index of the featured position of the catalog product group
     * @type {number}
     * @memberof CatalogProductGroup
     */
    featuredPosition?: number;
}

/**
 * Check if a given object implements the CatalogProductGroup interface.
 */
export function instanceOfCatalogProductGroup(value: object): boolean {
    return true;
}

export function CatalogProductGroupFromJSON(json: any): CatalogProductGroup {
    return CatalogProductGroupFromJSONTyped(json, false);
}

export function CatalogProductGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogProductGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'merchantId': json['merchant_id'] == null ? undefined : json['merchant_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'filters': json['filters'] == null ? undefined : json['filters'],
        'filterV2': json['filter_v2'] == null ? undefined : json['filter_v2'],
        'type': json['type'] == null ? undefined : BoardFromJSON(json['type']),
        'status': json['status'] == null ? undefined : EntityStatusFromJSON(json['status']),
        'feedProfileId': json['feed_profile_id'] == null ? undefined : json['feed_profile_id'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'lastUpdate': json['last_update'] == null ? undefined : json['last_update'],
        'productCount': json['product_count'] == null ? undefined : json['product_count'],
        'featuredPosition': json['featured_position'] == null ? undefined : json['featured_position'],
    };
}

export function CatalogProductGroupToJSON(value?: CatalogProductGroup | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'merchant_id': value['merchantId'],
        'name': value['name'],
        'filters': value['filters'],
        'filter_v2': value['filterV2'],
        'type': BoardToJSON(value['type']),
        'status': EntityStatusToJSON(value['status']),
        'feed_profile_id': value['feedProfileId'],
        'created_at': value['createdAt'],
        'last_update': value['lastUpdate'],
        'product_count': value['productCount'],
        'featured_position': value['featuredPosition'],
    };
}

