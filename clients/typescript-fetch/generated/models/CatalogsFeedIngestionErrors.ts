/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CatalogsFeedIngestionErrors
 */
export interface CatalogsFeedIngestionErrors {
    /**
     * Some items include images that can't be found.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    iMAGEDOWNLOADERROR?: number;
    /**
     * We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    lINELEVELINTERNALERROR?: number;
    /**
     * The product count has decreased by more than 99% compared to the last successful ingestion.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    lARGEPRODUCTCOUNTDECREASE?: CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum;
    /**
     * We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
     * @type {number}
     * @memberof CatalogsFeedIngestionErrors
     */
    aCCOUNTFLAGGED?: number;
}


/**
 * @export
 */
export const CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum = {
    NUMBER_1: 1
} as const;
export type CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum = typeof CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum[keyof typeof CatalogsFeedIngestionErrorsLARGEPRODUCTCOUNTDECREASEEnum];


/**
 * Check if a given object implements the CatalogsFeedIngestionErrors interface.
 */
export function instanceOfCatalogsFeedIngestionErrors(value: object): boolean {
    return true;
}

export function CatalogsFeedIngestionErrorsFromJSON(json: any): CatalogsFeedIngestionErrors {
    return CatalogsFeedIngestionErrorsFromJSONTyped(json, false);
}

export function CatalogsFeedIngestionErrorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsFeedIngestionErrors {
    if (json == null) {
        return json;
    }
    return {
        
        'iMAGEDOWNLOADERROR': json['IMAGE_DOWNLOAD_ERROR'] == null ? undefined : json['IMAGE_DOWNLOAD_ERROR'],
        'lINELEVELINTERNALERROR': json['LINE_LEVEL_INTERNAL_ERROR'] == null ? undefined : json['LINE_LEVEL_INTERNAL_ERROR'],
        'lARGEPRODUCTCOUNTDECREASE': json['LARGE_PRODUCT_COUNT_DECREASE'] == null ? undefined : json['LARGE_PRODUCT_COUNT_DECREASE'],
        'aCCOUNTFLAGGED': json['ACCOUNT_FLAGGED'] == null ? undefined : json['ACCOUNT_FLAGGED'],
    };
}

export function CatalogsFeedIngestionErrorsToJSON(value?: CatalogsFeedIngestionErrors | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'IMAGE_DOWNLOAD_ERROR': value['iMAGEDOWNLOADERROR'],
        'LINE_LEVEL_INTERNAL_ERROR': value['lINELEVELINTERNALERROR'],
        'LARGE_PRODUCT_COUNT_DECREASE': value['lARGEPRODUCTCOUNTDECREASE'],
        'ACCOUNT_FLAGGED': value['aCCOUNTFLAGGED'],
    };
}

