/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CatalogsItemsCreateBatchRequest } from './CatalogsItemsCreateBatchRequest';
import {
    instanceOfCatalogsItemsCreateBatchRequest,
    CatalogsItemsCreateBatchRequestFromJSON,
    CatalogsItemsCreateBatchRequestFromJSONTyped,
    CatalogsItemsCreateBatchRequestToJSON,
} from './CatalogsItemsCreateBatchRequest';
import type { CatalogsItemsDeleteBatchRequest } from './CatalogsItemsDeleteBatchRequest';
import {
    instanceOfCatalogsItemsDeleteBatchRequest,
    CatalogsItemsDeleteBatchRequestFromJSON,
    CatalogsItemsDeleteBatchRequestFromJSONTyped,
    CatalogsItemsDeleteBatchRequestToJSON,
} from './CatalogsItemsDeleteBatchRequest';
import type { CatalogsItemsDeleteDiscontinuedBatchRequest } from './CatalogsItemsDeleteDiscontinuedBatchRequest';
import {
    instanceOfCatalogsItemsDeleteDiscontinuedBatchRequest,
    CatalogsItemsDeleteDiscontinuedBatchRequestFromJSON,
    CatalogsItemsDeleteDiscontinuedBatchRequestFromJSONTyped,
    CatalogsItemsDeleteDiscontinuedBatchRequestToJSON,
} from './CatalogsItemsDeleteDiscontinuedBatchRequest';
import type { CatalogsItemsUpdateBatchRequest } from './CatalogsItemsUpdateBatchRequest';
import {
    instanceOfCatalogsItemsUpdateBatchRequest,
    CatalogsItemsUpdateBatchRequestFromJSON,
    CatalogsItemsUpdateBatchRequestFromJSONTyped,
    CatalogsItemsUpdateBatchRequestToJSON,
} from './CatalogsItemsUpdateBatchRequest';
import type { CatalogsItemsUpsertBatchRequest } from './CatalogsItemsUpsertBatchRequest';
import {
    instanceOfCatalogsItemsUpsertBatchRequest,
    CatalogsItemsUpsertBatchRequestFromJSON,
    CatalogsItemsUpsertBatchRequestFromJSONTyped,
    CatalogsItemsUpsertBatchRequestToJSON,
} from './CatalogsItemsUpsertBatchRequest';

/**
 * @type CatalogsItemsBatchRequest
 * Request object of catalogs items batch
 * @export
 */
export type CatalogsItemsBatchRequest = { operation: 'CREATE' } & CatalogsItemsCreateBatchRequest | { operation: 'DELETE' } & CatalogsItemsDeleteBatchRequest | { operation: 'DELETE_DISCONTINUED' } & CatalogsItemsDeleteDiscontinuedBatchRequest | { operation: 'UPDATE' } & CatalogsItemsUpdateBatchRequest | { operation: 'UPSERT' } & CatalogsItemsUpsertBatchRequest;

export function CatalogsItemsBatchRequestFromJSON(json: any): CatalogsItemsBatchRequest {
    return CatalogsItemsBatchRequestFromJSONTyped(json, false);
}

export function CatalogsItemsBatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsItemsBatchRequest {
    if (json == null) {
        return json;
    }
    switch (json['operation']) {
        case 'CREATE':
            return {...CatalogsItemsCreateBatchRequestFromJSONTyped(json, true), operation: 'CREATE'};
        case 'DELETE':
            return {...CatalogsItemsDeleteBatchRequestFromJSONTyped(json, true), operation: 'DELETE'};
        case 'DELETE_DISCONTINUED':
            return {...CatalogsItemsDeleteDiscontinuedBatchRequestFromJSONTyped(json, true), operation: 'DELETE_DISCONTINUED'};
        case 'UPDATE':
            return {...CatalogsItemsUpdateBatchRequestFromJSONTyped(json, true), operation: 'UPDATE'};
        case 'UPSERT':
            return {...CatalogsItemsUpsertBatchRequestFromJSONTyped(json, true), operation: 'UPSERT'};
        default:
            throw new Error(`No variant of CatalogsItemsBatchRequest exists with 'operation=${json['operation']}'`);
    }
}

export function CatalogsItemsBatchRequestToJSON(value?: CatalogsItemsBatchRequest | null): any {
    if (value == null) {
        return value;
    }
    switch (value['operation']) {
        case 'CREATE':
            return CatalogsItemsCreateBatchRequestToJSON(value);
        case 'DELETE':
            return CatalogsItemsDeleteBatchRequestToJSON(value);
        case 'DELETE_DISCONTINUED':
            return CatalogsItemsDeleteDiscontinuedBatchRequestToJSON(value);
        case 'UPDATE':
            return CatalogsItemsUpdateBatchRequestToJSON(value);
        case 'UPSERT':
            return CatalogsItemsUpsertBatchRequestToJSON(value);
        default:
            throw new Error(`No variant of CatalogsItemsBatchRequest exists with 'operation=${value['operation']}'`);
    }

}

