/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BatchOperation,
    BatchOperationFromJSON,
    BatchOperationFromJSONTyped,
    BatchOperationToJSON,
} from './BatchOperation';
import {
    Country,
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';
import {
    ItemBatchRecord,
    ItemBatchRecordFromJSON,
    ItemBatchRecordFromJSONTyped,
    ItemBatchRecordToJSON,
} from './ItemBatchRecord';
import {
    Language,
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
} from './Language';

/**
 * Request object of catalogs items batch
 * @export
 * @interface CatalogsItemsBatchRequest
 */
export interface CatalogsItemsBatchRequest {
    /**
     * 
     * @type {Country}
     * @memberof CatalogsItemsBatchRequest
     */
    country?: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsItemsBatchRequest
     */
    language?: Language;
    /**
     * 
     * @type {BatchOperation}
     * @memberof CatalogsItemsBatchRequest
     */
    operation?: BatchOperation;
    /**
     * Array with catalogs items
     * @type {Array<ItemBatchRecord>}
     * @memberof CatalogsItemsBatchRequest
     */
    items?: Array<ItemBatchRecord>;
}

export function CatalogsItemsBatchRequestFromJSON(json: any): CatalogsItemsBatchRequest {
    return CatalogsItemsBatchRequestFromJSONTyped(json, false);
}

export function CatalogsItemsBatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsItemsBatchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'country': !exists(json, 'country') ? undefined : CountryFromJSON(json['country']),
        'language': !exists(json, 'language') ? undefined : LanguageFromJSON(json['language']),
        'operation': !exists(json, 'operation') ? undefined : BatchOperationFromJSON(json['operation']),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(ItemBatchRecordFromJSON)),
    };
}

export function CatalogsItemsBatchRequestToJSON(value?: CatalogsItemsBatchRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'country': CountryToJSON(value.country),
        'language': LanguageToJSON(value.language),
        'operation': BatchOperationToJSON(value.operation),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(ItemBatchRecordToJSON)),
    };
}

