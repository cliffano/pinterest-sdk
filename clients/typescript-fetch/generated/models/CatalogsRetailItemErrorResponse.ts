/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsType } from './CatalogsType';
import {
    CatalogsTypeFromJSON,
    CatalogsTypeFromJSONTyped,
    CatalogsTypeToJSON,
} from './CatalogsType';
import type { ItemValidationEvent } from './ItemValidationEvent';
import {
    ItemValidationEventFromJSON,
    ItemValidationEventFromJSONTyped,
    ItemValidationEventToJSON,
} from './ItemValidationEvent';

/**
 * Object describing a retail item error
 * @export
 * @interface CatalogsRetailItemErrorResponse
 */
export interface CatalogsRetailItemErrorResponse {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsRetailItemErrorResponse
     */
    catalogType: CatalogsType;
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsRetailItemErrorResponse
     */
    itemId?: string;
    /**
     * Array with the errors for the item id requested
     * @type {Array<ItemValidationEvent>}
     * @memberof CatalogsRetailItemErrorResponse
     */
    errors?: Array<ItemValidationEvent>;
}

/**
 * Check if a given object implements the CatalogsRetailItemErrorResponse interface.
 */
export function instanceOfCatalogsRetailItemErrorResponse(value: object): boolean {
    if (!('catalogType' in value)) return false;
    return true;
}

export function CatalogsRetailItemErrorResponseFromJSON(json: any): CatalogsRetailItemErrorResponse {
    return CatalogsRetailItemErrorResponseFromJSONTyped(json, false);
}

export function CatalogsRetailItemErrorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailItemErrorResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': CatalogsTypeFromJSON(json['catalog_type']),
        'itemId': json['item_id'] == null ? undefined : json['item_id'],
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(ItemValidationEventFromJSON)),
    };
}

export function CatalogsRetailItemErrorResponseToJSON(value?: CatalogsRetailItemErrorResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'catalog_type': CatalogsTypeToJSON(value['catalogType']),
        'item_id': value['itemId'],
        'errors': value['errors'] == null ? undefined : ((value['errors'] as Array<any>).map(ItemValidationEventToJSON)),
    };
}

