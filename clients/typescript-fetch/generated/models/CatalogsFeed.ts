/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsFeedCredentials } from './CatalogsFeedCredentials';
import {
    CatalogsFeedCredentialsFromJSON,
    CatalogsFeedCredentialsFromJSONTyped,
    CatalogsFeedCredentialsToJSON,
} from './CatalogsFeedCredentials';
import type { CatalogsFeedProcessingSchedule } from './CatalogsFeedProcessingSchedule';
import {
    CatalogsFeedProcessingScheduleFromJSON,
    CatalogsFeedProcessingScheduleFromJSONTyped,
    CatalogsFeedProcessingScheduleToJSON,
} from './CatalogsFeedProcessingSchedule';
import type { CatalogsFormat } from './CatalogsFormat';
import {
    CatalogsFormatFromJSON,
    CatalogsFormatFromJSONTyped,
    CatalogsFormatToJSON,
} from './CatalogsFormat';
import type { CatalogsStatus } from './CatalogsStatus';
import {
    CatalogsStatusFromJSON,
    CatalogsStatusFromJSONTyped,
    CatalogsStatusToJSON,
} from './CatalogsStatus';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';
import type { NullableCurrency } from './NullableCurrency';
import {
    NullableCurrencyFromJSON,
    NullableCurrencyFromJSONTyped,
    NullableCurrencyToJSON,
} from './NullableCurrency';
import type { ProductAvailabilityType } from './ProductAvailabilityType';
import {
    ProductAvailabilityTypeFromJSON,
    ProductAvailabilityTypeFromJSONTyped,
    ProductAvailabilityTypeToJSON,
} from './ProductAvailabilityType';

/**
 * Catalogs Feed object
 * @export
 * @interface CatalogsFeed
 */
export interface CatalogsFeed {
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeed
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof CatalogsFeed
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof CatalogsFeed
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsFeed
     */
    defaultCountry: Country;
    /**
     * 
     * @type {ProductAvailabilityType}
     * @memberof CatalogsFeed
     */
    defaultAvailability: ProductAvailabilityType | null;
    /**
     * 
     * @type {NullableCurrency}
     * @memberof CatalogsFeed
     */
    defaultCurrency: NullableCurrency | null;
    /**
     * A human-friendly name associated to a given feed. This value is currently nullable due to historical reasons. It is expected to become non-nullable in the future.
     * @type {string}
     * @memberof CatalogsFeed
     */
    name: string | null;
    /**
     * 
     * @type {CatalogsFormat}
     * @memberof CatalogsFeed
     */
    format: CatalogsFormat;
    /**
     * The locale used within a feed for product descriptions.
     * @type {string}
     * @memberof CatalogsFeed
     */
    defaultLocale: string;
    /**
     * 
     * @type {CatalogsFeedCredentials}
     * @memberof CatalogsFeed
     */
    credentials: CatalogsFeedCredentials | null;
    /**
     * The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing.
     * @type {string}
     * @memberof CatalogsFeed
     */
    location: string;
    /**
     * 
     * @type {CatalogsFeedProcessingSchedule}
     * @memberof CatalogsFeed
     */
    preferredProcessingSchedule: CatalogsFeedProcessingSchedule | null;
    /**
     * 
     * @type {CatalogsStatus}
     * @memberof CatalogsFeed
     */
    status: CatalogsStatus;
}

/**
 * Check if a given object implements the CatalogsFeed interface.
 */
export function instanceOfCatalogsFeed(value: object): boolean {
    if (!('defaultCountry' in value)) return false;
    if (!('defaultAvailability' in value)) return false;
    if (!('defaultCurrency' in value)) return false;
    if (!('name' in value)) return false;
    if (!('format' in value)) return false;
    if (!('defaultLocale' in value)) return false;
    if (!('credentials' in value)) return false;
    if (!('location' in value)) return false;
    if (!('preferredProcessingSchedule' in value)) return false;
    if (!('status' in value)) return false;
    return true;
}

export function CatalogsFeedFromJSON(json: any): CatalogsFeed {
    return CatalogsFeedFromJSONTyped(json, false);
}

export function CatalogsFeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsFeed {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'id': json['id'] == null ? undefined : json['id'],
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'defaultCountry': CountryFromJSON(json['default_country']),
        'defaultAvailability': ProductAvailabilityTypeFromJSON(json['default_availability']),
        'defaultCurrency': NullableCurrencyFromJSON(json['default_currency']),
        'name': json['name'],
        'format': CatalogsFormatFromJSON(json['format']),
        'defaultLocale': json['default_locale'],
        'credentials': CatalogsFeedCredentialsFromJSON(json['credentials']),
        'location': json['location'],
        'preferredProcessingSchedule': CatalogsFeedProcessingScheduleFromJSON(json['preferred_processing_schedule']),
        'status': CatalogsStatusFromJSON(json['status']),
    };
}

export function CatalogsFeedToJSON(value?: CatalogsFeed | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'id': value['id'],
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'default_country': CountryToJSON(value['defaultCountry']),
        'default_availability': ProductAvailabilityTypeToJSON(value['defaultAvailability']),
        'default_currency': NullableCurrencyToJSON(value['defaultCurrency']),
        'name': value['name'],
        'format': CatalogsFormatToJSON(value['format']),
        'default_locale': value['defaultLocale'],
        'credentials': CatalogsFeedCredentialsToJSON(value['credentials']),
        'location': value['location'],
        'preferred_processing_schedule': CatalogsFeedProcessingScheduleToJSON(value['preferredProcessingSchedule']),
        'status': CatalogsStatusToJSON(value['status']),
    };
}

