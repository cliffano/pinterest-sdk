/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsHotelBatchItem } from './CatalogsHotelBatchItem';
import {
    CatalogsHotelBatchItemFromJSON,
    CatalogsHotelBatchItemFromJSONTyped,
    CatalogsHotelBatchItemToJSON,
} from './CatalogsHotelBatchItem';
import type { CatalogsType } from './CatalogsType';
import {
    CatalogsTypeFromJSON,
    CatalogsTypeFromJSONTyped,
    CatalogsTypeToJSON,
} from './CatalogsType';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';
import type { Language } from './Language';
import {
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
} from './Language';

/**
 * Request object to update catalogs hotel items
 * @export
 * @interface CatalogsHotelBatchRequest
 */
export interface CatalogsHotelBatchRequest {
    /**
     * 
     * @type {CatalogsType}
     * @memberof CatalogsHotelBatchRequest
     */
    catalogType: CatalogsType;
    /**
     * 
     * @type {Country}
     * @memberof CatalogsHotelBatchRequest
     */
    country: Country;
    /**
     * 
     * @type {Language}
     * @memberof CatalogsHotelBatchRequest
     */
    language: Language;
    /**
     * Array with catalogs item operations
     * @type {Array<CatalogsHotelBatchItem>}
     * @memberof CatalogsHotelBatchRequest
     */
    items: Array<CatalogsHotelBatchItem>;
    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @type {string}
     * @memberof CatalogsHotelBatchRequest
     */
    catalogId?: string;
}

/**
 * Check if a given object implements the CatalogsHotelBatchRequest interface.
 */
export function instanceOfCatalogsHotelBatchRequest(value: object): boolean {
    if (!('catalogType' in value)) return false;
    if (!('country' in value)) return false;
    if (!('language' in value)) return false;
    if (!('items' in value)) return false;
    return true;
}

export function CatalogsHotelBatchRequestFromJSON(json: any): CatalogsHotelBatchRequest {
    return CatalogsHotelBatchRequestFromJSONTyped(json, false);
}

export function CatalogsHotelBatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsHotelBatchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'catalogType': CatalogsTypeFromJSON(json['catalog_type']),
        'country': CountryFromJSON(json['country']),
        'language': LanguageFromJSON(json['language']),
        'items': ((json['items'] as Array<any>).map(CatalogsHotelBatchItemFromJSON)),
        'catalogId': json['catalog_id'] == null ? undefined : json['catalog_id'],
    };
}

export function CatalogsHotelBatchRequestToJSON(value?: CatalogsHotelBatchRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'catalog_type': CatalogsTypeToJSON(value['catalogType']),
        'country': CountryToJSON(value['country']),
        'language': LanguageToJSON(value['language']),
        'items': ((value['items'] as Array<any>).map(CatalogsHotelBatchItemToJSON)),
        'catalog_id': value['catalogId'],
    };
}

