/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogsCreateRetailItem } from './CatalogsCreateRetailItem';
import {
    CatalogsCreateRetailItemFromJSON,
    CatalogsCreateRetailItemFromJSONTyped,
    CatalogsCreateRetailItemToJSON,
} from './CatalogsCreateRetailItem';
import type { CatalogsDeleteRetailItem } from './CatalogsDeleteRetailItem';
import {
    CatalogsDeleteRetailItemFromJSON,
    CatalogsDeleteRetailItemFromJSONTyped,
    CatalogsDeleteRetailItemToJSON,
} from './CatalogsDeleteRetailItem';
import type { CatalogsUpdateRetailItem } from './CatalogsUpdateRetailItem';
import {
    CatalogsUpdateRetailItemFromJSON,
    CatalogsUpdateRetailItemFromJSONTyped,
    CatalogsUpdateRetailItemToJSON,
} from './CatalogsUpdateRetailItem';
import type { CatalogsUpsertRetailItem } from './CatalogsUpsertRetailItem';
import {
    CatalogsUpsertRetailItemFromJSON,
    CatalogsUpsertRetailItemFromJSONTyped,
    CatalogsUpsertRetailItemToJSON,
} from './CatalogsUpsertRetailItem';
import type { ItemAttributes } from './ItemAttributes';
import {
    ItemAttributesFromJSON,
    ItemAttributesFromJSONTyped,
    ItemAttributesToJSON,
} from './ItemAttributes';
import type { UpdateMaskFieldType } from './UpdateMaskFieldType';
import {
    UpdateMaskFieldTypeFromJSON,
    UpdateMaskFieldTypeFromJSONTyped,
    UpdateMaskFieldTypeToJSON,
} from './UpdateMaskFieldType';

import {
     CatalogsCreateRetailItemFromJSONTyped,
     CatalogsDeleteRetailItemFromJSONTyped,
     CatalogsUpdateRetailItemFromJSONTyped,
     CatalogsUpsertRetailItemFromJSONTyped
} from './index';

/**
 * 
 * @export
 * @interface CatalogsRetailBatchRequestItemsInner
 */
export interface CatalogsRetailBatchRequestItemsInner {
    /**
     * The catalog item id in the merchant namespace
     * @type {string}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    itemId: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    operation: CatalogsRetailBatchRequestItemsInnerOperationEnum;
    /**
     * 
     * @type {ItemAttributes}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    attributes: ItemAttributes;
    /**
     * The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
     * @type {Array<UpdateMaskFieldType>}
     * @memberof CatalogsRetailBatchRequestItemsInner
     */
    updateMask?: Array<UpdateMaskFieldType>;
}


/**
 * @export
 */
export const CatalogsRetailBatchRequestItemsInnerOperationEnum = {
    Create: 'CREATE',
    Update: 'UPDATE',
    Upsert: 'UPSERT',
    Delete: 'DELETE'
} as const;
export type CatalogsRetailBatchRequestItemsInnerOperationEnum = typeof CatalogsRetailBatchRequestItemsInnerOperationEnum[keyof typeof CatalogsRetailBatchRequestItemsInnerOperationEnum];


/**
 * Check if a given object implements the CatalogsRetailBatchRequestItemsInner interface.
 */
export function instanceOfCatalogsRetailBatchRequestItemsInner(value: object): boolean {
    if (!('itemId' in value)) return false;
    if (!('operation' in value)) return false;
    if (!('attributes' in value)) return false;
    return true;
}

export function CatalogsRetailBatchRequestItemsInnerFromJSON(json: any): CatalogsRetailBatchRequestItemsInner {
    return CatalogsRetailBatchRequestItemsInnerFromJSONTyped(json, false);
}

export function CatalogsRetailBatchRequestItemsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogsRetailBatchRequestItemsInner {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['operation'] === 'CREATE') {
            return CatalogsCreateRetailItemFromJSONTyped(json, true);
        }
        if (json['operation'] === 'DELETE') {
            return CatalogsDeleteRetailItemFromJSONTyped(json, true);
        }
        if (json['operation'] === 'UPDATE') {
            return CatalogsUpdateRetailItemFromJSONTyped(json, true);
        }
        if (json['operation'] === 'UPSERT') {
            return CatalogsUpsertRetailItemFromJSONTyped(json, true);
        }
    }
    return {
        
        'itemId': json['item_id'],
        'operation': json['operation'],
        'attributes': ItemAttributesFromJSON(json['attributes']),
        'updateMask': json['update_mask'] == null ? undefined : ((json['update_mask'] as Array<any>).map(UpdateMaskFieldTypeFromJSON)),
    };
}

export function CatalogsRetailBatchRequestItemsInnerToJSON(value?: CatalogsRetailBatchRequestItemsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'item_id': value['itemId'],
        'operation': value['operation'],
        'attributes': ItemAttributesToJSON(value['attributes']),
        'update_mask': value['updateMask'] == null ? undefined : ((value['updateMask'] as Array<any>).map(UpdateMaskFieldTypeToJSON)),
    };
}

