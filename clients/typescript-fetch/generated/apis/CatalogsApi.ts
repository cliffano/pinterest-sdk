/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CatalogsFeed,
    CatalogsFeedFromJSON,
    CatalogsFeedToJSON,
    CatalogsFeedsCreateRequest,
    CatalogsFeedsCreateRequestFromJSON,
    CatalogsFeedsCreateRequestToJSON,
    CatalogsFeedsUpdateRequest,
    CatalogsFeedsUpdateRequestFromJSON,
    CatalogsFeedsUpdateRequestToJSON,
    CatalogsItems,
    CatalogsItemsFromJSON,
    CatalogsItemsToJSON,
    CatalogsItemsBatch,
    CatalogsItemsBatchFromJSON,
    CatalogsItemsBatchToJSON,
    CatalogsItemsBatchRequest,
    CatalogsItemsBatchRequestFromJSON,
    CatalogsItemsBatchRequestToJSON,
    CatalogsProductGroup,
    CatalogsProductGroupFromJSON,
    CatalogsProductGroupToJSON,
    CatalogsProductGroupCreateRequest,
    CatalogsProductGroupCreateRequestFromJSON,
    CatalogsProductGroupCreateRequestToJSON,
    CatalogsProductGroupUpdateRequest,
    CatalogsProductGroupUpdateRequestFromJSON,
    CatalogsProductGroupUpdateRequestToJSON,
    Paginated,
    PaginatedFromJSON,
    PaginatedToJSON,
} from '../models';

export interface CatalogsProductGroupsCreateRequest {
    catalogsProductGroupCreateRequest: CatalogsProductGroupCreateRequest;
}

export interface CatalogsProductGroupsDeleteRequest {
    productGroupId: string;
}

export interface CatalogsProductGroupsListRequest {
    feedId: string;
    bookmark?: string;
    pageSize?: number;
}

export interface CatalogsProductGroupsUpdateRequest {
    productGroupId: string;
    catalogsProductGroupUpdateRequest: CatalogsProductGroupUpdateRequest;
}

export interface FeedProcessingResultsListRequest {
    feedId: string;
    bookmark?: string;
    pageSize?: number;
}

export interface FeedsCreateRequest {
    catalogsFeedsCreateRequest: CatalogsFeedsCreateRequest;
}

export interface FeedsDeleteRequest {
    feedId: string;
}

export interface FeedsGetRequest {
    feedId: string;
}

export interface FeedsListRequest {
    bookmark?: string;
    pageSize?: number;
}

export interface FeedsUpdateRequest {
    feedId: string;
    catalogsFeedsUpdateRequest: CatalogsFeedsUpdateRequest;
}

export interface ItemsBatchGetRequest {
    batchId: string;
}

export interface ItemsBatchPostRequest {
    catalogsItemsBatchRequest: CatalogsItemsBatchRequest;
}

export interface ItemsGetRequest {
    country: string;
    itemIds: Array<string>;
    language: string;
}

/**
 * 
 */
export class CatalogsApi extends runtime.BaseAPI {

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
     * Create product group
     */
    async catalogsProductGroupsCreateRaw(requestParameters: CatalogsProductGroupsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.catalogsProductGroupCreateRequest === null || requestParameters.catalogsProductGroupCreateRequest === undefined) {
            throw new runtime.RequiredError('catalogsProductGroupCreateRequest','Required parameter requestParameters.catalogsProductGroupCreateRequest was null or undefined when calling catalogsProductGroupsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/product_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogsProductGroupCreateRequestToJSON(requestParameters.catalogsProductGroupCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create product group to use in Catalogs.
     * Create product group
     */
    async catalogsProductGroupsCreate(requestParameters: CatalogsProductGroupsCreateRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.catalogsProductGroupsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
     * Delete product group
     */
    async catalogsProductGroupsDeleteRaw(requestParameters: CatalogsProductGroupsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productGroupId === null || requestParameters.productGroupId === undefined) {
            throw new runtime.RequiredError('productGroupId','Required parameter requestParameters.productGroupId was null or undefined when calling catalogsProductGroupsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/product_groups/{product_group_id}`.replace(`{${"product_group_id"}}`, encodeURIComponent(String(requestParameters.productGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.
     * Delete product group
     */
    async catalogsProductGroupsDelete(requestParameters: CatalogsProductGroupsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.catalogsProductGroupsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
     * Get product groups list
     */
    async catalogsProductGroupsListRaw(requestParameters: CatalogsProductGroupsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling catalogsProductGroupsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read"]);
        }

        const response = await this.request({
            path: `/catalogs/product_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.
     * Get product groups list
     */
    async catalogsProductGroupsList(requestParameters: CatalogsProductGroupsListRequest, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.catalogsProductGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
     * Update product group
     */
    async catalogsProductGroupsUpdateRaw(requestParameters: CatalogsProductGroupsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsProductGroup>> {
        if (requestParameters.productGroupId === null || requestParameters.productGroupId === undefined) {
            throw new runtime.RequiredError('productGroupId','Required parameter requestParameters.productGroupId was null or undefined when calling catalogsProductGroupsUpdate.');
        }

        if (requestParameters.catalogsProductGroupUpdateRequest === null || requestParameters.catalogsProductGroupUpdateRequest === undefined) {
            throw new runtime.RequiredError('catalogsProductGroupUpdateRequest','Required parameter requestParameters.catalogsProductGroupUpdateRequest was null or undefined when calling catalogsProductGroupsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/product_groups/{product_group_id}`.replace(`{${"product_group_id"}}`, encodeURIComponent(String(requestParameters.productGroupId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogsProductGroupUpdateRequestToJSON(requestParameters.catalogsProductGroupUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsProductGroupFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update product group to use in Catalogs.
     * Update product group
     */
    async catalogsProductGroupsUpdate(requestParameters: CatalogsProductGroupsUpdateRequest, initOverrides?: RequestInit): Promise<CatalogsProductGroup> {
        const response = await this.catalogsProductGroupsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
     * List processing results for a given feed
     */
    async feedProcessingResultsListRaw(requestParameters: FeedProcessingResultsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling feedProcessingResultsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read"]);
        }

        const response = await this.request({
            path: `/catalogs/feeds/{feed_id}/processing_results`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.
     * List processing results for a given feed
     */
    async feedProcessingResultsList(requestParameters: FeedProcessingResultsListRequest, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.feedProcessingResultsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
     * Create feed
     */
    async feedsCreateRaw(requestParameters: FeedsCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsFeed>> {
        if (requestParameters.catalogsFeedsCreateRequest === null || requestParameters.catalogsFeedsCreateRequest === undefined) {
            throw new runtime.RequiredError('catalogsFeedsCreateRequest','Required parameter requestParameters.catalogsFeedsCreateRequest was null or undefined when calling feedsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/feeds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogsFeedsCreateRequestToJSON(requestParameters.catalogsFeedsCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsFeedFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".
     * Create feed
     */
    async feedsCreate(requestParameters: FeedsCreateRequest, initOverrides?: RequestInit): Promise<CatalogsFeed> {
        const response = await this.feedsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
     * Delete feed
     */
    async feedsDeleteRaw(requestParameters: FeedsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling feedsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".
     * Delete feed
     */
    async feedsDelete(requestParameters: FeedsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.feedsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
     * Get feed
     */
    async feedsGetRaw(requestParameters: FeedsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsFeed>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling feedsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read"]);
        }

        const response = await this.request({
            path: `/catalogs/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsFeedFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".
     * Get feed
     */
    async feedsGet(requestParameters: FeedsGetRequest, initOverrides?: RequestInit): Promise<CatalogsFeed> {
        const response = await this.feedsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
     * List feeds
     */
    async feedsListRaw(requestParameters: FeedsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        const queryParameters: any = {};

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read"]);
        }

        const response = await this.request({
            path: `/catalogs/feeds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".
     * List feeds
     */
    async feedsList(requestParameters: FeedsListRequest = {}, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.feedsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
     * Update feed
     */
    async feedsUpdateRaw(requestParameters: FeedsUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsFeed>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling feedsUpdate.');
        }

        if (requestParameters.catalogsFeedsUpdateRequest === null || requestParameters.catalogsFeedsUpdateRequest === undefined) {
            throw new runtime.RequiredError('catalogsFeedsUpdateRequest','Required parameter requestParameters.catalogsFeedsUpdateRequest was null or undefined when calling feedsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogsFeedsUpdateRequestToJSON(requestParameters.catalogsFeedsUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsFeedFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".
     * Update feed
     */
    async feedsUpdate(requestParameters: FeedsUpdateRequest, initOverrides?: RequestInit): Promise<CatalogsFeed> {
        const response = await this.feedsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
     * Get catalogs items batch
     */
    async itemsBatchGetRaw(requestParameters: ItemsBatchGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsItemsBatch>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling itemsBatchGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read"]);
        }

        const response = await this.request({
            path: `/catalogs/items/batch/{batch_id}`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsItemsBatchFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".
     * Get catalogs items batch
     */
    async itemsBatchGet(requestParameters: ItemsBatchGetRequest, initOverrides?: RequestInit): Promise<CatalogsItemsBatch> {
        const response = await this.itemsBatchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
     * Perform an operation on an item batch
     */
    async itemsBatchPostRaw(requestParameters: ItemsBatchPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsItemsBatch>> {
        if (requestParameters.catalogsItemsBatchRequest === null || requestParameters.catalogsItemsBatchRequest === undefined) {
            throw new runtime.RequiredError('catalogsItemsBatchRequest','Required parameter requestParameters.catalogsItemsBatchRequest was null or undefined when calling itemsBatchPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read", "catalogs:write"]);
        }

        const response = await this.request({
            path: `/catalogs/items/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogsItemsBatchRequestToJSON(requestParameters.catalogsItemsBatchRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsItemsBatchFromJSON(jsonValue));
    }

    /**
     * <strong>This endpoint is currently in beta and not available to all apps. <a href=\'/docs/api/v5/#tag/Understanding-catalog-management\'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.
     * Perform an operation on an item batch
     */
    async itemsBatchPost(requestParameters: ItemsBatchPostRequest, initOverrides?: RequestInit): Promise<CatalogsItemsBatch> {
        const response = await this.itemsBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the items of the catalog created by the \"operating user_account\"
     * Get catalogs items
     */
    async itemsGetRaw(requestParameters: ItemsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CatalogsItems>> {
        if (requestParameters.country === null || requestParameters.country === undefined) {
            throw new runtime.RequiredError('country','Required parameter requestParameters.country was null or undefined when calling itemsGet.');
        }

        if (requestParameters.itemIds === null || requestParameters.itemIds === undefined) {
            throw new runtime.RequiredError('itemIds','Required parameter requestParameters.itemIds was null or undefined when calling itemsGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling itemsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.itemIds) {
            queryParameters['item_ids'] = requestParameters.itemIds;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["catalogs:read"]);
        }

        const response = await this.request({
            path: `/catalogs/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogsItemsFromJSON(jsonValue));
    }

    /**
     * Get the items of the catalog created by the \"operating user_account\"
     * Get catalogs items
     */
    async itemsGet(requestParameters: ItemsGetRequest, initOverrides?: RequestInit): Promise<CatalogsItems> {
        const response = await this.itemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
