/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
    AnalyticsMetricsResponse,
    AnalyticsMetricsResponseFromJSON,
    AnalyticsMetricsResponseToJSON,
} from '../models';

export interface UserAccountAnalyticsRequest {
    startDate: Date;
    endDate: Date;
    fromClaimedContent?: UserAccountAnalyticsFromClaimedContentEnum;
    pinFormat?: UserAccountAnalyticsPinFormatEnum;
    appTypes?: UserAccountAnalyticsAppTypesEnum;
    metricTypes?: Array<UserAccountAnalyticsMetricTypesEnum>;
    splitField?: UserAccountAnalyticsSplitFieldEnum;
    adAccountId?: string;
}

export interface UserAccountGetRequest {
    adAccountId?: string;
}

/**
 * 
 */
export class UserAccountApi extends runtime.BaseAPI {

    /**
     * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
     * Get user account analytics
     */
    async userAccountAnalyticsRaw(requestParameters: UserAccountAnalyticsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: AnalyticsMetricsResponse; }>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling userAccountAnalytics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling userAccountAnalytics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fromClaimedContent !== undefined) {
            queryParameters['from_claimed_content'] = requestParameters.fromClaimedContent;
        }

        if (requestParameters.pinFormat !== undefined) {
            queryParameters['pin_format'] = requestParameters.pinFormat;
        }

        if (requestParameters.appTypes !== undefined) {
            queryParameters['app_types'] = requestParameters.appTypes;
        }

        if (requestParameters.metricTypes) {
            queryParameters['metric_types'] = requestParameters.metricTypes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.splitField !== undefined) {
            queryParameters['split_field'] = requestParameters.splitField;
        }

        if (requestParameters.adAccountId !== undefined) {
            queryParameters['ad_account_id'] = requestParameters.adAccountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["user_accounts:read"]);
        }

        const response = await this.request({
            path: `/user_account/analytics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, AnalyticsMetricsResponseFromJSON));
    }

    /**
     * Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
     * Get user account analytics
     */
    async userAccountAnalytics(requestParameters: UserAccountAnalyticsRequest, initOverrides?: RequestInit): Promise<{ [key: string]: AnalyticsMetricsResponse; }> {
        const response = await this.userAccountAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
     * Get user account
     */
    async userAccountGetRaw(requestParameters: UserAccountGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        if (requestParameters.adAccountId !== undefined) {
            queryParameters['ad_account_id'] = requestParameters.adAccountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["user_accounts:read"]);
        }

        const response = await this.request({
            path: `/user_account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href=\'/docs/api/v5/#tag/Understanding-business-access\'>Understanding Business Access</a> for more information.
     * Get user account
     */
    async userAccountGet(requestParameters: UserAccountGetRequest = {}, initOverrides?: RequestInit): Promise<Account> {
        const response = await this.userAccountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum UserAccountAnalyticsFromClaimedContentEnum {
    Other = 'OTHER',
    Claimed = 'CLAIMED',
    Both = 'BOTH'
}
/**
    * @export
    * @enum {string}
    */
export enum UserAccountAnalyticsPinFormatEnum {
    All = 'ALL',
    Product = 'PRODUCT',
    Regular = 'REGULAR',
    Video = 'VIDEO'
}
/**
    * @export
    * @enum {string}
    */
export enum UserAccountAnalyticsAppTypesEnum {
    All = 'ALL',
    Mobile = 'MOBILE',
    Tablet = 'TABLET',
    Web = 'WEB'
}
/**
    * @export
    * @enum {string}
    */
export enum UserAccountAnalyticsMetricTypesEnum {
    Engagement = 'ENGAGEMENT',
    EngagementRate = 'ENGAGEMENT_RATE',
    Impression = 'IMPRESSION',
    OutboundClick = 'OUTBOUND_CLICK',
    OutboundClickRate = 'OUTBOUND_CLICK_RATE',
    PinClick = 'PIN_CLICK',
    PinClickRate = 'PIN_CLICK_RATE',
    Save = 'SAVE',
    SaveRate = 'SAVE_RATE'
}
/**
    * @export
    * @enum {string}
    */
export enum UserAccountAnalyticsSplitFieldEnum {
    NoSplit = 'NO_SPLIT',
    AppType = 'APP_TYPE',
    OwnedContent = 'OWNED_CONTENT',
    PinFormat = 'PIN_FORMAT'
}
