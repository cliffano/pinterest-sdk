/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdsAnalyticsTargetingType,
  CampaignCreateRequest,
  CampaignCreateResponse,
  CampaignResponse,
  CampaignUpdateRequest,
  CampaignUpdateResponse,
  CampaignsAnalyticsResponseInner,
  CampaignsList200Response,
  ConversionReportAttributionType,
  Granularity,
  MetricsResponse,
} from '../models/index';
import {
    AdsAnalyticsTargetingTypeFromJSON,
    AdsAnalyticsTargetingTypeToJSON,
    CampaignCreateRequestFromJSON,
    CampaignCreateRequestToJSON,
    CampaignCreateResponseFromJSON,
    CampaignCreateResponseToJSON,
    CampaignResponseFromJSON,
    CampaignResponseToJSON,
    CampaignUpdateRequestFromJSON,
    CampaignUpdateRequestToJSON,
    CampaignUpdateResponseFromJSON,
    CampaignUpdateResponseToJSON,
    CampaignsAnalyticsResponseInnerFromJSON,
    CampaignsAnalyticsResponseInnerToJSON,
    CampaignsList200ResponseFromJSON,
    CampaignsList200ResponseToJSON,
    ConversionReportAttributionTypeFromJSON,
    ConversionReportAttributionTypeToJSON,
    GranularityFromJSON,
    GranularityToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
} from '../models/index';

export interface CampaignTargetingAnalyticsGetRequest {
    adAccountId: string;
    campaignIds: Array<string>;
    startDate: Date;
    endDate: Date;
    targetingTypes: Array<AdsAnalyticsTargetingType>;
    columns: Array<CampaignTargetingAnalyticsGetColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: CampaignTargetingAnalyticsGetClickWindowDaysEnum;
    engagementWindowDays?: CampaignTargetingAnalyticsGetEngagementWindowDaysEnum;
    viewWindowDays?: CampaignTargetingAnalyticsGetViewWindowDaysEnum;
    conversionReportTime?: CampaignTargetingAnalyticsGetConversionReportTimeEnum;
    attributionTypes?: ConversionReportAttributionType;
}

export interface CampaignsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    campaignIds: Array<string>;
    columns: Array<CampaignsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: CampaignsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: CampaignsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: CampaignsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: CampaignsAnalyticsConversionReportTimeEnum;
}

export interface CampaignsCreateRequest {
    adAccountId: string;
    campaignCreateRequest: Array<CampaignCreateRequest>;
}

export interface CampaignsGetRequest {
    adAccountId: string;
    campaignId: string;
}

export interface CampaignsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    entityStatuses?: Array<CampaignsListEntityStatusesEnum>;
    pageSize?: number;
    order?: CampaignsListOrderEnum;
    bookmark?: string;
}

export interface CampaignsUpdateRequest {
    adAccountId: string;
    campaignUpdateRequest: Array<CampaignUpdateRequest>;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get targeting analytics for campaigns
     */
    async campaignTargetingAnalyticsGetRaw(requestParameters: CampaignTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['campaignIds'] == null) {
            throw new runtime.RequiredError(
                'campaignIds',
                'Required parameter "campaignIds" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['targetingTypes'] == null) {
            throw new runtime.RequiredError(
                'targetingTypes',
                'Required parameter "targetingTypes" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling campaignTargetingAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaign_ids'] = requestParameters['campaignIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['targetingTypes'] != null) {
            queryParameters['targeting_types'] = requestParameters['targetingTypes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        if (requestParameters['attributionTypes'] != null) {
            queryParameters['attribution_types'] = requestParameters['attributionTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns/targeting_analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get targeting analytics for one or more campaigns. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get targeting analytics for campaigns
     */
    async campaignTargetingAnalyticsGet(requestParameters: CampaignTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.campaignTargetingAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get campaign analytics
     */
    async campaignsAnalyticsRaw(requestParameters: CampaignsAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CampaignsAnalyticsResponseInner>>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling campaignsAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling campaignsAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling campaignsAnalytics().'
            );
        }

        if (requestParameters['campaignIds'] == null) {
            throw new runtime.RequiredError(
                'campaignIds',
                'Required parameter "campaignIds" was null or undefined when calling campaignsAnalytics().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling campaignsAnalytics().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling campaignsAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaign_ids'] = requestParameters['campaignIds'];
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CampaignsAnalyticsResponseInnerFromJSON));
    }

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get campaign analytics
     */
    async campaignsAnalytics(requestParameters: CampaignsAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CampaignsAnalyticsResponseInner>> {
        const response = await this.campaignsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see <a href=\"https://help.pinterest.com/en/business/article/set-up-your-campaign/\">Set up your campaign</a>. <p/> <strong>Note:</strong> - The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
     * Create campaigns
     */
    async campaignsCreateRaw(requestParameters: CampaignsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignCreateResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling campaignsCreate().'
            );
        }

        if (requestParameters['campaignCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignCreateRequest',
                'Required parameter "campaignCreateRequest" was null or undefined when calling campaignsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['campaignCreateRequest']!.map(CampaignCreateRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple new campaigns. Every campaign has its own campaign_id and houses one or more ad groups, which contain one or more ads. For more, see <a href=\"https://help.pinterest.com/en/business/article/set-up-your-campaign/\">Set up your campaign</a>. <p/> <strong>Note:</strong> - The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
     * Create campaigns
     */
    async campaignsCreate(requestParameters: CampaignsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignCreateResponse> {
        const response = await this.campaignsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific campaign given the campaign ID.
     * Get campaign
     */
    async campaignsGetRaw(requestParameters: CampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling campaignsGet().'
            );
        }

        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling campaignsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns/{campaign_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific campaign given the campaign ID.
     * Get campaign
     */
    async campaignsGet(requestParameters: CampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignResponse> {
        const response = await this.campaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List campaigns
     */
    async campaignsListRaw(requestParameters: CampaignsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignsList200Response>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling campaignsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaign_ids'] = requestParameters['campaignIds'];
        }

        if (requestParameters['entityStatuses'] != null) {
            queryParameters['entity_statuses'] = requestParameters['entityStatuses'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List campaigns
     */
    async campaignsList(requestParameters: CampaignsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignsList200Response> {
        const response = await this.campaignsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple ad campaigns based on campaign_ids. <p/> <strong>Note:</strong><p/> - <p>The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
     * Update campaigns
     */
    async campaignsUpdateRaw(requestParameters: CampaignsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignUpdateResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling campaignsUpdate().'
            );
        }

        if (requestParameters['campaignUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'campaignUpdateRequest',
                'Required parameter "campaignUpdateRequest" was null or undefined when calling campaignsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['campaignUpdateRequest']!.map(CampaignUpdateRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple ad campaigns based on campaign_ids. <p/> <strong>Note:</strong><p/> - <p>The values for \'lifetime_spend_cap\' and \'daily_spend_cap\' are microcurrency amounts based on the currency field set in the advertiser\'s profile. (e.g. USD) <p/> <p>Microcurrency is used to track very small transactions, based on the currency set in the advertiser’s profile.</p> <p>A microcurrency unit is 10^(-6) of the standard unit of currency selected in the advertiser’s profile.</p> <p><strong>Equivalency equations</strong>, using dollars as an example currency:</p> <ul>   <li>$1 = 1,000,000 microdollars</li>   <li>1 microdollar = $0.000001 </li> </ul> <p><strong>To convert between currency and microcurrency</strong>, using dollars as an example currency:</p> <ul>   <li>To convert dollars to microdollars, mutiply dollars by 1,000,000</li>   <li>To convert microdollars to dollars, divide microdollars by 1,000,000</li> </ul>
     * Update campaigns
     */
    async campaignsUpdate(requestParameters: CampaignsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignUpdateResponse> {
        const response = await this.campaignsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CampaignTargetingAnalyticsGetColumnsEnum = {
    AdvertiserId: 'ADVERTISER_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    AdGroupId: 'AD_GROUP_ID',
    AdId: 'AD_ID',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignId: 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName: 'CAMPAIGN_NAME',
    CheckoutRoas: 'CHECKOUT_ROAS',
    Clickthrough1: 'CLICKTHROUGH_1',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    Clickthrough2: 'CLICKTHROUGH_2',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ctr2: 'CTR_2',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    Ectr: 'ECTR',
    EengagementRate: 'EENGAGEMENT_RATE',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EngagementRate: 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Impression2: 'IMPRESSION_2',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    PaidImpression: 'PAID_IMPRESSION',
    PinId: 'PIN_ID',
    Repin1: 'REPIN_1',
    Repin2: 'REPIN_2',
    RepinRate: 'REPIN_RATE',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalLead: 'TOTAL_LEAD',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2'
} as const;
export type CampaignTargetingAnalyticsGetColumnsEnum = typeof CampaignTargetingAnalyticsGetColumnsEnum[keyof typeof CampaignTargetingAnalyticsGetColumnsEnum];
/**
 * @export
 */
export const CampaignTargetingAnalyticsGetClickWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type CampaignTargetingAnalyticsGetClickWindowDaysEnum = typeof CampaignTargetingAnalyticsGetClickWindowDaysEnum[keyof typeof CampaignTargetingAnalyticsGetClickWindowDaysEnum];
/**
 * @export
 */
export const CampaignTargetingAnalyticsGetEngagementWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type CampaignTargetingAnalyticsGetEngagementWindowDaysEnum = typeof CampaignTargetingAnalyticsGetEngagementWindowDaysEnum[keyof typeof CampaignTargetingAnalyticsGetEngagementWindowDaysEnum];
/**
 * @export
 */
export const CampaignTargetingAnalyticsGetViewWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type CampaignTargetingAnalyticsGetViewWindowDaysEnum = typeof CampaignTargetingAnalyticsGetViewWindowDaysEnum[keyof typeof CampaignTargetingAnalyticsGetViewWindowDaysEnum];
/**
 * @export
 */
export const CampaignTargetingAnalyticsGetConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type CampaignTargetingAnalyticsGetConversionReportTimeEnum = typeof CampaignTargetingAnalyticsGetConversionReportTimeEnum[keyof typeof CampaignTargetingAnalyticsGetConversionReportTimeEnum];
/**
 * @export
 */
export const CampaignsAnalyticsColumnsEnum = {
    AdvertiserId: 'ADVERTISER_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    AdGroupId: 'AD_GROUP_ID',
    AdId: 'AD_ID',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignId: 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName: 'CAMPAIGN_NAME',
    CheckoutRoas: 'CHECKOUT_ROAS',
    Clickthrough1: 'CLICKTHROUGH_1',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    Clickthrough2: 'CLICKTHROUGH_2',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ctr2: 'CTR_2',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    Ectr: 'ECTR',
    EengagementRate: 'EENGAGEMENT_RATE',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EngagementRate: 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Impression2: 'IMPRESSION_2',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    PaidImpression: 'PAID_IMPRESSION',
    PinId: 'PIN_ID',
    Repin1: 'REPIN_1',
    Repin2: 'REPIN_2',
    RepinRate: 'REPIN_RATE',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalLead: 'TOTAL_LEAD',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2'
} as const;
export type CampaignsAnalyticsColumnsEnum = typeof CampaignsAnalyticsColumnsEnum[keyof typeof CampaignsAnalyticsColumnsEnum];
/**
 * @export
 */
export const CampaignsAnalyticsClickWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type CampaignsAnalyticsClickWindowDaysEnum = typeof CampaignsAnalyticsClickWindowDaysEnum[keyof typeof CampaignsAnalyticsClickWindowDaysEnum];
/**
 * @export
 */
export const CampaignsAnalyticsEngagementWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type CampaignsAnalyticsEngagementWindowDaysEnum = typeof CampaignsAnalyticsEngagementWindowDaysEnum[keyof typeof CampaignsAnalyticsEngagementWindowDaysEnum];
/**
 * @export
 */
export const CampaignsAnalyticsViewWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type CampaignsAnalyticsViewWindowDaysEnum = typeof CampaignsAnalyticsViewWindowDaysEnum[keyof typeof CampaignsAnalyticsViewWindowDaysEnum];
/**
 * @export
 */
export const CampaignsAnalyticsConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type CampaignsAnalyticsConversionReportTimeEnum = typeof CampaignsAnalyticsConversionReportTimeEnum[keyof typeof CampaignsAnalyticsConversionReportTimeEnum];
/**
 * @export
 */
export const CampaignsListEntityStatusesEnum = {
    Active: 'ACTIVE',
    Paused: 'PAUSED',
    Archived: 'ARCHIVED'
} as const;
export type CampaignsListEntityStatusesEnum = typeof CampaignsListEntityStatusesEnum[keyof typeof CampaignsListEntityStatusesEnum];
/**
 * @export
 */
export const CampaignsListOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type CampaignsListOrderEnum = typeof CampaignsListOrderEnum[keyof typeof CampaignsListOrderEnum];
