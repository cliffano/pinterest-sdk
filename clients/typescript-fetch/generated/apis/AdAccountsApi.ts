/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdsAnalyticsCreateAsyncRequest,
    AdsAnalyticsCreateAsyncRequestFromJSON,
    AdsAnalyticsCreateAsyncRequestToJSON,
    AdsAnalyticsCreateAsyncResponse,
    AdsAnalyticsCreateAsyncResponseFromJSON,
    AdsAnalyticsCreateAsyncResponseToJSON,
    AdsAnalyticsGetAsyncResponse,
    AdsAnalyticsGetAsyncResponseFromJSON,
    AdsAnalyticsGetAsyncResponseToJSON,
    Granularity,
    GranularityFromJSON,
    GranularityToJSON,
    Paginated,
    PaginatedFromJSON,
    PaginatedToJSON,
} from '../models';

export interface AdAccountAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    columns: Array<AdAccountAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdAccountAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdAccountAnalyticsConversionReportTimeEnum;
}

export interface AdAccountsListRequest {
    bookmark?: string;
    pageSize?: number;
    includeSharedAccounts?: boolean;
}

export interface AdGroupsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    adGroupIds: Array<string>;
    columns: Array<AdGroupsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdGroupsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdGroupsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdGroupsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdGroupsAnalyticsConversionReportTimeEnum;
}

export interface AdGroupsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    adGroupIds?: Array<string>;
    entityStatuses?: Array<AdGroupsListEntityStatusesEnum>;
    pageSize?: number;
    order?: AdGroupsListOrderEnum;
    bookmark?: string;
    translateInterestsToNames?: boolean;
}

export interface AdsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    adIds: Array<string>;
    columns: Array<AdsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdsAnalyticsConversionReportTimeEnum;
}

export interface AdsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    adGroupIds?: Array<string>;
    adIds?: Array<string>;
    entityStatuses?: Array<AdsListEntityStatusesEnum>;
    pageSize?: number;
    order?: AdsListOrderEnum;
    bookmark?: string;
}

export interface AnalyticsCreateReportRequest {
    adAccountId: string;
    adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest;
}

export interface AnalyticsGetReportRequest {
    adAccountId: string;
    token: string;
}

export interface CampaignsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    campaignIds: Array<string>;
    columns: Array<CampaignsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: CampaignsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: CampaignsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: CampaignsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: CampaignsAnalyticsConversionReportTimeEnum;
}

export interface CampaignsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    entityStatuses?: Array<CampaignsListEntityStatusesEnum>;
    pageSize?: number;
    order?: CampaignsListOrderEnum;
    bookmark?: string;
}

export interface ProductGroupsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    productGroupIds: Array<string>;
    columns: Array<ProductGroupsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: ProductGroupsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: ProductGroupsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: ProductGroupsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: ProductGroupsAnalyticsConversionReportTimeEnum;
}

/**
 * 
 */
export class AdAccountsApi extends runtime.BaseAPI {

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad account analytics
     */
    async adAccountAnalyticsRaw(requestParameters: AdAccountAnalyticsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adAccountAnalytics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling adAccountAnalytics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling adAccountAnalytics.');
        }

        if (requestParameters.columns === null || requestParameters.columns === undefined) {
            throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling adAccountAnalytics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling adAccountAnalytics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.columns) {
            queryParameters['columns'] = requestParameters.columns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = requestParameters.clickWindowDays;
        }

        if (requestParameters.engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
        }

        if (requestParameters.viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = requestParameters.viewWindowDays;
        }

        if (requestParameters.conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad account analytics
     */
    async adAccountAnalytics(requestParameters: AdAccountAnalyticsRequest, initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.adAccountAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    async adAccountsListRaw(requestParameters: AdAccountsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        const queryParameters: any = {};

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.includeSharedAccounts !== undefined) {
            queryParameters['include_shared_accounts'] = requestParameters.includeSharedAccounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    async adAccountsList(requestParameters: AdAccountsListRequest = {}, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.adAccountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad group analytics
     */
    async adGroupsAnalyticsRaw(requestParameters: AdGroupsAnalyticsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adGroupsAnalytics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling adGroupsAnalytics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling adGroupsAnalytics.');
        }

        if (requestParameters.adGroupIds === null || requestParameters.adGroupIds === undefined) {
            throw new runtime.RequiredError('adGroupIds','Required parameter requestParameters.adGroupIds was null or undefined when calling adGroupsAnalytics.');
        }

        if (requestParameters.columns === null || requestParameters.columns === undefined) {
            throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling adGroupsAnalytics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling adGroupsAnalytics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.adGroupIds) {
            queryParameters['ad_group_ids'] = requestParameters.adGroupIds;
        }

        if (requestParameters.columns) {
            queryParameters['columns'] = requestParameters.columns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = requestParameters.clickWindowDays;
        }

        if (requestParameters.engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
        }

        if (requestParameters.viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = requestParameters.viewWindowDays;
        }

        if (requestParameters.conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get analytics for the specified ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad group analytics
     */
    async adGroupsAnalytics(requestParameters: AdGroupsAnalyticsRequest, initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.adGroupsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List ad groups
     */
    async adGroupsListRaw(requestParameters: AdGroupsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adGroupsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.campaignIds) {
            queryParameters['campaign_ids'] = requestParameters.campaignIds;
        }

        if (requestParameters.adGroupIds) {
            queryParameters['ad_group_ids'] = requestParameters.adGroupIds;
        }

        if (requestParameters.entityStatuses) {
            queryParameters['entity_statuses'] = requestParameters.entityStatuses;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        if (requestParameters.translateInterestsToNames !== undefined) {
            queryParameters['translate_interests_to_names'] = requestParameters.translateInterestsToNames;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_groups`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get a list of the ad groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List ad groups
     */
    async adGroupsList(requestParameters: AdGroupsListRequest, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.adGroupsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad analytics
     */
    async adsAnalyticsRaw(requestParameters: AdsAnalyticsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adsAnalytics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling adsAnalytics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling adsAnalytics.');
        }

        if (requestParameters.adIds === null || requestParameters.adIds === undefined) {
            throw new runtime.RequiredError('adIds','Required parameter requestParameters.adIds was null or undefined when calling adsAnalytics.');
        }

        if (requestParameters.columns === null || requestParameters.columns === undefined) {
            throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling adsAnalytics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling adsAnalytics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.adIds) {
            queryParameters['ad_ids'] = requestParameters.adIds;
        }

        if (requestParameters.columns) {
            queryParameters['columns'] = requestParameters.columns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = requestParameters.clickWindowDays;
        }

        if (requestParameters.engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
        }

        if (requestParameters.viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = requestParameters.viewWindowDays;
        }

        if (requestParameters.conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad analytics
     */
    async adsAnalytics(requestParameters: AdsAnalyticsRequest, initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.adsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List ads
     */
    async adsListRaw(requestParameters: AdsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling adsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.campaignIds) {
            queryParameters['campaign_ids'] = requestParameters.campaignIds;
        }

        if (requestParameters.adGroupIds) {
            queryParameters['ad_group_ids'] = requestParameters.adGroupIds;
        }

        if (requestParameters.adIds) {
            queryParameters['ad_ids'] = requestParameters.adIds;
        }

        if (requestParameters.entityStatuses) {
            queryParameters['entity_statuses'] = requestParameters.entityStatuses;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get a list of the ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List ads
     */
    async adsList(requestParameters: AdsListRequest, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.adsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Create async request for an account analytics report
     */
    async analyticsCreateReportRaw(requestParameters: AnalyticsCreateReportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AdsAnalyticsCreateAsyncResponse>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsCreateReport.');
        }

        if (requestParameters.adsAnalyticsCreateAsyncRequest === null || requestParameters.adsAnalyticsCreateAsyncRequest === undefined) {
            throw new runtime.RequiredError('adsAnalyticsCreateAsyncRequest','Required parameter requestParameters.adsAnalyticsCreateAsyncRequest was null or undefined when calling analyticsCreateReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdsAnalyticsCreateAsyncRequestToJSON(requestParameters.adsAnalyticsCreateAsyncRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsCreateAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Create async request for an account analytics report
     */
    async analyticsCreateReport(requestParameters: AnalyticsCreateReportRequest, initOverrides?: RequestInit): Promise<AdsAnalyticsCreateAsyncResponse> {
        const response = await this.analyticsCreateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    async analyticsGetReportRaw(requestParameters: AnalyticsGetReportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AdsAnalyticsGetAsyncResponse>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling analyticsGetReport.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling analyticsGetReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsGetAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    async analyticsGetReport(requestParameters: AnalyticsGetReportRequest, initOverrides?: RequestInit): Promise<AdsAnalyticsGetAsyncResponse> {
        const response = await this.analyticsGetReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get campaign analytics
     */
    async campaignsAnalyticsRaw(requestParameters: CampaignsAnalyticsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling campaignsAnalytics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling campaignsAnalytics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling campaignsAnalytics.');
        }

        if (requestParameters.campaignIds === null || requestParameters.campaignIds === undefined) {
            throw new runtime.RequiredError('campaignIds','Required parameter requestParameters.campaignIds was null or undefined when calling campaignsAnalytics.');
        }

        if (requestParameters.columns === null || requestParameters.columns === undefined) {
            throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling campaignsAnalytics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling campaignsAnalytics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.campaignIds) {
            queryParameters['campaign_ids'] = requestParameters.campaignIds;
        }

        if (requestParameters.columns) {
            queryParameters['columns'] = requestParameters.columns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = requestParameters.clickWindowDays;
        }

        if (requestParameters.engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
        }

        if (requestParameters.viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = requestParameters.viewWindowDays;
        }

        if (requestParameters.conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get analytics for the specified campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get campaign analytics
     */
    async campaignsAnalytics(requestParameters: CampaignsAnalyticsRequest, initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.campaignsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List campaigns
     */
    async campaignsListRaw(requestParameters: CampaignsListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Paginated & object>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling campaignsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.campaignIds) {
            queryParameters['campaign_ids'] = requestParameters.campaignIds;
        }

        if (requestParameters.entityStatuses) {
            queryParameters['entity_statuses'] = requestParameters.entityStatuses;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.bookmark !== undefined) {
            queryParameters['bookmark'] = requestParameters.bookmark;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/campaigns`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Paginated &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get a list of the campaigns in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * List campaigns
     */
    async campaignsList(requestParameters: CampaignsListRequest, initOverrides?: RequestInit): Promise<Paginated & object> {
        const response = await this.campaignsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get product group analytics
     */
    async productGroupsAnalyticsRaw(requestParameters: ProductGroupsAnalyticsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<{ [key: string]: object; }>>> {
        if (requestParameters.adAccountId === null || requestParameters.adAccountId === undefined) {
            throw new runtime.RequiredError('adAccountId','Required parameter requestParameters.adAccountId was null or undefined when calling productGroupsAnalytics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling productGroupsAnalytics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling productGroupsAnalytics.');
        }

        if (requestParameters.productGroupIds === null || requestParameters.productGroupIds === undefined) {
            throw new runtime.RequiredError('productGroupIds','Required parameter requestParameters.productGroupIds was null or undefined when calling productGroupsAnalytics.');
        }

        if (requestParameters.columns === null || requestParameters.columns === undefined) {
            throw new runtime.RequiredError('columns','Required parameter requestParameters.columns was null or undefined when calling productGroupsAnalytics.');
        }

        if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
            throw new runtime.RequiredError('granularity','Required parameter requestParameters.granularity was null or undefined when calling productGroupsAnalytics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.productGroupIds) {
            queryParameters['product_group_ids'] = requestParameters.productGroupIds;
        }

        if (requestParameters.columns) {
            queryParameters['columns'] = requestParameters.columns.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.granularity !== undefined) {
            queryParameters['granularity'] = requestParameters.granularity;
        }

        if (requestParameters.clickWindowDays !== undefined) {
            queryParameters['click_window_days'] = requestParameters.clickWindowDays;
        }

        if (requestParameters.engagementWindowDays !== undefined) {
            queryParameters['engagement_window_days'] = requestParameters.engagementWindowDays;
        }

        if (requestParameters.viewWindowDays !== undefined) {
            queryParameters['view_window_days'] = requestParameters.viewWindowDays;
        }

        if (requestParameters.conversionReportTime !== undefined) {
            queryParameters['conversion_report_time'] = requestParameters.conversionReportTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/product_groups/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters.adAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get analytics for the specified product groups in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get product group analytics
     */
    async productGroupsAnalytics(requestParameters: ProductGroupsAnalyticsRequest, initOverrides?: RequestInit): Promise<Array<{ [key: string]: object; }>> {
        const response = await this.productGroupsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdAccountAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsListEntityStatusesEnum {
    Active = 'ACTIVE',
    Paused = 'PAUSED',
    Archived = 'ARCHIVED'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
    * @export
    * @enum {string}
    */
export enum AdsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
    * @export
    * @enum {string}
    */
export enum AdsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum AdsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum AdsListEntityStatusesEnum {
    Active = 'ACTIVE',
    Paused = 'PAUSED',
    Archived = 'ARCHIVED'
}
/**
    * @export
    * @enum {string}
    */
export enum AdsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsListEntityStatusesEnum {
    Active = 'ACTIVE',
    Paused = 'PAUSED',
    Archived = 'ARCHIVED'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignsListOrderEnum {
    Ascending = 'ASCENDING',
    Descending = 'DESCENDING'
}
/**
    * @export
    * @enum {string}
    */
export enum ProductGroupsAnalyticsColumnsEnum {
    AdAccountId = 'AD_ACCOUNT_ID',
    AdGroupEntityStatus = 'AD_GROUP_ENTITY_STATUS',
    AdGroupId = 'AD_GROUP_ID',
    AdId = 'AD_ID',
    CampaignDailySpendCap = 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus = 'CAMPAIGN_ENTITY_STATUS',
    CampaignId = 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap = 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName = 'CAMPAIGN_NAME',
    CheckoutRoas = 'CHECKOUT_ROAS',
    Clickthrough1 = 'CLICKTHROUGH_1',
    Clickthrough1Gross = 'CLICKTHROUGH_1_GROSS',
    Clickthrough2 = 'CLICKTHROUGH_2',
    CpcInMicroDollar = 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar = 'CPM_IN_DOLLAR',
    CpmInMicroDollar = 'CPM_IN_MICRO_DOLLAR',
    Ctr = 'CTR',
    Ctr2 = 'CTR_2',
    EcpcvInDollar = 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar = 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar = 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar = 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar = 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar = 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar = 'ECPV_IN_DOLLAR',
    Ectr = 'ECTR',
    EengagementRate = 'EENGAGEMENT_RATE',
    Engagement1 = 'ENGAGEMENT_1',
    Engagement2 = 'ENGAGEMENT_2',
    EngagementRate = 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1 = 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2 = 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1 = 'IMPRESSION_1',
    Impression1Gross = 'IMPRESSION_1_GROSS',
    Impression2 = 'IMPRESSION_2',
    InappCheckoutCostPerAction = 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1 = 'OUTBOUND_CLICK_1',
    OutboundClick2 = 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction = 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas = 'PAGE_VISIT_ROAS',
    PaidImpression = 'PAID_IMPRESSION',
    PinId = 'PIN_ID',
    Repin1 = 'REPIN_1',
    Repin2 = 'REPIN_2',
    RepinRate = 'REPIN_RATE',
    SpendInDollar = 'SPEND_IN_DOLLAR',
    SpendInMicroDollar = 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout = 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar = 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough = 'TOTAL_CLICKTHROUGH',
    TotalClickCheckout = 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar = 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead = 'TOTAL_CLICK_LEAD',
    TotalClickSignup = 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar = 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions = 'TOTAL_CONVERSIONS',
    TotalCustom = 'TOTAL_CUSTOM',
    TotalEngagement = 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout = 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar = 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead = 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup = 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar = 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit = 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency = 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser = 'TOTAL_IMPRESSION_USER',
    TotalLead = 'TOTAL_LEAD',
    TotalPageVisit = 'TOTAL_PAGE_VISIT',
    TotalRepinRate = 'TOTAL_REPIN_RATE',
    TotalSignup = 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar = 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews = 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond = 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews = 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined = 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete = 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined = 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined = 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined = 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined = 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewCheckout = 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar = 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead = 'TOTAL_VIEW_LEAD',
    TotalViewSignup = 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar = 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout = 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar = 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout = 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar = 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar = 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebViewCheckout = 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar = 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2 = 'VIDEO_3SEC_VIEWS_2',
    VideoLength = 'VIDEO_LENGTH',
    VideoMrcViews2 = 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2 = 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2 = 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2 = 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2 = 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2 = 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2 = 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction = 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas = 'WEB_CHECKOUT_ROAS'
}
/**
    * @export
    * @enum {string}
    */
export enum ProductGroupsAnalyticsClickWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum ProductGroupsAnalyticsEngagementWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum ProductGroupsAnalyticsViewWindowDaysEnum {
    NUMBER_1 = 1,
    NUMBER_7 = 7,
    NUMBER_30 = 30,
    NUMBER_60 = 60
}
/**
    * @export
    * @enum {string}
    */
export enum ProductGroupsAnalyticsConversionReportTimeEnum {
    AdAction = 'TIME_OF_AD_ACTION',
    Conversion = 'TIME_OF_CONVERSION'
}
