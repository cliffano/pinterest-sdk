/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdAccount,
  AdAccountAnalyticsResponseInner,
  AdAccountCreateRequest,
  AdAccountsList200Response,
  AdsAnalyticsCreateAsyncRequest,
  AdsAnalyticsCreateAsyncResponse,
  AdsAnalyticsGetAsyncResponse,
  AdsAnalyticsTargetingType,
  ConversionReportAttributionType,
  Granularity,
  MetricsResponse,
} from '../models/index';
import {
    AdAccountFromJSON,
    AdAccountToJSON,
    AdAccountAnalyticsResponseInnerFromJSON,
    AdAccountAnalyticsResponseInnerToJSON,
    AdAccountCreateRequestFromJSON,
    AdAccountCreateRequestToJSON,
    AdAccountsList200ResponseFromJSON,
    AdAccountsList200ResponseToJSON,
    AdsAnalyticsCreateAsyncRequestFromJSON,
    AdsAnalyticsCreateAsyncRequestToJSON,
    AdsAnalyticsCreateAsyncResponseFromJSON,
    AdsAnalyticsCreateAsyncResponseToJSON,
    AdsAnalyticsGetAsyncResponseFromJSON,
    AdsAnalyticsGetAsyncResponseToJSON,
    AdsAnalyticsTargetingTypeFromJSON,
    AdsAnalyticsTargetingTypeToJSON,
    ConversionReportAttributionTypeFromJSON,
    ConversionReportAttributionTypeToJSON,
    GranularityFromJSON,
    GranularityToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
} from '../models/index';

export interface AdAccountAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    columns: Array<AdAccountAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdAccountAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdAccountAnalyticsConversionReportTimeEnum;
}

export interface AdAccountTargetingAnalyticsGetRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    targetingTypes: Array<AdsAnalyticsTargetingType>;
    columns: Array<AdAccountTargetingAnalyticsGetColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdAccountTargetingAnalyticsGetClickWindowDaysEnum;
    engagementWindowDays?: AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum;
    viewWindowDays?: AdAccountTargetingAnalyticsGetViewWindowDaysEnum;
    conversionReportTime?: AdAccountTargetingAnalyticsGetConversionReportTimeEnum;
    attributionTypes?: ConversionReportAttributionType;
}

export interface AdAccountsCreateRequest {
    adAccountCreateRequest: AdAccountCreateRequest;
}

export interface AdAccountsGetRequest {
    adAccountId: string;
}

export interface AdAccountsListRequest {
    bookmark?: string;
    pageSize?: number;
    includeSharedAccounts?: boolean;
}

export interface AnalyticsCreateReportRequest {
    adAccountId: string;
    adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest;
}

export interface AnalyticsGetReportRequest {
    adAccountId: string;
    token: string;
}

/**
 * 
 */
export class AdAccountsApi extends runtime.BaseAPI {

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad account analytics
     */
    async adAccountAnalyticsRaw(requestParameters: AdAccountAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdAccountAnalyticsResponseInner>>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adAccountAnalytics().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adAccountAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdAccountAnalyticsResponseInnerFromJSON));
    }

    /**
     * Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad account analytics
     */
    async adAccountAnalytics(requestParameters: AdAccountAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdAccountAnalyticsResponseInner>> {
        const response = await this.adAccountAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get targeting analytics for an ad account
     */
    async adAccountTargetingAnalyticsGetRaw(requestParameters: AdAccountTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['targetingTypes'] == null) {
            throw new runtime.RequiredError(
                'targetingTypes',
                'Required parameter "targetingTypes" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adAccountTargetingAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['targetingTypes'] != null) {
            queryParameters['targeting_types'] = requestParameters['targetingTypes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        if (requestParameters['attributionTypes'] != null) {
            queryParameters['attribution_types'] = requestParameters['attributionTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/targeting_analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get targeting analytics for an ad account
     */
    async adAccountTargetingAnalyticsGet(requestParameters: AdAccountTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.adAccountTargetingAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
     * Create ad account
     */
    async adAccountsCreateRaw(requestParameters: AdAccountsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccount>> {
        if (requestParameters['adAccountCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'adAccountCreateRequest',
                'Required parameter "adAccountCreateRequest" was null or undefined when calling adAccountsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdAccountCreateRequestToJSON(requestParameters['adAccountCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountFromJSON(jsonValue));
    }

    /**
     * Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
     * Create ad account
     */
    async adAccountsCreate(requestParameters: AdAccountsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccount> {
        const response = await this.adAccountsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an ad account
     * Get ad account
     */
    async adAccountsGetRaw(requestParameters: AdAccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccount>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adAccountsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountFromJSON(jsonValue));
    }

    /**
     * Get an ad account
     * Get ad account
     */
    async adAccountsGet(requestParameters: AdAccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccount> {
        const response = await this.adAccountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    async adAccountsListRaw(requestParameters: AdAccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdAccountsList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['includeSharedAccounts'] != null) {
            queryParameters['include_shared_accounts'] = requestParameters['includeSharedAccounts'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdAccountsList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     * List ad accounts
     */
    async adAccountsList(requestParameters: AdAccountsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdAccountsList200Response> {
        const response = await this.adAccountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Create async request for an account analytics report
     */
    async analyticsCreateReportRaw(requestParameters: AnalyticsCreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdsAnalyticsCreateAsyncResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsCreateReport().'
            );
        }

        if (requestParameters['adsAnalyticsCreateAsyncRequest'] == null) {
            throw new runtime.RequiredError(
                'adsAnalyticsCreateAsyncRequest',
                'Required parameter "adsAnalyticsCreateAsyncRequest" was null or undefined when calling analyticsCreateReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdsAnalyticsCreateAsyncRequestToJSON(requestParameters['adsAnalyticsCreateAsyncRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsCreateAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Create async request for an account analytics report
     */
    async analyticsCreateReport(requestParameters: AnalyticsCreateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdsAnalyticsCreateAsyncResponse> {
        const response = await this.analyticsCreateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    async analyticsGetReportRaw(requestParameters: AnalyticsGetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdsAnalyticsGetAsyncResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling analyticsGetReport().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling analyticsGetReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/reports`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsAnalyticsGetAsyncResponseFromJSON(jsonValue));
    }

    /**
     * This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report and it\'s valid for an hour. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get the account analytics report created by the async call
     */
    async analyticsGetReport(requestParameters: AnalyticsGetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdsAnalyticsGetAsyncResponse> {
        const response = await this.analyticsGetReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AdAccountAnalyticsColumnsEnum = {
    AdvertiserId: 'ADVERTISER_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    AdGroupId: 'AD_GROUP_ID',
    AdId: 'AD_ID',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignId: 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName: 'CAMPAIGN_NAME',
    CheckoutRoas: 'CHECKOUT_ROAS',
    Clickthrough1: 'CLICKTHROUGH_1',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    Clickthrough2: 'CLICKTHROUGH_2',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ctr2: 'CTR_2',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    Ectr: 'ECTR',
    EengagementRate: 'EENGAGEMENT_RATE',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EngagementRate: 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Impression2: 'IMPRESSION_2',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    PaidImpression: 'PAID_IMPRESSION',
    PinId: 'PIN_ID',
    Repin1: 'REPIN_1',
    Repin2: 'REPIN_2',
    RepinRate: 'REPIN_RATE',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalLead: 'TOTAL_LEAD',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2'
} as const;
export type AdAccountAnalyticsColumnsEnum = typeof AdAccountAnalyticsColumnsEnum[keyof typeof AdAccountAnalyticsColumnsEnum];
/**
 * @export
 */
export const AdAccountAnalyticsClickWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountAnalyticsClickWindowDaysEnum = typeof AdAccountAnalyticsClickWindowDaysEnum[keyof typeof AdAccountAnalyticsClickWindowDaysEnum];
/**
 * @export
 */
export const AdAccountAnalyticsEngagementWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountAnalyticsEngagementWindowDaysEnum = typeof AdAccountAnalyticsEngagementWindowDaysEnum[keyof typeof AdAccountAnalyticsEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdAccountAnalyticsViewWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountAnalyticsViewWindowDaysEnum = typeof AdAccountAnalyticsViewWindowDaysEnum[keyof typeof AdAccountAnalyticsViewWindowDaysEnum];
/**
 * @export
 */
export const AdAccountAnalyticsConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdAccountAnalyticsConversionReportTimeEnum = typeof AdAccountAnalyticsConversionReportTimeEnum[keyof typeof AdAccountAnalyticsConversionReportTimeEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetColumnsEnum = {
    AdvertiserId: 'ADVERTISER_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    AdGroupId: 'AD_GROUP_ID',
    AdId: 'AD_ID',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignId: 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName: 'CAMPAIGN_NAME',
    CheckoutRoas: 'CHECKOUT_ROAS',
    Clickthrough1: 'CLICKTHROUGH_1',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    Clickthrough2: 'CLICKTHROUGH_2',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ctr2: 'CTR_2',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    Ectr: 'ECTR',
    EengagementRate: 'EENGAGEMENT_RATE',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EngagementRate: 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Impression2: 'IMPRESSION_2',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    PaidImpression: 'PAID_IMPRESSION',
    PinId: 'PIN_ID',
    Repin1: 'REPIN_1',
    Repin2: 'REPIN_2',
    RepinRate: 'REPIN_RATE',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalLead: 'TOTAL_LEAD',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2'
} as const;
export type AdAccountTargetingAnalyticsGetColumnsEnum = typeof AdAccountTargetingAnalyticsGetColumnsEnum[keyof typeof AdAccountTargetingAnalyticsGetColumnsEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetClickWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountTargetingAnalyticsGetClickWindowDaysEnum = typeof AdAccountTargetingAnalyticsGetClickWindowDaysEnum[keyof typeof AdAccountTargetingAnalyticsGetClickWindowDaysEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum = typeof AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum[keyof typeof AdAccountTargetingAnalyticsGetEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetViewWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdAccountTargetingAnalyticsGetViewWindowDaysEnum = typeof AdAccountTargetingAnalyticsGetViewWindowDaysEnum[keyof typeof AdAccountTargetingAnalyticsGetViewWindowDaysEnum];
/**
 * @export
 */
export const AdAccountTargetingAnalyticsGetConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdAccountTargetingAnalyticsGetConversionReportTimeEnum = typeof AdAccountTargetingAnalyticsGetConversionReportTimeEnum[keyof typeof AdAccountTargetingAnalyticsGetConversionReportTimeEnum];
