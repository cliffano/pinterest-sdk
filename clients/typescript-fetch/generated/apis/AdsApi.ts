/* tslint:disable */
/* eslint-disable */
/**
 * Pinterest REST API
 * Pinterest\'s REST API
 *
 * The version of the OpenAPI document: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdArrayResponse,
  AdCreateRequest,
  AdPreviewRequest,
  AdPreviewURLResponse,
  AdResponse,
  AdUpdateRequest,
  AdsAnalyticsResponseInner,
  AdsAnalyticsTargetingType,
  AdsList200Response,
  ConversionReportAttributionType,
  Granularity,
  MetricsResponse,
} from '../models/index';
import {
    AdArrayResponseFromJSON,
    AdArrayResponseToJSON,
    AdCreateRequestFromJSON,
    AdCreateRequestToJSON,
    AdPreviewRequestFromJSON,
    AdPreviewRequestToJSON,
    AdPreviewURLResponseFromJSON,
    AdPreviewURLResponseToJSON,
    AdResponseFromJSON,
    AdResponseToJSON,
    AdUpdateRequestFromJSON,
    AdUpdateRequestToJSON,
    AdsAnalyticsResponseInnerFromJSON,
    AdsAnalyticsResponseInnerToJSON,
    AdsAnalyticsTargetingTypeFromJSON,
    AdsAnalyticsTargetingTypeToJSON,
    AdsList200ResponseFromJSON,
    AdsList200ResponseToJSON,
    ConversionReportAttributionTypeFromJSON,
    ConversionReportAttributionTypeToJSON,
    GranularityFromJSON,
    GranularityToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
} from '../models/index';

export interface AdPreviewsCreateRequest {
    adAccountId: string;
    adPreviewRequest: AdPreviewRequest;
}

export interface AdTargetingAnalyticsGetRequest {
    adAccountId: string;
    adIds: Array<string>;
    startDate: Date;
    endDate: Date;
    targetingTypes: Array<AdsAnalyticsTargetingType>;
    columns: Array<AdTargetingAnalyticsGetColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdTargetingAnalyticsGetClickWindowDaysEnum;
    engagementWindowDays?: AdTargetingAnalyticsGetEngagementWindowDaysEnum;
    viewWindowDays?: AdTargetingAnalyticsGetViewWindowDaysEnum;
    conversionReportTime?: AdTargetingAnalyticsGetConversionReportTimeEnum;
    attributionTypes?: ConversionReportAttributionType;
}

export interface AdsAnalyticsRequest {
    adAccountId: string;
    startDate: Date;
    endDate: Date;
    adIds: Array<string>;
    columns: Array<AdsAnalyticsColumnsEnum>;
    granularity: Granularity;
    clickWindowDays?: AdsAnalyticsClickWindowDaysEnum;
    engagementWindowDays?: AdsAnalyticsEngagementWindowDaysEnum;
    viewWindowDays?: AdsAnalyticsViewWindowDaysEnum;
    conversionReportTime?: AdsAnalyticsConversionReportTimeEnum;
}

export interface AdsCreateRequest {
    adAccountId: string;
    adCreateRequest: Array<AdCreateRequest>;
}

export interface AdsGetRequest {
    adAccountId: string;
    adId: string;
}

export interface AdsListRequest {
    adAccountId: string;
    campaignIds?: Array<string>;
    adGroupIds?: Array<string>;
    adIds?: Array<string>;
    entityStatuses?: Array<AdsListEntityStatusesEnum>;
    pageSize?: number;
    order?: AdsListOrderEnum;
    bookmark?: string;
}

export interface AdsUpdateRequest {
    adAccountId: string;
    adUpdateRequest: Array<AdUpdateRequest>;
}

/**
 * 
 */
export class AdsApi extends runtime.BaseAPI {

    /**
     * Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. <p/> If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See <a href=\"https://help.pinterest.com/en/business/article/promoted-pins-overview\" target=\"_blank\">Ads Overview</a>.) <p/> You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires.
     * Create ad preview with pin or image
     */
    async adPreviewsCreateRaw(requestParameters: AdPreviewsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdPreviewURLResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adPreviewsCreate().'
            );
        }

        if (requestParameters['adPreviewRequest'] == null) {
            throw new runtime.RequiredError(
                'adPreviewRequest',
                'Required parameter "adPreviewRequest" was null or undefined when calling adPreviewsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ad_previews`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdPreviewRequestToJSON(requestParameters['adPreviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdPreviewURLResponseFromJSON(jsonValue));
    }

    /**
     * Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. <p/> If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See <a href=\"https://help.pinterest.com/en/business/article/promoted-pins-overview\" target=\"_blank\">Ads Overview</a>.) <p/> You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires.
     * Create ad preview with pin or image
     */
    async adPreviewsCreate(requestParameters: AdPreviewsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdPreviewURLResponse> {
        const response = await this.adPreviewsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get targeting analytics for ads
     */
    async adTargetingAnalyticsGetRaw(requestParameters: AdTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['adIds'] == null) {
            throw new runtime.RequiredError(
                'adIds',
                'Required parameter "adIds" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['targetingTypes'] == null) {
            throw new runtime.RequiredError(
                'targetingTypes',
                'Required parameter "targetingTypes" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adTargetingAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adIds'] != null) {
            queryParameters['ad_ids'] = requestParameters['adIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['targetingTypes'] != null) {
            queryParameters['targeting_types'] = requestParameters['targetingTypes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        if (requestParameters['attributionTypes'] != null) {
            queryParameters['attribution_types'] = requestParameters['attributionTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads/targeting_analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get targeting analytics for ads
     */
    async adTargetingAnalyticsGet(requestParameters: AdTargetingAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.adTargetingAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad analytics
     */
    async adsAnalyticsRaw(requestParameters: AdsAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdsAnalyticsResponseInner>>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adsAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adsAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adsAnalytics().'
            );
        }

        if (requestParameters['adIds'] == null) {
            throw new runtime.RequiredError(
                'adIds',
                'Required parameter "adIds" was null or undefined when calling adsAnalytics().'
            );
        }

        if (requestParameters['columns'] == null) {
            throw new runtime.RequiredError(
                'columns',
                'Required parameter "columns" was null or undefined when calling adsAnalytics().'
            );
        }

        if (requestParameters['granularity'] == null) {
            throw new runtime.RequiredError(
                'granularity',
                'Required parameter "granularity" was null or undefined when calling adsAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['adIds'] != null) {
            queryParameters['ad_ids'] = requestParameters['adIds'];
        }

        if (requestParameters['columns'] != null) {
            queryParameters['columns'] = requestParameters['columns']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['granularity'] != null) {
            queryParameters['granularity'] = requestParameters['granularity'];
        }

        if (requestParameters['clickWindowDays'] != null) {
            queryParameters['click_window_days'] = requestParameters['clickWindowDays'];
        }

        if (requestParameters['engagementWindowDays'] != null) {
            queryParameters['engagement_window_days'] = requestParameters['engagementWindowDays'];
        }

        if (requestParameters['viewWindowDays'] != null) {
            queryParameters['view_window_days'] = requestParameters['viewWindowDays'];
        }

        if (requestParameters['conversionReportTime'] != null) {
            queryParameters['conversion_report_time'] = requestParameters['conversionReportTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads/analytics`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdsAnalyticsResponseInnerFromJSON));
    }

    /**
     * Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token\'s user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     * Get ad analytics
     */
    async adsAnalytics(requestParameters: AdsAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdsAnalyticsResponseInner>> {
        const response = await this.adsAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
     * Create ads
     */
    async adsCreateRaw(requestParameters: AdsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdArrayResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adsCreate().'
            );
        }

        if (requestParameters['adCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'adCreateRequest',
                'Required parameter "adCreateRequest" was null or undefined when calling adsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['adCreateRequest']!.map(AdCreateRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdArrayResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
     * Create ads
     */
    async adsCreate(requestParameters: AdsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdArrayResponse> {
        const response = await this.adsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
     * Get ad
     */
    async adsGetRaw(requestParameters: AdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adsGet().'
            );
        }

        if (requestParameters['adId'] == null) {
            throw new runtime.RequiredError(
                'adId',
                'Required parameter "adId" was null or undefined when calling adsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads/{ad_id}`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))).replace(`{${"ad_id"}}`, encodeURIComponent(String(requestParameters['adId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
     * Get ad
     */
    async adsGet(requestParameters: AdsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdResponse> {
        const response = await this.adsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses <p/> If no filter is provided, all ads in the ad account are returned. <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. <p/> Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see <a href=\"https://policy.pinterest.com/en/advertising-guidelines\">Pinterest advertising standards</a>.
     * List ads
     */
    async adsListRaw(requestParameters: AdsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdsList200Response>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['campaignIds'] != null) {
            queryParameters['campaign_ids'] = requestParameters['campaignIds'];
        }

        if (requestParameters['adGroupIds'] != null) {
            queryParameters['ad_group_ids'] = requestParameters['adGroupIds'];
        }

        if (requestParameters['adIds'] != null) {
            queryParameters['ad_ids'] = requestParameters['adIds'];
        }

        if (requestParameters['entityStatuses'] != null) {
            queryParameters['entity_statuses'] = requestParameters['entityStatuses'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['bookmark'] != null) {
            queryParameters['bookmark'] = requestParameters['bookmark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:read"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdsList200ResponseFromJSON(jsonValue));
    }

    /**
     * List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses <p/> If no filter is provided, all ads in the ad account are returned. <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. <p/> Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see <a href=\"https://policy.pinterest.com/en/advertising-guidelines\">Pinterest advertising standards</a>.
     * List ads
     */
    async adsList(requestParameters: AdsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdsList200Response> {
        const response = await this.adsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple existing ads
     * Update ads
     */
    async adsUpdateRaw(requestParameters: AdsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdArrayResponse>> {
        if (requestParameters['adAccountId'] == null) {
            throw new runtime.RequiredError(
                'adAccountId',
                'Required parameter "adAccountId" was null or undefined when calling adsUpdate().'
            );
        }

        if (requestParameters['adUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'adUpdateRequest',
                'Required parameter "adUpdateRequest" was null or undefined when calling adsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("pinterest_oauth2", ["ads:write"]);
        }

        const response = await this.request({
            path: `/ad_accounts/{ad_account_id}/ads`.replace(`{${"ad_account_id"}}`, encodeURIComponent(String(requestParameters['adAccountId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['adUpdateRequest']!.map(AdUpdateRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdArrayResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple existing ads
     * Update ads
     */
    async adsUpdate(requestParameters: AdsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdArrayResponse> {
        const response = await this.adsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AdTargetingAnalyticsGetColumnsEnum = {
    AdvertiserId: 'ADVERTISER_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    AdGroupId: 'AD_GROUP_ID',
    AdId: 'AD_ID',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignId: 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName: 'CAMPAIGN_NAME',
    CheckoutRoas: 'CHECKOUT_ROAS',
    Clickthrough1: 'CLICKTHROUGH_1',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    Clickthrough2: 'CLICKTHROUGH_2',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ctr2: 'CTR_2',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    Ectr: 'ECTR',
    EengagementRate: 'EENGAGEMENT_RATE',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EngagementRate: 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Impression2: 'IMPRESSION_2',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    PaidImpression: 'PAID_IMPRESSION',
    PinId: 'PIN_ID',
    Repin1: 'REPIN_1',
    Repin2: 'REPIN_2',
    RepinRate: 'REPIN_RATE',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalLead: 'TOTAL_LEAD',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2'
} as const;
export type AdTargetingAnalyticsGetColumnsEnum = typeof AdTargetingAnalyticsGetColumnsEnum[keyof typeof AdTargetingAnalyticsGetColumnsEnum];
/**
 * @export
 */
export const AdTargetingAnalyticsGetClickWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdTargetingAnalyticsGetClickWindowDaysEnum = typeof AdTargetingAnalyticsGetClickWindowDaysEnum[keyof typeof AdTargetingAnalyticsGetClickWindowDaysEnum];
/**
 * @export
 */
export const AdTargetingAnalyticsGetEngagementWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdTargetingAnalyticsGetEngagementWindowDaysEnum = typeof AdTargetingAnalyticsGetEngagementWindowDaysEnum[keyof typeof AdTargetingAnalyticsGetEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdTargetingAnalyticsGetViewWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdTargetingAnalyticsGetViewWindowDaysEnum = typeof AdTargetingAnalyticsGetViewWindowDaysEnum[keyof typeof AdTargetingAnalyticsGetViewWindowDaysEnum];
/**
 * @export
 */
export const AdTargetingAnalyticsGetConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdTargetingAnalyticsGetConversionReportTimeEnum = typeof AdTargetingAnalyticsGetConversionReportTimeEnum[keyof typeof AdTargetingAnalyticsGetConversionReportTimeEnum];
/**
 * @export
 */
export const AdsAnalyticsColumnsEnum = {
    AdvertiserId: 'ADVERTISER_ID',
    PinPromotionId: 'PIN_PROMOTION_ID',
    AdAccountId: 'AD_ACCOUNT_ID',
    AdGroupEntityStatus: 'AD_GROUP_ENTITY_STATUS',
    AdGroupId: 'AD_GROUP_ID',
    AdId: 'AD_ID',
    CampaignDailySpendCap: 'CAMPAIGN_DAILY_SPEND_CAP',
    CampaignEntityStatus: 'CAMPAIGN_ENTITY_STATUS',
    CampaignId: 'CAMPAIGN_ID',
    CampaignLifetimeSpendCap: 'CAMPAIGN_LIFETIME_SPEND_CAP',
    CampaignName: 'CAMPAIGN_NAME',
    CheckoutRoas: 'CHECKOUT_ROAS',
    Clickthrough1: 'CLICKTHROUGH_1',
    Clickthrough1Gross: 'CLICKTHROUGH_1_GROSS',
    Clickthrough2: 'CLICKTHROUGH_2',
    CpcInMicroDollar: 'CPC_IN_MICRO_DOLLAR',
    CpmInDollar: 'CPM_IN_DOLLAR',
    CpmInMicroDollar: 'CPM_IN_MICRO_DOLLAR',
    Ctr: 'CTR',
    Ctr2: 'CTR_2',
    EcpcvInDollar: 'ECPCV_IN_DOLLAR',
    EcpcvP95InDollar: 'ECPCV_P95_IN_DOLLAR',
    EcpcInDollar: 'ECPC_IN_DOLLAR',
    EcpcInMicroDollar: 'ECPC_IN_MICRO_DOLLAR',
    EcpeInDollar: 'ECPE_IN_DOLLAR',
    EcpmInMicroDollar: 'ECPM_IN_MICRO_DOLLAR',
    EcpvInDollar: 'ECPV_IN_DOLLAR',
    Ectr: 'ECTR',
    EengagementRate: 'EENGAGEMENT_RATE',
    Engagement1: 'ENGAGEMENT_1',
    Engagement2: 'ENGAGEMENT_2',
    EngagementRate: 'ENGAGEMENT_RATE',
    IdeaPinProductTagVisit1: 'IDEA_PIN_PRODUCT_TAG_VISIT_1',
    IdeaPinProductTagVisit2: 'IDEA_PIN_PRODUCT_TAG_VISIT_2',
    Impression1: 'IMPRESSION_1',
    Impression1Gross: 'IMPRESSION_1_GROSS',
    Impression2: 'IMPRESSION_2',
    InappCheckoutCostPerAction: 'INAPP_CHECKOUT_COST_PER_ACTION',
    OutboundClick1: 'OUTBOUND_CLICK_1',
    OutboundClick2: 'OUTBOUND_CLICK_2',
    PageVisitCostPerAction: 'PAGE_VISIT_COST_PER_ACTION',
    PageVisitRoas: 'PAGE_VISIT_ROAS',
    PaidImpression: 'PAID_IMPRESSION',
    PinId: 'PIN_ID',
    Repin1: 'REPIN_1',
    Repin2: 'REPIN_2',
    RepinRate: 'REPIN_RATE',
    SpendInDollar: 'SPEND_IN_DOLLAR',
    SpendInMicroDollar: 'SPEND_IN_MICRO_DOLLAR',
    TotalCheckout: 'TOTAL_CHECKOUT',
    TotalCheckoutValueInMicroDollar: 'TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickthrough: 'TOTAL_CLICKTHROUGH',
    TotalClickAddToCart: 'TOTAL_CLICK_ADD_TO_CART',
    TotalClickCheckout: 'TOTAL_CLICK_CHECKOUT',
    TotalClickCheckoutValueInMicroDollar: 'TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalClickLead: 'TOTAL_CLICK_LEAD',
    TotalClickSignup: 'TOTAL_CLICK_SIGNUP',
    TotalClickSignupValueInMicroDollar: 'TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalConversions: 'TOTAL_CONVERSIONS',
    TotalCustom: 'TOTAL_CUSTOM',
    TotalEngagement: 'TOTAL_ENGAGEMENT',
    TotalEngagementCheckout: 'TOTAL_ENGAGEMENT_CHECKOUT',
    TotalEngagementCheckoutValueInMicroDollar: 'TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalEngagementLead: 'TOTAL_ENGAGEMENT_LEAD',
    TotalEngagementSignup: 'TOTAL_ENGAGEMENT_SIGNUP',
    TotalEngagementSignupValueInMicroDollar: 'TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalIdeaPinProductTagVisit: 'TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT',
    TotalImpressionFrequency: 'TOTAL_IMPRESSION_FREQUENCY',
    TotalImpressionUser: 'TOTAL_IMPRESSION_USER',
    TotalLead: 'TOTAL_LEAD',
    TotalOfflineCheckout: 'TOTAL_OFFLINE_CHECKOUT',
    TotalPageVisit: 'TOTAL_PAGE_VISIT',
    TotalRepinRate: 'TOTAL_REPIN_RATE',
    TotalSignup: 'TOTAL_SIGNUP',
    TotalSignupValueInMicroDollar: 'TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalVideo3SecViews: 'TOTAL_VIDEO_3SEC_VIEWS',
    TotalVideoAvgWatchtimeInSecond: 'TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND',
    TotalVideoMrcViews: 'TOTAL_VIDEO_MRC_VIEWS',
    TotalVideoP0Combined: 'TOTAL_VIDEO_P0_COMBINED',
    TotalVideoP100Complete: 'TOTAL_VIDEO_P100_COMPLETE',
    TotalVideoP25Combined: 'TOTAL_VIDEO_P25_COMBINED',
    TotalVideoP50Combined: 'TOTAL_VIDEO_P50_COMBINED',
    TotalVideoP75Combined: 'TOTAL_VIDEO_P75_COMBINED',
    TotalVideoP95Combined: 'TOTAL_VIDEO_P95_COMBINED',
    TotalViewAddToCart: 'TOTAL_VIEW_ADD_TO_CART',
    TotalViewCheckout: 'TOTAL_VIEW_CHECKOUT',
    TotalViewCheckoutValueInMicroDollar: 'TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalViewLead: 'TOTAL_VIEW_LEAD',
    TotalViewSignup: 'TOTAL_VIEW_SIGNUP',
    TotalViewSignupValueInMicroDollar: 'TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR',
    TotalWebCheckout: 'TOTAL_WEB_CHECKOUT',
    TotalWebCheckoutValueInMicroDollar: 'TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebClickCheckout: 'TOTAL_WEB_CLICK_CHECKOUT',
    TotalWebClickCheckoutValueInMicroDollar: 'TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebEngagementCheckout: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT',
    TotalWebEngagementCheckoutValueInMicroDollar: 'TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    TotalWebSessions: 'TOTAL_WEB_SESSIONS',
    TotalWebViewCheckout: 'TOTAL_WEB_VIEW_CHECKOUT',
    TotalWebViewCheckoutValueInMicroDollar: 'TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR',
    Video3SecViews2: 'VIDEO_3SEC_VIEWS_2',
    VideoLength: 'VIDEO_LENGTH',
    VideoMrcViews2: 'VIDEO_MRC_VIEWS_2',
    VideoP0Combined2: 'VIDEO_P0_COMBINED_2',
    VideoP100Complete2: 'VIDEO_P100_COMPLETE_2',
    VideoP25Combined2: 'VIDEO_P25_COMBINED_2',
    VideoP50Combined2: 'VIDEO_P50_COMBINED_2',
    VideoP75Combined2: 'VIDEO_P75_COMBINED_2',
    VideoP95Combined2: 'VIDEO_P95_COMBINED_2',
    WebCheckoutCostPerAction: 'WEB_CHECKOUT_COST_PER_ACTION',
    WebCheckoutRoas: 'WEB_CHECKOUT_ROAS',
    WebSessions1: 'WEB_SESSIONS_1',
    WebSessions2: 'WEB_SESSIONS_2'
} as const;
export type AdsAnalyticsColumnsEnum = typeof AdsAnalyticsColumnsEnum[keyof typeof AdsAnalyticsColumnsEnum];
/**
 * @export
 */
export const AdsAnalyticsClickWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdsAnalyticsClickWindowDaysEnum = typeof AdsAnalyticsClickWindowDaysEnum[keyof typeof AdsAnalyticsClickWindowDaysEnum];
/**
 * @export
 */
export const AdsAnalyticsEngagementWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdsAnalyticsEngagementWindowDaysEnum = typeof AdsAnalyticsEngagementWindowDaysEnum[keyof typeof AdsAnalyticsEngagementWindowDaysEnum];
/**
 * @export
 */
export const AdsAnalyticsViewWindowDaysEnum = {
    NUMBER_1: 1,
    NUMBER_7: 7,
    NUMBER_30: 30,
    NUMBER_60: 60
} as const;
export type AdsAnalyticsViewWindowDaysEnum = typeof AdsAnalyticsViewWindowDaysEnum[keyof typeof AdsAnalyticsViewWindowDaysEnum];
/**
 * @export
 */
export const AdsAnalyticsConversionReportTimeEnum = {
    AdAction: 'TIME_OF_AD_ACTION',
    Conversion: 'TIME_OF_CONVERSION'
} as const;
export type AdsAnalyticsConversionReportTimeEnum = typeof AdsAnalyticsConversionReportTimeEnum[keyof typeof AdsAnalyticsConversionReportTimeEnum];
/**
 * @export
 */
export const AdsListEntityStatusesEnum = {
    Active: 'ACTIVE',
    Paused: 'PAUSED',
    Archived: 'ARCHIVED'
} as const;
export type AdsListEntityStatusesEnum = typeof AdsListEntityStatusesEnum[keyof typeof AdsListEntityStatusesEnum];
/**
 * @export
 */
export const AdsListOrderEnum = {
    Ascending: 'ASCENDING',
    Descending: 'DESCENDING'
} as const;
export type AdsListOrderEnum = typeof AdsListOrderEnum[keyof typeof AdsListOrderEnum];
