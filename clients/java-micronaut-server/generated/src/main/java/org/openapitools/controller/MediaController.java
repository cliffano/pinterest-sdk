/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import org.openapitools.model.Error;
import org.openapitools.model.MediaUpload;
import org.openapitools.model.MediaUploadDetails;
import org.openapitools.model.MediaUploadRequest;
import org.openapitools.model.Paginated;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.annotations.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-01T11:59:34.708172Z[Etc/UTC]")
@Controller("${context-path}")
public class MediaController {
    /**
     * Register media upload
     * Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using &lt;tt&gt;curl&lt;/tt&gt;, for example) to &lt;tt&gt;upload_url&lt;/tt&gt; using the &lt;tt&gt;Content-Type&lt;/tt&gt; header value. Send the media file&#39;s contents as the request&#39;s &lt;tt&gt;file&lt;/tt&gt; parameter and also include all of the parameters from &lt;tt&gt;upload_parameters&lt;/tt&gt;.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/solutions/content-apps/#creatingvideopins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @param mediaUploadRequest Create a media upload request (required)
     * @return MediaUpload
     */
    @ApiOperation(
        value = "Register media upload",
        nickname = "mediaCreate",
        notes = "Register your intent to upload media  The response includes all of the information needed to upload the media to Pinterest.  To upload the media, make an HTTP POST request (using <tt>curl</tt>, for example) to <tt>upload_url</tt> using the <tt>Content-Type</tt> header value. Send the media file's contents as the request's <tt>file</tt> parameter and also include all of the parameters from <tt>upload_parameters</tt>.  <strong><a href='/docs/solutions/content-apps/#creatingvideopins'>Learn more</a></strong> about video Pin creation.",
        response = MediaUpload.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "pins:read", description = "See your public Pins"),
                @AuthorizationScope(scope = "pins:write", description = "Create, update, or delete your public Pins")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "response", response = MediaUpload.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Post(uri="/media")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<MediaUpload> mediaCreate(
        @Body @NotNull @Valid MediaUploadRequest mediaUploadRequest
    ) {
        // TODO implement mediaCreate() body;
        Mono<MediaUpload> result = Mono.empty();
        return result;
    }

    /**
     * Get media upload details
     * Get details for a registered media upload, including its current status.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/solutions/content-apps/#creatingvideopins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @param mediaId Media identifier (required)
     * @return MediaUploadDetails
     */
    @ApiOperation(
        value = "Get media upload details",
        nickname = "mediaGet",
        notes = "Get details for a registered media upload, including its current status.  <strong><a href='/docs/solutions/content-apps/#creatingvideopins'>Learn more</a></strong> about video Pin creation.",
        response = MediaUploadDetails.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "pins:read", description = "See your public Pins")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = MediaUploadDetails.class),
        @ApiResponse(code = 404, message = "Media upload not found", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/media/{media_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<MediaUploadDetails> mediaGet(
        @PathVariable(value="media_id") @NotNull @Pattern(regexp="^\\d+$") String mediaId
    ) {
        // TODO implement mediaGet() body;
        Mono<MediaUploadDetails> result = Mono.empty();
        return result;
    }

    /**
     * List media uploads
     * List media uploads filtered by given parameters.  &lt;strong&gt;&lt;a href&#x3D;&#39;/docs/solutions/content-apps/#creatingvideopins&#39;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; about video Pin creation.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "List media uploads",
        nickname = "mediaList",
        notes = "List media uploads filtered by given parameters.  <strong><a href='/docs/solutions/content-apps/#creatingvideopins'>Learn more</a></strong> about video Pin creation.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "pins:read", description = "See your public Pins")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Paginated.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/media")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> mediaList(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement mediaList() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }
}
