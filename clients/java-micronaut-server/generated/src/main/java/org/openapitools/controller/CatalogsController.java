/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import org.openapitools.model.CatalogsFeed;
import org.openapitools.model.CatalogsFeedsCreateRequest;
import org.openapitools.model.CatalogsFeedsUpdateRequest;
import org.openapitools.model.CatalogsItems;
import org.openapitools.model.CatalogsItemsBatch;
import org.openapitools.model.CatalogsItemsBatchRequest;
import org.openapitools.model.CatalogsProductGroup;
import org.openapitools.model.CatalogsProductGroupCreateRequest;
import org.openapitools.model.CatalogsProductGroupUpdateRequest;
import org.openapitools.model.Error;
import org.openapitools.model.Paginated;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.annotations.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-01T11:59:34.708172Z[Etc/UTC]")
@Controller("${context-path}")
public class CatalogsController {
    /**
     * Create product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
     *
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group. (required)
     * @return Object
     */
    @ApiOperation(
        value = "Create product group",
        nickname = "catalogsProductGroupsCreate",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create product group to use in Catalogs.",
        response = Object.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = Object.class),
        @ApiResponse(code = 400, message = "Invalid body.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden. Account not approved for feed mutations yet.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict. Can't create this catalogs product group with this value.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Post(uri="/catalogs/product_groups")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> catalogsProductGroupsCreate(
        @Body @NotNull @Valid CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest
    ) {
        // TODO implement catalogsProductGroupsCreate() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Delete product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
     *
     * @param productGroupId Unique identifier of a product group (required)
     */
    @ApiOperation(
        value = "Delete product group",
        nickname = "catalogsProductGroupsDelete",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a product group from being in use in Catalogs.",
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Catalogs Product Group deleted successfully."),
        @ApiResponse(code = 400, message = "Invalid catalogs product group id parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden. Account not approved for feed mutations yet.", response = Error.class),
        @ApiResponse(code = 404, message = "Catalogs product group not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict. Can't delete this catalogs product group.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Delete(uri="/catalogs/product_groups/{product_group_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> catalogsProductGroupsDelete(
        @PathVariable(value="product_group_id") @NotNull @Pattern(regexp="^\\d+$") String productGroupId
    ) {
        // TODO implement catalogsProductGroupsDelete() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Get product groups list
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "Get product groups list",
        nickname = "catalogsProductGroupsList",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a list of product groups for a given Catalogs Feed Id.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Paginated.class),
        @ApiResponse(code = 400, message = "Invalid feed parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden. Account not approved for feed mutations yet.", response = Error.class),
        @ApiResponse(code = 404, message = "Data feed not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict. Can't create this catalogs product group with this value.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Get(uri="/catalogs/product_groups")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> catalogsProductGroupsList(
        @QueryValue(value="feed_id") @NotNull @Pattern(regexp="^\\d+$") String feedId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement catalogsProductGroupsList() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * Update product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
     *
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group. (required)
     * @return CatalogsProductGroup
     */
    @ApiOperation(
        value = "Update product group",
        nickname = "catalogsProductGroupsUpdate",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update product group to use in Catalogs.",
        response = CatalogsProductGroup.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CatalogsProductGroup.class),
        @ApiResponse(code = 400, message = "Invalid parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 404, message = "Catalogs product group not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict. Can't update this catalogs product group to this value.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Patch(uri="/catalogs/product_groups/{product_group_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsProductGroup> catalogsProductGroupsUpdate(
        @PathVariable(value="product_group_id") @NotNull @Pattern(regexp="^\\d+$") String productGroupId, 
        @Body @NotNull @Valid CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest
    ) {
        // TODO implement catalogsProductGroupsUpdate() body;
        Mono<CatalogsProductGroup> result = Mono.empty();
        return result;
    }

    /**
     * List processing results for a given feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "List processing results for a given feed",
        nickname = "feedProcessingResultsList",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch a feed processing results owned by the owner user account.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Paginated.class),
        @ApiResponse(code = 400, message = "Invalid parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 404, message = "Feed not found.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Get(uri="/catalogs/feeds/{feed_id}/processing_results")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> feedProcessingResultsList(
        @PathVariable(value="feed_id") @NotNull @Pattern(regexp="^\\d+$") String feedId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement feedProcessingResultsList() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * Create feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param catalogsFeedsCreateRequest Request object used to created a feed. (required)
     * @return CatalogsFeed
     */
    @ApiOperation(
        value = "Create feed",
        nickname = "feedsCreate",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Create a new feed owned by the \"operating user_account\".",
        response = CatalogsFeed.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data"),
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Success", response = CatalogsFeed.class),
        @ApiResponse(code = 400, message = "Invalid feed parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 403, message = "Business account required.", response = Error.class),
        @ApiResponse(code = 409, message = "User website required.", response = Error.class),
        @ApiResponse(code = 422, message = "Unique feed name is required.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Post(uri="/catalogs/feeds")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsFeed> feedsCreate(
        @Body @NotNull @Valid CatalogsFeedsCreateRequest catalogsFeedsCreateRequest
    ) {
        // TODO implement feedsCreate() body;
        Mono<CatalogsFeed> result = Mono.empty();
        return result;
    }

    /**
     * Delete feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param feedId Unique identifier of a feed (required)
     */
    @ApiOperation(
        value = "Delete feed",
        nickname = "feedsDelete",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Delete a feed owned by the \"operating user_account\".",
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data"),
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Feed deleted successfully."),
        @ApiResponse(code = 400, message = "Invalid feed parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden. Account not approved for feed mutations yet.", response = Error.class),
        @ApiResponse(code = 404, message = "Data feed not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict. Can't delete a feed with active promotions.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Delete(uri="/catalogs/feeds/{feed_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> feedsDelete(
        @PathVariable(value="feed_id") @NotNull @Pattern(regexp="^\\d+$") String feedId
    ) {
        // TODO implement feedsDelete() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Get feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @return CatalogsFeed
     */
    @ApiOperation(
        value = "Get feed",
        nickname = "feedsGet",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single feed owned by the \"operating user_account\".",
        response = CatalogsFeed.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CatalogsFeed.class),
        @ApiResponse(code = 400, message = "Invalid feed parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 404, message = "Data feed not found.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Get(uri="/catalogs/feeds/{feed_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsFeed> feedsGet(
        @PathVariable(value="feed_id") @NotNull @Pattern(regexp="^\\d+$") String feedId
    ) {
        // TODO implement feedsGet() body;
        Mono<CatalogsFeed> result = Mono.empty();
        return result;
    }

    /**
     * List feeds
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "List feeds",
        nickname = "feedsList",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Fetch feeds owned by the \"operating user_account\".",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Paginated.class),
        @ApiResponse(code = 400, message = "Invalid parameters.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized access.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error.", response = Error.class)})
    @Get(uri="/catalogs/feeds")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> feedsList(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement feedsList() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * Update feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
     *
     * @param feedId Unique identifier of a feed (required)
     * @param catalogsFeedsUpdateRequest Request object used to update a feed. (required)
     * @return CatalogsFeed
     */
    @ApiOperation(
        value = "Update feed",
        nickname = "feedsUpdate",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Update a feed owned by the \"operating user_account\".",
        response = CatalogsFeed.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data"),
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = CatalogsFeed.class),
        @ApiResponse(code = 400, message = "Invalid feed parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden. Account not approved for feed mutations yet.", response = Error.class),
        @ApiResponse(code = 404, message = "Data feed not found.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Patch(uri="/catalogs/feeds/{feed_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsFeed> feedsUpdate(
        @PathVariable(value="feed_id") @NotNull @Pattern(regexp="^\\d+$") String feedId, 
        @Body @NotNull @Valid CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest
    ) {
        // TODO implement feedsUpdate() body;
        Mono<CatalogsFeed> result = Mono.empty();
        return result;
    }

    /**
     * Get catalogs items batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
     *
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @return CatalogsItemsBatch
     */
    @ApiOperation(
        value = "Get catalogs items batch",
        nickname = "itemsBatchGet",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  Get a single catalogs items batch created by the \"operating user_account\".",
        response = CatalogsItemsBatch.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Response containing the requested catalogs items batch", response = CatalogsItemsBatch.class),
        @ApiResponse(code = 401, message = "Not authorized to access catalogs items batch", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized to access catalogs items batch", response = Error.class),
        @ApiResponse(code = 404, message = "Catalogs items batch not found", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/catalogs/items/batch/{batch_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsItemsBatch> itemsBatchGet(
        @PathVariable(value="batch_id") @NotNull String batchId
    ) {
        // TODO implement itemsBatchGet() body;
        Mono<CatalogsItemsBatch> result = Mono.empty();
        return result;
    }

    /**
     * Perform an operation on an item batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
     *
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch (required)
     * @return CatalogsItemsBatch
     */
    @ApiOperation(
        value = "Perform an operation on an item batch",
        nickname = "itemsBatchPost",
        notes = "<strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/api/v5/#tag/Understanding-catalog-management'>Learn more</a>.</strong>  This endpoint supports multiple operations on a set of one or more catalog items.",
        response = CatalogsItemsBatch.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data"),
                @AuthorizationScope(scope = "catalogs:write", description = "Create, update, or delete your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Response containing the requested catalogs items batch", response = CatalogsItemsBatch.class),
        @ApiResponse(code = 401, message = "Not authorized to post catalogs items", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized to post catalogs items", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Post(uri="/catalogs/items/batch")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsItemsBatch> itemsBatchPost(
        @Body @NotNull @Valid CatalogsItemsBatchRequest catalogsItemsBatchRequest
    ) {
        // TODO implement itemsBatchPost() body;
        Mono<CatalogsItemsBatch> result = Mono.empty();
        return result;
    }

    /**
     * Get catalogs items
     * Get the items of the catalog created by the \&quot;operating user_account\&quot;
     *
     * @param country Country for the Catalogs Items (required)
     * @param itemIds Catalos Item ids (required)
     * @param language Language for the Catalogs Items (required)
     * @return CatalogsItems
     */
    @ApiOperation(
        value = "Get catalogs items",
        nickname = "itemsGet",
        notes = "Get the items of the catalog created by the \"operating user_account\"",
        response = CatalogsItems.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "catalogs:read", description = "See all of your catalogs data")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Response containing the requested catalogs items", response = CatalogsItems.class),
        @ApiResponse(code = 401, message = "Not authorized to access catalogs items", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized to access catalogs items", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/catalogs/items")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<CatalogsItems> itemsGet(
        @QueryValue(value="country") @NotNull String country, 
        @QueryValue(value="item_ids") @NotNull List<String> itemIds, 
        @QueryValue(value="language") @NotNull String language
    ) {
        // TODO implement itemsGet() body;
        Mono<CatalogsItems> result = Mono.empty();
        return result;
    }
}
