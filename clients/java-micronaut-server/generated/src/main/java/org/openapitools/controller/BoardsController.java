/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import org.openapitools.model.Board;
import org.openapitools.model.BoardSection;
import org.openapitools.model.BoardUpdate;
import org.openapitools.model.Error;
import org.openapitools.model.Paginated;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.annotations.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-05-07T06:38:54.481854Z[Etc/UTC]")
@Controller("${context-path}")
public class BoardsController {
    /**
     * Create board section
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param boardSection Create a board section. (required)
     * @return BoardSection
     */
    @ApiOperation(
        value = "Create board section",
        nickname = "boardSectionsCreate",
        notes = "Create a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        response = BoardSection.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "boards:write", description = "Create, update, or delete your public boards")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "response", response = BoardSection.class),
        @ApiResponse(code = 400, message = "Invalid board section parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized to create board sections.", response = Error.class),
        @ApiResponse(code = 409, message = "Could not get exclusive access to the board to create a new section.", response = Error.class),
        @ApiResponse(code = 500, message = "Could not create a new board section.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Post(uri="/boards/{board_id}/sections")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<BoardSection> boardSectionsCreate(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @Body @NotNull @Valid BoardSection boardSection
    ) {
        // TODO implement boardSectionsCreate() body;
        Mono<BoardSection> result = Mono.empty();
        return result;
    }

    /**
     * Delete board section
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     */
    @ApiOperation(
        value = "Delete board section",
        nickname = "boardSectionsDelete",
        notes = "Delete a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "boards:write", description = "Create, update, or delete your public boards")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Board section deleted successfully"),
        @ApiResponse(code = 403, message = "Not authorized to delete board section.", response = Error.class),
        @ApiResponse(code = 404, message = "Board section not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Board section conflict.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Delete(uri="/boards/{board_id}/sections/{section_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> boardSectionsDelete(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @PathVariable(value="section_id") @NotNull @Pattern(regexp="^\\d+$") String sectionId
    ) {
        // TODO implement boardSectionsDelete() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * List board sections
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "List board sections",
        nickname = "boardSectionsList",
        notes = "Get a list of all board sections from a board owned by the \"operation user_account\" - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Paginated.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/boards/{board_id}/sections")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> boardSectionsList(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement boardSectionsList() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * List Pins on board section
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "List Pins on board section",
        nickname = "boardSectionsListPins",
        notes = "Get a list of the Pins on a board section of a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "pins:read", description = "See your public Pins")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Paginated.class),
        @ApiResponse(code = 403, message = "Not authorized to access Pins on board section.", response = Error.class),
        @ApiResponse(code = 404, message = "Board or section not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Board section conflict.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/boards/{board_id}/sections/{section_id}/pins")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> boardSectionsListPins(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @PathVariable(value="section_id") @NotNull @Pattern(regexp="^\\d+$") String sectionId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement boardSectionsListPins() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * Update board section
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param sectionId Unique identifier of a board section. (required)
     * @param boardSection Update a board section. (required)
     * @return BoardSection
     */
    @ApiOperation(
        value = "Update board section",
        nickname = "boardSectionsUpdate",
        notes = "Update a board section on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        response = BoardSection.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "boards:write", description = "Create, update, or delete your public boards")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = BoardSection.class),
        @ApiResponse(code = 400, message = "Invalid board section parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized to update board section.", response = Error.class),
        @ApiResponse(code = 409, message = "Board section conflict.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Patch(uri="/boards/{board_id}/sections/{section_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<BoardSection> boardSectionsUpdate(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @PathVariable(value="section_id") @NotNull @Pattern(regexp="^\\d+$") String sectionId, 
        @Body @NotNull @Valid BoardSection boardSection
    ) {
        // TODO implement boardSectionsUpdate() body;
        Mono<BoardSection> result = Mono.empty();
        return result;
    }

    /**
     * Create board
     * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param board Create a board using a single board json object. (required)
     * @return Board
     */
    @ApiOperation(
        value = "Create board",
        nickname = "boardsCreate",
        notes = "Create a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.",
        response = Board.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "boards:write", description = "Create, update, or delete your public boards")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "response", response = Board.class),
        @ApiResponse(code = 400, message = "The board name is invalid or duplicated.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Post(uri="/boards")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Board> boardsCreate(
        @Body @NotNull @Valid Board board
    ) {
        // TODO implement boardsCreate() body;
        Mono<Board> result = Mono.empty();
        return result;
    }

    /**
     * Delete board
     * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     */
    @ApiOperation(
        value = "Delete board",
        nickname = "boardsDelete",
        notes = "Delete a board owned by the \"operation user_account\". - By default, the \"operation user_account\" is the token user_account.",
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "boards:write", description = "Create, update, or delete your public boards")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Board deleted successfully"),
        @ApiResponse(code = 403, message = "Not authorized to delete the board.", response = Error.class),
        @ApiResponse(code = 404, message = "Board not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Could not get exclusive access to delete the board.", response = Error.class),
        @ApiResponse(code = 429, message = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Delete(uri="/boards/{board_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Object> boardsDelete(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId
    ) {
        // TODO implement boardsDelete() body;
        Mono<Object> result = Mono.empty();
        return result;
    }

    /**
     * Get board
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @return Board
     */
    @ApiOperation(
        value = "Get board",
        nickname = "boardsGet",
        notes = "Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        response = Board.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Board.class),
        @ApiResponse(code = 404, message = "Board not found.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/boards/{board_id}")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Board> boardsGet(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId
    ) {
        // TODO implement boardsGet() body;
        Mono<Board> result = Mono.empty();
        return result;
    }

    /**
     * List boards
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param privacy Privacy setting for a board. (optional)
     * @return Paginated
     */
    @ApiOperation(
        value = "List boards",
        nickname = "boardsList",
        notes = "Get a list of the boards owned by the \"operation user_account\" + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Paginated.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/boards")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> boardsList(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize, 
        @QueryValue(value="privacy") @Nullable String privacy
    ) {
        // TODO implement boardsList() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * List Pins on board
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     */
    @ApiOperation(
        value = "List Pins on board",
        nickname = "boardsListPins",
        notes = "Get a list of the Pins on a board owned by the \"operation user_account\" - or on a group board that has been shared with this account. - By default, the \"operation user_account\" is the token user_account.",
        response = Paginated.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "pins:read", description = "See your public Pins")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Paginated.class),
        @ApiResponse(code = 404, message = "Board not found.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Get(uri="/boards/{board_id}/pins")
    @Produces(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Paginated> boardsListPins(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(100) Integer pageSize
    ) {
        // TODO implement boardsListPins() body;
        Mono<Paginated> result = Mono.empty();
        return result;
    }

    /**
     * Update board
     * Update a board owned by the \&quot;operating user_account\&quot;.
     *
     * @param boardId Unique identifier of a board. (required)
     * @param boardUpdate Update a board. (required)
     * @return Board
     */
    @ApiOperation(
        value = "Update board",
        nickname = "boardsUpdate",
        notes = "Update a board owned by the \"operating user_account\".",
        response = Board.class,
        authorizations = {
            @Authorization(value = "pinterest_oauth2", scopes = {
                @AuthorizationScope(scope = "boards:read", description = "See your public boards, including group boards you join"),
                @AuthorizationScope(scope = "boards:write", description = "Create, update, or delete your public boards")
            })
        },
        tags={})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "response", response = Board.class),
        @ApiResponse(code = 400, message = "Invalid board parameters.", response = Error.class),
        @ApiResponse(code = 403, message = "Not authorized to update the board.", response = Error.class),
        @ApiResponse(code = 429, message = "This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.", response = Error.class),
        @ApiResponse(code = 0, message = "Unexpected error", response = Error.class)})
    @Patch(uri="/boards/{board_id}")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured(SecurityRule.IS_AUTHENTICATED)
    public Mono<Board> boardsUpdate(
        @PathVariable(value="board_id") @NotNull @Pattern(regexp="^\\d+$") String boardId, 
        @Body @NotNull @Valid BoardUpdate boardUpdate
    ) {
        // TODO implement boardsUpdate() body;
        Mono<Board> result = Mono.empty();
        return result;
    }
}
