/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.CatalogsHotelBatchItem;
import org.openapitools.model.CatalogsType;
import org.openapitools.model.Country;
import org.openapitools.model.Language;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Request object to update catalogs hotel items
 */
@Schema(name = "CatalogsHotelBatchRequest", description = "Request object to update catalogs hotel items")
@JsonPropertyOrder({
  CatalogsHotelBatchRequest.JSON_PROPERTY_CATALOG_TYPE,
  CatalogsHotelBatchRequest.JSON_PROPERTY_COUNTRY,
  CatalogsHotelBatchRequest.JSON_PROPERTY_LANGUAGE,
  CatalogsHotelBatchRequest.JSON_PROPERTY_ITEMS,
  CatalogsHotelBatchRequest.JSON_PROPERTY_CATALOG_ID
})
@JsonTypeName("CatalogsHotelBatchRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-03-14T23:02:10.408800522Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class CatalogsHotelBatchRequest {
    public static final String JSON_PROPERTY_CATALOG_TYPE = "catalog_type";
    private CatalogsType catalogType;

    public static final String JSON_PROPERTY_COUNTRY = "country";
    private Country country;

    public static final String JSON_PROPERTY_LANGUAGE = "language";
    private Language language;

    public static final String JSON_PROPERTY_ITEMS = "items";
    private List<@Valid CatalogsHotelBatchItem> items = new ArrayList<>();

    public static final String JSON_PROPERTY_CATALOG_ID = "catalog_id";
    private String catalogId;

    public CatalogsHotelBatchRequest(CatalogsType catalogType, Country country, Language language, List<@Valid CatalogsHotelBatchItem> items) {
        this.catalogType = catalogType;
        this.country = country;
        this.language = language;
        this.items = items;
    }

    public CatalogsHotelBatchRequest catalogType(CatalogsType catalogType) {
        this.catalogType = catalogType;
        return this;
    }

    /**
     * Get catalogType
     * @return catalogType
     **/
    @NotNull
    @Schema(name = "catalog_type", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CATALOG_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CatalogsType getCatalogType() {
        return catalogType;
    }

    @JsonProperty(JSON_PROPERTY_CATALOG_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCatalogType(CatalogsType catalogType) {
        this.catalogType = catalogType;
    }

    public CatalogsHotelBatchRequest country(Country country) {
        this.country = country;
        return this;
    }

    /**
     * Get country
     * @return country
     **/
    @NotNull
    @Schema(name = "country", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Country getCountry() {
        return country;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCountry(Country country) {
        this.country = country;
    }

    public CatalogsHotelBatchRequest language(Language language) {
        this.language = language;
        return this;
    }

    /**
     * Get language
     * @return language
     **/
    @NotNull
    @Schema(name = "language", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_LANGUAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Language getLanguage() {
        return language;
    }

    @JsonProperty(JSON_PROPERTY_LANGUAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLanguage(Language language) {
        this.language = language;
    }

    public CatalogsHotelBatchRequest items(List<@Valid CatalogsHotelBatchItem> items) {
        this.items = items;
        return this;
    }

    public CatalogsHotelBatchRequest addItemsItem(CatalogsHotelBatchItem itemsItem) {
        this.items.add(itemsItem);
        return this;
    }

    /**
     * Array with catalogs item operations
     * @return items
     **/
    @NotNull
    @Size(min=1, max=1000)
    @Schema(name = "items", description = "Array with catalogs item operations", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid CatalogsHotelBatchItem> getItems() {
        return items;
    }

    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setItems(List<@Valid CatalogsHotelBatchItem> items) {
        this.items = items;
    }

    public CatalogsHotelBatchRequest catalogId(String catalogId) {
        this.catalogId = catalogId;
        return this;
    }

    /**
     * Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
     * @return catalogId
     **/
    @Nullable
    @Pattern(regexp="^\\d+$")
    @Schema(name = "catalog_id", example = "2680059592705", description = "Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CATALOG_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCatalogId() {
        return catalogId;
    }

    @JsonProperty(JSON_PROPERTY_CATALOG_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCatalogId(String catalogId) {
        this.catalogId = catalogId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsHotelBatchRequest catalogsHotelBatchRequest = (CatalogsHotelBatchRequest) o;
        return Objects.equals(this.catalogType, catalogsHotelBatchRequest.catalogType) &&
            Objects.equals(this.country, catalogsHotelBatchRequest.country) &&
            Objects.equals(this.language, catalogsHotelBatchRequest.language) &&
            Objects.equals(this.items, catalogsHotelBatchRequest.items) &&
            Objects.equals(this.catalogId, catalogsHotelBatchRequest.catalogId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(catalogType, country, language, items, catalogId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsHotelBatchRequest {\n");
        sb.append("    catalogType: ").append(toIndentedString(catalogType)).append("\n");
        sb.append("    country: ").append(toIndentedString(country)).append("\n");
        sb.append("    language: ").append(toIndentedString(language)).append("\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

