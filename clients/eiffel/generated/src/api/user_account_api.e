note
 description:"[
		Pinterest REST API
 		Pinterest's REST API
  		The version of the OpenAPI document: 5.3.0
 	    Contact: pinterest-api@pinterest.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	USERACCOUNT_API

inherit

    API_I


feature -- API Access


	user_account_analytics (start_date: DATE; end_date: DATE; from_claimed_content: STRING_32; pin_format: STRING_32; app_types: STRING_32; metric_types: detachable LIST [STRING_32]; split_field: STRING_32; ad_account_id: STRING_32): detachable STRING_TABLE [ANALYTICS_METRICS_RESPONSE]
			-- Get user account analytics
			-- Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.
			-- 
			-- argument: start_date Metric report start date (UTC). Format: YYYY-MM-DD (required)
			-- 
			-- argument: end_date Metric report end date (UTC). Format: YYYY-MM-DD (required)
			-- 
			-- argument: from_claimed_content Filter on Pins that match your claimed domain. (optional, default to BOTH)
			-- 
			-- argument: pin_format Pin formats to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: app_types Apps or devices to get data for, default is all. (optional, default to ALL)
			-- 
			-- argument: metric_types Metric types to get data for, default is all.  (optional, default to null)
			-- 
			-- argument: split_field How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to NO_SPLIT)
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANALYTICS_METRICS_RESPONSE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account/analytics"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start_date", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "end_date", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from_claimed_content", from_claimed_content));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pin_format", pin_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "app_types", app_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "metric_types", metric_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "split_field", split_field));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANALYTICS_METRICS_RESPONSE] } l_response.data ({ STRING_TABLE [ANALYTICS_METRICS_RESPONSE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	user_account_get (ad_account_id: STRING_32): detachable ACCOUNT
			-- Get user account
			-- Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.
			-- 
			-- argument: ad_account_id Unique identifier of an ad account. (optional, default to null)
			-- 
			-- 
			-- Result ACCOUNT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_account"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ad_account_id", ad_account_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"pinterest_oauth2">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ACCOUNT } l_response.data ({ ACCOUNT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
