/**
* Pinterest REST API
* Pinterest's REST API
*
* The version of the OpenAPI document: 5.3.0
* Contact: pinterest-api@pinterest.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.put
import io.ktor.routing.route

import org.openapitools.server.Paths
import org.openapitools.server.infrastructure.ApiPrincipal


import org.openapitools.server.models.AnalyticsMetricsResponse
import org.openapitools.server.models.Error
import org.openapitools.server.models.Pin

@KtorExperimentalLocationsAPI
fun Route.PinsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    get<Paths.pinsAnalytics> {  _: Paths.pinsAnalytics ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }


    route("/pins") {
            authenticate("pinterest_oauth2") {
        post {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "board_owner" : "{}",
                  "media_source" : "{}",
                  "alt_text" : "alt_text",
                  "board_id" : "board_id",
                  "link" : "https://www.pinterest.com/",
                  "created_at" : "2020-01-01T20:10:40Z",
                  "description" : "description",
                  "id" : "813744226420795884",
                  "media" : "{}",
                  "title" : "title",
                  "board_section_id" : "board_section_id"
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
            }
    }


    route("/pins/{pin_id}") {
            authenticate("pinterest_oauth2") {
        delete {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
            }
    }


    get<Paths.pinsGet> {  _: Paths.pinsGet ->
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "board_owner" : "{}",
              "media_source" : "{}",
              "alt_text" : "alt_text",
              "board_id" : "board_id",
              "link" : "https://www.pinterest.com/",
              "created_at" : "2020-01-01T20:10:40Z",
              "description" : "description",
              "id" : "813744226420795884",
              "media" : "{}",
              "title" : "title",
              "board_section_id" : "board_section_id"
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }

}
