<?php
/**
 * ItemsBatchPostRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ItemsBatchPostRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ItemsBatchPostRequest 
{
        /**
     * @var Country|null
     * @SerializedName("country")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedCountry")
        * @Type("string")
     */
    protected ?Country $country = null;

    /**
     * @var Language|null
     * @SerializedName("language")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedLanguage")
        * @Type("string")
     */
    protected ?Language $language = null;

    /**
     * @var BatchOperation|null
     * @SerializedName("operation")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedOperation")
        * @Type("string")
     */
    protected ?BatchOperation $operation = null;

    /**
     * Array with catalogs items
     *
     * @var ItemDeleteBatchRecord[]|null
     * @SerializedName("items")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ItemDeleteBatchRecord")
     * })
     * @Type("array<OpenAPI\Server\Model\ItemDeleteBatchRecord>")
     */
    protected ?array $items = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
            $this->language = array_key_exists('language', $data) ? $data['language'] : $this->language;
            $this->operation = array_key_exists('operation', $data) ? $data['operation'] : $this->operation;
            $this->items = array_key_exists('items', $data) ? $data['items'] : $this->items;
        }
    }

    /**
     * Gets country.
     *
     * @return Country|null
     */
    public function getCountry(): ?Country
    {
        return $this->country;
    }

    /**
    * Gets country for serialization.
    *
    * @return string|null
    */
    public function getSerializedCountry(): string|null
    {
        return $this->country?->value ? (string) $this->country->value : null;
    }


    /**
     * Sets country.
     *
     * @param Country|null $country
     *
     * @return $this
     */
    public function setCountry(?Country $country): self
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Gets language.
     *
     * @return Language|null
     */
    public function getLanguage(): ?Language
    {
        return $this->language;
    }

    /**
    * Gets language for serialization.
    *
    * @return string|null
    */
    public function getSerializedLanguage(): string|null
    {
        return $this->language?->value ? (string) $this->language->value : null;
    }


    /**
     * Sets language.
     *
     * @param Language|null $language
     *
     * @return $this
     */
    public function setLanguage(?Language $language): self
    {
        $this->language = $language;

        return $this;
    }

    /**
     * Gets operation.
     *
     * @return BatchOperation|null
     */
    public function getOperation(): ?BatchOperation
    {
        return $this->operation;
    }

    /**
    * Gets operation for serialization.
    *
    * @return string|null
    */
    public function getSerializedOperation(): string|null
    {
        return $this->operation?->value ? (string) $this->operation->value : null;
    }


    /**
     * Sets operation.
     *
     * @param BatchOperation|null $operation
     *
     * @return $this
     */
    public function setOperation(?BatchOperation $operation): self
    {
        $this->operation = $operation;

        return $this;
    }

    /**
     * Gets items.
     *
     * @return ItemDeleteBatchRecord[]|null
     */
    public function getItems(): ?array
    {
        return $this->items;
    }



    /**
     * Sets items.
     *
     * @param ItemDeleteBatchRecord[]|null $items  Array with catalogs items
     *
     * @return $this
     */
    public function setItems(?array $items): self
    {
        $this->items = $items;

        return $this;
    }
}


