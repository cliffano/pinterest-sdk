<?php
/**
 * CatalogsProductGroupProductCounts
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsProductGroupProductCounts model.
 *
 * Product counts for a CatalogsProductGroup
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsProductGroupProductCounts 
{
        /**
     * @var float|null
     * @SerializedName("in_stock")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected ?float $inStock = null;

    /**
     * @var float|null
     * @SerializedName("out_of_stock")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected ?float $outOfStock = null;

    /**
     * @var float|null
     * @SerializedName("preorder")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected ?float $preorder = null;

    /**
     * @var float|null
     * @SerializedName("total")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected ?float $total = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->inStock = array_key_exists('inStock', $data) ? $data['inStock'] : $this->inStock;
            $this->outOfStock = array_key_exists('outOfStock', $data) ? $data['outOfStock'] : $this->outOfStock;
            $this->preorder = array_key_exists('preorder', $data) ? $data['preorder'] : $this->preorder;
            $this->total = array_key_exists('total', $data) ? $data['total'] : $this->total;
        }
    }

    /**
     * Gets inStock.
     *
     * @return float|null
     */
    public function getInStock(): ?float
    {
        return $this->inStock;
    }



    /**
     * Sets inStock.
     *
     * @param float|null $inStock
     *
     * @return $this
     */
    public function setInStock(?float $inStock): self
    {
        $this->inStock = $inStock;

        return $this;
    }

    /**
     * Gets outOfStock.
     *
     * @return float|null
     */
    public function getOutOfStock(): ?float
    {
        return $this->outOfStock;
    }



    /**
     * Sets outOfStock.
     *
     * @param float|null $outOfStock
     *
     * @return $this
     */
    public function setOutOfStock(?float $outOfStock): self
    {
        $this->outOfStock = $outOfStock;

        return $this;
    }

    /**
     * Gets preorder.
     *
     * @return float|null
     */
    public function getPreorder(): ?float
    {
        return $this->preorder;
    }



    /**
     * Sets preorder.
     *
     * @param float|null $preorder
     *
     * @return $this
     */
    public function setPreorder(?float $preorder): self
    {
        $this->preorder = $preorder;

        return $this;
    }

    /**
     * Gets total.
     *
     * @return float|null
     */
    public function getTotal(): ?float
    {
        return $this->total;
    }



    /**
     * Sets total.
     *
     * @param float|null $total
     *
     * @return $this
     */
    public function setTotal(?float $total): self
    {
        $this->total = $total;

        return $this;
    }
}


