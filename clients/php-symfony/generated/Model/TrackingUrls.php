<?php
/**
 * TrackingUrls
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the TrackingUrls model.
 *
 * Third-party tracking URLs. Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class TrackingUrls 
{
        /**
     * @var string[]|null
     * @SerializedName("impression")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected $impression;

    /**
     * @var string[]|null
     * @SerializedName("click")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected $click;

    /**
     * @var string[]|null
     * @SerializedName("engagement")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected $engagement;

    /**
     * @var string[]|null
     * @SerializedName("buyable_button")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected $buyableButton;

    /**
     * @var string[]|null
     * @SerializedName("audience_verification")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 3
     * )
     */
    protected $audienceVerification;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->impression = isset($data['impression']) ? $data['impression'] : null;
        $this->click = isset($data['click']) ? $data['click'] : null;
        $this->engagement = isset($data['engagement']) ? $data['engagement'] : null;
        $this->buyableButton = isset($data['buyableButton']) ? $data['buyableButton'] : null;
        $this->audienceVerification = isset($data['audienceVerification']) ? $data['audienceVerification'] : null;
    }

    /**
     * Gets impression.
     *
     * @return string[]|null
     */
    public function getImpression(): ?array
    {
        return $this->impression;
    }

    /**
     * Sets impression.
     *
     * @param string[]|null $impression
     *
     * @return $this
     */
    public function setImpression(array $impression = null)
    {
        $this->impression = $impression;

        return $this;
    }

    /**
     * Gets click.
     *
     * @return string[]|null
     */
    public function getClick(): ?array
    {
        return $this->click;
    }

    /**
     * Sets click.
     *
     * @param string[]|null $click
     *
     * @return $this
     */
    public function setClick(array $click = null)
    {
        $this->click = $click;

        return $this;
    }

    /**
     * Gets engagement.
     *
     * @return string[]|null
     */
    public function getEngagement(): ?array
    {
        return $this->engagement;
    }

    /**
     * Sets engagement.
     *
     * @param string[]|null $engagement
     *
     * @return $this
     */
    public function setEngagement(array $engagement = null)
    {
        $this->engagement = $engagement;

        return $this;
    }

    /**
     * Gets buyableButton.
     *
     * @return string[]|null
     */
    public function getBuyableButton(): ?array
    {
        return $this->buyableButton;
    }

    /**
     * Sets buyableButton.
     *
     * @param string[]|null $buyableButton
     *
     * @return $this
     */
    public function setBuyableButton(array $buyableButton = null)
    {
        $this->buyableButton = $buyableButton;

        return $this;
    }

    /**
     * Gets audienceVerification.
     *
     * @return string[]|null
     */
    public function getAudienceVerification(): ?array
    {
        return $this->audienceVerification;
    }

    /**
     * Sets audienceVerification.
     *
     * @param string[]|null $audienceVerification
     *
     * @return $this
     */
    public function setAudienceVerification(array $audienceVerification = null)
    {
        $this->audienceVerification = $audienceVerification;

        return $this;
    }
}


