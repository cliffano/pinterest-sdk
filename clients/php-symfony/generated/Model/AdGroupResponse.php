<?php
/**
 * AdGroupResponse
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AdGroupResponse model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class AdGroupResponse 
{
        /**
     * Ad group name.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * Ad group/entity status.
     *
     * @var EntityStatus|null
     * @SerializedName("status")
     * @Assert\Type("EntityStatus")
     * @Type("EntityStatus")
     */
    protected $status;

    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     *
     * @var int|null
     * @SerializedName("budget_in_micro_currency")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $budgetInMicroCurrency;

    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     *
     * @var int|null
     * @SerializedName("bid_in_micro_currency")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $bidInMicroCurrency;

    /**
     * Budget type. If DAILY, an ad group&#39;s daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group &#x60;start_time&#x60; and &#x60;end_time&#x60; range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     *
     * @var string|null
     * @SerializedName("budget_type")
     * @Assert\Choice({ "DAILY", "LIFETIME", "CBO_ADGROUP" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $budgetType;

    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     *
     * @var int|null
     * @SerializedName("start_time")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $startTime;

    /**
     * Ad group end time. Unix timestamp in seconds.
     *
     * @var int|null
     * @SerializedName("end_time")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $endTime;

    /**
     * Ad group targeting specification defining the ad group target audience. For example, &#39;{\&quot;APPTYPE\&quot;:[\&quot;iphone\&quot;], \&quot;GENDER\&quot;:[\&quot;male\&quot;], \&quot;LOCALE\&quot;:[\&quot;en-US\&quot;], \&quot;LOCATION\&quot;:[\&quot;501\&quot;], \&quot;AGE_BUCKET\&quot;:[\&quot;25-34\&quot;]}&#39;
     *
     * @var string[]|null
     * @SerializedName("targeting_spec")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string, string>")
     */
    protected $targetingSpec;

    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Billable-event\\\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
     *
     * @var int|null
     * @SerializedName("lifetime_frequency_cap")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $lifetimeFrequencyCap;

    /**
     * Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
     *
     * @var TrackingUrls|null
     * @SerializedName("tracking_urls")
     * @Assert\Type("TrackingUrls")
     * @Type("TrackingUrls")
     */
    protected $trackingUrls;

    /**
     * Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
     *
     * @var bool|null
     * @SerializedName("auto_targeting_enabled")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $autoTargetingEnabled;

    /**
     * &lt;a href&#x3D;\\\&quot;/docs/redoc/#section/Placement-group\\\&quot;&gt;Placement group&lt;/a&gt;.
     *
     * @var PlacementGroupType|null
     * @SerializedName("placement_group")
     * @Assert\Type("PlacementGroupType")
     * @Type("PlacementGroupType")
     */
    protected $placementGroup;

    /**
     * Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     *
     * @var PacingDeliveryType|null
     * @SerializedName("pacing_delivery_type")
     * @Assert\Type("PacingDeliveryType")
     * @Type("PacingDeliveryType")
     */
    protected $pacingDeliveryType;

    /**
     * oCPM learn mode
     *
     * @var string|null
     * @SerializedName("conversion_learning_mode_type")
     * @Assert\Choice({ "NOT_ACTIVE", "ACTIVE", "null" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $conversionLearningModeType;

    /**
     * Ad group summary status.
     *
     * @var AdGroupSummaryStatus|null
     * @SerializedName("summary_status")
     * @Assert\Type("AdGroupSummaryStatus")
     * @Type("AdGroupSummaryStatus")
     */
    protected $summaryStatus;

    /**
     * Feed Profile ID associated to the adgroup.
     *
     * @var string|null
     * @SerializedName("feed_profile_id")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $feedProfileId;

    /**
     * Campaign ID of the ad group.
     *
     * @var string|null
     * @SerializedName("campaign_id")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^\\d+$/")
     */
    protected $campaignId;

    /**
     * @var OpenAPI\Server\Model\ActionType|null
     * @SerializedName("billable_event")
     * @Assert\Type("OpenAPI\Server\Model\ActionType")
     * @Type("OpenAPI\Server\Model\ActionType")
     */
    protected $billableEvent;

    /**
     * Ad group ID.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^\\d+$/")
     */
    protected $id;

    /**
     * Always \&quot;adgroup\&quot;.
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $type;

    /**
     * Advertiser ID.
     *
     * @var string|null
     * @SerializedName("ad_account_id")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^\\d+$/")
     */
    protected $adAccountId;

    /**
     * Ad group creation time. Unix timestamp in seconds.
     *
     * @var int|null
     * @SerializedName("created_time")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $createdTime;

    /**
     * Ad group last update time. Unix timestamp in seconds.
     *
     * @var int|null
     * @SerializedName("updated_time")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $updatedTime;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->budgetInMicroCurrency = isset($data['budgetInMicroCurrency']) ? $data['budgetInMicroCurrency'] : null;
        $this->bidInMicroCurrency = isset($data['bidInMicroCurrency']) ? $data['bidInMicroCurrency'] : null;
        $this->budgetType = isset($data['budgetType']) ? $data['budgetType'] : null;
        $this->startTime = isset($data['startTime']) ? $data['startTime'] : null;
        $this->endTime = isset($data['endTime']) ? $data['endTime'] : null;
        $this->targetingSpec = isset($data['targetingSpec']) ? $data['targetingSpec'] : null;
        $this->lifetimeFrequencyCap = isset($data['lifetimeFrequencyCap']) ? $data['lifetimeFrequencyCap'] : null;
        $this->trackingUrls = isset($data['trackingUrls']) ? $data['trackingUrls'] : null;
        $this->autoTargetingEnabled = isset($data['autoTargetingEnabled']) ? $data['autoTargetingEnabled'] : null;
        $this->placementGroup = isset($data['placementGroup']) ? $data['placementGroup'] : null;
        $this->pacingDeliveryType = isset($data['pacingDeliveryType']) ? $data['pacingDeliveryType'] : null;
        $this->conversionLearningModeType = isset($data['conversionLearningModeType']) ? $data['conversionLearningModeType'] : null;
        $this->summaryStatus = isset($data['summaryStatus']) ? $data['summaryStatus'] : null;
        $this->feedProfileId = isset($data['feedProfileId']) ? $data['feedProfileId'] : null;
        $this->campaignId = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->billableEvent = isset($data['billableEvent']) ? $data['billableEvent'] : null;
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->adAccountId = isset($data['adAccountId']) ? $data['adAccountId'] : null;
        $this->createdTime = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->updatedTime = isset($data['updatedTime']) ? $data['updatedTime'] : null;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Ad group name.
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return EntityStatus|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param EntityStatus|null $status  Ad group/entity status.
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets budgetInMicroCurrency.
     *
     * @return int|null
     */
    public function getBudgetInMicroCurrency()
    {
        return $this->budgetInMicroCurrency;
    }

    /**
     * Sets budgetInMicroCurrency.
     *
     * @param int|null $budgetInMicroCurrency  Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     *
     * @return $this
     */
    public function setBudgetInMicroCurrency($budgetInMicroCurrency = null)
    {
        $this->budgetInMicroCurrency = $budgetInMicroCurrency;

        return $this;
    }

    /**
     * Gets bidInMicroCurrency.
     *
     * @return int|null
     */
    public function getBidInMicroCurrency()
    {
        return $this->bidInMicroCurrency;
    }

    /**
     * Sets bidInMicroCurrency.
     *
     * @param int|null $bidInMicroCurrency  Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     *
     * @return $this
     */
    public function setBidInMicroCurrency($bidInMicroCurrency = null)
    {
        $this->bidInMicroCurrency = $bidInMicroCurrency;

        return $this;
    }

    /**
     * Gets budgetType.
     *
     * @return string|null
     */
    public function getBudgetType()
    {
        return $this->budgetType;
    }

    /**
     * Sets budgetType.
     *
     * @param string|null $budgetType  Budget type. If DAILY, an ad group's daily spend will not exceed the budget parameter value. If LIFETIME, the end_time parameter is **REQUIRED**, and the ad group spend is spread evenly between the ad group `start_time` and `end_time` range. A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome.
     *
     * @return $this
     */
    public function setBudgetType($budgetType = null)
    {
        $this->budgetType = $budgetType;

        return $this;
    }

    /**
     * Gets startTime.
     *
     * @return int|null
     */
    public function getStartTime()
    {
        return $this->startTime;
    }

    /**
     * Sets startTime.
     *
     * @param int|null $startTime  Ad group start time. Unix timestamp in seconds. Defaults to current time.
     *
     * @return $this
     */
    public function setStartTime($startTime = null)
    {
        $this->startTime = $startTime;

        return $this;
    }

    /**
     * Gets endTime.
     *
     * @return int|null
     */
    public function getEndTime()
    {
        return $this->endTime;
    }

    /**
     * Sets endTime.
     *
     * @param int|null $endTime  Ad group end time. Unix timestamp in seconds.
     *
     * @return $this
     */
    public function setEndTime($endTime = null)
    {
        $this->endTime = $endTime;

        return $this;
    }

    /**
     * Gets targetingSpec.
     *
     * @return string[]|null
     */
    public function getTargetingSpec(): ?array
    {
        return $this->targetingSpec;
    }

    /**
     * Sets targetingSpec.
     *
     * @param string[]|null $targetingSpec  Ad group targeting specification defining the ad group target audience. For example, '{\"APPTYPE\":[\"iphone\"], \"GENDER\":[\"male\"], \"LOCALE\":[\"en-US\"], \"LOCATION\":[\"501\"], \"AGE_BUCKET\":[\"25-34\"]}'
     *
     * @return $this
     */
    public function setTargetingSpec(array $targetingSpec = null)
    {
        $this->targetingSpec = $targetingSpec;

        return $this;
    }

    /**
     * Gets lifetimeFrequencyCap.
     *
     * @return int|null
     */
    public function getLifetimeFrequencyCap()
    {
        return $this->lifetimeFrequencyCap;
    }

    /**
     * Sets lifetimeFrequencyCap.
     *
     * @param int|null $lifetimeFrequencyCap  Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\\\"/docs/redoc/#section/Billable-event\\\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
     *
     * @return $this
     */
    public function setLifetimeFrequencyCap($lifetimeFrequencyCap = null)
    {
        $this->lifetimeFrequencyCap = $lifetimeFrequencyCap;

        return $this;
    }

    /**
     * Gets trackingUrls.
     *
     * @return TrackingUrls|null
     */
    public function getTrackingUrls()
    {
        return $this->trackingUrls;
    }

    /**
     * Sets trackingUrls.
     *
     * @param TrackingUrls|null $trackingUrls  Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
     *
     * @return $this
     */
    public function setTrackingUrls($trackingUrls = null)
    {
        $this->trackingUrls = $trackingUrls;

        return $this;
    }

    /**
     * Gets autoTargetingEnabled.
     *
     * @return bool|null
     */
    public function isAutoTargetingEnabled()
    {
        return $this->autoTargetingEnabled;
    }

    /**
     * Sets autoTargetingEnabled.
     *
     * @param bool|null $autoTargetingEnabled  Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
     *
     * @return $this
     */
    public function setAutoTargetingEnabled($autoTargetingEnabled = null)
    {
        $this->autoTargetingEnabled = $autoTargetingEnabled;

        return $this;
    }

    /**
     * Gets placementGroup.
     *
     * @return PlacementGroupType|null
     */
    public function getPlacementGroup()
    {
        return $this->placementGroup;
    }

    /**
     * Sets placementGroup.
     *
     * @param PlacementGroupType|null $placementGroup  <a href=\\\"/docs/redoc/#section/Placement-group\\\">Placement group</a>.
     *
     * @return $this
     */
    public function setPlacementGroup($placementGroup = null)
    {
        $this->placementGroup = $placementGroup;

        return $this;
    }

    /**
     * Gets pacingDeliveryType.
     *
     * @return PacingDeliveryType|null
     */
    public function getPacingDeliveryType()
    {
        return $this->pacingDeliveryType;
    }

    /**
     * Sets pacingDeliveryType.
     *
     * @param PacingDeliveryType|null $pacingDeliveryType  Pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day.
     *
     * @return $this
     */
    public function setPacingDeliveryType($pacingDeliveryType = null)
    {
        $this->pacingDeliveryType = $pacingDeliveryType;

        return $this;
    }

    /**
     * Gets conversionLearningModeType.
     *
     * @return string|null
     */
    public function getConversionLearningModeType()
    {
        return $this->conversionLearningModeType;
    }

    /**
     * Sets conversionLearningModeType.
     *
     * @param string|null $conversionLearningModeType  oCPM learn mode
     *
     * @return $this
     */
    public function setConversionLearningModeType($conversionLearningModeType = null)
    {
        $this->conversionLearningModeType = $conversionLearningModeType;

        return $this;
    }

    /**
     * Gets summaryStatus.
     *
     * @return AdGroupSummaryStatus|null
     */
    public function getSummaryStatus()
    {
        return $this->summaryStatus;
    }

    /**
     * Sets summaryStatus.
     *
     * @param AdGroupSummaryStatus|null $summaryStatus  Ad group summary status.
     *
     * @return $this
     */
    public function setSummaryStatus($summaryStatus = null)
    {
        $this->summaryStatus = $summaryStatus;

        return $this;
    }

    /**
     * Gets feedProfileId.
     *
     * @return string|null
     */
    public function getFeedProfileId()
    {
        return $this->feedProfileId;
    }

    /**
     * Sets feedProfileId.
     *
     * @param string|null $feedProfileId  Feed Profile ID associated to the adgroup.
     *
     * @return $this
     */
    public function setFeedProfileId($feedProfileId = null)
    {
        $this->feedProfileId = $feedProfileId;

        return $this;
    }

    /**
     * Gets campaignId.
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->campaignId;
    }

    /**
     * Sets campaignId.
     *
     * @param string|null $campaignId  Campaign ID of the ad group.
     *
     * @return $this
     */
    public function setCampaignId($campaignId = null)
    {
        $this->campaignId = $campaignId;

        return $this;
    }

    /**
     * Gets billableEvent.
     *
     * @return OpenAPI\Server\Model\ActionType|null
     */
    public function getBillableEvent(): ?ActionType
    {
        return $this->billableEvent;
    }

    /**
     * Sets billableEvent.
     *
     * @param OpenAPI\Server\Model\ActionType|null $billableEvent
     *
     * @return $this
     */
    public function setBillableEvent(ActionType $billableEvent = null)
    {
        $this->billableEvent = $billableEvent;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  Ad group ID.
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  Always \"adgroup\".
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets adAccountId.
     *
     * @return string|null
     */
    public function getAdAccountId()
    {
        return $this->adAccountId;
    }

    /**
     * Sets adAccountId.
     *
     * @param string|null $adAccountId  Advertiser ID.
     *
     * @return $this
     */
    public function setAdAccountId($adAccountId = null)
    {
        $this->adAccountId = $adAccountId;

        return $this;
    }

    /**
     * Gets createdTime.
     *
     * @return int|null
     */
    public function getCreatedTime()
    {
        return $this->createdTime;
    }

    /**
     * Sets createdTime.
     *
     * @param int|null $createdTime  Ad group creation time. Unix timestamp in seconds.
     *
     * @return $this
     */
    public function setCreatedTime($createdTime = null)
    {
        $this->createdTime = $createdTime;

        return $this;
    }

    /**
     * Gets updatedTime.
     *
     * @return int|null
     */
    public function getUpdatedTime()
    {
        return $this->updatedTime;
    }

    /**
     * Sets updatedTime.
     *
     * @param int|null $updatedTime  Ad group last update time. Unix timestamp in seconds.
     *
     * @return $this
     */
    public function setUpdatedTime($updatedTime = null)
    {
        $this->updatedTime = $updatedTime;

        return $this;
    }
}


