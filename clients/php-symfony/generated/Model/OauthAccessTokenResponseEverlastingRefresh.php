<?php
/**
 * OauthAccessTokenResponseEverlastingRefresh
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OauthAccessTokenResponseEverlastingRefresh model.
 *
 * A successful OAuth access token response for the refresh token flow, with an added everlasting refresh token.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OauthAccessTokenResponseEverlastingRefresh extends OauthAccessTokenResponse 
{
        /**
     * @var string|null
     * @SerializedName("refresh_token")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $refreshToken = null;

    /**
     * @var int|null
     * @SerializedName("refresh_token_expires_in")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $refreshTokenExpiresIn = null;

    /**
     * @var int|null
     * @SerializedName("refresh_token_expires_at")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $refreshTokenExpiresAt = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        if (is_array($data)) {
            $this->refreshToken = array_key_exists('refreshToken', $data) ? $data['refreshToken'] : $this->refreshToken;
            $this->refreshTokenExpiresIn = array_key_exists('refreshTokenExpiresIn', $data) ? $data['refreshTokenExpiresIn'] : $this->refreshTokenExpiresIn;
            $this->refreshTokenExpiresAt = array_key_exists('refreshTokenExpiresAt', $data) ? $data['refreshTokenExpiresAt'] : $this->refreshTokenExpiresAt;
        }
    }

    /**
     * Gets refreshToken.
     *
     * @return string|null
     */
    public function getRefreshToken(): ?string
    {
        return $this->refreshToken;
    }



    /**
     * Sets refreshToken.
     *
     * @param string|null $refreshToken
     *
     * @return $this
     */
    public function setRefreshToken(?string $refreshToken): self
    {
        $this->refreshToken = $refreshToken;

        return $this;
    }

    /**
     * Gets refreshTokenExpiresIn.
     *
     * @return int|null
     */
    public function getRefreshTokenExpiresIn(): ?int
    {
        return $this->refreshTokenExpiresIn;
    }



    /**
     * Sets refreshTokenExpiresIn.
     *
     * @param int|null $refreshTokenExpiresIn
     *
     * @return $this
     */
    public function setRefreshTokenExpiresIn(?int $refreshTokenExpiresIn): self
    {
        $this->refreshTokenExpiresIn = $refreshTokenExpiresIn;

        return $this;
    }

    /**
     * Gets refreshTokenExpiresAt.
     *
     * @return int|null
     */
    public function getRefreshTokenExpiresAt(): ?int
    {
        return $this->refreshTokenExpiresAt;
    }



    /**
     * Sets refreshTokenExpiresAt.
     *
     * @param int|null $refreshTokenExpiresAt
     *
     * @return $this
     */
    public function setRefreshTokenExpiresAt(?int $refreshTokenExpiresAt): self
    {
        $this->refreshTokenExpiresAt = $refreshTokenExpiresAt;

        return $this;
    }
}


