<?php
/**
 * AnalyticsDailyMetrics
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AnalyticsDailyMetrics model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AnalyticsDailyMetrics 
{
        /**
     * @var DataStatus|null
     * @SerializedName("data_status")
        * @Accessor(getter="getSerializedDataStatus")
        * @Type("string")
     */
    protected ?DataStatus $dataStatus = null;

    /**
     * Metrics date (UTC): YYYY-MM-DD.
     *
     * @var string|null
     * @SerializedName("date")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $date = null;

    /**
     * The metric name and daily value for each requested metric
     *
     * @var float[]|null
     * @SerializedName("metrics")
     * @Assert\All({
     *   @Assert\Type("float")
     * })
     * @Type("array<string, float>")
     */
    protected ?array $metrics = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->dataStatus = array_key_exists('dataStatus', $data) ? $data['dataStatus'] : $this->dataStatus;
            $this->date = array_key_exists('date', $data) ? $data['date'] : $this->date;
            $this->metrics = array_key_exists('metrics', $data) ? $data['metrics'] : $this->metrics;
        }
    }

    /**
     * Gets dataStatus.
     *
     * @return DataStatus|null
     */
    public function getDataStatus(): ?DataStatus
    {
        return $this->dataStatus;
    }

    /**
    * Gets dataStatus for serialization.
    *
    * @return string|null
    */
    public function getSerializedDataStatus(): string|null
    {
        return $this->dataStatus?->value ? (string) $this->dataStatus->value : null;
    }


    /**
     * Sets dataStatus.
     *
     * @param DataStatus|null $dataStatus
     *
     * @return $this
     */
    public function setDataStatus(?DataStatus $dataStatus = null): self
    {
        $this->dataStatus = $dataStatus;

        return $this;
    }

    /**
     * Gets date.
     *
     * @return string|null
     */
    public function getDate(): ?string
    {
        return $this->date;
    }



    /**
     * Sets date.
     *
     * @param string|null $date  Metrics date (UTC): YYYY-MM-DD.
     *
     * @return $this
     */
    public function setDate(?string $date = null): self
    {
        $this->date = $date;

        return $this;
    }

    /**
     * Gets metrics.
     *
     * @return float[]|null
     */
    public function getMetrics(): ?array
    {
        return $this->metrics;
    }



    /**
     * Sets metrics.
     *
     * @param float[]|null $metrics  The metric name and daily value for each requested metric
     *
     * @return $this
     */
    public function setMetrics(?array $metrics = null): self
    {
        $this->metrics = $metrics;

        return $this;
    }
}


