<?php
/**
 * AdsAnalyticsCreateAsyncRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AdsAnalyticsCreateAsyncRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AdsAnalyticsCreateAsyncRequest 
{
        /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     *
     * @var string|null
     * @SerializedName("start_date")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")
     */
    protected ?string $startDate = null;

    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     *
     * @var string|null
     * @SerializedName("end_date")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")
     */
    protected ?string $endDate = null;

    /**
     * TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
     *
     * @var Granularity|null
     * @SerializedName("granularity")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedGranularity")
        * @Type("string")
     */
    protected ?Granularity $granularity = null;

    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("click_window_days")
        * @Accessor(getter="getSerializedClickWindowDays")
        * @Type("string")
     */
    protected ?ConversionAttributionWindowDays $clickWindowDays = 30;

    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("engagement_window_days")
        * @Accessor(getter="getSerializedEngagementWindowDays")
        * @Type("string")
     */
    protected ?ConversionAttributionWindowDays $engagementWindowDays = 30;

    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("view_window_days")
        * @Accessor(getter="getSerializedViewWindowDays")
        * @Type("string")
     */
    protected ?ConversionAttributionWindowDays $viewWindowDays = 1;

    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     *
     * @var ConversionReportTimeType|null
     * @SerializedName("conversion_report_time")
        * @Accessor(getter="getSerializedConversionReportTime")
        * @Type("string")
     */
    protected ?ConversionReportTimeType $conversionReportTime = 'TIME_OF_AD_ACTION';

    /**
     * List of types of attribution for the conversion report
     *
     * @var ConversionReportAttributionType[]|null
     * @SerializedName("attribution_types")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ConversionReportAttributionType")
     * })
     * @Accessor(getter="getSerializedAttributionTypes")
     * @Type("array<string>")
     */
    protected ?array $attributionTypes = null;

    /**
     * List of campaign ids
     *
     * @var string[]|null
     * @SerializedName("campaign_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $campaignIds = null;

    /**
     * List of status values for filtering
     *
     * @var CampaignSummaryStatus[]|null
     * @SerializedName("campaign_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\CampaignSummaryStatus")
     * })
     * @Accessor(getter="getSerializedCampaignStatuses")
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $campaignStatuses = null;

    /**
     * List of values for filtering. [\&quot;WEB_SESSIONS\&quot;] in BETA.
     *
     * @var ObjectiveType[]|null
     * @SerializedName("campaign_objective_types")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ObjectiveType")
     * })
     * @Accessor(getter="getSerializedCampaignObjectiveTypes")
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $campaignObjectiveTypes = null;

    /**
     * List of ad group ids
     *
     * @var string[]|null
     * @SerializedName("ad_group_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $adGroupIds = null;

    /**
     * List of values for filtering
     *
     * @var AdGroupSummaryStatus[]|null
     * @SerializedName("ad_group_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AdGroupSummaryStatus")
     * })
     * @Accessor(getter="getSerializedAdGroupStatuses")
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $adGroupStatuses = null;

    /**
     * List of ad ids [This parameter is no supported for Product Item Level Reports]
     *
     * @var string[]|null
     * @SerializedName("ad_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $adIds = null;

    /**
     * List of values for filtering [This parameter is not supported for Product Item Level Reports]
     *
     * @var PinPromotionSummaryStatus[]|null
     * @SerializedName("ad_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\PinPromotionSummaryStatus")
     * })
     * @Accessor(getter="getSerializedAdStatuses")
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $adStatuses = null;

    /**
     * List of product group ids
     *
     * @var string[]|null
     * @SerializedName("product_group_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $productGroupIds = null;

    /**
     * List of values for filtering
     *
     * @var ProductGroupSummaryStatus[]|null
     * @SerializedName("product_group_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ProductGroupSummaryStatus")
     * })
     * @Accessor(getter="getSerializedProductGroupStatuses")
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $productGroupStatuses = null;

    /**
     * List of product item ids
     *
     * @var string[]|null
     * @SerializedName("product_item_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $productItemIds = null;

    /**
     * List of targeting types. Requires &#x60;level&#x60; to be a value ending in &#x60;_TARGETING&#x60;.
     *
     * @var AdsAnalyticsTargetingType[]|null
     * @SerializedName("targeting_types")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AdsAnalyticsTargetingType")
     * })
     * @Accessor(getter="getSerializedTargetingTypes")
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 5
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $targetingTypes = null;

    /**
     * List of metrics filters
     *
     * @var AdsAnalyticsMetricsFilter[]|null
     * @SerializedName("metrics_filters")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AdsAnalyticsMetricsFilter")
     * })
     * @Type("array<OpenAPI\Server\Model\AdsAnalyticsMetricsFilter>")
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected ?array $metricsFilters = null;

    /**
     * Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
     *
     * @var ReportingColumnAsync[]|null
     * @SerializedName("columns")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ReportingColumnAsync")
     * })
     * @Accessor(getter="getSerializedColumns")
     * @Type("array<string>")
     */
    protected ?array $columns = null;

    /**
     * Level of the report
     *
     * @var MetricsReportingLevel|null
     * @SerializedName("level")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedLevel")
        * @Type("string")
     */
    protected ?MetricsReportingLevel $level = null;

    /**
     * Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
     *
     * @var DataOutputFormat|null
     * @SerializedName("report_format")
        * @Accessor(getter="getSerializedReportFormat")
        * @Type("string")
     */
    protected ?DataOutputFormat $reportFormat = 'JSON';

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->startDate = array_key_exists('startDate', $data) ? $data['startDate'] : $this->startDate;
            $this->endDate = array_key_exists('endDate', $data) ? $data['endDate'] : $this->endDate;
            $this->granularity = array_key_exists('granularity', $data) ? $data['granularity'] : $this->granularity;
            $this->clickWindowDays = array_key_exists('clickWindowDays', $data) ? $data['clickWindowDays'] : $this->clickWindowDays;
            $this->engagementWindowDays = array_key_exists('engagementWindowDays', $data) ? $data['engagementWindowDays'] : $this->engagementWindowDays;
            $this->viewWindowDays = array_key_exists('viewWindowDays', $data) ? $data['viewWindowDays'] : $this->viewWindowDays;
            $this->conversionReportTime = array_key_exists('conversionReportTime', $data) ? $data['conversionReportTime'] : $this->conversionReportTime;
            $this->attributionTypes = array_key_exists('attributionTypes', $data) ? $data['attributionTypes'] : $this->attributionTypes;
            $this->campaignIds = array_key_exists('campaignIds', $data) ? $data['campaignIds'] : $this->campaignIds;
            $this->campaignStatuses = array_key_exists('campaignStatuses', $data) ? $data['campaignStatuses'] : $this->campaignStatuses;
            $this->campaignObjectiveTypes = array_key_exists('campaignObjectiveTypes', $data) ? $data['campaignObjectiveTypes'] : $this->campaignObjectiveTypes;
            $this->adGroupIds = array_key_exists('adGroupIds', $data) ? $data['adGroupIds'] : $this->adGroupIds;
            $this->adGroupStatuses = array_key_exists('adGroupStatuses', $data) ? $data['adGroupStatuses'] : $this->adGroupStatuses;
            $this->adIds = array_key_exists('adIds', $data) ? $data['adIds'] : $this->adIds;
            $this->adStatuses = array_key_exists('adStatuses', $data) ? $data['adStatuses'] : $this->adStatuses;
            $this->productGroupIds = array_key_exists('productGroupIds', $data) ? $data['productGroupIds'] : $this->productGroupIds;
            $this->productGroupStatuses = array_key_exists('productGroupStatuses', $data) ? $data['productGroupStatuses'] : $this->productGroupStatuses;
            $this->productItemIds = array_key_exists('productItemIds', $data) ? $data['productItemIds'] : $this->productItemIds;
            $this->targetingTypes = array_key_exists('targetingTypes', $data) ? $data['targetingTypes'] : $this->targetingTypes;
            $this->metricsFilters = array_key_exists('metricsFilters', $data) ? $data['metricsFilters'] : $this->metricsFilters;
            $this->columns = array_key_exists('columns', $data) ? $data['columns'] : $this->columns;
            $this->level = array_key_exists('level', $data) ? $data['level'] : $this->level;
            $this->reportFormat = array_key_exists('reportFormat', $data) ? $data['reportFormat'] : $this->reportFormat;
        }
    }

    /**
     * Gets startDate.
     *
     * @return string|null
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }



    /**
     * Sets startDate.
     *
     * @param string|null $startDate  Metric report start date (UTC). Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setStartDate(?string $startDate): self
    {
        $this->startDate = $startDate;

        return $this;
    }

    /**
     * Gets endDate.
     *
     * @return string|null
     */
    public function getEndDate(): ?string
    {
        return $this->endDate;
    }



    /**
     * Sets endDate.
     *
     * @param string|null $endDate  Metric report end date (UTC). Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setEndDate(?string $endDate): self
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Gets granularity.
     *
     * @return Granularity|null
     */
    public function getGranularity(): ?Granularity
    {
        return $this->granularity;
    }

    /**
    * Gets granularity for serialization.
    *
    * @return string|null
    */
    public function getSerializedGranularity(): string|null
    {
        return $this->granularity?->value ? (string) $this->granularity->value : null;
    }


    /**
     * Sets granularity.
     *
     * @param Granularity|null $granularity  TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     *
     * @return $this
     */
    public function setGranularity(?Granularity $granularity): self
    {
        $this->granularity = $granularity;

        return $this;
    }

    /**
     * Gets clickWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getClickWindowDays(): ?ConversionAttributionWindowDays
    {
        return $this->clickWindowDays;
    }

    /**
    * Gets clickWindowDays for serialization.
    *
    * @return string|null
    */
    public function getSerializedClickWindowDays(): string|null
    {
        return $this->clickWindowDays?->value ? (string) $this->clickWindowDays->value : null;
    }


    /**
     * Sets clickWindowDays.
     *
     * @param ConversionAttributionWindowDays|null $clickWindowDays  Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     *
     * @return $this
     */
    public function setClickWindowDays(?ConversionAttributionWindowDays $clickWindowDays = null): self
    {
        $this->clickWindowDays = $clickWindowDays;

        return $this;
    }

    /**
     * Gets engagementWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getEngagementWindowDays(): ?ConversionAttributionWindowDays
    {
        return $this->engagementWindowDays;
    }

    /**
    * Gets engagementWindowDays for serialization.
    *
    * @return string|null
    */
    public function getSerializedEngagementWindowDays(): string|null
    {
        return $this->engagementWindowDays?->value ? (string) $this->engagementWindowDays->value : null;
    }


    /**
     * Sets engagementWindowDays.
     *
     * @param ConversionAttributionWindowDays|null $engagementWindowDays  Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     *
     * @return $this
     */
    public function setEngagementWindowDays(?ConversionAttributionWindowDays $engagementWindowDays = null): self
    {
        $this->engagementWindowDays = $engagementWindowDays;

        return $this;
    }

    /**
     * Gets viewWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getViewWindowDays(): ?ConversionAttributionWindowDays
    {
        return $this->viewWindowDays;
    }

    /**
    * Gets viewWindowDays for serialization.
    *
    * @return string|null
    */
    public function getSerializedViewWindowDays(): string|null
    {
        return $this->viewWindowDays?->value ? (string) $this->viewWindowDays->value : null;
    }


    /**
     * Sets viewWindowDays.
     *
     * @param ConversionAttributionWindowDays|null $viewWindowDays  Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     *
     * @return $this
     */
    public function setViewWindowDays(?ConversionAttributionWindowDays $viewWindowDays = null): self
    {
        $this->viewWindowDays = $viewWindowDays;

        return $this;
    }

    /**
     * Gets conversionReportTime.
     *
     * @return ConversionReportTimeType|null
     */
    public function getConversionReportTime(): ?ConversionReportTimeType
    {
        return $this->conversionReportTime;
    }

    /**
    * Gets conversionReportTime for serialization.
    *
    * @return string|null
    */
    public function getSerializedConversionReportTime(): string|null
    {
        return $this->conversionReportTime?->value ? (string) $this->conversionReportTime->value : null;
    }


    /**
     * Sets conversionReportTime.
     *
     * @param ConversionReportTimeType|null $conversionReportTime  The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     *
     * @return $this
     */
    public function setConversionReportTime(?ConversionReportTimeType $conversionReportTime = null): self
    {
        $this->conversionReportTime = $conversionReportTime;

        return $this;
    }

    /**
     * Gets attributionTypes.
     *
     * @return ConversionReportAttributionType[]|null
     */
    public function getAttributionTypes(): ?array
    {
        return $this->attributionTypes;
    }


    /**
    * Gets attributionTypes for serialization.
    *
    * @return array
    */
    public function getSerializedAttributionTypes(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets attributionTypes.
     *
     * @param ConversionReportAttributionType[]|null $attributionTypes  List of types of attribution for the conversion report
     *
     * @return $this
     */
    public function setAttributionTypes(?array $attributionTypes = null): self
    {
        $this->attributionTypes = $attributionTypes;

        return $this;
    }

    /**
     * Gets campaignIds.
     *
     * @return string[]|null
     */
    public function getCampaignIds(): ?array
    {
        return $this->campaignIds;
    }



    /**
     * Sets campaignIds.
     *
     * @param string[]|null $campaignIds  List of campaign ids
     *
     * @return $this
     */
    public function setCampaignIds(?array $campaignIds = null): self
    {
        $this->campaignIds = $campaignIds;

        return $this;
    }

    /**
     * Gets campaignStatuses.
     *
     * @return CampaignSummaryStatus[]|null
     */
    public function getCampaignStatuses(): ?array
    {
        return $this->campaignStatuses;
    }


    /**
    * Gets campaignStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedCampaignStatuses(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets campaignStatuses.
     *
     * @param CampaignSummaryStatus[]|null $campaignStatuses  List of status values for filtering
     *
     * @return $this
     */
    public function setCampaignStatuses(?array $campaignStatuses = null): self
    {
        $this->campaignStatuses = $campaignStatuses;

        return $this;
    }

    /**
     * Gets campaignObjectiveTypes.
     *
     * @return ObjectiveType[]|null
     */
    public function getCampaignObjectiveTypes(): ?array
    {
        return $this->campaignObjectiveTypes;
    }


    /**
    * Gets campaignObjectiveTypes for serialization.
    *
    * @return array
    */
    public function getSerializedCampaignObjectiveTypes(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets campaignObjectiveTypes.
     *
     * @param ObjectiveType[]|null $campaignObjectiveTypes  List of values for filtering. [\"WEB_SESSIONS\"] in BETA.
     *
     * @return $this
     */
    public function setCampaignObjectiveTypes(?array $campaignObjectiveTypes = null): self
    {
        $this->campaignObjectiveTypes = $campaignObjectiveTypes;

        return $this;
    }

    /**
     * Gets adGroupIds.
     *
     * @return string[]|null
     */
    public function getAdGroupIds(): ?array
    {
        return $this->adGroupIds;
    }



    /**
     * Sets adGroupIds.
     *
     * @param string[]|null $adGroupIds  List of ad group ids
     *
     * @return $this
     */
    public function setAdGroupIds(?array $adGroupIds = null): self
    {
        $this->adGroupIds = $adGroupIds;

        return $this;
    }

    /**
     * Gets adGroupStatuses.
     *
     * @return AdGroupSummaryStatus[]|null
     */
    public function getAdGroupStatuses(): ?array
    {
        return $this->adGroupStatuses;
    }


    /**
    * Gets adGroupStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedAdGroupStatuses(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets adGroupStatuses.
     *
     * @param AdGroupSummaryStatus[]|null $adGroupStatuses  List of values for filtering
     *
     * @return $this
     */
    public function setAdGroupStatuses(?array $adGroupStatuses = null): self
    {
        $this->adGroupStatuses = $adGroupStatuses;

        return $this;
    }

    /**
     * Gets adIds.
     *
     * @return string[]|null
     */
    public function getAdIds(): ?array
    {
        return $this->adIds;
    }



    /**
     * Sets adIds.
     *
     * @param string[]|null $adIds  List of ad ids [This parameter is no supported for Product Item Level Reports]
     *
     * @return $this
     */
    public function setAdIds(?array $adIds = null): self
    {
        $this->adIds = $adIds;

        return $this;
    }

    /**
     * Gets adStatuses.
     *
     * @return PinPromotionSummaryStatus[]|null
     */
    public function getAdStatuses(): ?array
    {
        return $this->adStatuses;
    }


    /**
    * Gets adStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedAdStatuses(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets adStatuses.
     *
     * @param PinPromotionSummaryStatus[]|null $adStatuses  List of values for filtering [This parameter is not supported for Product Item Level Reports]
     *
     * @return $this
     */
    public function setAdStatuses(?array $adStatuses = null): self
    {
        $this->adStatuses = $adStatuses;

        return $this;
    }

    /**
     * Gets productGroupIds.
     *
     * @return string[]|null
     */
    public function getProductGroupIds(): ?array
    {
        return $this->productGroupIds;
    }



    /**
     * Sets productGroupIds.
     *
     * @param string[]|null $productGroupIds  List of product group ids
     *
     * @return $this
     */
    public function setProductGroupIds(?array $productGroupIds = null): self
    {
        $this->productGroupIds = $productGroupIds;

        return $this;
    }

    /**
     * Gets productGroupStatuses.
     *
     * @return ProductGroupSummaryStatus[]|null
     */
    public function getProductGroupStatuses(): ?array
    {
        return $this->productGroupStatuses;
    }


    /**
    * Gets productGroupStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedProductGroupStatuses(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets productGroupStatuses.
     *
     * @param ProductGroupSummaryStatus[]|null $productGroupStatuses  List of values for filtering
     *
     * @return $this
     */
    public function setProductGroupStatuses(?array $productGroupStatuses = null): self
    {
        $this->productGroupStatuses = $productGroupStatuses;

        return $this;
    }

    /**
     * Gets productItemIds.
     *
     * @return string[]|null
     */
    public function getProductItemIds(): ?array
    {
        return $this->productItemIds;
    }



    /**
     * Sets productItemIds.
     *
     * @param string[]|null $productItemIds  List of product item ids
     *
     * @return $this
     */
    public function setProductItemIds(?array $productItemIds = null): self
    {
        $this->productItemIds = $productItemIds;

        return $this;
    }

    /**
     * Gets targetingTypes.
     *
     * @return AdsAnalyticsTargetingType[]|null
     */
    public function getTargetingTypes(): ?array
    {
        return $this->targetingTypes;
    }


    /**
    * Gets targetingTypes for serialization.
    *
    * @return array
    */
    public function getSerializedTargetingTypes(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets targetingTypes.
     *
     * @param AdsAnalyticsTargetingType[]|null $targetingTypes  List of targeting types. Requires `level` to be a value ending in `_TARGETING`.
     *
     * @return $this
     */
    public function setTargetingTypes(?array $targetingTypes = null): self
    {
        $this->targetingTypes = $targetingTypes;

        return $this;
    }

    /**
     * Gets metricsFilters.
     *
     * @return AdsAnalyticsMetricsFilter[]|null
     */
    public function getMetricsFilters(): ?array
    {
        return $this->metricsFilters;
    }



    /**
     * Sets metricsFilters.
     *
     * @param AdsAnalyticsMetricsFilter[]|null $metricsFilters  List of metrics filters
     *
     * @return $this
     */
    public function setMetricsFilters(?array $metricsFilters = null): self
    {
        $this->metricsFilters = $metricsFilters;

        return $this;
    }

    /**
     * Gets columns.
     *
     * @return ReportingColumnAsync[]|null
     */
    public function getColumns(): ?array
    {
        return $this->columns;
    }


    /**
    * Gets columns for serialization.
    *
    * @return array
    */
    public function getSerializedColumns(): array
    {
        return array_map(
            static fn ($value) => (string) $value->value,
            $this->test ?? []
        );
    }

    /**
     * Sets columns.
     *
     * @param ReportingColumnAsync[]|null $columns  Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
     *
     * @return $this
     */
    public function setColumns(?array $columns): self
    {
        $this->columns = $columns;

        return $this;
    }

    /**
     * Gets level.
     *
     * @return MetricsReportingLevel|null
     */
    public function getLevel(): ?MetricsReportingLevel
    {
        return $this->level;
    }

    /**
    * Gets level for serialization.
    *
    * @return string|null
    */
    public function getSerializedLevel(): string|null
    {
        return $this->level?->value ? (string) $this->level->value : null;
    }


    /**
     * Sets level.
     *
     * @param MetricsReportingLevel|null $level  Level of the report
     *
     * @return $this
     */
    public function setLevel(?MetricsReportingLevel $level): self
    {
        $this->level = $level;

        return $this;
    }

    /**
     * Gets reportFormat.
     *
     * @return DataOutputFormat|null
     */
    public function getReportFormat(): ?DataOutputFormat
    {
        return $this->reportFormat;
    }

    /**
    * Gets reportFormat for serialization.
    *
    * @return string|null
    */
    public function getSerializedReportFormat(): string|null
    {
        return $this->reportFormat?->value ? (string) $this->reportFormat->value : null;
    }


    /**
     * Sets reportFormat.
     *
     * @param DataOutputFormat|null $reportFormat  Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
     *
     * @return $this
     */
    public function setReportFormat(?DataOutputFormat $reportFormat = null): self
    {
        $this->reportFormat = $reportFormat;

        return $this;
    }
}


