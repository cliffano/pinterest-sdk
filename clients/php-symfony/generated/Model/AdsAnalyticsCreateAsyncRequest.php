<?php
/**
 * AdsAnalyticsCreateAsyncRequest
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AdsAnalyticsCreateAsyncRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class AdsAnalyticsCreateAsyncRequest 
{
        /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     *
     * @var string
     * @SerializedName("start_date")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")
     */
    protected $startDate;

    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     *
     * @var string
     * @SerializedName("end_date")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")
     */
    protected $endDate;

    /**
     * TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
     *
     * @var Granularity
     * @SerializedName("granularity")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("Granularity")
     * @Type("Granularity")
     */
    protected $granularity;

    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("click_window_days")
     * @Assert\Type("ConversionAttributionWindowDays")
     * @Type("ConversionAttributionWindowDays")
     */
    protected $clickWindowDays;

    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("engagement_window_days")
     * @Assert\Type("ConversionAttributionWindowDays")
     * @Type("ConversionAttributionWindowDays")
     */
    protected $engagementWindowDays;

    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("view_window_days")
     * @Assert\Type("ConversionAttributionWindowDays")
     * @Type("ConversionAttributionWindowDays")
     */
    protected $viewWindowDays;

    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     *
     * @var ConversionReportTimeType|null
     * @SerializedName("conversion_report_time")
     * @Assert\Type("ConversionReportTimeType")
     * @Type("ConversionReportTimeType")
     */
    protected $conversionReportTime;

    /**
     * List of types of attribution for the conversion report
     *
     * @var OpenAPI\Server\Model\ConversionReportAttributionType[]|null
     * @SerializedName("attribution_types")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ConversionReportAttributionType")
     * })
     * @Type("array<OpenAPI\Server\Model\ConversionReportAttributionType>")
     */
    protected $attributionTypes;

    /**
     * Metric and entity columns
     *
     * @var OpenAPI\Server\Model\ReportingColumnAsync[]
     * @SerializedName("columns")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ReportingColumnAsync")
     * })
     * @Type("array<OpenAPI\Server\Model\ReportingColumnAsync>")
     */
    protected $columns;

    /**
     * Level of the report
     *
     * @var MetricsReportingLevel
     * @SerializedName("level")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("MetricsReportingLevel")
     * @Type("MetricsReportingLevel")
     */
    protected $level;

    /**
     * Specification for formatting report data
     *
     * @var DataOutputFormat|null
     * @SerializedName("report_format")
     * @Assert\Type("DataOutputFormat")
     * @Type("DataOutputFormat")
     */
    protected $reportFormat;

    /**
     * List of campaign ids
     *
     * @var string[]|null
     * @SerializedName("campaign_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $campaignIds;

    /**
     * List of status values for filtering
     *
     * @var OpenAPI\Server\Model\CampaignSummaryStatus[]|null
     * @SerializedName("campaign_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\CampaignSummaryStatus")
     * })
     * @Type("array<OpenAPI\Server\Model\CampaignSummaryStatus>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $campaignStatuses;

    /**
     * List of values for filtering
     *
     * @var OpenAPI\Server\Model\ObjectiveType[]|null
     * @SerializedName("campaign_objective_types")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ObjectiveType")
     * })
     * @Type("array<OpenAPI\Server\Model\ObjectiveType>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $campaignObjectiveTypes;

    /**
     * List of ad group ids
     *
     * @var string[]|null
     * @SerializedName("ad_group_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $adGroupIds;

    /**
     * List of values for filtering
     *
     * @var OpenAPI\Server\Model\AdGroupSummaryStatus[]|null
     * @SerializedName("ad_group_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AdGroupSummaryStatus")
     * })
     * @Type("array<OpenAPI\Server\Model\AdGroupSummaryStatus>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $adGroupStatuses;

    /**
     * List of ad ids
     *
     * @var string[]|null
     * @SerializedName("ad_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $adIds;

    /**
     * List of values for filtering
     *
     * @var OpenAPI\Server\Model\PinPromotionSummaryStatus[]|null
     * @SerializedName("ad_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\PinPromotionSummaryStatus")
     * })
     * @Type("array<OpenAPI\Server\Model\PinPromotionSummaryStatus>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $adStatuses;

    /**
     * List of product group ids
     *
     * @var string[]|null
     * @SerializedName("product_group_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $productGroupIds;

    /**
     * List of values for filtering
     *
     * @var OpenAPI\Server\Model\ProductGroupSummaryStatus[]|null
     * @SerializedName("product_group_statuses")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\ProductGroupSummaryStatus")
     * })
     * @Type("array<OpenAPI\Server\Model\ProductGroupSummaryStatus>")
     * @Assert\Count(
     *   max = 6
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $productGroupStatuses;

    /**
     * List of product item ids
     *
     * @var string[]|null
     * @SerializedName("product_item_ids")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $productItemIds;

    /**
     * List of targeting types
     *
     * @var OpenAPI\Server\Model\AdsAnalyticsTargetingType[]|null
     * @SerializedName("targeting_types")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AdsAnalyticsTargetingType")
     * })
     * @Type("array<OpenAPI\Server\Model\AdsAnalyticsTargetingType>")
     * @Assert\Count(
     *   max = 5
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $targetingTypes;

    /**
     * List of metrics filters
     *
     * @var OpenAPI\Server\Model\AdsAnalyticsMetricsFilter[]|null
     * @SerializedName("metrics_filters")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\AdsAnalyticsMetricsFilter")
     * })
     * @Type("array<OpenAPI\Server\Model\AdsAnalyticsMetricsFilter>")
     * @Assert\Count(
     *   min = 1
     * )
     */
    protected $metricsFilters;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->startDate = isset($data['startDate']) ? $data['startDate'] : null;
        $this->endDate = isset($data['endDate']) ? $data['endDate'] : null;
        $this->granularity = isset($data['granularity']) ? $data['granularity'] : null;
        $this->clickWindowDays = isset($data['clickWindowDays']) ? $data['clickWindowDays'] : 30;
        $this->engagementWindowDays = isset($data['engagementWindowDays']) ? $data['engagementWindowDays'] : 30;
        $this->viewWindowDays = isset($data['viewWindowDays']) ? $data['viewWindowDays'] : 1;
        $this->conversionReportTime = isset($data['conversionReportTime']) ? $data['conversionReportTime'] : 'TIME_OF_AD_ACTION';
        $this->attributionTypes = isset($data['attributionTypes']) ? $data['attributionTypes'] : null;
        $this->columns = isset($data['columns']) ? $data['columns'] : null;
        $this->level = isset($data['level']) ? $data['level'] : null;
        $this->reportFormat = isset($data['reportFormat']) ? $data['reportFormat'] : 'JSON';
        $this->campaignIds = isset($data['campaignIds']) ? $data['campaignIds'] : null;
        $this->campaignStatuses = isset($data['campaignStatuses']) ? $data['campaignStatuses'] : null;
        $this->campaignObjectiveTypes = isset($data['campaignObjectiveTypes']) ? $data['campaignObjectiveTypes'] : null;
        $this->adGroupIds = isset($data['adGroupIds']) ? $data['adGroupIds'] : null;
        $this->adGroupStatuses = isset($data['adGroupStatuses']) ? $data['adGroupStatuses'] : null;
        $this->adIds = isset($data['adIds']) ? $data['adIds'] : null;
        $this->adStatuses = isset($data['adStatuses']) ? $data['adStatuses'] : null;
        $this->productGroupIds = isset($data['productGroupIds']) ? $data['productGroupIds'] : null;
        $this->productGroupStatuses = isset($data['productGroupStatuses']) ? $data['productGroupStatuses'] : null;
        $this->productItemIds = isset($data['productItemIds']) ? $data['productItemIds'] : null;
        $this->targetingTypes = isset($data['targetingTypes']) ? $data['targetingTypes'] : null;
        $this->metricsFilters = isset($data['metricsFilters']) ? $data['metricsFilters'] : null;
    }

    /**
     * Gets startDate.
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->startDate;
    }

    /**
     * Sets startDate.
     *
     * @param string $startDate  Metric report start date (UTC). Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->startDate = $startDate;

        return $this;
    }

    /**
     * Gets endDate.
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->endDate;
    }

    /**
     * Sets endDate.
     *
     * @param string $endDate  Metric report end date (UTC). Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Gets granularity.
     *
     * @return Granularity
     */
    public function getGranularity()
    {
        return $this->granularity;
    }

    /**
     * Sets granularity.
     *
     * @param Granularity $granularity  TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
     *
     * @return $this
     */
    public function setGranularity($granularity)
    {
        $this->granularity = $granularity;

        return $this;
    }

    /**
     * Gets clickWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getClickWindowDays()
    {
        return $this->clickWindowDays;
    }

    /**
     * Sets clickWindowDays.
     *
     * @param ConversionAttributionWindowDays|null $clickWindowDays  Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     *
     * @return $this
     */
    public function setClickWindowDays($clickWindowDays = null)
    {
        $this->clickWindowDays = $clickWindowDays;

        return $this;
    }

    /**
     * Gets engagementWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getEngagementWindowDays()
    {
        return $this->engagementWindowDays;
    }

    /**
     * Sets engagementWindowDays.
     *
     * @param ConversionAttributionWindowDays|null $engagementWindowDays  Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
     *
     * @return $this
     */
    public function setEngagementWindowDays($engagementWindowDays = null)
    {
        $this->engagementWindowDays = $engagementWindowDays;

        return $this;
    }

    /**
     * Gets viewWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getViewWindowDays()
    {
        return $this->viewWindowDays;
    }

    /**
     * Sets viewWindowDays.
     *
     * @param ConversionAttributionWindowDays|null $viewWindowDays  Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
     *
     * @return $this
     */
    public function setViewWindowDays($viewWindowDays = null)
    {
        $this->viewWindowDays = $viewWindowDays;

        return $this;
    }

    /**
     * Gets conversionReportTime.
     *
     * @return ConversionReportTimeType|null
     */
    public function getConversionReportTime()
    {
        return $this->conversionReportTime;
    }

    /**
     * Sets conversionReportTime.
     *
     * @param ConversionReportTimeType|null $conversionReportTime  The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     *
     * @return $this
     */
    public function setConversionReportTime($conversionReportTime = null)
    {
        $this->conversionReportTime = $conversionReportTime;

        return $this;
    }

    /**
     * Gets attributionTypes.
     *
     * @return OpenAPI\Server\Model\ConversionReportAttributionType[]|null
     */
    public function getAttributionTypes(): ?array
    {
        return $this->attributionTypes;
    }

    /**
     * Sets attributionTypes.
     *
     * @param OpenAPI\Server\Model\ConversionReportAttributionType[]|null $attributionTypes  List of types of attribution for the conversion report
     *
     * @return $this
     */
    public function setAttributionTypes(array $attributionTypes = null)
    {
        $this->attributionTypes = $attributionTypes;

        return $this;
    }

    /**
     * Gets columns.
     *
     * @return OpenAPI\Server\Model\ReportingColumnAsync[]
     */
    public function getColumns(): array
    {
        return $this->columns;
    }

    /**
     * Sets columns.
     *
     * @param OpenAPI\Server\Model\ReportingColumnAsync[] $columns  Metric and entity columns
     *
     * @return $this
     */
    public function setColumns(array $columns)
    {
        $this->columns = $columns;

        return $this;
    }

    /**
     * Gets level.
     *
     * @return MetricsReportingLevel
     */
    public function getLevel()
    {
        return $this->level;
    }

    /**
     * Sets level.
     *
     * @param MetricsReportingLevel $level  Level of the report
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->level = $level;

        return $this;
    }

    /**
     * Gets reportFormat.
     *
     * @return DataOutputFormat|null
     */
    public function getReportFormat()
    {
        return $this->reportFormat;
    }

    /**
     * Sets reportFormat.
     *
     * @param DataOutputFormat|null $reportFormat  Specification for formatting report data
     *
     * @return $this
     */
    public function setReportFormat($reportFormat = null)
    {
        $this->reportFormat = $reportFormat;

        return $this;
    }

    /**
     * Gets campaignIds.
     *
     * @return string[]|null
     */
    public function getCampaignIds(): ?array
    {
        return $this->campaignIds;
    }

    /**
     * Sets campaignIds.
     *
     * @param string[]|null $campaignIds  List of campaign ids
     *
     * @return $this
     */
    public function setCampaignIds(array $campaignIds = null)
    {
        $this->campaignIds = $campaignIds;

        return $this;
    }

    /**
     * Gets campaignStatuses.
     *
     * @return OpenAPI\Server\Model\CampaignSummaryStatus[]|null
     */
    public function getCampaignStatuses(): ?array
    {
        return $this->campaignStatuses;
    }

    /**
     * Sets campaignStatuses.
     *
     * @param OpenAPI\Server\Model\CampaignSummaryStatus[]|null $campaignStatuses  List of status values for filtering
     *
     * @return $this
     */
    public function setCampaignStatuses(array $campaignStatuses = null)
    {
        $this->campaignStatuses = $campaignStatuses;

        return $this;
    }

    /**
     * Gets campaignObjectiveTypes.
     *
     * @return OpenAPI\Server\Model\ObjectiveType[]|null
     */
    public function getCampaignObjectiveTypes(): ?array
    {
        return $this->campaignObjectiveTypes;
    }

    /**
     * Sets campaignObjectiveTypes.
     *
     * @param OpenAPI\Server\Model\ObjectiveType[]|null $campaignObjectiveTypes  List of values for filtering
     *
     * @return $this
     */
    public function setCampaignObjectiveTypes(array $campaignObjectiveTypes = null)
    {
        $this->campaignObjectiveTypes = $campaignObjectiveTypes;

        return $this;
    }

    /**
     * Gets adGroupIds.
     *
     * @return string[]|null
     */
    public function getAdGroupIds(): ?array
    {
        return $this->adGroupIds;
    }

    /**
     * Sets adGroupIds.
     *
     * @param string[]|null $adGroupIds  List of ad group ids
     *
     * @return $this
     */
    public function setAdGroupIds(array $adGroupIds = null)
    {
        $this->adGroupIds = $adGroupIds;

        return $this;
    }

    /**
     * Gets adGroupStatuses.
     *
     * @return OpenAPI\Server\Model\AdGroupSummaryStatus[]|null
     */
    public function getAdGroupStatuses(): ?array
    {
        return $this->adGroupStatuses;
    }

    /**
     * Sets adGroupStatuses.
     *
     * @param OpenAPI\Server\Model\AdGroupSummaryStatus[]|null $adGroupStatuses  List of values for filtering
     *
     * @return $this
     */
    public function setAdGroupStatuses(array $adGroupStatuses = null)
    {
        $this->adGroupStatuses = $adGroupStatuses;

        return $this;
    }

    /**
     * Gets adIds.
     *
     * @return string[]|null
     */
    public function getAdIds(): ?array
    {
        return $this->adIds;
    }

    /**
     * Sets adIds.
     *
     * @param string[]|null $adIds  List of ad ids
     *
     * @return $this
     */
    public function setAdIds(array $adIds = null)
    {
        $this->adIds = $adIds;

        return $this;
    }

    /**
     * Gets adStatuses.
     *
     * @return OpenAPI\Server\Model\PinPromotionSummaryStatus[]|null
     */
    public function getAdStatuses(): ?array
    {
        return $this->adStatuses;
    }

    /**
     * Sets adStatuses.
     *
     * @param OpenAPI\Server\Model\PinPromotionSummaryStatus[]|null $adStatuses  List of values for filtering
     *
     * @return $this
     */
    public function setAdStatuses(array $adStatuses = null)
    {
        $this->adStatuses = $adStatuses;

        return $this;
    }

    /**
     * Gets productGroupIds.
     *
     * @return string[]|null
     */
    public function getProductGroupIds(): ?array
    {
        return $this->productGroupIds;
    }

    /**
     * Sets productGroupIds.
     *
     * @param string[]|null $productGroupIds  List of product group ids
     *
     * @return $this
     */
    public function setProductGroupIds(array $productGroupIds = null)
    {
        $this->productGroupIds = $productGroupIds;

        return $this;
    }

    /**
     * Gets productGroupStatuses.
     *
     * @return OpenAPI\Server\Model\ProductGroupSummaryStatus[]|null
     */
    public function getProductGroupStatuses(): ?array
    {
        return $this->productGroupStatuses;
    }

    /**
     * Sets productGroupStatuses.
     *
     * @param OpenAPI\Server\Model\ProductGroupSummaryStatus[]|null $productGroupStatuses  List of values for filtering
     *
     * @return $this
     */
    public function setProductGroupStatuses(array $productGroupStatuses = null)
    {
        $this->productGroupStatuses = $productGroupStatuses;

        return $this;
    }

    /**
     * Gets productItemIds.
     *
     * @return string[]|null
     */
    public function getProductItemIds(): ?array
    {
        return $this->productItemIds;
    }

    /**
     * Sets productItemIds.
     *
     * @param string[]|null $productItemIds  List of product item ids
     *
     * @return $this
     */
    public function setProductItemIds(array $productItemIds = null)
    {
        $this->productItemIds = $productItemIds;

        return $this;
    }

    /**
     * Gets targetingTypes.
     *
     * @return OpenAPI\Server\Model\AdsAnalyticsTargetingType[]|null
     */
    public function getTargetingTypes(): ?array
    {
        return $this->targetingTypes;
    }

    /**
     * Sets targetingTypes.
     *
     * @param OpenAPI\Server\Model\AdsAnalyticsTargetingType[]|null $targetingTypes  List of targeting types
     *
     * @return $this
     */
    public function setTargetingTypes(array $targetingTypes = null)
    {
        $this->targetingTypes = $targetingTypes;

        return $this;
    }

    /**
     * Gets metricsFilters.
     *
     * @return OpenAPI\Server\Model\AdsAnalyticsMetricsFilter[]|null
     */
    public function getMetricsFilters(): ?array
    {
        return $this->metricsFilters;
    }

    /**
     * Sets metricsFilters.
     *
     * @param OpenAPI\Server\Model\AdsAnalyticsMetricsFilter[]|null $metricsFilters  List of metrics filters
     *
     * @return $this
     */
    public function setMetricsFilters(array $metricsFilters = null)
    {
        $this->metricsFilters = $metricsFilters;

        return $this;
    }
}


