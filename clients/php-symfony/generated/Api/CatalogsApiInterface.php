<?php
/**
 * CatalogsApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\CatalogsFeed;
use OpenAPI\Server\Model\CatalogsFeedsCreateRequest;
use OpenAPI\Server\Model\CatalogsFeedsUpdateRequest;
use OpenAPI\Server\Model\CatalogsItems;
use OpenAPI\Server\Model\CatalogsItemsBatch;
use OpenAPI\Server\Model\CatalogsItemsBatchRequest;
use OpenAPI\Server\Model\CatalogsProductGroup;
use OpenAPI\Server\Model\CatalogsProductGroupCreateRequest;
use OpenAPI\Server\Model\CatalogsProductGroupUpdateRequest;
use OpenAPI\Server\Model\Error;
use OpenAPI\Server\Model\Paginated;

/**
 * CatalogsApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface CatalogsApiInterface
{

    /**
     * Sets authentication method pinterest_oauth2
     *
     * @param string $value Value of the pinterest_oauth2 authentication method.
     *
     * @return void
     */
    public function setpinterest_oauth2($value);

    /**
     * Sets authentication method pinterest_oauth2
     *
     * @param string $value Value of the pinterest_oauth2 authentication method.
     *
     * @return void
     */
    public function setpinterest_oauth2($value);

    /**
     * Sets authentication method pinterest_oauth2
     *
     * @param string $value Value of the pinterest_oauth2 authentication method.
     *
     * @return void
     */
    public function setpinterest_oauth2($value);

    /**
     * Operation catalogsProductGroupsCreate
     *
     * Create product group
     *
     * @param  \OpenAPI\Server\Model\CatalogsProductGroupCreateRequest $catalogsProductGroupCreateRequest  Request object used to created a catalogs product group. (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \array
     */
    public function catalogsProductGroupsCreate(CatalogsProductGroupCreateRequest $catalogsProductGroupCreateRequest, &$responseCode, array &$responseHeaders);

    /**
     * Operation catalogsProductGroupsDelete
     *
     * Delete product group
     *
     * @param  \string $productGroupId  Unique identifier of a product group (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function catalogsProductGroupsDelete($productGroupId, &$responseCode, array &$responseHeaders);

    /**
     * Operation catalogsProductGroupsList
     *
     * Get product groups list
     *
     * @param  \string $feedId  Unique identifier of a feed (required)
     * @param  \string $bookmark  Cursor used to fetch the next page of items (optional)
     * @param  \int $pageSize  Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \Paginated
     */
    public function catalogsProductGroupsList($feedId, $bookmark = null, $pageSize = 25, &$responseCode, array &$responseHeaders);

    /**
     * Operation catalogsProductGroupsUpdate
     *
     * Update product group
     *
     * @param  \string $productGroupId  Unique identifier of a product group (required)
     * @param  \OpenAPI\Server\Model\CatalogsProductGroupUpdateRequest $catalogsProductGroupUpdateRequest  Request object used to Update a catalogs product group. (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsProductGroup
     */
    public function catalogsProductGroupsUpdate($productGroupId, CatalogsProductGroupUpdateRequest $catalogsProductGroupUpdateRequest, &$responseCode, array &$responseHeaders);

    /**
     * Operation feedProcessingResultsList
     *
     * List processing results for a given feed
     *
     * @param  \string $feedId  Unique identifier of a feed (required)
     * @param  \string $bookmark  Cursor used to fetch the next page of items (optional)
     * @param  \int $pageSize  Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \Paginated
     */
    public function feedProcessingResultsList($feedId, $bookmark = null, $pageSize = 25, &$responseCode, array &$responseHeaders);

    /**
     * Operation feedsCreate
     *
     * Create feed
     *
     * @param  \OpenAPI\Server\Model\CatalogsFeedsCreateRequest $catalogsFeedsCreateRequest  Request object used to created a feed. (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsFeed
     */
    public function feedsCreate(CatalogsFeedsCreateRequest $catalogsFeedsCreateRequest, &$responseCode, array &$responseHeaders);

    /**
     * Operation feedsDelete
     *
     * Delete feed
     *
     * @param  \string $feedId  Unique identifier of a feed (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     */
    public function feedsDelete($feedId, &$responseCode, array &$responseHeaders);

    /**
     * Operation feedsGet
     *
     * Get feed
     *
     * @param  \string $feedId  Unique identifier of a feed (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsFeed
     */
    public function feedsGet($feedId, &$responseCode, array &$responseHeaders);

    /**
     * Operation feedsList
     *
     * List feeds
     *
     * @param  \string $bookmark  Cursor used to fetch the next page of items (optional)
     * @param  \int $pageSize  Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \Paginated
     */
    public function feedsList($bookmark = null, $pageSize = 25, &$responseCode, array &$responseHeaders);

    /**
     * Operation feedsUpdate
     *
     * Update feed
     *
     * @param  \string $feedId  Unique identifier of a feed (required)
     * @param  \OpenAPI\Server\Model\CatalogsFeedsUpdateRequest $catalogsFeedsUpdateRequest  Request object used to update a feed. (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsFeed
     */
    public function feedsUpdate($feedId, CatalogsFeedsUpdateRequest $catalogsFeedsUpdateRequest, &$responseCode, array &$responseHeaders);

    /**
     * Operation itemsBatchGet
     *
     * Get catalogs items batch
     *
     * @param  \string $batchId  Id of a catalogs items batch to fetch (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsItemsBatch
     */
    public function itemsBatchGet($batchId, &$responseCode, array &$responseHeaders);

    /**
     * Operation itemsBatchPost
     *
     * Perform an operation on an item batch
     *
     * @param  \OpenAPI\Server\Model\CatalogsItemsBatchRequest $catalogsItemsBatchRequest  Request object used to create catalogs items in a batch (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsItemsBatch
     */
    public function itemsBatchPost(CatalogsItemsBatchRequest $catalogsItemsBatchRequest, &$responseCode, array &$responseHeaders);

    /**
     * Operation itemsGet
     *
     * Get catalogs items
     *
     * @param  \string $country  Country for the Catalogs Items (required)
     * @param  \string[] $itemIds  Catalos Item ids (required)
     * @param  \string $language  Language for the Catalogs Items (required)
     * @param  \int $responseCode     The HTTP response code to return
     * @param  \array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return \OpenAPI\Server\Model\CatalogsItems
     */
    public function itemsGet($country, array $itemIds, $language, &$responseCode, array &$responseHeaders);
}
