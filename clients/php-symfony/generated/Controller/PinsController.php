<?php

/**
 * PinsController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\PinsApiInterface;
use OpenAPI\Server\Model\Date;
use OpenAPI\Server\Model\Error;
use OpenAPI\Server\Model\Pin;
use OpenAPI\Server\Model\PinAnalyticsMetricsResponse;
use OpenAPI\Server\Model\PinCreate;
use OpenAPI\Server\Model\PinUpdate;
use OpenAPI\Server\Model\PinsAnalyticsMetricTypesParameterInner;
use OpenAPI\Server\Model\PinsList200Response;
use OpenAPI\Server\Model\PinsSaveRequest;

/**
 * PinsController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class PinsController extends Controller
{

    /**
     * Operation pinsAnalytics
     *
     * Get Pin analytics
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsAnalyticsAction(Request $request, $pinId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $startDate = $request->query->get('startDate');
        $endDate = $request->query->get('endDate');
        $appTypes = $request->query->get('appTypes', 'ALL');
        $metricTypes = $request->query->get('metricTypes');
        $splitField = $request->query->get('splitField', 'NO_SPLIT');
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $pinId = $this->deserialize($pinId, 'string', 'string');
            $startDate = $this->deserialize($startDate, '\DateTime', 'string');
            $endDate = $this->deserialize($endDate, '\DateTime', 'string');
            $metricTypes = $this->deserialize($metricTypes, 'array<csv,OpenAPI\Server\Model\PinsAnalyticsMetricTypesParameterInner>', 'string');
            $appTypes = $this->deserialize($appTypes, 'string', 'string');
            $splitField = $this->deserialize($splitField, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Date();
        $response = $this->validate($startDate, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Date();
        $response = $this->validate($endDate, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PinsAnalyticsMetricTypesParameterInner"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($metricTypes, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "ALL", "MOBILE", "TABLET", "WEB" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($appTypes, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "NO_SPLIT", "APP_TYPE" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($splitField, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pinsAnalytics($pinId, $startDate, $endDate, $metricTypes, $appTypes, $splitField, $adAccountId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'response';
                    break;
                case 400:
                    $message = 'Invalid pins analytics parameters.';
                    break;
                case 403:
                    $message = 'Not authorized to access board or Pin.';
                    break;
                case 404:
                    $message = 'Pin not found.';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pinsCreate
     *
     * Create Pin
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsCreateAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $pinCreate = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentType());
            $pinCreate = $this->deserialize($pinCreate, 'OpenAPI\Server\Model\PinCreate', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PinCreate");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($pinCreate, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pinsCreate($pinCreate, $adAccountId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'Successful pin creation.';
                    break;
                case 400:
                    $message = 'Invalid Pin parameters response';
                    break;
                case 403:
                    $message = 'The Pin&#39;s image is too small, too large or is broken';
                    break;
                case 404:
                    $message = 'Board or section not found';
                    break;
                case 429:
                    $message = 'This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pinsDelete
     *
     * Delete Pin
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsDeleteAction(Request $request, $pinId)
    {
        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $pinId = $this->deserialize($pinId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->pinsDelete($pinId, $adAccountId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'Successfully deleted Pin';
                    break;
                case 403:
                    $message = 'Not authorized to access board or Pin.';
                    break;
                case 404:
                    $message = 'Pin not found.';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pinsGet
     *
     * Get Pin
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsGetAction(Request $request, $pinId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $pinMetrics = $request->query->get('pinMetrics', false);
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $pinId = $this->deserialize($pinId, 'string', 'string');
            $pinMetrics = $this->deserialize($pinMetrics, 'bool', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($pinMetrics, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pinsGet($pinId, $pinMetrics, $adAccountId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'response';
                    break;
                case 403:
                    $message = 'Not authorized to access board or Pin.';
                    break;
                case 404:
                    $message = 'Pin not found.';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pinsList
     *
     * List Pins
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsListAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $pinFilter = $request->query->get('pinFilter');
        $includeProtectedPins = $request->query->get('includeProtectedPins', false);
        $pinType = $request->query->get('pinType');
        $creativeTypes = $request->query->get('creativeTypes');
        $adAccountId = $request->query->get('adAccountId');
        $pinMetrics = $request->query->get('pinMetrics', false);

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $pinFilter = $this->deserialize($pinFilter, 'string', 'string');
            $includeProtectedPins = $this->deserialize($includeProtectedPins, 'bool', 'string');
            $pinType = $this->deserialize($pinType, 'string', 'string');
            $creativeTypes = $this->deserialize($creativeTypes, 'array<multi,string>', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
            $pinMetrics = $this->deserialize($pinMetrics, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "exclude_native", "exclude_repins", "has_been_promoted" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinFilter, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($includeProtectedPins, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "PRIVATE" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Choice([ "REGULAR", "VIDEO", "SHOPPING", "CAROUSEL", "MAX_VIDEO", "SHOP_THE_PIN", "COLLECTION", "IDEA" ])
        ]);
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($creativeTypes, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($pinMetrics, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pinsList($bookmark, $pageSize, $pinFilter, $includeProtectedPins, $pinType, $creativeTypes, $adAccountId, $pinMetrics, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Success';
                    break;
                case 400:
                    $message = 'Invalid pin filter value';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pinsSave
     *
     * Save Pin
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsSaveAction(Request $request, $pinId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $pinsSaveRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $pinId = $this->deserialize($pinId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $pinsSaveRequest = $this->deserialize($pinsSaveRequest, 'OpenAPI\Server\Model\PinsSaveRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PinsSaveRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($pinsSaveRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pinsSave($pinId, $pinsSaveRequest, $adAccountId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'Successfully saved pin.';
                    break;
                case 403:
                    $message = 'Not authorized to access Board or Pin.';
                    break;
                case 404:
                    $message = 'Board or Pin not found.';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation pinsUpdate
     *
     * Update Pin
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function pinsUpdateAction(Request $request, $pinId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $pinUpdate = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $pinId = $this->deserialize($pinId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $pinUpdate = $this->deserialize($pinUpdate, 'OpenAPI\Server\Model\PinUpdate', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pinId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\PinUpdate");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($pinUpdate, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->pinsUpdate($pinId, $pinUpdate, $adAccountId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Unexpected error';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'response';
                    break;
                case 403:
                    $message = 'Not authorized to update Pin.';
                    break;
                case 404:
                    $message = 'Pin not found.';
                    break;
                case 429:
                    $message = 'This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits or if multiple write operations are applied to an object within a short time window.';
                    break;
                case 0:
                    $message = 'Unexpected error';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return PinsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('pins');
    }
}
