<?php
/**
 * CatalogsApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * CatalogsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\CatalogsApiInterface
 */
class CatalogsApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for catalogsList
     *
     * List catalogs.
     *
     */
    public function testCatalogsList(): void
    {
        $client = self::$client;

        $path = '/catalogs';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for catalogsList not implemented');
    }

    /**
     * Test case for catalogsProductGroupPinsList
     *
     * List products for a Product Group.
     *
     */
    public function testCatalogsProductGroupPinsList(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups/{product_group_id}/products';
        $pattern = '{productGroupId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for catalogsProductGroupPinsList not implemented');
    }

    /**
     * Test case for catalogsProductGroupsCreate
     *
     * Create product group.
     *
     */
    public function testCatalogsProductGroupsCreate(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for catalogsProductGroupsCreate not implemented');
    }

    /**
     * Test case for catalogsProductGroupsDelete
     *
     * Delete product group.
     *
     */
    public function testCatalogsProductGroupsDelete(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups/{product_group_id}';
        $pattern = '{productGroupId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for catalogsProductGroupsDelete not implemented');
    }

    /**
     * Test case for catalogsProductGroupsGet
     *
     * Get product group.
     *
     */
    public function testCatalogsProductGroupsGet(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups/{product_group_id}';
        $pattern = '{productGroupId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for catalogsProductGroupsGet not implemented');
    }

    /**
     * Test case for catalogsProductGroupsList
     *
     * List product groups.
     *
     */
    public function testCatalogsProductGroupsList(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for catalogsProductGroupsList not implemented');
    }

    /**
     * Test case for catalogsProductGroupsProductCountsGet
     *
     * Get product counts for a Product Group.
     *
     */
    public function testCatalogsProductGroupsProductCountsGet(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups/{product_group_id}/product_counts';
        $pattern = '{productGroupId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for catalogsProductGroupsProductCountsGet not implemented');
    }

    /**
     * Test case for catalogsProductGroupsUpdate
     *
     * Update product group.
     *
     */
    public function testCatalogsProductGroupsUpdate(): void
    {
        $client = self::$client;

        $path = '/catalogs/product_groups/{product_group_id}';
        $pattern = '{productGroupId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for catalogsProductGroupsUpdate not implemented');
    }

    /**
     * Test case for feedProcessingResultsList
     *
     * List processing results for a given feed.
     *
     */
    public function testFeedProcessingResultsList(): void
    {
        $client = self::$client;

        $path = '/catalogs/feeds/{feed_id}/processing_results';
        $pattern = '{feedId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for feedProcessingResultsList not implemented');
    }

    /**
     * Test case for feedsCreate
     *
     * Create feed.
     *
     */
    public function testFeedsCreate(): void
    {
        $client = self::$client;

        $path = '/catalogs/feeds';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for feedsCreate not implemented');
    }

    /**
     * Test case for feedsDelete
     *
     * Delete feed.
     *
     */
    public function testFeedsDelete(): void
    {
        $client = self::$client;

        $path = '/catalogs/feeds/{feed_id}';
        $pattern = '{feedId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for feedsDelete not implemented');
    }

    /**
     * Test case for feedsGet
     *
     * Get feed.
     *
     */
    public function testFeedsGet(): void
    {
        $client = self::$client;

        $path = '/catalogs/feeds/{feed_id}';
        $pattern = '{feedId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for feedsGet not implemented');
    }

    /**
     * Test case for feedsList
     *
     * List feeds.
     *
     */
    public function testFeedsList(): void
    {
        $client = self::$client;

        $path = '/catalogs/feeds';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for feedsList not implemented');
    }

    /**
     * Test case for feedsUpdate
     *
     * Update feed.
     *
     */
    public function testFeedsUpdate(): void
    {
        $client = self::$client;

        $path = '/catalogs/feeds/{feed_id}';
        $pattern = '{feedId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for feedsUpdate not implemented');
    }

    /**
     * Test case for itemsBatchGet
     *
     * Get catalogs item batch status.
     *
     */
    public function testItemsBatchGet(): void
    {
        $client = self::$client;

        $path = '/catalogs/items/batch/{batch_id}';
        $pattern = '{batchId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for itemsBatchGet not implemented');
    }

    /**
     * Test case for itemsBatchPost
     *
     * Operate on item batch.
     *
     */
    public function testItemsBatchPost(): void
    {
        $client = self::$client;

        $path = '/catalogs/items/batch';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for itemsBatchPost not implemented');
    }

    /**
     * Test case for itemsGet
     *
     * Get catalogs items.
     *
     */
    public function testItemsGet(): void
    {
        $client = self::$client;

        $path = '/catalogs/items';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for itemsGet not implemented');
    }

    /**
     * Test case for itemsIssuesList
     *
     * List item issues for a given processing result.
     *
     */
    public function testItemsIssuesList(): void
    {
        $client = self::$client;

        $path = '/catalogs/processing_results/{processing_result_id}/item_issues';
        $pattern = '{processingResultId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for itemsIssuesList not implemented');
    }

    /**
     * Test case for productsByProductGroupFilterList
     *
     * List filtered products.
     *
     */
    public function testProductsByProductGroupFilterList(): void
    {
        $client = self::$client;

        $path = '/catalogs/products/get_by_product_group_filters';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for productsByProductGroupFilterList not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
