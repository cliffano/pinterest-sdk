<?php
/**
 * AdAccountsApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * AdAccountsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class AdAccountsApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for adAccountAnalytics
     *
     * Get ad account analytics.
     *
     */
    public function testAdAccountAnalytics()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/analytics';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for adAccountsList
     *
     * List ad accounts.
     *
     */
    public function testAdAccountsList()
    {
        $client = static::createClient();

        $path = '/ad_accounts';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for adGroupsAnalytics
     *
     * Get ad group analytics.
     *
     */
    public function testAdGroupsAnalytics()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/ad_groups/analytics';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for adGroupsList
     *
     * List ad groups.
     *
     */
    public function testAdGroupsList()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/ad_groups';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for adsAnalytics
     *
     * Get ad analytics.
     *
     */
    public function testAdsAnalytics()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/ads/analytics';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for adsList
     *
     * List ads.
     *
     */
    public function testAdsList()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/ads';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for analyticsCreateReport
     *
     * Create async request for an account analytics report.
     *
     */
    public function testAnalyticsCreateReport()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/reports';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for analyticsGetReport
     *
     * Get the account analytics report created by the async call.
     *
     */
    public function testAnalyticsGetReport()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/reports';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for campaignsAnalytics
     *
     * Get campaign analytics.
     *
     */
    public function testCampaignsAnalytics()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/campaigns/analytics';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for campaignsList
     *
     * List campaigns.
     *
     */
    public function testCampaignsList()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/campaigns';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for productGroupsAnalytics
     *
     * Get product group analytics.
     *
     */
    public function testProductGroupsAnalytics()
    {
        $client = static::createClient();

        $path = '/ad_accounts/{ad_account_id}/product_groups/analytics';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
