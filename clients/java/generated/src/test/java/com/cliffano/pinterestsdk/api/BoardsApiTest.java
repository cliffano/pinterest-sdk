/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cliffano.pinterestsdk.api;

import com.cliffano.pinterestsdk.ApiException;
import com.cliffano.pinterestsdk.model.Board;
import com.cliffano.pinterestsdk.model.BoardSection;
import com.cliffano.pinterestsdk.model.BoardUpdate;
import com.cliffano.pinterestsdk.model.Error;
import com.cliffano.pinterestsdk.model.Paginated;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BoardsApi
 */
@Ignore
public class BoardsApiTest {

    private final BoardsApi api = new BoardsApi();

    
    /**
     * Create board section
     *
     * Create a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardSectionsCreateTest() throws ApiException {
        String boardId = null;
        BoardSection boardSection = null;
                BoardSection response = api.boardSectionsCreate(boardId, boardSection);
        // TODO: test validations
    }
    
    /**
     * Delete board section
     *
     * Delete a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardSectionsDeleteTest() throws ApiException {
        String boardId = null;
        String sectionId = null;
                api.boardSectionsDelete(boardId, sectionId);
        // TODO: test validations
    }
    
    /**
     * List board sections
     *
     * Get a list of all board sections from a board owned by the \&quot;operation user_account\&quot; - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardSectionsListTest() throws ApiException {
        String boardId = null;
        String bookmark = null;
        Integer pageSize = null;
                Paginated response = api.boardSectionsList(boardId, bookmark, pageSize);
        // TODO: test validations
    }
    
    /**
     * List Pins on board section
     *
     * Get a list of the Pins on a board section of a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardSectionsListPinsTest() throws ApiException {
        String boardId = null;
        String sectionId = null;
        String bookmark = null;
        Integer pageSize = null;
                Paginated response = api.boardSectionsListPins(boardId, sectionId, bookmark, pageSize);
        // TODO: test validations
    }
    
    /**
     * Update board section
     *
     * Update a board section on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardSectionsUpdateTest() throws ApiException {
        String boardId = null;
        String sectionId = null;
        BoardSection boardSection = null;
                BoardSection response = api.boardSectionsUpdate(boardId, sectionId, boardSection);
        // TODO: test validations
    }
    
    /**
     * Create board
     *
     * Create a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardsCreateTest() throws ApiException {
        Board board = null;
                Board response = api.boardsCreate(board);
        // TODO: test validations
    }
    
    /**
     * Delete board
     *
     * Delete a board owned by the \&quot;operation user_account\&quot;. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardsDeleteTest() throws ApiException {
        String boardId = null;
                api.boardsDelete(boardId);
        // TODO: test validations
    }
    
    /**
     * Get board
     *
     * Get a board owned by the operation user_account - or a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardsGetTest() throws ApiException {
        String boardId = null;
                Board response = api.boardsGet(boardId);
        // TODO: test validations
    }
    
    /**
     * List boards
     *
     * Get a list of the boards owned by the \&quot;operation user_account\&quot; + group boards where this account is a collaborator  Optional: Specify a privacy type (public, protected, or secret) to indicate which boards to return. - If no privacy is specified, all boards that can be returned (based on the scopes of the token and ad_account role if applicable) will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardsListTest() throws ApiException {
        String bookmark = null;
        Integer pageSize = null;
        String privacy = null;
                Paginated response = api.boardsList(bookmark, pageSize, privacy);
        // TODO: test validations
    }
    
    /**
     * List Pins on board
     *
     * Get a list of the Pins on a board owned by the \&quot;operation user_account\&quot; - or on a group board that has been shared with this account. - By default, the \&quot;operation user_account\&quot; is the token user_account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardsListPinsTest() throws ApiException {
        String boardId = null;
        String bookmark = null;
        Integer pageSize = null;
                Paginated response = api.boardsListPins(boardId, bookmark, pageSize);
        // TODO: test validations
    }
    
    /**
     * Update board
     *
     * Update a board owned by the \&quot;operating user_account\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void boardsUpdateTest() throws ApiException {
        String boardId = null;
        BoardUpdate boardUpdate = null;
                Board response = api.boardsUpdate(boardId, boardUpdate);
        // TODO: test validations
    }
    
}
