/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cliffano.pinterestsdk.api;

import com.cliffano.pinterestsdk.ApiCallback;
import com.cliffano.pinterestsdk.ApiClient;
import com.cliffano.pinterestsdk.ApiException;
import com.cliffano.pinterestsdk.ApiResponse;
import com.cliffano.pinterestsdk.Configuration;
import com.cliffano.pinterestsdk.Pair;
import com.cliffano.pinterestsdk.ProgressRequestBody;
import com.cliffano.pinterestsdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cliffano.pinterestsdk.model.CatalogsFeed;
import com.cliffano.pinterestsdk.model.CatalogsFeedsCreateRequest;
import com.cliffano.pinterestsdk.model.CatalogsFeedsUpdateRequest;
import com.cliffano.pinterestsdk.model.CatalogsItems;
import com.cliffano.pinterestsdk.model.CatalogsItemsBatch;
import com.cliffano.pinterestsdk.model.CatalogsItemsBatchRequest;
import com.cliffano.pinterestsdk.model.CatalogsProductGroup;
import com.cliffano.pinterestsdk.model.CatalogsProductGroupCreateRequest;
import com.cliffano.pinterestsdk.model.CatalogsProductGroupUpdateRequest;
import com.cliffano.pinterestsdk.model.Error;
import com.cliffano.pinterestsdk.model.Paginated;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for catalogsProductGroupsCreate
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsCreateCall(CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogsProductGroupCreateRequest;

        // create path and map variables
        String localVarPath = "/catalogs/product_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogsProductGroupsCreateValidateBeforeCall(CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogsProductGroupCreateRequest' is set
        if (catalogsProductGroupCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogsProductGroupCreateRequest' when calling catalogsProductGroupsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = catalogsProductGroupsCreateCall(catalogsProductGroupCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public Object catalogsProductGroupsCreate(CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = catalogsProductGroupsCreateWithHttpInfo(catalogsProductGroupCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> catalogsProductGroupsCreateWithHttpInfo(CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogsProductGroupsCreateValidateBeforeCall(catalogsProductGroupCreateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create product group (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.
     * @param catalogsProductGroupCreateRequest Request object used to created a catalogs product group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsCreateAsync(CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogsProductGroupsCreateValidateBeforeCall(catalogsProductGroupCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogsProductGroupsDelete
     * @param productGroupId Unique identifier of a product group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalogs Product Group deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid catalogs product group id parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete this catalogs product group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsDeleteCall(String productGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/product_groups/{product_group_id}"
            .replaceAll("\\{" + "product_group_id" + "\\}", localVarApiClient.escapeString(productGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogsProductGroupsDeleteValidateBeforeCall(String productGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productGroupId' is set
        if (productGroupId == null) {
            throw new ApiException("Missing the required parameter 'productGroupId' when calling catalogsProductGroupsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = catalogsProductGroupsDeleteCall(productGroupId, _callback);
        return localVarCall;

    }

    /**
     * Delete product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
     * @param productGroupId Unique identifier of a product group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalogs Product Group deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid catalogs product group id parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete this catalogs product group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public void catalogsProductGroupsDelete(String productGroupId) throws ApiException {
        catalogsProductGroupsDeleteWithHttpInfo(productGroupId);
    }

    /**
     * Delete product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
     * @param productGroupId Unique identifier of a product group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalogs Product Group deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid catalogs product group id parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete this catalogs product group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogsProductGroupsDeleteWithHttpInfo(String productGroupId) throws ApiException {
        okhttp3.Call localVarCall = catalogsProductGroupsDeleteValidateBeforeCall(productGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete product group (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.
     * @param productGroupId Unique identifier of a product group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Catalogs Product Group deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid catalogs product group id parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete this catalogs product group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsDeleteAsync(String productGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogsProductGroupsDeleteValidateBeforeCall(productGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogsProductGroupsList
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsListCall(String feedId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/product_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (feedId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_id", feedId));
        }

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogsProductGroupsListValidateBeforeCall(String feedId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling catalogsProductGroupsList(Async)");
        }
        

        okhttp3.Call localVarCall = catalogsProductGroupsListCall(feedId, bookmark, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get product groups list
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public Paginated catalogsProductGroupsList(String feedId, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<Paginated> localVarResp = catalogsProductGroupsListWithHttpInfo(feedId, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get product groups list
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;Paginated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Paginated> catalogsProductGroupsListWithHttpInfo(String feedId, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = catalogsProductGroupsListValidateBeforeCall(feedId, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<Paginated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product groups list (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t create this catalogs product group with this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsListAsync(String feedId, String bookmark, Integer pageSize, final ApiCallback<Paginated> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogsProductGroupsListValidateBeforeCall(feedId, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Paginated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogsProductGroupsUpdate
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t update this catalogs product group to this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsUpdateCall(String productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogsProductGroupUpdateRequest;

        // create path and map variables
        String localVarPath = "/catalogs/product_groups/{product_group_id}"
            .replaceAll("\\{" + "product_group_id" + "\\}", localVarApiClient.escapeString(productGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogsProductGroupsUpdateValidateBeforeCall(String productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productGroupId' is set
        if (productGroupId == null) {
            throw new ApiException("Missing the required parameter 'productGroupId' when calling catalogsProductGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'catalogsProductGroupUpdateRequest' is set
        if (catalogsProductGroupUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogsProductGroupUpdateRequest' when calling catalogsProductGroupsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = catalogsProductGroupsUpdateCall(productGroupId, catalogsProductGroupUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group. (required)
     * @return CatalogsProductGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t update this catalogs product group to this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsProductGroup catalogsProductGroupsUpdate(String productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest) throws ApiException {
        ApiResponse<CatalogsProductGroup> localVarResp = catalogsProductGroupsUpdateWithHttpInfo(productGroupId, catalogsProductGroupUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update product group
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group. (required)
     * @return ApiResponse&lt;CatalogsProductGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t update this catalogs product group to this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsProductGroup> catalogsProductGroupsUpdateWithHttpInfo(String productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogsProductGroupsUpdateValidateBeforeCall(productGroupId, catalogsProductGroupUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CatalogsProductGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update product group (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.
     * @param productGroupId Unique identifier of a product group (required)
     * @param catalogsProductGroupUpdateRequest Request object used to Update a catalogs product group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs product group not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t update this catalogs product group to this value. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogsProductGroupsUpdateAsync(String productGroupId, CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest, final ApiCallback<CatalogsProductGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogsProductGroupsUpdateValidateBeforeCall(productGroupId, catalogsProductGroupUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CatalogsProductGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedProcessingResultsList
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedProcessingResultsListCall(String feedId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/feeds/{feed_id}/processing_results"
            .replaceAll("\\{" + "feed_id" + "\\}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedProcessingResultsListValidateBeforeCall(String feedId, String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling feedProcessingResultsList(Async)");
        }
        

        okhttp3.Call localVarCall = feedProcessingResultsListCall(feedId, bookmark, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List processing results for a given feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public Paginated feedProcessingResultsList(String feedId, String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<Paginated> localVarResp = feedProcessingResultsListWithHttpInfo(feedId, bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * List processing results for a given feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;Paginated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Paginated> feedProcessingResultsListWithHttpInfo(String feedId, String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = feedProcessingResultsListValidateBeforeCall(feedId, bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<Paginated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List processing results for a given feed (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.
     * @param feedId Unique identifier of a feed (required)
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedProcessingResultsListAsync(String feedId, String bookmark, Integer pageSize, final ApiCallback<Paginated> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedProcessingResultsListValidateBeforeCall(feedId, bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Paginated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedsCreate
     * @param catalogsFeedsCreateRequest Request object used to created a feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Business account required. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User website required. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unique feed name is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsCreateCall(CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogsFeedsCreateRequest;

        // create path and map variables
        String localVarPath = "/catalogs/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedsCreateValidateBeforeCall(CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogsFeedsCreateRequest' is set
        if (catalogsFeedsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogsFeedsCreateRequest' when calling feedsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = feedsCreateCall(catalogsFeedsCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
     * @param catalogsFeedsCreateRequest Request object used to created a feed. (required)
     * @return CatalogsFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Business account required. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User website required. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unique feed name is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsFeed feedsCreate(CatalogsFeedsCreateRequest catalogsFeedsCreateRequest) throws ApiException {
        ApiResponse<CatalogsFeed> localVarResp = feedsCreateWithHttpInfo(catalogsFeedsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
     * @param catalogsFeedsCreateRequest Request object used to created a feed. (required)
     * @return ApiResponse&lt;CatalogsFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Business account required. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User website required. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unique feed name is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsFeed> feedsCreateWithHttpInfo(CatalogsFeedsCreateRequest catalogsFeedsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = feedsCreateValidateBeforeCall(catalogsFeedsCreateRequest, null);
        Type localVarReturnType = new TypeToken<CatalogsFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create feed (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.
     * @param catalogsFeedsCreateRequest Request object used to created a feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Business account required. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User website required. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unique feed name is required. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsCreateAsync(CatalogsFeedsCreateRequest catalogsFeedsCreateRequest, final ApiCallback<CatalogsFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedsCreateValidateBeforeCall(catalogsFeedsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CatalogsFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedsDelete
     * @param feedId Unique identifier of a feed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Feed deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete a feed with active promotions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsDeleteCall(String feedId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/feeds/{feed_id}"
            .replaceAll("\\{" + "feed_id" + "\\}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedsDeleteValidateBeforeCall(String feedId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling feedsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = feedsDeleteCall(feedId, _callback);
        return localVarCall;

    }

    /**
     * Delete feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Feed deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete a feed with active promotions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void feedsDelete(String feedId) throws ApiException {
        feedsDeleteWithHttpInfo(feedId);
    }

    /**
     * Delete feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Feed deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete a feed with active promotions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> feedsDeleteWithHttpInfo(String feedId) throws ApiException {
        okhttp3.Call localVarCall = feedsDeleteValidateBeforeCall(feedId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete feed (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Feed deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Can&#39;t delete a feed with active promotions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsDeleteAsync(String feedId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedsDeleteValidateBeforeCall(feedId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedsGet
     * @param feedId Unique identifier of a feed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsGetCall(String feedId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/feeds/{feed_id}"
            .replaceAll("\\{" + "feed_id" + "\\}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedsGetValidateBeforeCall(String feedId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling feedsGet(Async)");
        }
        

        okhttp3.Call localVarCall = feedsGetCall(feedId, _callback);
        return localVarCall;

    }

    /**
     * Get feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @return CatalogsFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsFeed feedsGet(String feedId) throws ApiException {
        ApiResponse<CatalogsFeed> localVarResp = feedsGetWithHttpInfo(feedId);
        return localVarResp.getData();
    }

    /**
     * Get feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @return ApiResponse&lt;CatalogsFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsFeed> feedsGetWithHttpInfo(String feedId) throws ApiException {
        okhttp3.Call localVarCall = feedsGetValidateBeforeCall(feedId, null);
        Type localVarReturnType = new TypeToken<CatalogsFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get feed (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsGetAsync(String feedId, final ApiCallback<CatalogsFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedsGetValidateBeforeCall(feedId, _callback);
        Type localVarReturnType = new TypeToken<CatalogsFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedsList
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsListCall(String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bookmark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bookmark", bookmark));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedsListValidateBeforeCall(String bookmark, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = feedsListCall(bookmark, pageSize, _callback);
        return localVarCall;

    }

    /**
     * List feeds
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return Paginated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public Paginated feedsList(String bookmark, Integer pageSize) throws ApiException {
        ApiResponse<Paginated> localVarResp = feedsListWithHttpInfo(bookmark, pageSize);
        return localVarResp.getData();
    }

    /**
     * List feeds
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return ApiResponse&lt;Paginated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Paginated> feedsListWithHttpInfo(String bookmark, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = feedsListValidateBeforeCall(bookmark, pageSize, null);
        Type localVarReturnType = new TypeToken<Paginated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List feeds (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized access. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsListAsync(String bookmark, Integer pageSize, final ApiCallback<Paginated> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedsListValidateBeforeCall(bookmark, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Paginated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedsUpdate
     * @param feedId Unique identifier of a feed (required)
     * @param catalogsFeedsUpdateRequest Request object used to update a feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsUpdateCall(String feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogsFeedsUpdateRequest;

        // create path and map variables
        String localVarPath = "/catalogs/feeds/{feed_id}"
            .replaceAll("\\{" + "feed_id" + "\\}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedsUpdateValidateBeforeCall(String feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling feedsUpdate(Async)");
        }
        
        // verify the required parameter 'catalogsFeedsUpdateRequest' is set
        if (catalogsFeedsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogsFeedsUpdateRequest' when calling feedsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = feedsUpdateCall(feedId, catalogsFeedsUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @param catalogsFeedsUpdateRequest Request object used to update a feed. (required)
     * @return CatalogsFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsFeed feedsUpdate(String feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest) throws ApiException {
        ApiResponse<CatalogsFeed> localVarResp = feedsUpdateWithHttpInfo(feedId, catalogsFeedsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update feed
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @param catalogsFeedsUpdateRequest Request object used to update a feed. (required)
     * @return ApiResponse&lt;CatalogsFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsFeed> feedsUpdateWithHttpInfo(String feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = feedsUpdateValidateBeforeCall(feedId, catalogsFeedsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CatalogsFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update feed (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.
     * @param feedId Unique identifier of a feed (required)
     * @param catalogsFeedsUpdateRequest Request object used to update a feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid feed parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Account not approved for feed mutations yet. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data feed not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedsUpdateAsync(String feedId, CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest, final ApiCallback<CatalogsFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedsUpdateValidateBeforeCall(feedId, catalogsFeedsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CatalogsFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemsBatchGet
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs items batch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemsBatchGetCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/items/batch/{batch_id}"
            .replaceAll("\\{" + "batch_id" + "\\}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemsBatchGetValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling itemsBatchGet(Async)");
        }
        

        okhttp3.Call localVarCall = itemsBatchGetCall(batchId, _callback);
        return localVarCall;

    }

    /**
     * Get catalogs items batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @return CatalogsItemsBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs items batch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsItemsBatch itemsBatchGet(String batchId) throws ApiException {
        ApiResponse<CatalogsItemsBatch> localVarResp = itemsBatchGetWithHttpInfo(batchId);
        return localVarResp.getData();
    }

    /**
     * Get catalogs items batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @return ApiResponse&lt;CatalogsItemsBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs items batch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsItemsBatch> itemsBatchGetWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = itemsBatchGetValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<CatalogsItemsBatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get catalogs items batch (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.
     * @param batchId Id of a catalogs items batch to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalogs items batch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemsBatchGetAsync(String batchId, final ApiCallback<CatalogsItemsBatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemsBatchGetValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<CatalogsItemsBatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemsBatchPost
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemsBatchPostCall(CatalogsItemsBatchRequest catalogsItemsBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogsItemsBatchRequest;

        // create path and map variables
        String localVarPath = "/catalogs/items/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemsBatchPostValidateBeforeCall(CatalogsItemsBatchRequest catalogsItemsBatchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catalogsItemsBatchRequest' is set
        if (catalogsItemsBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogsItemsBatchRequest' when calling itemsBatchPost(Async)");
        }
        

        okhttp3.Call localVarCall = itemsBatchPostCall(catalogsItemsBatchRequest, _callback);
        return localVarCall;

    }

    /**
     * Perform an operation on an item batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch (required)
     * @return CatalogsItemsBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsItemsBatch itemsBatchPost(CatalogsItemsBatchRequest catalogsItemsBatchRequest) throws ApiException {
        ApiResponse<CatalogsItemsBatch> localVarResp = itemsBatchPostWithHttpInfo(catalogsItemsBatchRequest);
        return localVarResp.getData();
    }

    /**
     * Perform an operation on an item batch
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch (required)
     * @return ApiResponse&lt;CatalogsItemsBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsItemsBatch> itemsBatchPostWithHttpInfo(CatalogsItemsBatchRequest catalogsItemsBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = itemsBatchPostValidateBeforeCall(catalogsItemsBatchRequest, null);
        Type localVarReturnType = new TypeToken<CatalogsItemsBatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform an operation on an item batch (asynchronously)
     * &lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.
     * @param catalogsItemsBatchRequest Request object used to create catalogs items in a batch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items batch </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to post catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemsBatchPostAsync(CatalogsItemsBatchRequest catalogsItemsBatchRequest, final ApiCallback<CatalogsItemsBatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemsBatchPostValidateBeforeCall(catalogsItemsBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<CatalogsItemsBatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemsGet
     * @param country Country for the Catalogs Items (required)
     * @param itemIds Catalos Item ids (required)
     * @param language Language for the Catalogs Items (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemsGetCall(String country, List<String> itemIds, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalogs/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (itemIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "item_ids", itemIds));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "pinterest_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemsGetValidateBeforeCall(String country, List<String> itemIds, String language, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling itemsGet(Async)");
        }
        
        // verify the required parameter 'itemIds' is set
        if (itemIds == null) {
            throw new ApiException("Missing the required parameter 'itemIds' when calling itemsGet(Async)");
        }
        
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling itemsGet(Async)");
        }
        

        okhttp3.Call localVarCall = itemsGetCall(country, itemIds, language, _callback);
        return localVarCall;

    }

    /**
     * Get catalogs items
     * Get the items of the catalog created by the \&quot;operating user_account\&quot;
     * @param country Country for the Catalogs Items (required)
     * @param itemIds Catalos Item ids (required)
     * @param language Language for the Catalogs Items (required)
     * @return CatalogsItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CatalogsItems itemsGet(String country, List<String> itemIds, String language) throws ApiException {
        ApiResponse<CatalogsItems> localVarResp = itemsGetWithHttpInfo(country, itemIds, language);
        return localVarResp.getData();
    }

    /**
     * Get catalogs items
     * Get the items of the catalog created by the \&quot;operating user_account\&quot;
     * @param country Country for the Catalogs Items (required)
     * @param itemIds Catalos Item ids (required)
     * @param language Language for the Catalogs Items (required)
     * @return ApiResponse&lt;CatalogsItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogsItems> itemsGetWithHttpInfo(String country, List<String> itemIds, String language) throws ApiException {
        okhttp3.Call localVarCall = itemsGetValidateBeforeCall(country, itemIds, language, null);
        Type localVarReturnType = new TypeToken<CatalogsItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get catalogs items (asynchronously)
     * Get the items of the catalog created by the \&quot;operating user_account\&quot;
     * @param country Country for the Catalogs Items (required)
     * @param itemIds Catalos Item ids (required)
     * @param language Language for the Catalogs Items (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response containing the requested catalogs items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to access catalogs items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemsGetAsync(String country, List<String> itemIds, String language, final ApiCallback<CatalogsItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemsGetValidateBeforeCall(country, itemIds, language, _callback);
        Type localVarReturnType = new TypeToken<CatalogsItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
