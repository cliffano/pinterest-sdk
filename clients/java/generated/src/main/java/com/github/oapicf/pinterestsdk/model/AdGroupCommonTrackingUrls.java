/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.pinterestsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.pinterestsdk.JSON;

/**
 * Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T23:01:05.225954683Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AdGroupCommonTrackingUrls {
  public static final String SERIALIZED_NAME_IMPRESSION = "impression";
  @SerializedName(SERIALIZED_NAME_IMPRESSION)
  private List<String> impression;

  public static final String SERIALIZED_NAME_CLICK = "click";
  @SerializedName(SERIALIZED_NAME_CLICK)
  private List<String> click;

  public static final String SERIALIZED_NAME_ENGAGEMENT = "engagement";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT)
  private List<String> engagement;

  public static final String SERIALIZED_NAME_BUYABLE_BUTTON = "buyable_button";
  @SerializedName(SERIALIZED_NAME_BUYABLE_BUTTON)
  private List<String> buyableButton;

  public static final String SERIALIZED_NAME_AUDIENCE_VERIFICATION = "audience_verification";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_VERIFICATION)
  private List<String> audienceVerification;

  public AdGroupCommonTrackingUrls() {
  }

  public AdGroupCommonTrackingUrls impression(List<String> impression) {
    this.impression = impression;
    return this;
  }

  public AdGroupCommonTrackingUrls addImpressionItem(String impressionItem) {
    if (this.impression == null) {
      this.impression = new ArrayList<>();
    }
    this.impression.add(impressionItem);
    return this;
  }

   /**
   * Get impression
   * @return impression
  **/
  @javax.annotation.Nullable
  public List<String> getImpression() {
    return impression;
  }

  public void setImpression(List<String> impression) {
    this.impression = impression;
  }


  public AdGroupCommonTrackingUrls click(List<String> click) {
    this.click = click;
    return this;
  }

  public AdGroupCommonTrackingUrls addClickItem(String clickItem) {
    if (this.click == null) {
      this.click = new ArrayList<>();
    }
    this.click.add(clickItem);
    return this;
  }

   /**
   * Get click
   * @return click
  **/
  @javax.annotation.Nullable
  public List<String> getClick() {
    return click;
  }

  public void setClick(List<String> click) {
    this.click = click;
  }


  public AdGroupCommonTrackingUrls engagement(List<String> engagement) {
    this.engagement = engagement;
    return this;
  }

  public AdGroupCommonTrackingUrls addEngagementItem(String engagementItem) {
    if (this.engagement == null) {
      this.engagement = new ArrayList<>();
    }
    this.engagement.add(engagementItem);
    return this;
  }

   /**
   * Get engagement
   * @return engagement
  **/
  @javax.annotation.Nullable
  public List<String> getEngagement() {
    return engagement;
  }

  public void setEngagement(List<String> engagement) {
    this.engagement = engagement;
  }


  public AdGroupCommonTrackingUrls buyableButton(List<String> buyableButton) {
    this.buyableButton = buyableButton;
    return this;
  }

  public AdGroupCommonTrackingUrls addBuyableButtonItem(String buyableButtonItem) {
    if (this.buyableButton == null) {
      this.buyableButton = new ArrayList<>();
    }
    this.buyableButton.add(buyableButtonItem);
    return this;
  }

   /**
   * Get buyableButton
   * @return buyableButton
  **/
  @javax.annotation.Nullable
  public List<String> getBuyableButton() {
    return buyableButton;
  }

  public void setBuyableButton(List<String> buyableButton) {
    this.buyableButton = buyableButton;
  }


  public AdGroupCommonTrackingUrls audienceVerification(List<String> audienceVerification) {
    this.audienceVerification = audienceVerification;
    return this;
  }

  public AdGroupCommonTrackingUrls addAudienceVerificationItem(String audienceVerificationItem) {
    if (this.audienceVerification == null) {
      this.audienceVerification = new ArrayList<>();
    }
    this.audienceVerification.add(audienceVerificationItem);
    return this;
  }

   /**
   * Get audienceVerification
   * @return audienceVerification
  **/
  @javax.annotation.Nullable
  public List<String> getAudienceVerification() {
    return audienceVerification;
  }

  public void setAudienceVerification(List<String> audienceVerification) {
    this.audienceVerification = audienceVerification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdGroupCommonTrackingUrls adGroupCommonTrackingUrls = (AdGroupCommonTrackingUrls) o;
    return Objects.equals(this.impression, adGroupCommonTrackingUrls.impression) &&
        Objects.equals(this.click, adGroupCommonTrackingUrls.click) &&
        Objects.equals(this.engagement, adGroupCommonTrackingUrls.engagement) &&
        Objects.equals(this.buyableButton, adGroupCommonTrackingUrls.buyableButton) &&
        Objects.equals(this.audienceVerification, adGroupCommonTrackingUrls.audienceVerification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(impression, click, engagement, buyableButton, audienceVerification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdGroupCommonTrackingUrls {\n");
    sb.append("    impression: ").append(toIndentedString(impression)).append("\n");
    sb.append("    click: ").append(toIndentedString(click)).append("\n");
    sb.append("    engagement: ").append(toIndentedString(engagement)).append("\n");
    sb.append("    buyableButton: ").append(toIndentedString(buyableButton)).append("\n");
    sb.append("    audienceVerification: ").append(toIndentedString(audienceVerification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("impression");
    openapiFields.add("click");
    openapiFields.add("engagement");
    openapiFields.add("buyable_button");
    openapiFields.add("audience_verification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AdGroupCommonTrackingUrls
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdGroupCommonTrackingUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdGroupCommonTrackingUrls is not found in the empty JSON string", AdGroupCommonTrackingUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdGroupCommonTrackingUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdGroupCommonTrackingUrls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("impression") != null && !jsonObj.get("impression").isJsonNull() && !jsonObj.get("impression").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impression` to be an array in the JSON string but got `%s`", jsonObj.get("impression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("click") != null && !jsonObj.get("click").isJsonNull() && !jsonObj.get("click").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `click` to be an array in the JSON string but got `%s`", jsonObj.get("click").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("engagement") != null && !jsonObj.get("engagement").isJsonNull() && !jsonObj.get("engagement").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagement` to be an array in the JSON string but got `%s`", jsonObj.get("engagement").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("buyable_button") != null && !jsonObj.get("buyable_button").isJsonNull() && !jsonObj.get("buyable_button").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyable_button` to be an array in the JSON string but got `%s`", jsonObj.get("buyable_button").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audience_verification") != null && !jsonObj.get("audience_verification").isJsonNull() && !jsonObj.get("audience_verification").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience_verification` to be an array in the JSON string but got `%s`", jsonObj.get("audience_verification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdGroupCommonTrackingUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdGroupCommonTrackingUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdGroupCommonTrackingUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdGroupCommonTrackingUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<AdGroupCommonTrackingUrls>() {
           @Override
           public void write(JsonWriter out, AdGroupCommonTrackingUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdGroupCommonTrackingUrls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdGroupCommonTrackingUrls given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdGroupCommonTrackingUrls
  * @throws IOException if the JSON string is invalid with respect to AdGroupCommonTrackingUrls
  */
  public static AdGroupCommonTrackingUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdGroupCommonTrackingUrls.class);
  }

 /**
  * Convert an instance of AdGroupCommonTrackingUrls to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

