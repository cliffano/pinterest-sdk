/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIUserAccountApi
{
public:
	OpenAPIUserAccountApi();
	~OpenAPIUserAccountApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class UserAccountAnalyticsRequest;
	class UserAccountAnalyticsResponse;
	class UserAccountAnalyticsTopPinsRequest;
	class UserAccountAnalyticsTopPinsResponse;
	class UserAccountAnalyticsTopVideoPinsRequest;
	class UserAccountAnalyticsTopVideoPinsResponse;
	class UserAccountGetRequest;
	class UserAccountGetResponse;
	
    DECLARE_DELEGATE_OneParam(FUserAccountAnalyticsDelegate, const UserAccountAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FUserAccountAnalyticsTopPinsDelegate, const UserAccountAnalyticsTopPinsResponse&);
    DECLARE_DELEGATE_OneParam(FUserAccountAnalyticsTopVideoPinsDelegate, const UserAccountAnalyticsTopVideoPinsResponse&);
    DECLARE_DELEGATE_OneParam(FUserAccountGetDelegate, const UserAccountGetResponse&);
    
    FHttpRequestPtr UserAccountAnalytics(const UserAccountAnalyticsRequest& Request, const FUserAccountAnalyticsDelegate& Delegate = FUserAccountAnalyticsDelegate()) const;
    FHttpRequestPtr UserAccountAnalyticsTopPins(const UserAccountAnalyticsTopPinsRequest& Request, const FUserAccountAnalyticsTopPinsDelegate& Delegate = FUserAccountAnalyticsTopPinsDelegate()) const;
    FHttpRequestPtr UserAccountAnalyticsTopVideoPins(const UserAccountAnalyticsTopVideoPinsRequest& Request, const FUserAccountAnalyticsTopVideoPinsDelegate& Delegate = FUserAccountAnalyticsTopVideoPinsDelegate()) const;
    FHttpRequestPtr UserAccountGet(const UserAccountGetRequest& Request, const FUserAccountGetDelegate& Delegate = FUserAccountGetDelegate()) const;
    
private:
    void OnUserAccountAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUserAccountAnalyticsDelegate Delegate) const;
    void OnUserAccountAnalyticsTopPinsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUserAccountAnalyticsTopPinsDelegate Delegate) const;
    void OnUserAccountAnalyticsTopVideoPinsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUserAccountAnalyticsTopVideoPinsDelegate Delegate) const;
    void OnUserAccountGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUserAccountGetDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
