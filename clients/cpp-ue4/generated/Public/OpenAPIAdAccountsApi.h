/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIAdAccountsApi
{
public:
	OpenAPIAdAccountsApi();
	~OpenAPIAdAccountsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AdAccountTargetingAnalyticsGetRequest;
	class AdAccountTargetingAnalyticsGetResponse;
	class AdAccountAnalyticsRequest;
	class AdAccountAnalyticsResponse;
	class AdAccountsCreateRequest;
	class AdAccountsCreateResponse;
	class AdAccountsGetRequest;
	class AdAccountsGetResponse;
	class AdAccountsListRequest;
	class AdAccountsListResponse;
	class AnalyticsCreateReportRequest;
	class AnalyticsCreateReportResponse;
	class AnalyticsGetReportRequest;
	class AnalyticsGetReportResponse;
	
    DECLARE_DELEGATE_OneParam(FAdAccountTargetingAnalyticsGetDelegate, const AdAccountTargetingAnalyticsGetResponse&);
    DECLARE_DELEGATE_OneParam(FAdAccountAnalyticsDelegate, const AdAccountAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FAdAccountsCreateDelegate, const AdAccountsCreateResponse&);
    DECLARE_DELEGATE_OneParam(FAdAccountsGetDelegate, const AdAccountsGetResponse&);
    DECLARE_DELEGATE_OneParam(FAdAccountsListDelegate, const AdAccountsListResponse&);
    DECLARE_DELEGATE_OneParam(FAnalyticsCreateReportDelegate, const AnalyticsCreateReportResponse&);
    DECLARE_DELEGATE_OneParam(FAnalyticsGetReportDelegate, const AnalyticsGetReportResponse&);
    
    FHttpRequestPtr AdAccountTargetingAnalyticsGet(const AdAccountTargetingAnalyticsGetRequest& Request, const FAdAccountTargetingAnalyticsGetDelegate& Delegate = FAdAccountTargetingAnalyticsGetDelegate()) const;
    FHttpRequestPtr AdAccountAnalytics(const AdAccountAnalyticsRequest& Request, const FAdAccountAnalyticsDelegate& Delegate = FAdAccountAnalyticsDelegate()) const;
    FHttpRequestPtr AdAccountsCreate(const AdAccountsCreateRequest& Request, const FAdAccountsCreateDelegate& Delegate = FAdAccountsCreateDelegate()) const;
    FHttpRequestPtr AdAccountsGet(const AdAccountsGetRequest& Request, const FAdAccountsGetDelegate& Delegate = FAdAccountsGetDelegate()) const;
    FHttpRequestPtr AdAccountsList(const AdAccountsListRequest& Request, const FAdAccountsListDelegate& Delegate = FAdAccountsListDelegate()) const;
    FHttpRequestPtr AnalyticsCreateReport(const AnalyticsCreateReportRequest& Request, const FAnalyticsCreateReportDelegate& Delegate = FAnalyticsCreateReportDelegate()) const;
    FHttpRequestPtr AnalyticsGetReport(const AnalyticsGetReportRequest& Request, const FAnalyticsGetReportDelegate& Delegate = FAnalyticsGetReportDelegate()) const;
    
private:
    void OnAdAccountTargetingAnalyticsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountTargetingAnalyticsGetDelegate Delegate) const;
    void OnAdAccountAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountAnalyticsDelegate Delegate) const;
    void OnAdAccountsCreateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountsCreateDelegate Delegate) const;
    void OnAdAccountsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountsGetDelegate Delegate) const;
    void OnAdAccountsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountsListDelegate Delegate) const;
    void OnAnalyticsCreateReportResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAnalyticsCreateReportDelegate Delegate) const;
    void OnAnalyticsGetReportResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAnalyticsGetReportDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
