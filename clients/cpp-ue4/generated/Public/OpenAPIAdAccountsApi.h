/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIAdAccountsApi
{
public:
	OpenAPIAdAccountsApi();
	~OpenAPIAdAccountsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AdAccountAnalyticsRequest;
	class AdAccountAnalyticsResponse;
	class AdAccountsListRequest;
	class AdAccountsListResponse;
	class AdGroupsAnalyticsRequest;
	class AdGroupsAnalyticsResponse;
	class AdGroupsListRequest;
	class AdGroupsListResponse;
	class AdsAnalyticsRequest;
	class AdsAnalyticsResponse;
	class AdsListRequest;
	class AdsListResponse;
	class AnalyticsCreateReportRequest;
	class AnalyticsCreateReportResponse;
	class AnalyticsGetReportRequest;
	class AnalyticsGetReportResponse;
	class CampaignsAnalyticsRequest;
	class CampaignsAnalyticsResponse;
	class CampaignsListRequest;
	class CampaignsListResponse;
	class ProductGroupsAnalyticsRequest;
	class ProductGroupsAnalyticsResponse;
	
    DECLARE_DELEGATE_OneParam(FAdAccountAnalyticsDelegate, const AdAccountAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FAdAccountsListDelegate, const AdAccountsListResponse&);
    DECLARE_DELEGATE_OneParam(FAdGroupsAnalyticsDelegate, const AdGroupsAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FAdGroupsListDelegate, const AdGroupsListResponse&);
    DECLARE_DELEGATE_OneParam(FAdsAnalyticsDelegate, const AdsAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FAdsListDelegate, const AdsListResponse&);
    DECLARE_DELEGATE_OneParam(FAnalyticsCreateReportDelegate, const AnalyticsCreateReportResponse&);
    DECLARE_DELEGATE_OneParam(FAnalyticsGetReportDelegate, const AnalyticsGetReportResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsAnalyticsDelegate, const CampaignsAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FCampaignsListDelegate, const CampaignsListResponse&);
    DECLARE_DELEGATE_OneParam(FProductGroupsAnalyticsDelegate, const ProductGroupsAnalyticsResponse&);
    
    FHttpRequestPtr AdAccountAnalytics(const AdAccountAnalyticsRequest& Request, const FAdAccountAnalyticsDelegate& Delegate = FAdAccountAnalyticsDelegate()) const;
    FHttpRequestPtr AdAccountsList(const AdAccountsListRequest& Request, const FAdAccountsListDelegate& Delegate = FAdAccountsListDelegate()) const;
    FHttpRequestPtr AdGroupsAnalytics(const AdGroupsAnalyticsRequest& Request, const FAdGroupsAnalyticsDelegate& Delegate = FAdGroupsAnalyticsDelegate()) const;
    FHttpRequestPtr AdGroupsList(const AdGroupsListRequest& Request, const FAdGroupsListDelegate& Delegate = FAdGroupsListDelegate()) const;
    FHttpRequestPtr AdsAnalytics(const AdsAnalyticsRequest& Request, const FAdsAnalyticsDelegate& Delegate = FAdsAnalyticsDelegate()) const;
    FHttpRequestPtr AdsList(const AdsListRequest& Request, const FAdsListDelegate& Delegate = FAdsListDelegate()) const;
    FHttpRequestPtr AnalyticsCreateReport(const AnalyticsCreateReportRequest& Request, const FAnalyticsCreateReportDelegate& Delegate = FAnalyticsCreateReportDelegate()) const;
    FHttpRequestPtr AnalyticsGetReport(const AnalyticsGetReportRequest& Request, const FAnalyticsGetReportDelegate& Delegate = FAnalyticsGetReportDelegate()) const;
    FHttpRequestPtr CampaignsAnalytics(const CampaignsAnalyticsRequest& Request, const FCampaignsAnalyticsDelegate& Delegate = FCampaignsAnalyticsDelegate()) const;
    FHttpRequestPtr CampaignsList(const CampaignsListRequest& Request, const FCampaignsListDelegate& Delegate = FCampaignsListDelegate()) const;
    FHttpRequestPtr ProductGroupsAnalytics(const ProductGroupsAnalyticsRequest& Request, const FProductGroupsAnalyticsDelegate& Delegate = FProductGroupsAnalyticsDelegate()) const;
    
private:
    void OnAdAccountAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountAnalyticsDelegate Delegate) const;
    void OnAdAccountsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdAccountsListDelegate Delegate) const;
    void OnAdGroupsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdGroupsAnalyticsDelegate Delegate) const;
    void OnAdGroupsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdGroupsListDelegate Delegate) const;
    void OnAdsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdsAnalyticsDelegate Delegate) const;
    void OnAdsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAdsListDelegate Delegate) const;
    void OnAnalyticsCreateReportResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAnalyticsCreateReportDelegate Delegate) const;
    void OnAnalyticsGetReportResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAnalyticsGetReportDelegate Delegate) const;
    void OnCampaignsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsAnalyticsDelegate Delegate) const;
    void OnCampaignsListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCampaignsListDelegate Delegate) const;
    void OnProductGroupsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FProductGroupsAnalyticsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
