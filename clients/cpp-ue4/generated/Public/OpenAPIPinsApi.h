/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIPinsApi
{
public:
	OpenAPIPinsApi();
	~OpenAPIPinsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class PinsAnalyticsRequest;
	class PinsAnalyticsResponse;
	class PinsCreateRequest;
	class PinsCreateResponse;
	class PinsDeleteRequest;
	class PinsDeleteResponse;
	class PinsGetRequest;
	class PinsGetResponse;
	
    DECLARE_DELEGATE_OneParam(FPinsAnalyticsDelegate, const PinsAnalyticsResponse&);
    DECLARE_DELEGATE_OneParam(FPinsCreateDelegate, const PinsCreateResponse&);
    DECLARE_DELEGATE_OneParam(FPinsDeleteDelegate, const PinsDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FPinsGetDelegate, const PinsGetResponse&);
    
    FHttpRequestPtr PinsAnalytics(const PinsAnalyticsRequest& Request, const FPinsAnalyticsDelegate& Delegate = FPinsAnalyticsDelegate()) const;
    FHttpRequestPtr PinsCreate(const PinsCreateRequest& Request, const FPinsCreateDelegate& Delegate = FPinsCreateDelegate()) const;
    FHttpRequestPtr PinsDelete(const PinsDeleteRequest& Request, const FPinsDeleteDelegate& Delegate = FPinsDeleteDelegate()) const;
    FHttpRequestPtr PinsGet(const PinsGetRequest& Request, const FPinsGetDelegate& Delegate = FPinsGetDelegate()) const;
    
private:
    void OnPinsAnalyticsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPinsAnalyticsDelegate Delegate) const;
    void OnPinsCreateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPinsCreateDelegate Delegate) const;
    void OnPinsDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPinsDeleteDelegate Delegate) const;
    void OnPinsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPinsGetDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
