/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIUserAccountApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum::Other:
		return TEXT("OTHER");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum::Claimed:
		return TEXT("CLAIMED");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum::Both:
		return TEXT("BOTH");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum> StringToEnum = { 
		{ TEXT("OTHER"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum::Other },
		{ TEXT("CLAIMED"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum::Claimed },
		{ TEXT("BOTH"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum::Both }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::FromClaimedContentEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::All:
		return TEXT("ALL");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::Product:
		return TEXT("PRODUCT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::Regular:
		return TEXT("REGULAR");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::Video:
		return TEXT("VIDEO");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::All },
		{ TEXT("PRODUCT"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::Product },
		{ TEXT("REGULAR"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::Regular },
		{ TEXT("VIDEO"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum::Video }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::PinFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::All:
		return TEXT("ALL");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::Mobile:
		return TEXT("MOBILE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::Tablet:
		return TEXT("TABLET");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::Web:
		return TEXT("WEB");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::All },
		{ TEXT("MOBILE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::Mobile },
		{ TEXT("TABLET"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::Tablet },
		{ TEXT("WEB"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum::Web }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::AppTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::Engagement:
		return TEXT("ENGAGEMENT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::EngagementRate:
		return TEXT("ENGAGEMENT_RATE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::Impression:
		return TEXT("IMPRESSION");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::OutboundClick:
		return TEXT("OUTBOUND_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::OutboundClickRate:
		return TEXT("OUTBOUND_CLICK_RATE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::PinClick:
		return TEXT("PIN_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::PinClickRate:
		return TEXT("PIN_CLICK_RATE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::Save:
		return TEXT("SAVE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::SaveRate:
		return TEXT("SAVE_RATE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum> StringToEnum = { 
		{ TEXT("ENGAGEMENT"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::Engagement },
		{ TEXT("ENGAGEMENT_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::EngagementRate },
		{ TEXT("IMPRESSION"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::Impression },
		{ TEXT("OUTBOUND_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::OutboundClick },
		{ TEXT("OUTBOUND_CLICK_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::OutboundClickRate },
		{ TEXT("PIN_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::PinClick },
		{ TEXT("PIN_CLICK_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::PinClickRate },
		{ TEXT("SAVE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::Save },
		{ TEXT("SAVE_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum::SaveRate }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::MetricTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::NoSplit:
		return TEXT("NO_SPLIT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::AppType:
		return TEXT("APP_TYPE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::OwnedContent:
		return TEXT("OWNED_CONTENT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::PinFormat:
		return TEXT("PIN_FORMAT");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum> StringToEnum = { 
		{ TEXT("NO_SPLIT"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::NoSplit },
		{ TEXT("APP_TYPE"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::AppType },
		{ TEXT("OWNED_CONTENT"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::OwnedContent },
		{ TEXT("PIN_FORMAT"), OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum::PinFormat }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SplitFieldEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsRequest::ComputePath() const
{
	FString Path(TEXT("/user_account/analytics"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	if(FromClaimedContent.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_claimed_content=")) + ToUrlString(FromClaimedContent.GetValue()));
	}
	if(PinFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_format=")) + ToUrlString(PinFormat.GetValue()));
	}
	if(AppTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("app_types=")) + ToUrlString(AppTypes.GetValue()));
	}
	if(MetricTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("metric_types=")) + CollectionToUrlString_csv(MetricTypes.GetValue(), TEXT("metric_types")));
	}
	if(SplitField.IsSet())
	{
		QueryParams.Add(FString(TEXT("split_field=")) + ToUrlString(SplitField.GetValue()));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIUserAccountApi::UserAccountAnalyticsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIUserAccountApi::UserAccountAnalyticsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid user accounts analytics parameters."));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access the user account analytics."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::Engagement:
		return TEXT("ENGAGEMENT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::Impression:
		return TEXT("IMPRESSION");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::OutboundClick:
		return TEXT("OUTBOUND_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::PinClick:
		return TEXT("PIN_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::Save:
		return TEXT("SAVE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum> StringToEnum = { 
		{ TEXT("ENGAGEMENT"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::Engagement },
		{ TEXT("IMPRESSION"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::Impression },
		{ TEXT("OUTBOUND_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::OutboundClick },
		{ TEXT("PIN_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::PinClick },
		{ TEXT("SAVE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum::Save }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum::Other:
		return TEXT("OTHER");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum::Claimed:
		return TEXT("CLAIMED");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum::Both:
		return TEXT("BOTH");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum> StringToEnum = { 
		{ TEXT("OTHER"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum::Other },
		{ TEXT("CLAIMED"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum::Claimed },
		{ TEXT("BOTH"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum::Both }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::FromClaimedContentEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::All:
		return TEXT("ALL");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::Product:
		return TEXT("PRODUCT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::Regular:
		return TEXT("REGULAR");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::Video:
		return TEXT("VIDEO");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::All },
		{ TEXT("PRODUCT"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::Product },
		{ TEXT("REGULAR"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::Regular },
		{ TEXT("VIDEO"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum::Video }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::PinFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::All:
		return TEXT("ALL");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::Mobile:
		return TEXT("MOBILE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::Tablet:
		return TEXT("TABLET");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::Web:
		return TEXT("WEB");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::All },
		{ TEXT("MOBILE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::Mobile },
		{ TEXT("TABLET"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::Tablet },
		{ TEXT("WEB"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum::Web }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::AppTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::Engagement:
		return TEXT("ENGAGEMENT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::EngagementRate:
		return TEXT("ENGAGEMENT_RATE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::Impression:
		return TEXT("IMPRESSION");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::OutboundClick:
		return TEXT("OUTBOUND_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::OutboundClickRate:
		return TEXT("OUTBOUND_CLICK_RATE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::PinClick:
		return TEXT("PIN_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::PinClickRate:
		return TEXT("PIN_CLICK_RATE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::Save:
		return TEXT("SAVE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::SaveRate:
		return TEXT("SAVE_RATE");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum> StringToEnum = { 
		{ TEXT("ENGAGEMENT"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::Engagement },
		{ TEXT("ENGAGEMENT_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::EngagementRate },
		{ TEXT("IMPRESSION"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::Impression },
		{ TEXT("OUTBOUND_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::OutboundClick },
		{ TEXT("OUTBOUND_CLICK_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::OutboundClickRate },
		{ TEXT("PIN_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::PinClick },
		{ TEXT("PIN_CLICK_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::PinClickRate },
		{ TEXT("SAVE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::Save },
		{ TEXT("SAVE_RATE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum::SaveRate }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::MetricTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum::_30:
		return TEXT("30");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum> StringToEnum = { 
		{ TEXT("30"), OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum::_30 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::CreatedInLastNDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::ComputePath() const
{
	FString Path(TEXT("/user_account/analytics/top_pins"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy));
	if(FromClaimedContent.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_claimed_content=")) + ToUrlString(FromClaimedContent.GetValue()));
	}
	if(PinFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_format=")) + ToUrlString(PinFormat.GetValue()));
	}
	if(AppTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("app_types=")) + ToUrlString(AppTypes.GetValue()));
	}
	if(MetricTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("metric_types=")) + CollectionToUrlString_csv(MetricTypes.GetValue(), TEXT("metric_types")));
	}
	if(NumOfPins.IsSet())
	{
		QueryParams.Add(FString(TEXT("num_of_pins=")) + ToUrlString(NumOfPins.GetValue()));
	}
	if(CreatedInLastNDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("created_in_last_n_days=")) + ToUrlString(CreatedInLastNDays.GetValue()));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access the user account analytics."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopPinsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::Impression:
		return TEXT("IMPRESSION");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::Save:
		return TEXT("SAVE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::OutboundClick:
		return TEXT("OUTBOUND_CLICK");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VideoMrcView:
		return TEXT("VIDEO_MRC_VIEW");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VideoAvgWatchTime:
		return TEXT("VIDEO_AVG_WATCH_TIME");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VIDEOV50WATCHTIME:
		return TEXT("VIDEO_V50_WATCH_TIME");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::QUARTILE95PERCENTVIEW:
		return TEXT("QUARTILE_95_PERCENT_VIEW");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VIDEO10SVIEW:
		return TEXT("VIDEO_10S_VIEW");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VideoStart:
		return TEXT("VIDEO_START");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum> StringToEnum = { 
		{ TEXT("IMPRESSION"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::Impression },
		{ TEXT("SAVE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::Save },
		{ TEXT("OUTBOUND_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::OutboundClick },
		{ TEXT("VIDEO_MRC_VIEW"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VideoMrcView },
		{ TEXT("VIDEO_AVG_WATCH_TIME"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VideoAvgWatchTime },
		{ TEXT("VIDEO_V50_WATCH_TIME"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VIDEOV50WATCHTIME },
		{ TEXT("QUARTILE_95_PERCENT_VIEW"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::QUARTILE95PERCENTVIEW },
		{ TEXT("VIDEO_10S_VIEW"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VIDEO10SVIEW },
		{ TEXT("VIDEO_START"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum::VideoStart }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum::Other:
		return TEXT("OTHER");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum::Claimed:
		return TEXT("CLAIMED");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum::Both:
		return TEXT("BOTH");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum> StringToEnum = { 
		{ TEXT("OTHER"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum::Other },
		{ TEXT("CLAIMED"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum::Claimed },
		{ TEXT("BOTH"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum::Both }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::FromClaimedContentEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::All:
		return TEXT("ALL");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::Product:
		return TEXT("PRODUCT");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::Regular:
		return TEXT("REGULAR");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::Video:
		return TEXT("VIDEO");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::All },
		{ TEXT("PRODUCT"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::Product },
		{ TEXT("REGULAR"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::Regular },
		{ TEXT("VIDEO"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum::Video }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::PinFormatEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::All:
		return TEXT("ALL");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::Mobile:
		return TEXT("MOBILE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::Tablet:
		return TEXT("TABLET");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::Web:
		return TEXT("WEB");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum> StringToEnum = { 
		{ TEXT("ALL"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::All },
		{ TEXT("MOBILE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::Mobile },
		{ TEXT("TABLET"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::Tablet },
		{ TEXT("WEB"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum::Web }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::AppTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::Impression:
		return TEXT("IMPRESSION");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::Save:
		return TEXT("SAVE");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VideoMrcView:
		return TEXT("VIDEO_MRC_VIEW");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VideoAvgWatchTime:
		return TEXT("VIDEO_AVG_WATCH_TIME");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VIDEOV50WATCHTIME:
		return TEXT("VIDEO_V50_WATCH_TIME");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::QUARTILE95PERCENTVIEW:
		return TEXT("QUARTILE_95_PERCENT_VIEW");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VIDEO10SVIEW:
		return TEXT("VIDEO_10S_VIEW");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VideoStart:
		return TEXT("VIDEO_START");
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::OutboundClick:
		return TEXT("OUTBOUND_CLICK");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum> StringToEnum = { 
		{ TEXT("IMPRESSION"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::Impression },
		{ TEXT("SAVE"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::Save },
		{ TEXT("VIDEO_MRC_VIEW"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VideoMrcView },
		{ TEXT("VIDEO_AVG_WATCH_TIME"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VideoAvgWatchTime },
		{ TEXT("VIDEO_V50_WATCH_TIME"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VIDEOV50WATCHTIME },
		{ TEXT("QUARTILE_95_PERCENT_VIEW"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::QUARTILE95PERCENTVIEW },
		{ TEXT("VIDEO_10S_VIEW"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VIDEO10SVIEW },
		{ TEXT("VIDEO_START"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::VideoStart },
		{ TEXT("OUTBOUND_CLICK"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum::OutboundClick }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::MetricTypesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum::_30:
		return TEXT("30");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumToString(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& Value)
{
	static TMap<FString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum> StringToEnum = { 
		{ TEXT("30"), OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum::_30 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::EnumFromString(const FString& EnumAsString, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::CreatedInLastNDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::ComputePath() const
{
	FString Path(TEXT("/user_account/analytics/top_video_pins"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy));
	if(FromClaimedContent.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_claimed_content=")) + ToUrlString(FromClaimedContent.GetValue()));
	}
	if(PinFormat.IsSet())
	{
		QueryParams.Add(FString(TEXT("pin_format=")) + ToUrlString(PinFormat.GetValue()));
	}
	if(AppTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("app_types=")) + ToUrlString(AppTypes.GetValue()));
	}
	if(MetricTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("metric_types=")) + CollectionToUrlString_csv(MetricTypes.GetValue(), TEXT("metric_types")));
	}
	if(NumOfPins.IsSet())
	{
		QueryParams.Add(FString(TEXT("num_of_pins=")) + ToUrlString(NumOfPins.GetValue()));
	}
	if(CreatedInLastNDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("created_in_last_n_days=")) + ToUrlString(CreatedInLastNDays.GetValue()));
	}
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access the user account analytics."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIUserAccountApi::UserAccountAnalyticsTopVideoPinsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIUserAccountApi::UserAccountGetRequest::ComputePath() const
{
	FString Path(TEXT("/user_account"));
	TArray<FString> QueryParams;
	if(AdAccountId.IsSet())
	{
		QueryParams.Add(FString(TEXT("ad_account_id=")) + ToUrlString(AdAccountId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIUserAccountApi::UserAccountGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIUserAccountApi::UserAccountGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 403:
		SetResponseString(TEXT("Not authorized to access the user account."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPIUserAccountApi::UserAccountGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
