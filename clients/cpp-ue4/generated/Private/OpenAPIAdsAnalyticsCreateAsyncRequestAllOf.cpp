/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdsAnalyticsCreateAsyncRequestAllOf.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIAdsAnalyticsCreateAsyncRequestAllOf::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("start_date")); WriteJsonValue(Writer, StartDate);
	Writer->WriteIdentifierPrefix(TEXT("end_date")); WriteJsonValue(Writer, EndDate);
	Writer->WriteIdentifierPrefix(TEXT("granularity")); WriteJsonValue(Writer, Granularity);
	if (ClickWindowDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("click_window_days")); WriteJsonValue(Writer, ClickWindowDays.GetValue());
	}
	if (EngagementWindowDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("engagement_window_days")); WriteJsonValue(Writer, EngagementWindowDays.GetValue());
	}
	if (ViewWindowDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("view_window_days")); WriteJsonValue(Writer, ViewWindowDays.GetValue());
	}
	if (ConversionReportTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("conversion_report_time")); WriteJsonValue(Writer, ConversionReportTime.GetValue());
	}
	if (AttributionTypes.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("attribution_types")); WriteJsonValue(Writer, AttributionTypes.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAdsAnalyticsCreateAsyncRequestAllOf::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_date"), StartDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_date"), EndDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("granularity"), Granularity);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("click_window_days"), ClickWindowDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("engagement_window_days"), EngagementWindowDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("view_window_days"), ViewWindowDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("conversion_report_time"), ConversionReportTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("attribution_types"), AttributionTypes);

	return ParseSuccess;
}

}
