/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.4.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIProductGroupPromotion.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIProductGroupPromotion::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (AdGroupId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ad_group_id")); WriteJsonValue(Writer, AdGroupId.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (BidInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bid_in_micro_currency")); WriteJsonValue(Writer, BidInMicroCurrency.GetValue());
	}
	if (Included.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("included")); WriteJsonValue(Writer, Included.GetValue());
	}
	if (Definition.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("definition")); WriteJsonValue(Writer, Definition.GetValue());
	}
	if (RelativeDefinition.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("relative_definition")); WriteJsonValue(Writer, RelativeDefinition.GetValue());
	}
	if (ParentId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("parent_id")); WriteJsonValue(Writer, ParentId.GetValue());
	}
	if (SlideshowCollectionsTitle.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("slideshow_collections_title")); WriteJsonValue(Writer, SlideshowCollectionsTitle.GetValue());
	}
	if (SlideshowCollectionsDescription.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("slideshow_collections_description")); WriteJsonValue(Writer, SlideshowCollectionsDescription.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIProductGroupPromotion::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ad_group_id"), AdGroupId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bid_in_micro_currency"), BidInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("included"), Included);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("definition"), Definition);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("relative_definition"), RelativeDefinition);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("parent_id"), ParentId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("slideshow_collections_title"), SlideshowCollectionsTitle);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("slideshow_collections_description"), SlideshowCollectionsDescription);

	return ParseSuccess;
}

}
