/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsFeedValidationWarnings.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICatalogsFeedValidationWarnings::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (TitleLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("title_length_too_long")); WriteJsonValue(Writer, TitleLengthTooLong.GetValue());
	}
	if (DescriptionLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description_length_too_long")); WriteJsonValue(Writer, DescriptionLengthTooLong.GetValue());
	}
	if (GenderInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gender_invalid")); WriteJsonValue(Writer, GenderInvalid.GetValue());
	}
	if (AgeGroupInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("age_group_invalid")); WriteJsonValue(Writer, AgeGroupInvalid.GetValue());
	}
	if (SizeTypeInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("size_type_invalid")); WriteJsonValue(Writer, SizeTypeInvalid.GetValue());
	}
	if (LinkFormatWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("link_format_warning")); WriteJsonValue(Writer, LinkFormatWarning.GetValue());
	}
	if (DuplicateProducts.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("duplicate_products")); WriteJsonValue(Writer, DuplicateProducts.GetValue());
	}
	if (DuplicateLinks.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("duplicate_links")); WriteJsonValue(Writer, DuplicateLinks.GetValue());
	}
	if (SalesPriceInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sales_price_invalid")); WriteJsonValue(Writer, SalesPriceInvalid.GetValue());
	}
	if (ProductCategoryDepthWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_category_depth_warning")); WriteJsonValue(Writer, ProductCategoryDepthWarning.GetValue());
	}
	if (AdwordsSameAsLink.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("adwords_same_as_link")); WriteJsonValue(Writer, AdwordsSameAsLink.GetValue());
	}
	if (DuplicateHeaders.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("duplicate_headers")); WriteJsonValue(Writer, DuplicateHeaders.GetValue());
	}
	if (FetchSameSignature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fetch_same_signature")); WriteJsonValue(Writer, FetchSameSignature.GetValue());
	}
	if (AdwordsFormatWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("adwords_format_warning")); WriteJsonValue(Writer, AdwordsFormatWarning.GetValue());
	}
	if (AdditionalImageLinkWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("additional_image_link_warning")); WriteJsonValue(Writer, AdditionalImageLinkWarning.GetValue());
	}
	if (ImageLinkWarning.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("image_link_warning")); WriteJsonValue(Writer, ImageLinkWarning.GetValue());
	}
	if (ShippingInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipping_invalid")); WriteJsonValue(Writer, ShippingInvalid.GetValue());
	}
	if (TaxInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tax_invalid")); WriteJsonValue(Writer, TaxInvalid.GetValue());
	}
	if (ShippingWeightInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shipping_weight_invalid")); WriteJsonValue(Writer, ShippingWeightInvalid.GetValue());
	}
	if (ExpirationDateInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("expiration_date_invalid")); WriteJsonValue(Writer, ExpirationDateInvalid.GetValue());
	}
	if (AvailabilityDateInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("availability_date_invalid")); WriteJsonValue(Writer, AvailabilityDateInvalid.GetValue());
	}
	if (SaleDateInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sale_date_invalid")); WriteJsonValue(Writer, SaleDateInvalid.GetValue());
	}
	if (WeightUnitInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("weight_unit_invalid")); WriteJsonValue(Writer, WeightUnitInvalid.GetValue());
	}
	if (IsBundleInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_bundle_invalid")); WriteJsonValue(Writer, IsBundleInvalid.GetValue());
	}
	if (UpdatedTimeInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updated_time_invalid")); WriteJsonValue(Writer, UpdatedTimeInvalid.GetValue());
	}
	if (CustomLabelLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_label_length_too_long")); WriteJsonValue(Writer, CustomLabelLengthTooLong.GetValue());
	}
	if (ProductTypeLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_type_length_too_long")); WriteJsonValue(Writer, ProductTypeLengthTooLong.GetValue());
	}
	if (TooManyAdditionalImageLinks.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("too_many_additional_image_links")); WriteJsonValue(Writer, TooManyAdditionalImageLinks.GetValue());
	}
	if (MultipackInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("multipack_invalid")); WriteJsonValue(Writer, MultipackInvalid.GetValue());
	}
	if (IndexedProductCountLargeDelta.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("indexed_product_count_large_delta")); WriteJsonValue(Writer, IndexedProductCountLargeDelta.GetValue());
	}
	if (ItemAdditionalImageDownloadFailure.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("item_additional_image_download_failure")); WriteJsonValue(Writer, ItemAdditionalImageDownloadFailure.GetValue());
	}
	if (OptionalProductCategoryMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("optional_product_category_missing")); WriteJsonValue(Writer, OptionalProductCategoryMissing.GetValue());
	}
	if (OptionalProductCategoryInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("optional_product_category_invalid")); WriteJsonValue(Writer, OptionalProductCategoryInvalid.GetValue());
	}
	if (OptionalConditionMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("optional_condition_missing")); WriteJsonValue(Writer, OptionalConditionMissing.GetValue());
	}
	if (OptionalConditionInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("optional_condition_invalid")); WriteJsonValue(Writer, OptionalConditionInvalid.GetValue());
	}
	if (IosDeepLinkInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ios_deep_link_invalid")); WriteJsonValue(Writer, IosDeepLinkInvalid.GetValue());
	}
	if (AndroidDeepLinkInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("android_deep_link_invalid")); WriteJsonValue(Writer, AndroidDeepLinkInvalid.GetValue());
	}
	if (AvailabilityNormalized.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("availability_normalized")); WriteJsonValue(Writer, AvailabilityNormalized.GetValue());
	}
	if (ConditionNormalized.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("condition_normalized")); WriteJsonValue(Writer, ConditionNormalized.GetValue());
	}
	if (GenderNormalized.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("gender_normalized")); WriteJsonValue(Writer, GenderNormalized.GetValue());
	}
	if (SizeTypeNormalized.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("size_type_normalized")); WriteJsonValue(Writer, SizeTypeNormalized.GetValue());
	}
	if (AgeGroupNormalized.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("age_group_normalized")); WriteJsonValue(Writer, AgeGroupNormalized.GetValue());
	}
	if (UtmSourceAutoCorrected.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("utm_source_auto_corrected")); WriteJsonValue(Writer, UtmSourceAutoCorrected.GetValue());
	}
	if (CountryDoesNotMapToCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("country_does_not_map_to_currency")); WriteJsonValue(Writer, CountryDoesNotMapToCurrency.GetValue());
	}
	if (MinAdPriceInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("min_ad_price_invalid")); WriteJsonValue(Writer, MinAdPriceInvalid.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICatalogsFeedValidationWarnings::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("title_length_too_long"), TitleLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description_length_too_long"), DescriptionLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gender_invalid"), GenderInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("age_group_invalid"), AgeGroupInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("size_type_invalid"), SizeTypeInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("link_format_warning"), LinkFormatWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("duplicate_products"), DuplicateProducts);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("duplicate_links"), DuplicateLinks);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sales_price_invalid"), SalesPriceInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_category_depth_warning"), ProductCategoryDepthWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("adwords_same_as_link"), AdwordsSameAsLink);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("duplicate_headers"), DuplicateHeaders);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fetch_same_signature"), FetchSameSignature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("adwords_format_warning"), AdwordsFormatWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("additional_image_link_warning"), AdditionalImageLinkWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("image_link_warning"), ImageLinkWarning);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipping_invalid"), ShippingInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tax_invalid"), TaxInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shipping_weight_invalid"), ShippingWeightInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("expiration_date_invalid"), ExpirationDateInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("availability_date_invalid"), AvailabilityDateInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sale_date_invalid"), SaleDateInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("weight_unit_invalid"), WeightUnitInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_bundle_invalid"), IsBundleInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_time_invalid"), UpdatedTimeInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_label_length_too_long"), CustomLabelLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_type_length_too_long"), ProductTypeLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("too_many_additional_image_links"), TooManyAdditionalImageLinks);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("multipack_invalid"), MultipackInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("indexed_product_count_large_delta"), IndexedProductCountLargeDelta);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("item_additional_image_download_failure"), ItemAdditionalImageDownloadFailure);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("optional_product_category_missing"), OptionalProductCategoryMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("optional_product_category_invalid"), OptionalProductCategoryInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("optional_condition_missing"), OptionalConditionMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("optional_condition_invalid"), OptionalConditionInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ios_deep_link_invalid"), IosDeepLinkInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("android_deep_link_invalid"), AndroidDeepLinkInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("availability_normalized"), AvailabilityNormalized);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("condition_normalized"), ConditionNormalized);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("gender_normalized"), GenderNormalized);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("size_type_normalized"), SizeTypeNormalized);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("age_group_normalized"), AgeGroupNormalized);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("utm_source_auto_corrected"), UtmSourceAutoCorrected);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("country_does_not_map_to_currency"), CountryDoesNotMapToCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("min_ad_price_invalid"), MinAdPriceInvalid);

	return ParseSuccess;
}

}
