/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICampaignsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdvertiserId:
		return TEXT("ADVERTISER_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PinPromotionId:
		return TEXT("PIN_PROMOTION_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdAccountId:
		return TEXT("AD_ACCOUNT_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdGroupEntityStatus:
		return TEXT("AD_GROUP_ENTITY_STATUS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdGroupId:
		return TEXT("AD_GROUP_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdId:
		return TEXT("AD_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignDailySpendCap:
		return TEXT("CAMPAIGN_DAILY_SPEND_CAP");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignEntityStatus:
		return TEXT("CAMPAIGN_ENTITY_STATUS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignId:
		return TEXT("CAMPAIGN_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignLifetimeSpendCap:
		return TEXT("CAMPAIGN_LIFETIME_SPEND_CAP");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignName:
		return TEXT("CAMPAIGN_NAME");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CheckoutRoas:
		return TEXT("CHECKOUT_ROAS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CLICKTHROUGH1:
		return TEXT("CLICKTHROUGH_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CLICKTHROUGH1GROSS:
		return TEXT("CLICKTHROUGH_1_GROSS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CLICKTHROUGH2:
		return TEXT("CLICKTHROUGH_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CpcInMicroDollar:
		return TEXT("CPC_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CpmInDollar:
		return TEXT("CPM_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CpmInMicroDollar:
		return TEXT("CPM_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::Ctr:
		return TEXT("CTR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CTR2:
		return TEXT("CTR_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpcvInDollar:
		return TEXT("ECPCV_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::ECPCVP95INDOLLAR:
		return TEXT("ECPCV_P95_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpcInDollar:
		return TEXT("ECPC_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpcInMicroDollar:
		return TEXT("ECPC_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpeInDollar:
		return TEXT("ECPE_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpmInMicroDollar:
		return TEXT("ECPM_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpvInDollar:
		return TEXT("ECPV_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::Ectr:
		return TEXT("ECTR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EengagementRate:
		return TEXT("EENGAGEMENT_RATE");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::ENGAGEMENT1:
		return TEXT("ENGAGEMENT_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::ENGAGEMENT2:
		return TEXT("ENGAGEMENT_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EngagementRate:
		return TEXT("ENGAGEMENT_RATE");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT1:
		return TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT2:
		return TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IMPRESSION1:
		return TEXT("IMPRESSION_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IMPRESSION1GROSS:
		return TEXT("IMPRESSION_1_GROSS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IMPRESSION2:
		return TEXT("IMPRESSION_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::InappCheckoutCostPerAction:
		return TEXT("INAPP_CHECKOUT_COST_PER_ACTION");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::OUTBOUNDCLICK1:
		return TEXT("OUTBOUND_CLICK_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::OUTBOUNDCLICK2:
		return TEXT("OUTBOUND_CLICK_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PageVisitCostPerAction:
		return TEXT("PAGE_VISIT_COST_PER_ACTION");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PageVisitRoas:
		return TEXT("PAGE_VISIT_ROAS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PaidImpression:
		return TEXT("PAID_IMPRESSION");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PinId:
		return TEXT("PIN_ID");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::REPIN1:
		return TEXT("REPIN_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::REPIN2:
		return TEXT("REPIN_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::RepinRate:
		return TEXT("REPIN_RATE");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::SpendInDollar:
		return TEXT("SPEND_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::SpendInMicroDollar:
		return TEXT("SPEND_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalCheckout:
		return TEXT("TOTAL_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalCheckoutValueInMicroDollar:
		return TEXT("TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickthrough:
		return TEXT("TOTAL_CLICKTHROUGH");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickAddToCart:
		return TEXT("TOTAL_CLICK_ADD_TO_CART");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickCheckout:
		return TEXT("TOTAL_CLICK_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickCheckoutValueInMicroDollar:
		return TEXT("TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickLead:
		return TEXT("TOTAL_CLICK_LEAD");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickSignup:
		return TEXT("TOTAL_CLICK_SIGNUP");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickSignupValueInMicroDollar:
		return TEXT("TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalConversions:
		return TEXT("TOTAL_CONVERSIONS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalCustom:
		return TEXT("TOTAL_CUSTOM");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagement:
		return TEXT("TOTAL_ENGAGEMENT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementCheckout:
		return TEXT("TOTAL_ENGAGEMENT_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementCheckoutValueInMicroDollar:
		return TEXT("TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementLead:
		return TEXT("TOTAL_ENGAGEMENT_LEAD");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementSignup:
		return TEXT("TOTAL_ENGAGEMENT_SIGNUP");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementSignupValueInMicroDollar:
		return TEXT("TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalIdeaPinProductTagVisit:
		return TEXT("TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalImpressionFrequency:
		return TEXT("TOTAL_IMPRESSION_FREQUENCY");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalImpressionUser:
		return TEXT("TOTAL_IMPRESSION_USER");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalLead:
		return TEXT("TOTAL_LEAD");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalOfflineCheckout:
		return TEXT("TOTAL_OFFLINE_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalPageVisit:
		return TEXT("TOTAL_PAGE_VISIT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalRepinRate:
		return TEXT("TOTAL_REPIN_RATE");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalSignup:
		return TEXT("TOTAL_SIGNUP");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalSignupValueInMicroDollar:
		return TEXT("TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEO3SECVIEWS:
		return TEXT("TOTAL_VIDEO_3SEC_VIEWS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalVideoAvgWatchtimeInSecond:
		return TEXT("TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalVideoMrcViews:
		return TEXT("TOTAL_VIDEO_MRC_VIEWS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP0COMBINED:
		return TEXT("TOTAL_VIDEO_P0_COMBINED");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP100COMPLETE:
		return TEXT("TOTAL_VIDEO_P100_COMPLETE");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP25COMBINED:
		return TEXT("TOTAL_VIDEO_P25_COMBINED");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP50COMBINED:
		return TEXT("TOTAL_VIDEO_P50_COMBINED");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP75COMBINED:
		return TEXT("TOTAL_VIDEO_P75_COMBINED");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP95COMBINED:
		return TEXT("TOTAL_VIDEO_P95_COMBINED");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewAddToCart:
		return TEXT("TOTAL_VIEW_ADD_TO_CART");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewCheckout:
		return TEXT("TOTAL_VIEW_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewCheckoutValueInMicroDollar:
		return TEXT("TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewLead:
		return TEXT("TOTAL_VIEW_LEAD");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewSignup:
		return TEXT("TOTAL_VIEW_SIGNUP");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewSignupValueInMicroDollar:
		return TEXT("TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebCheckout:
		return TEXT("TOTAL_WEB_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebClickCheckout:
		return TEXT("TOTAL_WEB_CLICK_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebClickCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebEngagementCheckout:
		return TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebEngagementCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebSessions:
		return TEXT("TOTAL_WEB_SESSIONS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebViewCheckout:
		return TEXT("TOTAL_WEB_VIEW_CHECKOUT");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebViewCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEO3SECVIEWS2:
		return TEXT("VIDEO_3SEC_VIEWS_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VideoLength:
		return TEXT("VIDEO_LENGTH");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOMRCVIEWS2:
		return TEXT("VIDEO_MRC_VIEWS_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP0COMBINED2:
		return TEXT("VIDEO_P0_COMBINED_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP100COMPLETE2:
		return TEXT("VIDEO_P100_COMPLETE_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP25COMBINED2:
		return TEXT("VIDEO_P25_COMBINED_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP50COMBINED2:
		return TEXT("VIDEO_P50_COMBINED_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP75COMBINED2:
		return TEXT("VIDEO_P75_COMBINED_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP95COMBINED2:
		return TEXT("VIDEO_P95_COMBINED_2");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WebCheckoutCostPerAction:
		return TEXT("WEB_CHECKOUT_COST_PER_ACTION");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WebCheckoutRoas:
		return TEXT("WEB_CHECKOUT_ROAS");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WEBSESSIONS1:
		return TEXT("WEB_SESSIONS_1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WEBSESSIONS2:
		return TEXT("WEB_SESSIONS_2");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum> StringToEnum = { 
		{ TEXT("ADVERTISER_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdvertiserId },
		{ TEXT("PIN_PROMOTION_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PinPromotionId },
		{ TEXT("AD_ACCOUNT_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdAccountId },
		{ TEXT("AD_GROUP_ENTITY_STATUS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdGroupEntityStatus },
		{ TEXT("AD_GROUP_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdGroupId },
		{ TEXT("AD_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::AdId },
		{ TEXT("CAMPAIGN_DAILY_SPEND_CAP"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignDailySpendCap },
		{ TEXT("CAMPAIGN_ENTITY_STATUS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignEntityStatus },
		{ TEXT("CAMPAIGN_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignId },
		{ TEXT("CAMPAIGN_LIFETIME_SPEND_CAP"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignLifetimeSpendCap },
		{ TEXT("CAMPAIGN_NAME"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CampaignName },
		{ TEXT("CHECKOUT_ROAS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CheckoutRoas },
		{ TEXT("CLICKTHROUGH_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CLICKTHROUGH1 },
		{ TEXT("CLICKTHROUGH_1_GROSS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CLICKTHROUGH1GROSS },
		{ TEXT("CLICKTHROUGH_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CLICKTHROUGH2 },
		{ TEXT("CPC_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CpcInMicroDollar },
		{ TEXT("CPM_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CpmInDollar },
		{ TEXT("CPM_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CpmInMicroDollar },
		{ TEXT("CTR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::Ctr },
		{ TEXT("CTR_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::CTR2 },
		{ TEXT("ECPCV_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpcvInDollar },
		{ TEXT("ECPCV_P95_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::ECPCVP95INDOLLAR },
		{ TEXT("ECPC_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpcInDollar },
		{ TEXT("ECPC_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpcInMicroDollar },
		{ TEXT("ECPE_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpeInDollar },
		{ TEXT("ECPM_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpmInMicroDollar },
		{ TEXT("ECPV_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EcpvInDollar },
		{ TEXT("ECTR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::Ectr },
		{ TEXT("EENGAGEMENT_RATE"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EengagementRate },
		{ TEXT("ENGAGEMENT_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::ENGAGEMENT1 },
		{ TEXT("ENGAGEMENT_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::ENGAGEMENT2 },
		{ TEXT("ENGAGEMENT_RATE"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::EngagementRate },
		{ TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT1 },
		{ TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT2 },
		{ TEXT("IMPRESSION_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IMPRESSION1 },
		{ TEXT("IMPRESSION_1_GROSS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IMPRESSION1GROSS },
		{ TEXT("IMPRESSION_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::IMPRESSION2 },
		{ TEXT("INAPP_CHECKOUT_COST_PER_ACTION"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::InappCheckoutCostPerAction },
		{ TEXT("OUTBOUND_CLICK_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::OUTBOUNDCLICK1 },
		{ TEXT("OUTBOUND_CLICK_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::OUTBOUNDCLICK2 },
		{ TEXT("PAGE_VISIT_COST_PER_ACTION"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PageVisitCostPerAction },
		{ TEXT("PAGE_VISIT_ROAS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PageVisitRoas },
		{ TEXT("PAID_IMPRESSION"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PaidImpression },
		{ TEXT("PIN_ID"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::PinId },
		{ TEXT("REPIN_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::REPIN1 },
		{ TEXT("REPIN_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::REPIN2 },
		{ TEXT("REPIN_RATE"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::RepinRate },
		{ TEXT("SPEND_IN_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::SpendInDollar },
		{ TEXT("SPEND_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::SpendInMicroDollar },
		{ TEXT("TOTAL_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalCheckout },
		{ TEXT("TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_CLICKTHROUGH"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickthrough },
		{ TEXT("TOTAL_CLICK_ADD_TO_CART"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickAddToCart },
		{ TEXT("TOTAL_CLICK_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickCheckout },
		{ TEXT("TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_CLICK_LEAD"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickLead },
		{ TEXT("TOTAL_CLICK_SIGNUP"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickSignup },
		{ TEXT("TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalClickSignupValueInMicroDollar },
		{ TEXT("TOTAL_CONVERSIONS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalConversions },
		{ TEXT("TOTAL_CUSTOM"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalCustom },
		{ TEXT("TOTAL_ENGAGEMENT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagement },
		{ TEXT("TOTAL_ENGAGEMENT_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementCheckout },
		{ TEXT("TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_ENGAGEMENT_LEAD"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementLead },
		{ TEXT("TOTAL_ENGAGEMENT_SIGNUP"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementSignup },
		{ TEXT("TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalEngagementSignupValueInMicroDollar },
		{ TEXT("TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalIdeaPinProductTagVisit },
		{ TEXT("TOTAL_IMPRESSION_FREQUENCY"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalImpressionFrequency },
		{ TEXT("TOTAL_IMPRESSION_USER"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalImpressionUser },
		{ TEXT("TOTAL_LEAD"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalLead },
		{ TEXT("TOTAL_OFFLINE_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalOfflineCheckout },
		{ TEXT("TOTAL_PAGE_VISIT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalPageVisit },
		{ TEXT("TOTAL_REPIN_RATE"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalRepinRate },
		{ TEXT("TOTAL_SIGNUP"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalSignup },
		{ TEXT("TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalSignupValueInMicroDollar },
		{ TEXT("TOTAL_VIDEO_3SEC_VIEWS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEO3SECVIEWS },
		{ TEXT("TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalVideoAvgWatchtimeInSecond },
		{ TEXT("TOTAL_VIDEO_MRC_VIEWS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalVideoMrcViews },
		{ TEXT("TOTAL_VIDEO_P0_COMBINED"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP0COMBINED },
		{ TEXT("TOTAL_VIDEO_P100_COMPLETE"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP100COMPLETE },
		{ TEXT("TOTAL_VIDEO_P25_COMBINED"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP25COMBINED },
		{ TEXT("TOTAL_VIDEO_P50_COMBINED"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP50COMBINED },
		{ TEXT("TOTAL_VIDEO_P75_COMBINED"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP75COMBINED },
		{ TEXT("TOTAL_VIDEO_P95_COMBINED"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TOTALVIDEOP95COMBINED },
		{ TEXT("TOTAL_VIEW_ADD_TO_CART"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewAddToCart },
		{ TEXT("TOTAL_VIEW_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewCheckout },
		{ TEXT("TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_VIEW_LEAD"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewLead },
		{ TEXT("TOTAL_VIEW_SIGNUP"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewSignup },
		{ TEXT("TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalViewSignupValueInMicroDollar },
		{ TEXT("TOTAL_WEB_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebCheckout },
		{ TEXT("TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_WEB_CLICK_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebClickCheckout },
		{ TEXT("TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebClickCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebEngagementCheckout },
		{ TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebEngagementCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_WEB_SESSIONS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebSessions },
		{ TEXT("TOTAL_WEB_VIEW_CHECKOUT"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebViewCheckout },
		{ TEXT("TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::TotalWebViewCheckoutValueInMicroDollar },
		{ TEXT("VIDEO_3SEC_VIEWS_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEO3SECVIEWS2 },
		{ TEXT("VIDEO_LENGTH"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VideoLength },
		{ TEXT("VIDEO_MRC_VIEWS_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOMRCVIEWS2 },
		{ TEXT("VIDEO_P0_COMBINED_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP0COMBINED2 },
		{ TEXT("VIDEO_P100_COMPLETE_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP100COMPLETE2 },
		{ TEXT("VIDEO_P25_COMBINED_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP25COMBINED2 },
		{ TEXT("VIDEO_P50_COMBINED_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP50COMBINED2 },
		{ TEXT("VIDEO_P75_COMBINED_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP75COMBINED2 },
		{ TEXT("VIDEO_P95_COMBINED_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::VIDEOP95COMBINED2 },
		{ TEXT("WEB_CHECKOUT_COST_PER_ACTION"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WebCheckoutCostPerAction },
		{ TEXT("WEB_CHECKOUT_ROAS"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WebCheckoutRoas },
		{ TEXT("WEB_SESSIONS_1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WEBSESSIONS1 },
		{ TEXT("WEB_SESSIONS_2"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum::WEBSESSIONS2 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ColumnsEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_1:
		return TEXT("1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_7:
		return TEXT("7");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_30:
		return TEXT("30");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_60:
		return TEXT("60");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_1 },
		{ TEXT("7"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_7 },
		{ TEXT("30"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_30 },
		{ TEXT("60"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum::_60 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ClickWindowDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_1:
		return TEXT("1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_7:
		return TEXT("7");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_30:
		return TEXT("30");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_60:
		return TEXT("60");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_1 },
		{ TEXT("7"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_7 },
		{ TEXT("30"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_30 },
		{ TEXT("60"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum::_60 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EngagementWindowDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_1:
		return TEXT("1");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_7:
		return TEXT("7");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_30:
		return TEXT("30");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_60:
		return TEXT("60");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_1 },
		{ TEXT("7"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_7 },
		{ TEXT("30"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_30 },
		{ TEXT("60"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum::_60 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ViewWindowDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum::AdAction:
		return TEXT("TIME_OF_AD_ACTION");
	case OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum::Conversion:
		return TEXT("TIME_OF_CONVERSION");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumToString(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum> StringToEnum = { 
		{ TEXT("TIME_OF_AD_ACTION"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum::AdAction },
		{ TEXT("TIME_OF_CONVERSION"), OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum::Conversion }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ConversionReportTimeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), ToStringFormatArg(AdAccountId) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/campaigns/targeting_analytics"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("campaign_ids=")) + CollectionToUrlString_multi(CampaignIds, TEXT("campaign_ids")));
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	QueryParams.Add(FString(TEXT("targeting_types=")) + CollectionToUrlString_csv(TargetingTypes, TEXT("targeting_types")));
	QueryParams.Add(FString(TEXT("columns=")) + CollectionToUrlString_csv(Columns, TEXT("columns")));
	QueryParams.Add(FString(TEXT("granularity=")) + ToUrlString(Granularity));
	if(ClickWindowDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("click_window_days=")) + ToUrlString(ClickWindowDays.GetValue()));
	}
	if(EngagementWindowDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("engagement_window_days=")) + ToUrlString(EngagementWindowDays.GetValue()));
	}
	if(ViewWindowDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("view_window_days=")) + ToUrlString(ViewWindowDays.GetValue()));
	}
	if(ConversionReportTime.IsSet())
	{
		QueryParams.Add(FString(TEXT("conversion_report_time=")) + ToUrlString(ConversionReportTime.GetValue()));
	}
	if(AttributionTypes.IsSet())
	{
		QueryParams.Add(FString(TEXT("attribution_types=")) + ToUrlString(AttributionTypes.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPICampaignsApi::CampaignTargetingAnalyticsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPICampaignsApi::CampaignTargetingAnalyticsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPICampaignsApi::CampaignTargetingAnalyticsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdvertiserId:
		return TEXT("ADVERTISER_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PinPromotionId:
		return TEXT("PIN_PROMOTION_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdAccountId:
		return TEXT("AD_ACCOUNT_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdGroupEntityStatus:
		return TEXT("AD_GROUP_ENTITY_STATUS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdGroupId:
		return TEXT("AD_GROUP_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdId:
		return TEXT("AD_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignDailySpendCap:
		return TEXT("CAMPAIGN_DAILY_SPEND_CAP");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignEntityStatus:
		return TEXT("CAMPAIGN_ENTITY_STATUS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignId:
		return TEXT("CAMPAIGN_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignLifetimeSpendCap:
		return TEXT("CAMPAIGN_LIFETIME_SPEND_CAP");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignName:
		return TEXT("CAMPAIGN_NAME");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CheckoutRoas:
		return TEXT("CHECKOUT_ROAS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CLICKTHROUGH1:
		return TEXT("CLICKTHROUGH_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CLICKTHROUGH1GROSS:
		return TEXT("CLICKTHROUGH_1_GROSS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CLICKTHROUGH2:
		return TEXT("CLICKTHROUGH_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CpcInMicroDollar:
		return TEXT("CPC_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CpmInDollar:
		return TEXT("CPM_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CpmInMicroDollar:
		return TEXT("CPM_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::Ctr:
		return TEXT("CTR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CTR2:
		return TEXT("CTR_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpcvInDollar:
		return TEXT("ECPCV_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::ECPCVP95INDOLLAR:
		return TEXT("ECPCV_P95_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpcInDollar:
		return TEXT("ECPC_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpcInMicroDollar:
		return TEXT("ECPC_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpeInDollar:
		return TEXT("ECPE_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpmInMicroDollar:
		return TEXT("ECPM_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpvInDollar:
		return TEXT("ECPV_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::Ectr:
		return TEXT("ECTR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EengagementRate:
		return TEXT("EENGAGEMENT_RATE");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::ENGAGEMENT1:
		return TEXT("ENGAGEMENT_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::ENGAGEMENT2:
		return TEXT("ENGAGEMENT_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EngagementRate:
		return TEXT("ENGAGEMENT_RATE");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT1:
		return TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT2:
		return TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IMPRESSION1:
		return TEXT("IMPRESSION_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IMPRESSION1GROSS:
		return TEXT("IMPRESSION_1_GROSS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IMPRESSION2:
		return TEXT("IMPRESSION_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::InappCheckoutCostPerAction:
		return TEXT("INAPP_CHECKOUT_COST_PER_ACTION");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::OUTBOUNDCLICK1:
		return TEXT("OUTBOUND_CLICK_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::OUTBOUNDCLICK2:
		return TEXT("OUTBOUND_CLICK_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PageVisitCostPerAction:
		return TEXT("PAGE_VISIT_COST_PER_ACTION");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PageVisitRoas:
		return TEXT("PAGE_VISIT_ROAS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PaidImpression:
		return TEXT("PAID_IMPRESSION");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PinId:
		return TEXT("PIN_ID");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::REPIN1:
		return TEXT("REPIN_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::REPIN2:
		return TEXT("REPIN_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::RepinRate:
		return TEXT("REPIN_RATE");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::SpendInDollar:
		return TEXT("SPEND_IN_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::SpendInMicroDollar:
		return TEXT("SPEND_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalCheckout:
		return TEXT("TOTAL_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalCheckoutValueInMicroDollar:
		return TEXT("TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickthrough:
		return TEXT("TOTAL_CLICKTHROUGH");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickAddToCart:
		return TEXT("TOTAL_CLICK_ADD_TO_CART");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickCheckout:
		return TEXT("TOTAL_CLICK_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickCheckoutValueInMicroDollar:
		return TEXT("TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickLead:
		return TEXT("TOTAL_CLICK_LEAD");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickSignup:
		return TEXT("TOTAL_CLICK_SIGNUP");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickSignupValueInMicroDollar:
		return TEXT("TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalConversions:
		return TEXT("TOTAL_CONVERSIONS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalCustom:
		return TEXT("TOTAL_CUSTOM");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagement:
		return TEXT("TOTAL_ENGAGEMENT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementCheckout:
		return TEXT("TOTAL_ENGAGEMENT_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementCheckoutValueInMicroDollar:
		return TEXT("TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementLead:
		return TEXT("TOTAL_ENGAGEMENT_LEAD");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementSignup:
		return TEXT("TOTAL_ENGAGEMENT_SIGNUP");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementSignupValueInMicroDollar:
		return TEXT("TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalIdeaPinProductTagVisit:
		return TEXT("TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalImpressionFrequency:
		return TEXT("TOTAL_IMPRESSION_FREQUENCY");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalImpressionUser:
		return TEXT("TOTAL_IMPRESSION_USER");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalLead:
		return TEXT("TOTAL_LEAD");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalOfflineCheckout:
		return TEXT("TOTAL_OFFLINE_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalPageVisit:
		return TEXT("TOTAL_PAGE_VISIT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalRepinRate:
		return TEXT("TOTAL_REPIN_RATE");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalSignup:
		return TEXT("TOTAL_SIGNUP");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalSignupValueInMicroDollar:
		return TEXT("TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEO3SECVIEWS:
		return TEXT("TOTAL_VIDEO_3SEC_VIEWS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalVideoAvgWatchtimeInSecond:
		return TEXT("TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalVideoMrcViews:
		return TEXT("TOTAL_VIDEO_MRC_VIEWS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP0COMBINED:
		return TEXT("TOTAL_VIDEO_P0_COMBINED");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP100COMPLETE:
		return TEXT("TOTAL_VIDEO_P100_COMPLETE");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP25COMBINED:
		return TEXT("TOTAL_VIDEO_P25_COMBINED");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP50COMBINED:
		return TEXT("TOTAL_VIDEO_P50_COMBINED");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP75COMBINED:
		return TEXT("TOTAL_VIDEO_P75_COMBINED");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP95COMBINED:
		return TEXT("TOTAL_VIDEO_P95_COMBINED");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewAddToCart:
		return TEXT("TOTAL_VIEW_ADD_TO_CART");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewCheckout:
		return TEXT("TOTAL_VIEW_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewCheckoutValueInMicroDollar:
		return TEXT("TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewLead:
		return TEXT("TOTAL_VIEW_LEAD");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewSignup:
		return TEXT("TOTAL_VIEW_SIGNUP");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewSignupValueInMicroDollar:
		return TEXT("TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebCheckout:
		return TEXT("TOTAL_WEB_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebClickCheckout:
		return TEXT("TOTAL_WEB_CLICK_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebClickCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebEngagementCheckout:
		return TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebEngagementCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebSessions:
		return TEXT("TOTAL_WEB_SESSIONS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebViewCheckout:
		return TEXT("TOTAL_WEB_VIEW_CHECKOUT");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebViewCheckoutValueInMicroDollar:
		return TEXT("TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEO3SECVIEWS2:
		return TEXT("VIDEO_3SEC_VIEWS_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VideoLength:
		return TEXT("VIDEO_LENGTH");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOMRCVIEWS2:
		return TEXT("VIDEO_MRC_VIEWS_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP0COMBINED2:
		return TEXT("VIDEO_P0_COMBINED_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP100COMPLETE2:
		return TEXT("VIDEO_P100_COMPLETE_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP25COMBINED2:
		return TEXT("VIDEO_P25_COMBINED_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP50COMBINED2:
		return TEXT("VIDEO_P50_COMBINED_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP75COMBINED2:
		return TEXT("VIDEO_P75_COMBINED_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP95COMBINED2:
		return TEXT("VIDEO_P95_COMBINED_2");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WebCheckoutCostPerAction:
		return TEXT("WEB_CHECKOUT_COST_PER_ACTION");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WebCheckoutRoas:
		return TEXT("WEB_CHECKOUT_ROAS");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WEBSESSIONS1:
		return TEXT("WEB_SESSIONS_1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WEBSESSIONS2:
		return TEXT("WEB_SESSIONS_2");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum> StringToEnum = { 
		{ TEXT("ADVERTISER_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdvertiserId },
		{ TEXT("PIN_PROMOTION_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PinPromotionId },
		{ TEXT("AD_ACCOUNT_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdAccountId },
		{ TEXT("AD_GROUP_ENTITY_STATUS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdGroupEntityStatus },
		{ TEXT("AD_GROUP_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdGroupId },
		{ TEXT("AD_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::AdId },
		{ TEXT("CAMPAIGN_DAILY_SPEND_CAP"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignDailySpendCap },
		{ TEXT("CAMPAIGN_ENTITY_STATUS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignEntityStatus },
		{ TEXT("CAMPAIGN_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignId },
		{ TEXT("CAMPAIGN_LIFETIME_SPEND_CAP"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignLifetimeSpendCap },
		{ TEXT("CAMPAIGN_NAME"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CampaignName },
		{ TEXT("CHECKOUT_ROAS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CheckoutRoas },
		{ TEXT("CLICKTHROUGH_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CLICKTHROUGH1 },
		{ TEXT("CLICKTHROUGH_1_GROSS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CLICKTHROUGH1GROSS },
		{ TEXT("CLICKTHROUGH_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CLICKTHROUGH2 },
		{ TEXT("CPC_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CpcInMicroDollar },
		{ TEXT("CPM_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CpmInDollar },
		{ TEXT("CPM_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CpmInMicroDollar },
		{ TEXT("CTR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::Ctr },
		{ TEXT("CTR_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::CTR2 },
		{ TEXT("ECPCV_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpcvInDollar },
		{ TEXT("ECPCV_P95_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::ECPCVP95INDOLLAR },
		{ TEXT("ECPC_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpcInDollar },
		{ TEXT("ECPC_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpcInMicroDollar },
		{ TEXT("ECPE_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpeInDollar },
		{ TEXT("ECPM_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpmInMicroDollar },
		{ TEXT("ECPV_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EcpvInDollar },
		{ TEXT("ECTR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::Ectr },
		{ TEXT("EENGAGEMENT_RATE"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EengagementRate },
		{ TEXT("ENGAGEMENT_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::ENGAGEMENT1 },
		{ TEXT("ENGAGEMENT_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::ENGAGEMENT2 },
		{ TEXT("ENGAGEMENT_RATE"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::EngagementRate },
		{ TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT1 },
		{ TEXT("IDEA_PIN_PRODUCT_TAG_VISIT_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IDEAPINPRODUCTTAGVISIT2 },
		{ TEXT("IMPRESSION_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IMPRESSION1 },
		{ TEXT("IMPRESSION_1_GROSS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IMPRESSION1GROSS },
		{ TEXT("IMPRESSION_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::IMPRESSION2 },
		{ TEXT("INAPP_CHECKOUT_COST_PER_ACTION"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::InappCheckoutCostPerAction },
		{ TEXT("OUTBOUND_CLICK_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::OUTBOUNDCLICK1 },
		{ TEXT("OUTBOUND_CLICK_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::OUTBOUNDCLICK2 },
		{ TEXT("PAGE_VISIT_COST_PER_ACTION"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PageVisitCostPerAction },
		{ TEXT("PAGE_VISIT_ROAS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PageVisitRoas },
		{ TEXT("PAID_IMPRESSION"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PaidImpression },
		{ TEXT("PIN_ID"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::PinId },
		{ TEXT("REPIN_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::REPIN1 },
		{ TEXT("REPIN_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::REPIN2 },
		{ TEXT("REPIN_RATE"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::RepinRate },
		{ TEXT("SPEND_IN_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::SpendInDollar },
		{ TEXT("SPEND_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::SpendInMicroDollar },
		{ TEXT("TOTAL_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalCheckout },
		{ TEXT("TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_CLICKTHROUGH"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickthrough },
		{ TEXT("TOTAL_CLICK_ADD_TO_CART"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickAddToCart },
		{ TEXT("TOTAL_CLICK_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickCheckout },
		{ TEXT("TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_CLICK_LEAD"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickLead },
		{ TEXT("TOTAL_CLICK_SIGNUP"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickSignup },
		{ TEXT("TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalClickSignupValueInMicroDollar },
		{ TEXT("TOTAL_CONVERSIONS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalConversions },
		{ TEXT("TOTAL_CUSTOM"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalCustom },
		{ TEXT("TOTAL_ENGAGEMENT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagement },
		{ TEXT("TOTAL_ENGAGEMENT_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementCheckout },
		{ TEXT("TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_ENGAGEMENT_LEAD"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementLead },
		{ TEXT("TOTAL_ENGAGEMENT_SIGNUP"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementSignup },
		{ TEXT("TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalEngagementSignupValueInMicroDollar },
		{ TEXT("TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalIdeaPinProductTagVisit },
		{ TEXT("TOTAL_IMPRESSION_FREQUENCY"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalImpressionFrequency },
		{ TEXT("TOTAL_IMPRESSION_USER"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalImpressionUser },
		{ TEXT("TOTAL_LEAD"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalLead },
		{ TEXT("TOTAL_OFFLINE_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalOfflineCheckout },
		{ TEXT("TOTAL_PAGE_VISIT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalPageVisit },
		{ TEXT("TOTAL_REPIN_RATE"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalRepinRate },
		{ TEXT("TOTAL_SIGNUP"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalSignup },
		{ TEXT("TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalSignupValueInMicroDollar },
		{ TEXT("TOTAL_VIDEO_3SEC_VIEWS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEO3SECVIEWS },
		{ TEXT("TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalVideoAvgWatchtimeInSecond },
		{ TEXT("TOTAL_VIDEO_MRC_VIEWS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalVideoMrcViews },
		{ TEXT("TOTAL_VIDEO_P0_COMBINED"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP0COMBINED },
		{ TEXT("TOTAL_VIDEO_P100_COMPLETE"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP100COMPLETE },
		{ TEXT("TOTAL_VIDEO_P25_COMBINED"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP25COMBINED },
		{ TEXT("TOTAL_VIDEO_P50_COMBINED"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP50COMBINED },
		{ TEXT("TOTAL_VIDEO_P75_COMBINED"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP75COMBINED },
		{ TEXT("TOTAL_VIDEO_P95_COMBINED"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TOTALVIDEOP95COMBINED },
		{ TEXT("TOTAL_VIEW_ADD_TO_CART"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewAddToCart },
		{ TEXT("TOTAL_VIEW_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewCheckout },
		{ TEXT("TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_VIEW_LEAD"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewLead },
		{ TEXT("TOTAL_VIEW_SIGNUP"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewSignup },
		{ TEXT("TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalViewSignupValueInMicroDollar },
		{ TEXT("TOTAL_WEB_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebCheckout },
		{ TEXT("TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_WEB_CLICK_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebClickCheckout },
		{ TEXT("TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebClickCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebEngagementCheckout },
		{ TEXT("TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebEngagementCheckoutValueInMicroDollar },
		{ TEXT("TOTAL_WEB_SESSIONS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebSessions },
		{ TEXT("TOTAL_WEB_VIEW_CHECKOUT"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebViewCheckout },
		{ TEXT("TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::TotalWebViewCheckoutValueInMicroDollar },
		{ TEXT("VIDEO_3SEC_VIEWS_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEO3SECVIEWS2 },
		{ TEXT("VIDEO_LENGTH"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VideoLength },
		{ TEXT("VIDEO_MRC_VIEWS_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOMRCVIEWS2 },
		{ TEXT("VIDEO_P0_COMBINED_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP0COMBINED2 },
		{ TEXT("VIDEO_P100_COMPLETE_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP100COMPLETE2 },
		{ TEXT("VIDEO_P25_COMBINED_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP25COMBINED2 },
		{ TEXT("VIDEO_P50_COMBINED_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP50COMBINED2 },
		{ TEXT("VIDEO_P75_COMBINED_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP75COMBINED2 },
		{ TEXT("VIDEO_P95_COMBINED_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::VIDEOP95COMBINED2 },
		{ TEXT("WEB_CHECKOUT_COST_PER_ACTION"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WebCheckoutCostPerAction },
		{ TEXT("WEB_CHECKOUT_ROAS"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WebCheckoutRoas },
		{ TEXT("WEB_SESSIONS_1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WEBSESSIONS1 },
		{ TEXT("WEB_SESSIONS_2"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum::WEBSESSIONS2 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ColumnsEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_1:
		return TEXT("1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_7:
		return TEXT("7");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_30:
		return TEXT("30");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_60:
		return TEXT("60");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_1 },
		{ TEXT("7"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_7 },
		{ TEXT("30"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_30 },
		{ TEXT("60"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum::_60 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ClickWindowDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_1:
		return TEXT("1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_7:
		return TEXT("7");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_30:
		return TEXT("30");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_60:
		return TEXT("60");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_1 },
		{ TEXT("7"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_7 },
		{ TEXT("30"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_30 },
		{ TEXT("60"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum::_60 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsAnalyticsRequest::EngagementWindowDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_1:
		return TEXT("1");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_7:
		return TEXT("7");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_30:
		return TEXT("30");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_60:
		return TEXT("60");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum> StringToEnum = { 
		{ TEXT("1"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_1 },
		{ TEXT("7"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_7 },
		{ TEXT("30"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_30 },
		{ TEXT("60"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum::_60 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ViewWindowDaysEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum::AdAction:
		return TEXT("TIME_OF_AD_ACTION");
	case OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum::Conversion:
		return TEXT("TIME_OF_CONVERSION");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumToString(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum> StringToEnum = { 
		{ TEXT("TIME_OF_AD_ACTION"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum::AdAction },
		{ TEXT("TIME_OF_CONVERSION"), OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum::Conversion }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsAnalyticsRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsAnalyticsRequest::ConversionReportTimeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPICampaignsApi::CampaignsAnalyticsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), ToStringFormatArg(AdAccountId) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/campaigns/analytics"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("start_date=")) + ToUrlString(StartDate));
	QueryParams.Add(FString(TEXT("end_date=")) + ToUrlString(EndDate));
	QueryParams.Add(FString(TEXT("campaign_ids=")) + CollectionToUrlString_multi(CampaignIds, TEXT("campaign_ids")));
	QueryParams.Add(FString(TEXT("columns=")) + CollectionToUrlString_csv(Columns, TEXT("columns")));
	QueryParams.Add(FString(TEXT("granularity=")) + ToUrlString(Granularity));
	if(ClickWindowDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("click_window_days=")) + ToUrlString(ClickWindowDays.GetValue()));
	}
	if(EngagementWindowDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("engagement_window_days=")) + ToUrlString(EngagementWindowDays.GetValue()));
	}
	if(ViewWindowDays.IsSet())
	{
		QueryParams.Add(FString(TEXT("view_window_days=")) + ToUrlString(ViewWindowDays.GetValue()));
	}
	if(ConversionReportTime.IsSet())
	{
		QueryParams.Add(FString(TEXT("conversion_report_time=")) + ToUrlString(ConversionReportTime.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPICampaignsApi::CampaignsAnalyticsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPICampaignsApi::CampaignsAnalyticsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid ad account campaign analytics parameters."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPICampaignsApi::CampaignsAnalyticsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPICampaignsApi::CampaignsCreateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), ToStringFormatArg(AdAccountId) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/campaigns"), PathParams);

	return Path;
}

void OpenAPICampaignsApi::CampaignsCreateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICampaignCreateRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICampaignCreateRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICampaignCreateRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPICampaignsApi::CampaignsCreateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPICampaignsApi::CampaignsCreateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPICampaignsApi::CampaignsGetRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), ToStringFormatArg(AdAccountId) },
	{ TEXT("campaign_id"), ToStringFormatArg(CampaignId) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/campaigns/{campaign_id}"), PathParams);

	return Path;
}

void OpenAPICampaignsApi::CampaignsGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPICampaignsApi::CampaignsGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPICampaignsApi::CampaignsGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum::Active:
		return TEXT("ACTIVE");
	case OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum::Paused:
		return TEXT("PAUSED");
	case OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum::Archived:
		return TEXT("ARCHIVED");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsListRequest::EnumToString(const OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum> StringToEnum = { 
		{ TEXT("ACTIVE"), OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum::Active },
		{ TEXT("PAUSED"), OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum::Paused },
		{ TEXT("ARCHIVED"), OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum::Archived }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsListRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsListRequest::EntityStatusesEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& Value)
{
	switch (Value)
	{
	case OpenAPICampaignsApi::CampaignsListRequest::OrderEnum::Ascending:
		return TEXT("ASCENDING");
	case OpenAPICampaignsApi::CampaignsListRequest::OrderEnum::Descending:
		return TEXT("DESCENDING");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPICampaignsApi::CampaignsListRequest::OrderEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPICampaignsApi::CampaignsListRequest::EnumToString(const OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& Value)
{
	static TMap<FString, OpenAPICampaignsApi::CampaignsListRequest::OrderEnum> StringToEnum = { 
		{ TEXT("ASCENDING"), OpenAPICampaignsApi::CampaignsListRequest::OrderEnum::Ascending },
		{ TEXT("DESCENDING"), OpenAPICampaignsApi::CampaignsListRequest::OrderEnum::Descending }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPICampaignsApi::CampaignsListRequest::EnumFromString(const FString& EnumAsString, OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPICampaignsApi::CampaignsListRequest::OrderEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPICampaignsApi::CampaignsListRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), ToStringFormatArg(AdAccountId) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/campaigns"), PathParams);

	TArray<FString> QueryParams;
	if(CampaignIds.IsSet())
	{
		QueryParams.Add(FString(TEXT("campaign_ids=")) + CollectionToUrlString_multi(CampaignIds.GetValue(), TEXT("campaign_ids")));
	}
	if(EntityStatuses.IsSet())
	{
		QueryParams.Add(FString(TEXT("entity_statuses=")) + CollectionToUrlString_multi(EntityStatuses.GetValue(), TEXT("entity_statuses")));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(Order.IsSet())
	{
		QueryParams.Add(FString(TEXT("order=")) + ToUrlString(Order.GetValue()));
	}
	if(Bookmark.IsSet())
	{
		QueryParams.Add(FString(TEXT("bookmark=")) + ToUrlString(Bookmark.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPICampaignsApi::CampaignsListRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPICampaignsApi::CampaignsListResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success"));
		break;
	case 400:
		SetResponseString(TEXT("Invalid ad account campaign parameters."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPICampaignsApi::CampaignsListResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPICampaignsApi::CampaignsUpdateRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ad_account_id"), ToStringFormatArg(AdAccountId) } };

	FString Path = FString::Format(TEXT("/ad_accounts/{ad_account_id}/campaigns"), PathParams);

	return Path;
}

void OpenAPICampaignsApi::CampaignsUpdateRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPICampaignUpdateRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICampaignUpdateRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPICampaignUpdateRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPICampaignsApi::CampaignsUpdateResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("response"));
		break;
	case 0:
	default:
		SetResponseString(TEXT("Unexpected error"));
		break;
	}
}

bool OpenAPICampaignsApi::CampaignsUpdateResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
