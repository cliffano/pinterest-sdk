/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.6.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdGroupResponseAllOf.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::NotActive:
		return TEXT("NOT_ACTIVE");
	case OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Active:
		return TEXT("ACTIVE");
	case OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Null:
		return TEXT("null");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdGroupResponseAllOf::EnumToString(const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	static TMap<FString, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum> StringToEnum = { 
		{ TEXT("NOT_ACTIVE"), OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::NotActive },
		{ TEXT("ACTIVE"), OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Active },
		{ TEXT("null"), OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Null }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdGroupResponseAllOf::EnumFromString(const FString& EnumAsString, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAdGroupResponseAllOf::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (AdAccountId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ad_account_id")); WriteJsonValue(Writer, AdAccountId.GetValue());
	}
	if (CreatedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_time")); WriteJsonValue(Writer, CreatedTime.GetValue());
	}
	if (UpdatedTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("updated_time")); WriteJsonValue(Writer, UpdatedTime.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (ConversionLearningModeType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("conversion_learning_mode_type")); WriteJsonValue(Writer, ConversionLearningModeType.GetValue());
	}
	if (SummaryStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("summary_status")); WriteJsonValue(Writer, SummaryStatus.GetValue());
	}
	if (FeedProfileId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feed_profile_id")); WriteJsonValue(Writer, FeedProfileId.GetValue());
	}
	if (DcaAssets.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dca_assets")); WriteJsonValue(Writer, DcaAssets.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAdGroupResponseAllOf::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ad_account_id"), AdAccountId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_time"), CreatedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_time"), UpdatedTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("conversion_learning_mode_type"), ConversionLearningModeType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("summary_status"), SummaryStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_profile_id"), FeedProfileId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dca_assets"), DcaAssets);

	return ParseSuccess;
}

}
