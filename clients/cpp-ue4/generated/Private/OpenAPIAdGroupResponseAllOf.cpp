/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAdGroupResponseAllOf.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdGroupResponseAllOf::BudgetTypeEnum::Daily:
		return TEXT("DAILY");
	case OpenAPIAdGroupResponseAllOf::BudgetTypeEnum::Lifetime:
		return TEXT("LIFETIME");
	case OpenAPIAdGroupResponseAllOf::BudgetTypeEnum::CboAdgroup:
		return TEXT("CBO_ADGROUP");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdGroupResponseAllOf::BudgetTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdGroupResponseAllOf::EnumToString(const OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& Value)
{
	static TMap<FString, OpenAPIAdGroupResponseAllOf::BudgetTypeEnum> StringToEnum = { 
		{ TEXT("DAILY"), OpenAPIAdGroupResponseAllOf::BudgetTypeEnum::Daily },
		{ TEXT("LIFETIME"), OpenAPIAdGroupResponseAllOf::BudgetTypeEnum::Lifetime },
		{ TEXT("CBO_ADGROUP"), OpenAPIAdGroupResponseAllOf::BudgetTypeEnum::CboAdgroup }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdGroupResponseAllOf::EnumFromString(const FString& EnumAsString, OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdGroupResponseAllOf::BudgetTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::NotActive:
		return TEXT("NOT_ACTIVE");
	case OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Active:
		return TEXT("ACTIVE");
	case OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Null:
		return TEXT("null");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIAdGroupResponseAllOf::EnumToString(const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	static TMap<FString, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum> StringToEnum = { 
		{ TEXT("NOT_ACTIVE"), OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::NotActive },
		{ TEXT("ACTIVE"), OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Active },
		{ TEXT("null"), OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum::Null }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIAdGroupResponseAllOf::EnumFromString(const FString& EnumAsString, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAdGroupResponseAllOf::ConversionLearningModeTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIAdGroupResponseAllOf::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (BudgetInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("budget_in_micro_currency")); WriteJsonValue(Writer, BudgetInMicroCurrency.GetValue());
	}
	if (BidInMicroCurrency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bid_in_micro_currency")); WriteJsonValue(Writer, BidInMicroCurrency.GetValue());
	}
	if (BudgetType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("budget_type")); WriteJsonValue(Writer, BudgetType.GetValue());
	}
	if (StartTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("start_time")); WriteJsonValue(Writer, StartTime.GetValue());
	}
	if (EndTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("end_time")); WriteJsonValue(Writer, EndTime.GetValue());
	}
	if (TargetingSpec.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("targeting_spec")); WriteJsonValue(Writer, TargetingSpec.GetValue());
	}
	if (LifetimeFrequencyCap.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lifetime_frequency_cap")); WriteJsonValue(Writer, LifetimeFrequencyCap.GetValue());
	}
	if (TrackingUrls.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("tracking_urls")); WriteJsonValue(Writer, TrackingUrls.GetValue());
	}
	if (AutoTargetingEnabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("auto_targeting_enabled")); WriteJsonValue(Writer, AutoTargetingEnabled.GetValue());
	}
	if (PlacementGroup.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("placement_group")); WriteJsonValue(Writer, PlacementGroup.GetValue());
	}
	if (PacingDeliveryType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pacing_delivery_type")); WriteJsonValue(Writer, PacingDeliveryType.GetValue());
	}
	if (ConversionLearningModeType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("conversion_learning_mode_type")); WriteJsonValue(Writer, ConversionLearningModeType.GetValue());
	}
	if (SummaryStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("summary_status")); WriteJsonValue(Writer, SummaryStatus.GetValue());
	}
	if (FeedProfileId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feed_profile_id")); WriteJsonValue(Writer, FeedProfileId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAdGroupResponseAllOf::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("budget_in_micro_currency"), BudgetInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bid_in_micro_currency"), BidInMicroCurrency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("budget_type"), BudgetType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_time"), StartTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_time"), EndTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("targeting_spec"), TargetingSpec);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lifetime_frequency_cap"), LifetimeFrequencyCap);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("tracking_urls"), TrackingUrls);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("auto_targeting_enabled"), AutoTargetingEnabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("placement_group"), PlacementGroup);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pacing_delivery_type"), PacingDeliveryType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("conversion_learning_mode_type"), ConversionLearningModeType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("summary_status"), SummaryStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_profile_id"), FeedProfileId);

	return ParseSuccess;
}

}
