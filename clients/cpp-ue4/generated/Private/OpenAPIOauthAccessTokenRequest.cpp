/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: pinterest-api@pinterest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOauthAccessTokenRequest.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIOauthAccessTokenRequest::GrantTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOauthAccessTokenRequest::GrantTypeEnum::AuthorizationCode:
		return TEXT("authorization_code");
	case OpenAPIOauthAccessTokenRequest::GrantTypeEnum::RefreshToken:
		return TEXT("refresh_token");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIOauthAccessTokenRequest::GrantTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOauthAccessTokenRequest::EnumToString(const OpenAPIOauthAccessTokenRequest::GrantTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOauthAccessTokenRequest::GrantTypeEnum& Value)
{
	static TMap<FString, OpenAPIOauthAccessTokenRequest::GrantTypeEnum> StringToEnum = { 
		{ TEXT("authorization_code"), OpenAPIOauthAccessTokenRequest::GrantTypeEnum::AuthorizationCode },
		{ TEXT("refresh_token"), OpenAPIOauthAccessTokenRequest::GrantTypeEnum::RefreshToken }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOauthAccessTokenRequest::EnumFromString(const FString& EnumAsString, OpenAPIOauthAccessTokenRequest::GrantTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIOauthAccessTokenRequest::GrantTypeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOauthAccessTokenRequest::GrantTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOauthAccessTokenRequest::GrantTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOauthAccessTokenRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("grant_type")); WriteJsonValue(Writer, GrantType);
	Writer->WriteObjectEnd();
}

bool OpenAPIOauthAccessTokenRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("grant_type"), GrantType);

	return ParseSuccess;
}

}
