/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICatalogsFeedValidationErrors.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICatalogsFeedValidationErrors::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (FetchError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fetch_error")); WriteJsonValue(Writer, FetchError.GetValue());
	}
	if (FetchInactiveFeedError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fetch_inactive_feed_error")); WriteJsonValue(Writer, FetchInactiveFeedError.GetValue());
	}
	if (EncodingError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("encoding_error")); WriteJsonValue(Writer, EncodingError.GetValue());
	}
	if (DelimiterError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("delimiter_error")); WriteJsonValue(Writer, DelimiterError.GetValue());
	}
	if (RequiredColumnsMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("required_columns_missing")); WriteJsonValue(Writer, RequiredColumnsMissing.GetValue());
	}
	if (ImageLinkInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("image_link_invalid")); WriteJsonValue(Writer, ImageLinkInvalid.GetValue());
	}
	if (ItemidMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("itemid_missing")); WriteJsonValue(Writer, ItemidMissing.GetValue());
	}
	if (TitleMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("title_missing")); WriteJsonValue(Writer, TitleMissing.GetValue());
	}
	if (DescriptionMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description_missing")); WriteJsonValue(Writer, DescriptionMissing.GetValue());
	}
	if (ProductCategoryInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_category_invalid")); WriteJsonValue(Writer, ProductCategoryInvalid.GetValue());
	}
	if (ProductLinkMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_link_missing")); WriteJsonValue(Writer, ProductLinkMissing.GetValue());
	}
	if (ImageLinkMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("image_link_missing")); WriteJsonValue(Writer, ImageLinkMissing.GetValue());
	}
	if (AvailabilityInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("availability_invalid")); WriteJsonValue(Writer, AvailabilityInvalid.GetValue());
	}
	if (ProductPriceInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_price_invalid")); WriteJsonValue(Writer, ProductPriceInvalid.GetValue());
	}
	if (LinkFormatInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("link_format_invalid")); WriteJsonValue(Writer, LinkFormatInvalid.GetValue());
	}
	if (ParseLineError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("parse_line_error")); WriteJsonValue(Writer, ParseLineError.GetValue());
	}
	if (AdwordsFormatInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("adwords_format_invalid")); WriteJsonValue(Writer, AdwordsFormatInvalid.GetValue());
	}
	if (ProductCategoryMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("product_category_missing")); WriteJsonValue(Writer, ProductCategoryMissing.GetValue());
	}
	if (InternalServiceError.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("internal_service_error")); WriteJsonValue(Writer, InternalServiceError.GetValue());
	}
	if (NoVerifiedDomain.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("no_verified_domain")); WriteJsonValue(Writer, NoVerifiedDomain.GetValue());
	}
	if (AdultInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("adult_invalid")); WriteJsonValue(Writer, AdultInvalid.GetValue());
	}
	if (InvalidDomain.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("invalid_domain")); WriteJsonValue(Writer, InvalidDomain.GetValue());
	}
	if (FeedLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feed_length_too_long")); WriteJsonValue(Writer, FeedLengthTooLong.GetValue());
	}
	if (LinkLengthTooLong.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("link_length_too_long")); WriteJsonValue(Writer, LinkLengthTooLong.GetValue());
	}
	if (MalformedXml.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("malformed_xml")); WriteJsonValue(Writer, MalformedXml.GetValue());
	}
	if (RedirectInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("redirect_invalid")); WriteJsonValue(Writer, RedirectInvalid.GetValue());
	}
	if (PriceMissing.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price_missing")); WriteJsonValue(Writer, PriceMissing.GetValue());
	}
	if (FeedTooSmall.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("feed_too_small")); WriteJsonValue(Writer, FeedTooSmall.GetValue());
	}
	if (ConditionInvalid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("condition_invalid")); WriteJsonValue(Writer, ConditionInvalid.GetValue());
	}
	if (ShopifyNoProducts.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("shopify_no_products")); WriteJsonValue(Writer, ShopifyNoProducts.GetValue());
	}
	if (MaxItemsPerItemGroupExceeded.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("max_items_per_item_group_exceeded")); WriteJsonValue(Writer, MaxItemsPerItemGroupExceeded.GetValue());
	}
	if (ItemMainImageDownloadFailure.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("item_main_image_download_failure")); WriteJsonValue(Writer, ItemMainImageDownloadFailure.GetValue());
	}
	if (PinjoinContentUnsafe.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pinjoin_content_unsafe")); WriteJsonValue(Writer, PinjoinContentUnsafe.GetValue());
	}
	if (BlocklistedImageSignature.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blocklisted_image_signature")); WriteJsonValue(Writer, BlocklistedImageSignature.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICatalogsFeedValidationErrors::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fetch_error"), FetchError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fetch_inactive_feed_error"), FetchInactiveFeedError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("encoding_error"), EncodingError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("delimiter_error"), DelimiterError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("required_columns_missing"), RequiredColumnsMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("image_link_invalid"), ImageLinkInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("itemid_missing"), ItemidMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("title_missing"), TitleMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description_missing"), DescriptionMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_category_invalid"), ProductCategoryInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_link_missing"), ProductLinkMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("image_link_missing"), ImageLinkMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("availability_invalid"), AvailabilityInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_price_invalid"), ProductPriceInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("link_format_invalid"), LinkFormatInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("parse_line_error"), ParseLineError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("adwords_format_invalid"), AdwordsFormatInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("product_category_missing"), ProductCategoryMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("internal_service_error"), InternalServiceError);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("no_verified_domain"), NoVerifiedDomain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("adult_invalid"), AdultInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("invalid_domain"), InvalidDomain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_length_too_long"), FeedLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("link_length_too_long"), LinkLengthTooLong);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("malformed_xml"), MalformedXml);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("redirect_invalid"), RedirectInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price_missing"), PriceMissing);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("feed_too_small"), FeedTooSmall);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("condition_invalid"), ConditionInvalid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("shopify_no_products"), ShopifyNoProducts);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("max_items_per_item_group_exceeded"), MaxItemsPerItemGroupExceeded);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("item_main_image_download_failure"), ItemMainImageDownloadFailure);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pinjoin_content_unsafe"), PinjoinContentUnsafe);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blocklisted_image_signature"), BlocklistedImageSignature);

	return ParseSuccess;
}

}
