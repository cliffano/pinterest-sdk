/**
 * Pinterest REST API
 * Pinterest's REST API
 *
 * OpenAPI spec version: 5.6.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIConversionEventsDataInner.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIConversionEventsDataInner::EventNameEnum& Value)
{
	switch (Value)
	{
	case OpenAPIConversionEventsDataInner::EventNameEnum::AddToCart:
		return TEXT("add_to_cart");
	case OpenAPIConversionEventsDataInner::EventNameEnum::Checkout:
		return TEXT("checkout");
	case OpenAPIConversionEventsDataInner::EventNameEnum::Custom:
		return TEXT("custom");
	case OpenAPIConversionEventsDataInner::EventNameEnum::Lead:
		return TEXT("lead");
	case OpenAPIConversionEventsDataInner::EventNameEnum::PageVisit:
		return TEXT("page_visit");
	case OpenAPIConversionEventsDataInner::EventNameEnum::Search:
		return TEXT("search");
	case OpenAPIConversionEventsDataInner::EventNameEnum::Signup:
		return TEXT("signup");
	case OpenAPIConversionEventsDataInner::EventNameEnum::ViewCategory:
		return TEXT("view_category");
	case OpenAPIConversionEventsDataInner::EventNameEnum::WatchVideo:
		return TEXT("watch_video");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIConversionEventsDataInner::EventNameEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIConversionEventsDataInner::EnumToString(const OpenAPIConversionEventsDataInner::EventNameEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIConversionEventsDataInner::EventNameEnum& Value)
{
	static TMap<FString, OpenAPIConversionEventsDataInner::EventNameEnum> StringToEnum = { 
		{ TEXT("add_to_cart"), OpenAPIConversionEventsDataInner::EventNameEnum::AddToCart },
		{ TEXT("checkout"), OpenAPIConversionEventsDataInner::EventNameEnum::Checkout },
		{ TEXT("custom"), OpenAPIConversionEventsDataInner::EventNameEnum::Custom },
		{ TEXT("lead"), OpenAPIConversionEventsDataInner::EventNameEnum::Lead },
		{ TEXT("page_visit"), OpenAPIConversionEventsDataInner::EventNameEnum::PageVisit },
		{ TEXT("search"), OpenAPIConversionEventsDataInner::EventNameEnum::Search },
		{ TEXT("signup"), OpenAPIConversionEventsDataInner::EventNameEnum::Signup },
		{ TEXT("view_category"), OpenAPIConversionEventsDataInner::EventNameEnum::ViewCategory },
		{ TEXT("watch_video"), OpenAPIConversionEventsDataInner::EventNameEnum::WatchVideo }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIConversionEventsDataInner::EnumFromString(const FString& EnumAsString, OpenAPIConversionEventsDataInner::EventNameEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIConversionEventsDataInner::EventNameEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIConversionEventsDataInner::EventNameEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const OpenAPIConversionEventsDataInner::ActionSourceEnum& Value)
{
	switch (Value)
	{
	case OpenAPIConversionEventsDataInner::ActionSourceEnum::AppAndroid:
		return TEXT("app_android");
	case OpenAPIConversionEventsDataInner::ActionSourceEnum::AppIos:
		return TEXT("app_ios");
	case OpenAPIConversionEventsDataInner::ActionSourceEnum::Web:
		return TEXT("web");
	case OpenAPIConversionEventsDataInner::ActionSourceEnum::Offline:
		return TEXT("offline");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIConversionEventsDataInner::ActionSourceEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIConversionEventsDataInner::EnumToString(const OpenAPIConversionEventsDataInner::ActionSourceEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIConversionEventsDataInner::ActionSourceEnum& Value)
{
	static TMap<FString, OpenAPIConversionEventsDataInner::ActionSourceEnum> StringToEnum = { 
		{ TEXT("app_android"), OpenAPIConversionEventsDataInner::ActionSourceEnum::AppAndroid },
		{ TEXT("app_ios"), OpenAPIConversionEventsDataInner::ActionSourceEnum::AppIos },
		{ TEXT("web"), OpenAPIConversionEventsDataInner::ActionSourceEnum::Web },
		{ TEXT("offline"), OpenAPIConversionEventsDataInner::ActionSourceEnum::Offline }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIConversionEventsDataInner::EnumFromString(const FString& EnumAsString, OpenAPIConversionEventsDataInner::ActionSourceEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIConversionEventsDataInner::ActionSourceEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIConversionEventsDataInner::ActionSourceEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIConversionEventsDataInner::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("event_name")); WriteJsonValue(Writer, EventName);
	Writer->WriteIdentifierPrefix(TEXT("action_source")); WriteJsonValue(Writer, ActionSource);
	Writer->WriteIdentifierPrefix(TEXT("event_time")); WriteJsonValue(Writer, EventTime);
	Writer->WriteIdentifierPrefix(TEXT("event_id")); WriteJsonValue(Writer, EventId);
	if (EventSourceUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("event_source_url")); WriteJsonValue(Writer, EventSourceUrl.GetValue());
	}
	if (OptOut.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("opt_out")); WriteJsonValue(Writer, OptOut.GetValue());
	}
	if (PartnerName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("partner_name")); WriteJsonValue(Writer, PartnerName.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("user_data")); WriteJsonValue(Writer, UserData);
	if (CustomData.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data")); WriteJsonValue(Writer, CustomData.GetValue());
	}
	if (AppId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("app_id")); WriteJsonValue(Writer, AppId.GetValue());
	}
	if (AppName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("app_name")); WriteJsonValue(Writer, AppName.GetValue());
	}
	if (AppVersion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("app_version")); WriteJsonValue(Writer, AppVersion.GetValue());
	}
	if (DeviceBrand.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("device_brand")); WriteJsonValue(Writer, DeviceBrand.GetValue());
	}
	if (DeviceCarrier.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("device_carrier")); WriteJsonValue(Writer, DeviceCarrier.GetValue());
	}
	if (DeviceModel.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("device_model")); WriteJsonValue(Writer, DeviceModel.GetValue());
	}
	if (DeviceType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("device_type")); WriteJsonValue(Writer, DeviceType.GetValue());
	}
	if (OsVersion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("os_version")); WriteJsonValue(Writer, OsVersion.GetValue());
	}
	if (Wifi.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("wifi")); WriteJsonValue(Writer, Wifi.GetValue());
	}
	if (Language.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("language")); WriteJsonValue(Writer, Language.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIConversionEventsDataInner::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_name"), EventName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("action_source"), ActionSource);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_time"), EventTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_id"), EventId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("event_source_url"), EventSourceUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("opt_out"), OptOut);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("partner_name"), PartnerName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("user_data"), UserData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("custom_data"), CustomData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("app_id"), AppId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("app_name"), AppName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("app_version"), AppVersion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("device_brand"), DeviceBrand);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("device_carrier"), DeviceCarrier);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("device_model"), DeviceModel);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("device_type"), DeviceType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("os_version"), OsVersion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("wifi"), Wifi);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("language"), Language);

	return ParseSuccess;
}

}
