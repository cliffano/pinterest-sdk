/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CampaignResponseAllOf1 : IEquatable<CampaignResponseAllOf1>
    {
        /// <summary>
        /// Gets or Sets ObjectiveType
        /// </summary>
        [DataMember(Name="objective_type", EmitDefaultValue=false)]
        public ObjectiveType ObjectiveType { get; set; }

        /// <summary>
        /// Campaign creation time. Unix timestamp in seconds.
        /// </summary>
        /// <value>Campaign creation time. Unix timestamp in seconds.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public int CreatedTime { get; set; }

        /// <summary>
        /// UTC timestamp. Last update time.
        /// </summary>
        /// <value>UTC timestamp. Last update time.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public int UpdatedTime { get; set; }

        /// <summary>
        /// Always \&quot;campaign\&quot;.
        /// </summary>
        /// <value>Always \&quot;campaign\&quot;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignResponseAllOf1 {\n");
            sb.Append("  ObjectiveType: ").Append(ObjectiveType).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CampaignResponseAllOf1)obj);
        }

        /// <summary>
        /// Returns true if CampaignResponseAllOf1 instances are equal
        /// </summary>
        /// <param name="other">Instance of CampaignResponseAllOf1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignResponseAllOf1 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ObjectiveType == other.ObjectiveType ||
                    
                    ObjectiveType.Equals(other.ObjectiveType)
                ) && 
                (
                    CreatedTime == other.CreatedTime ||
                    
                    CreatedTime.Equals(other.CreatedTime)
                ) && 
                (
                    UpdatedTime == other.UpdatedTime ||
                    
                    UpdatedTime.Equals(other.UpdatedTime)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ObjectiveType.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedTime.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CampaignResponseAllOf1 left, CampaignResponseAllOf1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CampaignResponseAllOf1 left, CampaignResponseAllOf1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
