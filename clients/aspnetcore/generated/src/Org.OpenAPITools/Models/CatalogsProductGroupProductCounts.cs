/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Product counts for a CatalogsProductGroup
    /// </summary>
    [DataContract]
    public partial class CatalogsProductGroupProductCounts : IEquatable<CatalogsProductGroupProductCounts>
    {
        /// <summary>
        /// Gets or Sets InStock
        /// </summary>
        [Required]
        [DataMember(Name="in_stock", EmitDefaultValue=true)]
        public decimal InStock { get; set; }

        /// <summary>
        /// Gets or Sets OutOfStock
        /// </summary>
        [Required]
        [DataMember(Name="out_of_stock", EmitDefaultValue=true)]
        public decimal OutOfStock { get; set; }

        /// <summary>
        /// Gets or Sets Preorder
        /// </summary>
        [Required]
        [DataMember(Name="preorder", EmitDefaultValue=true)]
        public decimal Preorder { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [Required]
        [DataMember(Name="total", EmitDefaultValue=true)]
        public decimal Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogsProductGroupProductCounts {\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("  OutOfStock: ").Append(OutOfStock).Append("\n");
            sb.Append("  Preorder: ").Append(Preorder).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CatalogsProductGroupProductCounts)obj);
        }

        /// <summary>
        /// Returns true if CatalogsProductGroupProductCounts instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogsProductGroupProductCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogsProductGroupProductCounts other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InStock == other.InStock ||
                    
                    InStock.Equals(other.InStock)
                ) && 
                (
                    OutOfStock == other.OutOfStock ||
                    
                    OutOfStock.Equals(other.OutOfStock)
                ) && 
                (
                    Preorder == other.Preorder ||
                    
                    Preorder.Equals(other.Preorder)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + InStock.GetHashCode();
                    
                    hashCode = hashCode * 59 + OutOfStock.GetHashCode();
                    
                    hashCode = hashCode * 59 + Preorder.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CatalogsProductGroupProductCounts left, CatalogsProductGroupProductCounts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogsProductGroupProductCounts left, CatalogsProductGroupProductCounts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
