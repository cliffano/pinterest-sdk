/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using JsonSubTypes;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Describes the valid schema for possible OAuth access token requests.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "GrantType")]
    [JsonSubtypes.KnownSubType(typeof(OauthAccessTokenRequestCode), "authorization_code")]
    [JsonSubtypes.KnownSubType(typeof(OauthAccessTokenRequestRefresh), "refresh_token")]
    public partial class OauthAccessTokenRequest : IEquatable<OauthAccessTokenRequest>
    {

        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<GrantTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GrantTypeEnum
        {
            
            /// <summary>
            /// Enum AuthorizationCodeEnum for authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            AuthorizationCodeEnum = 1,
            
            /// <summary>
            /// Enum RefreshTokenEnum for refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            RefreshTokenEnum = 2
        }

        /// <summary>
        /// Gets or Sets GrantType
        /// </summary>
        [Required]
        [DataMember(Name="grant_type", EmitDefaultValue=false)]
        public GrantTypeEnum GrantType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OauthAccessTokenRequest {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OauthAccessTokenRequest)obj);
        }

        /// <summary>
        /// Returns true if OauthAccessTokenRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of OauthAccessTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OauthAccessTokenRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GrantType == other.GrantType ||
                    
                    GrantType.Equals(other.GrantType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + GrantType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OauthAccessTokenRequest left, OauthAccessTokenRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OauthAccessTokenRequest left, OauthAccessTokenRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
