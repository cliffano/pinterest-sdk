/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.12.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;https://developers.pinterest.com/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class AdGroupCommonTrackingUrls : IEquatable<AdGroupCommonTrackingUrls>
    {
        /// <summary>
        /// Gets or Sets Impression
        /// </summary>
        [DataMember(Name="impression", EmitDefaultValue=false)]
        public List<string> Impression { get; set; }

        /// <summary>
        /// Gets or Sets Click
        /// </summary>
        [DataMember(Name="click", EmitDefaultValue=false)]
        public List<string> Click { get; set; }

        /// <summary>
        /// Gets or Sets Engagement
        /// </summary>
        [DataMember(Name="engagement", EmitDefaultValue=false)]
        public List<string> Engagement { get; set; }

        /// <summary>
        /// Gets or Sets BuyableButton
        /// </summary>
        [DataMember(Name="buyable_button", EmitDefaultValue=false)]
        public List<string> BuyableButton { get; set; }

        /// <summary>
        /// Gets or Sets AudienceVerification
        /// </summary>
        [DataMember(Name="audience_verification", EmitDefaultValue=false)]
        public List<string> AudienceVerification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdGroupCommonTrackingUrls {\n");
            sb.Append("  Impression: ").Append(Impression).Append("\n");
            sb.Append("  Click: ").Append(Click).Append("\n");
            sb.Append("  Engagement: ").Append(Engagement).Append("\n");
            sb.Append("  BuyableButton: ").Append(BuyableButton).Append("\n");
            sb.Append("  AudienceVerification: ").Append(AudienceVerification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdGroupCommonTrackingUrls)obj);
        }

        /// <summary>
        /// Returns true if AdGroupCommonTrackingUrls instances are equal
        /// </summary>
        /// <param name="other">Instance of AdGroupCommonTrackingUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdGroupCommonTrackingUrls other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Impression == other.Impression ||
                    Impression != null &&
                    other.Impression != null &&
                    Impression.SequenceEqual(other.Impression)
                ) && 
                (
                    Click == other.Click ||
                    Click != null &&
                    other.Click != null &&
                    Click.SequenceEqual(other.Click)
                ) && 
                (
                    Engagement == other.Engagement ||
                    Engagement != null &&
                    other.Engagement != null &&
                    Engagement.SequenceEqual(other.Engagement)
                ) && 
                (
                    BuyableButton == other.BuyableButton ||
                    BuyableButton != null &&
                    other.BuyableButton != null &&
                    BuyableButton.SequenceEqual(other.BuyableButton)
                ) && 
                (
                    AudienceVerification == other.AudienceVerification ||
                    AudienceVerification != null &&
                    other.AudienceVerification != null &&
                    AudienceVerification.SequenceEqual(other.AudienceVerification)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Impression != null)
                    hashCode = hashCode * 59 + Impression.GetHashCode();
                    if (Click != null)
                    hashCode = hashCode * 59 + Click.GetHashCode();
                    if (Engagement != null)
                    hashCode = hashCode * 59 + Engagement.GetHashCode();
                    if (BuyableButton != null)
                    hashCode = hashCode * 59 + BuyableButton.GetHashCode();
                    if (AudienceVerification != null)
                    hashCode = hashCode * 59 + AudienceVerification.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdGroupCommonTrackingUrls left, AdGroupCommonTrackingUrls right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdGroupCommonTrackingUrls left, AdGroupCommonTrackingUrls right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
