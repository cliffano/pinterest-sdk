/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: pinterest-api@pinterest.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserAccountApiController : ControllerBase
    { 
        /// <summary>
        /// Get user account analytics
        /// </summary>
        /// <remarks>Get analytics for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;.</remarks>
        /// <param name="startDate">Metric report start date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="endDate">Metric report end date (UTC). Format: YYYY-MM-DD</param>
        /// <param name="fromClaimedContent">Filter on Pins that match your claimed domain.</param>
        /// <param name="pinFormat">Pin formats to get data for, default is all.</param>
        /// <param name="appTypes">Apps or devices to get data for, default is all.</param>
        /// <param name="metricTypes">Metric types to get data for, default is all. </param>
        /// <param name="splitField">How to split the data into groups. Not including this param means data won&#39;t be split.</param>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Not authorized to access the user account analytics.</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/user_account/analytics")]
        [ValidateModelState]
        [SwaggerOperation("UserAccountAnalytics")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dictionary<string, AnalyticsMetricsResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Not authorized to access the user account analytics.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult UserAccountAnalytics([FromQuery (Name = "start_date")][Required()]DateTime startDate, [FromQuery (Name = "end_date")][Required()]DateTime endDate, [FromQuery (Name = "from_claimed_content")]string fromClaimedContent, [FromQuery (Name = "pin_format")]string pinFormat, [FromQuery (Name = "app_types")]string appTypes, [FromQuery (Name = "metric_types")]List<string> metricTypes, [FromQuery (Name = "split_field")]string splitField, [FromQuery (Name = "ad_account_id")][RegularExpression("^\\d+$")]string adAccountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dictionary<string, AnalyticsMetricsResponse>));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Dictionary<string, AnalyticsMetricsResponse>>(exampleJson)
            : default(Dictionary<string, AnalyticsMetricsResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user account
        /// </summary>
        /// <remarks>Get account information for the \&quot;operation user_account\&quot; - By default, the \&quot;operation user_account\&quot; is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \&quot;operation user_account\&quot;. See &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-business-access&#39;&gt;Understanding Business Access&lt;/a&gt; for more information.</remarks>
        /// <param name="adAccountId">Unique identifier of an ad account.</param>
        /// <response code="200">response</response>
        /// <response code="403">Not authorized to access the user account.</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/user_account")]
        [ValidateModelState]
        [SwaggerOperation("UserAccountGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "response")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Not authorized to access the user account.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult UserAccountGet([FromQuery (Name = "ad_account_id")][RegularExpression("^\\d+$")]string adAccountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"account_type\" : \"PINNER\",\n  \"profile_image\" : \"profile_image\",\n  \"website_url\" : \"website_url\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
