/*
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CatalogsApiController : ControllerBase
    { 
        /// <summary>
        /// Create product group
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create product group to use in Catalogs.</remarks>
        /// <param name="catalogsProductGroupCreateRequest">Request object used to created a catalogs product group.</param>
        /// <response code="201">Success</response>
        /// <response code="400">Invalid body.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="403">Forbidden. Account not approved for feed mutations yet.</response>
        /// <response code="409">Conflict. Can&#39;t create this catalogs product group with this value.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPost]
        [Route("/v5/catalogs/product_groups")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CatalogsProductGroupsCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(Object), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid body.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden. Account not approved for feed mutations yet.")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict. Can&#39;t create this catalogs product group with this value.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CatalogsProductGroupsCreate([FromBody]CatalogsProductGroupCreateRequest catalogsProductGroupCreateRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete product group
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a product group from being in use in Catalogs.</remarks>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <response code="204">Catalogs Product Group deleted successfully.</response>
        /// <response code="400">Invalid catalogs product group id parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="403">Forbidden. Account not approved for feed mutations yet.</response>
        /// <response code="404">Catalogs product group not found.</response>
        /// <response code="409">Conflict. Can&#39;t delete this catalogs product group.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpDelete]
        [Route("/v5/catalogs/product_groups/{product_group_id}")]
        [ValidateModelState]
        [SwaggerOperation("CatalogsProductGroupsDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid catalogs product group id parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden. Account not approved for feed mutations yet.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Catalogs product group not found.")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict. Can&#39;t delete this catalogs product group.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CatalogsProductGroupsDelete([FromRoute (Name = "product_group_id")][Required][RegularExpression("^\\d+$")]string productGroupId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get product groups list
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a list of product groups for a given Catalogs Feed Id.</remarks>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid feed parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="403">Forbidden. Account not approved for feed mutations yet.</response>
        /// <response code="404">Data feed not found.</response>
        /// <response code="409">Conflict. Can&#39;t create this catalogs product group with this value.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/v5/catalogs/product_groups")]
        [ValidateModelState]
        [SwaggerOperation("CatalogsProductGroupsList")]
        [SwaggerResponse(statusCode: 200, type: typeof(Paginated), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid feed parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden. Account not approved for feed mutations yet.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Data feed not found.")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict. Can&#39;t create this catalogs product group with this value.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CatalogsProductGroupsList([FromQuery (Name = "feed_id")][Required()][RegularExpression("^\\d+$")]string feedId, [FromQuery (Name = "bookmark")]string bookmark, [FromQuery (Name = "page_size")][Range(1, 100)]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Paginated));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Paginated>(exampleJson)
            : default(Paginated);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update product group
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update product group to use in Catalogs.</remarks>
        /// <param name="productGroupId">Unique identifier of a product group</param>
        /// <param name="catalogsProductGroupUpdateRequest">Request object used to Update a catalogs product group.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="404">Catalogs product group not found.</response>
        /// <response code="409">Conflict. Can&#39;t update this catalogs product group to this value.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpPatch]
        [Route("/v5/catalogs/product_groups/{product_group_id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CatalogsProductGroupsUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CatalogsProductGroup), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Catalogs product group not found.")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict. Can&#39;t update this catalogs product group to this value.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult CatalogsProductGroupsUpdate([FromRoute (Name = "product_group_id")][Required][RegularExpression("^\\d+$")]string productGroupId, [FromBody]CatalogsProductGroupUpdateRequest catalogsProductGroupUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CatalogsProductGroup));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : 1622742155000,\n  \"name\" : \"Most Popular\",\n  \"description\" : \"description\",\n  \"created_at\" : 1621350033000,\n  \"id\" : \"2680059592705\",\n  \"type\" : \"TOP_SELLERS\",\n  \"feed_id\" : \"feed_id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsProductGroup>(exampleJson)
            : default(CatalogsProductGroup);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List processing results for a given feed
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch a feed processing results owned by the owner user account.</remarks>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="bookmark">Cursor used to fetch the next page of items</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="404">Feed not found.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/v5/catalogs/feeds/{feed_id}/processing_results")]
        [ValidateModelState]
        [SwaggerOperation("FeedProcessingResultsList")]
        [SwaggerResponse(statusCode: 200, type: typeof(Paginated), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Feed not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult FeedProcessingResultsList([FromRoute (Name = "feed_id")][Required][RegularExpression("^\\d+$")]string feedId, [FromQuery (Name = "bookmark")]string bookmark, [FromQuery (Name = "page_size")][Range(1, 100)]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Paginated));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Paginated>(exampleJson)
            : default(Paginated);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create feed
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Create a new feed owned by the \&quot;operating user_account\&quot;.</remarks>
        /// <param name="catalogsFeedsCreateRequest">Request object used to created a feed.</param>
        /// <response code="201">Success</response>
        /// <response code="400">Invalid feed parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="403">Business account required.</response>
        /// <response code="409">User website required.</response>
        /// <response code="422">Unique feed name is required.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/v5/catalogs/feeds")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("FeedsCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(CatalogsFeed), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid feed parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Business account required.")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "User website required.")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unique feed name is required.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult FeedsCreate([FromBody]CatalogsFeedsCreateRequest catalogsFeedsCreateRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CatalogsFeed));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsFeed>(exampleJson)
            : default(CatalogsFeed);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete feed
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Delete a feed owned by the \&quot;operating user_account\&quot;.</remarks>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <response code="204">Feed deleted successfully.</response>
        /// <response code="400">Invalid feed parameters.</response>
        /// <response code="403">Forbidden. Account not approved for feed mutations yet.</response>
        /// <response code="404">Data feed not found.</response>
        /// <response code="409">Conflict. Can&#39;t delete a feed with active promotions.</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/v5/catalogs/feeds/{feed_id}")]
        [ValidateModelState]
        [SwaggerOperation("FeedsDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid feed parameters.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden. Account not approved for feed mutations yet.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Data feed not found.")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict. Can&#39;t delete a feed with active promotions.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult FeedsDelete([FromRoute (Name = "feed_id")][Required][RegularExpression("^\\d+$")]string feedId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get feed
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single feed owned by the \&quot;operating user_account\&quot;.</remarks>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid feed parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="404">Data feed not found.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/v5/catalogs/feeds/{feed_id}")]
        [ValidateModelState]
        [SwaggerOperation("FeedsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CatalogsFeed), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid feed parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Data feed not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult FeedsGet([FromRoute (Name = "feed_id")][Required][RegularExpression("^\\d+$")]string feedId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CatalogsFeed));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsFeed>(exampleJson)
            : default(CatalogsFeed);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List feeds
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Fetch feeds owned by the \&quot;operating user_account\&quot;.</remarks>
        /// <param name="bookmark">Cursor used to fetch the next page of items</param>
        /// <param name="pageSize">Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Pagination&#39;&gt;Pagination&lt;/a&gt; for more information.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid parameters.</response>
        /// <response code="401">Unauthorized access.</response>
        /// <response code="0">Unexpected error.</response>
        [HttpGet]
        [Route("/v5/catalogs/feeds")]
        [ValidateModelState]
        [SwaggerOperation("FeedsList")]
        [SwaggerResponse(statusCode: 200, type: typeof(Paginated), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized access.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error.")]
        public virtual IActionResult FeedsList([FromQuery (Name = "bookmark")]string bookmark, [FromQuery (Name = "page_size")][Range(1, 100)]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Paginated));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Paginated>(exampleJson)
            : default(Paginated);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update feed
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Update a feed owned by the \&quot;operating user_account\&quot;.</remarks>
        /// <param name="feedId">Unique identifier of a feed</param>
        /// <param name="catalogsFeedsUpdateRequest">Request object used to update a feed.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid feed parameters.</response>
        /// <response code="403">Forbidden. Account not approved for feed mutations yet.</response>
        /// <response code="404">Data feed not found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPatch]
        [Route("/v5/catalogs/feeds/{feed_id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("FeedsUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CatalogsFeed), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid feed parameters.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden. Account not approved for feed mutations yet.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Data feed not found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult FeedsUpdate([FromRoute (Name = "feed_id")][Required][RegularExpression("^\\d+$")]string feedId, [FromBody]CatalogsFeedsUpdateRequest catalogsFeedsUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CatalogsFeed));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsFeed>(exampleJson)
            : default(CatalogsFeed);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get catalogs items batch
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  Get a single catalogs items batch created by the \&quot;operating user_account\&quot;.</remarks>
        /// <param name="batchId">Id of a catalogs items batch to fetch</param>
        /// <response code="200">Response containing the requested catalogs items batch</response>
        /// <response code="401">Not authorized to access catalogs items batch</response>
        /// <response code="403">Not authorized to access catalogs items batch</response>
        /// <response code="404">Catalogs items batch not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/catalogs/items/batch/{batch_id}")]
        [ValidateModelState]
        [SwaggerOperation("ItemsBatchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CatalogsItemsBatch), description: "Response containing the requested catalogs items batch")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Not authorized to access catalogs items batch")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Not authorized to access catalogs items batch")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Catalogs items batch not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult ItemsBatchGet([FromRoute (Name = "batch_id")][Required]string batchId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CatalogsItemsBatch));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"created_time\" : \"2020-01-01T20:10:40Z\",\n  \"completed_time\" : \"2022-03-10T15:37:10Z\",\n  \"batch_id\" : \"595953100599279259-66753b9bb65c46c49bd8503b27fecf9e\",\n  \"items\" : [ {\n    \"item_id\" : \"DS0294-M\",\n    \"warnings\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"errors\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"status\" : \"SUCCESS\"\n  }, {\n    \"item_id\" : \"DS0294-M\",\n    \"warnings\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"errors\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"status\" : \"SUCCESS\"\n  } ],\n  \"status\" : \"PROCESSING\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsItemsBatch>(exampleJson)
            : default(CatalogsItemsBatch);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Perform an operation on an item batch
        /// </summary>
        /// <remarks>&lt;strong&gt;This endpoint is currently in beta and not available to all apps. &lt;a href&#x3D;&#39;/docs/api/v5/#tag/Understanding-catalog-management&#39;&gt;Learn more&lt;/a&gt;.&lt;/strong&gt;  This endpoint supports multiple operations on a set of one or more catalog items.</remarks>
        /// <param name="catalogsItemsBatchRequest">Request object used to create catalogs items in a batch</param>
        /// <response code="200">Response containing the requested catalogs items batch</response>
        /// <response code="401">Not authorized to post catalogs items</response>
        /// <response code="403">Not authorized to post catalogs items</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/v5/catalogs/items/batch")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ItemsBatchPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CatalogsItemsBatch), description: "Response containing the requested catalogs items batch")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Not authorized to post catalogs items")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Not authorized to post catalogs items")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult ItemsBatchPost([FromBody]CatalogsItemsBatchRequest catalogsItemsBatchRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CatalogsItemsBatch));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"created_time\" : \"2020-01-01T20:10:40Z\",\n  \"completed_time\" : \"2022-03-10T15:37:10Z\",\n  \"batch_id\" : \"595953100599279259-66753b9bb65c46c49bd8503b27fecf9e\",\n  \"items\" : [ {\n    \"item_id\" : \"DS0294-M\",\n    \"warnings\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"errors\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"status\" : \"SUCCESS\"\n  }, {\n    \"item_id\" : \"DS0294-M\",\n    \"warnings\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"errors\" : [ {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    }, {\n      \"code\" : 106,\n      \"attribute\" : \"title\",\n      \"message\" : \"Title is missing from product metadata.\"\n    } ],\n    \"status\" : \"SUCCESS\"\n  } ],\n  \"status\" : \"PROCESSING\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsItemsBatch>(exampleJson)
            : default(CatalogsItemsBatch);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get catalogs items
        /// </summary>
        /// <remarks>Get the items of the catalog created by the \&quot;operating user_account\&quot;</remarks>
        /// <param name="country">Country for the Catalogs Items</param>
        /// <param name="itemIds">Catalos Item ids</param>
        /// <param name="language">Language for the Catalogs Items</param>
        /// <response code="200">Response containing the requested catalogs items</response>
        /// <response code="401">Not authorized to access catalogs items</response>
        /// <response code="403">Not authorized to access catalogs items</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/v5/catalogs/items")]
        [ValidateModelState]
        [SwaggerOperation("ItemsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CatalogsItems), description: "Response containing the requested catalogs items")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Not authorized to access catalogs items")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Not authorized to access catalogs items")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult ItemsGet([FromQuery (Name = "country")][Required()]string country, [FromQuery (Name = "item_ids")][Required()]List<string> itemIds, [FromQuery (Name = "language")][Required()]string language)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CatalogsItems));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"items\" : [ {\n    \"item_id\" : \"DS0294-M\",\n    \"attributes\" : {\n      \"custom_label_4\" : \"Man hat\",\n      \"custom_label_3\" : \"Woman dress\",\n      \"custom_label_2\" : \"Winter sales\",\n      \"shipping_width\" : \"16 in\",\n      \"custom_label_1\" : \"Summer promotion\",\n      \"color\" : \"blue\",\n      \"gender\" : \"unisex\",\n      \"item_group_id\" : \"DS0294\",\n      \"link\" : \"https://www.example.com/cat/womens-clothing/denim-shirt-0294\",\n      \"pattern\" : \"plaid\",\n      \"additional_image_link\" : [ \"https://scene.example.com/image/image_v2.jpg\", \"https://scene.example.com/image/image_v3.jpg\" ],\n      \"description\" : \"Casual fit denim shirt made with the finest quality Japanese denim.\",\n      \"availability\" : \"in stock\",\n      \"number_of_reviews\" : 10,\n      \"custom_label_0\" : \"Best sellers\",\n      \"title\" : \"Women’s denim shirt, large\",\n      \"average_review_rating\" : 5,\n      \"shipping\" : \"US:CA:Ground:0 USD\",\n      \"price\" : \"24.99 USD\",\n      \"ad_link\" : \"https://www.example.com/cat/denim-shirt/item012?utm_source=Pinterest\",\n      \"mobile_link\" : \"https://m.example.com/cat/womens-clothing/denim-shirt-0294\",\n      \"id\" : \"DS0294-L\",\n      \"min_ad_price\" : \"19.99 USD\",\n      \"brand\" : \"Josie’s Denim\",\n      \"google_product_category\" : \"Apparel & Accessories > Clothing > Shirts & Tops\",\n      \"gtin\" : 3234567890126,\n      \"image_link\" : [ \"https://scene.example.com/image/image.jpg\" ],\n      \"size_type\" : \"regular\",\n      \"age_group\" : \"newborn\",\n      \"free_shipping_label\" : true,\n      \"free_shipping_limit\" : \"35 USD\",\n      \"mpn\" : \"PI12345NTEREST\",\n      \"tax\" : \"US:1025433:6.00:y\",\n      \"sale_price\" : \"14.99 USD\",\n      \"shipping_height\" : \"12 in\",\n      \"condition\" : \"new\",\n      \"product_type\" : \"Clothing > Women’s > Shirts > Denim\",\n      \"last_updated_time\" : 1641483432072,\n      \"material\" : \"cotton\",\n      \"size\" : \"M\",\n      \"size_system\" : \"US\",\n      \"number_of_ratings\" : 10,\n      \"shipping_weight\" : \"3 kg\",\n      \"adult\" : true\n    }\n  }, {\n    \"item_id\" : \"DS0294-M\",\n    \"attributes\" : {\n      \"custom_label_4\" : \"Man hat\",\n      \"custom_label_3\" : \"Woman dress\",\n      \"custom_label_2\" : \"Winter sales\",\n      \"shipping_width\" : \"16 in\",\n      \"custom_label_1\" : \"Summer promotion\",\n      \"color\" : \"blue\",\n      \"gender\" : \"unisex\",\n      \"item_group_id\" : \"DS0294\",\n      \"link\" : \"https://www.example.com/cat/womens-clothing/denim-shirt-0294\",\n      \"pattern\" : \"plaid\",\n      \"additional_image_link\" : [ \"https://scene.example.com/image/image_v2.jpg\", \"https://scene.example.com/image/image_v3.jpg\" ],\n      \"description\" : \"Casual fit denim shirt made with the finest quality Japanese denim.\",\n      \"availability\" : \"in stock\",\n      \"number_of_reviews\" : 10,\n      \"custom_label_0\" : \"Best sellers\",\n      \"title\" : \"Women’s denim shirt, large\",\n      \"average_review_rating\" : 5,\n      \"shipping\" : \"US:CA:Ground:0 USD\",\n      \"price\" : \"24.99 USD\",\n      \"ad_link\" : \"https://www.example.com/cat/denim-shirt/item012?utm_source=Pinterest\",\n      \"mobile_link\" : \"https://m.example.com/cat/womens-clothing/denim-shirt-0294\",\n      \"id\" : \"DS0294-L\",\n      \"min_ad_price\" : \"19.99 USD\",\n      \"brand\" : \"Josie’s Denim\",\n      \"google_product_category\" : \"Apparel & Accessories > Clothing > Shirts & Tops\",\n      \"gtin\" : 3234567890126,\n      \"image_link\" : [ \"https://scene.example.com/image/image.jpg\" ],\n      \"size_type\" : \"regular\",\n      \"age_group\" : \"newborn\",\n      \"free_shipping_label\" : true,\n      \"free_shipping_limit\" : \"35 USD\",\n      \"mpn\" : \"PI12345NTEREST\",\n      \"tax\" : \"US:1025433:6.00:y\",\n      \"sale_price\" : \"14.99 USD\",\n      \"shipping_height\" : \"12 in\",\n      \"condition\" : \"new\",\n      \"product_type\" : \"Clothing > Women’s > Shirts > Denim\",\n      \"last_updated_time\" : 1641483432072,\n      \"material\" : \"cotton\",\n      \"size\" : \"M\",\n      \"size_system\" : \"US\",\n      \"number_of_ratings\" : 10,\n      \"shipping_weight\" : \"3 kg\",\n      \"adult\" : true\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CatalogsItems>(exampleJson)
            : default(CatalogsItems);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
